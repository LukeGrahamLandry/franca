// Debugging
fn print(Any) Unit;
fn assert_eq(Any, Any) bool;

// Math
fn add(i64, i64) i64;
fn sub(i64, i64) i64;
fn mul(i64, i64) i64;
fn div(i64, i64) i64;
fn eq(i64, i64) i64;
fn ne(i64, i64) i64;
fn lt(i64, i64) i64;
fn gt(i64, i64) i64;
fn le(i64, i64) i64;
fn ge(i64, i64) i64;

// Simple types
fn Ptr(inner: Type) Type;
fn Slice(inner: Type) Type;
fn Fn(arg: Type, ret: Type) Type;

// Working with pointers
fn get(ptr: Ptr(Any)) Any;
fn set(ptr: Ptr(Any), value: Any) Unit;
fn len(ptr: Ptr(Any)) i64;
fn slice(ptr: Ptr(Any), first: i64, one_past_last: i64) Ptr(Any);
fn alloc(T: Type, count: i64) Ptr(Any); 
fn dealloc(T: Type, count: i64, ptr: Ptr(Any)) Unit;

// Inspecting the interpreter
fn is_comptime() bool;
fn is_uninit(_: Ptr(Any)) bool;
fn is_oob_stack(_: Ptr(Any)) bool;
fn print_callstack() Unit;
fn comptime_cache_get(f: Fn(Any, Any), arg: Any) (bool, Any) Unit;
fn comptime_cache_insert(f: Fn(Any, Any), arg: Any, ret: Any) Unit;
