//
// Parse the typescript interface definitions from https://github.com/microsoft/language-server-protocol/blob/gh-pages/_specifications/lsp/3.17/specification.md
// and generate types in this language's comptime.
// I'm reinventing F# https://learn.microsoft.com/en-us/dotnet/fsharp/tutorials/type-providers 
//

//
// struct TsTypes = {
//     decls: Slice(
//         { name: Str, cases: Array(Str) }
//         | { name: Str, fields: { opt: bool, cases: Array(Str) } }
//     )
// };
// fn parse(Str) TsTypes;
//
const (TsTypes, parse) = combinator(ts_type_spec());

fn ts_type_spec() Grammar = Seq([
    ("decls", many(
        choice([ts_enum(), ts_interface()])
    ))
]);

fn ts_enum() Grammar = seq([
    lit("export type")
    ("name", Str, ident),
    lit("="),
    ts_type(),
    lit(";"),
]);

fn ts_interface() Grammar = Seq([
    lit("interface"), 
    ("name", Str, ident),
    optional(seq([
        lit("extends"),
        ("parent", Str, ident),
    ])),
    lit("{"),
    ("fields", Slice(_), many(
        ("name", Str, ident),
        ("opt", bool, is_present(optional(lit("?")))),
        lit(":"),
        ts_type(),
        lit(";"),
    )),
    lit("}"),
]);

fn ts_type() Grammar = Seq([
    ("cases", Slice(Str), many_sep(ident, hide(lit("|")))),
]);
