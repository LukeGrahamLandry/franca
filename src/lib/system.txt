struct ProcessResult = using({stdout: String, stderr: String}, Result((), i64));

struct Path = (Str);
enum FileErr = NotExists | NoPermission | Other;
fn from((s): Path) Str = s;
fn try_from(Str) ?Path;

struct Pid = (i64);
enum Forked = InParent { child: Pid } | InChild;
struct Url = (Str);

@module(name=process, impl=libc) when @module(libc) {
    @pub @explicit_comptime @impure 
    fn system(Str) ProcessResult;
    
    @pub @explicit_comptime @impure 
    fn system(Str(Slice)) ProcessResult;
    
    @pub @runtime @impure 
    fn fork() Forked;
}

@module(name=io, impl=libc) when @module(libc) {
    @pub @explicit_comptime 
    fn cli_args() Slice(Str);
    
    /// At comptime, call compile error instead. 
    @pub @runtime @impure 
    fn exit(status: i64) Never;
    
    /// Read from stdin. Block the thread until there's a new line character. 
    @pub @explicit_comptime @impure 
    fn read_line() String;
    
    @pub 
    fn input(msg: Str) String = {
        print(msg);
        read_line()
    }
}

@module(name=files, impl=libc) when @module(libc) {
    @pub struct File;
    
    @pub struct OpenFlags = FlagSet(Create | Read | Write | Append);
    
    @pub @env @impure 
    fn open(Path, OpenFlags) Result(File, FileErr);
    
    // Reads until the file runs out or the slice is full. 
    @pub @env @impure 
    fn read(&File, Slice) Result(Slice, FileErr);
    
    // TODO: why isn't it an error if you can't write the whole thing? 
    // Returns the portion of the slice that was not written. 
    @pub @env @impure 
    fn write(&File, Slice) Result(Slice, FileErr);

    @pub @env @impure 
    fn read_all(Path) Result(Array(u8), FileErr);
    
    // TODO: its a problem that string casts to path, you might get the argument order wrong. 
    @pub @env @impure 
    fn write_all(Path, Str, create: bool = true) Result((), FileErr);
}

@module(name=files, impl=libc, cond=RuntimeOnly) when @module(libc) {
    @pub struct Thread; 
    
    /// Safety: do not share mutable data between threads. 
    @pub @unsafe @impure 
    fn thread(fn()) Thread;
    
    /// Returns an error if the other thread panics/
    @pub @impure 
    fn join(Thread) Result((), ());
    
    @pub @impure 
    fn detatch(Thread);
}

@module(name=time, impl=libc) when @module(libc) {
    @pub struct Timer; 
    
    @pub @impure 
    fn start_timer() Timer;
    @pub @impure 
    fn end_timer(Timer) Duration;
}

enum HttpErr = Status(i64) | Other;
@module(name=requests, impl=libcurl) when @module(libcurl) {
    @pub @explicit_comptime @impure 
    fn request_get(Url) Result(Array(u8), HttpErr);
}
