struct ProcessResult = using({stdout: String, stderr: String}, Result((), i64));

struct Path = (Str);
enum FileErr = NotExists | NoPermission | Other;
fn from((s): Path) Str = s;
fn try_from(Str) ?Path;

struct Pid = (i64);
enum Forked = InParent { child: Pid} | InChild;

when has_libc() {
    @explicit_comptime fn cli_args() Slice(Str);
    @explicit_comptime fn exit(status: i64) Never;
    
    @explicit_comptime fn system(Str) ProcessResult;
    @explicit_comptime fn system(Str(Slice)) ProcessResult;
    
    @explicit_comptime fn read_all(Path) Result(Array(u8), FileErr);
    @explicit_comptime fn write_all(Str, Path, create: bool = true) Result((), FileErr);
    
    @runtime fn fork() Forked;
    
    struct Thread = @intrinsic;
    
    /// Safety: do not share mutable data between threads. 
    @runtime @unsafe fn thread(fn()) Thread;
    @runtime fn join(Thread);
    @runtime fn detatch(Thread);
}
