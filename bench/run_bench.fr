Lang :: @enum(i64) (fr, lua, py, js, go, rs, java, zig);  ::enum(Lang);
Program :: @enum(i64) (mandelbrot, hello);  ::enum(Program);

fn main() = {
    for_enum Program { (program: Program) | 
        for_enum Lang { (lang: Lang) |
            continue :: local_return;
            path := (@format("bench/%/%.%", program, program, lang) temp()).items();
            if !file_exists(path) {|
                @println("File % not found.", path);
                continue();
            };
            
            @match(lang) {
                fn fr() => run_bench(@slice("franca", path));
                fn lua() => {
                    run_bench(@slice("luajit", path));
                    run_bench(@slice("lua", path));
                }
                fn py() => run_bench(@slice("python3", path));
                fn rs() => run_bench(@slice("cargo", "-Zscript", path));
                fn go() => run_bench(@slice("go", "run", path));
                fn js() => run_bench(@slice("node", path));
                fn zig() => run_bench(@slice("zig", "run", path));
                fn java() => run_bench(@slice("java", path));
            };
        };
    };
}

run_bench :: fn(args: []Str) void = {
    start := timestamp();
    x := args.slice_last(1);
    run_cmd_blocking("touch", x.unwrap());
    success, out, err := exec_and_catch(args[0], args.rest(1), temp());
    if !success {|
        @println("Failed to run %. % %", args[0], out.items(), err.items());
    };
    end := timestamp();
    @println("Ran % in % ms", args, end - start);
    //println(out.items());
}
