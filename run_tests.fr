HUSH :: @static(bool) false;

S :: const_slice;

bins :: @S(
    ("examples/import_c/cc.fr",     "target/cc.out"),
    ("backend/meta/qbe_frontend.fr", "target/q.out"),
    ("backend/meta/test.fr",         "target/r.out"),
    ("examples/import_wasm/run.fr",  "target/w.out"),
);

// order matters because it's sliced below for targets that don't support everything yet
// TODO: pass in ./cc.out and ./w.out instead of assuming
test_cmds :: @S(
    @S("./target/f.out", "compiler/test.fr"),
    @S("./target/r.out", "all", "-bin", "./target/q.out", "-jit"),
    @S("./target/r.out", "all", "-bin", "./target/q.out", "-w"),
    @S("./target/r.out", "all", "-bin", "./target/q.out", "-frc"),
    @S("./target/r.out", "all", "-bin", "./target/q.out", "-frc_inlinable"),
    @S("./target/r.out", "all", "-bin", "./target/q.out"),
    @S("./target/f.out", "examples/import_c/test/wuffs.fr"),  // dep:wuffs
    @S("./target/f.out", "examples/import_c/test/test.fr"),
    @S("./target/f.out", "examples/import_c/test/lua.fr"),  // dep:lua
    @S("./target/f.out", "examples/import_c/test/ffi.fr"),
    @S("./target/f.out", "backend/test/folding.fr"),
);

release_cmds :: @S(
    @S("./target/f.out", "examples/default_driver.fr", "build", "compiler/main.fr", "-aot", "self", "-unsafe", "-o", "target/release/franca-macos-arm64", "-arch", "aarch64", "-os", "macos"),
    @S("./target/f.out", "examples/default_driver.fr", "build", "compiler/main.fr", "-aot", "self", "-unsafe", "-o", "target/release/franca-macos-amd64", "-arch", "x86_64", "-os", "macos"),
    @S("./target/f.out", "examples/default_driver.fr", "build", "compiler/main.fr", "-aot", "self", "-unsafe", "-o", "target/release/franca-linux-amd64", "-arch", "x86_64", "-os", "linux", "-syscalls"),
);

fn driver(vtable: *ImportVTable) void = {
    #use("@/lib/sys/process.fr");
    #use("@/lib/sys/fs.fr");
    
    c := cli_args();
    start := false;
    did := 0;
    franca_path := get_executable_path(temp());  // TODO: cli arg to set this 
    driver_path := "examples/default_driver.fr";
    for c {s: CStr|
        @switch(s.str()) {
            @case("--") => ();
            @case("-hush") => {
                HUSH[] = true;
            };
            @case("boot") => run_boot(vtable);
            @case("github") => {
                make_dirs_or_crash("target/release");
                run_boot(vtable);
                sh(@slice("./target/franca.out", "run_tests.fr", "core"));
            };
            @case("deps") => {
                sh(@slice(franca_path, "tests/need_llvm/x64_encoding.fr"));
            };
            @case("core") => {
                make_dirs_or_crash("target/release");
                sh(@slice(franca_path, driver_path, "build", "compiler/main.fr", "-o", "./target/f.out"));
                for bins { code, dest |
                    sh(@slice("./target/f.out", driver_path, "build", code, "-o", dest));
                };
                
                // temporary!
                test_cmds := test_cmds;
                if query_current_arch() == .x86_64 {
                    if query_current_os() == .macos {
                        test_cmds = test_cmds.slice(0, 7);
                    } else {
                        test_cmds = test_cmds.slice(0, 5);
                    }
                };
                
                for test_cmds { cmd | 
                    sh(cmd);
                };
            
                
                ::import("@/examples/testing.fr");
                files := collect_with_extension("examples/aoc", ".fr").unwrap();
                run_tests_main(Str, files.items(), fn(a) => a[]) { file | 
                    ok, out, err := exec_and_catch(franca_path, @slice(driver_path, "build", @tfmt("examples/aoc/%", file[])), todo_allocator);
                    (ok, out, err, "")
                };
                
                // only do this at the end after all tests pass
                for release_cmds { cmd | 
                    sh(cmd);
                };
            };
            @default => ();
        };
    };
}

#include_std("backend/lib.fr");

// TODO: add test for repro-builds. 
fn run_boot(vtable: *ImportVTable) void = {
    make_dirs_or_crash("target/out");
    make_dirs_or_crash("target/franca");
    stage0_driver(vtable);
    rename(@as(CStr) "a.out", @as(CStr) "target/franca/b.out");
    sh(@slice("./target/franca/b.out", "examples/default_driver.fr", "build", "compiler/main.fr", "-aot", "self", "-o", "target/franca.out"));
    println("ok!");
}

fn stage0_driver(vtable: *ImportVTable) void = {
    opts := vtable.default_build_options();
    opts.safety_checks&.insert(SafetyCheck.Bounds, false);
    opts.safety_checks&.insert(SafetyCheck.DebugAssertions, false);
    
    path := "compiler/main.fr";
    src := "\n#include_std(\"lib/core.fr\");\n#include_std(\"compiler/main.fr\");";
    c := vtable.with(vtable.new_with_src(src, path, opts));
    fid := c.get_unique_named("main").expect("did not find exactly one function called 'main'");
    fid := @slice(fid);
    
    // Allocating more than size_of(QbeModule) need so it's fine that it shrank since boot was compiled (becuase we stopped using pthread_mutex_t). 
    m := u8.raw_from_ptr(page_allocator.alloc(u8, 4096).as_ptr());
    goal: QbeTargetEnv = (os = query_current_os(), arch = query_current_arch(), type = .Exe);
    {vtable.init_default_qbe_module}(m, QbeTargetEnv.raw_from_ptr(goal&));
    
    #use("@/lib/collections/bucket_array.fr");
    F :: @FnPtr(mm: rawptr, comp: *CompCtx, fns: [] FuncId, entry: ProgramEntry) BucketArray(u8);
    emit_qbe_included_old := bit_cast_unchecked(rawptr, F, c.vtable.emit_qbe_included_old);
    
    bytes := emit_qbe_included_old(m, c&, fid, .WrapMain);
    asm_out: CStr = "a.out"; 
    ir_out := open_trunc(asm_out).unwrap(); 
    for bytes& { bucket |
        ir_out&.write(bucket) || panic("write failed");
    };
    ir_out.close();
}

fn sh(a: []Str) void = {
    show :: fn() => {
        for a { a |
            @print("% ", a);
        };
        println("");
    };
    show();
    ok := if HUSH[] {
        ok, out, err := exec_and_catch(a[0], a.rest(1), temp());
        if !ok {
            print(out.items());
            print(err.items());
        };
        ok
    } else {
        run_cmd_blocking(a[0], a.slice(1, a.len))
    };
    if !ok {
        print("Failed to run: ");
        show();
        exit(1);
    };
}

#use("@/lib/sys/subprocess.fr");
