HUSH :: @static(bool) false;

fn driver(vtable: *ImportVTable) void = {
    c := cli_args();
    start := false;
    did := 0;
    franca_path := get_executable_path(temp());  // TODO: cli arg to set this 
    driver_path := "examples/default_driver.fr";
    made_test_file_this_time := false;
    made_driver_this_time    := false;
    use_x64 := false;
    use_dylib := true;
    for c {s: CStr|
        s : Str = s.str();
        continue :: local_return;
        if !start {
            if(!(s == "--"), => { continue(); });
            start = true;
        };
        did += 1;
        @switch(s) {
            @case("--") => ();
            @case("-hush") => {
                HUSH[] = true;
            };
            @case("-x64") => {
                use_x64 = true;
            };
            @case("-no-dylib") => {
                use_dylib = false;
            };
            @case("boot") => run_boot(vtable);
            @case("github") => {
                run_boot(vtable);
                sh(@slice("mkdir", "-p", "target/release")); // ðŸ¤¡
                path := "target/release/franca-macos-arm64";
                sh(@slice("./b.out", "driver.dylib", "build", "compiler/main.fr", "-aot", "self", "-unsafe", "-o", path, "-arch", "aarch64", "-os", "macos"));
                path := "target/release/franca-macos-amd64";
                sh(@slice("./b.out", "driver.dylib", "build", "compiler/main.fr", "-aot", "self", "-unsafe", "-o", path, "-arch", "x86_64", "-os", "macos"));
                path := "target/release/franca-linux-amd64";
                sh(@slice("./b.out", "driver.dylib", "build", "compiler/main.fr", "-aot", "self", "-unsafe", "-o", path, "-arch", "x86_64", "-os", "linux", "-syscalls"));
            };
            @default => {
                if s.starts_with("aot-") {
                    s.ptr = s.ptr.offset(4);
                    s.len -= 4;
                    if use_dylib && !made_driver_this_time {
                        made_driver_this_time = true;
                        path := "driver.dylib"; // TODO: don't stomp something good
                        cmd := @slice(franca_path, driver_path, "build", driver_path, "-aot", "self", "-dynamiclib", "-o", path);
                        sh(cmd);
                        driver_path = path;
                    };
                    {
                        path := "./c.out";
                    };
                    cmd := Str.list(temp());
                    cmd&.push_all(@slice(franca_path, driver_path, "run", "", "-aot", s));
                    if use_x64 {
                        cmd&.push_all(@slice("-arch", "x86_64"));
                    };
                    cmd := cmd.items();
                    sh(@slice(franca_path, "compiler/test.fr"));
                    cmd[2] = "build";
                
                    cmd[3] = "backend/meta/qbe_frontend.fr";
                    sh(cmd);
                    {
                        cmd := Str.list(temp());
                        cmd&.push_all(@slice(franca_path, "backend/meta/test.fr", "all", "-bin=./a.out"));
                        if use_x64 {
                            cmd&.push("-x64");
                        };
                        sh(cmd.items()); 
                    };
                    cmd[2] = "run";
                    cmd[3] = "examples/import_c/runners/test.fr";
                    sh(cmd);
                } else {
                    if s != "" {
                        @println("Unknown argument '%'", s);
                        println(HELP);
                    };
                };
            };
        };
    };
    
    if(did <= 1, => println(HELP));
    // TODO: have -verbose instead of -hush. 
    //       scan for - flags first so it's less annoying to toggle them. 
    HELP :: """
    > This is the build script for the Franca compiler.
    > If you are trying to run a different Franca program, see examples/default_driver.fr instead.
    
    start with '--' to seperate from compiler arguments, then any of the following:

    boot: recompile using the old version in ./boot and then run some tests. 
    -hush: later commands will not output as much logging information.
    """.undent(4, ast_alloc());

    // TODO: do this in the loop
    //reset_temporary_storage();
    // TODO: see if it breaks if you run new ones in thier own namespaces in the same compiler instance as ^ 
}

#include_std("backend/lib.fr");

// TODO: add test for repro-builds. 
fn run_boot(vtable: *ImportVTable) void = {
    arch, os := {vtable.comptime_arch}();
    
    sh(@slice("mkdir", "-p", "target/out")); // ðŸ¤¡
    sh(@slice("mkdir", "-p", "target/franca"));
    stage0_driver(vtable);
    // ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡
    sh(@slice("cp", "a.out", "b.out"));
    sh(@slice("./b.out", "examples/default_driver.fr", "build", "compiler/main.fr", "-aot", "self", "-o", "b.out"));
    h := if(HUSH[], => "-hush", => "");
    sh(@slice("./b.out", "run_tests.fr", "--", h, "aot-self")); // TODO:, "aot-legacy")); // , "examples-no-deps")); 
    println("ok!");
}

fn stage0_driver(vtable: *ImportVTable) void = {
    opts := vtable.default_build_options();
    opts.safety_checks&.insert(SafetyCheck.Bounds, false);
    opts.safety_checks&.insert(SafetyCheck.DebugAssertions, false);
    opts.implicit_context_runtime = true;
    
    path := "compiler/main.fr";
    src := "\n#include_std(\"lib/core.fr\");\n#include_std(\"compiler/main.fr\");";
    c := vtable.with(vtable.new_with_src(src, path, opts));
    fid := c.get_unique_named("main").expect("did not find exactly one function called 'main'");
    fid := @slice(fid);
    
    // Allocating more than size_of(QbeModule) need so it's fine that it shrank since boot was compiled (becuase we stopped using pthread_mutex_t). 
    m := u8.raw_from_ptr(page_allocator.alloc(u8, 4096).as_ptr());
    goal: QbeTargetEnv = (os = query_current_os(), arch = query_current_arch(), type = .Exe);
    {vtable.init_default_qbe_module}(m, QbeTargetEnv.raw_from_ptr(goal&));
    
    bytes := {c.vtable.emit_qbe_included}(m, c&, fid, .WrapMain);
    asm_out: CStr = "a.out"; 
    ir_out := open_trunc(asm_out).unwrap(); 
    for bytes& { bucket |
        ir_out&.write(bucket) || panic("write failed");
    };
    ir_out.close();
}

fn sh(a: []Str) void = {
    show :: fn() => {
        for a { a |
            @print("% ", a);
        };
        println("");
    };
    show();
    ok := if HUSH[] {
        ok, out, err := exec_and_catch(a[0], a.rest(1), temp());
        if !ok {
            print(out.items());
            print(err.items());
        };
        ok
    } else {
        run_cmd_blocking(a[0], a.slice(1, a.len))
    };
    if !ok {
        print("Failed to run: ");
        show();
        exit(1);
    };
}

#use("@/lib/sys/subprocess.fr");
