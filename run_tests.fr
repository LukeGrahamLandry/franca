TARGET: Backend : .Aarch64;

fn driver(vtable: *ImportVTable) Unit #export = {
    _comp := run_sequential(vtable);
    // TODO: see if it breaks if you run new ones in thier own namespaces in the same compiler instance as ^ 
    
    fork_run_main(vtable, "examples/bf.fr");
    fork_run_main(vtable, "examples/emit_c.fr");
    fork_run_main(vtable, "examples/hello.fr");
    
    // These ones I don't run because they're interactive but just make sure it compiles so it doesn't rot
    check_main_compiles(vtable, "examples/raw_terminal.fr");
    check_driver_compiles(vtable, "examples/farm_game.fr");  // the game runs in the driver 
    
    // TODO: #import_std uses relative paths. 
    chdir("examples/lox".maybe_borrow_cstr(libc_allocator));
    fork_run_main(vtable, "main.fr");
    chdir("../../".maybe_borrow_cstr(libc_allocator));
    
    
    // TODO: #import_std uses relative paths. 
    chdir("compiler".maybe_borrow_cstr(libc_allocator));
    check_driver_compiles(vtable, "first.fr");
    s__ := fork_and_catch(libc_allocator) {|
        src := "#include_std(\"core.fr\");".clone(libc_allocator);
        src&.read_and_push("main.fr");
        comp := vtable.new_with_src(src.items(), TARGET);
        run_tests(vtable, comp);
    };
    // TODO: @assert
    assert(s__._0, "compiler tests failed");
    println("- ran compiler tests");
    chdir("../".maybe_borrow_cstr(libc_allocator));
    
    mandelbrot(vtable);
    set_colour(250, 150, 200);
    println("ALL EXAMPLES PASSED!");
    unset_colour();
}

fn run_sequential(vtable: *ImportVTable) Compiler = {
    mem_start := {vtable.get_mem_mark}();
    start := timestamp();
    path := "tests".maybe_borrow_cstr(libc_allocator);
    found: List(List(u8)) = list(20, libc_allocator); // LEAK
    walk_directory(path) {entry|
        // TODO: recurse with another list if .Directory
        if(eq(@as(u8) entry.d_type, @as(u8) DirEntType.File)) {|
            found&.push(@format("%/%", path, entry.name()));
        };
    };
    
    comp := {vtable.init_compiler}(.Aarch64);
    file := {vtable.add_file}(comp, "lib", "#include_std(\"core.fr\");");
    all_stmts := {vtable.parse_stmts}(comp, file).unwrap();
    ::List(FatStmtHack);
    all_stmts := all_stmts.clone(libc_allocator);
    
    each(found){name|
        continue :: @return;
        if(not(name.items().ends_with(".fr")), => continue());
        
        src := libc_allocator.read_to_string(name.items());
        file := {vtable.add_file}(comp, name.items(), src.items());
        stmts := {vtable.parse_stmts}(comp, file).unwrap();
        all_stmts&.push_all(stmts);
    };
    {vtable.make_and_resolve_and_compile_top_level}(comp, all_stmts.items()).unwrap();
    
    
    len := run_tests(vtable, comp);
    end := timestamp();
    mem_end := {vtable.get_mem_mark}();
    
    set_colour(250, 150, 200);
    @println(
        "ALL TESTS PASSED! % files. % tests. % ms. % KB.",
        found.len,
        len,
        end.sub(start),
        mem_end.sub(mem_start).div(1024)
    );
    unset_colour();
    comp
}

fn run_tests(vtable: *ImportVTable, comp: Compiler) i64 = {
    sym_test := {vtable.intern_string}(comp, "test");
    tests := {vtable.get_fns_with_tag}(comp, sym_test);
    
    prev_filename := "";
    for(tests) {fid|
        func := {vtable.get_function}(comp, fid);
        loc := func.loc; // TODO: lookup_filename takes a pointer because the calling convention doesn't match otherwise. 
        filename := {vtable.lookup_filename}(comp, loc&);
        if(filename.eq(prev_filename).not()) {|
            println("");
            set_colour(0, 255, 0);
            @print("[%] ", filename);
            unset_colour();
            prev_filename = filename;  // we know it comes from StringPool so will live ~forever. 
        };
        
        name := {vtable.get_string}(comp, {vtable.get_function_name}(comp, fid));
        @print("%, ", name);
        res := {vtable.compile_func}(comp, fid, .Jit).unwrap();
        ptr := {vtable.get_jitted_ptr}(comp, fid).unwrap();
        {vtable.make_jitted_exec}(comp);
        f := assume_types_fn(Arg = Unit, Ret = Unit, ptr = ptr);
        f();
    };
    println("");
    tests.len
    
}

fn mandelbrot(vtable: *ImportVTable) Unit = {
    // Note: can't import core at the end because you need slice type to be shared with the compiler 
    //       before '::' blocks in the program try to run because they might use !slice. 
    src := "#include_std(\"core.fr\");".clone(libc_allocator);
    src&.read_and_push("examples/mandelbrot.fr");
    f := jit_from_source(vtable, src&.items(), "render");
    f := assume_types_fn(Arg = Unit, Ret = List(u8), ptr = f);
    mandelbrot := f();
    
    pass_out_err := fork_and_catch(libc_allocator) {|
        arg := "util/mandelbrot.lua";
        HACK_LUA_PATH :: "/usr/local/bin/luajit";
        exec_cmd(HACK_LUA_PATH, (ptr = arg&, len = 1));
    };
    assert(pass_out_err._0, "lua failed");
    assert_eq(mandelbrot.items(), pass_out_err._1.items());
    println("- mandelbrot.fr == mandelbrot.lua");
}

fn fork_run_main(vtable: *ImportVTable, filepath: Str) Unit = {
    s__ := fork_and_catch(libc_allocator) {|
        src := "#include_std(\"core.fr\");".clone(libc_allocator);
        src&.read_and_push(filepath);
        f := jit_from_source(vtable, src&.items(), "main");
        f := assume_types_fn(Arg = Unit, Ret = Unit, ptr = f);
        f();
    };
    // TODO: @assert
    assert(s__._0) {() List(u8)|
        s: List(u8) = list(0, libc_allocator);
        @fmt(s&, "failed to compile %", filepath);
        s
    };
    @println("- ran %:main", filepath);
}

fn check_main_compiles(vtable: *ImportVTable, filepath: Str) Unit = {
    src := "#include_std(\"core.fr\");".clone(libc_allocator);
    src&.read_and_push(filepath);
    f := jit_from_source(vtable, src&.items(), "main");
    @println("- compiled %:main", filepath);
}

fn check_driver_compiles(vtable: *ImportVTable, filepath: Str) Unit = {
    src := "#include_std(\"core.fr\");".clone(libc_allocator);
    src&.read_and_push(filepath);
    f := jit_from_source(vtable, src&.items(), "driver");
    @println("- compiled %:driver", filepath);
}

fn jit_from_source(vtable: *ImportVTable, src: Str, function_name: Str) rawptr #leak = {
    comp := vtable.new_with_src(src, TARGET);
    name := {vtable.intern_string}(comp, function_name);
    fid := {vtable.find_unique_func}(comp, name).unwrap();
    {vtable.compile_func}(comp, fid, .Jit).unwrap();
    ptr := {vtable.get_jitted_ptr}(comp, fid).unwrap();
    {vtable.make_jitted_exec}(comp);
    ptr
}

fn set_colour(r: i64, g: i64, b: i64) Unit = {
    @print("\x1B[38;2;%;%;%m", r, g, b);
}

fn unset_colour() Unit = {
    print("\x1B[0m");
}
