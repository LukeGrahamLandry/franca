// -- Apr 11, 2024. 

// This is just a dumb wrapper around a void pointer.
// Im not sure if there's any point since you don't want to implement the tagged ones on top of this, 
// you want them to be more a part of the language so you can do tag checks and stuff. 
// Or maybe not, if the goal is to have the metaprogramming powerful enough to describe itself, why not this too? 
// It makes bootstrapping weirder, cause how do you compile the body if this function? 
// Feels bad to make sure none of these functions use an enum. 
// C union members can have names. 
fn Union(const types: Slice$Type) Type = {
    const stride = types.iter().map(fn(t: Type) i64 = t.stride_of()).max();
    const align = types.iter().map(fn(t: Type) i64 = t.align_of()).max();
    const Self = Opauqe(stride, align);
    
    types.for {(T: Type)|
        fun alias(self: *Self) *T = {
            let ptr: VoidPtr = self;
            ptr
        }
        
        fun into(self: Self) T = self&.alias()[];
    };
}

fn Enum(const cases: Slice$ Ty(Symbol, Type)) Type = {
    const Self = cases.iter().map(snd).to_list().Union();
    
    
    
    fn operator_field_get(self: *Self, const name: Symbol) *TODO = {
    
    }
}
