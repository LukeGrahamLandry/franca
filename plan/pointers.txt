
This language has a few conflicting goals when defining pointer semantics. 
1. I don't want to impose arbitrary abstractions that prevent the programmer from exercising complete control over the computer. 
If you already understand how computers work, you shouldn't have to relearn my personal fantasy about how computers work. 
2. I want backends to have the freedom to optimise code. 
Local variables should be able to live in registers even if declared as structs or arrays (something like llvm's sroa and mem2reg passes). 
It would be sad to keep everything on the stack just incase you meant to index off the end of an array to the next variable. 
You also want to reuse stack slots if you know that usages overlap. 
3. I want minimal undefined behaviour. The program text should describe what happens when the program runs... that's the whole point. 
