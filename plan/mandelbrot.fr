@struct fn Pos(x: f64, y: f64);

fn both(a: Pos, b: Pos, f: Fn(Ty(f64, f64), f64)) Pos = init(both(a&.x[], b*.x[]), both(a&.y[], b*.y[]));
fn add(a: Pos, b: Pos) Pos = both(a, b, add);
fn sub(a: Pos, b: Pos) Pos = both(a, b, sub);
fn div(a: Pos, b: Pos) Pos = both(a, b, diz);
fn mul(a: Pos, b: Pos) Pos = both(a, b, mul);

fn mandelbrot(c: Pos, z: Pos, steps: i64) i64 = {
    var i = 0;
    var zSq = z.mul(z);
    (fn() = and(i.lt(steps), zSq&.x[].add(zSq&.y[]).lt(4)), fn() = {
        z&.y[] = z&.x[].mul(2).mul(z&.y[]);
        z&.x[] = zSq&.x[].sub(zSq&.y[]);
        z = z.add(c);
        zSq = z.mul(z);
        i = i.add(1);
    })!while;
    i
}

fn main(canary: i64) i64 = {
    // TODO: print as characters
}
