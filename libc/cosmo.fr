// WIP!

main :: fn() void = {
    c_scope'entry();
};

c_scope :: {
    #use("@/examples/import_c/ffi.fr");
    
    fr := current_compiler_context();
    namespace := Type.scope_of(@struct{});
    c := init_for_include(fr, namespace);
    c.include_paths&.push(cosmo_path);
    do_include(fr, namespace, SRC, c);
    namespace
};

SRC :: """
#include "libc/integral/normalize.inc"
#define __CLANG_ATOMIC_BOOL_LOCK_FREE // lie

// TODO: tls.h cares
#define __aarch64__

// TODO: atomic.h
#define __ATOMIC_RELAXED 0
#define __ATOMIC_CONSUME 1
#define __ATOMIC_ACQUIRE 2
#define __ATOMIC_RELEASE 3
#define __ATOMIC_ACQ_REL 4
#define __ATOMIC_SEQ_CST 5

#define __chibicc__
#define __c11_atomic_fetch_add(a, b, _) (*(a) += (b))
#define __c11_atomic_fetch_sub(a, b, _) (*(a) -= (b))
#define __c11_atomic_load(a, _) (*(a))
#define __c11_atomic_compare_exchange_strong(have, want, val, _, _) ({ \
    int cond = *(have) == *(want); \
    if(cond) {*have = val; } else {*want = *have;}\
    cond;\
    })

#define __builtin_expect(cond, _) cond
#define NDEBUG
#define __builtin_unreachable() while(1){}

#define __strong_reference(_, _)

#include "libc/stdio/puts.c"
#define textstartup
#define _COSMO_SOURCE  // or you don't define struct Dll
#include "libc/intrin/dll.c"
#include "libc/stdio/stdout.c"
#include "libc/intrin/stdio.c"
#include "libc/stdio/puts_unlocked.c"
#include "libc/stdio/fputc_unlocked.c"

// stolen: libc/intrin/memrchr.c/memrchr_pure()
// they have the aarch one in asm
static inline const unsigned char *memrchr(const unsigned char *s, unsigned char c, size_t n) {
  size_t i;
  for (i = n; i--;) {
    if (s[i] == c) {
      return s + i;
    }
  }
  return 0;
}

//#include "libc/intrin/memrchr.c"
#include "libc/stdio/fwrite_unlocked.c"


void entry() {
    puts("Hello World!");
}
""";

cosmo_path :: {
    get  :: import("@/examples/testing.fr").fetch_or_crash;
    get(
        "https://github.com/jart/cosmopolitan/archive/f1e83d52403060d674161944e849b51f95707c9a.zip",
        55506319,
        "fe43601db4c0394259f897f4b8c9438d31a39f6173881521fe5c7b86cb161a02",
        "cosmopolitan-f1e83d52403060d674161944e849b51f95707c9a",
    ).sym().str()
};


#include_std("backend/lib.fr");
