/*
This is indented to be a quick overview of the syntax to access language features implemented so far. 
For more detailed examples of how they work, see the `tests` folder.

The core language is relatively small with many ergonomic features implemented in the standard library instead of the compiler, and thus not covered here. 
> Including but not limited to: match/switch statements, iteration constructs, slices, dynamic memory allocation, io, format strings, short-circuiting operators. 

## Comments

- Single line: // whatever
- Multi line: /* whatever */
    - allows nesting /* a /* b */ c */

## Statements

The top level of your program is a sequence of statements that execute at compile time. 

- Function Declaration
    - `fn name(arg: ArgT) Ret = body;` OR `fn name(arg: ArgT) Ret = { body }` (no semicolon needed)
    - ArgT/Ret/body are expressions. 
    - Forward declarations have no body. 
    - 'fun F' === '@pub fn F'
    - arg bindings can have const/let/var specifiers. var is the default. 
- Eval Expr
    - An expression followed by a semicolon is run for side effects and its result is discarded. 
- Variable Declaration: kind name: T = value;
    - T and value are expressions.
    - kind can be var/let/const
    - type can be infered from value 
    - for var, value can be '()!uninitialized'
- Variable Assignment: place = value;
    - both are expressions. place is treated a bit differently but probably intuative. 
- Backpassing: let name <- call; 
    - pass the whole rest of the block as a closure with 'name' as its argument as the last argument to call. 
    - '{ let a: b <- c(d); e }' === '{ c(d, fn(a: b) = { e }) }'

### @At Macros (Function)

A function declaration statement can have any number of annotations preceding it. 

- @comptime F:
    - Allow using the argument values in the return type expression. 
- @generic F
- @inline F:
- @noinline F:
- @c_call F:
- @annotation F: This function defines an @At Macro. Implies @ct.
- @rs F AND @bs F: used during bootstrapping.
- @rs F: Translate that function into rust.
         Used for the instruction encoding stuff that the compiler needs to call.
- @bs F: Save the asm of that function and use that instead of trying to compile it.
         Used for the math you need to run the output of @bits for assembling other inline asm at comptime.
- @ct F: This function needs the compiler context. Generally implies it can only be called at comptime.
- @struct fn N(a: A, b: B); === const N = (a: A, b: B)!struct; fn init(a: A, b: B) N = (a: a, b: b)!construct;
- @enum fn N(a: A, b: B); === const N = (a: A, b: B)!enum; fn init(a: A) N = (a: a)!construct; fn init(b: B) N = (b: b)!construct;
- @llvm F
- @aarch64 F

- F
- @forward F
- @flat_call F
- @test(A) F
- @pub F

### @At Macros (Binding)

- @pub V
- @import(path) V

## Expressions

An expression is any number of prefixes, one inner, and then any number of suffixes. 

### Prefix

- *T === operator_star_prefix(T)
- ?T === operator_question_prefix(T)
- ::e === e!const_eval

### Inner

- Variable Access: raw identifier
- Tuple: (a, b, c)
- Struct Literal: (name: Value, a: b)
- Closure: fn(args: A) T = body
- Block: { S1; S2; e }
- Number: 16 === 0b10000 === 0x10
- String: "Hello World"
    - multiline raw: """S""" and `S`
- @At Macro: (@name(A) B)
- Float: 12.34
- 'e' === e!quote
- <e> === e!unquote

### Suffix

- Function Call: e(args)
    - a tuple used as arguments
- Field Access: e.name
    - returns a pointer
    - struct: compute a field offset
    - enum: access a payload (illegal to access an inactive varient)
- Dot Call: e.name(a) 
    - syntax sugar for 'name(e, a)'
    - not dynamic dispatch. nothing special about function declaration to make it a method. 
    - higher precidence than field access so you need brackets if you meant to use a callable field. 
- Dollar call: e$a
    - syntax sugar for 'e(a)'
- Trailing Lambda 
    - 'e(a){(b: B) R| c}' === 'e(a, fn(b: B) R = c)'
- Bang Macro: e!name
- e[] === e!deref
- e&  === e!addr

#### !Bang Macros

- (cond, f, t)!if
- (cond, body)!while
- e!deref
    - as a value expression: read from a pointer
    - as a place expression: refer to the place pointed to
    - e[] === e!deref
- e!addr: get the address of a variable
    - e& === e!addr
- e!slice
- e!tag: get the address of an enum value's tag
- e!type: get the type of a value. the expression is not evaluated
- e!struct: treat a struct literal as a type definition
    - a product type with named fields. 
- e!enum: treat a struct literal as an enum definition 
    - a sum type with named varients. 
- e!symbol: add an identifier to the compiler's intern pool
- e!comptime_print: print the ast of the expression and the value it produces
- e!assert_compile_error
- e!asm:
- e!quote === 'e'
    - get the ast for e as a value
- e!unquote === <e>
    - only valid inside a !quote expression. 
- e!fn_ptr
- e!const_eval === ::e
    - force e to be evaluated at comptime. throw an error if it can't be done. 
- '()!uninitialized' 
    - an unspecified value. it is illegal to read the value, but you can write over it. 


### @At Macros (Expr)

- '@as(T) e'
- '@enum(Raw) (A = B)' === '(T: Type = Unique(Raw), A: T = B)'
    - a unique type that only permits a subset of values of the backing type. 

*/
