ImGuiID :: u32;
ImS8 :: i8;
ImU8 :: u8;
ImS16 :: i16;
ImU16 :: u16;
ImS32 :: i32;
ImU32 :: u32;
ImS64 :: i64;
ImU64 :: u64;
ImGuiCol :: i32;
ImGuiCond :: i32;
ImGuiDataType :: i32;
ImGuiMouseButton :: i32;
ImGuiMouseCursor :: i32;
ImGuiStyleVar :: i32;
ImGuiTableBgTarget :: i32;
ImDrawFlags :: i32;
ImDrawListFlags :: i32;
ImFontAtlasFlags :: i32;
ImGuiBackendFlags :: i32;
ImGuiButtonFlags :: i32;
ImGuiChildFlags :: i32;
ImGuiColorEditFlags :: i32;
ImGuiConfigFlags :: i32;
ImGuiComboFlags :: i32;
ImGuiDragDropFlags :: i32;
ImGuiFocusedFlags :: i32;
ImGuiHoveredFlags :: i32;
ImGuiInputFlags :: i32;
ImGuiInputTextFlags :: i32;
ImGuiItemFlags :: i32;
ImGuiKeyChord :: i32;
ImGuiPopupFlags :: i32;
ImGuiMultiSelectFlags :: i32;
ImGuiSelectableFlags :: i32;
ImGuiSliderFlags :: i32;
ImGuiTabBarFlags :: i32;
ImGuiTabItemFlags :: i32;
ImGuiTableFlags :: i32;
ImGuiTableColumnFlags :: i32;
ImGuiTableRowFlags :: i32;
ImGuiTreeNodeFlags :: i32;
ImGuiViewportFlags :: i32;
ImGuiWindowFlags :: i32;
ImTextureID :: ImU64;
ImDrawIdx :: u16;
ImWchar32 :: u32;
ImWchar16 :: u16;
ImWchar :: ImWchar16;
ImGuiSelectionUserData :: ImS64;
ImGuiInputTextCallback :: @FnPtr(*ImGuiInputTextCallbackData) i32;
ImGuiSizeCallback :: @FnPtr(*ImGuiSizeCallbackData) void;
ImGuiMemAllocFunc :: @FnPtr(usize, rawptr) rawptr;
ImGuiMemFreeFunc :: @FnPtr(rawptr, rawptr) void;
ImVec2 :: @struct(
    x: f32,
    y: f32,
);
ImVec4 :: @struct(
    x: f32,
    y: f32,
    z: f32,
    w: f32,
);
ImGuiTableSortSpecs :: @struct(
    Specs: *ImGuiTableColumnSortSpecs,
    SpecsCount: i32,
    SpecsDirty: bool,
);
ImGuiTableColumnSortSpecs :: @struct(
    ColumnUserID: ImGuiID,
    ColumnIndex: ImS16,
    SortOrder: ImS16,
    SortDirection: ImGuiSortDirection,
);
ImGuiStyle :: @struct(
    Alpha: f32,
    DisabledAlpha: f32,
    WindowPadding: ImVec2,
    WindowRounding: f32,
    WindowBorderSize: f32,
    WindowMinSize: ImVec2,
    WindowTitleAlign: ImVec2,
    WindowMenuButtonPosition: ImGuiDir,
    ChildRounding: f32,
    ChildBorderSize: f32,
    PopupRounding: f32,
    PopupBorderSize: f32,
    FramePadding: ImVec2,
    FrameRounding: f32,
    FrameBorderSize: f32,
    ItemSpacing: ImVec2,
    ItemInnerSpacing: ImVec2,
    CellPadding: ImVec2,
    TouchExtraPadding: ImVec2,
    IndentSpacing: f32,
    ColumnsMinSpacing: f32,
    ScrollbarSize: f32,
    ScrollbarRounding: f32,
    GrabMinSize: f32,
    GrabRounding: f32,
    LogSliderDeadzone: f32,
    TabRounding: f32,
    TabBorderSize: f32,
    TabMinWidthForCloseButton: f32,
    TabBarBorderSize: f32,
    TabBarOverlineSize: f32,
    TableAngledHeadersAngle: f32,
    TableAngledHeadersTextAlign: ImVec2,
    ColorButtonPosition: ImGuiDir,
    ButtonTextAlign: ImVec2,
    SelectableTextAlign: ImVec2,
    SeparatorTextBorderSize: f32,
    SeparatorTextAlign: ImVec2,
    SeparatorTextPadding: ImVec2,
    DisplayWindowPadding: ImVec2,
    DisplaySafeAreaPadding: ImVec2,
    MouseCursorScale: f32,
    AntiAliasedLines: bool,
    AntiAliasedLinesUseTex: bool,
    AntiAliasedFill: bool,
    CurveTessellationTol: f32,
    CircleTessellationMaxError: f32,
    Colors: Array(ImVec4, 56),
    HoverStationaryDelay: f32,
    HoverDelayShort: f32,
    HoverDelayNormal: f32,
    HoverFlagsForTooltipMouse: ImGuiHoveredFlags,
    HoverFlagsForTooltipNav: ImGuiHoveredFlags,
);
ImGuiKeyData :: @struct(
    Down: bool,
    DownDuration: f32,
    DownDurationPrev: f32,
    AnalogValue: f32,
);
ImVectorImWchar :: @struct(
    Size: i32,
    Capacity: i32,
    Data: *ImWchar,
);
ImGuiIO :: @struct(
    ConfigFlags: ImGuiConfigFlags,
    BackendFlags: ImGuiBackendFlags,
    DisplaySize: ImVec2,
    DeltaTime: f32,
    IniSavingRate: f32,
    IniFilename: CStr,
    LogFilename: CStr,
    UserData: rawptr,
    Fonts: *ImFontAtlas,
    FontGlobalScale: f32,
    FontAllowUserScaling: bool,
    FontDefault: *ImFont,
    DisplayFramebufferScale: ImVec2,
    ConfigNavSwapGamepadButtons: bool,
    ConfigNavMoveSetMousePos: bool,
    ConfigNavCaptureKeyboard: bool,
    ConfigNavEscapeClearFocusItem: bool,
    ConfigNavEscapeClearFocusWindow: bool,
    ConfigNavCursorVisibleAuto: bool,
    ConfigNavCursorVisibleAlways: bool,
    MouseDrawCursor: bool,
    ConfigMacOSXBehaviors: bool,
    ConfigInputTrickleEventQueue: bool,
    ConfigInputTextCursorBlink: bool,
    ConfigInputTextEnterKeepActive: bool,
    ConfigDragClickToInputText: bool,
    ConfigWindowsResizeFromEdges: bool,
    ConfigWindowsMoveFromTitleBarOnly: bool,
    ConfigWindowsCopyContentsWithCtrlC: bool,
    ConfigScrollbarScrollByPage: bool,
    ConfigMemoryCompactTimer: f32,
    MouseDoubleClickTime: f32,
    MouseDoubleClickMaxDist: f32,
    MouseDragThreshold: f32,
    KeyRepeatDelay: f32,
    KeyRepeatRate: f32,
    ConfigErrorRecovery: bool,
    ConfigErrorRecoveryEnableAssert: bool,
    ConfigErrorRecoveryEnableDebugLog: bool,
    ConfigErrorRecoveryEnableTooltip: bool,
    ConfigDebugIsDebuggerPresent: bool,
    ConfigDebugHighlightIdConflicts: bool,
    ConfigDebugBeginReturnValueOnce: bool,
    ConfigDebugBeginReturnValueLoop: bool,
    ConfigDebugIgnoreFocusLoss: bool,
    ConfigDebugIniSettings: bool,
    BackendPlatformName: CStr,
    BackendRendererName: CStr,
    BackendPlatformUserData: rawptr,
    BackendRendererUserData: rawptr,
    BackendLanguageUserData: rawptr,
    WantCaptureMouse: bool,
    WantCaptureKeyboard: bool,
    WantTextInput: bool,
    WantSetMousePos: bool,
    WantSaveIniSettings: bool,
    NavActive: bool,
    NavVisible: bool,
    Framerate: f32,
    MetricsRenderVertices: i32,
    MetricsRenderIndices: i32,
    MetricsRenderWindows: i32,
    MetricsActiveWindows: i32,
    MouseDelta: ImVec2,
    Ctx: *ImGuiContext,
    MousePos: ImVec2,
    MouseDown: Array(bool, 5),
    MouseWheel: f32,
    MouseWheelH: f32,
    MouseSource: ImGuiMouseSource,
    KeyCtrl: bool,
    KeyShift: bool,
    KeyAlt: bool,
    KeySuper: bool,
    KeyMods: ImGuiKeyChord,
    KeysData: Array(ImGuiKeyData, 154),
    WantCaptureMouseUnlessPopupClose: bool,
    MousePosPrev: ImVec2,
    MouseClickedPos: Array(ImVec2, 5),
    MouseClickedTime: Array(f64, 5),
    MouseClicked: Array(bool, 5),
    MouseDoubleClicked: Array(bool, 5),
    MouseClickedCount: Array(ImU16, 5),
    MouseClickedLastCount: Array(ImU16, 5),
    MouseReleased: Array(bool, 5),
    MouseDownOwned: Array(bool, 5),
    MouseDownOwnedUnlessPopupClose: Array(bool, 5),
    MouseWheelRequestAxisSwap: bool,
    MouseCtrlLeftAsRightClick: bool,
    MouseDownDuration: Array(f32, 5),
    MouseDownDurationPrev: Array(f32, 5),
    MouseDragMaxDistanceSqr: Array(f32, 5),
    PenPressure: f32,
    AppFocusLost: bool,
    AppAcceptingEvents: bool,
    InputQueueSurrogate: ImWchar16,
    InputQueueCharacters: ImVectorImWchar,
);
ImGuiInputTextCallbackData :: @struct(
    Ctx: *ImGuiContext,
    EventFlag: ImGuiInputTextFlags,
    Flags: ImGuiInputTextFlags,
    UserData: rawptr,
    EventChar: ImWchar,
    EventKey: ImGuiKey,
    Buf: CStr,
    BufTextLen: i32,
    BufSize: i32,
    BufDirty: bool,
    CursorPos: i32,
    SelectionStart: i32,
    SelectionEnd: i32,
);
ImGuiSizeCallbackData :: @struct(
    UserData: rawptr,
    Pos: ImVec2,
    CurrentSize: ImVec2,
    DesiredSize: ImVec2,
);
ImGuiPayload :: @rec @struct(
    Data: rawptr,
    DataSize: i32,
    SourceId: ImGuiID,
    SourceParentId: ImGuiID,
    DataFrameCount: i32,
    DataType: Array(i8, 33),
    Preview: bool,
    Delivery: bool,
);
ImGuiOnceUponAFrame :: @struct(
    RefFrame: i32,
);
ImGuiTextRange :: @struct(
    b: CStr,
    e: CStr,
);
ImVectorImGuiTextRange :: @struct(
    Size: i32,
    Capacity: i32,
    Data: *ImGuiTextRange,
);
ImGuiTextFilter :: @struct(
    InputBuf: Array(i8, 256),
    Filters: ImVectorImGuiTextRange,
    CountGrep: i32,
);
ImVectorChar :: @struct(
    Size: i32,
    Capacity: i32,
    Data: CStr,
);
ImGuiTextBuffer :: @struct(
    Buf: ImVectorChar,
);
ImGuiStoragePair :: @struct(
    key: ImGuiID,
    _embed: @union(
        val_i: i32,
        val_f: f32,
        val_p: rawptr,
    ),
);
ImVectorImGuiStoragePair :: @struct(
    Size: i32,
    Capacity: i32,
    Data: *ImGuiStoragePair,
);
ImGuiStorage :: @struct(
    Data: ImVectorImGuiStoragePair,
);
ImGuiListClipper :: @struct(
    Ctx: *ImGuiContext,
    DisplayStart: i32,
    DisplayEnd: i32,
    ItemsCount: i32,
    ItemsHeight: f32,
    StartPosY: f32,
    StartSeekOffsetY: f64,
    TempData: rawptr,
);
ImColor :: @struct(
    Value: ImVec4,
);
ImVectorImGuiSelectionRequest :: @struct(
    Size: i32,
    Capacity: i32,
    Data: *ImGuiSelectionRequest,
);
ImGuiMultiSelectIO :: @struct(
    Requests: ImVectorImGuiSelectionRequest,
    RangeSrcItem: ImGuiSelectionUserData,
    NavIdItem: ImGuiSelectionUserData,
    NavIdSelected: bool,
    RangeSrcReset: bool,
    ItemsCount: i32,
);
ImGuiSelectionRequest :: @struct(
    Type: ImGuiSelectionRequestType,
    Selected: bool,
    RangeDirection: ImS8,
    RangeFirstItem: ImGuiSelectionUserData,
    RangeLastItem: ImGuiSelectionUserData,
);
ImGuiSelectionBasicStorage :: @struct(
    Size: i32,
    PreserveOrder: bool,
    UserData: rawptr,
    AdapterIndexToStorageId: @FnPtr(*ImGuiSelectionBasicStorage, i32) ImGuiID,
    _SelectionOrder: i32,
    _Storage: ImGuiStorage,
);
ImGuiSelectionExternalStorage :: @struct(
    UserData: rawptr,
    AdapterSetItemSelected: @FnPtr(*ImGuiSelectionExternalStorage, i32, bool) void,
);
ImDrawCallback :: @FnPtr(*ImDrawList, *ImDrawCmd) void;
ImDrawCmd :: @struct(
    ClipRect: ImVec4,
    TextureId: ImTextureID,
    VtxOffset: u32,
    IdxOffset: u32,
    ElemCount: u32,
    UserCallback: ImDrawCallback,
    UserCallbackData: rawptr,
    UserCallbackDataSize: i32,
    UserCallbackDataOffset: i32,
);
ImDrawVert :: @struct(
    pos: ImVec2,
    uv: ImVec2,
    col: ImU32,
);
ImDrawCmdHeader :: @struct(
    ClipRect: ImVec4,
    TextureId: ImTextureID,
    VtxOffset: u32,
);
ImVectorImDrawCmd :: @struct(
    Size: i32,
    Capacity: i32,
    Data: *ImDrawCmd,
);
ImVectorImDrawIdx :: @struct(
    Size: i32,
    Capacity: i32,
    Data: *ImDrawIdx,
);
ImDrawChannel :: @struct(
    _CmdBuffer: ImVectorImDrawCmd,
    _IdxBuffer: ImVectorImDrawIdx,
);
ImVectorImDrawChannel :: @struct(
    Size: i32,
    Capacity: i32,
    Data: *ImDrawChannel,
);
ImDrawListSplitter :: @struct(
    _Current: i32,
    _Count: i32,
    _Channels: ImVectorImDrawChannel,
);
ImVectorImDrawVert :: @struct(
    Size: i32,
    Capacity: i32,
    Data: *ImDrawVert,
);
ImVectorImVec2 :: @rec @struct(
    Size: i32,
    Capacity: i32,
    Data: *ImVec2,
);
ImVectorImVec4 :: @rec @struct(
    Size: i32,
    Capacity: i32,
    Data: *ImVec4,
);
ImVectorImTextureID :: @rec @struct(
    Size: i32,
    Capacity: i32,
    Data: *ImTextureID,
);
ImVectorImU8 :: @rec @struct(
    Size: i32,
    Capacity: i32,
    Data: *ImU8,
);
ImDrawList :: @rec @struct(
    CmdBuffer: ImVectorImDrawCmd,
    IdxBuffer: ImVectorImDrawIdx,
    VtxBuffer: ImVectorImDrawVert,
    Flags: ImDrawListFlags,
    _VtxCurrentIdx: u32,
    _Data: *ImDrawListSharedData,
    _VtxWritePtr: *ImDrawVert,
    _IdxWritePtr: *ImDrawIdx,
    _Path: ImVectorImVec2,
    _CmdHeader: ImDrawCmdHeader,
    _Splitter: ImDrawListSplitter,
    _ClipRectStack: ImVectorImVec4,
    _TextureIdStack: ImVectorImTextureID,
    _CallbacksDataBuf: ImVectorImU8,
    _FringeScale: f32,
    _OwnerName: CStr,
);
ImVectorImDrawListPtr :: @rec @struct(
    Size: i32,
    Capacity: i32,
    Data: **ImDrawList,
);
ImDrawData :: @rec @struct(
    Valid: bool,
    CmdListsCount: i32,
    TotalIdxCount: i32,
    TotalVtxCount: i32,
    CmdLists: ImVectorImDrawListPtr,
    DisplayPos: ImVec2,
    DisplaySize: ImVec2,
    FramebufferScale: ImVec2,
    OwnerViewport: *ImGuiViewport,
);
ImFontConfig :: @struct(
    FontData: rawptr,
    FontDataSize: i32,
    FontDataOwnedByAtlas: bool,
    FontNo: i32,
    SizePixels: f32,
    OversampleH: i32,
    OversampleV: i32,
    PixelSnapH: bool,
    GlyphExtraSpacing: ImVec2,
    GlyphOffset: ImVec2,
    GlyphRanges: *ImWchar,
    GlyphMinAdvanceX: f32,
    GlyphMaxAdvanceX: f32,
    MergeMode: bool,
    FontBuilderFlags: u32,
    RasterizerMultiply: f32,
    RasterizerDensity: f32,
    EllipsisChar: ImWchar,
    Name: Array(i8, 40),
    DstFont: *ImFont,
);
ImFontGlyph :: @rec @struct(
    Colored: u32,
    Visible: u32,
    Codepoint: u32,
    AdvanceX: f32,
    X0: f32,
    Y0: f32,
    X1: f32,
    Y1: f32,
    U0: f32,
    V0: f32,
    U1: f32,
    V1: f32,
);
ImVectorImU32 :: @rec @struct(
    Size: i32,
    Capacity: i32,
    Data: *ImU32,
);
ImFontGlyphRangesBuilder :: @rec @struct(
    UsedChars: ImVectorImU32,
);
ImFontAtlasCustomRect :: @rec @struct(
    X: u16,
    Y: u16,
    Width: u16,
    Height: u16,
    GlyphID: u32,
    GlyphColored: u32,
    GlyphAdvanceX: f32,
    GlyphOffset: ImVec2,
    Font: *ImFont,
);
ImVectorImFontPtr :: @rec @struct(
    Size: i32,
    Capacity: i32,
    Data: **ImFont,
);
ImVectorImFontAtlasCustomRect :: @rec @struct(
    Size: i32,
    Capacity: i32,
    Data: *ImFontAtlasCustomRect,
);
ImVectorImFontConfig :: @rec @struct(
    Size: i32,
    Capacity: i32,
    Data: *ImFontConfig,
);
ImFontAtlas :: @rec @struct(
    Flags: ImFontAtlasFlags,
    TexID: ImTextureID,
    TexDesiredWidth: i32,
    TexGlyphPadding: i32,
    Locked: bool,
    UserData: rawptr,
    TexReady: bool,
    TexPixelsUseColors: bool,
    TexPixelsAlpha8: *u8,
    TexPixelsRGBA32: *u32,
    TexWidth: i32,
    TexHeight: i32,
    TexUvScale: ImVec2,
    TexUvWhitePixel: ImVec2,
    Fonts: ImVectorImFontPtr,
    CustomRects: ImVectorImFontAtlasCustomRect,
    ConfigData: ImVectorImFontConfig,
    TexUvLines: Array(ImVec4, 64),
    FontBuilderIO: *ImFontBuilderIO,
    FontBuilderFlags: u32,
    PackIdMouseCursors: i32,
    PackIdLines: i32,
);
ImVectorFloat :: @struct(
    Size: i32,
    Capacity: i32,
    Data: *f32,
);
ImVectorImFontGlyph :: @struct(
    Size: i32,
    Capacity: i32,
    Data: *ImFontGlyph,
);
ImFont :: @struct(
    IndexAdvanceX: ImVectorFloat,
    FallbackAdvanceX: f32,
    FontSize: f32,
    IndexLookup: ImVectorImWchar,
    Glyphs: ImVectorImFontGlyph,
    FallbackGlyph: *ImFontGlyph,
    ContainerAtlas: *ImFontAtlas,
    ConfigData: *ImFontConfig,
    ConfigDataCount: i16,
    EllipsisCharCount: i16,
    EllipsisChar: ImWchar,
    FallbackChar: ImWchar,
    EllipsisWidth: f32,
    EllipsisCharStep: f32,
    DirtyLookupTables: bool,
    Scale: f32,
    Ascent: f32,
    Descent: f32,
    MetricsTotalSurface: i32,
    Used4kPagesMap: Array(ImU8, 2),
);
ImGuiViewport :: @rec @struct(
    ID: ImGuiID,
    Flags: ImGuiViewportFlags,
    Pos: ImVec2,
    Size: ImVec2,
    WorkPos: ImVec2,
    WorkSize: ImVec2,
    PlatformHandle: rawptr,
    PlatformHandleRaw: rawptr,
);
ImGuiPlatformIO :: @rec @struct(
    Platform_GetClipboardTextFn: @FnPtr(*ImGuiContext) CStr,
    Platform_SetClipboardTextFn: @FnPtr(*ImGuiContext, CStr) void,
    Platform_ClipboardUserData: rawptr,
    Platform_OpenInShellFn: @FnPtr(*ImGuiContext, CStr) bool,
    Platform_OpenInShellUserData: rawptr,
    Platform_SetImeDataFn: @FnPtr(*ImGuiContext, *ImGuiViewport, *ImGuiPlatformImeData) void,
    Platform_ImeUserData: rawptr,
    Platform_LocaleDecimalPoint: ImWchar,
    Renderer_RenderState: rawptr,
);
ImGuiPlatformImeData :: @rec @struct(
    WantVisible: bool,
    InputPos: ImVec2,
    InputLineHeight: f32,
);
ImGuiLayoutType :: i32;
ImGuiActivateFlags :: i32;
ImGuiDebugLogFlags :: i32;
ImGuiFocusRequestFlags :: i32;
ImGuiItemStatusFlags :: i32;
ImGuiOldColumnFlags :: i32;
ImGuiLogFlags :: i32;
ImGuiNavRenderCursorFlags :: i32;
ImGuiNavMoveFlags :: i32;
ImGuiNextItemDataFlags :: i32;
ImGuiNextWindowDataFlags :: i32;
ImGuiScrollFlags :: i32;
ImGuiSeparatorFlags :: i32;
ImGuiTextFlags :: i32;
ImGuiTooltipFlags :: i32;
ImGuiTypingSelectFlags :: i32;
ImGuiWindowRefreshFlags :: i32;
ImFileHandle :: *FILE;
ImVec1 :: @rec @struct(
    x: f32,
);
ImVec2ih :: @rec @struct(
    x: i16,
    y: i16,
);
ImRect :: @rec @struct(
    Min: ImVec2,
    Max: ImVec2,
);
ImBitArrayPtr :: *ImU32;
ImBitVector :: @rec @struct(
    Storage: ImVectorImU32,
);
ImPoolIdx :: i32;
ImVectorInt :: @rec @struct(
    Size: i32,
    Capacity: i32,
    Data: *i32,
);
ImGuiTextIndex :: @rec @struct(
    LineOffsets: ImVectorInt,
    EndOffset: i32,
);
ImDrawListSharedData :: @struct(
    TexUvWhitePixel: ImVec2,
    TexUvLines: *ImVec4,
    Font: *ImFont,
    FontSize: f32,
    FontScale: f32,
    CurveTessellationTol: f32,
    CircleSegmentMaxError: f32,
    ClipRectFullscreen: ImVec4,
    InitialFlags: ImDrawListFlags,
    TempBuffer: ImVectorImVec2,
    ArcFastVtx: Array(ImVec2, 48),
    ArcFastRadiusCutoff: f32,
    CircleSegmentCounts: Array(ImU8, 64),
);
ImDrawDataBuilder :: @struct(
    Layers: Array(*ImVectorImDrawListPtr, 2),
    LayerData1: ImVectorImDrawListPtr,
);
ImGuiDataVarInfo :: @struct(
    Type: ImGuiDataType,
    Count: ImU32,
    Offset: ImU32,
);
ImGuiDataTypeStorage :: @struct(
    Data: Array(ImU8, 8),
);
ImGuiDataTypeInfo :: @struct(
    Size: usize,
    Name: CStr,
    PrintFmt: CStr,
    ScanFmt: CStr,
);
ImGuiColorMod :: @struct(
    Col: ImGuiCol,
    BackupValue: ImVec4,
);
ImGuiStyleMod :: @struct(
    VarIdx: ImGuiStyleVar,
    _embed: @union(
        BackupInt: Array(i32, 2),
        BackupFloat: Array(f32, 2),
    ),
);
ImGuiComboPreviewData :: @struct(
    PreviewRect: ImRect,
    BackupCursorPos: ImVec2,
    BackupCursorMaxPos: ImVec2,
    BackupCursorPosPrevLine: ImVec2,
    BackupPrevLineTextBaseOffset: f32,
    BackupLayout: ImGuiLayoutType,
);
ImGuiGroupData :: @struct(
    WindowID: ImGuiID,
    BackupCursorPos: ImVec2,
    BackupCursorMaxPos: ImVec2,
    BackupCursorPosPrevLine: ImVec2,
    BackupIndent: ImVec1,
    BackupGroupOffset: ImVec1,
    BackupCurrLineSize: ImVec2,
    BackupCurrLineTextBaseOffset: f32,
    BackupActiveIdIsAlive: ImGuiID,
    BackupActiveIdPreviousFrameIsAlive: bool,
    BackupHoveredIdIsAlive: bool,
    BackupIsSameLine: bool,
    EmitItem: bool,
);
ImGuiMenuColumns :: @struct(
    TotalWidth: ImU32,
    NextTotalWidth: ImU32,
    Spacing: ImU16,
    OffsetIcon: ImU16,
    OffsetLabel: ImU16,
    OffsetShortcut: ImU16,
    OffsetMark: ImU16,
    Widths: Array(ImU16, 4),
);
ImGuiInputTextDeactivatedState :: @struct(
    ID: ImGuiID,
    TextA: ImVectorChar,
);
ImStbTexteditState :: STBTexteditState;
ImGuiInputTextState :: @rec @struct(
    Ctx: *ImGuiContext,
    Stb: *ImStbTexteditState,
    ID: ImGuiID,
    TextLen: i32,
    TextA: ImVectorChar,
    TextToRevertTo: ImVectorChar,
    CallbackTextBackup: ImVectorChar,
    BufCapacity: i32,
    Scroll: ImVec2,
    CursorAnim: f32,
    CursorFollow: bool,
    SelectedAllMouseLock: bool,
    Edited: bool,
    Flags: ImGuiInputTextFlags,
    ReloadUserBuf: bool,
    ReloadSelectionStart: i32,
    ReloadSelectionEnd: i32,
);
ImGuiNextWindowData :: @rec @struct(
    Flags: ImGuiNextWindowDataFlags,
    PosCond: ImGuiCond,
    SizeCond: ImGuiCond,
    CollapsedCond: ImGuiCond,
    PosVal: ImVec2,
    PosPivotVal: ImVec2,
    SizeVal: ImVec2,
    ContentSizeVal: ImVec2,
    ScrollVal: ImVec2,
    ChildFlags: ImGuiChildFlags,
    CollapsedVal: bool,
    SizeConstraintRect: ImRect,
    SizeCallback: ImGuiSizeCallback,
    SizeCallbackUserData: rawptr,
    BgAlphaVal: f32,
    MenuBarOffsetMinVal: ImVec2,
    RefreshFlagsVal: ImGuiWindowRefreshFlags,
);
ImGuiNextItemData :: @rec @struct(
    HasFlags: ImGuiNextItemDataFlags,
    ItemFlags: ImGuiItemFlags,
    FocusScopeId: ImGuiID,
    SelectionUserData: ImGuiSelectionUserData,
    Width: f32,
    Shortcut: ImGuiKeyChord,
    ShortcutFlags: ImGuiInputFlags,
    OpenVal: bool,
    OpenCond: ImU8,
    RefVal: ImGuiDataTypeStorage,
    StorageId: ImGuiID,
);
ImGuiLastItemData :: @rec @struct(
    ID: ImGuiID,
    ItemFlags: ImGuiItemFlags,
    StatusFlags: ImGuiItemStatusFlags,
    Rect: ImRect,
    NavRect: ImRect,
    DisplayRect: ImRect,
    ClipRect: ImRect,
    Shortcut: ImGuiKeyChord,
);
ImGuiTreeNodeStackData :: @rec @struct(
    ID: ImGuiID,
    TreeFlags: ImGuiTreeNodeFlags,
    ItemFlags: ImGuiItemFlags,
    NavRect: ImRect,
);
ImGuiErrorRecoveryState :: @rec @struct(
    SizeOfWindowStack: i16,
    SizeOfIDStack: i16,
    SizeOfTreeStack: i16,
    SizeOfColorStack: i16,
    SizeOfStyleVarStack: i16,
    SizeOfFontStack: i16,
    SizeOfFocusScopeStack: i16,
    SizeOfGroupStack: i16,
    SizeOfItemFlagsStack: i16,
    SizeOfBeginPopupStack: i16,
    SizeOfDisabledStack: i16,
);
ImGuiWindowStackData :: @rec @struct(
    Window: *ImGuiWindow,
    ParentLastItemDataBackup: ImGuiLastItemData,
    StackSizesInBegin: ImGuiErrorRecoveryState,
    DisabledOverrideReenable: bool,
);
ImGuiShrinkWidthItem :: @rec @struct(
    Index: i32,
    Width: f32,
    InitialWidth: f32,
);
ImGuiPtrOrIndex :: @rec @struct(
    Ptr: rawptr,
    Index: i32,
);
ImGuiPopupData :: @struct(
    PopupId: ImGuiID,
    Window: *ImGuiWindow,
    RestoreNavWindow: *ImGuiWindow,
    ParentNavLayer: i32,
    OpenFrameCount: i32,
    OpenParentId: ImGuiID,
    OpenPopupPos: ImVec2,
    OpenMousePos: ImVec2,
);
ImBitArrayImGuiKeyNamedKeyCOUNTLessImGuiKeyNamedKeyBEGIN :: @struct(
    Storage: Array(ImU32, 5),
);
ImBitArrayForNamedKeys :: ImBitArrayImGuiKeyNamedKeyCOUNTLessImGuiKeyNamedKeyBEGIN;
ImGuiInputEventMousePos :: @struct(
    PosX: f32,
    PosY: f32,
    MouseSource: ImGuiMouseSource,
);
ImGuiInputEventMouseWheel :: @rec @struct(
    WheelX: f32,
    WheelY: f32,
    MouseSource: ImGuiMouseSource,
);
ImGuiInputEventMouseButton :: @rec @struct(
    Button: i32,
    Down: bool,
    MouseSource: ImGuiMouseSource,
);
ImGuiInputEventKey :: @rec @struct(
    Key: ImGuiKey,
    Down: bool,
    AnalogValue: f32,
);
ImGuiInputEventText :: @rec @struct(
    Char: u32,
);
ImGuiInputEventAppFocused :: @rec @struct(
    Focused: bool,
);
ImGuiInputEvent :: @rec @struct(
    Type: ImGuiInputEventType,
    Source: ImGuiInputSource,
    EventId: ImU32,
    _embed: @union(
        MousePos: ImGuiInputEventMousePos,
        MouseWheel: ImGuiInputEventMouseWheel,
        MouseButton: ImGuiInputEventMouseButton,
        Key: ImGuiInputEventKey,
        Text: ImGuiInputEventText,
        AppFocused: ImGuiInputEventAppFocused,
    ),
);
ImGuiKeyRoutingIndex :: ImS16;
ImGuiKeyRoutingData :: @rec @struct(
    NextEntryIndex: ImGuiKeyRoutingIndex,
    Mods: ImU16,
    RoutingCurrScore: ImU8,
    RoutingNextScore: ImU8,
    RoutingCurr: ImGuiID,
    RoutingNext: ImGuiID,
);
ImVectorImGuiKeyRoutingData :: @rec @struct(
    Size: i32,
    Capacity: i32,
    Data: *ImGuiKeyRoutingData,
);
ImGuiKeyRoutingTable :: @rec @struct(
    Index: Array(ImGuiKeyRoutingIndex, 154),
    Entries: ImVectorImGuiKeyRoutingData,
    EntriesNext: ImVectorImGuiKeyRoutingData,
);
ImGuiKeyOwnerData :: @rec @struct(
    OwnerCurr: ImGuiID,
    OwnerNext: ImGuiID,
    LockThisFrame: bool,
    LockUntilRelease: bool,
);
ImGuiListClipperRange :: @rec @struct(
    Min: i32,
    Max: i32,
    PosToIndexConvert: bool,
    PosToIndexOffsetMin: ImS8,
    PosToIndexOffsetMax: ImS8,
);
ImVectorImGuiListClipperRange :: @rec @struct(
    Size: i32,
    Capacity: i32,
    Data: *ImGuiListClipperRange,
);
ImGuiListClipperData :: @rec @struct(
    ListClipper: *ImGuiListClipper,
    LossynessOffset: f32,
    StepNo: i32,
    ItemsFrozen: i32,
    Ranges: ImVectorImGuiListClipperRange,
);
ImGuiNavItemData :: @struct(
    Window: *ImGuiWindow,
    ID: ImGuiID,
    FocusScopeId: ImGuiID,
    RectRel: ImRect,
    ItemFlags: ImGuiItemFlags,
    DistBox: f32,
    DistCenter: f32,
    DistAxial: f32,
    SelectionUserData: ImGuiSelectionUserData,
);
ImGuiFocusScopeData :: @struct(
    ID: ImGuiID,
    WindowID: ImGuiID,
);
ImGuiTypingSelectRequest :: @struct(
    Flags: ImGuiTypingSelectFlags,
    SearchBufferLen: i32,
    SearchBuffer: CStr,
    SelectRequest: bool,
    SingleCharMode: bool,
    SingleCharSize: ImS8,
);
ImGuiTypingSelectState :: @struct(
    Request: ImGuiTypingSelectRequest,
    SearchBuffer: Array(i8, 64),
    FocusScope: ImGuiID,
    LastRequestFrame: i32,
    LastRequestTime: f32,
    SingleCharModeLock: bool,
);
ImGuiOldColumnData :: @struct(
    OffsetNorm: f32,
    OffsetNormBeforeResize: f32,
    Flags: ImGuiOldColumnFlags,
    ClipRect: ImRect,
);
ImVectorImGuiOldColumnData :: @struct(
    Size: i32,
    Capacity: i32,
    Data: *ImGuiOldColumnData,
);
ImGuiOldColumns :: @struct(
    ID: ImGuiID,
    Flags: ImGuiOldColumnFlags,
    IsFirstFrame: bool,
    IsBeingResized: bool,
    Current: i32,
    Count: i32,
    OffMinX: f32,
    OffMaxX: f32,
    LineMinY: f32,
    LineMaxY: f32,
    HostCursorPosY: f32,
    HostCursorMaxPosX: f32,
    HostInitialClipRect: ImRect,
    HostBackupClipRect: ImRect,
    HostBackupParentWorkRect: ImRect,
    Columns: ImVectorImGuiOldColumnData,
    Splitter: ImDrawListSplitter,
);
ImGuiBoxSelectState :: @struct(
    ID: ImGuiID,
    IsActive: bool,
    IsStarting: bool,
    IsStartedFromVoid: bool,
    IsStartedSetNavIdOnce: bool,
    RequestClear: bool,
    KeyMods: ImGuiKeyChord,
    StartPosRel: ImVec2,
    EndPosRel: ImVec2,
    ScrollAccum: ImVec2,
    Window: *ImGuiWindow,
    UnclipMode: bool,
    UnclipRect: ImRect,
    BoxSelectRectPrev: ImRect,
    BoxSelectRectCurr: ImRect,
);
ImGuiMultiSelectTempData :: @struct(
    IO: ImGuiMultiSelectIO,
    Storage: *ImGuiMultiSelectState,
    FocusScopeId: ImGuiID,
    Flags: ImGuiMultiSelectFlags,
    ScopeRectMin: ImVec2,
    BackupCursorMaxPos: ImVec2,
    LastSubmittedItem: ImGuiSelectionUserData,
    BoxSelectId: ImGuiID,
    KeyMods: ImGuiKeyChord,
    LoopRequestSetAll: ImS8,
    IsEndIO: bool,
    IsFocused: bool,
    IsKeyboardSetRange: bool,
    NavIdPassedBy: bool,
    RangeSrcPassedBy: bool,
    RangeDstPassedBy: bool,
);
ImGuiMultiSelectState :: @struct(
    Window: *ImGuiWindow,
    ID: ImGuiID,
    LastFrameActive: i32,
    LastSelectionSize: i32,
    RangeSelected: ImS8,
    NavIdSelected: ImS8,
    RangeSrcItem: ImGuiSelectionUserData,
    NavIdItem: ImGuiSelectionUserData,
);
ImGuiViewportP :: @rec @struct(
    _ImGuiViewport: ImGuiViewport,
    BgFgDrawListsLastFrame: Array(i32, 2),
    BgFgDrawLists: Array(*ImDrawList, 2),
    DrawDataP: ImDrawData,
    DrawDataBuilder: ImDrawDataBuilder,
    WorkInsetMin: ImVec2,
    WorkInsetMax: ImVec2,
    BuildWorkInsetMin: ImVec2,
    BuildWorkInsetMax: ImVec2,
);
ImGuiWindowSettings :: @rec @struct(
    ID: ImGuiID,
    Pos: ImVec2ih,
    Size: ImVec2ih,
    Collapsed: bool,
    IsChild: bool,
    WantApply: bool,
    WantDelete: bool,
);
ImGuiSettingsHandler :: @struct(
    TypeName: CStr,
    TypeHash: ImGuiID,
    ClearAllFn: @FnPtr(*ImGuiContext, *ImGuiSettingsHandler) void,
    ReadInitFn: @FnPtr(*ImGuiContext, *ImGuiSettingsHandler) void,
    ReadOpenFn: @FnPtr(*ImGuiContext, *ImGuiSettingsHandler, CStr) rawptr,
    ReadLineFn: @FnPtr(*ImGuiContext, *ImGuiSettingsHandler, rawptr, CStr) void,
    ApplyAllFn: @FnPtr(*ImGuiContext, *ImGuiSettingsHandler) void,
    WriteAllFn: @FnPtr(*ImGuiContext, *ImGuiSettingsHandler, *ImGuiTextBuffer) void,
    UserData: rawptr,
);
ImGuiLocEntry :: @struct(
    Key: ImGuiLocKey,
    Text: CStr,
);
ImGuiErrorCallback :: @FnPtr(*ImGuiContext, rawptr, CStr) void;
ImGuiDebugAllocEntry :: @rec @struct(
    FrameCount: i32,
    AllocCount: ImS16,
    FreeCount: ImS16,
);
ImGuiDebugAllocInfo :: @struct(
    TotalAllocCount: i32,
    TotalFreeCount: i32,
    LastEntriesIdx: ImS16,
    LastEntriesBuf: Array(ImGuiDebugAllocEntry, 6),
);
ImGuiMetricsConfig :: @struct(
    ShowDebugLog: bool,
    ShowIDStackTool: bool,
    ShowWindowsRects: bool,
    ShowWindowsBeginOrder: bool,
    ShowTablesRects: bool,
    ShowDrawCmdMesh: bool,
    ShowDrawCmdBoundingBoxes: bool,
    ShowTextEncodingViewer: bool,
    ShowAtlasTintedWithTextColor: bool,
    ShowWindowsRectsType: i32,
    ShowTablesRectsType: i32,
    HighlightMonitorIdx: i32,
    HighlightViewportID: ImGuiID,
);
ImGuiStackLevelInfo :: @struct(
    ID: ImGuiID,
    QueryFrameCount: ImS8,
    QuerySuccess: bool,
    DataType: ImGuiDataType,
    Desc: Array(i8, 57),
);
ImVectorImGuiStackLevelInfo :: @struct(
    Size: i32,
    Capacity: i32,
    Data: *ImGuiStackLevelInfo,
);
ImGuiIDStackTool :: @struct(
    LastActiveFrame: i32,
    StackLevel: i32,
    QueryId: ImGuiID,
    Results: ImVectorImGuiStackLevelInfo,
    CopyToClipboardOnCtrlC: bool,
    CopyToClipboardLastTime: f32,
);
ImGuiContextHookCallback :: @FnPtr(*ImGuiContext, *ImGuiContextHook) void;
ImGuiContextHook :: @struct(
    HookId: ImGuiID,
    Type: ImGuiContextHookType,
    Owner: ImGuiID,
    Callback: ImGuiContextHookCallback,
    UserData: rawptr,
);
ImVectorImGuiInputEvent :: @struct(
    Size: i32,
    Capacity: i32,
    Data: *ImGuiInputEvent,
);
ImVectorImGuiWindowPtr :: @rec @struct(
    Size: i32,
    Capacity: i32,
    Data: **ImGuiWindow,
);
ImVectorImGuiWindowStackData :: @rec @struct(
    Size: i32,
    Capacity: i32,
    Data: *ImGuiWindowStackData,
);
ImVectorImGuiColorMod :: @rec @struct(
    Size: i32,
    Capacity: i32,
    Data: *ImGuiColorMod,
);
ImVectorImGuiStyleMod :: @rec @struct(
    Size: i32,
    Capacity: i32,
    Data: *ImGuiStyleMod,
);
ImVectorImGuiFocusScopeData :: @rec @struct(
    Size: i32,
    Capacity: i32,
    Data: *ImGuiFocusScopeData,
);
ImVectorImGuiItemFlags :: @rec @struct(
    Size: i32,
    Capacity: i32,
    Data: *ImGuiItemFlags,
);
ImVectorImGuiGroupData :: @rec @struct(
    Size: i32,
    Capacity: i32,
    Data: *ImGuiGroupData,
);
ImVectorImGuiPopupData :: @rec @struct(
    Size: i32,
    Capacity: i32,
    Data: *ImGuiPopupData,
);
ImVectorImGuiTreeNodeStackData :: @struct(
    Size: i32,
    Capacity: i32,
    Data: *ImGuiTreeNodeStackData,
);
ImVectorImGuiViewportPPtr :: @struct(
    Size: i32,
    Capacity: i32,
    Data: **ImGuiViewportP,
);
ImVectorUnsignedChar :: @struct(
    Size: i32,
    Capacity: i32,
    Data: *u8,
);
ImVectorImGuiListClipperData :: @struct(
    Size: i32,
    Capacity: i32,
    Data: *ImGuiListClipperData,
);
ImVectorImGuiTableTempData :: @struct(
    Size: i32,
    Capacity: i32,
    Data: *ImGuiTableTempData,
);
ImVectorImGuiTable :: @struct(
    Size: i32,
    Capacity: i32,
    Data: *ImGuiTable,
);
ImPoolImGuiTable :: @struct(
    Buf: ImVectorImGuiTable,
    Map: ImGuiStorage,
    FreeIdx: ImPoolIdx,
    AliveCount: ImPoolIdx,
);
ImVectorImGuiTabBar :: @struct(
    Size: i32,
    Capacity: i32,
    Data: *ImGuiTabBar,
);
ImPoolImGuiTabBar :: @struct(
    Buf: ImVectorImGuiTabBar,
    Map: ImGuiStorage,
    FreeIdx: ImPoolIdx,
    AliveCount: ImPoolIdx,
);
ImVectorImGuiPtrOrIndex :: @struct(
    Size: i32,
    Capacity: i32,
    Data: *ImGuiPtrOrIndex,
);
ImVectorImGuiShrinkWidthItem :: @struct(
    Size: i32,
    Capacity: i32,
    Data: *ImGuiShrinkWidthItem,
);
ImVectorImGuiMultiSelectTempData :: @struct(
    Size: i32,
    Capacity: i32,
    Data: *ImGuiMultiSelectTempData,
);
ImVectorImGuiMultiSelectState :: @struct(
    Size: i32,
    Capacity: i32,
    Data: *ImGuiMultiSelectState,
);
ImPoolImGuiMultiSelectState :: @struct(
    Buf: ImVectorImGuiMultiSelectState,
    Map: ImGuiStorage,
    FreeIdx: ImPoolIdx,
    AliveCount: ImPoolIdx,
);
ImVectorImGuiID :: @struct(
    Size: i32,
    Capacity: i32,
    Data: *ImGuiID,
);
ImVectorImGuiSettingsHandler :: @struct(
    Size: i32,
    Capacity: i32,
    Data: *ImGuiSettingsHandler,
);
ImChunkStreamImGuiWindowSettings :: @struct(
    Buf: ImVectorChar,
);
ImChunkStreamImGuiTableSettings :: @struct(
    Buf: ImVectorChar,
);
ImVectorImGuiContextHook :: @struct(
    Size: i32,
    Capacity: i32,
    Data: *ImGuiContextHook,
);
ImGuiContext :: @struct(
    Initialized: bool,
    FontAtlasOwnedByContext: bool,
    IO: ImGuiIO,
    PlatformIO: ImGuiPlatformIO,
    Style: ImGuiStyle,
    Font: *ImFont,
    FontSize: f32,
    FontBaseSize: f32,
    FontScale: f32,
    CurrentDpiScale: f32,
    DrawListSharedData: ImDrawListSharedData,
    Time: f64,
    FrameCount: i32,
    FrameCountEnded: i32,
    FrameCountRendered: i32,
    WithinFrameScope: bool,
    WithinFrameScopeWithImplicitWindow: bool,
    WithinEndChild: bool,
    GcCompactAll: bool,
    TestEngineHookItems: bool,
    TestEngine: rawptr,
    ContextName: Array(i8, 16),
    InputEventsQueue: ImVectorImGuiInputEvent,
    InputEventsTrail: ImVectorImGuiInputEvent,
    InputEventsNextMouseSource: ImGuiMouseSource,
    InputEventsNextEventId: ImU32,
    Windows: ImVectorImGuiWindowPtr,
    WindowsFocusOrder: ImVectorImGuiWindowPtr,
    WindowsTempSortBuffer: ImVectorImGuiWindowPtr,
    CurrentWindowStack: ImVectorImGuiWindowStackData,
    WindowsById: ImGuiStorage,
    WindowsActiveCount: i32,
    WindowsHoverPadding: ImVec2,
    DebugBreakInWindow: ImGuiID,
    CurrentWindow: *ImGuiWindow,
    HoveredWindow: *ImGuiWindow,
    HoveredWindowUnderMovingWindow: *ImGuiWindow,
    HoveredWindowBeforeClear: *ImGuiWindow,
    MovingWindow: *ImGuiWindow,
    WheelingWindow: *ImGuiWindow,
    WheelingWindowRefMousePos: ImVec2,
    WheelingWindowStartFrame: i32,
    WheelingWindowScrolledFrame: i32,
    WheelingWindowReleaseTimer: f32,
    WheelingWindowWheelRemainder: ImVec2,
    WheelingAxisAvg: ImVec2,
    DebugDrawIdConflicts: ImGuiID,
    DebugHookIdInfo: ImGuiID,
    HoveredId: ImGuiID,
    HoveredIdPreviousFrame: ImGuiID,
    HoveredIdPreviousFrameItemCount: i32,
    HoveredIdTimer: f32,
    HoveredIdNotActiveTimer: f32,
    HoveredIdAllowOverlap: bool,
    HoveredIdIsDisabled: bool,
    ItemUnclipByLog: bool,
    ActiveId: ImGuiID,
    ActiveIdIsAlive: ImGuiID,
    ActiveIdTimer: f32,
    ActiveIdIsJustActivated: bool,
    ActiveIdAllowOverlap: bool,
    ActiveIdNoClearOnFocusLoss: bool,
    ActiveIdHasBeenPressedBefore: bool,
    ActiveIdHasBeenEditedBefore: bool,
    ActiveIdHasBeenEditedThisFrame: bool,
    ActiveIdFromShortcut: bool,
    ActiveIdMouseButton: i32,
    ActiveIdClickOffset: ImVec2,
    ActiveIdWindow: *ImGuiWindow,
    ActiveIdSource: ImGuiInputSource,
    ActiveIdPreviousFrame: ImGuiID,
    ActiveIdPreviousFrameIsAlive: bool,
    ActiveIdPreviousFrameHasBeenEditedBefore: bool,
    ActiveIdPreviousFrameWindow: *ImGuiWindow,
    LastActiveId: ImGuiID,
    LastActiveIdTimer: f32,
    LastKeyModsChangeTime: f64,
    LastKeyModsChangeFromNoneTime: f64,
    LastKeyboardKeyPressTime: f64,
    KeysMayBeCharInput: ImBitArrayForNamedKeys,
    KeysOwnerData: Array(ImGuiKeyOwnerData, 154),
    KeysRoutingTable: ImGuiKeyRoutingTable,
    ActiveIdUsingNavDirMask: ImU32,
    ActiveIdUsingAllKeyboardKeys: bool,
    DebugBreakInShortcutRouting: ImGuiKeyChord,
    CurrentFocusScopeId: ImGuiID,
    CurrentItemFlags: ImGuiItemFlags,
    DebugLocateId: ImGuiID,
    NextItemData: ImGuiNextItemData,
    LastItemData: ImGuiLastItemData,
    NextWindowData: ImGuiNextWindowData,
    DebugShowGroupRects: bool,
    DebugFlashStyleColorIdx: ImGuiCol,
    ColorStack: ImVectorImGuiColorMod,
    StyleVarStack: ImVectorImGuiStyleMod,
    FontStack: ImVectorImFontPtr,
    FocusScopeStack: ImVectorImGuiFocusScopeData,
    ItemFlagsStack: ImVectorImGuiItemFlags,
    GroupStack: ImVectorImGuiGroupData,
    OpenPopupStack: ImVectorImGuiPopupData,
    BeginPopupStack: ImVectorImGuiPopupData,
    TreeNodeStack: ImVectorImGuiTreeNodeStackData,
    Viewports: ImVectorImGuiViewportPPtr,
    NavCursorVisible: bool,
    NavHighlightItemUnderNav: bool,
    NavMousePosDirty: bool,
    NavIdIsAlive: bool,
    NavId: ImGuiID,
    NavWindow: *ImGuiWindow,
    NavFocusScopeId: ImGuiID,
    NavLayer: ImGuiNavLayer,
    NavActivateId: ImGuiID,
    NavActivateDownId: ImGuiID,
    NavActivatePressedId: ImGuiID,
    NavActivateFlags: ImGuiActivateFlags,
    NavFocusRoute: ImVectorImGuiFocusScopeData,
    NavHighlightActivatedId: ImGuiID,
    NavHighlightActivatedTimer: f32,
    NavNextActivateId: ImGuiID,
    NavNextActivateFlags: ImGuiActivateFlags,
    NavInputSource: ImGuiInputSource,
    NavLastValidSelectionUserData: ImGuiSelectionUserData,
    NavCursorHideFrames: ImS8,
    NavAnyRequest: bool,
    NavInitRequest: bool,
    NavInitRequestFromMove: bool,
    NavInitResult: ImGuiNavItemData,
    NavMoveSubmitted: bool,
    NavMoveScoringItems: bool,
    NavMoveForwardToNextFrame: bool,
    NavMoveFlags: ImGuiNavMoveFlags,
    NavMoveScrollFlags: ImGuiScrollFlags,
    NavMoveKeyMods: ImGuiKeyChord,
    NavMoveDir: ImGuiDir,
    NavMoveDirForDebug: ImGuiDir,
    NavMoveClipDir: ImGuiDir,
    NavScoringRect: ImRect,
    NavScoringNoClipRect: ImRect,
    NavScoringDebugCount: i32,
    NavTabbingDir: i32,
    NavTabbingCounter: i32,
    NavMoveResultLocal: ImGuiNavItemData,
    NavMoveResultLocalVisible: ImGuiNavItemData,
    NavMoveResultOther: ImGuiNavItemData,
    NavTabbingResultFirst: ImGuiNavItemData,
    NavJustMovedFromFocusScopeId: ImGuiID,
    NavJustMovedToId: ImGuiID,
    NavJustMovedToFocusScopeId: ImGuiID,
    NavJustMovedToKeyMods: ImGuiKeyChord,
    NavJustMovedToIsTabbing: bool,
    NavJustMovedToHasSelectionData: bool,
    ConfigNavWindowingKeyNext: ImGuiKeyChord,
    ConfigNavWindowingKeyPrev: ImGuiKeyChord,
    NavWindowingTarget: *ImGuiWindow,
    NavWindowingTargetAnim: *ImGuiWindow,
    NavWindowingListWindow: *ImGuiWindow,
    NavWindowingTimer: f32,
    NavWindowingHighlightAlpha: f32,
    NavWindowingToggleLayer: bool,
    NavWindowingToggleKey: ImGuiKey,
    NavWindowingAccumDeltaPos: ImVec2,
    NavWindowingAccumDeltaSize: ImVec2,
    DimBgRatio: f32,
    DragDropActive: bool,
    DragDropWithinSource: bool,
    DragDropWithinTarget: bool,
    DragDropSourceFlags: ImGuiDragDropFlags,
    DragDropSourceFrameCount: i32,
    DragDropMouseButton: i32,
    DragDropPayload: ImGuiPayload,
    DragDropTargetRect: ImRect,
    DragDropTargetClipRect: ImRect,
    DragDropTargetId: ImGuiID,
    DragDropAcceptFlags: ImGuiDragDropFlags,
    DragDropAcceptIdCurrRectSurface: f32,
    DragDropAcceptIdCurr: ImGuiID,
    DragDropAcceptIdPrev: ImGuiID,
    DragDropAcceptFrameCount: i32,
    DragDropHoldJustPressedId: ImGuiID,
    DragDropPayloadBufHeap: ImVectorUnsignedChar,
    DragDropPayloadBufLocal: Array(u8, 16),
    ClipperTempDataStacked: i32,
    ClipperTempData: ImVectorImGuiListClipperData,
    CurrentTable: *ImGuiTable,
    DebugBreakInTable: ImGuiID,
    TablesTempDataStacked: i32,
    TablesTempData: ImVectorImGuiTableTempData,
    Tables: ImPoolImGuiTable,
    TablesLastTimeActive: ImVectorFloat,
    DrawChannelsTempMergeBuffer: ImVectorImDrawChannel,
    CurrentTabBar: *ImGuiTabBar,
    TabBars: ImPoolImGuiTabBar,
    CurrentTabBarStack: ImVectorImGuiPtrOrIndex,
    ShrinkWidthBuffer: ImVectorImGuiShrinkWidthItem,
    BoxSelectState: ImGuiBoxSelectState,
    CurrentMultiSelect: *ImGuiMultiSelectTempData,
    MultiSelectTempDataStacked: i32,
    MultiSelectTempData: ImVectorImGuiMultiSelectTempData,
    MultiSelectStorage: ImPoolImGuiMultiSelectState,
    HoverItemDelayId: ImGuiID,
    HoverItemDelayIdPreviousFrame: ImGuiID,
    HoverItemDelayTimer: f32,
    HoverItemDelayClearTimer: f32,
    HoverItemUnlockedStationaryId: ImGuiID,
    HoverWindowUnlockedStationaryId: ImGuiID,
    MouseCursor: ImGuiMouseCursor,
    MouseStationaryTimer: f32,
    MouseLastValidPos: ImVec2,
    InputTextState: ImGuiInputTextState,
    InputTextDeactivatedState: ImGuiInputTextDeactivatedState,
    InputTextPasswordFont: ImFont,
    TempInputId: ImGuiID,
    DataTypeZeroValue: ImGuiDataTypeStorage,
    BeginMenuDepth: i32,
    BeginComboDepth: i32,
    ColorEditOptions: ImGuiColorEditFlags,
    ColorEditCurrentID: ImGuiID,
    ColorEditSavedID: ImGuiID,
    ColorEditSavedHue: f32,
    ColorEditSavedSat: f32,
    ColorEditSavedColor: ImU32,
    ColorPickerRef: ImVec4,
    ComboPreviewData: ImGuiComboPreviewData,
    WindowResizeBorderExpectedRect: ImRect,
    WindowResizeRelativeMode: bool,
    ScrollbarSeekMode: i16,
    ScrollbarClickDeltaToGrabCenter: f32,
    SliderGrabClickOffset: f32,
    SliderCurrentAccum: f32,
    SliderCurrentAccumDirty: bool,
    DragCurrentAccumDirty: bool,
    DragCurrentAccum: f32,
    DragSpeedDefaultRatio: f32,
    DisabledAlphaBackup: f32,
    DisabledStackSize: i16,
    TooltipOverrideCount: i16,
    TooltipPreviousWindow: *ImGuiWindow,
    ClipboardHandlerData: ImVectorChar,
    MenusIdSubmittedThisFrame: ImVectorImGuiID,
    TypingSelectState: ImGuiTypingSelectState,
    PlatformImeData: ImGuiPlatformImeData,
    PlatformImeDataPrev: ImGuiPlatformImeData,
    SettingsLoaded: bool,
    SettingsDirtyTimer: f32,
    SettingsIniData: ImGuiTextBuffer,
    SettingsHandlers: ImVectorImGuiSettingsHandler,
    SettingsWindows: ImChunkStreamImGuiWindowSettings,
    SettingsTables: ImChunkStreamImGuiTableSettings,
    Hooks: ImVectorImGuiContextHook,
    HookIdNext: ImGuiID,
    LocalizationTable: Array(CStr, 10),
    LogEnabled: bool,
    LogFlags: ImGuiLogFlags,
    LogWindow: *ImGuiWindow,
    LogFile: ImFileHandle,
    LogBuffer: ImGuiTextBuffer,
    LogNextPrefix: CStr,
    LogNextSuffix: CStr,
    LogLinePosY: f32,
    LogLineFirstItem: bool,
    LogDepthRef: i32,
    LogDepthToExpand: i32,
    LogDepthToExpandDefault: i32,
    ErrorCallback: ImGuiErrorCallback,
    ErrorCallbackUserData: rawptr,
    ErrorTooltipLockedPos: ImVec2,
    ErrorFirst: bool,
    ErrorCountCurrentFrame: i32,
    StackSizesInNewFrame: ImGuiErrorRecoveryState,
    StackSizesInBeginForCurrentWindow: *ImGuiErrorRecoveryState,
    DebugDrawIdConflictsCount: i32,
    DebugLogFlags: ImGuiDebugLogFlags,
    DebugLogBuf: ImGuiTextBuffer,
    DebugLogIndex: ImGuiTextIndex,
    DebugLogSkippedErrors: i32,
    DebugLogAutoDisableFlags: ImGuiDebugLogFlags,
    DebugLogAutoDisableFrames: ImU8,
    DebugLocateFrames: ImU8,
    DebugBreakInLocateId: bool,
    DebugBreakKeyChord: ImGuiKeyChord,
    DebugBeginReturnValueCullDepth: ImS8,
    DebugItemPickerActive: bool,
    DebugItemPickerMouseButton: ImU8,
    DebugItemPickerBreakId: ImGuiID,
    DebugFlashStyleColorTime: f32,
    DebugFlashStyleColorBackup: ImVec4,
    DebugMetricsConfig: ImGuiMetricsConfig,
    DebugIDStackTool: ImGuiIDStackTool,
    DebugAllocInfo: ImGuiDebugAllocInfo,
    FramerateSecPerFrame: Array(f32, 60),
    FramerateSecPerFrameIdx: i32,
    FramerateSecPerFrameCount: i32,
    FramerateSecPerFrameAccum: f32,
    WantCaptureMouseNextFrame: i32,
    WantCaptureKeyboardNextFrame: i32,
    WantTextInputNextFrame: i32,
    TempBuffer: ImVectorChar,
    TempKeychordName: Array(i8, 64),
);
ImGuiWindowTempData :: @rec @struct(
    CursorPos: ImVec2,
    CursorPosPrevLine: ImVec2,
    CursorStartPos: ImVec2,
    CursorMaxPos: ImVec2,
    IdealMaxPos: ImVec2,
    CurrLineSize: ImVec2,
    PrevLineSize: ImVec2,
    CurrLineTextBaseOffset: f32,
    PrevLineTextBaseOffset: f32,
    IsSameLine: bool,
    IsSetPos: bool,
    Indent: ImVec1,
    ColumnsOffset: ImVec1,
    GroupOffset: ImVec1,
    CursorStartPosLossyness: ImVec2,
    NavLayerCurrent: ImGuiNavLayer,
    NavLayersActiveMask: i16,
    NavLayersActiveMaskNext: i16,
    NavIsScrollPushableX: bool,
    NavHideHighlightOneFrame: bool,
    NavWindowHasScrollY: bool,
    MenuBarAppending: bool,
    MenuBarOffset: ImVec2,
    MenuColumns: ImGuiMenuColumns,
    TreeDepth: i32,
    TreeHasStackDataDepthMask: ImU32,
    ChildWindows: ImVectorImGuiWindowPtr,
    StateStorage: *ImGuiStorage,
    CurrentColumns: *ImGuiOldColumns,
    CurrentTableIdx: i32,
    LayoutType: ImGuiLayoutType,
    ParentLayoutType: ImGuiLayoutType,
    ModalDimBgColor: ImU32,
    ItemWidth: f32,
    TextWrapPos: f32,
    ItemWidthStack: ImVectorFloat,
    TextWrapPosStack: ImVectorFloat,
);
ImVectorImGuiOldColumns :: @rec @struct(
    Size: i32,
    Capacity: i32,
    Data: *ImGuiOldColumns,
);
ImGuiWindow :: @rec @struct(
    Ctx: *ImGuiContext,
    Name: CStr,
    ID: ImGuiID,
    Flags: ImGuiWindowFlags,
    ChildFlags: ImGuiChildFlags,
    Viewport: *ImGuiViewportP,
    Pos: ImVec2,
    Size: ImVec2,
    SizeFull: ImVec2,
    ContentSize: ImVec2,
    ContentSizeIdeal: ImVec2,
    ContentSizeExplicit: ImVec2,
    WindowPadding: ImVec2,
    WindowRounding: f32,
    WindowBorderSize: f32,
    TitleBarHeight: f32,
    MenuBarHeight: f32,
    DecoOuterSizeX1: f32,
    DecoOuterSizeY1: f32,
    DecoOuterSizeX2: f32,
    DecoOuterSizeY2: f32,
    DecoInnerSizeX1: f32,
    DecoInnerSizeY1: f32,
    NameBufLen: i32,
    MoveId: ImGuiID,
    ChildId: ImGuiID,
    PopupId: ImGuiID,
    Scroll: ImVec2,
    ScrollMax: ImVec2,
    ScrollTarget: ImVec2,
    ScrollTargetCenterRatio: ImVec2,
    ScrollTargetEdgeSnapDist: ImVec2,
    ScrollbarSizes: ImVec2,
    ScrollbarX: bool,
    ScrollbarY: bool,
    Active: bool,
    WasActive: bool,
    WriteAccessed: bool,
    Collapsed: bool,
    WantCollapseToggle: bool,
    SkipItems: bool,
    SkipRefresh: bool,
    Appearing: bool,
    Hidden: bool,
    IsFallbackWindow: bool,
    IsExplicitChild: bool,
    HasCloseButton: bool,
    ResizeBorderHovered: i8,
    ResizeBorderHeld: i8,
    BeginCount: i16,
    BeginCountPreviousFrame: i16,
    BeginOrderWithinParent: i16,
    BeginOrderWithinContext: i16,
    FocusOrder: i16,
    AutoFitFramesX: ImS8,
    AutoFitFramesY: ImS8,
    AutoFitOnlyGrows: bool,
    AutoPosLastDirection: ImGuiDir,
    HiddenFramesCanSkipItems: ImS8,
    HiddenFramesCannotSkipItems: ImS8,
    HiddenFramesForRenderOnly: ImS8,
    DisableInputsFrames: ImS8,
    SetWindowPosAllowFlags: ImGuiCond,
    SetWindowSizeAllowFlags: ImGuiCond,
    SetWindowCollapsedAllowFlags: ImGuiCond,
    SetWindowPosVal: ImVec2,
    SetWindowPosPivot: ImVec2,
    IDStack: ImVectorImGuiID,
    DC: ImGuiWindowTempData,
    OuterRectClipped: ImRect,
    InnerRect: ImRect,
    InnerClipRect: ImRect,
    WorkRect: ImRect,
    ParentWorkRect: ImRect,
    ClipRect: ImRect,
    ContentRegionRect: ImRect,
    HitTestHoleSize: ImVec2ih,
    HitTestHoleOffset: ImVec2ih,
    LastFrameActive: i32,
    LastTimeActive: f32,
    ItemWidthDefault: f32,
    StateStorage: ImGuiStorage,
    ColumnsStorage: ImVectorImGuiOldColumns,
    FontWindowScale: f32,
    SettingsOffset: i32,
    DrawList: *ImDrawList,
    DrawListInst: ImDrawList,
    ParentWindow: *ImGuiWindow,
    ParentWindowInBeginStack: *ImGuiWindow,
    RootWindow: *ImGuiWindow,
    RootWindowPopupTree: *ImGuiWindow,
    RootWindowForTitleBarHighlight: *ImGuiWindow,
    RootWindowForNav: *ImGuiWindow,
    ParentWindowForFocusRoute: *ImGuiWindow,
    NavLastChildNavWindow: *ImGuiWindow,
    NavLastIds: Array(ImGuiID, 2),
    NavRectRel: Array(ImRect, 2),
    NavPreferredScoringPosRel: Array(ImVec2, 2),
    NavRootFocusScopeId: ImGuiID,
    MemoryDrawListIdxCapacity: i32,
    MemoryDrawListVtxCapacity: i32,
    MemoryCompacted: bool,
);
ImGuiTabItem :: @rec @struct(
    ID: ImGuiID,
    Flags: ImGuiTabItemFlags,
    LastFrameVisible: i32,
    LastFrameSelected: i32,
    Offset: f32,
    Width: f32,
    ContentWidth: f32,
    RequestedWidth: f32,
    NameOffset: ImS32,
    BeginOrder: ImS16,
    IndexDuringLayout: ImS16,
    WantClose: bool,
);
ImVectorImGuiTabItem :: @rec @struct(
    Size: i32,
    Capacity: i32,
    Data: *ImGuiTabItem,
);
ImGuiTabBar :: @rec @struct(
    Window: *ImGuiWindow,
    Tabs: ImVectorImGuiTabItem,
    Flags: ImGuiTabBarFlags,
    ID: ImGuiID,
    SelectedTabId: ImGuiID,
    NextSelectedTabId: ImGuiID,
    VisibleTabId: ImGuiID,
    CurrFrameVisible: i32,
    PrevFrameVisible: i32,
    BarRect: ImRect,
    CurrTabsContentsHeight: f32,
    PrevTabsContentsHeight: f32,
    WidthAllTabs: f32,
    WidthAllTabsIdeal: f32,
    ScrollingAnim: f32,
    ScrollingTarget: f32,
    ScrollingTargetDistToVisibility: f32,
    ScrollingSpeed: f32,
    ScrollingRectMinX: f32,
    ScrollingRectMaxX: f32,
    SeparatorMinX: f32,
    SeparatorMaxX: f32,
    ReorderRequestTabId: ImGuiID,
    ReorderRequestOffset: ImS16,
    BeginCount: ImS8,
    WantLayout: bool,
    VisibleTabWasSubmitted: bool,
    TabsAddedNew: bool,
    TabsActiveCount: ImS16,
    LastTabItemIdx: ImS16,
    ItemSpacingY: f32,
    FramePadding: ImVec2,
    BackupCursorPos: ImVec2,
    TabsNames: ImGuiTextBuffer,
);
ImGuiTableColumnIdx :: ImS16;
ImGuiTableDrawChannelIdx :: ImU16;
ImGuiTableColumn :: @rec @struct(
    Flags: ImGuiTableColumnFlags,
    WidthGiven: f32,
    MinX: f32,
    MaxX: f32,
    WidthRequest: f32,
    WidthAuto: f32,
    WidthMax: f32,
    StretchWeight: f32,
    InitStretchWeightOrWidth: f32,
    ClipRect: ImRect,
    UserID: ImGuiID,
    WorkMinX: f32,
    WorkMaxX: f32,
    ItemWidth: f32,
    ContentMaxXFrozen: f32,
    ContentMaxXUnfrozen: f32,
    ContentMaxXHeadersUsed: f32,
    ContentMaxXHeadersIdeal: f32,
    NameOffset: ImS16,
    DisplayOrder: ImGuiTableColumnIdx,
    IndexWithinEnabledSet: ImGuiTableColumnIdx,
    PrevEnabledColumn: ImGuiTableColumnIdx,
    NextEnabledColumn: ImGuiTableColumnIdx,
    SortOrder: ImGuiTableColumnIdx,
    DrawChannelCurrent: ImGuiTableDrawChannelIdx,
    DrawChannelFrozen: ImGuiTableDrawChannelIdx,
    DrawChannelUnfrozen: ImGuiTableDrawChannelIdx,
    IsEnabled: bool,
    IsUserEnabled: bool,
    IsUserEnabledNextFrame: bool,
    IsVisibleX: bool,
    IsVisibleY: bool,
    IsRequestOutput: bool,
    IsSkipItems: bool,
    IsPreserveWidthAuto: bool,
    NavLayerCurrent: ImS8,
    AutoFitQueue: ImU8,
    CannotSkipItemsQueue: ImU8,
    SortDirection: ImU8,
    SortDirectionsAvailCount: ImU8,
    SortDirectionsAvailMask: ImU8,
    SortDirectionsAvailList: ImU8,
);
ImGuiTableCellData :: @rec @struct(
    BgColor: ImU32,
    Column: ImGuiTableColumnIdx,
);
ImGuiTableHeaderData :: @rec @struct(
    Index: ImGuiTableColumnIdx,
    TextColor: ImU32,
    BgColor0: ImU32,
    BgColor1: ImU32,
);
ImGuiTableInstanceData :: @rec @struct(
    TableInstanceID: ImGuiID,
    LastOuterHeight: f32,
    LastTopHeadersRowHeight: f32,
    LastFrozenHeight: f32,
    HoveredRowLast: i32,
    HoveredRowNext: i32,
);
ImSpanImGuiTableColumn :: @rec @struct(
    Data: *ImGuiTableColumn,
    DataEnd: *ImGuiTableColumn,
);
ImSpanImGuiTableColumnIdx :: @rec @struct(
    Data: *ImGuiTableColumnIdx,
    DataEnd: *ImGuiTableColumnIdx,
);
ImSpanImGuiTableCellData :: @rec @struct(
    Data: *ImGuiTableCellData,
    DataEnd: *ImGuiTableCellData,
);
ImVectorImGuiTableInstanceData :: @struct(
    Size: i32,
    Capacity: i32,
    Data: *ImGuiTableInstanceData,
);
ImVectorImGuiTableColumnSortSpecs :: @struct(
    Size: i32,
    Capacity: i32,
    Data: *ImGuiTableColumnSortSpecs,
);
ImGuiTable :: @struct(
    ID: ImGuiID,
    Flags: ImGuiTableFlags,
    RawData: rawptr,
    TempData: *ImGuiTableTempData,
    Columns: ImSpanImGuiTableColumn,
    DisplayOrderToIndex: ImSpanImGuiTableColumnIdx,
    RowCellData: ImSpanImGuiTableCellData,
    EnabledMaskByDisplayOrder: ImBitArrayPtr,
    EnabledMaskByIndex: ImBitArrayPtr,
    VisibleMaskByIndex: ImBitArrayPtr,
    SettingsLoadedFlags: ImGuiTableFlags,
    SettingsOffset: i32,
    LastFrameActive: i32,
    ColumnsCount: i32,
    CurrentRow: i32,
    CurrentColumn: i32,
    InstanceCurrent: ImS16,
    InstanceInteracted: ImS16,
    RowPosY1: f32,
    RowPosY2: f32,
    RowMinHeight: f32,
    RowCellPaddingY: f32,
    RowTextBaseline: f32,
    RowIndentOffsetX: f32,
    RowFlags: ImGuiTableRowFlags,
    LastRowFlags: ImGuiTableRowFlags,
    RowBgColorCounter: i32,
    RowBgColor: Array(ImU32, 2),
    BorderColorStrong: ImU32,
    BorderColorLight: ImU32,
    BorderX1: f32,
    BorderX2: f32,
    HostIndentX: f32,
    MinColumnWidth: f32,
    OuterPaddingX: f32,
    CellPaddingX: f32,
    CellSpacingX1: f32,
    CellSpacingX2: f32,
    InnerWidth: f32,
    ColumnsGivenWidth: f32,
    ColumnsAutoFitWidth: f32,
    ColumnsStretchSumWeights: f32,
    ResizedColumnNextWidth: f32,
    ResizeLockMinContentsX2: f32,
    RefScale: f32,
    AngledHeadersHeight: f32,
    AngledHeadersSlope: f32,
    OuterRect: ImRect,
    InnerRect: ImRect,
    WorkRect: ImRect,
    InnerClipRect: ImRect,
    BgClipRect: ImRect,
    Bg0ClipRectForDrawCmd: ImRect,
    Bg2ClipRectForDrawCmd: ImRect,
    HostClipRect: ImRect,
    HostBackupInnerClipRect: ImRect,
    OuterWindow: *ImGuiWindow,
    InnerWindow: *ImGuiWindow,
    ColumnsNames: ImGuiTextBuffer,
    DrawSplitter: *ImDrawListSplitter,
    InstanceDataFirst: ImGuiTableInstanceData,
    InstanceDataExtra: ImVectorImGuiTableInstanceData,
    SortSpecsSingle: ImGuiTableColumnSortSpecs,
    SortSpecsMulti: ImVectorImGuiTableColumnSortSpecs,
    SortSpecs: ImGuiTableSortSpecs,
    SortSpecsCount: ImGuiTableColumnIdx,
    ColumnsEnabledCount: ImGuiTableColumnIdx,
    ColumnsEnabledFixedCount: ImGuiTableColumnIdx,
    DeclColumnsCount: ImGuiTableColumnIdx,
    AngledHeadersCount: ImGuiTableColumnIdx,
    HoveredColumnBody: ImGuiTableColumnIdx,
    HoveredColumnBorder: ImGuiTableColumnIdx,
    HighlightColumnHeader: ImGuiTableColumnIdx,
    AutoFitSingleColumn: ImGuiTableColumnIdx,
    ResizedColumn: ImGuiTableColumnIdx,
    LastResizedColumn: ImGuiTableColumnIdx,
    HeldHeaderColumn: ImGuiTableColumnIdx,
    ReorderColumn: ImGuiTableColumnIdx,
    ReorderColumnDir: ImGuiTableColumnIdx,
    LeftMostEnabledColumn: ImGuiTableColumnIdx,
    RightMostEnabledColumn: ImGuiTableColumnIdx,
    LeftMostStretchedColumn: ImGuiTableColumnIdx,
    RightMostStretchedColumn: ImGuiTableColumnIdx,
    ContextPopupColumn: ImGuiTableColumnIdx,
    FreezeRowsRequest: ImGuiTableColumnIdx,
    FreezeRowsCount: ImGuiTableColumnIdx,
    FreezeColumnsRequest: ImGuiTableColumnIdx,
    FreezeColumnsCount: ImGuiTableColumnIdx,
    RowCellDataCurrent: ImGuiTableColumnIdx,
    DummyDrawChannel: ImGuiTableDrawChannelIdx,
    Bg2DrawChannelCurrent: ImGuiTableDrawChannelIdx,
    Bg2DrawChannelUnfrozen: ImGuiTableDrawChannelIdx,
    IsLayoutLocked: bool,
    IsInsideRow: bool,
    IsInitializing: bool,
    IsSortSpecsDirty: bool,
    IsUsingHeaders: bool,
    IsContextPopupOpen: bool,
    DisableDefaultContextMenu: bool,
    IsSettingsRequestLoad: bool,
    IsSettingsDirty: bool,
    IsDefaultDisplayOrder: bool,
    IsResetAllRequest: bool,
    IsResetDisplayOrderRequest: bool,
    IsUnfrozenRows: bool,
    IsDefaultSizingPolicy: bool,
    IsActiveIdAliveBeforeTable: bool,
    IsActiveIdInTable: bool,
    HasScrollbarYCurr: bool,
    HasScrollbarYPrev: bool,
    MemoryCompacted: bool,
    HostSkipItems: bool,
);
ImVectorImGuiTableHeaderData :: @struct(
    Size: i32,
    Capacity: i32,
    Data: *ImGuiTableHeaderData,
);
ImGuiTableTempData :: @struct(
    TableIndex: i32,
    LastTimeActive: f32,
    AngledHeadersExtraWidth: f32,
    AngledHeadersRequests: ImVectorImGuiTableHeaderData,
    UserOuterSize: ImVec2,
    DrawSplitter: ImDrawListSplitter,
    HostBackupWorkRect: ImRect,
    HostBackupParentWorkRect: ImRect,
    HostBackupPrevLineSize: ImVec2,
    HostBackupCurrLineSize: ImVec2,
    HostBackupCursorMaxPos: ImVec2,
    HostBackupColumnsOffset: ImVec1,
    HostBackupItemWidth: f32,
    HostBackupItemWidthStackSize: i32,
);
ImGuiTableColumnSettings :: @struct(
    WidthOrWeight: f32,
    UserID: ImGuiID,
    Index: ImGuiTableColumnIdx,
    DisplayOrder: ImGuiTableColumnIdx,
    SortOrder: ImGuiTableColumnIdx,
    SortDirection: ImU8,
    IsEnabled: ImU8,
    IsStretch: ImU8,
);
ImGuiTableSettings :: @struct(
    ID: ImGuiID,
    SaveFlags: ImGuiTableFlags,
    RefScale: f32,
    ColumnsCount: ImGuiTableColumnIdx,
    ColumnsCountMax: ImGuiTableColumnIdx,
    WantApply: bool,
);
ImFontBuilderIO :: @struct(
    FontBuilder_Build: @FnPtr(*ImFontAtlas) bool,
);
fn igCreateContext(shared_font_atlas: *ImFontAtlas) *ImGuiContext #import("dearimgui");
fn igDestroyContext(ctx: *ImGuiContext) void #import("dearimgui");
fn igGetCurrentContext() *ImGuiContext #import("dearimgui");
fn igSetCurrentContext(ctx: *ImGuiContext) void #import("dearimgui");
fn igGetIO() *ImGuiIO #import("dearimgui");
fn igGetPlatformIO() *ImGuiPlatformIO #import("dearimgui");
fn igGetStyle() *ImGuiStyle #import("dearimgui");
fn igNewFrame() void #import("dearimgui");
fn igEndFrame() void #import("dearimgui");
fn igRender() void #import("dearimgui");
fn igGetDrawData() *ImDrawData #import("dearimgui");
fn igShowDemoWindow(p_open: *bool) void #import("dearimgui");
fn igShowMetricsWindow(p_open: *bool) void #import("dearimgui");
fn igShowDebugLogWindow(p_open: *bool) void #import("dearimgui");
fn igShowIDStackToolWindow(p_open: *bool) void #import("dearimgui");
fn igShowAboutWindow(p_open: *bool) void #import("dearimgui");
fn igShowStyleEditor(ref: *ImGuiStyle) void #import("dearimgui");
fn igShowStyleSelector(label: CStr) bool #import("dearimgui");
fn igShowFontSelector(label: CStr) void #import("dearimgui");
fn igShowUserGuide() void #import("dearimgui");
fn igGetVersion() CStr #import("dearimgui");
fn igStyleColorsDark(dst: *ImGuiStyle) void #import("dearimgui");
fn igStyleColorsLight(dst: *ImGuiStyle) void #import("dearimgui");
fn igStyleColorsClassic(dst: *ImGuiStyle) void #import("dearimgui");
fn igBegin(name: CStr, p_open: *bool, flags: ImGuiWindowFlags) bool #import("dearimgui");
fn igEnd() void #import("dearimgui");
fn igBeginChild_Str(str_id: CStr, size: ImVec2, child_flags: ImGuiChildFlags, window_flags: ImGuiWindowFlags) bool #import("dearimgui");
fn igBeginChild_ID(id: ImGuiID, size: ImVec2, child_flags: ImGuiChildFlags, window_flags: ImGuiWindowFlags) bool #import("dearimgui");
fn igEndChild() void #import("dearimgui");
fn igIsWindowAppearing() bool #import("dearimgui");
fn igIsWindowCollapsed() bool #import("dearimgui");
fn igIsWindowFocused(flags: ImGuiFocusedFlags) bool #import("dearimgui");
fn igIsWindowHovered(flags: ImGuiHoveredFlags) bool #import("dearimgui");
fn igGetWindowDrawList() *ImDrawList #import("dearimgui");
fn igGetWindowPos(pOut: *ImVec2) void #import("dearimgui");
fn igGetWindowSize(pOut: *ImVec2) void #import("dearimgui");
fn igGetWindowWidth() f32 #import("dearimgui");
fn igGetWindowHeight() f32 #import("dearimgui");
fn igSetNextWindowPos(pos: ImVec2, cond: ImGuiCond, pivot: ImVec2) void #import("dearimgui");
fn igSetNextWindowSize(size: ImVec2, cond: ImGuiCond) void #import("dearimgui");
fn igSetNextWindowSizeConstraints(size_min: ImVec2, size_max: ImVec2, custom_callback: ImGuiSizeCallback, custom_callback_data: rawptr) void #import("dearimgui");
fn igSetNextWindowContentSize(size: ImVec2) void #import("dearimgui");
fn igSetNextWindowCollapsed(collapsed: bool, cond: ImGuiCond) void #import("dearimgui");
fn igSetNextWindowFocus() void #import("dearimgui");
fn igSetNextWindowScroll(scroll: ImVec2) void #import("dearimgui");
fn igSetNextWindowBgAlpha(alpha: f32) void #import("dearimgui");
fn igSetWindowPos_Vec2(pos: ImVec2, cond: ImGuiCond) void #import("dearimgui");
fn igSetWindowSize_Vec2(size: ImVec2, cond: ImGuiCond) void #import("dearimgui");
fn igSetWindowCollapsed_Bool(collapsed: bool, cond: ImGuiCond) void #import("dearimgui");
fn igSetWindowFocus_Nil() void #import("dearimgui");
fn igSetWindowFontScale(scale: f32) void #import("dearimgui");
fn igSetWindowPos_Str(name: CStr, pos: ImVec2, cond: ImGuiCond) void #import("dearimgui");
fn igSetWindowSize_Str(name: CStr, size: ImVec2, cond: ImGuiCond) void #import("dearimgui");
fn igSetWindowCollapsed_Str(name: CStr, collapsed: bool, cond: ImGuiCond) void #import("dearimgui");
fn igSetWindowFocus_Str(name: CStr) void #import("dearimgui");
fn igGetScrollX() f32 #import("dearimgui");
fn igGetScrollY() f32 #import("dearimgui");
fn igSetScrollX_Float(scroll_x: f32) void #import("dearimgui");
fn igSetScrollY_Float(scroll_y: f32) void #import("dearimgui");
fn igGetScrollMaxX() f32 #import("dearimgui");
fn igGetScrollMaxY() f32 #import("dearimgui");
fn igSetScrollHereX(center_x_ratio: f32) void #import("dearimgui");
fn igSetScrollHereY(center_y_ratio: f32) void #import("dearimgui");
fn igSetScrollFromPosX_Float(local_x: f32, center_x_ratio: f32) void #import("dearimgui");
fn igSetScrollFromPosY_Float(local_y: f32, center_y_ratio: f32) void #import("dearimgui");
fn igPushFont(font: *ImFont) void #import("dearimgui");
fn igPopFont() void #import("dearimgui");
fn igPushStyleColor_U32(idx: ImGuiCol, col: ImU32) void #import("dearimgui");
fn igPushStyleColor_Vec4(idx: ImGuiCol, col: ImVec4) void #import("dearimgui");
fn igPopStyleColor(count: i32) void #import("dearimgui");
fn igPushStyleVar_Float(idx: ImGuiStyleVar, val: f32) void #import("dearimgui");
fn igPushStyleVar_Vec2(idx: ImGuiStyleVar, val: ImVec2) void #import("dearimgui");
fn igPushStyleVarX(idx: ImGuiStyleVar, val_x: f32) void #import("dearimgui");
fn igPushStyleVarY(idx: ImGuiStyleVar, val_y: f32) void #import("dearimgui");
fn igPopStyleVar(count: i32) void #import("dearimgui");
fn igPushItemFlag(option: ImGuiItemFlags, enabled: bool) void #import("dearimgui");
fn igPopItemFlag() void #import("dearimgui");
fn igPushItemWidth(item_width: f32) void #import("dearimgui");
fn igPopItemWidth() void #import("dearimgui");
fn igSetNextItemWidth(item_width: f32) void #import("dearimgui");
fn igCalcItemWidth() f32 #import("dearimgui");
fn igPushTextWrapPos(wrap_local_pos_x: f32) void #import("dearimgui");
fn igPopTextWrapPos() void #import("dearimgui");
fn igGetFont() *ImFont #import("dearimgui");
fn igGetFontSize() f32 #import("dearimgui");
fn igGetFontTexUvWhitePixel(pOut: *ImVec2) void #import("dearimgui");
fn igGetColorU32_Col(idx: ImGuiCol, alpha_mul: f32) ImU32 #import("dearimgui");
fn igGetColorU32_Vec4(col: ImVec4) ImU32 #import("dearimgui");
fn igGetColorU32_U32(col: ImU32, alpha_mul: f32) ImU32 #import("dearimgui");
fn igGetStyleColorVec4(idx: ImGuiCol) *ImVec4 #import("dearimgui");
fn igGetCursorScreenPos(pOut: *ImVec2) void #import("dearimgui");
fn igSetCursorScreenPos(pos: ImVec2) void #import("dearimgui");
fn igGetContentRegionAvail(pOut: *ImVec2) void #import("dearimgui");
fn igGetCursorPos(pOut: *ImVec2) void #import("dearimgui");
fn igGetCursorPosX() f32 #import("dearimgui");
fn igGetCursorPosY() f32 #import("dearimgui");
fn igSetCursorPos(local_pos: ImVec2) void #import("dearimgui");
fn igSetCursorPosX(local_x: f32) void #import("dearimgui");
fn igSetCursorPosY(local_y: f32) void #import("dearimgui");
fn igGetCursorStartPos(pOut: *ImVec2) void #import("dearimgui");
fn igSeparator() void #import("dearimgui");
fn igSameLine(offset_from_start_x: f32, spacing: f32) void #import("dearimgui");
fn igNewLine() void #import("dearimgui");
fn igSpacing() void #import("dearimgui");
fn igDummy(size: ImVec2) void #import("dearimgui");
fn igIndent(indent_w: f32) void #import("dearimgui");
fn igUnindent(indent_w: f32) void #import("dearimgui");
fn igBeginGroup() void #import("dearimgui");
fn igEndGroup() void #import("dearimgui");
fn igAlignTextToFramePadding() void #import("dearimgui");
fn igGetTextLineHeight() f32 #import("dearimgui");
fn igGetTextLineHeightWithSpacing() f32 #import("dearimgui");
fn igGetFrameHeight() f32 #import("dearimgui");
fn igGetFrameHeightWithSpacing() f32 #import("dearimgui");
fn igPushID_Str(str_id: CStr) void #import("dearimgui");
fn igPushID_StrStr(str_id_begin: CStr, str_id_end: CStr) void #import("dearimgui");
fn igPushID_Ptr(ptr_id: rawptr) void #import("dearimgui");
fn igPushID_Int(int_id: i32) void #import("dearimgui");
fn igPopID() void #import("dearimgui");
fn igGetID_Str(str_id: CStr) ImGuiID #import("dearimgui");
fn igGetID_StrStr(str_id_begin: CStr, str_id_end: CStr) ImGuiID #import("dearimgui");
fn igGetID_Ptr(ptr_id: rawptr) ImGuiID #import("dearimgui");
fn igGetID_Int(int_id: i32) ImGuiID #import("dearimgui");
fn igTextUnformatted(text: CStr, text_end: CStr) void #import("dearimgui");
fn igText(fmt: CStr) void #import("dearimgui");
fn igTextV(fmt: CStr, args: VaList) void #import("dearimgui");
fn igTextColored(col: ImVec4, fmt: CStr) void #import("dearimgui");
fn igTextColoredV(col: ImVec4, fmt: CStr, args: VaList) void #import("dearimgui");
fn igTextDisabled(fmt: CStr) void #import("dearimgui");
fn igTextDisabledV(fmt: CStr, args: VaList) void #import("dearimgui");
fn igTextWrapped(fmt: CStr) void #import("dearimgui");
fn igTextWrappedV(fmt: CStr, args: VaList) void #import("dearimgui");
fn igLabelText(label: CStr, fmt: CStr) void #import("dearimgui");
fn igLabelTextV(label: CStr, fmt: CStr, args: VaList) void #import("dearimgui");
fn igBulletText(fmt: CStr) void #import("dearimgui");
fn igBulletTextV(fmt: CStr, args: VaList) void #import("dearimgui");
fn igSeparatorText(label: CStr) void #import("dearimgui");
fn igButton(label: CStr, size: ImVec2) bool #import("dearimgui");
fn igSmallButton(label: CStr) bool #import("dearimgui");
fn igInvisibleButton(str_id: CStr, size: ImVec2, flags: ImGuiButtonFlags) bool #import("dearimgui");
fn igArrowButton(str_id: CStr, dir: ImGuiDir) bool #import("dearimgui");
fn igCheckbox(label: CStr, v: *bool) bool #import("dearimgui");
fn igCheckboxFlags_IntPtr(label: CStr, flags: *i32, flags_value: i32) bool #import("dearimgui");
fn igCheckboxFlags_UintPtr(label: CStr, flags: *u32, flags_value: u32) bool #import("dearimgui");
fn igRadioButton_Bool(label: CStr, active: bool) bool #import("dearimgui");
fn igRadioButton_IntPtr(label: CStr, v: *i32, v_button: i32) bool #import("dearimgui");
fn igProgressBar(fraction: f32, size_arg: ImVec2, overlay: CStr) void #import("dearimgui");
fn igBullet() void #import("dearimgui");
fn igTextLink(label: CStr) bool #import("dearimgui");
fn igTextLinkOpenURL(label: CStr, url: CStr) void #import("dearimgui");
fn igImage(user_texture_id: ImTextureID, image_size: ImVec2, uv0: ImVec2, uv1: ImVec2, tint_col: ImVec4, border_col: ImVec4) void #import("dearimgui");
fn igImageButton(str_id: CStr, user_texture_id: ImTextureID, image_size: ImVec2, uv0: ImVec2, uv1: ImVec2, bg_col: ImVec4, tint_col: ImVec4) bool #import("dearimgui");
fn igBeginCombo(label: CStr, preview_value: CStr, flags: ImGuiComboFlags) bool #import("dearimgui");
fn igEndCombo() void #import("dearimgui");
fn igCombo_Str_arr(label: CStr, current_item: *i32, items: *Char *const, items_count: i32, popup_max_height_in_items: i32) bool #import("dearimgui");
fn igCombo_Str(label: CStr, current_item: *i32, items_separated_by_zeros: CStr, popup_max_height_in_items: i32) bool #import("dearimgui");
fn igCombo_FnStrPtr(label: CStr, current_item: *i32, getter: @FnPtr(rawptr, i32) CStr, user_data: rawptr, items_count: i32, popup_max_height_in_items: i32) bool #import("dearimgui");
fn igDragFloat(label: CStr, v: *f32, v_speed: f32, v_min: f32, v_max: f32, format: CStr, flags: ImGuiSliderFlags) bool #import("dearimgui");
fn igDragFloat2(label: CStr, v: *f32, v_speed: f32, v_min: f32, v_max: f32, format: CStr, flags: ImGuiSliderFlags) bool #import("dearimgui");
fn igDragFloat3(label: CStr, v: *f32, v_speed: f32, v_min: f32, v_max: f32, format: CStr, flags: ImGuiSliderFlags) bool #import("dearimgui");
fn igDragFloat4(label: CStr, v: *f32, v_speed: f32, v_min: f32, v_max: f32, format: CStr, flags: ImGuiSliderFlags) bool #import("dearimgui");
fn igDragFloatRange2(label: CStr, v_current_min: *f32, v_current_max: *f32, v_speed: f32, v_min: f32, v_max: f32, format: CStr, format_max: CStr, flags: ImGuiSliderFlags) bool #import("dearimgui");
fn igDragInt(label: CStr, v: *i32, v_speed: f32, v_min: i32, v_max: i32, format: CStr, flags: ImGuiSliderFlags) bool #import("dearimgui");
fn igDragInt2(label: CStr, v: *i32, v_speed: f32, v_min: i32, v_max: i32, format: CStr, flags: ImGuiSliderFlags) bool #import("dearimgui");
fn igDragInt3(label: CStr, v: *i32, v_speed: f32, v_min: i32, v_max: i32, format: CStr, flags: ImGuiSliderFlags) bool #import("dearimgui");
fn igDragInt4(label: CStr, v: *i32, v_speed: f32, v_min: i32, v_max: i32, format: CStr, flags: ImGuiSliderFlags) bool #import("dearimgui");
fn igDragIntRange2(label: CStr, v_current_min: *i32, v_current_max: *i32, v_speed: f32, v_min: i32, v_max: i32, format: CStr, format_max: CStr, flags: ImGuiSliderFlags) bool #import("dearimgui");
fn igDragScalar(label: CStr, data_type: ImGuiDataType, p_data: rawptr, v_speed: f32, p_min: rawptr, p_max: rawptr, format: CStr, flags: ImGuiSliderFlags) bool #import("dearimgui");
fn igDragScalarN(label: CStr, data_type: ImGuiDataType, p_data: rawptr, components: i32, v_speed: f32, p_min: rawptr, p_max: rawptr, format: CStr, flags: ImGuiSliderFlags) bool #import("dearimgui");
fn igSliderFloat(label: CStr, v: *f32, v_min: f32, v_max: f32, format: CStr, flags: ImGuiSliderFlags) bool #import("dearimgui");
fn igSliderFloat2(label: CStr, v: *f32, v_min: f32, v_max: f32, format: CStr, flags: ImGuiSliderFlags) bool #import("dearimgui");
fn igSliderFloat3(label: CStr, v: *f32, v_min: f32, v_max: f32, format: CStr, flags: ImGuiSliderFlags) bool #import("dearimgui");
fn igSliderFloat4(label: CStr, v: *f32, v_min: f32, v_max: f32, format: CStr, flags: ImGuiSliderFlags) bool #import("dearimgui");
fn igSliderAngle(label: CStr, v_rad: *f32, v_degrees_min: f32, v_degrees_max: f32, format: CStr, flags: ImGuiSliderFlags) bool #import("dearimgui");
fn igSliderInt(label: CStr, v: *i32, v_min: i32, v_max: i32, format: CStr, flags: ImGuiSliderFlags) bool #import("dearimgui");
fn igSliderInt2(label: CStr, v: *i32, v_min: i32, v_max: i32, format: CStr, flags: ImGuiSliderFlags) bool #import("dearimgui");
fn igSliderInt3(label: CStr, v: *i32, v_min: i32, v_max: i32, format: CStr, flags: ImGuiSliderFlags) bool #import("dearimgui");
fn igSliderInt4(label: CStr, v: *i32, v_min: i32, v_max: i32, format: CStr, flags: ImGuiSliderFlags) bool #import("dearimgui");
fn igSliderScalar(label: CStr, data_type: ImGuiDataType, p_data: rawptr, p_min: rawptr, p_max: rawptr, format: CStr, flags: ImGuiSliderFlags) bool #import("dearimgui");
fn igSliderScalarN(label: CStr, data_type: ImGuiDataType, p_data: rawptr, components: i32, p_min: rawptr, p_max: rawptr, format: CStr, flags: ImGuiSliderFlags) bool #import("dearimgui");
fn igVSliderFloat(label: CStr, size: ImVec2, v: *f32, v_min: f32, v_max: f32, format: CStr, flags: ImGuiSliderFlags) bool #import("dearimgui");
fn igVSliderInt(label: CStr, size: ImVec2, v: *i32, v_min: i32, v_max: i32, format: CStr, flags: ImGuiSliderFlags) bool #import("dearimgui");
fn igVSliderScalar(label: CStr, size: ImVec2, data_type: ImGuiDataType, p_data: rawptr, p_min: rawptr, p_max: rawptr, format: CStr, flags: ImGuiSliderFlags) bool #import("dearimgui");
fn igInputText(label: CStr, buf: CStr, buf_size: usize, flags: ImGuiInputTextFlags, callback: ImGuiInputTextCallback, user_data: rawptr) bool #import("dearimgui");
fn igInputTextMultiline(label: CStr, buf: CStr, buf_size: usize, size: ImVec2, flags: ImGuiInputTextFlags, callback: ImGuiInputTextCallback, user_data: rawptr) bool #import("dearimgui");
fn igInputTextWithHint(label: CStr, hint: CStr, buf: CStr, buf_size: usize, flags: ImGuiInputTextFlags, callback: ImGuiInputTextCallback, user_data: rawptr) bool #import("dearimgui");
fn igInputFloat(label: CStr, v: *f32, step: f32, step_fast: f32, format: CStr, flags: ImGuiInputTextFlags) bool #import("dearimgui");
fn igInputFloat2(label: CStr, v: *f32, format: CStr, flags: ImGuiInputTextFlags) bool #import("dearimgui");
fn igInputFloat3(label: CStr, v: *f32, format: CStr, flags: ImGuiInputTextFlags) bool #import("dearimgui");
fn igInputFloat4(label: CStr, v: *f32, format: CStr, flags: ImGuiInputTextFlags) bool #import("dearimgui");
fn igInputInt(label: CStr, v: *i32, step: i32, step_fast: i32, flags: ImGuiInputTextFlags) bool #import("dearimgui");
fn igInputInt2(label: CStr, v: *i32, flags: ImGuiInputTextFlags) bool #import("dearimgui");
fn igInputInt3(label: CStr, v: *i32, flags: ImGuiInputTextFlags) bool #import("dearimgui");
fn igInputInt4(label: CStr, v: *i32, flags: ImGuiInputTextFlags) bool #import("dearimgui");
fn igInputDouble(label: CStr, v: *f64, step: f64, step_fast: f64, format: CStr, flags: ImGuiInputTextFlags) bool #import("dearimgui");
fn igInputScalar(label: CStr, data_type: ImGuiDataType, p_data: rawptr, p_step: rawptr, p_step_fast: rawptr, format: CStr, flags: ImGuiInputTextFlags) bool #import("dearimgui");
fn igInputScalarN(label: CStr, data_type: ImGuiDataType, p_data: rawptr, components: i32, p_step: rawptr, p_step_fast: rawptr, format: CStr, flags: ImGuiInputTextFlags) bool #import("dearimgui");
fn igColorEdit3(label: CStr, col: *f32, flags: ImGuiColorEditFlags) bool #import("dearimgui");
fn igColorEdit4(label: CStr, col: *f32, flags: ImGuiColorEditFlags) bool #import("dearimgui");
fn igColorPicker3(label: CStr, col: *f32, flags: ImGuiColorEditFlags) bool #import("dearimgui");
fn igColorPicker4(label: CStr, col: *f32, flags: ImGuiColorEditFlags, ref_col: *f32) bool #import("dearimgui");
fn igColorButton(desc_id: CStr, col: ImVec4, flags: ImGuiColorEditFlags, size: ImVec2) bool #import("dearimgui");
fn igSetColorEditOptions(flags: ImGuiColorEditFlags) void #import("dearimgui");
fn igTreeNode_Str(label: CStr) bool #import("dearimgui");
fn igTreeNode_StrStr(str_id: CStr, fmt: CStr) bool #import("dearimgui");
fn igTreeNode_Ptr(ptr_id: rawptr, fmt: CStr) bool #import("dearimgui");
fn igTreeNodeV_Str(str_id: CStr, fmt: CStr, args: VaList) bool #import("dearimgui");
fn igTreeNodeV_Ptr(ptr_id: rawptr, fmt: CStr, args: VaList) bool #import("dearimgui");
fn igTreeNodeEx_Str(label: CStr, flags: ImGuiTreeNodeFlags) bool #import("dearimgui");
fn igTreeNodeEx_StrStr(str_id: CStr, flags: ImGuiTreeNodeFlags, fmt: CStr) bool #import("dearimgui");
fn igTreeNodeEx_Ptr(ptr_id: rawptr, flags: ImGuiTreeNodeFlags, fmt: CStr) bool #import("dearimgui");
fn igTreeNodeExV_Str(str_id: CStr, flags: ImGuiTreeNodeFlags, fmt: CStr, args: VaList) bool #import("dearimgui");
fn igTreeNodeExV_Ptr(ptr_id: rawptr, flags: ImGuiTreeNodeFlags, fmt: CStr, args: VaList) bool #import("dearimgui");
fn igTreePush_Str(str_id: CStr) void #import("dearimgui");
fn igTreePush_Ptr(ptr_id: rawptr) void #import("dearimgui");
fn igTreePop() void #import("dearimgui");
fn igGetTreeNodeToLabelSpacing() f32 #import("dearimgui");
fn igCollapsingHeader_TreeNodeFlags(label: CStr, flags: ImGuiTreeNodeFlags) bool #import("dearimgui");
fn igCollapsingHeader_BoolPtr(label: CStr, p_visible: *bool, flags: ImGuiTreeNodeFlags) bool #import("dearimgui");
fn igSetNextItemOpen(is_open: bool, cond: ImGuiCond) void #import("dearimgui");
fn igSetNextItemStorageID(storage_id: ImGuiID) void #import("dearimgui");
fn igSelectable_Bool(label: CStr, selected: bool, flags: ImGuiSelectableFlags, size: ImVec2) bool #import("dearimgui");
fn igSelectable_BoolPtr(label: CStr, p_selected: *bool, flags: ImGuiSelectableFlags, size: ImVec2) bool #import("dearimgui");
fn igBeginMultiSelect(flags: ImGuiMultiSelectFlags, selection_size: i32, items_count: i32) *ImGuiMultiSelectIO #import("dearimgui");
fn igEndMultiSelect() *ImGuiMultiSelectIO #import("dearimgui");
fn igSetNextItemSelectionUserData(selection_user_data: ImGuiSelectionUserData) void #import("dearimgui");
fn igIsItemToggledSelection() bool #import("dearimgui");
fn igBeginListBox(label: CStr, size: ImVec2) bool #import("dearimgui");
fn igEndListBox() void #import("dearimgui");
fn igListBox_Str_arr(label: CStr, current_item: *i32, items: *Char *const, items_count: i32, height_in_items: i32) bool #import("dearimgui");
fn igListBox_FnStrPtr(label: CStr, current_item: *i32, getter: @FnPtr(rawptr, i32) CStr, user_data: rawptr, items_count: i32, height_in_items: i32) bool #import("dearimgui");
fn igPlotLines_FloatPtr(label: CStr, values: *f32, values_count: i32, values_offset: i32, overlay_text: CStr, scale_min: f32, scale_max: f32, graph_size: ImVec2, stride: i32) void #import("dearimgui");
fn igPlotLines_FnFloatPtr(label: CStr, values_getter: @FnPtr(rawptr, i32) f32, data: rawptr, values_count: i32, values_offset: i32, overlay_text: CStr, scale_min: f32, scale_max: f32, graph_size: ImVec2) void #import("dearimgui");
fn igPlotHistogram_FloatPtr(label: CStr, values: *f32, values_count: i32, values_offset: i32, overlay_text: CStr, scale_min: f32, scale_max: f32, graph_size: ImVec2, stride: i32) void #import("dearimgui");
fn igPlotHistogram_FnFloatPtr(label: CStr, values_getter: @FnPtr(rawptr, i32) f32, data: rawptr, values_count: i32, values_offset: i32, overlay_text: CStr, scale_min: f32, scale_max: f32, graph_size: ImVec2) void #import("dearimgui");
fn igValue_Bool(prefix: CStr, b: bool) void #import("dearimgui");
fn igValue_Int(prefix: CStr, v: i32) void #import("dearimgui");
fn igValue_Uint(prefix: CStr, v: u32) void #import("dearimgui");
fn igValue_Float(prefix: CStr, v: f32, float_format: CStr) void #import("dearimgui");
fn igBeginMenuBar() bool #import("dearimgui");
fn igEndMenuBar() void #import("dearimgui");
fn igBeginMainMenuBar() bool #import("dearimgui");
fn igEndMainMenuBar() void #import("dearimgui");
fn igBeginMenu(label: CStr, enabled: bool) bool #import("dearimgui");
fn igEndMenu() void #import("dearimgui");
fn igMenuItem_Bool(label: CStr, shortcut: CStr, selected: bool, enabled: bool) bool #import("dearimgui");
fn igMenuItem_BoolPtr(label: CStr, shortcut: CStr, p_selected: *bool, enabled: bool) bool #import("dearimgui");
fn igBeginTooltip() bool #import("dearimgui");
fn igEndTooltip() void #import("dearimgui");
fn igSetTooltip(fmt: CStr) void #import("dearimgui");
fn igSetTooltipV(fmt: CStr, args: VaList) void #import("dearimgui");
fn igBeginItemTooltip() bool #import("dearimgui");
fn igSetItemTooltip(fmt: CStr) void #import("dearimgui");
fn igSetItemTooltipV(fmt: CStr, args: VaList) void #import("dearimgui");
fn igBeginPopup(str_id: CStr, flags: ImGuiWindowFlags) bool #import("dearimgui");
fn igBeginPopupModal(name: CStr, p_open: *bool, flags: ImGuiWindowFlags) bool #import("dearimgui");
fn igEndPopup() void #import("dearimgui");
fn igOpenPopup_Str(str_id: CStr, popup_flags: ImGuiPopupFlags) void #import("dearimgui");
fn igOpenPopup_ID(id: ImGuiID, popup_flags: ImGuiPopupFlags) void #import("dearimgui");
fn igOpenPopupOnItemClick(str_id: CStr, popup_flags: ImGuiPopupFlags) void #import("dearimgui");
fn igCloseCurrentPopup() void #import("dearimgui");
fn igBeginPopupContextItem(str_id: CStr, popup_flags: ImGuiPopupFlags) bool #import("dearimgui");
fn igBeginPopupContextWindow(str_id: CStr, popup_flags: ImGuiPopupFlags) bool #import("dearimgui");
fn igBeginPopupContextVoid(str_id: CStr, popup_flags: ImGuiPopupFlags) bool #import("dearimgui");
fn igIsPopupOpen_Str(str_id: CStr, flags: ImGuiPopupFlags) bool #import("dearimgui");
fn igBeginTable(str_id: CStr, columns: i32, flags: ImGuiTableFlags, outer_size: ImVec2, inner_width: f32) bool #import("dearimgui");
fn igEndTable() void #import("dearimgui");
fn igTableNextRow(row_flags: ImGuiTableRowFlags, min_row_height: f32) void #import("dearimgui");
fn igTableNextColumn() bool #import("dearimgui");
fn igTableSetColumnIndex(column_n: i32) bool #import("dearimgui");
fn igTableSetupColumn(label: CStr, flags: ImGuiTableColumnFlags, init_width_or_weight: f32, user_id: ImGuiID) void #import("dearimgui");
fn igTableSetupScrollFreeze(cols: i32, rows: i32) void #import("dearimgui");
fn igTableHeader(label: CStr) void #import("dearimgui");
fn igTableHeadersRow() void #import("dearimgui");
fn igTableAngledHeadersRow() void #import("dearimgui");
fn igTableGetSortSpecs() *ImGuiTableSortSpecs #import("dearimgui");
fn igTableGetColumnCount() i32 #import("dearimgui");
fn igTableGetColumnIndex() i32 #import("dearimgui");
fn igTableGetRowIndex() i32 #import("dearimgui");
fn igTableGetColumnName_Int(column_n: i32) CStr #import("dearimgui");
fn igTableGetColumnFlags(column_n: i32) ImGuiTableColumnFlags #import("dearimgui");
fn igTableSetColumnEnabled(column_n: i32, v: bool) void #import("dearimgui");
fn igTableGetHoveredColumn() i32 #import("dearimgui");
fn igTableSetBgColor(target: ImGuiTableBgTarget, color: ImU32, column_n: i32) void #import("dearimgui");
fn igColumns(count: i32, id: CStr, borders: bool) void #import("dearimgui");
fn igNextColumn() void #import("dearimgui");
fn igGetColumnIndex() i32 #import("dearimgui");
fn igGetColumnWidth(column_index: i32) f32 #import("dearimgui");
fn igSetColumnWidth(column_index: i32, width: f32) void #import("dearimgui");
fn igGetColumnOffset(column_index: i32) f32 #import("dearimgui");
fn igSetColumnOffset(column_index: i32, offset_x: f32) void #import("dearimgui");
fn igGetColumnsCount() i32 #import("dearimgui");
fn igBeginTabBar(str_id: CStr, flags: ImGuiTabBarFlags) bool #import("dearimgui");
fn igEndTabBar() void #import("dearimgui");
fn igBeginTabItem(label: CStr, p_open: *bool, flags: ImGuiTabItemFlags) bool #import("dearimgui");
fn igEndTabItem() void #import("dearimgui");
fn igTabItemButton(label: CStr, flags: ImGuiTabItemFlags) bool #import("dearimgui");
fn igSetTabItemClosed(tab_or_docked_window_label: CStr) void #import("dearimgui");
fn igLogToTTY(auto_open_depth: i32) void #import("dearimgui");
fn igLogToFile(auto_open_depth: i32, filename: CStr) void #import("dearimgui");
fn igLogToClipboard(auto_open_depth: i32) void #import("dearimgui");
fn igLogFinish() void #import("dearimgui");
fn igLogButtons() void #import("dearimgui");
fn igLogTextV(fmt: CStr, args: VaList) void #import("dearimgui");
fn igBeginDragDropSource(flags: ImGuiDragDropFlags) bool #import("dearimgui");
fn igSetDragDropPayload(type: CStr, data: rawptr, sz: usize, cond: ImGuiCond) bool #import("dearimgui");
fn igEndDragDropSource() void #import("dearimgui");
fn igBeginDragDropTarget() bool #import("dearimgui");
fn igAcceptDragDropPayload(type: CStr, flags: ImGuiDragDropFlags) *ImGuiPayload #import("dearimgui");
fn igEndDragDropTarget() void #import("dearimgui");
fn igGetDragDropPayload() *ImGuiPayload #import("dearimgui");
fn igBeginDisabled(disabled: bool) void #import("dearimgui");
fn igEndDisabled() void #import("dearimgui");
fn igPushClipRect(clip_rect_min: ImVec2, clip_rect_max: ImVec2, intersect_with_current_clip_rect: bool) void #import("dearimgui");
fn igPopClipRect() void #import("dearimgui");
fn igSetItemDefaultFocus() void #import("dearimgui");
fn igSetKeyboardFocusHere(offset: i32) void #import("dearimgui");
fn igSetNavCursorVisible(visible: bool) void #import("dearimgui");
fn igSetNextItemAllowOverlap() void #import("dearimgui");
fn igIsItemHovered(flags: ImGuiHoveredFlags) bool #import("dearimgui");
fn igIsItemActive() bool #import("dearimgui");
fn igIsItemFocused() bool #import("dearimgui");
fn igIsItemClicked(mouse_button: ImGuiMouseButton) bool #import("dearimgui");
fn igIsItemVisible() bool #import("dearimgui");
fn igIsItemEdited() bool #import("dearimgui");
fn igIsItemActivated() bool #import("dearimgui");
fn igIsItemDeactivated() bool #import("dearimgui");
fn igIsItemDeactivatedAfterEdit() bool #import("dearimgui");
fn igIsItemToggledOpen() bool #import("dearimgui");
fn igIsAnyItemHovered() bool #import("dearimgui");
fn igIsAnyItemActive() bool #import("dearimgui");
fn igIsAnyItemFocused() bool #import("dearimgui");
fn igGetItemID() ImGuiID #import("dearimgui");
fn igGetItemRectMin(pOut: *ImVec2) void #import("dearimgui");
fn igGetItemRectMax(pOut: *ImVec2) void #import("dearimgui");
fn igGetItemRectSize(pOut: *ImVec2) void #import("dearimgui");
fn igGetMainViewport() *ImGuiViewport #import("dearimgui");
fn igGetBackgroundDrawList_Nil() *ImDrawList #import("dearimgui");
fn igGetForegroundDrawList_Nil() *ImDrawList #import("dearimgui");
fn igIsRectVisible_Nil(size: ImVec2) bool #import("dearimgui");
fn igIsRectVisible_Vec2(rect_min: ImVec2, rect_max: ImVec2) bool #import("dearimgui");
fn igGetTime() f64 #import("dearimgui");
fn igGetFrameCount() i32 #import("dearimgui");
fn igGetDrawListSharedData() *ImDrawListSharedData #import("dearimgui");
fn igGetStyleColorName(idx: ImGuiCol) CStr #import("dearimgui");
fn igSetStateStorage(storage: *ImGuiStorage) void #import("dearimgui");
fn igGetStateStorage() *ImGuiStorage #import("dearimgui");
fn igCalcTextSize(pOut: *ImVec2, text: CStr, text_end: CStr, hide_text_after_double_hash: bool, wrap_width: f32) void #import("dearimgui");
fn igColorConvertU32ToFloat4(pOut: *ImVec4, in: ImU32) void #import("dearimgui");
fn igColorConvertFloat4ToU32(in: ImVec4) ImU32 #import("dearimgui");
fn igColorConvertRGBtoHSV(r: f32, g: f32, b: f32, out_h: *f32, out_s: *f32, out_v: *f32) void #import("dearimgui");
fn igColorConvertHSVtoRGB(h: f32, s: f32, v: f32, out_r: *f32, out_g: *f32, out_b: *f32) void #import("dearimgui");
fn igIsKeyDown_Nil(key: ImGuiKey) bool #import("dearimgui");
fn igIsKeyPressed_Bool(key: ImGuiKey, repeat: bool) bool #import("dearimgui");
fn igIsKeyReleased_Nil(key: ImGuiKey) bool #import("dearimgui");
fn igIsKeyChordPressed_Nil(key_chord: ImGuiKeyChord) bool #import("dearimgui");
fn igGetKeyPressedAmount(key: ImGuiKey, repeat_delay: f32, rate: f32) i32 #import("dearimgui");
fn igGetKeyName(key: ImGuiKey) CStr #import("dearimgui");
fn igSetNextFrameWantCaptureKeyboard(want_capture_keyboard: bool) void #import("dearimgui");
fn igShortcut_Nil(key_chord: ImGuiKeyChord, flags: ImGuiInputFlags) bool #import("dearimgui");
fn igSetNextItemShortcut(key_chord: ImGuiKeyChord, flags: ImGuiInputFlags) void #import("dearimgui");
fn igSetItemKeyOwner_Nil(key: ImGuiKey) void #import("dearimgui");
fn igIsMouseDown_Nil(button: ImGuiMouseButton) bool #import("dearimgui");
fn igIsMouseClicked_Bool(button: ImGuiMouseButton, repeat: bool) bool #import("dearimgui");
fn igIsMouseReleased_Nil(button: ImGuiMouseButton) bool #import("dearimgui");
fn igIsMouseDoubleClicked_Nil(button: ImGuiMouseButton) bool #import("dearimgui");
fn igGetMouseClickedCount(button: ImGuiMouseButton) i32 #import("dearimgui");
fn igIsMouseHoveringRect(r_min: ImVec2, r_max: ImVec2, clip: bool) bool #import("dearimgui");
fn igIsMousePosValid(mouse_pos: *ImVec2) bool #import("dearimgui");
fn igIsAnyMouseDown() bool #import("dearimgui");
fn igGetMousePos(pOut: *ImVec2) void #import("dearimgui");
fn igGetMousePosOnOpeningCurrentPopup(pOut: *ImVec2) void #import("dearimgui");
fn igIsMouseDragging(button: ImGuiMouseButton, lock_threshold: f32) bool #import("dearimgui");
fn igGetMouseDragDelta(pOut: *ImVec2, button: ImGuiMouseButton, lock_threshold: f32) void #import("dearimgui");
fn igResetMouseDragDelta(button: ImGuiMouseButton) void #import("dearimgui");
fn igGetMouseCursor() ImGuiMouseCursor #import("dearimgui");
fn igSetMouseCursor(cursor_type: ImGuiMouseCursor) void #import("dearimgui");
fn igSetNextFrameWantCaptureMouse(want_capture_mouse: bool) void #import("dearimgui");
fn igGetClipboardText() CStr #import("dearimgui");
fn igSetClipboardText(text: CStr) void #import("dearimgui");
fn igLoadIniSettingsFromDisk(ini_filename: CStr) void #import("dearimgui");
fn igLoadIniSettingsFromMemory(ini_data: CStr, ini_size: usize) void #import("dearimgui");
fn igSaveIniSettingsToDisk(ini_filename: CStr) void #import("dearimgui");
fn igSaveIniSettingsToMemory(out_ini_size: *usize) CStr #import("dearimgui");
fn igDebugTextEncoding(text: CStr) void #import("dearimgui");
fn igDebugFlashStyleColor(idx: ImGuiCol) void #import("dearimgui");
fn igDebugStartItemPicker() void #import("dearimgui");
fn igDebugCheckVersionAndDataLayout(version_str: CStr, sz_io: usize, sz_style: usize, sz_vec2: usize, sz_vec4: usize, sz_drawvert: usize, sz_drawidx: usize) bool #import("dearimgui");
fn igDebugLog(fmt: CStr) void #import("dearimgui");
fn igDebugLogV(fmt: CStr, args: VaList) void #import("dearimgui");
fn igSetAllocatorFunctions(alloc_func: ImGuiMemAllocFunc, free_func: ImGuiMemFreeFunc, user_data: rawptr) void #import("dearimgui");
fn igGetAllocatorFunctions(p_alloc_func: *ImGuiMemAllocFunc, p_free_func: *ImGuiMemFreeFunc, p_user_data: *rawptr) void #import("dearimgui");
fn igMemAlloc(size: usize) rawptr #import("dearimgui");
fn igMemFree(ptr: rawptr) void #import("dearimgui");
fn igImHashData(data: rawptr, data_size: usize, seed: ImGuiID) ImGuiID #import("dearimgui");
fn igImHashStr(data: CStr, data_size: usize, seed: ImGuiID) ImGuiID #import("dearimgui");
fn igImQsort(base: rawptr, count: usize, size_of_element: usize, compare_func: @FnPtr(rawptr, rawptr) i32) void #import("dearimgui");
fn igImAlphaBlendColors(col_a: ImU32, col_b: ImU32) ImU32 #import("dearimgui");
fn igImIsPowerOfTwo_Int(v: i32) bool #import("dearimgui");
fn igImIsPowerOfTwo_U64(v: ImU64) bool #import("dearimgui");
fn igImUpperPowerOfTwo(v: i32) i32 #import("dearimgui");
fn igImStricmp(str1: CStr, str2: CStr) i32 #import("dearimgui");
fn igImStrnicmp(str1: CStr, str2: CStr, count: usize) i32 #import("dearimgui");
fn igImStrncpy(dst: CStr, src: CStr, count: usize) void #import("dearimgui");
fn igImStrdup(str: CStr) CStr #import("dearimgui");
fn igImStrdupcpy(dst: CStr, p_dst_size: *usize, str: CStr) CStr #import("dearimgui");
fn igImStrchrRange(str_begin: CStr, str_end: CStr, c: i8) CStr #import("dearimgui");
fn igImStreolRange(str: CStr, str_end: CStr) CStr #import("dearimgui");
fn igImStristr(haystack: CStr, haystack_end: CStr, needle: CStr, needle_end: CStr) CStr #import("dearimgui");
fn igImStrTrimBlanks(str: CStr) void #import("dearimgui");
fn igImStrSkipBlank(str: CStr) CStr #import("dearimgui");
fn igImStrlenW(str: *ImWchar) i32 #import("dearimgui");
fn igImStrbol(buf_mid_line: CStr, buf_begin: CStr) CStr #import("dearimgui");
fn igImToUpper(c: i8) i8 #import("dearimgui");
fn igImCharIsBlankA(c: i8) bool #import("dearimgui");
fn igImCharIsBlankW(c: u32) bool #import("dearimgui");
fn igImCharIsXdigitA(c: i8) bool #import("dearimgui");
fn igImFormatString(buf: CStr, buf_size: usize, fmt: CStr) i32 #import("dearimgui");
fn igImFormatStringV(buf: CStr, buf_size: usize, fmt: CStr, args: VaList) i32 #import("dearimgui");
fn igImFormatStringToTempBuffer(out_buf: *CStr, out_buf_end: *CStr, fmt: CStr) void #import("dearimgui");
fn igImFormatStringToTempBufferV(out_buf: *CStr, out_buf_end: *CStr, fmt: CStr, args: VaList) void #import("dearimgui");
fn igImParseFormatFindStart(format: CStr) CStr #import("dearimgui");
fn igImParseFormatFindEnd(format: CStr) CStr #import("dearimgui");
fn igImParseFormatTrimDecorations(format: CStr, buf: CStr, buf_size: usize) CStr #import("dearimgui");
fn igImParseFormatSanitizeForPrinting(fmt_in: CStr, fmt_out: CStr, fmt_out_size: usize) void #import("dearimgui");
fn igImParseFormatSanitizeForScanning(fmt_in: CStr, fmt_out: CStr, fmt_out_size: usize) CStr #import("dearimgui");
fn igImParseFormatPrecision(format: CStr, default_value: i32) i32 #import("dearimgui");
fn igImTextCharToUtf8(out_buf: CStr, c: u32) CStr #import("dearimgui");
fn igImTextStrToUtf8(out_buf: CStr, out_buf_size: i32, in_text: *ImWchar, in_text_end: *ImWchar) i32 #import("dearimgui");
fn igImTextCharFromUtf8(out_char: *u32, in_text: CStr, in_text_end: CStr) i32 #import("dearimgui");
fn igImTextStrFromUtf8(out_buf: *ImWchar, out_buf_size: i32, in_text: CStr, in_text_end: CStr, in_remaining: *CStr) i32 #import("dearimgui");
fn igImTextCountCharsFromUtf8(in_text: CStr, in_text_end: CStr) i32 #import("dearimgui");
fn igImTextCountUtf8BytesFromChar(in_text: CStr, in_text_end: CStr) i32 #import("dearimgui");
fn igImTextCountUtf8BytesFromStr(in_text: *ImWchar, in_text_end: *ImWchar) i32 #import("dearimgui");
fn igImTextFindPreviousUtf8Codepoint(in_text_start: CStr, in_text_curr: CStr) CStr #import("dearimgui");
fn igImTextCountLines(in_text: CStr, in_text_end: CStr) i32 #import("dearimgui");
fn igImFileOpen(filename: CStr, mode: CStr) ImFileHandle #import("dearimgui");
fn igImFileClose(file: ImFileHandle) bool #import("dearimgui");
fn igImFileGetSize(file: ImFileHandle) ImU64 #import("dearimgui");
fn igImFileRead(data: rawptr, size: ImU64, count: ImU64, file: ImFileHandle) ImU64 #import("dearimgui");
fn igImFileWrite(data: rawptr, size: ImU64, count: ImU64, file: ImFileHandle) ImU64 #import("dearimgui");
fn igImFileLoadToMemory(filename: CStr, mode: CStr, out_file_size: *usize, padding_bytes: i32) rawptr #import("dearimgui");
fn igImPow_Float(x: f32, y: f32) f32 #import("dearimgui");
fn igImPow_double(x: f64, y: f64) f64 #import("dearimgui");
fn igImLog_Float(x: f32) f32 #import("dearimgui");
fn igImLog_double(x: f64) f64 #import("dearimgui");
fn igImAbs_Int(x: i32) i32 #import("dearimgui");
fn igImAbs_Float(x: f32) f32 #import("dearimgui");
fn igImAbs_double(x: f64) f64 #import("dearimgui");
fn igImSign_Float(x: f32) f32 #import("dearimgui");
fn igImSign_double(x: f64) f64 #import("dearimgui");
fn igImRsqrt_Float(x: f32) f32 #import("dearimgui");
fn igImRsqrt_double(x: f64) f64 #import("dearimgui");
fn igImMin(pOut: *ImVec2, lhs: ImVec2, rhs: ImVec2) void #import("dearimgui");
fn igImMax(pOut: *ImVec2, lhs: ImVec2, rhs: ImVec2) void #import("dearimgui");
fn igImClamp(pOut: *ImVec2, v: ImVec2, mn: ImVec2, mx: ImVec2) void #import("dearimgui");
fn igImLerp_Vec2Float(pOut: *ImVec2, a: ImVec2, b: ImVec2, t: f32) void #import("dearimgui");
fn igImLerp_Vec2Vec2(pOut: *ImVec2, a: ImVec2, b: ImVec2, t: ImVec2) void #import("dearimgui");
fn igImLerp_Vec4(pOut: *ImVec4, a: ImVec4, b: ImVec4, t: f32) void #import("dearimgui");
fn igImSaturate(f: f32) f32 #import("dearimgui");
fn igImLengthSqr_Vec2(lhs: ImVec2) f32 #import("dearimgui");
fn igImLengthSqr_Vec4(lhs: ImVec4) f32 #import("dearimgui");
fn igImInvLength(lhs: ImVec2, fail_value: f32) f32 #import("dearimgui");
fn igImTrunc_Float(f: f32) f32 #import("dearimgui");
fn igImTrunc_Vec2(pOut: *ImVec2, v: ImVec2) void #import("dearimgui");
fn igImFloor_Float(f: f32) f32 #import("dearimgui");
fn igImFloor_Vec2(pOut: *ImVec2, v: ImVec2) void #import("dearimgui");
fn igImModPositive(a: i32, b: i32) i32 #import("dearimgui");
fn igImDot(a: ImVec2, b: ImVec2) f32 #import("dearimgui");
fn igImRotate(pOut: *ImVec2, v: ImVec2, cos_a: f32, sin_a: f32) void #import("dearimgui");
fn igImLinearSweep(current: f32, target: f32, speed: f32) f32 #import("dearimgui");
fn igImLinearRemapClamp(s0: f32, s1: f32, d0: f32, d1: f32, x: f32) f32 #import("dearimgui");
fn igImMul(pOut: *ImVec2, lhs: ImVec2, rhs: ImVec2) void #import("dearimgui");
fn igImIsFloatAboveGuaranteedIntegerPrecision(f: f32) bool #import("dearimgui");
fn igImExponentialMovingAverage(avg: f32, sample: f32, n: i32) f32 #import("dearimgui");
fn igImBezierCubicCalc(pOut: *ImVec2, p1: ImVec2, p2: ImVec2, p3: ImVec2, p4: ImVec2, t: f32) void #import("dearimgui");
fn igImBezierCubicClosestPoint(pOut: *ImVec2, p1: ImVec2, p2: ImVec2, p3: ImVec2, p4: ImVec2, p: ImVec2, num_segments: i32) void #import("dearimgui");
fn igImBezierCubicClosestPointCasteljau(pOut: *ImVec2, p1: ImVec2, p2: ImVec2, p3: ImVec2, p4: ImVec2, p: ImVec2, tess_tol: f32) void #import("dearimgui");
fn igImBezierQuadraticCalc(pOut: *ImVec2, p1: ImVec2, p2: ImVec2, p3: ImVec2, t: f32) void #import("dearimgui");
fn igImLineClosestPoint(pOut: *ImVec2, a: ImVec2, b: ImVec2, p: ImVec2) void #import("dearimgui");
fn igImTriangleContainsPoint(a: ImVec2, b: ImVec2, c: ImVec2, p: ImVec2) bool #import("dearimgui");
fn igImTriangleClosestPoint(pOut: *ImVec2, a: ImVec2, b: ImVec2, c: ImVec2, p: ImVec2) void #import("dearimgui");
fn igImTriangleBarycentricCoords(a: ImVec2, b: ImVec2, c: ImVec2, p: ImVec2, out_u: *f32, out_v: *f32, out_w: *f32) void #import("dearimgui");
fn igImTriangleArea(a: ImVec2, b: ImVec2, c: ImVec2) f32 #import("dearimgui");
fn igImTriangleIsClockwise(a: ImVec2, b: ImVec2, c: ImVec2) bool #import("dearimgui");
fn igImBitArrayGetStorageSizeInBytes(bitcount: i32) usize #import("dearimgui");
fn igImBitArrayClearAllBits(arr: *ImU32, bitcount: i32) void #import("dearimgui");
fn igImBitArrayTestBit(arr: *ImU32, n: i32) bool #import("dearimgui");
fn igImBitArrayClearBit(arr: *ImU32, n: i32) void #import("dearimgui");
fn igImBitArraySetBit(arr: *ImU32, n: i32) void #import("dearimgui");
fn igImBitArraySetBitRange(arr: *ImU32, n: i32, n2: i32) void #import("dearimgui");
fn igImLowerBound(in_begin: *ImGuiStoragePair, in_end: *ImGuiStoragePair, key: ImGuiID) *ImGuiStoragePair #import("dearimgui");
fn igGetIOEx(ctx: *ImGuiContext) *ImGuiIO #import("dearimgui");
fn igGetCurrentWindowRead() *ImGuiWindow #import("dearimgui");
fn igGetCurrentWindow() *ImGuiWindow #import("dearimgui");
fn igFindWindowByID(id: ImGuiID) *ImGuiWindow #import("dearimgui");
fn igFindWindowByName(name: CStr) *ImGuiWindow #import("dearimgui");
fn igUpdateWindowParentAndRootLinks(window: *ImGuiWindow, flags: ImGuiWindowFlags, parent_window: *ImGuiWindow) void #import("dearimgui");
fn igUpdateWindowSkipRefresh(window: *ImGuiWindow) void #import("dearimgui");
fn igCalcWindowNextAutoFitSize(pOut: *ImVec2, window: *ImGuiWindow) void #import("dearimgui");
fn igIsWindowChildOf(window: *ImGuiWindow, potential_parent: *ImGuiWindow, popup_hierarchy: bool) bool #import("dearimgui");
fn igIsWindowWithinBeginStackOf(window: *ImGuiWindow, potential_parent: *ImGuiWindow) bool #import("dearimgui");
fn igIsWindowAbove(potential_above: *ImGuiWindow, potential_below: *ImGuiWindow) bool #import("dearimgui");
fn igIsWindowNavFocusable(window: *ImGuiWindow) bool #import("dearimgui");
fn igSetWindowPos_WindowPtr(window: *ImGuiWindow, pos: ImVec2, cond: ImGuiCond) void #import("dearimgui");
fn igSetWindowSize_WindowPtr(window: *ImGuiWindow, size: ImVec2, cond: ImGuiCond) void #import("dearimgui");
fn igSetWindowCollapsed_WindowPtr(window: *ImGuiWindow, collapsed: bool, cond: ImGuiCond) void #import("dearimgui");
fn igSetWindowHitTestHole(window: *ImGuiWindow, pos: ImVec2, size: ImVec2) void #import("dearimgui");
fn igSetWindowHiddenAndSkipItemsForCurrentFrame(window: *ImGuiWindow) void #import("dearimgui");
fn igSetWindowParentWindowForFocusRoute(window: *ImGuiWindow, parent_window: *ImGuiWindow) void #import("dearimgui");
fn igWindowRectAbsToRel(pOut: *ImRect, window: *ImGuiWindow, r: ImRect) void #import("dearimgui");
fn igWindowRectRelToAbs(pOut: *ImRect, window: *ImGuiWindow, r: ImRect) void #import("dearimgui");
fn igWindowPosAbsToRel(pOut: *ImVec2, window: *ImGuiWindow, p: ImVec2) void #import("dearimgui");
fn igWindowPosRelToAbs(pOut: *ImVec2, window: *ImGuiWindow, p: ImVec2) void #import("dearimgui");
fn igFocusWindow(window: *ImGuiWindow, flags: ImGuiFocusRequestFlags) void #import("dearimgui");
fn igFocusTopMostWindowUnderOne(under_this_window: *ImGuiWindow, ignore_window: *ImGuiWindow, filter_viewport: *ImGuiViewport, flags: ImGuiFocusRequestFlags) void #import("dearimgui");
fn igBringWindowToFocusFront(window: *ImGuiWindow) void #import("dearimgui");
fn igBringWindowToDisplayFront(window: *ImGuiWindow) void #import("dearimgui");
fn igBringWindowToDisplayBack(window: *ImGuiWindow) void #import("dearimgui");
fn igBringWindowToDisplayBehind(window: *ImGuiWindow, above_window: *ImGuiWindow) void #import("dearimgui");
fn igFindWindowDisplayIndex(window: *ImGuiWindow) i32 #import("dearimgui");
fn igFindBottomMostVisibleWindowWithinBeginStack(window: *ImGuiWindow) *ImGuiWindow #import("dearimgui");
fn igSetNextWindowRefreshPolicy(flags: ImGuiWindowRefreshFlags) void #import("dearimgui");
fn igSetCurrentFont(font: *ImFont) void #import("dearimgui");
fn igGetDefaultFont() *ImFont #import("dearimgui");
fn igGetForegroundDrawList_WindowPtr(window: *ImGuiWindow) *ImDrawList #import("dearimgui");
fn igGetBackgroundDrawList_ViewportPtr(viewport: *ImGuiViewport) *ImDrawList #import("dearimgui");
fn igGetForegroundDrawList_ViewportPtr(viewport: *ImGuiViewport) *ImDrawList #import("dearimgui");
fn igAddDrawListToDrawDataEx(draw_data: *ImDrawData, out_list: *ImVectorImDrawListPtr, draw_list: *ImDrawList) void #import("dearimgui");
fn igInitialize() void #import("dearimgui");
fn igShutdown() void #import("dearimgui");
fn igUpdateInputEvents(trickle_fast_inputs: bool) void #import("dearimgui");
fn igUpdateHoveredWindowAndCaptureFlags() void #import("dearimgui");
fn igFindHoveredWindowEx(pos: ImVec2, find_first_and_in_any_viewport: bool, out_hovered_window: **ImGuiWindow, out_hovered_window_under_moving_window: **ImGuiWindow) void #import("dearimgui");
fn igStartMouseMovingWindow(window: *ImGuiWindow) void #import("dearimgui");
fn igUpdateMouseMovingWindowNewFrame() void #import("dearimgui");
fn igUpdateMouseMovingWindowEndFrame() void #import("dearimgui");
fn igAddContextHook(context: *ImGuiContext, hook: *ImGuiContextHook) ImGuiID #import("dearimgui");
fn igRemoveContextHook(context: *ImGuiContext, hook_to_remove: ImGuiID) void #import("dearimgui");
fn igCallContextHooks(context: *ImGuiContext, type: ImGuiContextHookType) void #import("dearimgui");
fn igSetWindowViewport(window: *ImGuiWindow, viewport: *ImGuiViewportP) void #import("dearimgui");
fn igMarkIniSettingsDirty_Nil() void #import("dearimgui");
fn igMarkIniSettingsDirty_WindowPtr(window: *ImGuiWindow) void #import("dearimgui");
fn igClearIniSettings() void #import("dearimgui");
fn igAddSettingsHandler(handler: *ImGuiSettingsHandler) void #import("dearimgui");
fn igRemoveSettingsHandler(type_name: CStr) void #import("dearimgui");
fn igFindSettingsHandler(type_name: CStr) *ImGuiSettingsHandler #import("dearimgui");
fn igCreateNewWindowSettings(name: CStr) *ImGuiWindowSettings #import("dearimgui");
fn igFindWindowSettingsByID(id: ImGuiID) *ImGuiWindowSettings #import("dearimgui");
fn igFindWindowSettingsByWindow(window: *ImGuiWindow) *ImGuiWindowSettings #import("dearimgui");
fn igClearWindowSettings(name: CStr) void #import("dearimgui");
fn igLocalizeRegisterEntries(entries: *ImGuiLocEntry, count: i32) void #import("dearimgui");
fn igLocalizeGetMsg(key: ImGuiLocKey) CStr #import("dearimgui");
fn igSetScrollX_WindowPtr(window: *ImGuiWindow, scroll_x: f32) void #import("dearimgui");
fn igSetScrollY_WindowPtr(window: *ImGuiWindow, scroll_y: f32) void #import("dearimgui");
fn igSetScrollFromPosX_WindowPtr(window: *ImGuiWindow, local_x: f32, center_x_ratio: f32) void #import("dearimgui");
fn igSetScrollFromPosY_WindowPtr(window: *ImGuiWindow, local_y: f32, center_y_ratio: f32) void #import("dearimgui");
fn igScrollToItem(flags: ImGuiScrollFlags) void #import("dearimgui");
fn igScrollToRect(window: *ImGuiWindow, rect: ImRect, flags: ImGuiScrollFlags) void #import("dearimgui");
fn igScrollToRectEx(pOut: *ImVec2, window: *ImGuiWindow, rect: ImRect, flags: ImGuiScrollFlags) void #import("dearimgui");
fn igScrollToBringRectIntoView(window: *ImGuiWindow, rect: ImRect) void #import("dearimgui");
fn igGetItemStatusFlags() ImGuiItemStatusFlags #import("dearimgui");
fn igGetItemFlags() ImGuiItemFlags #import("dearimgui");
fn igGetActiveID() ImGuiID #import("dearimgui");
fn igGetFocusID() ImGuiID #import("dearimgui");
fn igSetActiveID(id: ImGuiID, window: *ImGuiWindow) void #import("dearimgui");
fn igSetFocusID(id: ImGuiID, window: *ImGuiWindow) void #import("dearimgui");
fn igClearActiveID() void #import("dearimgui");
fn igGetHoveredID() ImGuiID #import("dearimgui");
fn igSetHoveredID(id: ImGuiID) void #import("dearimgui");
fn igKeepAliveID(id: ImGuiID) void #import("dearimgui");
fn igMarkItemEdited(id: ImGuiID) void #import("dearimgui");
fn igPushOverrideID(id: ImGuiID) void #import("dearimgui");
fn igGetIDWithSeed_Str(str_id_begin: CStr, str_id_end: CStr, seed: ImGuiID) ImGuiID #import("dearimgui");
fn igGetIDWithSeed_Int(n: i32, seed: ImGuiID) ImGuiID #import("dearimgui");
fn igItemSize_Vec2(size: ImVec2, text_baseline_y: f32) void #import("dearimgui");
fn igItemSize_Rect(bb: ImRect, text_baseline_y: f32) void #import("dearimgui");
fn igItemAdd(bb: ImRect, id: ImGuiID, nav_bb: *ImRect, extra_flags: ImGuiItemFlags) bool #import("dearimgui");
fn igItemHoverable(bb: ImRect, id: ImGuiID, item_flags: ImGuiItemFlags) bool #import("dearimgui");
fn igIsWindowContentHoverable(window: *ImGuiWindow, flags: ImGuiHoveredFlags) bool #import("dearimgui");
fn igIsClippedEx(bb: ImRect, id: ImGuiID) bool #import("dearimgui");
fn igSetLastItemData(item_id: ImGuiID, in_flags: ImGuiItemFlags, status_flags: ImGuiItemStatusFlags, item_rect: ImRect) void #import("dearimgui");
fn igCalcItemSize(pOut: *ImVec2, size: ImVec2, default_w: f32, default_h: f32) void #import("dearimgui");
fn igCalcWrapWidthForPos(pos: ImVec2, wrap_pos_x: f32) f32 #import("dearimgui");
fn igPushMultiItemsWidths(components: i32, width_full: f32) void #import("dearimgui");
fn igShrinkWidths(items: *ImGuiShrinkWidthItem, count: i32, width_excess: f32) void #import("dearimgui");
fn igGetStyleVarInfo(idx: ImGuiStyleVar) *ImGuiDataVarInfo #import("dearimgui");
fn igBeginDisabledOverrideReenable() void #import("dearimgui");
fn igEndDisabledOverrideReenable() void #import("dearimgui");
fn igLogBegin(flags: ImGuiLogFlags, auto_open_depth: i32) void #import("dearimgui");
fn igLogToBuffer(auto_open_depth: i32) void #import("dearimgui");
fn igLogRenderedText(ref_pos: *ImVec2, text: CStr, text_end: CStr) void #import("dearimgui");
fn igLogSetNextTextDecoration(prefix: CStr, suffix: CStr) void #import("dearimgui");
fn igBeginChildEx(name: CStr, id: ImGuiID, size_arg: ImVec2, child_flags: ImGuiChildFlags, window_flags: ImGuiWindowFlags) bool #import("dearimgui");
fn igBeginPopupEx(id: ImGuiID, extra_window_flags: ImGuiWindowFlags) bool #import("dearimgui");
fn igOpenPopupEx(id: ImGuiID, popup_flags: ImGuiPopupFlags) void #import("dearimgui");
fn igClosePopupToLevel(remaining: i32, restore_focus_to_window_under_popup: bool) void #import("dearimgui");
fn igClosePopupsOverWindow(ref_window: *ImGuiWindow, restore_focus_to_window_under_popup: bool) void #import("dearimgui");
fn igClosePopupsExceptModals() void #import("dearimgui");
fn igIsPopupOpen_ID(id: ImGuiID, popup_flags: ImGuiPopupFlags) bool #import("dearimgui");
fn igGetPopupAllowedExtentRect(pOut: *ImRect, window: *ImGuiWindow) void #import("dearimgui");
fn igGetTopMostPopupModal() *ImGuiWindow #import("dearimgui");
fn igGetTopMostAndVisiblePopupModal() *ImGuiWindow #import("dearimgui");
fn igFindBlockingModal(window: *ImGuiWindow) *ImGuiWindow #import("dearimgui");
fn igFindBestWindowPosForPopup(pOut: *ImVec2, window: *ImGuiWindow) void #import("dearimgui");
fn igFindBestWindowPosForPopupEx(pOut: *ImVec2, ref_pos: ImVec2, size: ImVec2, last_dir: *ImGuiDir, r_outer: ImRect, r_avoid: ImRect, policy: ImGuiPopupPositionPolicy) void #import("dearimgui");
fn igBeginTooltipEx(tooltip_flags: ImGuiTooltipFlags, extra_window_flags: ImGuiWindowFlags) bool #import("dearimgui");
fn igBeginTooltipHidden() bool #import("dearimgui");
fn igBeginViewportSideBar(name: CStr, viewport: *ImGuiViewport, dir: ImGuiDir, size: f32, window_flags: ImGuiWindowFlags) bool #import("dearimgui");
fn igBeginMenuEx(label: CStr, icon: CStr, enabled: bool) bool #import("dearimgui");
fn igMenuItemEx(label: CStr, icon: CStr, shortcut: CStr, selected: bool, enabled: bool) bool #import("dearimgui");
fn igBeginComboPopup(popup_id: ImGuiID, bb: ImRect, flags: ImGuiComboFlags) bool #import("dearimgui");
fn igBeginComboPreview() bool #import("dearimgui");
fn igEndComboPreview() void #import("dearimgui");
fn igNavInitWindow(window: *ImGuiWindow, force_reinit: bool) void #import("dearimgui");
fn igNavInitRequestApplyResult() void #import("dearimgui");
fn igNavMoveRequestButNoResultYet() bool #import("dearimgui");
fn igNavMoveRequestSubmit(move_dir: ImGuiDir, clip_dir: ImGuiDir, move_flags: ImGuiNavMoveFlags, scroll_flags: ImGuiScrollFlags) void #import("dearimgui");
fn igNavMoveRequestForward(move_dir: ImGuiDir, clip_dir: ImGuiDir, move_flags: ImGuiNavMoveFlags, scroll_flags: ImGuiScrollFlags) void #import("dearimgui");
fn igNavMoveRequestResolveWithLastItem(result: *ImGuiNavItemData) void #import("dearimgui");
fn igNavMoveRequestResolveWithPastTreeNode(result: *ImGuiNavItemData, tree_node_data: *ImGuiTreeNodeStackData) void #import("dearimgui");
fn igNavMoveRequestCancel() void #import("dearimgui");
fn igNavMoveRequestApplyResult() void #import("dearimgui");
fn igNavMoveRequestTryWrapping(window: *ImGuiWindow, move_flags: ImGuiNavMoveFlags) void #import("dearimgui");
fn igNavHighlightActivated(id: ImGuiID) void #import("dearimgui");
fn igNavClearPreferredPosForAxis(axis: ImGuiAxis) void #import("dearimgui");
fn igSetNavCursorVisibleAfterMove() void #import("dearimgui");
fn igNavUpdateCurrentWindowIsScrollPushableX() void #import("dearimgui");
fn igSetNavWindow(window: *ImGuiWindow) void #import("dearimgui");
fn igSetNavID(id: ImGuiID, nav_layer: ImGuiNavLayer, focus_scope_id: ImGuiID, rect_rel: ImRect) void #import("dearimgui");
fn igSetNavFocusScope(focus_scope_id: ImGuiID) void #import("dearimgui");
fn igFocusItem() void #import("dearimgui");
fn igActivateItemByID(id: ImGuiID) void #import("dearimgui");
fn igIsNamedKey(key: ImGuiKey) bool #import("dearimgui");
fn igIsNamedKeyOrMod(key: ImGuiKey) bool #import("dearimgui");
fn igIsLegacyKey(key: ImGuiKey) bool #import("dearimgui");
fn igIsKeyboardKey(key: ImGuiKey) bool #import("dearimgui");
fn igIsGamepadKey(key: ImGuiKey) bool #import("dearimgui");
fn igIsMouseKey(key: ImGuiKey) bool #import("dearimgui");
fn igIsAliasKey(key: ImGuiKey) bool #import("dearimgui");
fn igIsLRModKey(key: ImGuiKey) bool #import("dearimgui");
fn igFixupKeyChord(key_chord: ImGuiKeyChord) ImGuiKeyChord #import("dearimgui");
fn igConvertSingleModFlagToKey(key: ImGuiKey) ImGuiKey #import("dearimgui");
fn igGetKeyData_ContextPtr(ctx: *ImGuiContext, key: ImGuiKey) *ImGuiKeyData #import("dearimgui");
fn igGetKeyData_Key(key: ImGuiKey) *ImGuiKeyData #import("dearimgui");
fn igGetKeyChordName(key_chord: ImGuiKeyChord) CStr #import("dearimgui");
fn igMouseButtonToKey(button: ImGuiMouseButton) ImGuiKey #import("dearimgui");
fn igIsMouseDragPastThreshold(button: ImGuiMouseButton, lock_threshold: f32) bool #import("dearimgui");
fn igGetKeyMagnitude2d(pOut: *ImVec2, key_left: ImGuiKey, key_right: ImGuiKey, key_up: ImGuiKey, key_down: ImGuiKey) void #import("dearimgui");
fn igGetNavTweakPressedAmount(axis: ImGuiAxis) f32 #import("dearimgui");
fn igCalcTypematicRepeatAmount(t0: f32, t1: f32, repeat_delay: f32, repeat_rate: f32) i32 #import("dearimgui");
fn igGetTypematicRepeatRate(flags: ImGuiInputFlags, repeat_delay: *f32, repeat_rate: *f32) void #import("dearimgui");
fn igTeleportMousePos(pos: ImVec2) void #import("dearimgui");
fn igSetActiveIdUsingAllKeyboardKeys() void #import("dearimgui");
fn igIsActiveIdUsingNavDir(dir: ImGuiDir) bool #import("dearimgui");
fn igGetKeyOwner(key: ImGuiKey) ImGuiID #import("dearimgui");
fn igSetKeyOwner(key: ImGuiKey, owner_id: ImGuiID, flags: ImGuiInputFlags) void #import("dearimgui");
fn igSetKeyOwnersForKeyChord(key: ImGuiKeyChord, owner_id: ImGuiID, flags: ImGuiInputFlags) void #import("dearimgui");
fn igSetItemKeyOwner_InputFlags(key: ImGuiKey, flags: ImGuiInputFlags) void #import("dearimgui");
fn igTestKeyOwner(key: ImGuiKey, owner_id: ImGuiID) bool #import("dearimgui");
fn igGetKeyOwnerData(ctx: *ImGuiContext, key: ImGuiKey) *ImGuiKeyOwnerData #import("dearimgui");
fn igIsKeyDown_ID(key: ImGuiKey, owner_id: ImGuiID) bool #import("dearimgui");
fn igIsKeyPressed_InputFlags(key: ImGuiKey, flags: ImGuiInputFlags, owner_id: ImGuiID) bool #import("dearimgui");
fn igIsKeyReleased_ID(key: ImGuiKey, owner_id: ImGuiID) bool #import("dearimgui");
fn igIsKeyChordPressed_InputFlags(key_chord: ImGuiKeyChord, flags: ImGuiInputFlags, owner_id: ImGuiID) bool #import("dearimgui");
fn igIsMouseDown_ID(button: ImGuiMouseButton, owner_id: ImGuiID) bool #import("dearimgui");
fn igIsMouseClicked_InputFlags(button: ImGuiMouseButton, flags: ImGuiInputFlags, owner_id: ImGuiID) bool #import("dearimgui");
fn igIsMouseReleased_ID(button: ImGuiMouseButton, owner_id: ImGuiID) bool #import("dearimgui");
fn igIsMouseDoubleClicked_ID(button: ImGuiMouseButton, owner_id: ImGuiID) bool #import("dearimgui");
fn igShortcut_ID(key_chord: ImGuiKeyChord, flags: ImGuiInputFlags, owner_id: ImGuiID) bool #import("dearimgui");
fn igSetShortcutRouting(key_chord: ImGuiKeyChord, flags: ImGuiInputFlags, owner_id: ImGuiID) bool #import("dearimgui");
fn igTestShortcutRouting(key_chord: ImGuiKeyChord, owner_id: ImGuiID) bool #import("dearimgui");
fn igGetShortcutRoutingData(key_chord: ImGuiKeyChord) *ImGuiKeyRoutingData #import("dearimgui");
fn igPushFocusScope(id: ImGuiID) void #import("dearimgui");
fn igPopFocusScope() void #import("dearimgui");
fn igGetCurrentFocusScope() ImGuiID #import("dearimgui");
fn igIsDragDropActive() bool #import("dearimgui");
fn igBeginDragDropTargetCustom(bb: ImRect, id: ImGuiID) bool #import("dearimgui");
fn igClearDragDrop() void #import("dearimgui");
fn igIsDragDropPayloadBeingAccepted() bool #import("dearimgui");
fn igRenderDragDropTargetRect(bb: ImRect, item_clip_rect: ImRect) void #import("dearimgui");
fn igGetTypingSelectRequest(flags: ImGuiTypingSelectFlags) *ImGuiTypingSelectRequest #import("dearimgui");
fn igTypingSelectFindMatch(req: *ImGuiTypingSelectRequest, items_count: i32, get_item_name_func: @FnPtr(rawptr, i32) CStr, user_data: rawptr, nav_item_idx: i32) i32 #import("dearimgui");
fn igTypingSelectFindNextSingleCharMatch(req: *ImGuiTypingSelectRequest, items_count: i32, get_item_name_func: @FnPtr(rawptr, i32) CStr, user_data: rawptr, nav_item_idx: i32) i32 #import("dearimgui");
fn igTypingSelectFindBestLeadingMatch(req: *ImGuiTypingSelectRequest, items_count: i32, get_item_name_func: @FnPtr(rawptr, i32) CStr, user_data: rawptr) i32 #import("dearimgui");
fn igBeginBoxSelect(scope_rect: ImRect, window: *ImGuiWindow, box_select_id: ImGuiID, ms_flags: ImGuiMultiSelectFlags) bool #import("dearimgui");
fn igEndBoxSelect(scope_rect: ImRect, ms_flags: ImGuiMultiSelectFlags) void #import("dearimgui");
fn igMultiSelectItemHeader(id: ImGuiID, p_selected: *bool, p_button_flags: *ImGuiButtonFlags) void #import("dearimgui");
fn igMultiSelectItemFooter(id: ImGuiID, p_selected: *bool, p_pressed: *bool) void #import("dearimgui");
fn igMultiSelectAddSetAll(ms: *ImGuiMultiSelectTempData, selected: bool) void #import("dearimgui");
fn igMultiSelectAddSetRange(ms: *ImGuiMultiSelectTempData, selected: bool, range_dir: i32, first_item: ImGuiSelectionUserData, last_item: ImGuiSelectionUserData) void #import("dearimgui");
fn igGetBoxSelectState(id: ImGuiID) *ImGuiBoxSelectState #import("dearimgui");
fn igGetMultiSelectState(id: ImGuiID) *ImGuiMultiSelectState #import("dearimgui");
fn igSetWindowClipRectBeforeSetChannel(window: *ImGuiWindow, clip_rect: ImRect) void #import("dearimgui");
fn igBeginColumns(str_id: CStr, count: i32, flags: ImGuiOldColumnFlags) void #import("dearimgui");
fn igEndColumns() void #import("dearimgui");
fn igPushColumnClipRect(column_index: i32) void #import("dearimgui");
fn igPushColumnsBackground() void #import("dearimgui");
fn igPopColumnsBackground() void #import("dearimgui");
fn igGetColumnsID(str_id: CStr, count: i32) ImGuiID #import("dearimgui");
fn igFindOrCreateColumns(window: *ImGuiWindow, id: ImGuiID) *ImGuiOldColumns #import("dearimgui");
fn igGetColumnOffsetFromNorm(columns: *ImGuiOldColumns, offset_norm: f32) f32 #import("dearimgui");
fn igGetColumnNormFromOffset(columns: *ImGuiOldColumns, offset: f32) f32 #import("dearimgui");
fn igTableOpenContextMenu(column_n: i32) void #import("dearimgui");
fn igTableSetColumnWidth(column_n: i32, width: f32) void #import("dearimgui");
fn igTableSetColumnSortDirection(column_n: i32, sort_direction: ImGuiSortDirection, append_to_sort_specs: bool) void #import("dearimgui");
fn igTableGetHoveredRow() i32 #import("dearimgui");
fn igTableGetHeaderRowHeight() f32 #import("dearimgui");
fn igTableGetHeaderAngledMaxLabelWidth() f32 #import("dearimgui");
fn igTablePushBackgroundChannel() void #import("dearimgui");
fn igTablePopBackgroundChannel() void #import("dearimgui");
fn igTableAngledHeadersRowEx(row_id: ImGuiID, angle: f32, max_label_width: f32, data: *ImGuiTableHeaderData, data_count: i32) void #import("dearimgui");
fn igGetCurrentTable() *ImGuiTable #import("dearimgui");
fn igTableFindByID(id: ImGuiID) *ImGuiTable #import("dearimgui");
fn igBeginTableEx(name: CStr, id: ImGuiID, columns_count: i32, flags: ImGuiTableFlags, outer_size: ImVec2, inner_width: f32) bool #import("dearimgui");
fn igTableBeginInitMemory(table: *ImGuiTable, columns_count: i32) void #import("dearimgui");
fn igTableBeginApplyRequests(table: *ImGuiTable) void #import("dearimgui");
fn igTableSetupDrawChannels(table: *ImGuiTable) void #import("dearimgui");
fn igTableUpdateLayout(table: *ImGuiTable) void #import("dearimgui");
fn igTableUpdateBorders(table: *ImGuiTable) void #import("dearimgui");
fn igTableUpdateColumnsWeightFromWidth(table: *ImGuiTable) void #import("dearimgui");
fn igTableDrawBorders(table: *ImGuiTable) void #import("dearimgui");
fn igTableDrawDefaultContextMenu(table: *ImGuiTable, flags_for_section_to_display: ImGuiTableFlags) void #import("dearimgui");
fn igTableBeginContextMenuPopup(table: *ImGuiTable) bool #import("dearimgui");
fn igTableMergeDrawChannels(table: *ImGuiTable) void #import("dearimgui");
fn igTableGetInstanceData(table: *ImGuiTable, instance_no: i32) *ImGuiTableInstanceData #import("dearimgui");
fn igTableGetInstanceID(table: *ImGuiTable, instance_no: i32) ImGuiID #import("dearimgui");
fn igTableSortSpecsSanitize(table: *ImGuiTable) void #import("dearimgui");
fn igTableSortSpecsBuild(table: *ImGuiTable) void #import("dearimgui");
fn igTableGetColumnNextSortDirection(column: *ImGuiTableColumn) ImGuiSortDirection #import("dearimgui");
fn igTableFixColumnSortDirection(table: *ImGuiTable, column: *ImGuiTableColumn) void #import("dearimgui");
fn igTableGetColumnWidthAuto(table: *ImGuiTable, column: *ImGuiTableColumn) f32 #import("dearimgui");
fn igTableBeginRow(table: *ImGuiTable) void #import("dearimgui");
fn igTableEndRow(table: *ImGuiTable) void #import("dearimgui");
fn igTableBeginCell(table: *ImGuiTable, column_n: i32) void #import("dearimgui");
fn igTableEndCell(table: *ImGuiTable) void #import("dearimgui");
fn igTableGetCellBgRect(pOut: *ImRect, table: *ImGuiTable, column_n: i32) void #import("dearimgui");
fn igTableGetColumnName_TablePtr(table: *ImGuiTable, column_n: i32) CStr #import("dearimgui");
fn igTableGetColumnResizeID(table: *ImGuiTable, column_n: i32, instance_no: i32) ImGuiID #import("dearimgui");
fn igTableCalcMaxColumnWidth(table: *ImGuiTable, column_n: i32) f32 #import("dearimgui");
fn igTableSetColumnWidthAutoSingle(table: *ImGuiTable, column_n: i32) void #import("dearimgui");
fn igTableSetColumnWidthAutoAll(table: *ImGuiTable) void #import("dearimgui");
fn igTableRemove(table: *ImGuiTable) void #import("dearimgui");
fn igTableGcCompactTransientBuffers_TablePtr(table: *ImGuiTable) void #import("dearimgui");
fn igTableGcCompactTransientBuffers_TableTempDataPtr(table: *ImGuiTableTempData) void #import("dearimgui");
fn igTableGcCompactSettings() void #import("dearimgui");
fn igTableLoadSettings(table: *ImGuiTable) void #import("dearimgui");
fn igTableSaveSettings(table: *ImGuiTable) void #import("dearimgui");
fn igTableResetSettings(table: *ImGuiTable) void #import("dearimgui");
fn igTableGetBoundSettings(table: *ImGuiTable) *ImGuiTableSettings #import("dearimgui");
fn igTableSettingsAddSettingsHandler() void #import("dearimgui");
fn igTableSettingsCreate(id: ImGuiID, columns_count: i32) *ImGuiTableSettings #import("dearimgui");
fn igTableSettingsFindByID(id: ImGuiID) *ImGuiTableSettings #import("dearimgui");
fn igGetCurrentTabBar() *ImGuiTabBar #import("dearimgui");
fn igBeginTabBarEx(tab_bar: *ImGuiTabBar, bb: ImRect, flags: ImGuiTabBarFlags) bool #import("dearimgui");
fn igTabBarFindTabByID(tab_bar: *ImGuiTabBar, tab_id: ImGuiID) *ImGuiTabItem #import("dearimgui");
fn igTabBarFindTabByOrder(tab_bar: *ImGuiTabBar, order: i32) *ImGuiTabItem #import("dearimgui");
fn igTabBarGetCurrentTab(tab_bar: *ImGuiTabBar) *ImGuiTabItem #import("dearimgui");
fn igTabBarGetTabOrder(tab_bar: *ImGuiTabBar, tab: *ImGuiTabItem) i32 #import("dearimgui");
fn igTabBarGetTabName(tab_bar: *ImGuiTabBar, tab: *ImGuiTabItem) CStr #import("dearimgui");
fn igTabBarRemoveTab(tab_bar: *ImGuiTabBar, tab_id: ImGuiID) void #import("dearimgui");
fn igTabBarCloseTab(tab_bar: *ImGuiTabBar, tab: *ImGuiTabItem) void #import("dearimgui");
fn igTabBarQueueFocus_TabItemPtr(tab_bar: *ImGuiTabBar, tab: *ImGuiTabItem) void #import("dearimgui");
fn igTabBarQueueFocus_Str(tab_bar: *ImGuiTabBar, tab_name: CStr) void #import("dearimgui");
fn igTabBarQueueReorder(tab_bar: *ImGuiTabBar, tab: *ImGuiTabItem, offset: i32) void #import("dearimgui");
fn igTabBarQueueReorderFromMousePos(tab_bar: *ImGuiTabBar, tab: *ImGuiTabItem, mouse_pos: ImVec2) void #import("dearimgui");
fn igTabBarProcessReorder(tab_bar: *ImGuiTabBar) bool #import("dearimgui");
fn igTabItemEx(tab_bar: *ImGuiTabBar, label: CStr, p_open: *bool, flags: ImGuiTabItemFlags, docked_window: *ImGuiWindow) bool #import("dearimgui");
fn igTabItemCalcSize_Str(pOut: *ImVec2, label: CStr, has_close_button_or_unsaved_marker: bool) void #import("dearimgui");
fn igTabItemCalcSize_WindowPtr(pOut: *ImVec2, window: *ImGuiWindow) void #import("dearimgui");
fn igTabItemBackground(draw_list: *ImDrawList, bb: ImRect, flags: ImGuiTabItemFlags, col: ImU32) void #import("dearimgui");
fn igTabItemLabelAndCloseButton(draw_list: *ImDrawList, bb: ImRect, flags: ImGuiTabItemFlags, frame_padding: ImVec2, label: CStr, tab_id: ImGuiID, close_button_id: ImGuiID, is_contents_visible: bool, out_just_closed: *bool, out_text_clipped: *bool) void #import("dearimgui");
fn igRenderText(pos: ImVec2, text: CStr, text_end: CStr, hide_text_after_hash: bool) void #import("dearimgui");
fn igRenderTextWrapped(pos: ImVec2, text: CStr, text_end: CStr, wrap_width: f32) void #import("dearimgui");
fn igRenderTextClipped(pos_min: ImVec2, pos_max: ImVec2, text: CStr, text_end: CStr, text_size_if_known: *ImVec2, align: ImVec2, clip_rect: *ImRect) void #import("dearimgui");
fn igRenderTextClippedEx(draw_list: *ImDrawList, pos_min: ImVec2, pos_max: ImVec2, text: CStr, text_end: CStr, text_size_if_known: *ImVec2, align: ImVec2, clip_rect: *ImRect) void #import("dearimgui");
fn igRenderTextEllipsis(draw_list: *ImDrawList, pos_min: ImVec2, pos_max: ImVec2, clip_max_x: f32, ellipsis_max_x: f32, text: CStr, text_end: CStr, text_size_if_known: *ImVec2) void #import("dearimgui");
fn igRenderFrame(p_min: ImVec2, p_max: ImVec2, fill_col: ImU32, borders: bool, rounding: f32) void #import("dearimgui");
fn igRenderFrameBorder(p_min: ImVec2, p_max: ImVec2, rounding: f32) void #import("dearimgui");
fn igRenderColorRectWithAlphaCheckerboard(draw_list: *ImDrawList, p_min: ImVec2, p_max: ImVec2, fill_col: ImU32, grid_step: f32, grid_off: ImVec2, rounding: f32, flags: ImDrawFlags) void #import("dearimgui");
fn igRenderNavCursor(bb: ImRect, id: ImGuiID, flags: ImGuiNavRenderCursorFlags) void #import("dearimgui");
fn igFindRenderedTextEnd(text: CStr, text_end: CStr) CStr #import("dearimgui");
fn igRenderMouseCursor(pos: ImVec2, scale: f32, mouse_cursor: ImGuiMouseCursor, col_fill: ImU32, col_border: ImU32, col_shadow: ImU32) void #import("dearimgui");
fn igRenderArrow(draw_list: *ImDrawList, pos: ImVec2, col: ImU32, dir: ImGuiDir, scale: f32) void #import("dearimgui");
fn igRenderBullet(draw_list: *ImDrawList, pos: ImVec2, col: ImU32) void #import("dearimgui");
fn igRenderCheckMark(draw_list: *ImDrawList, pos: ImVec2, col: ImU32, sz: f32) void #import("dearimgui");
fn igRenderArrowPointingAt(draw_list: *ImDrawList, pos: ImVec2, half_sz: ImVec2, direction: ImGuiDir, col: ImU32) void #import("dearimgui");
fn igRenderRectFilledRangeH(draw_list: *ImDrawList, rect: ImRect, col: ImU32, x_start_norm: f32, x_end_norm: f32, rounding: f32) void #import("dearimgui");
fn igRenderRectFilledWithHole(draw_list: *ImDrawList, outer: ImRect, inner: ImRect, col: ImU32, rounding: f32) void #import("dearimgui");
fn igTextEx(text: CStr, text_end: CStr, flags: ImGuiTextFlags) void #import("dearimgui");
fn igButtonEx(label: CStr, size_arg: ImVec2, flags: ImGuiButtonFlags) bool #import("dearimgui");
fn igArrowButtonEx(str_id: CStr, dir: ImGuiDir, size_arg: ImVec2, flags: ImGuiButtonFlags) bool #import("dearimgui");
fn igImageButtonEx(id: ImGuiID, user_texture_id: ImTextureID, image_size: ImVec2, uv0: ImVec2, uv1: ImVec2, bg_col: ImVec4, tint_col: ImVec4, flags: ImGuiButtonFlags) bool #import("dearimgui");
fn igSeparatorEx(flags: ImGuiSeparatorFlags, thickness: f32) void #import("dearimgui");
fn igSeparatorTextEx(id: ImGuiID, label: CStr, label_end: CStr, extra_width: f32) void #import("dearimgui");
fn igCheckboxFlags_S64Ptr(label: CStr, flags: *ImS64, flags_value: ImS64) bool #import("dearimgui");
fn igCheckboxFlags_U64Ptr(label: CStr, flags: *ImU64, flags_value: ImU64) bool #import("dearimgui");
fn igCloseButton(id: ImGuiID, pos: ImVec2) bool #import("dearimgui");
fn igCollapseButton(id: ImGuiID, pos: ImVec2) bool #import("dearimgui");
fn igScrollbar(axis: ImGuiAxis) void #import("dearimgui");
fn igScrollbarEx(bb: ImRect, id: ImGuiID, axis: ImGuiAxis, p_scroll_v: *ImS64, avail_v: ImS64, contents_v: ImS64, draw_rounding_flags: ImDrawFlags) bool #import("dearimgui");
fn igGetWindowScrollbarRect(pOut: *ImRect, window: *ImGuiWindow, axis: ImGuiAxis) void #import("dearimgui");
fn igGetWindowScrollbarID(window: *ImGuiWindow, axis: ImGuiAxis) ImGuiID #import("dearimgui");
fn igGetWindowResizeCornerID(window: *ImGuiWindow, n: i32) ImGuiID #import("dearimgui");
fn igGetWindowResizeBorderID(window: *ImGuiWindow, dir: ImGuiDir) ImGuiID #import("dearimgui");
fn igButtonBehavior(bb: ImRect, id: ImGuiID, out_hovered: *bool, out_held: *bool, flags: ImGuiButtonFlags) bool #import("dearimgui");
fn igDragBehavior(id: ImGuiID, data_type: ImGuiDataType, p_v: rawptr, v_speed: f32, p_min: rawptr, p_max: rawptr, format: CStr, flags: ImGuiSliderFlags) bool #import("dearimgui");
fn igSliderBehavior(bb: ImRect, id: ImGuiID, data_type: ImGuiDataType, p_v: rawptr, p_min: rawptr, p_max: rawptr, format: CStr, flags: ImGuiSliderFlags, out_grab_bb: *ImRect) bool #import("dearimgui");
fn igSplitterBehavior(bb: ImRect, id: ImGuiID, axis: ImGuiAxis, size1: *f32, size2: *f32, min_size1: f32, min_size2: f32, hover_extend: f32, hover_visibility_delay: f32, bg_col: ImU32) bool #import("dearimgui");
fn igTreeNodeBehavior(id: ImGuiID, flags: ImGuiTreeNodeFlags, label: CStr, label_end: CStr) bool #import("dearimgui");
fn igTreePushOverrideID(id: ImGuiID) void #import("dearimgui");
fn igTreeNodeGetOpen(storage_id: ImGuiID) bool #import("dearimgui");
fn igTreeNodeSetOpen(storage_id: ImGuiID, open: bool) void #import("dearimgui");
fn igTreeNodeUpdateNextOpen(storage_id: ImGuiID, flags: ImGuiTreeNodeFlags) bool #import("dearimgui");
fn igDataTypeGetInfo(data_type: ImGuiDataType) *ImGuiDataTypeInfo #import("dearimgui");
fn igDataTypeFormatString(buf: CStr, buf_size: i32, data_type: ImGuiDataType, p_data: rawptr, format: CStr) i32 #import("dearimgui");
fn igDataTypeApplyOp(data_type: ImGuiDataType, op: i32, output: rawptr, arg_1: rawptr, arg_2: rawptr) void #import("dearimgui");
fn igDataTypeApplyFromText(buf: CStr, data_type: ImGuiDataType, p_data: rawptr, format: CStr, p_data_when_empty: rawptr) bool #import("dearimgui");
fn igDataTypeCompare(data_type: ImGuiDataType, arg_1: rawptr, arg_2: rawptr) i32 #import("dearimgui");
fn igDataTypeClamp(data_type: ImGuiDataType, p_data: rawptr, p_min: rawptr, p_max: rawptr) bool #import("dearimgui");
fn igDataTypeIsZero(data_type: ImGuiDataType, p_data: rawptr) bool #import("dearimgui");
fn igInputTextEx(label: CStr, hint: CStr, buf: CStr, buf_size: i32, size_arg: ImVec2, flags: ImGuiInputTextFlags, callback: ImGuiInputTextCallback, user_data: rawptr) bool #import("dearimgui");
fn igInputTextDeactivateHook(id: ImGuiID) void #import("dearimgui");
fn igTempInputText(bb: ImRect, id: ImGuiID, label: CStr, buf: CStr, buf_size: i32, flags: ImGuiInputTextFlags) bool #import("dearimgui");
fn igTempInputScalar(bb: ImRect, id: ImGuiID, label: CStr, data_type: ImGuiDataType, p_data: rawptr, format: CStr, p_clamp_min: rawptr, p_clamp_max: rawptr) bool #import("dearimgui");
fn igTempInputIsActive(id: ImGuiID) bool #import("dearimgui");
fn igGetInputTextState(id: ImGuiID) *ImGuiInputTextState #import("dearimgui");
fn igSetNextItemRefVal(data_type: ImGuiDataType, p_data: rawptr) void #import("dearimgui");
fn igColorTooltip(text: CStr, col: *f32, flags: ImGuiColorEditFlags) void #import("dearimgui");
fn igColorEditOptionsPopup(col: *f32, flags: ImGuiColorEditFlags) void #import("dearimgui");
fn igColorPickerOptionsPopup(ref_col: *f32, flags: ImGuiColorEditFlags) void #import("dearimgui");
fn igPlotEx(plot_type: ImGuiPlotType, label: CStr, values_getter: @FnPtr(rawptr, i32) f32, data: rawptr, values_count: i32, values_offset: i32, overlay_text: CStr, scale_min: f32, scale_max: f32, size_arg: ImVec2) i32 #import("dearimgui");
fn igShadeVertsLinearColorGradientKeepAlpha(draw_list: *ImDrawList, vert_start_idx: i32, vert_end_idx: i32, gradient_p0: ImVec2, gradient_p1: ImVec2, col0: ImU32, col1: ImU32) void #import("dearimgui");
fn igShadeVertsLinearUV(draw_list: *ImDrawList, vert_start_idx: i32, vert_end_idx: i32, a: ImVec2, b: ImVec2, uv_a: ImVec2, uv_b: ImVec2, clamp: bool) void #import("dearimgui");
fn igShadeVertsTransformPos(draw_list: *ImDrawList, vert_start_idx: i32, vert_end_idx: i32, pivot_in: ImVec2, cos_a: f32, sin_a: f32, pivot_out: ImVec2) void #import("dearimgui");
fn igGcCompactTransientMiscBuffers() void #import("dearimgui");
fn igGcCompactTransientWindowBuffers(window: *ImGuiWindow) void #import("dearimgui");
fn igGcAwakeTransientWindowBuffers(window: *ImGuiWindow) void #import("dearimgui");
fn igErrorLog(msg: CStr) bool #import("dearimgui");
fn igErrorRecoveryStoreState(state_out: *ImGuiErrorRecoveryState) void #import("dearimgui");
fn igErrorRecoveryTryToRecoverState(state_in: *ImGuiErrorRecoveryState) void #import("dearimgui");
fn igErrorRecoveryTryToRecoverWindowState(state_in: *ImGuiErrorRecoveryState) void #import("dearimgui");
fn igErrorCheckUsingSetCursorPosToExtendParentBoundaries() void #import("dearimgui");
fn igErrorCheckEndFrameFinalizeErrorTooltip() void #import("dearimgui");
fn igBeginErrorTooltip() bool #import("dearimgui");
fn igEndErrorTooltip() void #import("dearimgui");
fn igDebugAllocHook(info: *ImGuiDebugAllocInfo, frame_count: i32, ptr: rawptr, size: usize) void #import("dearimgui");
fn igDebugDrawCursorPos(col: ImU32) void #import("dearimgui");
fn igDebugDrawLineExtents(col: ImU32) void #import("dearimgui");
fn igDebugDrawItemRect(col: ImU32) void #import("dearimgui");
fn igDebugTextUnformattedWithLocateItem(line_begin: CStr, line_end: CStr) void #import("dearimgui");
fn igDebugLocateItem(target_id: ImGuiID) void #import("dearimgui");
fn igDebugLocateItemOnHover(target_id: ImGuiID) void #import("dearimgui");
fn igDebugLocateItemResolveWithLastItem() void #import("dearimgui");
fn igDebugBreakClearData() void #import("dearimgui");
fn igDebugBreakButton(label: CStr, description_of_location: CStr) bool #import("dearimgui");
fn igDebugBreakButtonTooltip(keyboard_only: bool, description_of_location: CStr) void #import("dearimgui");
fn igShowFontAtlas(atlas: *ImFontAtlas) void #import("dearimgui");
fn igDebugHookIdInfo(id: ImGuiID, data_type: ImGuiDataType, data_id: rawptr, data_id_end: rawptr) void #import("dearimgui");
fn igDebugNodeColumns(columns: *ImGuiOldColumns) void #import("dearimgui");
fn igDebugNodeDrawList(window: *ImGuiWindow, viewport: *ImGuiViewportP, draw_list: *ImDrawList, label: CStr) void #import("dearimgui");
fn igDebugNodeDrawCmdShowMeshAndBoundingBox(out_draw_list: *ImDrawList, draw_list: *ImDrawList, draw_cmd: *ImDrawCmd, show_mesh: bool, show_aabb: bool) void #import("dearimgui");
fn igDebugNodeFont(font: *ImFont) void #import("dearimgui");
fn igDebugNodeFontGlyph(font: *ImFont, glyph: *ImFontGlyph) void #import("dearimgui");
fn igDebugNodeStorage(storage: *ImGuiStorage, label: CStr) void #import("dearimgui");
fn igDebugNodeTabBar(tab_bar: *ImGuiTabBar, label: CStr) void #import("dearimgui");
fn igDebugNodeTable(table: *ImGuiTable) void #import("dearimgui");
fn igDebugNodeTableSettings(settings: *ImGuiTableSettings) void #import("dearimgui");
fn igDebugNodeInputTextState(state: *ImGuiInputTextState) void #import("dearimgui");
fn igDebugNodeTypingSelectState(state: *ImGuiTypingSelectState) void #import("dearimgui");
fn igDebugNodeMultiSelectState(state: *ImGuiMultiSelectState) void #import("dearimgui");
fn igDebugNodeWindow(window: *ImGuiWindow, label: CStr) void #import("dearimgui");
fn igDebugNodeWindowSettings(settings: *ImGuiWindowSettings) void #import("dearimgui");
fn igDebugNodeWindowsList(windows: *ImVectorImGuiWindowPtr, label: CStr) void #import("dearimgui");
fn igDebugNodeWindowsListByBeginStackParent(windows: **ImGuiWindow, windows_size: i32, parent_in_begin_stack: *ImGuiWindow) void #import("dearimgui");
fn igDebugNodeViewport(viewport: *ImGuiViewportP) void #import("dearimgui");
fn igDebugRenderKeyboardPreview(draw_list: *ImDrawList) void #import("dearimgui");
fn igDebugRenderViewportThumbnail(draw_list: *ImDrawList, viewport: *ImGuiViewportP, bb: ImRect) void #import("dearimgui");
fn igImFontAtlasGetBuilderForStbTruetype() *ImFontBuilderIO #import("dearimgui");
fn igImFontAtlasUpdateConfigDataPointers(atlas: *ImFontAtlas) void #import("dearimgui");
fn igImFontAtlasBuildInit(atlas: *ImFontAtlas) void #import("dearimgui");
fn igImFontAtlasBuildSetupFont(atlas: *ImFontAtlas, font: *ImFont, font_config: *ImFontConfig, ascent: f32, descent: f32) void #import("dearimgui");
fn igImFontAtlasBuildPackCustomRects(atlas: *ImFontAtlas, stbrp_context_opaque: rawptr) void #import("dearimgui");
fn igImFontAtlasBuildFinish(atlas: *ImFontAtlas) void #import("dearimgui");
fn igImFontAtlasBuildRender8bppRectFromString(atlas: *ImFontAtlas, x: i32, y: i32, w: i32, h: i32, in_str: CStr, in_marker_char: i8, in_marker_pixel_value: u8) void #import("dearimgui");
fn igImFontAtlasBuildRender32bppRectFromString(atlas: *ImFontAtlas, x: i32, y: i32, w: i32, h: i32, in_str: CStr, in_marker_char: i8, in_marker_pixel_value: u32) void #import("dearimgui");
fn igImFontAtlasBuildMultiplyCalcLookupTable(out_table: *u8, in_multiply_factor: f32) void #import("dearimgui");
fn igImFontAtlasBuildMultiplyRectAlpha8(table: *u8, pixels: *u8, x: i32, y: i32, w: i32, h: i32, stride: i32) void #import("dearimgui");
fn igLogText(fmt: CStr) void #import("dearimgui");
fn igGET_FLT_MAX() f32 #import("dearimgui");
fn igGET_FLT_MIN() f32 #import("dearimgui");
