//! https://github.com/wolfpld/tracy/blob/master/public/tracy/TracyC.h
// TODO: once I have pointer niches, use optional for nullable CStrs.
// TODO: auto generate this when I finish c_bindgen.

TracySourceLocation :: @struct(
    name: CStr, // ?
    function: CStr,
    file: CStr,
    line: u32,
    color: u32,
);

// TODO: i dont follow the calling convention correctly. it wants a struct of u32s passed or-ed together in one register. 
// TODO: this has been fixed on the new backend. 
TracyZoneContext :: @struct(
    id_active: u64
    //id: u32,
    //active: i32,
);

fn ___tracy_emit_frame_mark_start(name: CStr) void #import("tracy");
fn ___tracy_emit_frame_mark_end(name: CStr) void #import("tracy");
fn ___tracy_emit_zone_begin(srcloc: *TracySourceLocation, active: i32) TracyZoneContext #import("tracy");
fn ___tracy_emit_zone_begin_callstack(srcloc: *TracySourceLocation, depth: i32, active: i32) TracyZoneContext #import("tracy");
// Note: these rely on the abi of slices being the same as seperate ptr/len arguments
fn ___tracy_emit_zone_text(ctx: TracyZoneContext, txt: []u8) void #import("tracy");  
fn ___tracy_emit_zone_name(ctx: TracyZoneContext, txt: []u8) void #import("tracy");
fn ___tracy_emit_zone_color(ctx: TracyZoneContext, color: u32) void #import("tracy");
fn ___tracy_emit_zone_value(ctx: TracyZoneContext, value: u64) void #import("tracy");
fn ___tracy_emit_zone_end(ctx: TracyZoneContext) void #import("tracy");
fn ___tracy_emit_memory_alloc(ptr: rawptr, size: usize, secure: i32) void #import("tracy");
fn ___tracy_emit_memory_alloc_callstack(ptr: rawptr, size: usize, depth: i32, secure: i32) void #import("tracy");
fn ___tracy_emit_memory_free(ptr: rawptr, secure: i32) void #import("tracy");
fn ___tracy_emit_memory_free_callstack(ptr: rawptr, depth: i32, secure: i32) void #import("tracy");
fn ___tracy_emit_memory_alloc_named(ptr: rawptr, size: usize, secure: i32, name: CStr) void #import("tracy");
fn ___tracy_emit_memory_alloc_callstack_named(ptr: rawptr, size: usize, depth: i32, secure: i32, name: CStr) void #import("tracy");
fn ___tracy_emit_memory_free_named(ptr: rawptr, secure: i32, name: CStr) void #import("tracy");
fn ___tracy_emit_memory_free_callstack_named(ptr: rawptr, depth: i32, secure: i32, name: CStr) void #import("tracy");
fn ___tracy_emit_message(txt: []u8, callstack: i32) void #import("tracy");
fn ___tracy_emit_messageL(txt: CStr, callstack: i32) void #import("tracy");
fn ___tracy_emit_messageC(txt: []u8, color: u32, callstack: i32) void #import("tracy");
fn ___tracy_emit_messageLC(txt: CStr, color: u32, callstack: i32) void #import("tracy");
fn ___tracy_emit_frame_mark(name: CStr) void #import("tracy"); // ?
