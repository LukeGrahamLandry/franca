WuffsStatus :: @struct(repr: CStr);
WuffsBufferMeta :: @struct(
    wi: i64,        // Write index. Invariant: wi <= len.
    ri: i64,        // Read  index. Invariant: ri <= wi.
    pos: u64,       // Buffer position (relative to the start of stream).
    closed: bool,   // No further writes are expected.
);
WuffsToken :: @struct(repr: u64);

// TODO: have a way of declaring alignment
// TODO: have a nice way of saying opaque pointers that you can't load. 
WuffsJsonDecoder :: @struct(opaque: Array(u8, sizeof__wuffs_json__decoder())); 

WuffsIoBuffer :: @struct(data: [] u8, meta: WuffsBufferMeta);
WuffsTokenBuffer :: @struct(data: [] WuffsToken, meta: WuffsBufferMeta);

fn wuffs_json__decoder__decode_tokens(self: *WuffsJsonDecoder, dst: *WuffsTokenBuffer, src: *WuffsIoBuffer, workbuf: []u8) WuffsStatus #import("wuffs");
fn wuffs_base__io_buffer__compact(self: *WuffsIoBuffer) void #import("wuffs");
fn wuffs_base__token_buffer__compact(self: *WuffsTokenBuffer) void #import("wuffs");
fn wuffs_json__decoder__initialize(self: *WuffsJsonDecoder, sizeof_star_self: i64, wuffs_version: u64, options: u32) WuffsStatus #import("wuffs");
fn sizeof__wuffs_json__decoder() i64 #import("wuffs");

WuffsVbc :: @enum(u64) (
    Filler = 0,
    Structure = 1,
    String = 2,
    Unicode = 3,
    Literal = 4,
    Number = 5,
    InlineIntSigned = 6,
    InlineIntUnsigned = 7,
);

// TODO: enum flags

WuffsVbd :: @enum(u64) (
    // Filler //
    Punctuation = 0x00001,
    CommentBlock = 0x00002,
    CommentLine = 0x00004,
    CommentAny = 0x00006,
    // Structure //
    Push = 0x00001,
    Pop = 0x00002,
    FromNone = 0x00010,
    FromList = 0x00020,
    FromDict = 0x00040,
    ToNone = 0x01000,
    ToList = 0x02000,
    ToDict = 0x04000,
    // String //
    Convert0DstFrom1SrcDrop = 0x00100,
    Convert1DstFrom1SrcCopy = 0x00200,
    // Literal // 
    Undefined = 0x00001,
    Null = 0x00002,
    False = 0x00004,
    True = 0x00008,
);
