// Adapted from Qbe. MIT License. Â© 2015-2024 Quentin Carbonneaux <quentin@c9x.me>

fn printfn(_0: *Qbe.Fn, _1: *FILE) void #import("qbe");
fn printref(_0: Qbe.Ref, _1: *Qbe.Fn, _2: *FILE) void #import("qbe");

fn debug_dump_copy(f: *Qbe.Fn, copy_of: []Qbe.Ref) void = {
    out := f.globals.debug_out;
    write(out, "\n> Copy information:");
    range(Qbe.Tmp0, f.ntmp.zext()) { t |
        if copy_of[t] == QbeNull {
            @fmt_write(out, "\n% not seen!", f_pad(f.tmp[t]&.name(), 10, .Before));
        } else {
            if copy_of[t] != TMP(t) {
                @fmt_write(out, "\n% copy of ", f_pad(f.tmp[t]&.name(), 10, .Before));
                printref(copy_of[t], f, out);
            }
        }
    };
    write(out, "\n\n> After copy elimination:\n");
    printfn(f, out);
}

fn debug_dump_liveness(f: *Qbe.Fn) void = {
    out := f.globals.debug_out;
    write(out, "\n> Liveness analysis:\n");
    for_blocks f { b |
        @fmt_write(out, "\t%in:   ", f_pad(b.name(), 10, .After));
        dumpts(b.in&, f.tmp, out);
        write(out, "\t          out:  ");
        dumpts(b.out&, f.tmp, out);
        write(out, "\t          gen:  ");
        dumpts(b.gen&, f.tmp, out);
        write(out, "\t          live: ");
        @fmt_write(out, "% %\n", b.nlive&[0], b.nlive&[1]);
    };
}

fn debug_dump(f: *Qbe.Fn, m: *RMap) void = {
    range(0, m.len) { i |
        if m.tmps&[i] >= Qbe.Tmp0 {
            name := f.tmp.index(m.tmps&[i].intcast()).name();
            @fmt_write(f.globals.debug_out, " (%, R%)", name, m.regs&[i]);
        }
    };
    write(f.globals.debug_out, "\n");
}
