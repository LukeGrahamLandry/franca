// Adapted from Qbe. MIT License. Â© 2015-2024 Quentin Carbonneaux <quentin@c9x.me>

fn debug_dump_copy(f: *Qbe.Fn, copy_of: []Qbe.Ref) void = {
    out := f.globals.debug_out;
    write(out, "\n> Copy information:");
    range(Qbe.Tmp0, f.ntmp.zext()) { t |
        if copy_of[t] == QbeNull {
            @fmt_write(out, "\n% not seen!", f_pad(f.tmp[t]&.name(), 10, .Before));
        } else {
            if copy_of[t] != TMP(t) {
                @fmt_write(out, "\n% copy of ", f_pad(f.tmp[t]&.name(), 10, .Before));
                printref(copy_of[t], f, out);
            }
        }
    };
    write(out, "\n\n> After copy elimination:\n");
    printfn(f, out);
}

fn debug_dump_liveness(f: *Qbe.Fn) void = {
    out := f.globals.debug_out;
    write(out, "\n> Liveness analysis:\n");
    for_blocks f { b |
        @fmt_write(out, "\t%in:   ", f_pad(b.name(), 10, .After));
        dumpts(b.in&, f.tmp, out);
        write(out, "\t          out:  ");
        dumpts(b.out&, f.tmp, out);
        write(out, "\t          gen:  ");
        dumpts(b.gen&, f.tmp, out);
        write(out, "\t          live: ");
        @fmt_write(out, "% %\n", b.nlive&[0], b.nlive&[1]);
    };
}

fn debug_dump(f: *Qbe.Fn, m: *RMap) void = {
    range(0, m.len) { i |
        if m.tmps&[i] >= Qbe.Tmp0 {
            name := f.tmp.index(m.tmps&[i].intcast()).name();
            @fmt_write(f.globals.debug_out, " (%, R%)", name, m.regs&[i]);
        }
    };
    write(f.globals.debug_out, "\n");
}

fn printcon(m: *QbeModule, c: *Qbe.Con, out: *FILE) void = {
    @debug_assert(!c.is_null(), "null con");
    @match(c.type) {
        fn CUndef() => ();
        fn CAddr() => {
            if c.sym.type == .SThr {
                write(out, "thread ");
            };
            @fmt_write(out, "$%", m.str(c.sym.id));
            if c.bits.i != 0 {
                @fmt_write(out, "+%", c.bits.i);
            };
        }
        fn CBits() => {
            if c.flt == 1 {
                @fmt_write(out, "s_%", c.bits.s.s);
                return();
            };
            if c.flt == 2 {
                @fmt_write(out, "d_%", c.bits.d);
                return();
            };
            @fmt_write(out, "%", c.bits.i);
        }
    };
}

fn printref(r: Qbe.Ref, f: *Qbe.Fn, out: *FILE) void = {
    @match(rtype(r)) {
        fn RTmp() => {
            if r.val() < Qbe.Tmp0 {
                @fmt_write(out, "R%", r.val());
            } else {
                @fmt_write(out, "%%", "%", f.tmp[r.val()]&.name());
            }
        }
        fn RCon() => {
            if r == QbeUndef {
                write(out, "UNDEF");
            } else {
                f.globals.printcon(f.get_constant(r), out);
            }
        }
        fn RSlot() => {
            @fmt_write(out, "S%", rsval(r));
        }
        fn RCall() => {
            // TODO: fprintf(f, "%04x", r.val);
            @fmt_write(out, "%", r.val());
        }
        fn RType() => {
            @fmt_write(out, ":%", f.globals.types[r.val()]&.name());
        }
        fn RMem() => {
            i := 0;
            m := f.mem[r.val()]&;
            write(out, "[");
            if m.offset.type != .CUndef {
                f.globals.printcon(m.offset&, out);
                i = 1;
            };
            if m.base != QbeNull {
                if i != 0 {
                    write(out, " + ");
                };
                printref(m.base, f, out);
                i = 1;
            };
            if m.index != QbeNull {
                if i != 0 {
                    write(out, " + ");
                };
                @fmt_write(out, "% * ", m.scale);
                printref(m.index, f, out);
            };
            write(out, "]");
        }
        fn RInt() => {
            @fmt_write(out, "%", r.val());
        }
        fn RNull() => {
            write(out, "R");
        }
    }
}

fn kname(k: Qbe.Cls) Str = {
    ktoc := "wlsd";
    ki: i64 = k.raw().zext();
    if ki < 0 || ki > 3 {
        return("?");
    };
    ktoc.slice(ki, ki + 1)
}

fn printins(f: *Qbe.Fn, i: *Qbe.Ins, out: *FILE) void = {
    out := f.globals.debug_out;
    if i.to != QbeNull {
        printref(i.to, f, out);
        @fmt_write(out, " =% ", kname(i.cls()));
    };
    names :: Qbe.O.get_enum_names();
    id: i64 = i.op().raw().zext();
    assert(id < names.len(), "invalid opcode number");
    write(out, names[id]);
    if i.to == QbeNull {
        o := i.op();
        if o == .arg || o == .swap || o == .xcmp || o == .acmp || o == .acmn || o == .afcmp || o == .xtest || o == .xdiv || o == .xidiv {
            write(out, kname(i.cls()));
        };
    };
    if i.arg&[0] != QbeNull {
        write(out, " ");
        printref(i.arg&[0], f, out);
    };
    if i.arg&[1] != QbeNull {
        write(out, ", ");
        printref(i.arg&[1], f, out);
    };
    write(out, "\n");
};

fn printfn(f: *Qbe.Fn, out: *FILE) void = {
    mark := __temp_alloc.mark();

    @fmt_write(out, "function $%() {\n", f.name());
    for_blocks f { b | 
        continue :: local_return;
        @fmt_write(out, "@%\n", b.name());
        for_phi b { p | 
            write(out, "\t");
            printref(p.to, f, out);
            @fmt_write(out, " =% phi ", kname(p.cls));
            assert(p.narg > 0, "phi with no args");
            range(0, p.narg.zext()) { n | 
                @fmt_write(out, "@% ", p.blk[n].name());
                printref(p.arg&[n], f, out);
                if (n == p.narg.zext() - 1) {
                    write(out, "\n");
                } else {
                    write(out, ", ");
                };
            };
        };
        for_insts_forward b { i | 
            write(out, "\t");
            printins(f, i, out);
        };
        
        jnames :: Qbe.J.get_enum_names();
        n := jnames[b.jmp.type.raw().zext()];
        if is_ret(b.jmp.type) {
            @fmt_write(out, "\t%", n);
            if b.jmp.type != .ret0 || b.jmp.arg != QbeNull {
                write(out, " ");
                printref(b.jmp.arg, f, out);
            };
            if b.jmp.type == .retc {
                @fmt_write(out, ", :%", f.globals.types.index(f.retty.zext()).name());
            };
            write(out, "\n");
            continue();
        };
        
        if b.jmp.type == .hlt {
            write(out, "\thlt\n");
            continue();
        };
        if b.jmp.type == .jmp {
            if !b.s1.identical(b.link) {
                @fmt_write(out, "\tjmp @%\n", b.s1.name());
            };
            continue();
        };
        
        @fmt_write(out, "\t% ", n);
        if b.jmp.type == .jnz {
            printref(b.jmp.arg, f, out);
            write(out, ", ");
        };
        assert(!b.s1.is_null() && !b.s2.is_null(), "missing branch target");
        @fmt_write(out, "@%, @%\n", b.s1.name(), b.s2.name());
    };
    write(out, "}\n");
    __temp_alloc.reset_retaining_capacity(mark);
}

fn print_dat(dat: *Qbe.Dat, out: *FILE) void = {
    @match(dat.type) {
        fn DStart() => {
            @fmt_write(out, "data $% = { ", dat.name);
        }
        fn DEnd() => write(out, " }\n");
        fn DZ() => {
            @fmt_write(out, "z %,", dat.u.num);
        }
        fn DB() => {
            @debug_assert(!dat.isref, "can't have a byte sized pointer");
            if dat.isstr {
                if dat.has_quotes_and_escapes {
                    @fmt_write(out, "b %,", dat.u.str);
                } else {
                    for dat.u.str { c |
                        @fmt_write(out, "b %,", c);
                    };
                };
            } else {
                @fmt_write(out, "b %,", dat.u.num);
            };
        }
        fn DL() => {
            if dat.isref {
                @fmt_write(out, "l $% + %,", dat.u.ref.name, dat.u.ref.off);
            } else {
                @fmt_write(out, "l %,", dat.u.num);
            };
        }
        fn DW() =>  {
                @fmt_write(out, "w %,", dat.u.num);
        }
        fn DH() =>  {
            @fmt_write(out, "h %,", dat.u.num);
        }
    }
}

fn debug_dump_fused_slots(f: *Qbe.Fn, sl: []Slot, ip: i64) void = {
    out := f.globals.debug_out;
    each sl { s0 |
        continue :: local_return;
        if(!s0.replacement.identical(s0), => continue());
        @fmt_write(out, "\tfuse (%b) [", f_pad(s0.sz, 3, .Before));
        for(s0, sl.index_unchecked(sl.len)) { s |
            continue :: local_return;
            if(!s.replacement.identical(s0), => continue());
            @fmt_write(out, " %%", "%", f.tmp[s.t.zext()]&.name());
            if s.live_range.b != 0 {
                @fmt_write(out, "[%,%)", s.live_range.a - ip.intcast(), s.live_range.b - ip.intcast());
            } else {
                write(out, "{}");
            };
        };
        write(out, " ]\n");
    };
}

fn debug_dump_dead_slots(f: *Qbe.Fn, dead_slots: []i32) void = {
    out := f.globals.debug_out;
    write(out, "\n> Slot coalescing:\n");
    if dead_slots.len != 0 {
        write(out, "\tkill [");
        for dead_slots { m |
            @fmt_write(out, " %%", "%", f.tmp.index(m.zext()).name());
        };
        write(out, " ]\n");
    };
}

fn when_debug(f: *Qbe.Fn, category: Qbe.DebugKey, $body: @Fn(out: *FILE) void) void = {  
    if f.globals.debug[category.raw()] {
        body(f.globals.debug_out);
    };
}

fn dumpts(bs: *Qbe.BSet, tmp: QList(Qbe.Tmp), f: *FILE) void = {
    write(f, "[");
    for(bs, Qbe.Tmp0) { t | 
        @fmt_write(f, " %", tmp[t]&.name());
    };
    write(f, "]\n");
}
