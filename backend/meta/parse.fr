//!
//! This parses the text format used by QBE (https://c9x.me/compile/doc/il-v1.2.html).
//! The Franca compiler does not use this! It generates the IR in memory. Instead this is used for,
//! - Loading small IR test programs without involving the franca front end.
//! - At comptime to generate code when large substitutions are needed. (See meta/template.fr).
//!   This is common for isel/abi stuff and is much more readable than building it up backwards with `emit` calls.
//!   This use case requires being more permisive than Qbe's parser: allowing constructs only added in later passes (like RSlot).
//! So while it's embrassing that it's slow, it's not a huge deal yet since it mostly runs on programs that are <<< 100 lines long. 
//! If I have to write many more of these, maybe I should reconsider doing something about parser generators. 
//!

// TODO: be stricter about checking for invalid input
// TODO: `%.6 =s mul s_0x1p-1, s_0x1.fffffe091ff3dp+127`
// TODO: dont loop when no new line at end of file 

Replacement :: @struct(key: i64, r: Qbe.Ref);

QParseCtx :: @struct(
    blocks: HashMap(Str, *Qbe.Blk),
    tmps: HashMap(Str, Qbe.Ref),
    replacements: List(Replacement),
    error: List(u8),
    input: Str,
    cursor := 0,
    f: *Qbe.Fn,
    line := 0,
    out: Alloc,
    blk := Qbe.Blk.ptr_from_int(0),
    ret := Qbe.J.Jxxx,
    // TODO: use this for reporting more errors that are only allowed when used as a template. 
    allow_unterminated_block := false, // for comptime templates
    types: HashMap(Str, i64),
);

// TODO: this is more useful if you let them pass a userdata pointer but for now i want to match the qbe interface. 
fn parse_top_level(m: *QbeModule, src: Str, yield_data: @FnPtr(*Qbe.Dat) void, yield_func: @FnPtr(*Qbe.Fn) void) Result(void, Str) = {
    self: QParseCtx = init(m, src); 
    self := self&;
    self.f.default_init(m);  // :NeedFunctionInitForData
    
    loop {
        continue :: local_return;
        self.skip_blanks();
        self.skip_lines();
        
        export := self.eat("export");
        self.skip_lines();
        
        if self.eat("function") {
            self.skip_lines();
            self.f.reset_scratch();
            parse_header(self, export);
            if self.error.len != 0 {
                return(Err = self.error.items());
            };
            self.skip_lines();
            if !self.eat("{") {
                return(Err = "expected '{' before function body");
            };
            f, replacements := @try(parse_body(self)) return;
            if replacements.len != 0 {
                return(Err = "numeric cls placeholder is only allowed for function fragment templates (ie =0 instead of =w)");
            };
            if !self.eat("}") {
                return(Err = "expected '}' after function body");
            };
            yield_func(f);  // might reset temp
            self.blocks = init(temp());
            self.tmps = init(temp());
            self.f[] = Qbe.Fn.zeroed();
            self.f.default_init(m);
            self.blk = Qbe.Blk.ptr_from_int(0);
            continue();
        };
        if self.eat("type") {
            @try(self.parse_type()) return;
            continue();
        };
        thread := self.eat("thread");
        if self.eat("data") {
            @try(self.parse_data(export, thread, yield_data)) return;
            continue();
        };
        
        if self.cursor >= self.input.len {
            return(.Ok);
        };
        self.skip_blanks();
        if self.skip_lines() == 1 && self.cursor < self.input.len {
            return(Err = "expected new line");
        };
    };
    unreachable()
}

fn skip_lines(self: *QParseCtx) i64 = {
    self.skip_blanks();
    n := 0;
    dowhile {
        n += 1;
        self.skip_blanks();
        if self.eat("#") {  // comment
            while => !self.check("\n") && self.cursor < self.input.len {
                self.cursor += 1;
            };
        };
        self.eat("\n") && self.cursor < self.input.len
    };
    self.line += n - 1;
    self.skip_blanks();
    n
}

fn init(m: *QbeModule, src: Str) QParseCtx = (
    blocks = init(temp()),
    tmps = init(temp()),
    input = src,
    error = list(temp()),
    replacements = list(m.gpa), // only need this for cls
    f = m.gpa.box_zeroed(Qbe.Fn),
    out = m.gpa,
    types = init(temp()),
);

fn parse_body(self: *QParseCtx) Result(Ty(*Qbe.Fn, []Replacement), Str) = {
    while => self.parse_line() {
        self.skip_lines();
    };
    self.end_block(.None);
    if self.error.len != 0 {
        return(Err = self.error.items());
    };
    (Ok = (self.f, self.replacements.items()))
}

fn parse_header(self: *QParseCtx, export: bool) void = {
    self.skip_blanks();
    if self.eat(":") {
        name := self.eat_word();
        type := or self.find_type(name) {
            @fmt(self.error&, "type '%' must be declared before use as function return class", name);
            return()
        };
        self.ret = .retc;
        self.f.retty = type.intcast();
    } else {
        if !self.check("$") {
            k := or cls_from_char(self.input[self.cursor]) {
                @fmt(self.error&, "invalid cls char");
                return()
            };
            self.cursor += 1;
            self.ret = @as(Qbe.J) @as(i32) Qbe.J.retw.raw() + k.raw(); // TODO: is this right? also sb,etc.
        } else {
            self.ret = .ret0;
        };
        self.f.retty = -1;
    };
    self.skip_blanks();
    if !self.eat("$") {
        @fmt(self.error&, "expected function name");
        return()
    };
    name := self.eat_word();
    @if(TRACK_IR_NAMES) self.f.name&.items().slice(0, name.len).copy_from(name);  // :UnacceptablePanic
    self.f.lnk.export = export;
    self.f.lnk.id = self.f.globals.intern(name);
    self.f.leaf = true;
    self.parse_args(true);
}

fn parse_args(self: *QParseCtx, is_par: bool) void = {
    self.skip_blanks();
    base_op := if(is_par, => Qbe.O.par,  => .arg);
    abi_op  := if(is_par, => Qbe.O.parc, => .argc);
    if !self.eat("(") {
        @fmt(self.error&, "expected '(' before function args");
        return()
    };
    if(self.eat(")"), => return()); // no args
    while => !self.check(")") && self.cursor < self.input.len {
        continue :: local_return;
        k := Qbe.Cls.Kl;
        type := QbeNull;
        variable := QbeNull;
        o := if self.eat(":") {
            name := self.eat_word();
            type = TYPE(or self.find_type(name) {
                @fmt(self.error&, "type '%' must be declared before use as arg/par", name);
                return();
            });
            variable = self.parse_ref();
            abi_op
        } else {
            kk := self.input[self.cursor];
            self.cursor += 1;
            variable = self.parse_ref();
            o := base_op;
            k = or cls_from_char(kk) {
                if kk == ".".ascii() && self.eat("..") {
                    @debug_assert(variable == QbeNull);
                    if is_par {
                        self.f.vararg = true;
                    } else {
                        self.f.emit(.argv, .Kw, QbeNull, QbeNull, QbeNull);
                    };
                    self.eat(",");
                    continue();
                };
                if kk == "e".ascii() && self.eat("nv") {
                    @debug_assert(variable == QbeNull, "should have tried to parse_ref('nv')");
                    variable = self.parse_ref();
                    o = if(is_par, => .pare, => .arge);
                    .Kl
                } else {
                    if !kk.is_ascii_digit() {
                        @fmt(self.error&, "invalid ref cls char=%", kk);
                        return();
                    };
                    self.replacements&.push(key = kk.zext() - "0".char(), r = variable);
                    .Kw
                }
            };
            o
        };
        if variable == QbeNull {
            @fmt(self.error&, "args expected (:type or cls)(ref)");
            return();
        };
        self.eat(",");
        if is_par {
            self.f.emit(o, k, variable, type, QbeNull);
        } else {
            if type == QbeNull {
                type = variable;
            };
            self.f.emit(o, k, QbeNull, type, variable);
        };
    };
    
    if !self.eat(")") {
        @fmt(self.error&, "expected ')' after function args");
        return()
    };
}

fn parse_line(self: *QParseCtx) bool = {
    self.skip_lines();
    if self.check("}") || self.cursor >= self.input.len {
        return(false);
    };
    
    if self.parse_blk() { blk | 
        if self.f.nblk == 0 {
            self.f.start = blk;
        } else {
            self.end_block(Some = blk);
        };
        self.blk = blk;
        self.f.nblk += 1;
        self.parse_line();
    };
    self.parse_inst();
    if self.error.len != 0 {
        @fmt(self.error&, " on line %\n", self.line);
        return(false);
    };
    true
}

fn end_block(self: *QParseCtx, new_blk: ?*Qbe.Blk) void = {
    if self.blk.is_null() {
        @fmt(self.error&, "function % has no blocks", self.f.name());
        return()
    };
    if self.blk.jmp.type == .Jxxx {
        if new_blk { blk |
            // fallthrough to the next block
            self.blk.jmp.type = .jmp;
            self.blk.s1 = blk;
        } else { 
            if !self.allow_unterminated_block {
                @fmt(self.error&, "block % has not been terminated", self.blk.name());
                return()
            };
        };
    };
    if new_blk { bb | 
        self.blk.link = bb;  // direction matters!
    };
    self.f.copy_instructions_from_scratch_reversed_which_means_forwards(self.blk);
}

fn parse_inst(self: *QParseCtx) void = {
    to := QbeNull;
    k := "w".ascii();
    return_type_for_call := QbeNull;
    if self.check("%") {
        to = self.parse_ref();
        if !self.eat("=") {
            @fmt(self.error&, "Missing equals sign");
            return();
        };
        k = self.input[self.cursor];
        self.cursor += 1;
        if k == ":".ascii() {
            name := self.eat_word();
            return_type_for_call = TYPE(or self.find_type(name) {
                @fmt(self.error&, "type '%' must be declared before use as call return class", name);
                return();
            });
            k = "l".ascii();
        } else {
            // in addition to wlsd we allow numbers (used as argument indices, see meta/template.fr).
            if !"wlsd".contains(k&) && !k.is_ascii_digit() {
                @fmt(self.error&, "Missing operation class character after '='");
                return();
            };
        }
    };
    self.skip_blanks();
    n := self.eat_word();
    arg0 := self.parse_ref();
    n = @switch(n) {
        @case("call") => {
            self.f.leaf = false;
            if self.check("(") { // syntax sugar for call
                self.parse_args(false);
            }; // else we allow you to specify a placeholder for the RCall
            "call"  
        };
        @case("blit") => {
            self.eat(",");
            arg1 := self.parse_ref();
            self.eat(",");
            arg2 := self.parse_ref();
            self.f.emit(.blit0, .Kw, QbeNull, arg0, arg1);
            if self.f.get_int(arg2) { size |
                self.f.emit(.blit1, .Kw, QbeNull, INT(size), QbeNull);
            } else {
                @fmt(self.error&, "blit third argument must be interger literal");  
            };
            return()
        };
        @case("phi") => return(self.parse_phi(to, k));
        @case("loadw") => "loadsw";
        @case("loadl") => "load";
        @case("loads") => "load";
        @case("loadd") => "load";
        @case("") => {
            // TODO: this feels loopy on invalid input
            self.skip_lines();
            return()
        };
        @default => n;
    };
    
    if from_name(Qbe.O, n) { o | 
        arg1 := if(self.eat(","), => self.parse_ref(), => QbeNull);
        k := or cls_from_char(k) {
            self.replacements&.push(key = k.zext() - "0".char(), r = to);
            .Kw
        };
        if to != QbeNull {
            self.f.get_temporary(to)[].cls = k;  // :PatchCls
        };
        if is_alloc(o) && rtype(arg0) != .RCon {
            self.f.dynalloc = true;
        };
        if return_type_for_call != QbeNull {
            if o != .call {
                @fmt(self.error&, "ref =:TypeName can only be used with call instruction but found '%'", o.get_name());
            };
            arg1 = return_type_for_call;
        };
        self.f.emit(o, k, to, arg0, arg1);
        return();
    };
    
    ::if(Qbe.J);
    j: Qbe.J = if n == "ret" {
        self.ret
    } else {
        ::?Qbe.J;
        or from_name(Qbe.J, n) {
            @fmt(self.error&, "unknown operation keyword '%'", n);
            return()
        }
    };
    if self.blk.jmp.type != .Jxxx {
        @fmt(self.error&, "block % has already been terminated", self.blk.name());
        return()
    };
    self.blk.jmp.type = j;
    self.blk.jmp.arg = arg0;
    self.eat(",");
    if self.parse_blk() { b | 
        self.blk.s1 = b;
        self.eat(",");
        if self.parse_blk() { b | 
            self.blk.s2 = b;
        };
    };
}

fn parse_phi(self: *QParseCtx, to: Qbe.Ref, k: u8) void = {
    // example: `%s  =w phi @start 0, @loop %s1`
    phi := self.out.box_zeroed(Qbe.Phi);
    phi.arg = new(0);
    phi.blk = new(0);
    phi.to = to; // TODO: require non-null;
    ::?Qbe.Cls;
    phi.cls = or cls_from_char(k) {
        self.replacements&.push(key = k.zext() - "0".char(), r = to);
        .Kw
    };
    while => self.parse_blk() { blk | 
        phi.narg += 1;
        phi.arg&.grow(phi.narg.zext());
        phi.blk&.grow(phi.narg.zext());
        arg := self.parse_ref();
        if arg == QbeNull {
            @fmt(self.error&, "phi instruction requires argument for block '%'", blk.name());
            return();
        };
        phi.arg[phi.narg.zext() - 1] = arg;
        phi.blk[phi.narg.zext() - 1] = blk;
        self.eat(",");
    };
    phi.link = self.blk.phi;
    self.blk.phi = phi;
    return();
}

// TODO: sb,ub,sh,uh for apple abi
fn cls_from_char(c: u8) ?Qbe.Cls = {
    (Some = @switch(c) {
        @case("w".ascii()) => .Kw;
        @case("l".ascii()) => .Kl;
        @case("s".ascii()) => .Ks;
        @case("d".ascii()) => .Kd;
        @default => return(.None);
    })
}

fn parse_ref(self: *QParseCtx) Qbe.Ref = {
    self.skip_blanks();
    if self.eat("%") {  // tmp
        name := if self.input[self.cursor].is_ascii_digit() {
            // we allow integer names for referncing template arguments
            self.cursor += 1;
            self.input.slice(self.cursor - 1, self.cursor)
        } else {
            self.eat_word()
        };
        if self.tmps&.get(name) { t |
            return(t);
        };
        // TODO: don't add the number suffix.
        t := self.f.newtmp(name, .Kw);  // :PatchCls
        self.tmps&.insert(name, t);
        return(t);
    };
    thread := self.eat("thread");
    if self.eat("$") {  // global
        name := self.eat_word(); 
        con: Qbe.Con = (sym = (id = self.f.globals.intern(name), type = @if(thread, .SThr, .SGlo)), type = .CAddr, bits = (i = 0));
        return(self.f.newcon(con&));
    };
    if thread {
        @fmt(self.error&, "prefix 'thread' can only be used on an $address");
        return(QbeNull);
    };
    
    if self.eat(":") {
        name := self.eat_word(); 
        @fmt(self.error&, "expected ref but found type :%", name);
        return(QbeNull);
    };
    if self.eat("[") { 
        panic("TODO: memory");
    };
    
    is_float := self.eat("s_");
    double := self.eat("d_");
    slot := self.eat("S");
    int := self.eat("I");
    negative := self.eat("-");
    if !self.input[self.cursor].is_ascii_digit() {
        if int || is_float || double || slot || negative {
            @fmt(self.error&, "expected a number because of the prefix");
            if self.eat(".") {
                @fmt(self.error&, ". TODO: does qbe allow leading dot?");
            };
            return(QbeNull);
        };
        // This may or may not be an error depending on the context
        return(QbeNull);
    };
    
    i := self.parse_number();
    if is_float || double {
        if int || slot {
            @fmt(self.error&, "cannot have I/S prefix with d_/s_");
            return(QbeNull);
        };
        if is_float == double {
            @fmt(self.error&, "both prefixes 'd_' and 's_'");
            return(QbeNull);
        };
        i := i.float();
        if self.eat(".") {
            start := self.cursor;
            fraction := self.parse_number();
            i += fraction.float() / pow(10, self.cursor - start).float();
        };
        i *= @if(negative, -1.0, 1.0);
        i: i64 = if(is_float, => i.cast().bitcast().zext(), => i.bitcast());
        c := self.f.getcon(i);
        self.f.get_constant(c)[].flt = if(is_float, => 1, => 2);
        return(c);
    };
    if self.eat(".") {
        @fmt(self.error&, "found '.' in number without prefix d_ or s_");
        return(QbeNull);
    };
    i *= @if(negative, -1, 1);
    if int && int == slot {
        @fmt(self.error&, "number with both prefix S and I");
        return(QbeNull);
    };
    if(slot, => return(SLOT(i)));  // note: you have to do the /4 yourself
    if(int, => return(INT(i)));
    self.f.getcon(i)
}

fn parse_blk(self: *QParseCtx) ?*Qbe.Blk = {
    if(!self.eat("@"), => return(.None));
    name := self.eat_word();
    if self.blocks&.get(name) { b | 
        return(Some = b);
    };
    // TODO: check that all referenced blocks get defined.
    b := self.out.box_zeroed(Qbe.Blk);
    @if(TRACK_IR_NAMES) b.name&.items().slice(0, name.len).copy_from(name);  // :UnacceptablePanic
    self.blocks&.insert(name, b);
    (Some = b)
}

fn parse_number(self: *QParseCtx) i64 = {
    v := 0;
    while => self.input[self.cursor].is_ascii_digit() {
        v *= 10;
        v += self.input[self.cursor].zext() - "0".char();
        self.cursor += 1;
    };
    v
}

// example: `data $s = { l $pointer, b "hello", b 0 }`
fn parse_data(self: *QParseCtx, export: bool, thread: bool, yield: @FnPtr(*Qbe.Dat) void) Result(void, Str) = {
    if !self.eat("$") {
        return(Err = "expected '$name' after 'data'");
    };
    name := self.eat_word();
    if !self.eat("=") {
        return(Err = "expected '=' after 'data $name'");
    };
    dat := Qbe.Dat.zeroed();
    lnk: Qbe.Lnk = (export = export, thread = thread, id = self.f.globals.intern(name));
    if self.eat("align") {
        // :NeedFunctionInitForData
        c := self.parse_ref();
        if rtype(c) != .RCon {
            return(Err = "expect number after 'data $name = align'");
        };
        c := self.f.get_constant(c);
        if c.type != .CBits {
            return(Err = "expect number after 'data $name = align'");
        };
        lnk.align = c.bits.i.trunc();
    };
    dat.type = .DStart;
    dat.name = maybe_borrow_cstr(name, temp()); // :SLOW
    dat.lnk = lnk&;
    yield(dat&);
    self.skip_lines();
    if !self.eat("{") {
        return(Err = "expected '{' to begin data");
    };
    self.skip_lines();
    had_comma := true;
    // TODO: this gets confused if the file doesn't end in a new line. 
    while => self.cursor < self.input.len && !self.check("}") {
        dat.is_ref = false;
        dat.is_str = false;
        dat.has_quotes_and_escapes = false;
        dat.u.str = Str.zeroed();
        // allow { b 1 2 3 } instead of { b 1, b 2, b 3 }
        if had_comma {
            dat.type = @switch(self.input[self.cursor]) {
                @case("b".ascii()) => .DB;
                @case("l".ascii()) => .DL;
                @case("z".ascii()) => .DZ;
                @case("h".ascii()) => .DH;
                @case("w".ascii()) => .DW;
                @default => return(Err = items(@format("expected b/h/w/l/z prefix for data entry in %", name) temp()));
            };
            self.cursor += 1;
        };
        self.skip_blanks();
        if self.input[self.cursor] == "\"".ascii() {
            start := self.cursor;
            self.cursor += 1;
            // TODO: bounds
            while => self.input[self.cursor] != "\"".ascii() {
                if self.input[self.cursor] == "\\".ascii() {
                    self.cursor += 1;
                };
                self.cursor += 1;
            };
            self.cursor += 1;
            dat.u.str = self.input.slice(start, self.cursor);
            // TODO: remove this when I'm fully done using qbe's text asm output
            dat.u.str.ptr = { x := maybe_borrow_cstr(dat.u.str, temp()); x.ptr };
            dat.is_str = true;
            dat.has_quotes_and_escapes = true;
        } else {
            // :NeedFunctionInitForData
            r := self.parse_ref();
            if rtype(r) != .RCon {
                return(Err = "expected \"string\" or $variable or numeric constant for data entry");
            };
            c := self.f.get_constant(r);
            @match(c.type) {
                fn CBits() => {
                    dat.u.num = c.bits.i;
                }
                fn CAddr() => {
                    dat.is_ref = true;
                    info := self.f.globals.get_symbol_info(c.sym.id);
                    dat.u.ref.name = (ptr = as_ptr(@tfmt("%\0", info.name))); // :SLOW
                    dat.u.ref.off = c.bits.i;
                }
                @default => return(Err = "unreachable constant");
            };
        };
        yield(dat&);
        had_comma = self.eat(",");
        self.skip_lines();
    };
    self.eat(",");
    dat.type = .DEnd;
    yield(dat&);
    if !self.eat("}") {
        return(Err = "expected '}' to end data");
    };
    
    .Ok
}

fn parse_type(self: *QParseCtx) Result(void, Str) = {
    if !self.eat(":") {
        return(Err = "expected ':' before type name");
    };
    name := self.eat_word();
    if !self.eat("=") {
        return(Err = "expected '=' after :TypeName");
    };
    
    m := self.f.globals;
    t := m.number_of_types;
    m.number_of_types += 1;
    m.types.grow(m.number_of_types);
    typ := m.types.index(t);
    typ[] = Qbe.Typ.zeroed();  // :nulltermminator
    
    typ.align_log2 = -1;
    if self.eat("align") {
        self.skip_blanks();
        i := self.parse_number().abs();
        while => i != 0 {
            i /= 2;
            typ.align_log2 += 1;
        };
    };
    typ.fields = new_long_life(0);
    if !self.eat("{") {
        return(Err = "expected '{' to begin type declaration");
    };
    self.skip_blanks();
    if self.input[self.cursor].is_ascii_digit() { // TODO: this can only go at the top level i think
        size := self.parse_number(); // TODO: allow hex, etc. 
        if !self.eat("}") {
            return(Err = "expected '}' to end type declaration");
        };
        typ.is_dark = true;
        typ.size = size;
    } else {
        field_count := 0;
        if self.check("{") {
            typ.is_union = true;
            while => !self.eat("}") { // TODO: bounds
                self.eat("{");
                @try(self.parse_type_fields(typ, field_count&)) return;
                self.eat(",");
            };
        } else {
            @try(self.parse_type_fields(typ, field_count&)) return;
        };
    };
    
    @debug_assert_eq(t + 1, m.number_of_types, "array can't resize because types cannot be nested");
    // write the name at the end so types can't refer to themselves
    @if(TRACK_IR_NAMES) typ.name&.items().slice(0, name.len).copy_from(name);  // :UnacceptablePanic :nulltermminator
    self.types&.insert(name, t);
    // TODO: bounds for null terminator
    .Ok
}

fn parse_type_fields(self: *QParseCtx, typ: *Qbe.Typ, field_count: *i64) Result(void, Str) = {
    self.skip_blanks();
    
    m := self.f.globals;
    my_align: i64 = typ.align_log2.intcast();
    my_size := 0;
    while => self.cursor < self.input.len && !self.check("}") {
        value_to_put_in_len_field := -1;
        c := self.input[self.cursor];
        self.cursor += 1;
        (tag: Qbe.FieldType, size: i64, align: i64) := @switch(c) {
            @case(":".ascii()) => {
                n := self.eat_word();
                value_to_put_in_len_field = (or self.find_type(n) {
                    return(Err = "type name must be declared before useas field type")
                });
                inner := m.types.index(value_to_put_in_len_field);
                (.FTyp, inner.size, inner.align_log2.intcast())
            };
            @case("{".ascii()) => return(Err = "types cannot be nested inline. \nuse seperate declarations and refer to them by name. \nsorry that this is a waste of your time.");
            @case("l".ascii()) => (.Fl, 8, 3);
            @case("w".ascii()) => (.Fw, 4, 2);
            @case("h".ascii()) => (.Fh, 2, 1);
            @case("b".ascii()) => (.Fb, 1, 0);
            @case("d".ascii()) => (.Fd, 8, 3);
            @case("s".ascii()) => (.Fs, 4, 2);
            @default => return(Err = "invalid character to begin field type");
        };
        
        my_align = my_align.max(align);
        align = 1.shift_left(align) - 1;
        align = bit_and(my_size + align, align.bit_not()) - my_size;
        if align != 0 {
            /* padding */
            field_count[] += 1;
            typ.fields&.grow(field_count[]);
            f := typ.fields.index(field_count[] - 1);
            f.type = .FPad;
            f.len = align.trunc();
        };
        self.skip_blanks();
        count := if(self.input[self.cursor].is_ascii_digit(), => self.parse_number(), => 1);
        my_size += align + count * size;
        if tag == .FTyp {
            size = value_to_put_in_len_field;
        };
        typ.fields&.grow(field_count[] + count);
        range(0, count) { _ |
            f2 := typ.fields.index(field_count[]);
            field_count[] += 1;
            f2.len = size.trunc();
            f2.type = tag;
        };
        self.eat(",");
    };
    if !self.eat("}") {
        return(Err = "expected '}' to end type declaration");
    };
    align := 1.shift_left(my_align);
    my_size = my_size.max(typ.size);
    typ.size = bit_and(my_size + align - 1, -align);;
    typ.align_log2 = my_align.intcast();
    typ.fields&.grow(field_count[] + 1);
    typ.fields[field_count[]].type = .FEnd;
    typ.nunion += 1;
    
    .Ok
}

fn find_type(self: *QParseCtx, n: Str) ?i64 = {
    self.types&.get(n)
}

fn skip_blanks(self: *QParseCtx) void = {
    while => self.cursor < self.input.len && self.input[self.cursor].is_ascii_whitespace() && self.input[self.cursor] != "\n".ascii() {
        self.cursor += 1;
    };
}

// we have a little self respect and fold away the loop at comptime when the string is one long.
fn eat(self: *QParseCtx, $s: Str) bool = {
    self.skip_blanks();
    if(self.cursor + s.len() > self.input.len, => return(false));
    @if(@run s.len() == 1, {
        c := self.input[self.cursor] == @run s[0];
        self.cursor += c.int();
        c
    }, {
        cursor := self.cursor;
        for s { c | 
            if(c != self.input[cursor], => return(false));
            cursor += 1;
        };
        self.cursor = cursor;
        true
    })
}

fn check(self: *QParseCtx, s: Str) bool = {
    self.skip_blanks();
    if(self.cursor + s.len >= self.input.len, => return(false));
    cursor := self.cursor;
    for s { c | 
        if(c != self.input[cursor], => return(false));
        cursor += 1;
    };
    true
}

fn allow_in_identifier(c: u8) bool = {
    c.is_ascii_alpha() || c.is_ascii_digit() || c == "_".ascii() || c == ".".ascii() 
}

// TODO: bounds
fn eat_word(self: *QParseCtx) Str = {
    self.skip_blanks();
    start := self.cursor;
    while => self.cursor < self.input.len && self.input[self.cursor].allow_in_identifier() {
        self.cursor += 1;
    };
    self.input.slice(start, self.cursor)
}

fn default_init(f: *Qbe.Fn, m: *QbeModule) void = {
    f.globals = m;
    f.tmp = new(Qbe.Tmp0);
    f.con = new(FIXED_CONST_COUNT);
    f.mem = new(0);
    f.retty = -1;
    ::assert_eq(Qbe.Ref);
    assert_eq(f.getcon(0xdeaddead), QbeUndef);
    assert_eq(f.getcon(0), QbeConZero);
    assert_eq(f.ncon.zext(), FIXED_CONST_COUNT);
    // Add temporaries representing physical registers.
    // For the comptime usecase, the is_float will be wrong for some targets but that's fine becuase register numbers will just be moved to the real function, 
    
    t := f.globals.target;
    range(0, Qbe.Tmp0) { i |
        is_float := t.fpr0 <= i.intcast() && i.intcast() < (t.fpr0 + t.nfpr);
   	    assert_eq(f.newtmp("r", if(is_float, => .Kd, => .Kl)), TMP(i));
    };
    assert_eq(f.ntmp.zext(), Qbe.Tmp0);
}
