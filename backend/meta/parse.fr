//!
//! This parses the text format used by QBE (https://c9x.me/compile/doc/il-v1.2.html).
//! The Franca compiler does not use this! It generates the IR in memory. Instead this is used for,
//! - Loading small IR test programs without involving the franca front end.
//! - At comptime to generate code when large substitutions are needed. (See meta/template.fr).
//!   This is common for isel/abi stuff and is much more readable than building it up backwards with `emit` calls.
//!   This use case requires being more permisive than Qbe's parser: allowing constructs only added in later passes (like RSlot).
//! So while it's embrassing that it's slow, it's not a huge deal yet since it mostly runs on programs that are <<< 100 lines long. 
//! If I have to write many more of these, maybe I should reconsider doing something about parser generators. 
//!
//! Syntax Extensions:
//! - R00, S00, I00 for register, RSlot, RInt so you can parse back the output of later passes. 
//! - parse back internal ops (including par*, arg*, ret*) because ^
//! - %00 and =00 for placeholders when using @emit_instructions
//! - { p 00 } for padding fields in types (not useful but seems like a bad idea to have dump_type hide it)
//! - Removed: thread and section keywords 
//! - allow hexadecimal integer constants (0x prefix)
//! 

// TODO: be stricter about checking for invalid input
// TODO: `%.6 =s mul s_0x1p-1, s_0x1.fffffe091ff3dp+127`

Replacement :: @struct(key: i64, r: Qbe.Ref);

QParseCtx :: @struct(
    blocks: HashMap(Str, *Qbe.Blk),
    tmps: HashMap(Str, Qbe.Ref),
    replacements: List(Replacement),
    error: List(u8),
    input: Str,
    cursor := 0,
    f: *Qbe.Fn,
    line := 0,
    out: Alloc,
    blk := Qbe.Blk.ptr_from_int(0),
    types: HashMap(Str, i64),
    m: *QbeModule,
    c_comments: List(u8),
    ret := Qbe.J.Jxxx,
    collect_c_comments := false,
    // TODO: use this for reporting more errors that are only allowed when used as a template. 
    allow_unterminated_block := false, // for comptime templates
);

// :ThreadSafety
// this is not thread safe because QParseCtx.types uses QbeModule.forever. 
// if you want to use this threaded change init() (but you can't use temp() unless you also reset_temporary_storage in this loop). 
// but it doesn't really matter because if you care enough about performace to parse and compile on seperate threads, 
// you will want to generate the ir in memory instead of uselessly writing out text and parsing it back again. 
//
// TODO: this is more useful if you let them pass a userdata pointer but for now i want to match the qbe interface. 
fn parse_top_level(m: *QbeModule, src: Str, yield_data: @FnPtr(m: *Qbe.Module, d: Dat2) void, yield_func: @FnPtr(*Qbe.Fn) void, collect_c_comments: bool) Result(List(u8), Str) = {
    self: QParseCtx = init(m, src);
    self.collect_c_comments = collect_c_comments;
    self := self&;
    self.f.default_init(m);  // :NeedFunctionInitForData
    
    mark := mark_temporary_storage();
    loop {
        continue :: local_return;
        reset_temporary_storage(mark);
        
        self.skip_lines();
        
        export := self.eat("export");
        self.skip_lines();
        
        if self.eat("function") {
            self.blocks = init(temp());
            self.tmps = init(temp());
            self.f = temp().box_uninit(Qbe.Fn);  // TODO: shouldn't really need to do this? but debug_stomp_after breaks otherwise. 
            self.f.default_init(m);
            self.blk = Qbe.Blk.ptr_from_int(0);
            
            self.skip_lines();
            self.f.reset_scratch();
            parse_header(self, export);
            if self.error.len != 0 {
                @fmt(self.error&, " near line %", self.line);
                return(Err = self.error.items());
            };
            self.skip_lines();
            if !self.eat("{") {
                return(Err = "expected '{' before function body");
            };
            f, replacements := @try(parse_body(self)) return;
            if replacements.len != 0 {
                return(Err = "numeric cls placeholder is only allowed for function fragment templates (ie =0 instead of =w)");
            };
            if !self.eat("}") {
                return(Err = "expected '}' after function body");
            };
            yield_func(f);  // might reset temp
            continue();
        };
        if self.eat("type") {
            self.m.types_mutex&.lock();
            @try(self.parse_type()) return;
            self.m.types_mutex&.unlock();
            continue();
        };
        thread := self.eat("thread");
        if self.eat("data") {
            if thread { 
                return(Err = "I don't support thread locals. use real qbe instead. sorry");
            };
            self.f = temp().box_uninit(Qbe.Fn);  // TODO: shouldn't really need to do this? but debug_stomp_after breaks otherwise. 
            self.f.default_init(m);
            
            @match(self.parse_data(export)) {
                fn Err(msg) => {
                    @fmt(self.error&, "% near line %", msg, self.line);
                    return(Err = self.error.items());
                };
                fn Ok(dat) => yield_data(m, dat);
            };
            continue();
        };
        if self.eat("section") {  // not implemented! 
            @try(self.skip_section_directive()) return;
            continue();
        };
        if self.eat("dbgfile") {  // not implemented!
            self.eat_line();
            continue();
        };
        
        if self.cursor >= self.input.len {
            return(Ok = self.c_comments);
        };
        if self.skip_lines() == 1 && self.cursor < self.input.len {
            return(Err = @tfmt("expected new line. near line %\n", self.line));
        };
    };
    unreachable()
}

fn skip_section_directive(self: *QParseCtx) Result(void, Str) = {
    // I don't support the 'section` keyword but i want to be able to compile hare programs. 
    // they use the sections but it's just for --gc-sections which i don't care about. 
    // so just ignore them for now. 
    self.skip_blanks();
    if self.input[self.cursor] == "\"".ascii() {
        _ := @try(self.consume_string()) return;
    };
    self.skip_blanks();
    if self.input[self.cursor] == "\"".ascii() {
        _ := @try(self.consume_string()) return;
    };
    self.skip_lines();
    .Ok
}

fn skip_lines(self: *QParseCtx) i64 = {
    self.skip_blanks();
    n := 0;
    dowhile {
        n += 1;
        self.skip_blanks();
        if self.eat("#") {  // comment
            if self.collect_c_comments && self.eat(">>> driver") {
                self.collect_c_comment();
            } else {
                self.eat_line();
            }
        };
        self.eat("\n") && self.cursor < self.input.len
    };
    self.line += n - 1;
    self.skip_blanks();
    n
}

fn eat_line(self: *QParseCtx) void #inline = {
    while => !self.check("\n") && self.cursor < self.input.len {
        self.cursor += 1;
    };
}

fn collect_c_comment(self: *QParseCtx) void = {
    dowhile {
        start := self.cursor;
        self.eat_line();
        self.cursor += int(self.cursor < self.input.len);
        self.c_comments&.push_all(self.input.slice(start, self.cursor));
        
        self.eat("#") && !self.eat("<<<")
    }
}

fn init(m: *QbeModule, src: Str) QParseCtx = (
    blocks = init(temp()),
    tmps = init(temp()),
    input = src,
    error = list(temp()),
    replacements = list(temp()), // only need this for cls 
    f = temp().box_zeroed(Qbe.Fn),
    out = temp(),
    types = init(m.forever&.borrow()), // see :ThreadSafety comment above!
    m = m,
    c_comments = list(general_allocator()),
);

fn parse_body(self: *QParseCtx) Result(Ty(*Qbe.Fn, []Replacement), Str) = {
    dowhile(=> self.parse_line());
    self.end_block(.None);
    if self.error.len != 0 {
        return(Err = self.error.items());
    };
    (Ok = (self.f, self.replacements.items()))
}

fn parse_header(self: *QParseCtx, export: bool) void = {
    self.skip_blanks();
    if self.eat(":") {
        name := self.eat_word();
        type := or self.find_type(name) {
            @fmt(self.error&, "type '%' must be declared before use as function return class", name);
            return()
        };
        self.ret = .retc;
        self.f.retty = TYPE(type);
        self.f.ret_cls = .Ke;
    } else {
        if !self.check("$") {
            break :: local_return;
            kk := self.input[self.cursor];
            self.cursor += 1;
            if cls_from_char(kk) { k |
                self.ret = k.retk();
                self.f.ret_cls = k;
                break();
            };
            o := Qbe.O.par;
            @if_else {
                @if(kk == "u".ascii()) => self.eat_b_or_h(true, o&, .None);
                @if(kk == "s".ascii()) => self.eat_b_or_h(false, o&, .None);
                @else => {
                    @fmt(self.error&, "invalid cls char");
                    return()
                };
            };
            self.ret = @as(Qbe.J) @as(i32) Qbe.J.retsb.raw() + o.raw() - Qbe.O.par.raw();
            self.f.ret_cls = .Kw;
        } else {
            self.ret = .ret0;
            self.f.ret_cls = .Kx;
        };
        self.f.retty = QbeNull;
    };
    self.skip_blanks();
    if !self.eat("$") {
        @fmt(self.error&, "expected function name");
        return()
    };
    name := self.eat_word();
    self.f.lnk.export = export;
    self.f.lnk.id = self.f.globals.intern(name);
    self.f.leaf = true;
    self.parse_args(true);
}

fn parse_args(self: *QParseCtx, is_par: bool) void = {
    self.skip_blanks();
    ::if(Qbe.O);
    base_op := if(is_par, => Qbe.O.par,  => .arg);
    abi_op  := if(is_par, => Qbe.O.parc, => .argc);
    if !self.eat("(") {
        @fmt(self.error&, "expected '(' before function args");
        return()
    };
    if(self.eat(")"), => return()); // no args
    while => !self.check(")") && self.cursor < self.input.len {
        continue :: local_return;
        k := Qbe.Cls.Kl;
        type := QbeNull;
        variable := QbeNull;
        o := if self.eat(":") {
            name := self.eat_word();
            type = TYPE(or self.find_type(name) {
                @fmt(self.error&, "type '%' must be declared before use as arg/par", name);
                return();
            });
            variable = self.parse_ref();
            abi_op
        } else {
            kk := self.input[self.cursor];
            self.cursor += 1;
            variable = self.parse_ref();
            o := base_op;
            k = or cls_from_char(kk) {  
                @if_else {
                @if(kk == ".".ascii()) => {
                    if !self.eat("..") {
                        @fmt(self.error&, "expected '...' in arg");
                        return();
                    };
                    @debug_assert(variable == QbeNull);
                    if is_par {
                        self.f.vararg = true;
                    } else {
                        self.f.emit(.argv, .Kw, QbeNull, QbeNull, QbeNull);
                    };
                    self.eat(",");
                    continue();
                };
                @if(kk == "e".ascii()) => {
                    if !self.eat("nv") {
                        @fmt(self.error&, "expected 'env' in arg");
                        return();
                    };
                    @debug_assert(variable == QbeNull, "should have tried to parse_ref('nv')");
                    variable = self.parse_ref();
                    o = if(is_par, => .pare, => .arge);
                    .Kl
                };
                @if(kk.is_ascii_digit()) => {
                    // placeholder for @emit_instructions
                    self.replacements&.push(key = kk.zext() - "0".char(), r = variable);
                    .Kw
                };
                @if(kk == "u".ascii()) => self.eat_b_or_h(true, o&, (Some = variable&));
                @if(kk == "s".ascii()) => self.eat_b_or_h(false, o&, (Some = variable&));
                @else => {
                    @fmt(self.error&, "invalid ref cls char=%", kk);
                    return() 
                };
                }
            };
            o
        };
        if variable == QbeNull {
            @fmt(self.error&, "args expected (:type or cls)(ref)");
            return();
        };
        self.eat(",");
        if is_par {
            self.f.get_temporary(variable)[].cls = k;  // :PatchCls TODO?
            self.f.emit(o, k, variable, type, QbeNull);
        } else {
            if type == QbeNull {
                type = variable;
                variable = QbeNull;
            };
            self.f.emit(o, k, QbeNull, type, variable);
        };
    };
    
    if !self.eat(")") {
        @fmt(self.error&, "expected ')' after function args");
        return()
    };
}

fn eat_b_or_h(self: *QParseCtx, u: bool, o: *Qbe.O, variable: ?*Qbe.Ref) Qbe.Cls = {
    b := self.eat("b");
    h := !b && self.eat("h");
    if !b && !h {
        @fmt(self.error&, "expected ub/uh/sb/sh in arg");
        return(.Ke);
    };
    
    o[] = @as(Qbe.O) @as(i32) ((@as(i32) o[]) + u.int().intcast() + @if(b, 1, 3));
    if variable { variable |
        variable[] = self.parse_ref();
    };
    .Kw
}

fn parse_line(self: *QParseCtx) bool = {
    self.skip_lines();
    if self.check("}") || self.cursor >= self.input.len {
        return(false);
    };
    
    if self.parse_blk() { blk | 
        if self.f.nblk == 0 {
            self.f.start = blk;
        } else {
            self.end_block(Some = blk);
        };
        self.blk = blk;
        blk.id = self.f.nblk;
        self.f.nblk += 1;
        self.parse_line();
    };
    self.parse_inst();
    if self.error.len != 0 {
        @fmt(self.error&, " near line %\n", self.line);
        return(false);
    };
    true
}

fn end_block(self: *QParseCtx, new_blk: ?*Qbe.Blk) void = {
    ::ptr_utils(Qbe.Blk);
    if self.blk.is_null() {
        @fmt(self.error&, "function % has no blocks", self.f.name());
        return()
    };
    ::enum(Qbe.J);
    if self.blk.jmp.type == .Jxxx {
        if new_blk { blk |
            // fallthrough to the next block
            self.blk.jmp.type = .jmp;
            self.blk.s1 = blk;
        } else { 
            if !self.allow_unterminated_block {
                if self.error.len == 0 {
                    @fmt(self.error&, "block % has not been terminated", self.blk.name());
                };
                return()
            };
        };
    };
    if new_blk { bb | 
        self.blk.link = bb;  // direction matters!
    };
    self.f.copy_instructions_from_scratch_reversed_which_means_forwards(self.blk);
}

fn parse_inst(self: *QParseCtx) void = {
    if self.blk.is_null() {
        @fmt(self.error&, "missing block declaration");
        return();
    };
    to := QbeNull;
    k := "w".ascii();
    return_type_for_call := QbeNull;
    if self.check("%") || self.check("R") {
        to = self.parse_ref();
        if !self.eat("=") {
            @fmt(self.error&, "Missing equals sign");
            return();
        };
        k = self.input[self.cursor];
        self.cursor += 1;
        if k == ":".ascii() {
            name := self.eat_word();
            return_type_for_call = TYPE(or self.find_type(name) {
                @fmt(self.error&, "type '%' must be declared before use as call return class", name);
                return();
            });
            k = "l".ascii();
        } else {
            // in addition to wlsd we allow numbers (used as argument indices, see meta/template.fr).
            if !"wlsd".contains(k&) && !k.is_ascii_digit() {
                @fmt(self.error&, "Missing operation class character after '='");
                return();
            };
        }
    };
    self.skip_blanks();
    n := self.eat_word();
    arg0 := self.parse_ref();
    n = @switch(n) {
        @case("blit") => {
            self.eat(",");
            arg1 := self.parse_ref();
            self.eat(",");
            arg2 := self.parse_ref();
            self.f.emit(.blit0, .Kw, QbeNull, arg0, arg1);
            if self.f.get_int(arg2) { size |
                self.f.emit(.blit1, .Kw, QbeNull, INT(size), QbeNull);
            } else {
                @fmt(self.error&, "blit third argument must be interger literal");  
            };
            return()
        };
        @case("phi") => return(self.parse_phi(to, k));
        @case("loadw") => "loadsw";
        @case("loadl") => "load";
        @case("loads") => "load";
        @case("loadd") => "load";
        @case("") => {
            // TODO: this feels loopy on invalid input
            self.skip_lines();
            return()
        };
        @default => {
            if n == "call" {
                self.f.leaf = false;
                if self.check("(") { // syntax sugar for call
                    self.parse_args(false);
                }; // else we allow you to specify a placeholder for the RCall
            };
            if n.starts_with("arg") {
                @assert(n.len == 4, "expected 'argK' found '%'", n);
                k = n[3];
                if "ce".contains(k) {
                    k = "l".ascii();
                } else {
                    @assert("wlsd".contains(k), "expected 'argK' found '%'", n);
                };
                n = "arg";
            };
            n
        };
    };
    
    if from_name(Qbe.O, n) { o | 
        ::if(Qbe.Ref);
        arg1 := if(self.eat(","), => self.parse_ref(), => QbeNull);
        k := or cls_from_char(k) {
            self.replacements&.push(key = k.zext() - "0".char(), r = to);
            .Kw
        };
        if to != QbeNull {
            self.f.get_temporary(to)[].cls = k;  // :PatchCls
        };
        if is_alloc(o) && rtype(arg0) != .RCon {
            self.f.dynalloc = true;
        };
        if return_type_for_call != QbeNull {
            if o != .call {
                @fmt(self.error&, "ref =:TypeName can only be used with call instruction but found '%'", o);
            };
            arg1 = return_type_for_call;
        };
        self.f.emit(o, k, to, arg0, arg1);
        return();
    };
    
    ::if(Qbe.J);
    j: Qbe.J = if n == "ret" {
        self.ret
    } else {
        ::?Qbe.J;
        or from_name(Qbe.J, n) {
            @fmt(self.error&, "unknown operation keyword '%'", n);
            return()
        }
    };
    if self.blk.jmp.type != .Jxxx {
        @fmt(self.error&, "block % has already been terminated", self.blk.name());
        return()
    };
    self.blk.jmp.type = j;
    self.blk.jmp.arg = arg0;
    self.eat(",");
    if j == .switch {
        if arg0 != QbeNull {
            @fmt(self.error&, "extra arg on switch terminator in @%", self.blk.name());
            return();
        };
        self.parse_switch();
        return();
    };
    b := self.parse_blk() || return();
    self.blk.s1 = b;
    self.eat(",");
    if self.parse_blk() { b | 
        self.blk.s2 = b;
    };
}

fn parse_switch(self: *QParseCtx) void = {
    cases: QList(Ty(*Qbe.Blk, i64)) = new(1);
    inspect := QbeNull;
    default := Qbe.Blk.ptr_from_int(0);
    n := 0;
    parse_block_arg_list(self, "switch terminator") { b, a |
        if inspect == QbeNull {
            inspect = a;
            default = b;
        } else {
            value := self.f.get_int(a) ||  {
                @fmt(self.error&, "switch instruction requires integer literal after block '%'", b.name());
                return();
            };
            push(cases&, n&, (b, value));
        };
    };
    if inspect == QbeNull {
        push_all(self.error&, "switch requires arguments (switch @default %inspect, @caseN N, ...)");
        return()
    };
    if self.f.switch_count == 0 {
        self.f.switches = new(0);
    };
    self.f.switch_count += 1;
    self.f.switches&.grow(self.f.switch_count.zext());
    i: i64 = self.f.switch_count.zext() - 1;
    self.f.switches[i] = (
        cases = cases,
        case_count = n,
        inspect = inspect,
        default = default,
        src = self.blk,
    );
    self.blk.jmp = (type = .switch, arg = INT(i));
}

fn parse_phi(self: *QParseCtx, to: Qbe.Ref, k: u8) void = {
    // example: `%s  =w phi @start 0, @loop %s1`
    phi := self.out.box_zeroed(Qbe.Phi);
    phi.arg = new(0);
    phi.blk = new(0);
    phi.to = to;
    ::?Qbe.Cls;
    phi.cls = or cls_from_char(k) {
        self.replacements&.push(key = k.zext() - "0".char(), r = to);
        .Kw
    };
    parse_block_arg_list(self, "phi instruction") { b, a |
        push(phi, b, a);
    };
    phi.link = self.blk.phi;
    self.blk.phi = phi;
    return();
}

fn parse_block_arg_list(self: *QParseCtx, why: Str, $body: @Fn(blk: *Qbe.Blk, arg: Qbe.Ref) void) void = {
    while => self.parse_blk() { blk | 
        arg := self.parse_ref();
        if arg == QbeNull {
            @fmt(self.error&, "% requires argument for block '%'", why, blk.name());
            return();
        };
        body(blk, arg);
        self.eat(",");
    };
}

fn cls_from_char(c: u8) ?Qbe.Cls = {
    (Some = @switch(c) {
        @case("w".ascii()) => .Kw;
        @case("l".ascii()) => .Kl;
        @case("s".ascii()) => .Ks;
        @case("d".ascii()) => .Kd;
        @default => return(.None);
    })
}

fn parse_ref(self: *QParseCtx) Qbe.Ref = {
    self.skip_blanks();
    if self.eat("%") {  // tmp
        placeholder := self.input[self.cursor].is_ascii_digit();
        name := if placeholder {
            // we allow integer names for referncing template arguments
            self.cursor += 1;
            self.input.slice(self.cursor - 1, self.cursor)
        } else {
            self.eat_word()
        };
        return self.tmps&.get_or_insert(name, => {
            // TODO: don't add the number suffix.
            t := self.f.newtmp(name, .Kw);  // :PatchCls
            if placeholder {
                self.f.get_temporary(t)[].visit = intcast(name[0].zext() - "0".char() + 1);
            };
            t
        })[];
    };
    thread := self.eat("thread");
    if self.eat("$") {  // global
        @assert(!thread, "I don't support thread locals. use real qbe instead. sorry");
        name := self.eat_word();
        if self.eat("$") {
            module := self.eat_word();
            name = /* SLOW */ @tfmt("%$%", name, module); // TODO: do something more formal (store this in Qbe.Sym?)
        };
        off := 0;
        self.skip_blanks();
        if self.eat("+") {
            self.skip_blanks();
            off = self.parse_number();
        };
        id := self.f.globals.intern(name);
        
        // just in case its an import; if you say its weak and then try to static link, you don't get one. 
        // in the normal api you're always forced to specify what you want 
        // but in the text ir tests this is more convenient (and it's what other compiler will expect because qbe doesn't do weak symbols). 
        use_symbol(self.f.globals, id) { s |
            s.strong = true;
        };
        return self.f.symcon(id, off);
    };
    if thread {
        @fmt(self.error&, "prefix 'thread' can only be used on an $address");
        return(QbeNull);
    };
    
    if self.eat(":") {
        name := self.eat_word(); 
        return(TYPE(or self.find_type(name) {
            @fmt(self.error&, "type '%' must be declared before use as arg/par", name);
            return(QbeNull);
        }));
    };
    if self.eat("[") { 
        panic("TODO: memory");
    };
    if self.eat("R") { 
        // Register :ExprLevelAsm
        if !self.input[self.cursor].is_ascii_digit() {
            @fmt(self.error&, "expected a number because of 'R' prefix");
            return(QbeNull);
        };
        r := self.parse_number();
        if r <= 0 || r >= Qbe.Tmp0 {
            @fmt(self.error&, "% is not a valid register number", r);
            return(QbeNull);
        };
        return(TMP(r));
    };
    
    is_float := self.eat("s_");
    double := self.eat("d_");
    slot := self.eat("S");
    int := self.eat("I");
    negative := self.eat("-");
    if !self.input[self.cursor].is_ascii_digit() {
        if int || is_float || double || slot || negative {
            @fmt(self.error&, "expected a number because of the prefix");
            if self.eat(".") {
                @fmt(self.error&, ". TODO: does qbe allow leading dot?");
            };
            return(QbeNull);
        };
        // This may or may not be an error depending on the context
        return(QbeNull);
    };
    
    i := self.parse_number();
    if is_float || double {
        if int || slot {
            @fmt(self.error&, "cannot have I/S prefix with d_/s_");
            return(QbeNull);
        };
        if is_float == double {
            @fmt(self.error&, "both prefixes 'd_' and 's_'");
            return(QbeNull);
        };
        i := i.float();
        if self.eat(".") {
            start := self.cursor;
            fraction := self.parse_number();
            i += fraction.float() / pow(10, self.cursor - start).float();
        };
        i *= @if(negative, -1.0, 1.0);
        i: i64 = if(is_float, => i.cast().bitcast().zext(), => i.bitcast());
        c := self.f.getcon(i);
        return(c);
    };
    if self.eat(".") {
        @fmt(self.error&, "found '.' in number without prefix d_ or s_");
        return(QbeNull);
    };
    i *= @if(negative, -1, 1);
    if int && int == slot {
        @fmt(self.error&, "number with both prefix S and I");
        return(QbeNull);
    };
    if(slot, => return(SLOT(i)));
    if(int, => return(INT(i)));
    self.f.getcon(i)
}

fn parse_blk(self: *QParseCtx) ?*Qbe.Blk = {
    if(!self.eat("@"), => return(.None));
    name := self.eat_word();
    if self.blocks&.get(name) { b | 
        return(Some = b);
    };
    // TODO: check that all referenced blocks get defined.
    b := self.out.box_zeroed(Qbe.Blk);
    b.name = name; 
    self.blocks&.insert(name, b);
    (Some = b)
}

fn parse_number(self: *QParseCtx) i64 = {
    base := if self.input[self.cursor] == "0".ascii() && self.input[self.cursor + 1] == "x".ascii() {
        self.cursor += 2;
        16
    } else {
        10
    };
    s := self.input.rest(self.cursor);
    v, rest := convert_number_dyn(s, base);
    self.cursor += s.len - rest.len;
    v
}

// example: `data $s = { l $pointer, b "hello", b 0 }`
fn parse_data(self: *QParseCtx, export: bool) Result(Dat2, Str) = {
    relocations: List(Dat2.Reloc) = list(temp());
    bytes: List(u8) = list(temp());
    zero_count := 0;
    all_zeroes := true;
    move_zeroes :: fn() => if all_zeroes {
        bytes&.push_zeroes(zero_count);
        all_zeroes = false;
    };

    if !self.eat("$") {
        return(Err = "expected '$name' after 'data'");
    };
    name := self.eat_word();
    id := self.f.globals.intern(name);
    if !self.eat("=") {
        return(Err = "expected '=' after 'data $name'");
    };
    align: u32 = 1;
    if self.eat("align") {
        // :NeedFunctionInitForData
        c := self.parse_ref();
        if rtype(c) != .RCon {
            return(Err = "expect number after 'data $name = align'");
        };
        c := self.f.get_constant(c);
        ::enum(Qbe.ConType);
        if c.type() != .CBits {
            return(Err = "expect number after 'data $name = align'");
        };
        align = c.bits().trunc();
    };
    self.skip_lines();
    if !self.eat("{") {
        return(Err = "expected '{' to begin data");
    };
    self.skip_lines();
    had_comma := true;
    dat_type := -1;
    // TODO: this gets confused if the file doesn't end in a new line. 
    while => self.cursor < self.input.len && !self.check("}") {
        // allow { b 1 2 3 } instead of { b 1, b 2, b 3 }
        if had_comma {
            dat_type = @switch(self.input[self.cursor]) {
                @case("b".ascii()) => 1;
                @case("l".ascii()) => 8;
                @case("z".ascii()) => -1;
                @case("h".ascii()) => 2;
                @case("w".ascii()) => 4;
                // These don't mean anything different from w/l but harec wants to use them 
                @case("s".ascii()) => 4;
                @case("d".ascii()) => 8;
                @default => return(Err = @tfmt("expected b/h/w/l/z prefix for data entry in %", name));
            };
            self.cursor += 1;
        };
        self.skip_blanks();
        if self.input[self.cursor] == "\"".ascii() {
            if(dat_type != 1, => return(Err = @tfmt("expected 'b' prefix for string literal in %", name)));
            s := @try(self.consume_string()) return;
            move_zeroes();
            expand_string_escapes(s, bytes&);
        } else {
            // :NeedFunctionInitForData
            r := self.parse_ref();
            if rtype(r) != .RCon {
                return(Err = "expected \"string\" or $variable or numeric constant for data entry");
            };
            c := self.f.get_constant(r);
            @match(c.type()) {
                fn CBits() => {
                    if dat_type == -1 {
                        if all_zeroes {                        
                            zero_count += c.bits();
                        } else {
                            bytes&.push_zeroes(c.bits());
                        };
                    } else {          
                        move_zeroes();
                        bytes&.reserve(8);
                        dest := ptr_cast_unchecked(u8, i64, bytes&.as_ptr().offset(bytes.len));
                        dest[] = c.bits();  // only support little endian so this is fine // TODO: is alignment real? 
                        bytes.len += dat_type;
                    }
                }
                fn CAddr() => {                
                    if(dat_type != 8, => return(Err = @tfmt("expected 'l' prefix for address (of '%') in %", self.m.str(c.sym), name)));
                    move_zeroes();
                    relocations&.push(off = bytes.len.trunc(), id = c.sym, addend = c.bits());
                    bytes&.push_zeroes(8);
                }
            };
        };
        had_comma = self.eat(",");
        self.skip_lines();
    };
    self.eat(",");
    if !self.eat("}") {
        return(Err = "expected '}' to end data");
    };    
    (Ok = (
        relocations = relocations.items(),
        template = @if(all_zeroes, (Zeroes = zero_count), (Bytes = bytes.items())),
        id = id,
        export = export,
        align = align,
    ))
}

// note: caller must do escapes
fn consume_string(self: *QParseCtx) Result(Str, Str) = {
    @debug_assert(self.input[self.cursor] == "\"".ascii());
    self.cursor += 1;
    start := self.cursor;
    // going over the list twice is silly but i only use this for tests so i don't care. 
    while => self.input[self.cursor] != "\"".ascii() {
        if self.input[self.cursor] == "\\".ascii() {
            self.cursor += 1;
        };
        self.cursor += 1;
        if(self.cursor >= self.input.len, => return(Err = "unterminated string literal"));
    };
    s := self.input.slice(start, self.cursor);
    self.cursor += 1;
    (Ok = s)
}

fn parse_type(self: *QParseCtx) Result(void, Str) = {
    if !self.eat(":") {
        return(Err = "expected ':' before type name");
    };
    name := self.eat_word();
    if !self.eat("=") {
        return(Err = "expected '=' after :TypeName");
    };
    
    m := self.m;
    typ := Qbe.Typ.zeroed(); typ := typ&;
    typ.name = name;
    
    typ.align_log2 = 255;
    if self.eat("align") {
        self.skip_blanks();
        i := self.parse_number().abs();
        while => i != 0 {
            i /= 2;
            typ.align_log2 += 1;
        };
    };
    if !self.eat("{") {
        return(Err = "expected '{' to begin type declaration");
    };
    self.skip_blanks();
    if self.input[self.cursor].is_ascii_digit() { // TODO: this can only go at the top level i think
        size := self.parse_number();
        if !self.eat("}") {
            return(Err = "expected '}' to end type declaration");
        };
        typ.set_is_dark(true);
        if !size.ult(MAX_u32) {
            when_debug(self.f, .Warn, fn(out) => @fmt(out, "very large abi type: %", typ.name));
            size = MAX_u32; // TODO: error if you try to use it
        };
        typ.size = size.trunc();
    } else {
        fields := u32.list(m.forever&.borrow());
        if self.check("{") {
            typ.set_is_union(true);
            while => !self.eat("}") { // TODO: bounds
                self.eat("{");
                @try(self.parse_type_fields(typ, fields&)) return;
                self.eat(",");
            };
        } else {
            @try(self.parse_type_fields(typ, fields&)) return;
        };
        typ.fields = fields.items();
    };
    
    // types can't refer to themselves so adding it at the end is fine
    t := m.new_type(typ[]);
    self.types&.insert(name, t);
    .Ok
}

fn parse_type_fields(self: *QParseCtx, typ: *Qbe.Typ, fields: *List(u32)) Result(void, Str) = {
    self.skip_blanks();
    
    m := self.f.globals;
    my_align: i64 = @if(typ.align_log2 == 255, -1, typ.align_log2.zext());
    my_size := 0;
    while => self.cursor < self.input.len && !self.check("}") {
        continue :: local_return;
        value_to_put_in_len_field := -1;
        c := self.input[self.cursor];
        self.cursor += 1;
        (tag: Qbe.FieldType, size: i64, align: i64) := @switch(c) {
            @case(":".ascii()) => {
                n := self.eat_word();
                value_to_put_in_len_field = (or self.find_type(n) {
                    return(Err = "type name must be declared before useas field type")
                });
                inner := m.get_type(value_to_put_in_len_field);
                (.FTyp, inner.size.zext(), inner.align_log2.zext())
            };
            @case("{".ascii()) => return(Err = "types cannot be nested inline. \nuse seperate declarations and refer to them by name. \nsorry that this is a waste of your time.");
            @case("l".ascii()) => (.Fl, 8, 3);
            @case("w".ascii()) => (.Fw, 4, 2);
            @case("h".ascii()) => (.Fh, 2, 1);
            @case("b".ascii()) => (.Fb, 1, 0);
            @case("d".ascii()) => (.Fd, 8, 3);
            @case("s".ascii()) => (.Fs, 4, 2);
            @case("p".ascii()) => {
                // TODO: make sure we're not losing alignment info
                self.skip_blanks();
                len := self.parse_number(); 
                self.eat(",");
                push(fields, pack(type = .FPad, len = len.trunc()));
                my_size += len;
                continue()
            };
            @default => return(Err = @tfmt("invalid character % to begin field type", c));
        };
        
        my_align = my_align.max(align);
        target_size := align_to(my_size, 1.shift_left(align));
        add_padding(fields, my_size&, target_size);
        
        self.skip_blanks();
        count := if(self.input[self.cursor].is_ascii_digit(), => self.parse_number(), => 1);
        my_size += count * size;
        ::enum(Qbe.FieldType);
        if tag == .FTyp {
            size = value_to_put_in_len_field;
        };
        
        // harec wants to make giant array types and not use them. 
        // TODO: this :HACK goes away when i truncate in a more structured way (see next comment)
        count = count.min(512);  // note: this doesn't change my_size calculation 
        
        // TODO: its kinda sad how much memory i use to represent Array(u8, 80), etc.
        //       but also the abi only looks at the first few anyway so this could be improved. 
        //       (careful, can't just truncate in add_type because of how i represent unions)
        fields.push_repeated(count, pack(len = size.trunc(), type = tag));
        self.eat(",");
    };
    if !self.eat("}") {
        return(Err = "expected '}' to end type declaration");
    };
    align := 1.shift_left(my_align);
    my_size = my_size.max(zext typ.size);
    my_size := bit_and(my_size + align - 1, -align);
    if !my_size.ult(MAX_u32) {
        when_debug(self.f, .Warn, fn(out) => @fmt(out, "very large abi type: %", typ.name));
        my_size = MAX_u32; // TODO: error if you try to use it
    };
    typ.size = trunc my_size;
    typ.align_log2 = my_align.trunc();
    fields.push(pack(type = .FEnd, len = 0));
    @assert(typ.nunion != 0xFFFF, "too many union fields");
    typ.nunion += 1;
    
    .Ok
}

fn find_type(self: *QParseCtx, n: Str) ?i64 = {
    self.types&.get(n)
}

fn skip_blanks(self: *QParseCtx) void = {
    while => self.cursor < self.input.len {
        @switch(self.input[self.cursor]) {
            @case(" ".ascii())  => ();
            @case("\t".ascii()) => ();
            @case("\r".ascii()) => ();
            @default => return();
        };
        self.cursor += 1;
    };
}

// we have a little self respect and fold away the loop at comptime when the string is one long.
fn eat(self: *QParseCtx, $s: Str) bool #inline = {
    self.skip_blanks();
    if(self.cursor + s.len() > self.input.len, => return(false));
    @if(@run (s.len() == 1), {
        c := self.input[self.cursor] == @run s[0];
        self.cursor += c.int();
        c
    }, {
        cursor := self.cursor;
        for s { c | 
            if(c != self.input[cursor], => return(false));
            cursor += 1;
        };
        self.cursor = cursor;
        true
    })
}

fn check(self: *QParseCtx, $s: Str) bool #inline = {
    ::assert_eq(s.len(), 1);
    self.skip_blanks();
    self.cursor + 1 < self.input.len && 
    self.input[self.cursor] == @run s[0]
}

fn allow_in_identifier(c: u8) bool #inline = {
    c.is_ascii_alpha() || c.is_ascii_digit() || c == "_".ascii() || c == ".".ascii() 
}

// TODO: bounds
fn eat_word(self: *QParseCtx) Str = {
    self.skip_blanks();
    start := self.cursor;
    while => self.cursor < self.input.len && self.input[self.cursor].allow_in_identifier() {
        self.cursor += 1;
    };
    self.input.slice(start, self.cursor)
}

#use("@/lib/collections/map.fr");
#use("@/backend/lib.fr");
