// Adapted from Qbe. MIT License. Â© 2015-2024 Quentin Carbonneaux <quentin@c9x.me>

fn debug_dump_copy(f: *Qbe.Fn, copy_of: []Qbe.Ref) void = {
    out := f.globals.debug_out;
    write(out, "\n> Copy information:");
    range(Qbe.Tmp0, f.ntmp.zext()) { t |
        if copy_of[t] == QbeNull {
            @fmt(out, "\n% not seen!", f_pad(f.tmp[t]&.name(), 10, .Before));
        } else {
            if copy_of[t] != TMP(t) {
                @fmt(out, "\n% copy of ", f_pad(f.tmp[t]&.name(), 10, .Before));
                printref(copy_of[t], f, out);
            }
        }
    };
    write(out, "\n\n> After copy elimination:\n");
    printfn(f, out);
}

fn debug_dump_liveness(f: *Qbe.Fn) void = {
    out := f.globals.debug_out;
    write(out, "\n> Liveness analysis:\n");
    for_blocks f { b |
        @fmt(out, "\t%in:   ", f_pad(b.name(), 10, .After));
        dumpts(b.in&, f.tmp, out);
        write(out, "\t          out:  ");
        dumpts(b.out&, f.tmp, out);
        write(out, "\t          gen:  ");
        dumpts(b.gen&, f.tmp, out);
        write(out, "\t          live: ");
        @fmt(out, "% %\n", b.nlive&[0], b.nlive&[1]);
    };
}

fn slow_is_empty(m: *RMap) bool = {
    range(0, m.len) { i |
        if m.tmps&[i] >= Qbe.Tmp0 {
            return(false);
        }
    };
    true
}

fn debug_dump(f: *Qbe.Fn, m: *RMap) void = {
    range(0, m.len) { i |
        if m.tmps&[i] >= Qbe.Tmp0 {
            out := f.globals.debug_out;
            @fmt(out, " (");
            printref(TMP(m.tmps&[i].intcast()), f, out);
            @fmt(out, ", R%)", m.regs&[i]);
        }
    };
    write(f.globals.debug_out, "\n");
}

fn debug_dump(f: *Qbe.Fn, beg: []RMap, end: []RMap) void = {
    out := f.globals.debug_out;
    any := false;
    range(0, f.nblk.zext()) { n |
        b := f.rpo[n];
        empty := beg.index(n).slow_is_empty() && end.index(n).slow_is_empty();
        if !empty {
            if !any {
                write(out, "\n> Register mappings:\n");
            };
            any = true;
            @fmt(out, "\t% beg", f_pad(b.name(), 10, .After));
            f.debug_dump(beg.index(n));
            write(out, "\t           end");
            f.debug_dump(end.index(n));
        };
    };
    if any {
        write(out, "\n");
    };
}

//fn display(k: Qbe.Cls, out: *List(u8)) void = {
    //@fmt(out, "%", k.kname());
//}

fn printcon(m: *QbeModule, c: *Qbe.Con, out: *List(u8)) void = {
    @debug_assert(!c.is_null(), "null con");
    ::enum(Qbe.ConType);
    @match(c.type()) {
        fn CAddr() => {
            @fmt(out, "$%", m.str(c.sym));
            if c.bits() != 0 {
                @fmt(out, "+%", c.bits());
            };
        }
        fn CBits() => @fmt(out, "%", c.bits());
    };
}

fn printmem(m: *Qbe.Addr, f: *Qbe.Fn, out: *List(u8)) void = {
    if m.scale == 255 {
        // we use this for arm fma, maybe that's dumb and it should use fma0 and fma1 like blit does. 
        printref(m.base, f, out);
        write(out, " * ");
        printref(m.index, f, out);
        return();
    };
    
    i := 0;
    write(out, "[");
    if m.offset&.bits() != 0 || m.offset&.type() == .CAddr {
        f.globals.printcon(m.offset&, out);
        i = 1;
    };
    if m.base != QbeNull {
        if i != 0 {
            write(out, " + ");
        };
        printref(m.base, f, out);
        i = 1;
    };
    if m.index != QbeNull {
        if i != 0 {
            write(out, " + ");
        };
        @fmt(out, "% * ", m.scale);
        printref(m.index, f, out);
    };
    write(out, "]");
}

fn printref(r: Qbe.Ref, f: *Qbe.Fn, out: *List(u8)) void = @match(rtype(r)) {
    fn RTmp() => if r.val() < Qbe.Tmp0 {
        @fmt(out, "R%", r.val());
    } else {
        n := f.tmp[r.val()]&.name();
        @fmt(out, "%%.%", "%", n, r.val());
    };
    fn RCon() => if r == QbeUndef {
        write(out, "UNDEF");
    } else {
        if r.val() >= f.ncon.zext() {
            @fmt(out, "INVALID(%)", r);
        } else {
            f.globals.printcon(f.get_constant(r), out);
        };
    };
    fn RSlot() => @fmt(out, "S%", rsval(r));
    fn RCall() => @fmt(out, "C%", r.val());
    fn RType() => if r.val() >= f.globals.types.len {
        @fmt(out, ":T%INVALID", r.val());
    } else {
        n := f.get_type(r).name();
        if n.len == 0 {
            @fmt(out, ":T%", r.val());
        } else {
            @fmt(out, ":%", n);
        }
    };
    fn RMem() => printmem(f.mem.index(r.val()), f, out);
    fn RInt() => @fmt(out, "I%", rsval(r));
    fn RNull() => write(out, "R");
};


// TODO: this can't use name_str() because that wants ordinal() which needs ::enum() which creates a display() but we want to override display()
fn kname(k: Qbe.Cls) Str = { //                             ^
    N :: Qbe.Cls.get_enum_names(); //                       ^
    ::enum(Qbe.Cls);             // clearly that's not true ^
    enum_name_from_ordinal(Qbe.Cls, k.raw().zext()).slice(1, 2)
}

fn printins(f: *Qbe.Fn, i: *Qbe.Ins, out: *List(u8)) void = {
    if i.to != QbeNull {
        printref(i.to, f, out);
        @fmt(out, " =% ", kname(i.cls()));
    };
    ::enum(Qbe.O);
    id: i64 = i.op().raw().zext();
    if id < Qbe.O.enum_count() {
        @fmt(out, "%", i.op());
    } else {
        @fmt(out, "INVALID(%)", id);
    };
    if i.to == QbeNull {
        o := i.op();
        show_cls := @is(o, .arg, .swap, .xcmp, .acmp, .acmn, .afcmp, .xtest, .xdiv, .xidiv, .push);
        show_cls = show_cls || (i.arg&[0] == QbeNull && i.arg&[1] == QbeNull && !iscmp(o) && !is_store(o) && o != .truncl && o != .nop);
        if show_cls {
            write(out, kname(i.cls()));
        };
    };
    if i.arg&[0] != QbeNull {
        write(out, " ");
        printref(i.arg&[0], f, out);
    };
    if i.arg&[1] != QbeNull {
        write(out, ", ");
        printref(i.arg&[1], f, out);
    };
    
    if i.op() == .flow {
        F :: import("@/backend/wasm/isel.fr")'Flow;
        ::enum(F);
        @fmt(out, " # %", @as(F) @as(i64) i.arg&[0].rsval().intcast());
        if i.arg&[1] != QbeNull {
            @fmt(out, " @%", f.rpo[i.arg&[1].rsval().intcast()].name());
        };
    };
};

fn printfn(f: *Qbe.Fn, out: *List(u8)) void = {
    @fmt(out, "%function ", @if(f.lnk.export, "export ", ""));
    if f.retty != QbeNull {
        printref(f.retty, f, out);
        @fmt(out, " ");
    };
    use_symbol(f.globals, f.lnk.id) { s |
        @fmt(out, "$%", s.name);
    };
    @fmt(out, "(%) {\n", @if(f.vararg, "...", ""));
    
    for_blocks f { b | 
        continue :: local_return;
        @fmt(out, " @%", b.name());  // extra space because Zed only lets you collapse based on indentation
        if false {
            @if(b.npred > 0) @fmt(out, " # preds: ");
            for_pred b { p | 
                @fmt(out, "@%, ", p.name());
            };
        };
        @fmt(out, "\n");
        for_phi b { p | 
            write(out, "    ");
            printphi(f, p, out);
            write(out, "\n");
        };
        for_insts_forward b { i | 
            write(out, "    ");
            printins(f, i, out);
            write(out, "\n");
        };
        
        write(out, "    ");
        printjmp(f, b, out);
        write(out, "\n");
    };
    write(out, "}\n");
    f.globals.flush_debug(); // since i tend to call this right before panicking. 
}

fn printphi(f: *Qbe.Fn, p: *Qbe.Phi, out: *List(u8)) void = {
    printref(p.to, f, out);
    @fmt(out, " =% phi ", kname(p.cls));
    if p.narg <= 0 {
        @fmt(out, "ERROR: phi with no args");
    } else {
        range(0, p.narg.zext()) { n | 
            @fmt(out, "@% ", p.blk[n].name());
            printref(p.arg&[n], f, out);
            if (n == p.narg.zext() - 1) {
            } else {
                write(out, ", ");
            };
        };
    };
}

fn printjmp(f: *Qbe.Fn, b: *Qbe.Blk, out: *List(u8)) void = {
    j := b.jmp.type;
    n := j.name_str();
    if is_ret(b.jmp.type) {
        @fmt(out, "%", n);
        ::enum(Qbe.J);
        if b.jmp.type != .ret0 || b.jmp.arg != QbeNull {
            write(out, " ");
            printref(b.jmp.arg, f, out);
        };
        if b.jmp.type == .retc {
            @fmt(out, ", ");
            printref(f.retty, f, out);
        };
        return();
    };

    @fmt(out, "% ", n);
    if b.jmp.arg != QbeNull {
        printref(b.jmp.arg, f, out);
        write(out, ", ");
    };
    if b.jmp.type == .hlt {
        return();
    };
    
    if b.jmp.type == .jmp {
        if b.s1.is_null() {
            @fmt(out, "ERROR: NULL JUMP TARGET: ");
            @fmt(out, "%, %", Qbe.Blk.int_from_ptr(b.s1), Qbe.Blk.int_from_ptr(b.s2));
            return();
        };
        @fmt(out, "@%", b.s1.name());
        return();
    };
    
    if b.jmp.type == .switch {
        n := b.jmp.arg.val();
        if n >= f.switch_count.zext() {
            @fmt(out, "ERROR: invalid switch index.");
            return();
        };
        payload := f.switches.index(n);
        
        @fmt(out, "@% ", payload.default.name());
        printref(payload.inspect, f, out);
        write(out, ", ");
        for payload.cases.slice(0, payload.case_count) { s | 
            case, value := s;
            @fmt(out, "@% %, ", case.name(), value);
        };
    } else {
        if b.jmp.type != .Jxxx && !b.s1.is_null() && !b.s2.is_null() {
            @fmt(out, "@%, @%", b.s1.name(), b.s2.name());
        } else {
            @fmt(out, "%, %", Qbe.Blk.int_from_ptr(b.s1), Qbe.Blk.int_from_ptr(b.s2));
        };
    };
}

fn debug_dump_fused_slots(f: *Qbe.Fn, sl: []import("@/backend/opt/mem.fr")'Slot, ip: i64) void = {
    out := f.globals.debug_out;
    each sl { s0 |
        continue :: local_return;
        if(!s0.replacement.identical(s0), => continue());
        @fmt(out, "\tfuse (%b) [", f_pad(s0.sz, 3, .Before));
        for(s0, sl.index_unchecked(sl.len)) { s |
            continue :: local_return;
            if(!s.replacement.identical(s0), => continue());
            @fmt(out, " %%", "%", f.tmp[s.t.zext()]&.name());
            if s.live_range.b != 0 {
                @fmt(out, "[%,%)", s.live_range.a - ip.intcast(), s.live_range.b - ip.intcast());
            } else {
                write(out, "{}");
            };
        };
        write(out, " ]\n");
    };
}

fn debug_dump_dead_slots(f: *Qbe.Fn, dead_slots: []i32) void = {
    out := f.globals.debug_out;
    write(out, "\n> Slot coalescing:\n");
    if dead_slots.len != 0 {
        write(out, "\tkill [");
        for dead_slots { m |
            @fmt(out, " %%", "%", f.tmp.index(m.zext()).name());
        };
        write(out, " ]\n");
    };
}

fn when_debug(f: *Qbe.Fn, category: Qbe.DebugKey, $body: @Fn(out: *List(u8)) void) void = {  
    if f.globals.debug[category.raw()] {
        body(f.globals.debug_out);
    };
}

fn dumpts(bs: *Qbe.BSet, tmp: QList(Qbe.Tmp), f: *List(u8)) void = {
    write(f, "[");
    for(bs, Qbe.Tmp0) { t | 
        @fmt(f, " %", tmp[t]&.name());
    };
    write(f, "]\n");
}

fn print_type(m: *QbeModule, ty_index: i64, out: *List(u8)) void = {  // :ThreadSafety
    t := m.get_type(ty_index);
    if TRACK_IR_NAMES && t.name.len > 0 {
        @fmt(out, "type :% = ", t.name());
    } else {
        @fmt(out, "type :T% = ", ty_index);
    };
    
    if t.is_dark() {
        @fmt(out, "% { % }", 1.shift_left(t.header.align_log2.zext()), t.header.size);
        return();
    };
    if t.is_union() {
        @fmt(out, "{ ");
    };
    ::enum(Qbe.Field);
    //if f.type == .FEnd {
        //@fmt(out, "EMPTY");
    //};
    i := 0;
    for_unions(t, i&) {
        @fmt(out, "{ ");
        for_fields(t, i&) { type, idx |
            // TODO: would be more readable if this used array syntax
            @match(type) {
                fn Fb() => @fmt(out, "b, ");
                fn Fh() => @fmt(out, "h, ");
                fn Fw() => @fmt(out, "w, ");
                fn Fl() => @fmt(out, "l, ");
                fn Fs() => @fmt(out, "s, ");
                fn Fd() => @fmt(out, "d, ");
                fn FTyp() => {
                    type := m.get_type(idx.zext());
                    n := type.name();
                    if TRACK_IR_NAMES && n.len > 0 {
                        @fmt(out, ":%, ", n);
                    } else {
                        @fmt(out, ":T%, ", idx);
                    }
                }
                fn FPad() => {
                    @fmt(out, "p %, ", idx);
                }
                fn FEnd() => unreachable();
            };
        };
        @fmt(out, "}");
    };
    if t.is_union() {
        @fmt(out, " }");
    };
    @fmt(out, "\n");
}

fn print_data(m: *QbeModule, dat: *Dat2, out: *List(u8)) void = {
    @fmt(out, "data $% = { ", m.str(dat.id));
    if dat.relocations.len == 0 {
        break :: local_return;
        @match(dat.template) {
            fn Zeroes(count) =>  {
                @fmt(out, "z % }\n", count);
                return();
            };
            fn Bytes(bytes) => {
                for bytes { c |
                    if(c != 0 && (c < 32 || c > 126), => break());
                };
                // it's printable ascii
                @fmt(out, "b \"");
                
                for bytes { c |
                    if c == 0 {
                        out.push_all("\\0");
                    } else {
                        if c == "\\".ascii() {
                            out.push_all("\\\\");
                        } else {
                            out.push(c);
                        }
                    }
                };
                @fmt(out, "\" }\n");
                return();
            }
        };
    };
    
    r := 0;
    b := 0;
    count := dat.len();
    if count >= 8 {
        @fmt(out, "l ");
    };
    while => b < count { 
        continue :: local_return;
        if r < dat.relocations.len {
            rel := dat.relocations[r];
            if rel.off.zext() == b {
                @fmt(out, "$%+% ", m.str(rel.id), rel.addend);
                r += 1;
                b += 8;
                continue();
            }
        };
        
        if count - b < 8 {
            @fmt(out, "%b ", @if(b == 0, "", ","));
            range(b, count) { i |
                @fmt(out, "% ", dat.get_byte(i));
            };
            b = count;
            continue();
        };
        
        i := @match(dat.template) {
            fn Zeroes() => 0;
            // TODO: is alignment real?
            fn Bytes(bytes) => ptr_cast_unchecked(u8, i64, bytes.ptr.offset(b))[];
        };
        @fmt(out, "% ", i);
        b += 8;
    };
    @fmt(out, "}\n");
}

fn len(dat: *Dat2) i64 = {
    @match(dat.template) {
        fn Zeroes(count) => count;
        fn Bytes(bytes) => bytes.len;
    }
}

fn get_byte(dat: *Dat2, i: i64) u8 = {
    @match(dat.template) {
        fn Zeroes(count) => 0;
        fn Bytes(bytes) => bytes[i];
    }
}

fn dump_folding(f: *Qbe.Fn, fold_vals: []i32, out: *List(u8), folded_sel: bool) void = {
    #use("@/backend/opt/fold.fr");
    any_folded := folded_sel;
    write(out, "\n> SCCP findings:");  // "sparse conditional constant propagation"
    range(Qbe.Tmp0, f.ntmp.zext()) { t |
        if fold_vals[t] > 0 {
            any_folded = true;
            @fmt(out, "\n%: ", f_pad(f.tmp[t]&.name(), 10, .Before));
            printref(CON(fold_vals[t].zext()), f, out);
        };
    };
    if any_folded {
        write(out, "\n> Top: ("); 
        range(Qbe.Tmp0, f.ntmp.zext()) { t |
            if fold_vals[t].intcast() == fold_status_pending {
                @fmt(out, "%, ", f.tmp[t]&.name());
            } 
        };
        write(out, ")"); 
    } else {
        write(out, "\n no foldable constants");
    };
    write(out, "\n dead code: ");
    any_dead_blocks := false;
    for_blocks f { b |
        if b.visit == 0 {
            any_dead_blocks = true;
            @fmt(out, "% ", b.name());
        };
    };
    if !any_dead_blocks {
        write(out, "(none)");
    };
    if any_folded {
        write(out, "\n\n> After constant folding:\n");
        printfn(f, out);
    };
}

fn flush_debug(m: *QbeModule) void #inline = {
    o := m.debug_out;
    if o.len != 0 {
        eprint(o.items());
        o.clear();
    };
}
