// Adapted from Qbe. MIT License. Â© 2015-2024 Quentin Carbonneaux <quentin@c9x.me>

tables :: gen_table();
gen_table :: fn() []u32 = {
    C :: Qbe.Cls;
    w :: C.Kw; l :: C.Kl; s :: C.Ks; d :: C.Kd; e :: C.Ke; x :: C.Kx; m :: l;
    T :: fn(a: C, b: C, c: C, d: C, e: C, f: C, g: C, h: C) u32 #fold = {  // 24 bits
        r: u32 = 0;
        R :: fn(k: C) void => {
            r = r.bit_or(@as(u32) bitcast @as(i32) k).shift_left(3);
        };
        R(h); R(g); R(f); R(e); R(d); R(c); R(b); R(a); 
        r.shift_right_logical(3)
    };
    
    X :: fn(NMemArgs: i64, SetsZeroFlag: i64, LeavesFlags: i64) u32 #fold = // 4 bits
        trunc(NMemArgs + SetsZeroFlag*4 + LeavesFlags*8).shift_left(24);
    P :: fn(CanFold: i64, HasId: i64, IdVal: i64) u32 #fold = // 3 bits
        trunc(CanFold + HasId*2 + IdVal*4).shift_left(24+4);
    V :: fn(v: i64) void #fold = ();
    
    fn O();
    fn O(o: Qbe.O, t: u32, p: u32, x: u32, v: void) void = {
        argcls[intcast @as(i32) o] = t.bit_or(p).bit_or(x);
    };
    fn O(o: Qbe.O, t: u32) void = O(o, t, P(0,0,0), X(0,0,0), V(0));
    
    argcls :: ast_alloc().alloc_init(u32, Qbe.O.enum_count(), fn(i) => Qbe.no_symbol);

/* Arithmetic and Bits */
O(.add,     T(w,l,s,d, w,l,s,d), P(1,1,0), X(2,1,0), V(1));
O(.sub,     T(w,l,s,d, w,l,s,d), P(1,1,0), X(2,1,0), V(0));
O(.neg,     T(w,l,s,d, x,x,x,x), P(1,0,0), X(1,1,0), V(0));
O(.div,     T(w,l,s,d, w,l,s,d), P(1,1,1), X(0,0,0), V(0));
O(.rem,     T(w,l,e,e, w,l,e,e), P(1,0,0), X(0,0,0), V(0));
O(.udiv,    T(w,l,e,e, w,l,e,e), P(1,1,1), X(0,0,0), V(0));
O(.urem,    T(w,l,e,e, w,l,e,e), P(1,0,0), X(0,0,0), V(0));
O(.mul,     T(w,l,s,d, w,l,s,d), P(1,1,1), X(2,0,0), V(0));
O(.and,     T(w,l,e,e, w,l,e,e), P(1,0,0), X(2,1,0), V(1));
O(.or,      T(w,l,e,e, w,l,e,e), P(1,1,0), X(2,1,0), V(1));
O(.xor,     T(w,l,e,e, w,l,e,e), P(1,1,0), X(2,1,0), V(1));
O(.sar,     T(w,l,e,e, w,w,e,e), P(1,1,0), X(1,1,0), V(1));
O(.shr,     T(w,l,e,e, w,w,e,e), P(1,1,0), X(1,1,0), V(1));
O(.shl,     T(w,l,e,e, w,w,e,e), P(1,1,0), X(1,1,0), V(1));

/* Comparisons */
O(.ceqw,    T(w,w,e,e, w,w,e,e), P(1,0,0), X(0,1,0), V(0));
O(.cnew,    T(w,w,e,e, w,w,e,e), P(1,0,0), X(0,1,0), V(0));
O(.csgew,   T(w,w,e,e, w,w,e,e), P(1,0,0), X(0,1,0), V(0));
O(.csgtw,   T(w,w,e,e, w,w,e,e), P(1,0,0), X(0,1,0), V(0));
O(.cslew,   T(w,w,e,e, w,w,e,e), P(1,0,0), X(0,1,0), V(0));
O(.csltw,   T(w,w,e,e, w,w,e,e), P(1,0,0), X(0,1,0), V(1));
O(.cugew,   T(w,w,e,e, w,w,e,e), P(1,0,0), X(0,1,0), V(0));
O(.cugtw,   T(w,w,e,e, w,w,e,e), P(1,0,0), X(0,1,0), V(0));
O(.culew,   T(w,w,e,e, w,w,e,e), P(1,0,0), X(0,1,0), V(0));
O(.cultw,   T(w,w,e,e, w,w,e,e), P(1,0,0), X(0,1,0), V(1));

O(.ceql,    T(l,l,e,e, l,l,e,e), P(1,0,0), X(0,1,0), V(0));
O(.cnel,    T(l,l,e,e, l,l,e,e), P(1,0,0), X(0,1,0), V(0));
O(.csgel,   T(l,l,e,e, l,l,e,e), P(1,0,0), X(0,1,0), V(0));
O(.csgtl,   T(l,l,e,e, l,l,e,e), P(1,0,0), X(0,1,0), V(0));
O(.cslel,   T(l,l,e,e, l,l,e,e), P(1,0,0), X(0,1,0), V(0));
O(.csltl,   T(l,l,e,e, l,l,e,e), P(1,0,0), X(0,1,0), V(1));
O(.cugel,   T(l,l,e,e, l,l,e,e), P(1,0,0), X(0,1,0), V(0));
O(.cugtl,   T(l,l,e,e, l,l,e,e), P(1,0,0), X(0,1,0), V(0));
O(.culel,   T(l,l,e,e, l,l,e,e), P(1,0,0), X(0,1,0), V(0));
O(.cultl,   T(l,l,e,e, l,l,e,e), P(1,0,0), X(0,1,0), V(1));

O(.ceqs,    T(s,s,e,e, s,s,e,e), P(1,0,0), X(0,1,0), V(0));
O(.cges,    T(s,s,e,e, s,s,e,e), P(1,0,0), X(0,1,0), V(0));
O(.cgts,    T(s,s,e,e, s,s,e,e), P(1,0,0), X(0,1,0), V(0));
O(.cles,    T(s,s,e,e, s,s,e,e), P(1,0,0), X(0,1,0), V(0));
O(.clts,    T(s,s,e,e, s,s,e,e), P(1,0,0), X(0,1,0), V(0));
O(.cnes,    T(s,s,e,e, s,s,e,e), P(1,0,0), X(0,1,0), V(0));
O(.cos,     T(s,s,e,e, s,s,e,e), P(1,0,0), X(0,1,0), V(0));
O(.cuos,    T(s,s,e,e, s,s,e,e), P(1,0,0), X(0,1,0), V(0));

O(.ceqd,    T(d,d,e,e, d,d,e,e), P(1,0,0), X(0,1,0), V(0));
O(.cged,    T(d,d,e,e, d,d,e,e), P(1,0,0), X(0,1,0), V(0));
O(.cgtd,    T(d,d,e,e, d,d,e,e), P(1,0,0), X(0,1,0), V(0));
O(.cled,    T(d,d,e,e, d,d,e,e), P(1,0,0), X(0,1,0), V(0));
O(.cltd,    T(d,d,e,e, d,d,e,e), P(1,0,0), X(0,1,0), V(0));
O(.cned,    T(d,d,e,e, d,d,e,e), P(1,0,0), X(0,1,0), V(0));
O(.cod,     T(d,d,e,e, d,d,e,e), P(1,0,0), X(0,1,0), V(0));
O(.cuod,    T(d,d,e,e, d,d,e,e), P(1,0,0), X(0,1,0), V(0));

/* Memory */
O(.storeb,  T(w,e,e,e, m,e,e,e), P(0,0,0), X(0,0,1), V(0));
O(.storeh,  T(w,e,e,e, m,e,e,e), P(0,0,0), X(0,0,1), V(0));
O(.storew,  T(w,e,e,e, m,e,e,e), P(0,0,0), X(0,0,1), V(0));
O(.storel,  T(l,e,e,e, m,e,e,e), P(0,0,0), X(0,0,1), V(0));
O(.stores,  T(s,e,e,e, m,e,e,e), P(0,0,0), X(0,0,1), V(0));
O(.stored,  T(d,e,e,e, m,e,e,e), P(0,0,0), X(0,0,1), V(0));
;
O(.loadsb,  T(m,m,e,e, x,x,e,e), P(0,0,0), X(0,0,1), V(0));
O(.loadub,  T(m,m,e,e, x,x,e,e), P(0,0,0), X(0,0,1), V(0));
O(.loadsh,  T(m,m,e,e, x,x,e,e), P(0,0,0), X(0,0,1), V(0));
O(.loaduh,  T(m,m,e,e, x,x,e,e), P(0,0,0), X(0,0,1), V(0));
O(.loadsw,  T(m,m,e,e, x,x,e,e), P(0,0,0), X(0,0,1), V(0));
O(.loaduw,  T(m,m,e,e, x,x,e,e), P(0,0,0), X(0,0,1), V(0));
O(.load,    T(m,m,m,m, x,x,x,x), P(0,0,0), X(0,0,1), V(0));

/* Extensions and Truncations */
O(.extsb,   T(w,w,e,e, x,x,e,e), P(1,0,0), X(0,0,1), V(0));
O(.extub,   T(w,w,e,e, x,x,e,e), P(1,0,0), X(0,0,1), V(0));
O(.extsh,   T(w,w,e,e, x,x,e,e), P(1,0,0), X(0,0,1), V(0));
O(.extuh,   T(w,w,e,e, x,x,e,e), P(1,0,0), X(0,0,1), V(0));
O(.extsw,   T(e,w,e,e, e,x,e,e), P(1,0,0), X(0,0,1), V(0));
O(.extuw,   T(e,w,e,e, e,x,e,e), P(1,0,0), X(0,0,1), V(0));

O(.exts,    T(e,e,e,s, e,e,e,x), P(1,0,0), X(0,0,1), V(0));
O(.truncd,  T(e,e,d,e, e,e,x,e), P(1,0,0), X(0,0,1), V(0));
O(.stosi,   T(s,s,e,e, x,x,e,e), P(1,0,0), X(0,0,1), V(0));
O(.stoui,   T(s,s,e,e, x,x,e,e), P(1,0,0), X(0,0,1), V(0));
O(.dtosi,   T(d,d,e,e, x,x,e,e), P(1,0,0), X(0,0,1), V(0));
O(.dtoui,   T(d,d,e,e, x,x,e,e), P(1,0,0), X(0,0,1), V(0));
O(.swtof,   T(e,e,w,w, e,e,x,x), P(1,0,0), X(0,0,1), V(0));
O(.uwtof,   T(e,e,w,w, e,e,x,x), P(1,0,0), X(0,0,1), V(0));
O(.sltof,   T(e,e,l,l, e,e,x,x), P(1,0,0), X(0,0,1), V(0));
O(.ultof,   T(e,e,l,l, e,e,x,x), P(1,0,0), X(0,0,1), V(0));
O(.cast,    T(s,d,w,l, x,x,x,x), P(1,0,0), X(0,0,1), V(0));

/* Stack Allocation */
O(.alloc4,  T(e,l,e,e, e,x,e,e));
O(.alloc8,  T(e,l,e,e, e,x,e,e));
O(.alloc16, T(e,l,e,e, e,x,e,e));

/* Variadic Function Helpers */
O(.vaarg,   T(m,m,m,m, x,x,x,x));
O(.vastart, T(m,e,e,e, x,e,e,e));

O(.copy,    T(w,l,s,d, x,x,x,x), P(0,0,0), X(0,0,1), V(0));

/* Debug */
O(.dbgloc,  T(w,e,e,e, w,e,e,e), P(0,0,0), X(0,0,1), V(0));

/* Miscellaneous and Architecture-Specific Operations */;
O(.nop,     T(x,x,x,x, x,x,x,x), P(0,0,0), X(0,0,1), V(0));
O(.addr,    T(m,m,e,e, x,x,e,e), P(0,0,0), X(0,0,1), V(0));
O(.blit0,   T(m,e,e,e, m,e,e,e), P(0,0,0), X(0,1,0), V(0));
O(.blit1,   T(w,e,e,e, x,e,e,e), P(0,0,0), X(0,1,0), V(0));
O(.swap,    T(w,l,s,d, w,l,s,d), P(0,0,0), X(1,0,0), V(0));
O(.sign,    T(w,l,e,e, x,x,e,e));
O(.salloc,  T(e,l,e,e, e,x,e,e));
O(.xidiv,   T(w,l,e,e, x,x,e,e), P(0,0,0), X(1,0,0), V(0));
O(.xdiv,    T(w,l,e,e, x,x,e,e), P(0,0,0), X(1,0,0), V(0));
O(.xcmp,    T(w,l,s,d, w,l,s,d), P(0,0,0), X(1,1,0), V(0));
O(.xtest,   T(w,l,e,e, w,l,e,e), P(0,0,0), X(1,1,0), V(0));
O(.acmp,    T(w,l,e,e, w,l,e,e));
O(.acmn,    T(w,l,e,e, w,l,e,e));
O(.afcmp,   T(e,e,s,d, e,e,s,d));
O(.reqz,    T(w,l,e,e, x,x,e,e));
O(.rnez,    T(w,l,e,e, x,x,e,e));

/* Arguments, Parameters, and Calls */
O(.par,     T(x,x,x,x, x,x,x,x));
O(.parsb,   T(x,x,x,x, x,x,x,x));
O(.parub,   T(x,x,x,x, x,x,x,x));
O(.parsh,   T(x,x,x,x, x,x,x,x));
O(.paruh,   T(x,x,x,x, x,x,x,x));
O(.parc,    T(e,x,e,e, e,x,e,e));
O(.pare,    T(e,x,e,e, e,x,e,e));
O(.arg,     T(w,l,s,d, x,x,x,x));
O(.argsb,   T(w,e,e,e, x,x,x,x));
O(.argub,   T(w,e,e,e, x,x,x,x));
O(.argsh,   T(w,e,e,e, x,x,x,x));
O(.arguh,   T(w,e,e,e, x,x,x,x));
O(.argc,    T(e,x,e,e, e,l,e,e));
O(.arge,    T(e,l,e,e, e,x,e,e));
O(.argv,    T(x,x,x,x, x,x,x,x));
O(.call,    T(m,m,m,m, x,x,x,x));

/* Flags Setting */  
flag :: T(x,x,e,e, x,x,e,e);
O(.flagieq,  flag, P(0,0,0), X(0,0,1), V(0));
O(.flagine,  flag, P(0,0,0), X(0,0,1), V(0));
O(.flagisge, flag, P(0,0,0), X(0,0,1), V(0));
O(.flagisgt, flag, P(0,0,0), X(0,0,1), V(0));
O(.flagisle, flag, P(0,0,0), X(0,0,1), V(0));
O(.flagislt, flag, P(0,0,0), X(0,0,1), V(0));
O(.flagiuge, flag, P(0,0,0), X(0,0,1), V(0));
O(.flagiugt, flag, P(0,0,0), X(0,0,1), V(0));
O(.flagiule, flag, P(0,0,0), X(0,0,1), V(0));
O(.flagiult, flag, P(0,0,0), X(0,0,1), V(0));
O(.flagfeq,  flag, P(0,0,0), X(0,0,1), V(0));
O(.flagfge,  flag, P(0,0,0), X(0,0,1), V(0));
O(.flagfgt,  flag, P(0,0,0), X(0,0,1), V(0));
O(.flagfle,  flag, P(0,0,0), X(0,0,1), V(0));
O(.flagflt,  flag, P(0,0,0), X(0,0,1), V(0));
O(.flagfne,  flag, P(0,0,0), X(0,0,1), V(0));
O(.flagfo,   flag, P(0,0,0), X(0,0,1), V(0));
O(.flagfuo,  flag, P(0,0,0), X(0,0,1), V(0));

// (mine) bit fiddling 
O(.bitswap,   T(w,l,e,e, x,x,e,e), P(1,1,0), X(0,0,0), V(0));
O(.byteswap,  T(w,l,e,e, x,x,e,e), P(1,1,0), X(0,0,1), V(0));
O(.rotr,      T(w,l,e,e, w,w,e,e), P(1,1,0), X(0,0,0), V(0));
O(.rotl,      T(w,l,e,e, w,w,e,e), P(1,1,0), X(0,0,0), V(0));
O(.ctz,       T(w,l,e,e, x,x,e,e), P(1,0,0), X(0,1,0), V(0));
O(.clz,       T(w,l,e,e, x,x,e,e), P(1,0,0), X(0,1,0), V(0));
O(.ones,      T(w,l,e,e, x,x,e,e), P(1,1,0), X(0,0,0), V(0));
O(.sqrt,      T(e,e,s,d, e,e,x,x), P(1,1,0), X(0,0,0), V(0));
O(.min,       T(e,e,s,d, e,e,s,d), P(1,0,0), X(0,0,0), V(0));
O(.max,       T(e,e,s,d, e,e,s,d), P(1,0,0), X(0,0,0), V(0));

// (mine) 
O(.asm,           T(w,e,e,e, x,e,e,e));
O(.syscall,       T(w,w,w,w, x,x,x,x));
O(.cas0,          T(l,l,l,l, x,x,x,x));
O(.cas1,          T(w,l,e,e, w,l,e,e));
O(.assert,        T(w,w,w,w, x,x,x,x));  // TODO: should probably get rid of this
O(.trace_start,   T(x,x,e,e, x,x,e,e));
O(.trace_prev,    T(l,l,e,e, x,x,e,e));
O(.trace_return,  T(l,l,e,e, x,x,e,e));
O(.llcast,        T(e,e,e,e, e,e,e,e));  // TODO: either get rid of this or commit to finishing llvm target

// (mine) wasm
O(.truncl,        T(l,l,l,l, x,x,x,x), P(1,0,0), X(0,0,0), V(0));  // TODO: should be leee xeee
O(.push,          T(w,l,s,d, x,x,x,x));
O(.pop,           T(x,x,x,x, x,x,x,x));
O(.call_indirect, T(w,w,w,w, e,e,e,e));
O(.global_get,    T(x,x,x,x, x,x,x,x));
O(.global_set,    T(l,l,l,l, w,l,s,d));
O(.flow,          T(e,e,e,e, e,e,e,e));

// movCC frontend
O(.sel0,    T(w,e,e,e, x,e,e,e));
O(.sel1,    T(w,l,e,e, w,l,e,e));

// movCC backend
selcc :: T(w,l,s,d, w,l,s,d);
O(.selieq,  selcc);
O(.seline,  selcc);
O(.selisge, selcc);
O(.selisgt, selcc);
O(.selisle, selcc);
O(.selislt, selcc);
O(.seliuge, selcc);
O(.seliugt, selcc);
O(.seliule, selcc);
O(.seliult, selcc);
O(.selfeq,  selcc);
O(.selfge,  selcc);
O(.selfgt,  selcc);
O(.selfle,  selcc);
O(.selflt,  selcc);
O(.selfne,  selcc);
O(.selfo,   selcc);
O(.selfuo,  selcc);

    argcls
};
