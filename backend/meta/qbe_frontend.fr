#!/usr/bin/env franca
//! This is just for running Qbe's test files. 
//! As a convinence you can pass -r to run directly (if the qbe ir has a main() function and doesn't require a driver c program).
//! For Franca's normal interaction with the backend we just generate the ir in memory. 
// TODO: Should try to get Hare to compile with this instead of Qbe as a source of more tests. 
//       I'm a bit worried that there might be some shapes of programs that Franca never generates but I can't articulate an example.        

#include_std("backend/lib.fr");
//#include_std("backend/llvm/target.fr");  // TODO: update for Dat2

INCLUDE_MY_C_COMPILER :: true;

fn main() void = { 
    // Have to smuggle this through qbe's parser callback that doesn't let you pass a data pointer.
    global_module :: @static(QbeModule);
    
    outpath := "-";
    inpath := "-";
    run := false;
    debug := false;
    args := cli_args();
    pop :: fn() => {
        args.ptr = args.ptr.offset(1);
        args.len -= 1;
    };
    flags := i64.list(temp());
    goal: QbeOutputPurpose = .Exe;
    arch := query_current_arch();
    os := query_current_os();
    use_llvm :: @static(bool) false;
    iamtheccompilernow := false;
    while => args.len > 0 {
        a := args[0].str();
        @switch(a) {
            @case("-t?") => exit(0); // TODO: qbe prints the name of default target
            @case("-t") => { 
                pop();
                target := args[0].str(); // TODO
                @switch(target) {
                    @case("arm64_apple") => { arch = .aarch64; os = .macos; };
                    @case("amd64_apple") => { arch = .x86_64; os = .macos; };
                    @case("amd64_sysv")  => { arch = .x86_64; os = .linux; };
                    @case("arm64")       => { arch = .aarch64; os = .linux; };
                    @case("wasm32") => { arch = .wasm32; os = .wasip1; };
                    @default => @panic("unsupported target option '%'", target);
                };
                pop();
            };
            @case("franca") => pop();
            @case("-o") => {
                pop();
                outpath = args[0].str();
                pop();
            };
            @case("-d") => {
                debug = true;
                pop();
                for args[0].str() { c |     
                    found := false;
                    for_enum Qbe.DebugKey { key | 
                        if key.raw() == c.zext() {
                            found = true;
                        }
                    };
                    @assert(found, "invalid -d flag %", c);
                    flags&.push(c.zext());
                };
                pop();
            };
            @case("-r") => {
                run = true;
                goal = .JitOnly;
                pop();
            };
            @case("-h") => {
                print(HELP);
                exit(0);
            };
            @case("-c") => {
                goal = .Relocatable;
                pop();
            };
            @case("-l") => {
                use_llvm[] = true;
                pop();
            };
            @case("-cc") => {
                @assert(INCLUDE_MY_C_COMPILER, "didn't INCLUDE_MY_C_COMPILER can't -cc");
                iamtheccompilernow = true;
                pop();
            };
            @default => {
                if a.ends_with(".fr") {// TODO: ugh don't care about the file extension 
                    pop();
                } else {
                    if a.starts_with("-") && a != "-" {
                        @panic("Unknown option %", a);
                    };
                    inpath = a;
                    pop();
                }
            };
        };
    };
    init_default_module(global_module, (type = goal, os = os, arch = arch), false);
    for flags { d | 
        global_module[].debug.items()[d] = true;
    };
    if use_llvm[] {
        @panic("TODO: update for Dat2");
        // use_llvm_backend(global_module);
    };
    
    ::if(Fd);
    outfile := if run {    
        open_trunc(@as(CStr) "/dev/null").unwrap()
    } else {
        if outpath == "-" {
            STD_OUT
        } else {
            open_trunc(outpath.maybe_borrow_cstr(temp())) || @panic("failed to open output '%'", outpath)
        }
    };
    handle_dbg :: fn(s: CStr) void = ();
    
    handle_fn :: fn(fnn: *Qbe.Fn) void = {
        run_qbe_passes(fnn);
    };
    handle_data :: fn(d: Dat2) void = {
        global_module.emit_data(d);
    };
    src := temp().read_to_string_or_crash(inpath);
    src&.push_all("\n"); // HACK
    src := src.items();
    parse :: import("@/backend/meta/parse.fr").parse_top_level;
    res := parse(global_module, src, handle_data, handle_fn, iamtheccompilernow);
    if res&.is_err() {
        panic(res.Err);
    };
    @if(INCLUDE_MY_C_COMPILER) if iamtheccompilernow {
        #use("@/examples/import_c/lib.fr");
        m := global_module;
        c := Compile.Ctx.zeroed();
        init_ctx(c&, m);
        
        objs := catch_call(c&, *Compile.Obj) {
            // TODO: this way of doing it means you lose location information which sucks
            tok := c&.tokenize_string(">>>driver", res.Ok&);
            tok  = c&.Preprocess'preprocess(tok);
            c&.Compile'parse(tok)
        };
        objs := objs.or(panic);
        
        // not using for_defs because that assumes the wrong root (it doesn't know about our .ssa functions)
        // if you want to use this for serious programs (instead of the tiny tests), 
        // should change that so you get the optimisation formerly known as LTO
        for_linked objs { obj |
            if obj.is_definition {
                id := obj.global_symbol.unwrap();
                if obj.is_function {
                    f := obj.f;
                    fill_lnk(f.lnk&, obj, m);
                    run_qbe_passes(f);
                } else {
                    for translate_data(m, obj) { dat |
                        m.emit_data(dat);
                    }
                }
            }
        }
    }

    global_module.emit_suspended_inlinables();
    chunks := {global_module[].target.finish_module}(global_module);
    for chunks { chunk | 
        write(outfile&, chunk);
    };
    @if(outpath != "-") { close(outfile); };
    if run {
        @if(is_linking_libc()) global_module.fill_from_libc();
        global_module.make_exec();
        f := or global_module.get_addr("main") {
            panic("couldn't find main()")
        };
        f := assume_types_fn(Arg = void, Ret = i64, ptr = f);
        status := f();
        exit(status);
    };
    exit(0);
}

// This is not what you want if you care about cross compiling!
fn fill_from_libc(self: *QbeModule) void = {
    Dyn :: import("@/lib/dynamic_lib.fr");

    // :SLOW insanely inefficient way of doing this. especially when someone tries to add multiple libs. 
    // TODO: store a list of the pending ones so don't have to iterate them all. 
    // This is not what you want if you care about cross compiling!
    fn fill_pending_dynamic_imports(self: *QbeModule, lib: Dyn.Handle) void = {
        for_symbols self { id, symbol |  // :SLOW  just keep list of pending symbols instead
            if symbol.kind == .Pending {
                self.imports&.push(id); 
                if lib.get(symbol.name) { found |
                    symbol.kind = .DynamicPatched;
                    self.do_fixups(found, symbol);
                };
            };
        };
    }

    for find_os_libc_dylib() { libc_path | 
        if Dyn'open(libc_path) { libc |
            self.fill_pending_dynamic_imports(libc);
        };
    };
}

HELP :: """qbe_frontend [OPTIONS] {file.ssa, -}
	-h          prints this help.
	-o file     output to file.
	-d <flags>  dump debug information.
	-r          jit and run main() without outputting asglobal_module.
	            can call functions from libc.
	-l          output llvm ir instead
""";
