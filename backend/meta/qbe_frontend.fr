#!/usr/bin/env franca
//! This is just for running Qbe's test files. 
//! As a convinence you can pass -r to run directly (if the qbe ir has a main() function and doesn't require a driver c program).
//! For Franca's normal interaction with the backend we just generate the ir in memory. 
// TODO: Should try to get Hare to compile with this instead of Qbe as a source of more tests. 
//       I'm a bit worried that there might be some shapes of programs that Franca never generates but I can't articulate an example.        

#include_std("backend/lib.fr");
//#include_std("backend/llvm/target.fr");  // TODO: update for Dat2

INCLUDE_MY_C_COMPILER :: true;

Args :: @struct {
    t: TargetId #help("target environment") = .native;
    o: Str #help("output file path") = "-";
    d: Str #help("log intermediate representation") = "";
    r: bool #help("jit and run main() without outputting an exe. can call functions from libc.") = false;
    c: bool #help("output a relocatable object file") = false;
    l: bool #help("TODO: output llvm ir instead") = false;
    h: bool #help("show this help text") = false;
    cc: bool #help("use my import_c to compile '>>> driver' comments") = false;
    frc: bool #help("output .frc binary ir") = false;
    @"t?": bool #help("TODO: query the native target") = false;
    paths: []Str #rest = empty();
}

fn main() void = { 
    // Have to smuggle this through qbe's parser callback that doesn't let you pass a data pointer.
    global_module :: @static(QbeModule);
    
    #use("@/lib/args.fr");
    HELP :: collect_help(Args, "qbe_frontend [OPTIONS] {file.ssa, -}");
    args := parse_args(Args);
    
    ::enum(TargetId);
    arch, os := args.t.splat_env();
    if args.h {
        print(HELP);
        exit(0);
    }
    if args.@"t?" {
        exit(0); // TODO: qbe prints the name of default target
    }
    
    outpath := args.o;
    inpath := "-";
    debug := args.d != "";
    is_args := false;
    cli_args := (*u8).list(temp());
    for args.paths { a |
        continue :: local_return;
        if is_args {
            cli_args&.push(a.ptr);  // happen to know that these are c strings so this is fine
            continue();
        };
        if a == "--" {
            is_args = true;
            continue();
        };
        if !a.ends_with(".fr") {// TODO: ugh don't care about the file extension 
            if a.starts_with("-") && a != "-" {
                @panic("Unknown option %", a);
            };
            inpath = a;
        }
    };
    goal: QbeOutputPurpose = @if_else {
        @if(args.r) => .JitOnly;
        @if(args.c) => .Relocatable;
        @if(args.frc) => .Cached;
        @else => .Exe;
    };
    @assert(!args.cc || INCLUDE_MY_C_COMPILER, "didn't INCLUDE_MY_C_COMPILER can't -cc");
    @assert_le(int(args.c) + int(args.r) + int(args.frc), 1, "conflicting output type");
    init_default_module(global_module, (type = goal, os = os, arch = arch), false);
    set_debug_types(global_module, args.d, true);
    if args.l {
        @panic("TODO: update for Dat2");
        // use_llvm_backend(global_module);
    };
    
    ::if(Fd);
    outfile := if args.r {    
        open_trunc(@as(CStr) "/dev/null").unwrap()
    } else {
        if outpath == "-" {
            STD_OUT
        } else {
            open_trunc(as_cstr outpath)
                || @panic("failed to open output '%'", outpath)
        }
    };
    
    src := temp().read_to_string_or_crash(inpath);
    src&.push_all("\n"); // HACK
    src := src.items();
    
    m := global_module;
    magic8 := ptr_cast_unchecked(u8, u64, src.ptr)[];
    if magic8 == Incremental.MAGIC {
        header: *Incremental.Header = check(src);
        t := Incremental'pack_target(m.goal.arch, m.goal.os);
        @assert_eq(header.arch_os, t, "% was compiled for different target", inpath);
        compile_all_symbols(header, m);
    } else {
        handle_data :: fn(d: Dat2) void = {
            global_module.emit_data(d);
        };
        parse :: import("@/backend/meta/parse.fr").parse_top_level;
        res := parse(global_module, src, handle_data, run_qbe_passes, args.cc);
        if res&.is_err() {
            panic(res.Err);
        };
        
        // TODO: scoping super doesn't work :FUCKED :Compiler repro at tests/todo/e.fr -- May 24 2025
        //       if the #use is in the `if` block, it can't find the `res` variable
        #use("@/examples/import_c/lib.fr");
        @if(INCLUDE_MY_C_COMPILER) 
        if args.cc {
            c := Compile.Ctx.zeroed();
            init_ctx(c&, m);
            objs := catch_call(c&, *Compile.Obj) {
                // TODO: this way of doing it means you lose location information which sucks
                tok := c&.tokenize_string(">>>driver", res.Ok&);
                tok  = c&.Preprocess'preprocess(tok);
                c&.Compile'parse(tok)
            };
            objs := objs.or(panic);
            
            // not using for_defs because that assumes the wrong root (it doesn't know about our .ssa functions)
            // if you want to use this for serious programs (instead of the tiny tests), 
            // should change that so you get the optimisation formerly known as LTO
            for_linked objs { obj |
                if obj.is_definition {
                    id := obj.global_symbol.unwrap();
                    if obj.is_function {
                        f := obj.f;
                        fill_lnk(f.lnk&, obj, m);
                        run_qbe_passes(f);
                    } else {
                        for translate_data(m, obj) { dat |
                            m.emit_data(dat);
                        }
                    }
                }
            }
        };
        
        global_module.emit_suspended_inlinables();
    };
    
    chunks := {global_module[].target.finish_module}(global_module);
    for chunks { chunk | 
        write(outfile&, chunk);
    };
    @if(outpath != "-") { close(outfile); };
    if args.r {
        @if(is_linking_libc()) global_module.fill_from_libc();
        global_module.make_exec();
        f := or global_module.get_addr("main") {
            panic("couldn't find main()")
        };
        f := assume_types_fn(Arg = Ty(i64, **u8), Ret = i64, ptr = f);
        cli_args&.insert(0, "thisisjittedcodegoodluckwiththat.exe\0".as_ptr());
        status := f(cli_args.len, cli_args.maybe_uninit.ptr);
        exit(status);
    };
    exit(0);
}

TargetId :: @enum(i64) (native, arm64_apple, amd64_apple, amd64_sysv, arm64, wasm32);
fn splat_env(t: TargetId) Ty(Arch, Os) = @match(t) {
    fn arm64_apple() => (.aarch64, .macos);
    fn amd64_apple() => (.x86_64, .macos);
    fn amd64_sysv()  => (.x86_64, .linux);
    fn arm64()       => (.aarch64, .linux);
    fn wasm32()      => (.wasm32, .wasip1);
    fn native()      => (query_current_arch(), query_current_os());
};

// TODO: use #where
fn parse_from_args(args: []CStr, i: *i64) TargetId = {
    n: Str = parse_from_args(args, i);
    t := TargetId.from_name(n);
    t || @panic("invalid target '%'", n)
}

// This is not what you want if you care about cross compiling!
fill_from_libc :: fn(self: *QbeModule) void = {
    Dyn :: import("@/lib/dynamic_lib.fr");

    // :SLOW insanely inefficient way of doing this. especially when someone tries to add multiple libs. 
    // TODO: store a list of the pending ones so don't have to iterate them all. 
    // This is not what you want if you care about cross compiling!
    fill_pending_dynamic_imports :: fn(self: *QbeModule, lib: Dyn.Handle) void = {
        for_symbols self { id, symbol |  // :SLOW  just keep list of pending symbols instead
            if symbol.kind == .Pending && symbol.fixups.len != 0 {
                self.imports&.push(id); 
                if lib.get(symbol.name) { found |
                    symbol.kind = .DynamicPatched;
                    self.do_fixups(found, symbol);
                };
            };
        };
    }

    for find_os_libc_dylib() { libc_path | 
        if Dyn'open(libc_path) { libc |
            self.fill_pending_dynamic_imports(libc);
        };
    };
    
    self.flush_debug();
}

#use("@/lib/sys/fs.fr");
