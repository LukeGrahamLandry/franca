#!/usr/bin/env franca
//! This is just for running Qbe's test files. 
//! As a convinence you can pass -r to run directly (if the qbe ir has a main() function and doesn't require a driver c program).
//! For Franca's normal interaction with the backend we just generate the ir in memory. 
// TODO: Should try to get Hare to compile with this instead of Qbe as a source of more tests. 
//       I'm a bit worried that there might be some shapes of programs that Franca never generates but I can't articulate an example.        

Qbe :: import("@/backend/lib.fr");

INCLUDE_MY_C_COMPILER :: true;

Args :: @struct {
    t: TargetId #help("target environment") = .native;
    o: Str #help("output file path") = "-";
    d: Str #help("log intermediate representation") = "";
    r: bool #help("jit and run main() without outputting an exe. can call functions from libc.") = false;
    c: bool #help("output a relocatable object file") = false;
    h: bool #help("show this help text") = false;
    cc: bool #help("use my import_c to compile '>>> driver' comments") = false;
    frc: bool #help("output .frc binary ir") = false;
    frc_inlinable: bool #help("output .frc binary ir (before regalloc)") = false;
    @"t?": bool #help("TODO: query the native target") = false;
    force_static_builtin_memmove: bool = false;  // hack for static builds with harec. TODO: formalize this? 
    paths: []Str #rest = empty();
}

main :: fn() void = { 
    import("@/lib/crash_report.fr")'hook_backtrace();
    
    #use("@/lib/args.fr");
    HELP :: collect_help(Args, "qbe_frontend [OPTIONS] {file.ssa, -}");
    full_args := cli_args();
  
    fn eq(a: *CStr, b: *CStr) bool = a[] == b[].str();
    end := full_args.len;
    if full_args.index_of(@as(CStr) "--") { i |
        end = i;
    };
    cli_args: List(CStr) = full_args.rest(min(full_args.len, end+1)).clone(temp());
    
    args: Args = ();
    parse_args(Args, args&, full_args.slice(1, end));
    
    ::enum(TargetId);
    arch, os := args.t.splat_env();
    if args.h {
        print(HELP);
        return();
    }
    if args.@"t?" {
        return(); // TODO: qbe prints the name of default target
    }
    
    outpath := args.o;
    inpath := "-";
    debug := args.d != "";
    is_args := false;
    for args.paths { a |
        if !a.ends_with(".fr") {// TODO: ugh don't care about the file extension 
            if a.starts_with("-") && a != "-" {
                @panic("Unknown option %", a);
            };
            inpath = a;
        }
    };
    args.frc = args.frc || args.frc_inlinable;
    goal: Qbe.OutputPurpose = @if_else {
        @if(args.r) => .JitOnly;
        @if(args.c) => .Relocatable;
        @if(args.frc_inlinable) => .CachedEarly;
        @if(args.frc) => .Cached;
        @else => .Exe;
    };
    @assert(!args.cc || INCLUDE_MY_C_COMPILER, "didn't INCLUDE_MY_C_COMPILER can't -cc");
    @assert_le(int(args.c) + int(args.r) + int(args.frc), 1, "conflicting output type");
    m := Qbe.Module.zeroed(); m := m&;
    Qbe'backend'init_module(m, (type = goal, os = os, arch = arch, exe_debug_symbol_table = true, prefer_libc_memmove = !args.force_static_builtin_memmove));
    set_debug_types(m, args.d, true);
    
    ::if(Fd);
    outfile := if args.r {    
        open_trunc(@as(CStr) "/dev/null").unwrap()
    } else {
        if outpath == "-" {
            STD_OUT
        } else {
            open_trunc(as_cstr outpath)
                || @panic("failed to open output '%'", outpath)
        }
    };
    
    src := temp().read_to_string_or_crash(inpath);
    src&.push_all("\n"); // HACK
    src := src.items();
    
    magic8 := ptr_cast_unchecked(u8, u64, src.ptr)[];
    if magic8 == Qbe.Incremental.MAGIC {
        H :: *Qbe.Incremental.Header;
        ::Result(H, Str);
        header: H = or check(src) { e |
            @panic("invalid frc file: %", e)
        };
        t := Qbe'Incremental'pack_target(m.goal.arch, m.goal.os);
        @assert_eq(header.arch_os.bit_and(t), t, "% was compiled for different target", inpath);
        Qbe'backend'load_all(header, m);
    } else {
        parse :: import("@/backend/meta/parse.fr").parse_top_level;
        res := parse(m, src, Qbe'backend'compile_dat, Qbe.backend.compile_fn, args.cc);
        if res&.is_err() {
            panic(res.Err);
        };
        
        // TODO: scoping super doesn't work :FUCKED :Compiler repro at tests/todo/e.fr -- May 24 2025
        //       if the #use is in the `if` block, it can't find the `res` variable
        #use("@/examples/import_c/lib.fr");
        #use("@/examples/import_c/ffi.fr");
        if args.cc && res.Ok.len > 0 {
            c := Compile.Ctx.zeroed();
            import_c'init_c(c&, m);
            c.enqueue_task = Qbe.backend.worker_enqueue;
            ctx: *Compile.CodegenShared = Qbe'backend'worker_start(m, general_allocator(), zeroed Compile.CodegenWorker, false);
            c.emitter = (Some = ctx);
            // TODO: this way of doing it means you lose location information which sucks
            result := import_c'compile_c(c&, ">>>driver", res.Ok&.items());
            result.or(fn(e) => panic(e));
            c.arena_storage&.deinit();
            Qbe'backend'worker_join(ctx);
            res.Ok&.drop();
        };
        m.Qbe'backend'compile_suspended();
    };
    
    chunks := {m.target.finish_module}(m);
    for chunks { chunk | 
        write(outfile&, chunk); 
    };
    @if(outpath != "-") { Syscall'close(outfile); };
    if args.r {
        Crash :: import("@/lib/crash_report.fr");
    
        @if(is_linking_libc()) m.fill_from_libc();
        m.make_exec();
        f := or m.get_addr("main") {
            panic("couldn't find main()")
        };
        f := assume_types_fn(Arg = Ty(i64, *CStr, *CStr), Ret = i64, ptr = f);
        cli_args&.insert(0, "thisisjittedcodegoodluckwiththat.exe");
        cli_args&.push(zeroed(CStr));
        envp := context(DefaultContext)[].environment_variables;
        status := f(cli_args.len - 1, cli_args.maybe_uninit.ptr, envp);
        @if(status != 0) @panic("Returned status %", status);
    };
    drop(m);
}

TargetId :: @enum(i64) (native, arm64_apple, amd64_apple, amd64_sysv, arm64, wasm32, rv64);
fn splat_env(t: TargetId) Ty(Arch, Os) = @match(t) {
    fn arm64_apple() => (.aarch64, .macos);
    fn amd64_apple() => (.x86_64, .macos);
    fn amd64_sysv()  => (.x86_64, .linux);
    fn arm64()       => (.aarch64, .linux);
    fn wasm32()      => (.wasm32, .wasip1);
    fn native()      => (query_current_arch(), query_current_os());
    fn rv64()        => (.rv64, .linux);
};

// TODO: use #where
fn parse_from_args(args: []CStr, i: *i64) TargetId = {
    n: Str = parse_from_args(args, i);
    t := TargetId.from_name(n);
    t || @panic("invalid target '%'", n)
}

// This is not what you want if you care about cross compiling!
fill_from_libc :: fn(self: *Qbe.Module) void = {
    Dyn :: import("@/lib/dynamic_lib.fr");

    // :SLOW insanely inefficient way of doing this. especially when someone tries to add multiple libs. 
    // TODO: store a list of the pending ones so don't have to iterate them all. 
    // This is not what you want if you care about cross compiling!
    fill_pending_dynamic_imports :: fn(self: *Qbe.Module, lib: Dyn.Handle) void = {
        for_symbols self { id, symbol |  // :SLOW  just keep list of pending symbols instead
            if symbol.kind == .Pending && symbol.fixups.len != 0 {
                self.imports&.push(id); 
                if lib.get(symbol.name) { found |
                    self.put_jit_addr(id, found);
                };
            };
        };
    }

    for find_os_libc_dylib() { libc_path | 
        if Dyn'open(libc_path) { libc |
            self.fill_pending_dynamic_imports(libc);
        };
    };
    
    self.flush_debug();
}

#use("@/lib/sys/fs.fr");
