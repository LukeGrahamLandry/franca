//!
//! Parse a string of Qbe IR and generate code for the corresponding sequence of emit() calls.
//! This avoids large blocks of code that need to be read backwards. 
//! You can tell it's a problem because the qbe c code has the ir text in a comment near a few particularly large chunks of emit() calls.
//! Importantly all the parsing happens at comptime, the code executed at runtime 
//! (of the ir compiler) should be about the same you would have written manually. 
//!
//! Usage: `@emit_instructions((f: *Qbe.Fn, b: *Qbe.Fn, emit: @Fn(f,o,k,r,a0,a1) *Qbe.Ins), (...args), src: Str);`
//! - single block: don't provide `b`, instructions will just go in f.globals.scratch
//! -  multi block: provide `b`
//! - `emit` is optional and defaults to... fn emit
//! It's intended to be used in the middle of a pass where you eventually call copy_instructions_from_scratch().
//! - The ir text can reference the `args` you pass in (which can be Qbe.Ref or Qbe.Cls) by index.
//!   i.e. `@emit_instructions(f, output, second_input, .Kl, "%0 =2 add 10, %1");`
//! - RSlot/RInt are integers prefixed by S/I respectively.
//! - Parsing RType/RMem/RCall is not supported yet, but they can be passed in as arguments.
//!

// TODO: should make it possible to split this up more. need to make ScopeId a more first class value. 
//       so you can have a @{} expression and give it a parent scope. 
//       but that means always delaying resolve until later in sema which will probably painful because sema is a mess. 
//       -- Apr 9, 2025

#use("@/backend/meta/parse.fr") 
#use("@/backend/lib.fr")
fn emit_instructions(in: FatExpr) FatExpr #macro = {
    e := in&.items();
    named := e.index(0);
    rt_f := get_from_pattern(named, @symbol f) || compile_error("named parameter 'f' is required", in.loc);
    rt_f := compile_ast(rt_f[]);
    rt_block := @{};
    expect_multiple_blocks := false;
    if get_from_pattern(named, @symbol b) { b |
        expect_multiple_blocks = true;
        rt_block = b[];
    };
    
    Ins :: Ty(@slice(*Qbe.Fn, Qbe.O, Qbe.Cls, Qbe.Ref, Qbe.Ref, Qbe.Ref));
    emit_func := resolve_overload(emit, Ins, *Qbe.Ins, in.loc);
    if get_from_pattern(named, @symbol emit) { e |
        emit_func = const_eval(@type emit_func)(e[]);
    };
    forward := false;
    if get_from_pattern(named, @symbol forward) { e |
        forward = const_eval(bool)(e[]);
    };
    
    src_node := e[2];
    src := const_eval(Str)(src_node);
    args := e.index(1).items();
    m :: @static(QbeModule);
    if !m[].initialized {
        init_empty_for_template_only(m, ast_alloc());  // we keep this around forever
    };
    
    p := zeroed QParseCtx; p := p&;
    p[] = init(m, src);  
    p.f.default_init(m);  // :NeedFunctionInitForData
    p.f.reset_scratch();
    p.allow_unterminated_block = true;
    f, replacements := or parse_body(p) { err | 
        compile_error(err, src_node.loc)
    };
    
    @ct_assert(expect_multiple_blocks == (f.nblk != 1), src_node.loc, "iff creating multiple blocks, you must pass in the starting block.");
    
    fcc :: fixed_const_count;
    
    ref_count := f.ntmp.zext() - Qbe.Tmp0 + f.ncon.zext() - fcc;
    rt_map := FatExpr.list(ref_count, ast_alloc());
    rt_cls := repeated(@{Qbe.Cls.Kw}, args.len, ast_alloc());
    find :: fn(f: *Qbe.Fn, r: Qbe.Ref) ?i64 = {
        first, off, cap := @match(rtype(r)) {
            fn RTmp() => (Qbe.Tmp0, 0 - Qbe.Tmp0, f.ntmp.zext());
            fn RCon() => (fcc, f.ntmp.zext() - fcc - Qbe.Tmp0, f.ncon.zext());
            @default => return(.None);
        };
        @debug_assert(r.val() < cap);
        r.val() >= first || return(.None);
        (Some = r.val() + off)
    };
    any_cls_args := false;
    enumerate args { i, a | 
        a[] = compile_ast(a[]);
        if a.ty == Qbe.Cls {
            rt_cls[i] = a[];
            any_cls_args = true;
        } else {
            @ct_assert(a.ty == Qbe.Ref || a.ty == i64, a.loc, "template arg must be Ref or Cls or int");
        };
    };
    @{
        rt_f := @[rt_f];
        rt_block_start := @[rt_block];
        rt_block := Qbe.Blk.ptr_from_int(0);
        k: []Qbe.Cls = empty();
        @[{
            enumerate f.tmp.slice(Qbe.Tmp0, f.ntmp.zext()) { i, t |
                if t.visit != 0 {
                    arg_index: i64 = t.visit.intcast() - 1;
                    if args[arg_index].ty == i64 {
                        args[arg_index] = @{ getcon(rt_f, @[args[arg_index]]) };
                    };
                    rt_map&.push(args[arg_index]);
                } else {
                    n2 := @if(Qbe.TRACK_IR_NAMES, {
                        n := t.name();
                        // TODO: why doesn't `n.sym().str()` do what i want? you just get junk.
                        n.shallow_copy(ast_alloc())
                    }, "");
                    
                    rt_k := @literal t.cls;
                    each replacements { rep |
                        if rep.r == TMP(i + Qbe.Tmp0) {
                            rt_k = @{ k[@[@literal rep.key]] };
                        };
                    };
                    
                    rt_map&.push(@{ newtmp(rt_f, @[@literal n2], @[rt_k]) });
                };
            };
            enumerate f.con.slice(fcc, f.ncon.zext()) { i, c |
                ::enum(Qbe.ConType);
                // TODO: i feel like this should work as `c := @[@literal c[]]` but that doesn't repro. 
                rt_map&.push(@{ 
                    cc: Qbe.Con = (sym = (id = Qbe.no_symbol), bits = @[@literal c.bits]); 
                    @[if c.type() == .CAddr {
                        @{ s := @[@literal m.str(c.sym)]; cc.sym = rt_f.globals.intern(s); }
                    } else {
                        @{}
                    }];
                    newcon(rt_f, cc&)
                });
            };
            
            in.expr.Tuple = rt_map.as_raw();
            in.ty = UnknownType;
            classes := in;
            classes.expr.Tuple = rt_cls.as_raw();
            classes.ty = UnknownType;
            classes = if(any_cls_args, => @{ @slice(@[classes]) }, => @{empty()});
            @{
                k = @[classes]; // this was forward declared so the rt_k above can bind to them based on `replacements` 
                refs := @slice(@[in]);
                rt_block_map := @uninitialized Array(*Qbe.Blk, @[@literal @as(i64) f.nblk.zext()]);
                @[{                    
                    translate_ref :: fn(f: *Qbe.Fn, r: Qbe.Ref, loc: Span) FatExpr = {
                        ::assert_eq(Qbe.RegKind.enum_count(), 8);
                        t := rtype(r);
                        needs_remap := (t == .RCon && r.val() >= fcc) || (t == .RTmp && r.val() >= Qbe.Tmp0);
                        @ct_assert(!@is(t, .RType, .RMem), loc, "TODO: unhandled ref type in template. pass RType/RMem as argument instead for now.");
                        if needs_remap {
                            i := or f.find(r) {
                                compile_error("unbound ref", loc)
                            };
                            indexer :: resolve_overload(index, Ty([]Qbe.Ref, i64), *Qbe.Ref, Span.zeroed());
                            @{ @[@literal indexer](refs, @[@literal i])[] }
                        } else {  // RInt, RSlot, RCall, RNull + fixed RTmp/RCon
                            @literal r 
                        }
                    };
                    
                    get_rt_block :: fn(i: i64) FatExpr = {
                        @{ rt_block_map&[@[@literal i]] }
                    };
                    
                    get_blocks :: fn(f: *Qbe.Fn) []*Qbe.Blk = {
                        blocks := list(*Qbe.Blk, temp());
                        for_blocks f { b | 
                            blocks&.push(b);
                        };
                        blocks.items()
                    };
                    
                    emit_func := @literal emit_func;
                    body := FatExpr.list(ast_alloc());
                    do_bodies(emit_func&, body&, replacements, f, src_node.loc, forward);
                    do_bodies :: fn(emit_func: *FatExpr, body: *List(FatExpr), reps: [](Replacement), f: *Qbe.Fn, loc: Span, forward: bool) void = {
                        has_multiple_blocks := f.nblk != 1;
                        blocks := get_blocks(f);
                        block_index: i64 = f.nblk.zext();
                        for_rev blocks { b |
                            block_index -= 1;
                            n := b.ins.len;
                            range(0, n) { j |
                                if !forward {
                                    j = n - j - 1;
                                };
                                i    := b.ins.index(j);
                                ct_k := @literal i.cls();
                                to   := f.translate_ref(i.to, loc);
                                each reps { rep |
                                    if i.to == rep.r {
                                        ct_k = @{ k[@[@literal rep.key]] };
                                    };
                                };
                                a0 := f.translate_ref(i.arg&[0], loc);
                                a1 := f.translate_ref(i.arg&[1], loc);
                                body.push(@{ 
                                    @[emit_func[]](rt_f, @[@literal i.op()], @[ct_k], @[to], @[a0], @[a1]); 
                                });
                            };
                            if has_multiple_blocks {
                                body.push(@{ 
                                    @[get_rt_block(block_index)] = @[if block_index != 0 {
                                        @{ split(rt_f, rt_block_start) }    
                                    } else {
                                        @{ rt_block_start }
                                    }];
                                });
                            } else {
                                @ct_assert(b.jmp.type == .Jxxx, loc, "single block template cannot have terminators");
                            };
                        };
                    };
                    
                    if f.nblk != 1 {
                        do_terminators(body&, replacements, f, src_node.loc);
                    } else {
                        ::ptr_utils(Qbe.Phi);
                        @ct_assert(f.start.phi.is_null(), src_node.loc, "cannot use phi nodes when creating only a single block");
                    };
                    do_terminators :: fn(body: *List(FatExpr), reps: []Replacement, f: *Qbe.Fn, loc: Span) void = {
                        translate_block :: fn(f: *Qbe.Fn, b: *Qbe.Blk) FatExpr = {
                            if b.is_null() {
                                return(@{ Qbe.Blk.ptr_from_int(0) });
                            };
                            i := 0;
                            for_blocks f { check | 
                                if b.identical(check) {
                                    return(get_rt_block(i));
                                };
                                i += 1;
                            };
                            panic("block not found")
                        };
                        
                        block_index := -1;
                        body.push(@{
                            b := @[get_rt_block(0)];
                            b0 := @[get_rt_block(f.nblk.zext() - 1)];
                            b0.jmp = b.jmp;
                            b0.s1 = b.s1;
                            b0.s2 = b.s2;
                            @assert(b.jmp.type != .switch, "TODO: J.switch in template");
                            for_jump_targets b { s | 
                                chpred(s, b, b0);
                            };
                        });
                        for_blocks f { b |
                            block_index += 1;
                            
                            body.push(@{
                                rt_block = @[get_rt_block(block_index)];
                            });
                            
                            for_phi b { p | 
                                arg_count := @literal @as(i64) p.narg.zext();
                                body.push(@{
                                    rt_block.new_phi(.Kl, @[arg_count], @[f.translate_ref(p.to, loc)]);
                                    rt_block.phi.narg = @[arg_count];
                                });
                                range(0, p.narg.zext()) { a |
                                    rt_a := @literal a;
                                    body.push(@{
                                        rt_block.phi.arg[@[rt_a]] = @[f.translate_ref(p.arg[a], loc)];
                                        rt_block.phi.blk[@[rt_a]] = @[translate_block(f, p.blk[a])];
                                    });
                                };
                            };
                            
                            ::enum(Qbe.J);
                            if b.jmp.type != .Jxxx {
                                @debug_assert(block_index != f.nblk.zext() - 1);
                                body.push(@{
                                    rt_block.jmp.type = @[@literal b.jmp.type];
                                    rt_block.jmp.arg = @[f.translate_ref(b.jmp.arg, loc)];
                                    rt_block.s1 = @[translate_block(f, b.s1)];
                                    rt_block.s2 = @[translate_block(f, b.s2)];
                                });
                            } else {
                                @debug_assert(block_index == f.nblk.zext() - 1);
                            }
                        };
                    };
                    
                    body.exprs_as_void(src_node.loc)
                }]
            }
        }]
    }
}
