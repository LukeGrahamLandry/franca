#!/usr/bin/env franca
// #foreign("clang", "wasm-validate"); 
//
//! You want the test runner external to the program being tested so you don't have to think about crashes. 
//! TODO: Maybe I should make it a goal to make this sort of script like thing less painful. 
// TODO: don't just shit executables everywhere with fixed names. want to be able to run things in parallel. 

Args :: @struct {
    // TODO: i want to allow the annotation on the end even when there's a default value
    bin: Str  #help("use precompiled backend executable") = "./backend/meta/qbe_frontend.fr"; 
    v:   bool #help("show output on failure") = false;
    x64: bool #help("target x64 instead of your native arch (useful for Rosetta 2)") = false;
    arm: bool #help("target arm64 instead of your native arch") = false;
    h:   bool #help("show this help text") = false;
    cc:  bool #help("use my c compiler (for test harnesses) instead of a system wide one") = false;
    w:   bool #help("target wasm32 and run with examples/import_wasm") = false;
    jit: bool #help("don't generate binaries, just run jitted code in memory.") = false;
    frc: bool #help("write out .frc binary ir and then read it back to compile") = false;
    frc_inlinable: bool #help("write out .frc binary ir (before regalloc) and then read it back to compile") = false;
    verify: bool #help("run wasm-validate to make sure it typechecks (requires installing WebAssembly/wabt)") = false;
    paths: []Str #rest = empty();
    d: Str #help("log intermediate representation") = "";
    keep := false;
    force_linker := false;
    skip_non_driver := false;
}

main :: fn() void = {
    #use("@/lib/args.fr");
    tests_folder := "backend/test";   // TODO: cli args for this too
    args := parse_args(Args);
    HELP :: collect_help(Args, "[test.fr] [options] ['all' or list of .ssa files]");
    
    to_run := Str.list(temp());
    wasm_runner: ?Str = .None;
    
    for args.paths { arg |
        continue :: local_return;
        
        if arg == "franca" || arg.ends_with(".fr") {
            continue();
        };
        if arg == "all" {
            files := collect_with_extension(tests_folder, ".ssa") 
                || panic("didn't find tests. run from franca root dir");
            for files { it |
                to_run&.push(@tfmt("%/%", tests_folder, it));
            };
            continue();
        };
        if arg.ends_with(".ssa") {
            to_run&.push(@tfmt("%/%", tests_folder, arg));
            continue();
        };
        
        println(HELP);
        @panic("unknown argument %\n", arg);
    };

    #use("@/lib/sys/process.fr");
    arch: Arch = @if_else {
        @if(args.x64) => .x86_64;
        @if(args.arm) => .aarch64;
        @if(args.w) => {
            wasm_runner = (Some = "./target/w.out");
            .wasm32
        };
        @else => query_current_arch();
    }
    if args.h {
        print(HELP);
        return();
    };
    args.frc = args.frc || args.frc_inlinable;
    args.cc = args.cc || args.jit || args.frc
        || args.w;  // assume this until i can output linkable wasm
    
    @assert(args.x64.int() + args.arm.int() + args.w.int() <= 1, "conflicting arch");
   
    if to_run.is_empty() {
        eprintln(HELP);
        panic("nothing to run. pass filepaths or 'all'");
    };
    @eprintln("Testing '%'", args.bin);
    if args.bin.ends_with(".fr") {
        eprintln("note: this is slow because it recompiles the backend for each test.");
    };
    make_dirs_or_crash("target/out");  // TODO: don't just shit files places perhaps
    os := query_current_os();
    
    Ctx :: @struct(args: *Args, arch: Arch, wasm_runner: ?Str);
    ctx: Ctx = (args = args&, arch = arch, wasm_runner = wasm_runner);
    
    @print("SKIP:[");
    ordered_retain to_run& { file |
        file := file[];
        skip := false
        || (arch != .aarch64 && file.ends_with("-arm.ssa"))
        || (arch != .x86_64 && file.ends_with("-amd.ssa"))
        // TODO: c header for signals on linux
        || ((arch == .wasm32 || os == .linux) && file.ends_with("-na.ssa"))
        ;
        @if(skip) @print("%, ", file);
        !skip
    };
    @println("]");
    
    run_tests_main_threaded(Ctx, Str, ctx, to_run.items(), fn(_, it) = it[], fn(ctx, file) = {
        run_one(ctx.args, file[], ctx.arch, ctx.wasm_runner)
    });
}

run_one :: fn(arg: *Args, file_path: Str, arch: Arch, wasm_runner: ?Str) Ty(bool, List(u8), List(u8), Str) #inline = {
    ::FmtPad(Str);
    qbe_path, verbose, flags, iamthecompilernow := (arg.bin, arg.v, arg.d, arg.cc);
    src := temp().read_to_string_or_crash(file_path).items(); // :panic
    name := chop_file_name(file_path);
    mangle :: fn(s) => @tfmt("target/out/%_%", name, s);
    driver_path := "driver.c".mangle();
    obj_path_mine := "q.o".mangle();
    obj_path_driver := "d.o".mangle();
    exe_path := "q.exe".mangle();
    sections := extract_sections(src);
    driver := sections&.get("driver");
    if arg.skip_non_driver && driver.is_none() {
        return(true, zeroed List(u8), zeroed List(u8), "SKIP");
    };
    if iamthecompilernow {
        driver = .None;
    }
    expected := sections&.get("output");
    
    my_path := if(driver.is_some() || arg.force_linker, => obj_path_mine, => exe_path);
    args := Str.list(temp());
    if driver.is_some() || arg.force_linker {
        args&.push("-c");
        @assert(wasm_runner.is_none(), "todo: c+wasm");
    };

    args&.push("-t");
    if wasm_runner.is_some() {
        // TODO: import_wasm shouldn't care about the file extension
        exe_path = "q.wasm".mangle();
        my_path = exe_path;
        args&.push("wasm32");
    } else {
        args&.push(qbe_target_name(arch, query_current_os()));
    };
    if flags != "" {
        args&.push("-d");
        args&.push(flags);
    };
    if iamthecompilernow {
        args&.push("-cc");
    }
    if arg.frc {
        args&.push("-frc");
    }
    if arg.frc_inlinable {
        args&.push("-frc_inlinable");
    }
    args&.push(file_path);
    a := timestamp();
    
    if arg.jit {
        args&.push("-r");
        args&.push("--");
        exe_path = qbe_path;
    } else {
        args&.push("-o");
        args&.push(my_path);
    }
    
    @if(!arg.jit) run(qbe_path, "gen ir");
    b := timestamp();
    
    clang_triple := target_triple(arch, query_current_os());
    
    show :: fn(exe: Str, what: Str) => if verbose {
        @print("\n% ", exe);
        for args { a |
            @print("% ", a);
        };
        println("");
    };
    run :: fn(exe: Str, what: Str) => {
        show(exe, what);
        ok, out, err := exec_and_catch(exe, args.items(), temp());
        if verbose {
            println(err.items());
            println(out.items());
        };
        if !ok {
            return(false, err, out, what);
        };
    };
    
    if driver { driver_src | 
        write_entire_file_or_crash(driver_path, driver_src);
        args&.clear();
        args&.push_all(@slice("-target", clang_triple, "-c", "-o", obj_path_driver, driver_path));
        run("clang", "driver");
    };
    
    if driver.is_some() || arg.force_linker {
        args&.clear();
        if driver { _ |
            args&.push(obj_path_driver);
        };
        args&.push_all(@slice(obj_path_mine, "-o", exe_path, "-target", clang_triple));
        run("clang", "link");
    }; // else we have our own codesign implementation so we're done
    @if(!arg.jit) args&.clear();
    old_exe_path := exe_path;
    if wasm_runner { wasm_runner |
        args&.push(exe_path);
        args&.push("--");
        exe_path = wasm_runner;
    };
    if arg.frc {
        args&.push(exe_path);
        args&.push("-r");
        args&.push("--");
        exe_path = qbe_path;
    };
    args&.push_all(@slice("a", "b", "c"));  // for echo.ssa
    show(exe_path, "run");
    ok, out, err := exec_and_catch(exe_path, args.items(), temp());
    if verbose {
        println(err.items());
        println(out.items());
    };
    if !ok {
        if wasm_runner.is_none() && !arg.jit && !arg.frc && !arg.keep {
            exe_path.three_trillion_dollars_does_not_buy_an_operating_system_that_works();
        };
        return(false, out, err, "run");
    };
    
    if expected { expected | 
        if expected != out.items() {
            name_len := file_path.len - file_path.pop_until_endswith(PATH_SEP).len();
            name := file_path.slice(file_path.len - name_len, file_path.len);
            old := @tfmt("target/%.old.txt", name);
            new := @tfmt("target/%.new.txt", name);
            write_entire_file_or_crash(old, expected);
            write_entire_file_or_crash(new, out.items());
            
            return(false, out, err,  @tfmt("[fail output] diff % %", old, new));
        };
    }; 
    d := timestamp();
    
    if arg.verify && wasm_runner.is_some() {
        args&.clear();
        args&.push(old_exe_path);
        args&.push("--enable-threads");
        run("wasm-validate", "verify");
    };
    
    extra := @if(arg.jit, "", @tfmt("%ms", b - a));
    (true, out, err, extra)
}

#use("@/lib/collections/map.fr");
extract_sections :: fn(src: Str) HashMap(Str, Str) = {
    results: HashMap(Str, Str) = init(temp());
    start_section := "# >>> ";
    while => src.len != 0 {
        while => src[0] != "#".ascii() {
            src = src.skip_line();
            if(src.len == 0, => return(results));
        };
        if src.starts_with(start_section) {
            name := {
                i := start_section.len;
                while => !src[i].is_ascii_whitespace() {
                    i += 1;
                };
                src.slice(start_section.len, i)
            };
            src = src.skip_line();
            out, new_src, nested := consume_section(src, name);
            prev := results&.insert(name, out);
            if prev { prev |  // allow split sections. see tests/abi8.ssa for example. 
                results&.insert(name, @tfmt("%%", prev, out));
            };
            if !nested {
                src = new_src;
            };
        };
        src = src.skip_line();
    };
    results
}

consume_section :: fn(src: Str, name: Str) Ty(Str, Str, bool) = {
    start_of_this_section := src.ptr;
    out: List(u8) = list(temp());
    strip_hashes := src.starts_with("#");
    depth := 1;
    nested := false;
    while => depth > 0 {
        chunk := src;
        src = src.skip_line();
        if strip_hashes {
            chunk = chunk.slice(0, chunk.len - src.len);
            @assert(chunk.starts_with("# "), "bad format for section: %\nline: |%|\nmust start with <hash><space>", name, chunk);
            if chunk.ends_with("#\n") {
                out&.push_all(chunk.slice(2, chunk.len - 2));
                out&.push_all("\n");
            } else {
                out&.push_all(chunk.slice(2, chunk.len));
            };
        };
        
        if src.starts_with("# >>>") {
            depth += 1;
            nested = true;
        };
        depth -= src.starts_with("# <<<").int();
    };
    out := if strip_hashes {
        out.items()
    } else {
        between(start_of_this_section, src.ptr)
    };
    
    (out, src, nested)
}

skip_line :: fn(s: Str) Str = {
    loop {
        if(s.len <= 0, => return(s));
        if s[0] == "\n".ascii() {
            return(s.slice_pop_first());
        };
        s = s.slice_pop_first();
    }
}

#use("@/lib/sys/subprocess.fr");
#use("@/lib/sys/fs.fr");
#use("@/examples/testing.fr");

/*
each file has a program in the qbe ir text format. 
line comments start with a `#` but some special sections are given extra meaning. 
sections start with `# >>> NAME` and end with `# <<<`. 
lines in most sections must with a `#` to be ignored by the ir parser. 
multiple sections with the same name will be concatenated. 
NAME can be one of the following: 
- driver
  a c program to be compiled and linked with the ir functions. 
  (used for teseting abi against other c compilers)
- output
  the expected stdout after running the test program. 
  (so you don't have to trust the test program to self report success accurately)
- generate
  a franca program that exports `main :: fn(source: Str) Str;`
- source
  this is passed as input to the `generate` program ^
- generated
  mark which part of the file is generated by the generate/source sections. 
  (so reproducibility can be validated by @/backend/test/generate.fr)
*/
