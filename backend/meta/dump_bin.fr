// unbuffered! :SLOW
main :: fn() void = {
    input := read_file_from_last_arg();
    header: *Incremental.Header = check(input);
    m := @uninitialized QbeModule; m := m&;
    init_empty_for_template_only(m, general_allocator());
    
    @println("- (size = %, arch_os = %)", input.len, header.arch_os);
    {
        @print("- entry: ");
        if header.entry_sym != Qbe.no_symbol {
            it: *Incremental.Sym = header.get(header.entry_sym);
            print(header.get(it.name));
        }
        if header.entry_dep != Qbe.no_symbol {
            it: *Incremental.Dep = header.get(header.entry_dep);
            @print(" in % ", header.get(it.filename));
        }
        @println("");
    }
    
    @println("=== % dep ===", header.dep.count);
    range(0, header.dep.count.zext()) { i |
        it: Incremental'Ref(Incremental.Dep) = (off = i.trunc(), count = 1);
        it := header.get(it)[0];
        @println("- % % %", header.get(it.filename), it.file_len, it.hashcode&);
    };
    
    syms := preintern_syms(header, m);
    @println("=== % sym ===", header.sym.count);
    range(0, header.sym.count.zext()) { i |
        i: Incremental'Ref(Incremental.Sym) = (off = i.trunc(), count = 1);
        it := header.get(i)[0];
        ::enum(@type it.segment);
        @print("- '%' is % ", header.get(it.name), it.segment);
        if @is(it.segment, .MutableData, .ConstantData, .ZeroInitData) {
            @println("(align = %, size = %, relocs = %)",  
                1.shift_left(it.align_log2.zext()), it.dat.bytes.count, it.dat.rel.count);
        } else {
            @match(it.segment) {
                fn Invalid() => @println("!!");
                fn Code() => {
                    @println("(nblk = %, ncon = %, nmem = %)", 
                        it.fnc.blk.count, it.fnc.con.count, it.fnc.mem.count);
                    f := @uninitialized Qbe.Fn;
                    f&.default_init(m);
                    load(header, f&, i, syms);
                    out := u8.list(temp());
                    printfn(f&, out&);
                    println(out.items());
                }
                fn MachineCode() => {
                    @println("(size = %)", it.dat.bytes.count);
                }
                fn Import() => {
                    lib := header.get(it.imp.lib)[0];
                    @println("(lib = %)", header.get(lib.name));
                }
                @default => ();
            }
        }
    };
}

#include_std("backend/lib.fr");
#use("@/lib/sys/fs.fr");
