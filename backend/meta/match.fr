// Adapted from Qbe. MIT License. Â© 2015-2024 Quentin Carbonneaux <quentin@c9x.me>
// ============= UNFINISHED =============

//!
//! This generates code for matching IR expression graphs against amd64 addressing modes.
//!
//! I'm not totally convinced it's worth the complexity trade off,
//! but I do think it's a good test of language features if I can make this 
//! a better experience than the 2000 line OCaml program that generates c code. 
//! More likely is that much will be lost to an ugly imperativ-ization of thjier code. 
//!

DEBUG_MATCHER :: true;  // toggle logging

______ :: {
    rules := @parse_matcher_rules
        (with_vars, (o, b, i, s),  // (offset, base, index, scale)
            (patterns,
                (ob, (add, (con, o), (tmp, b))),
                (bis, (add, (tmp, b), (mul, (tmp, i), (con, s, 1, 2, 4, 8)))),
                (ois, (add, (con, o), (mul, (tmp, i), (con, s, 1, 2, 4, 8)))),
                (obis, (add, (con, o), (tmp, b), (mul, (tmp, i), (con, s, 1, 2, 4, 8)))),
                (bi1, (add, (tmp, b), (tmp, i))),
                (obi1, (add, (con, o), (tmp, b), (tmp, i))),
        ));
    
    @if(DEBUG_MATCHER) println("Expanded rules:");
    all_rules := list(MGen.Rule, ast_alloc());
    new := 0;
    old := 0;
    for rules { rule | 
        name, vars, patterns := rule;
        old += patterns.len;
        each patterns { p | 
            patterns := ac_equiv(p);
            each patterns { p |
                all_rules&.push(name = name, vars = vars, pattern = p[]);
                //@if(DEBUG_MATCHER) @println("%", p);
            };
            new += patterns.len;
        }; 
    };
    @if(DEBUG_MATCHER) @println("added ac variants... % -> % patterns", old, new);
    assert(new == 144 && old == 15, "this will change if you change the rules."); 
};

MGen :: @rec @struct(
    Pattern :: @rec @tagged(
        Bnr: @struct(op: MGen.Op, lhs: *MGen.Pattern, rhs: *MGen.Pattern),
        Atm: MGen.AtomicPattern,
        Var: @struct(name: Str, p: MGen.AtomicPattern),
    ),
    Op :: @struct(cls: Qbe.Cls, op: Qbe.O),
    
    AtomicPattern :: @rec @tagged(Con: i64, Tmp, AnyCon),
    /* Tmp < AnyCon < Con k */
    
    Rule :: @rec @struct(
        name: Str,
        vars: []Str,
        pattern: MGen.Pattern,
    ),
);

::tagged(MGen.Pattern);

fn is_atomic(p: *MGen.Pattern) bool = !p.is(.Bnr);

fn display(o: MGen.Op, out: *List(u8)) void = {
    @fmt(out, "%%", o.op.get_name(), o.cls.kname());
}

fn display(p: *MGen.Pattern, out: *List(u8)) void = @match(p) {
    fn Atm(it) => @match(it) {
        fn Tmp()    => out.push_all("%");
        fn AnyCon() => out.push_all("$");
        fn Con(n)   => @fmt(out, "%", n);
    };
    fn Var(it) => {
        p: MGen.Pattern = (Atm = it.p);
        @fmt(out, "%'%", p&, it.name);
    }
    fn Bnr(it) => @fmt(out, "(% % %)", it.op, it.lhs, it.rhs);
};

fn get_atomic(p: *Pattern) ?*AtomicPattern = @match(p) {
    fn Atm(a) => (Some = a);
    fn Var(it) => (Some = it.p);
    @default => .None;
};

fn generate_table(rl: *List(MGen.Rule)) void = {
    
}

/////////////
// Parsing //
/////////////
// Convert a Franca ast into a list of rules to be processed into a matcher. 
// Spiritual equivalent to Qbe's tools/mgen/sexp.ml
//

fn parse_matcher_rules(e: FatExpr) FatExpr #macro #outputs([]Ty(Str, []Str, []MGen.Pattern)) = {
    usage :: "@parse_matcher_rules(with_vars, (v1, v2, ...), (patterns, ()...)";
    es := e&.items();
    @ct_assert(es.len == 3, e.loc, usage);
    @ct_assert(es[0]&.ident().expect(usage) == @symbol with_vars, es[0].loc, usage);
    vars := es[1]&.items();
    patterns := es[2]&.items();
    @ct_assert(patterns[0]&.ident().expect(usage) == @symbol patterns, patterns[0].loc, usage);
    
    a := ast_alloc();
    T :: Ty(Str, []Str, []MGen.Pattern);
    rules := T.list(a);
    each patterns.slice(1, patterns.len) { in | 
        p    := in.items();
        @ct_assert(p.len == 2, in.loc, "expected (name, (..pattern))");
        name := or p[0]&.ident() {
            compile_error("first item in rule must be its name", p[0].loc)
        };
        vars := Str.list(a);
        pats := MGen.Pattern.list(a);
        pats&.push_all(parse_term(p[1]&, vars&));
        rules&.push(@as(T) (name.str(), vars.items(), pats.items()));
    };
    
    @if(DEBUG_MATCHER) {
        println("Parsed rules:");
        ::display_slice(MGen.Pattern);
        for rules { rule |
            name, vars, patterns := rule;
            @println("- % % %", name, vars, patterns);
        };
        println("---");
    };
    
    @literal rules.items()
}

fn parse_term(in: *FatExpr, vars: *List(Str)) []MGen.Pattern = {
    p := in.items();
    tag := or p[0]&.ident() {
        compile_error("expected identifier to start pattern", p[0].loc)
    };
    @switch(tag) {
        @case(@symbol tmp) => {
            @ct_assert(p.len == 2, in.loc, "tmp pattern expected 2 arguments");
            name := str(or p[1]&.ident() {
                compile_error("second item in tmp must be its name", p[1].loc)
            });
            vars.add_unique(name);
            @const_slice(@as(MGen.Pattern) (Var = (name = name, p = .Tmp)))
        };
        @case(@symbol con) => {
            name := str(or p[1]&.ident() {
                compile_error("second item in con must be its name", p[1].loc)
            });
            vars.add_unique(name);
            if p.len == 2 {
                return(@const_slice(@as(MGen.Pattern) (Var = (name = name, p = .AnyCon))));
            };
            results := MGen.Pattern.list(p.len - 1, vars.gpa);
            each p.slice(2, p.len) { int | 
                int := const_eval(i64)(int[]);
                results&.push(Var = (name = name, p = (Con = int)));
            };
            results.items()
        };
        @default => {
            o := or from_name(Qbe.O, tag.str()) {
                compile_error("unknown pattern tag (expected tmp, con, or op name)", p[0].loc)
            };
            @ct_assert(p.len >= 3, in.loc, "binary op pattern expected at least 2 arguments");
            lhs := parse_term(p[1]&, vars);
            // You're allowed to write (add, a, b, c) instead of (add, (a, b), c)
            // So we keep parsing off one chunk and then pushing the tree down to the left. 
            each p.slice(2, p.len) { rhs | 
                rhs := parse_term(rhs, vars);
                results := MGen.Pattern.list(lhs.len * rhs.len, vars.gpa);
                // con terms with multiple values get expanded out into multiple top level rules 
                // with the same expressions except for the values of those terminals. 
                each lhs { l |
                    each rhs { r | 
                        results&.push(Bnr = (op = (op = o, cls = .Kl), lhs = l, rhs = r));
                    };
                };
                lhs = results.items();
            };
            lhs
        };
    } // early returns
}

///////////////////////////////////
// Associativity & Commutativity //
///////////////////////////////////
// Expand out algebraically equivalent permutations of rules.
// i.e. `(add, (add a, b), c)` yields `(add, a, (add b, c))` and `(add, c, (add b, a))`, etc.
// This avoids needing some way of canonicalizing our IR, we just match against all the options. 
//

fn associative(o: Qbe.O) bool = o == .add || o == .mul || o == .or;  // rebracketing
fn commutative(o: Qbe.O) bool = o == .add || o == .mul || o == .or;  // reordering 

// note: this aliases pointers! you're not allowed to mutate nodes or naively free the tree anymore. 
fn ac_equiv(expr: *MGen.Pattern) []MGen.Pattern = {
    ::tagged(MGen.Pattern);
    if(expr.is(.Atm) || expr.is(.Var), => return(ptr = expr, len = 1));  // we don't care about the terminals
    bin := expr.Bnr&;
    a := todo_allocator;
    op := bin.op;
    
    @debug_assert(bin.op.op.associative() == bin.op.op.commutative(), "TODO: support ops that are only one of commutative/associative");
    if !bin.op.op.associative() { // never happens with current rules
        lhs := ac_equiv(bin.lhs);
        rhs := ac_equiv(bin.rhs);
        opts := list(MGen.Pattern, lhs.len * rhs.len, a);
        each lhs { lhs | 
            each rhs { rhs | 
                opts&.push(Bnr = (op = op, lhs = lhs, rhs = rhs));
            };
        };
        return(opts.items());
    };
    
    args0 := list(*MGen.Pattern, a);
    flatten_assoc(args0&, op.op, expr);
    
    // now all permutations of `args` are acceptable (since op is both associative and commutative).
    // but first, expand each entry in that list (it might be using a different a/c operator)
    
    args := list([]MGen.Pattern, args0.len, a);
    for args0 { p |
        args&.push(ac_equiv(p));
    };
    
    // now we really just have to permute. 
    
    results := list(MGen.Pattern, a); // TODO: preallocate 
    permute([]MGen.Pattern, args.items()) { args | 
        // args is some flattened list of things to be joined with op and we need to expand it out into a binary tree again. 
        // but each thing might have multiple options if it was a bin-op with a different operator than this one. 
        
        choices := list(MGen.Pattern, a);
        choices&.push_all(args[0]);
        
        for args.slice(1, args.len) { lhs_options |
            old_choices := choices.items();
            choices = list(MGen.Pattern, a);
            for old_choices { rhs |
                for lhs_options { lhs |
                    mem := a.alloc(MGen.Pattern, 2);
                    mem[0] = rhs;
                    mem[1] = lhs;
                    choices&.push(Bnr = (op = op, lhs = mem[1]&, rhs = mem[0]&));
                };
            };
        };
        results&.push_all(choices.items());
    };
    
    // now we have every order but not every bracketing 
    
    results2 := list(MGen.Pattern, a);
    each results { p |
        bracketings(results2&, p, op.op);
    };
    
    results2.items()
}

fn is_tree(p: *MGen.Pattern, op: Qbe.O) bool = 
    !(p.is(.Atm) || p.is(.Var) || p.Bnr.op.op != op);

fn bracketings(out: *List(MGen.Pattern), p: *MGen.Pattern, op: Qbe.O) void = {
    while => p.is_tree(op) && p.Bnr.rhs.is_tree(op) {
        out.push(p[]);
        p = rotate_left(p);
    };
    out.push(p[]);
}

// https://en.wikipedia.org/wiki/Tree_rotation
fn rotate_left(p: *MGen.Pattern) *MGen.Pattern = {
    a := todo_allocator;
    mem := a.alloc(MGen.Pattern, 2);
    pivot := mem.index(0);
    root := mem.index(1);
    
    pivot[] = p.Bnr.rhs[];
    root[] = p[];
    root.Bnr.rhs = pivot.Bnr.lhs;
    pivot.Bnr.lhs = root;
    pivot
}

// (add (add a b) (add c (mul d e))) => (a b c (mul d e))
fn flatten_assoc(out: *List(*MGen.Pattern), op: Qbe.O, p: *MGen.Pattern) void = {
    if p.is(.Atm) || p.is(.Var) || p.Bnr.op.op != op {
        out.push(p);
        return()
    }; 
    flatten_assoc(out, op, p.Bnr.lhs);
    flatten_assoc(out, op, p.Bnr.rhs);
}

:: {
    s := @slice(1, 2, 3);
    n := 0;
    permute(i64, s, fn(s) => { n += 1; });
    assert_eq(n, 6);
};

// This is garbage. Unfortunately since I don't have real closures, $Fn can't be recursive. 
fn permute($T: Type, all: []T, $yield: @Fn(permutation: []T) void) void #generic = {
    State :: @struct(start: i64, i: i64, first: bool);
    stack := list(State, all.len, temp());
    stack&.push(start = 0, i = 0, first = true);
    while => stack.len != 0 {
        state := stack[stack.len - 1];
        stack.len -= 1;
        if state.start == all.len - 1 {   
            yield(all);
        } else {
            if state.first {
                all.swap(state.start, state.i);
                stack&.push(start = state.start, i = state.i, first = false);
                stack&.push(start = state.start + 1, i = state.start + 1, first = true);
            } else {
                all.swap(state.start, state.i);
                if state.i + 1 < all.len {
                    stack&.push(start = state.start, i = state.i + 1, first = true);
                };
            };
        };
    };
    @debug_assert_eq(all.len, stack.maybe_uninit.len, "doesn't matter but i feel this shouldn't need to resize.");
}
