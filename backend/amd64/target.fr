fn fill_target_amd(t: *Qbe.Target, apple: bool) void = {
    t.apple = apple;
    // TODO: we have emitfn and emitfin. that's confusing.
    t.emitfn = emit_func_amd64;
    
    //::assert(LINK_QBE_C, "TODO: fill in the other fields instead of relying on qbe");
}

// you can't reorder these to not be insane until you never share the target struct with qbe c. 
Amd64Reg :: @enum(i32) (
    RXX, // reserve zero for QbeNull
    
    /* caller-save */
    RAX, RCX, RDX, RSI, RDI, R8, R9, R10, R11,

    /* callee-save */
    RBX, R12, R13, R14, R15,

    /* globally live */
    RBP, RSP,

    /* sse */
    XMM0, XMM1, XMM2,  XMM3,  XMM4,  XMM5,  XMM6,  XMM7,
    XMM8, XMM9, XMM10, XMM11, XMM12, XMM13, XMM14, XMM15,
    
    //NFPR = XMM14 - XMM0 + 1, /* reserve XMM15 */
    //NGPR = RSP - RAX + 1,
    //NGPS = R11 - RAX + 1,
    //NFPS = NFPR,
    //NCLR = R15 - RBX + 1,
);

::List(X86cc);
amd_condition_codes :: items(@list( // :CmpOrder
    // Cieq Cine Cisge Cisgt Cisle Cislt Ciuge Ciugt Ciule Ciult
    X86cc.e, .ne,  .ge,  .g,  .le,  .l,  .ae,  .a,  .be,  .b,
    // Cfeq Cfge Cfgt Cfle Cflt Cfne Cfo  Cfuo
         .e, .ae, .a, .be, .b,  .ne, .np, .p
) ast_alloc());

fn TMP(r: Amd64Reg) Qbe.Ref = TMP(r.raw().zext());
fn BIT(r: Amd64Reg) u64 = BIT(r.raw().zext());
