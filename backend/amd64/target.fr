fn fill_target_amd(t: *Qbe.Target, apple: bool) void = {
    t.finish_passes = finish_qbe_passes_native;
    t.isel = amd64_isel;
    t.abi0 = elimsb; 
    t.abi1 = amd64_sysv_abi;
    t.argregs = amd64_sysv_argregs;
    t.retregs = amd64_sysv_retregs;
    t.fixup = fixup_amd64;
    t.emit_fn = emit_func_amd64;
    
    ::enum(Amd64Reg);
    
    t.apple = apple;
    t.gpr0 = Amd64Reg.RAX.raw();
    t.ngpr = Amd64Reg.RSP.raw() - Amd64Reg.RAX.raw() + 1; 
    t.fpr0 = Amd64Reg.XMM0.raw();
    t.nfpr = Amd64Reg.XMM14.raw() - Amd64Reg.XMM0.raw() + 1 /* reserve XMM15 */;
    t.rglob = BIT(Amd64Reg.RBP).bit_or(BIT(Amd64Reg.RSP));
    t.nrglob = 2;
    t.caller_saved = convert_to_i32_and_append_minus_1(Amd64Reg, amd64_sysv_rsave).as_ptr();
    t.nrsave&[0] = Amd64Reg.R11.raw() - Amd64Reg.RAX.raw() + 1;
    t.nrsave&[1] = t.nfpr;
    t.memargs = amd64_memargs;
    @assert_eq(amd64_sysv_rsave.len(), intcast(t.nrsave&[0] + t.nrsave&[1]));
}

fn amd64_memargs(o: Qbe.O) i32 = {
    if o.between(.acmp, .flagfuo) || o.between(.ceqw, .blit1) || o.between(.div, .urem) || o.between(.sign, .salloc) {
        return(0);
    };
    if o.between(.add, .sub) || o.between(.mul, .xor) {
        return(2);
    };
    if o == .neg || o == .swap || o.between(.sar, .shl) || o.between(.xidiv, .xtest) {
        return(1);
    };
    if o == .asm || o == .switch0 || o == .syscall {  
        return(0);
    };
    @panic("unknown op for amd64_memargs")
}

// you can't reorder these to not be insane until you never share the target struct with qbe c. 
Amd64Reg :: @enum(i32) (
    RXX, // reserve zero for QbeNull
    
    /* caller-save */
    RAX, RCX, RDX, RSI, RDI, R8, R9, R10, R11,

    /* callee-save */
    RBX, R12, R13, R14, R15,

    /* globally live */
    RBP, RSP,

    /* sse */
    XMM0, XMM1, XMM2,  XMM3,  XMM4,  XMM5,  XMM6,  XMM7,
    XMM8, XMM9, XMM10, XMM11, XMM12, XMM13, XMM14, XMM15,
);

::List(X86cc);
amd_condition_codes :: @const_slice( // :CmpOrder
    // Cieq Cine Cisge Cisgt Cisle Cislt Ciuge Ciugt Ciule Ciult
    X86cc.e, .ne,  .ge,  .g,  .le,  .l,  .ae,  .a,  .be,  .b,
    // Cfeq Cfge Cfgt Cfle Cflt Cfne Cfo  Cfuo
         .e, .ae, .a, .be, .b,  .ne, .np, .p
);

fn TMP(r: Amd64Reg) Qbe.Ref = TMP(r.raw().zext());
fn BIT(r: Amd64Reg) u64 = BIT(r.raw().zext());
