fn output_macho(m: *QbeModule) List([]u8) = {  
    chunks := list([]u8, temp());
    bytes := u8.list(temp());
    
    header := bytes&.reserve(MachoHeader);
    header[] = (
        cpu_type = 0x0100000C, // arm 64bit
        cpu_subtype = 0x00000000,
        file_type = 0x00000002, // Demand paged executable file. (idk, thats what rust uses ¯\_(ツ)_/¯ )
        commands_count = 0, // TODO: patch
        commands_size = 0, // TODO: patch
        flags = 0b00000000101000000000000010000101, // (idc, thats what rust uses ¯\_(ツ)_/¯ )
    );
    
    chunks&.push(bytes.items());
    chunks
}

fn reserve(bytes: *List(u8), $T: Type) *T #generic = {
    bytes.reserve(T.size_of());
    ptr := bytes.maybe_uninit.ptr.offset(bytes.len);
    @debug_assert(u8.int_from_ptr(ptr).mod(T.align_of()) == 0, "unaligned reserve");
    ptr := ptr_cast_unchecked(u8, T, ptr);
    bytes.len += T.size_of();
    ptr
}

fn zero_pad_to_align(bytes: *List(u8), align: i64) void = {
    ptr := bytes.maybe_uninit.ptr.offset(bytes.len);
    extra := u8.int_from_ptr(ptr).mod(align);
    if extra != 0 {
        extra := align - extra;
        bytes.reserve(extra);
        range(0, extra) { _ |
            bytes.push(0);
        };
    };
}
