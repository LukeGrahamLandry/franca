// TODO: preallocate the arrays since qbe sets maximum sizes for things (and other places in the backend use those numbers). 
// it doesnt have to be fast it just has to work
// it doesnt have to be fast it just has to work
// for now... 

QbeBuilder :: @struct(
    globals: *QbeModule,
    temporaries: List(Qbe.Tmp),
    constants: List(Qbe.Con),
    memory: List(Qbe.Addr),
    blocks: List(WipBlock),
    lnk := Qbe.Lnk.zeroed(),
    leaf := true,  // TODO: debug assert somewhere that you don't do a call in a leaf. for now we trust the frontend to remember to unset this. 
    aggragate_return_index: ?i64,
);

QbeTerminator :: @struct(
    arg := QbeNull,
    target1 := BbId.zeroed(),
    target2 := BbId.zeroed(),
    type: Qbe.J,
);

WipBlock :: @struct(
    insts: List(Qbe.Ins),
    jmp: QbeTerminator,
);

fn init(gpa: Alloc, globals: *QbeModule) QbeBuilder = {
    b: QbeBuilder = (
        globals = globals,
        temporaries = list(gpa),
        constants = list(gpa),
        memory = list(gpa),
        blocks = list(gpa),
        aggragate_return_index = .None,
    );
    b&.clear();
    b
}

fn clear(b: *QbeBuilder) void = {
    // :ClearOkBecauseCopied
    b.constants&.clear();
    b.temporaries&.clear(); 
    b.memory&.clear();
    b.blocks&.clear();
    b.aggragate_return_index = .None;
    
    b.constants&.push(type = .CBits, bits = (i = 0xdeaddead)); // QbeUndef
    b.constants&.push(type = .CBits, bits = (i = 0));          // QbeConZero
    
    // Add temporaries representing physical registers.
    // TODO: is it required to pad out fake ones up to 64? maybe they're ignored and its just to make the indices work out. -- Sep 25
    range(0, Qbe.Tmp0) { i |
        is_float := b.globals.target.fpr0 <= i.intcast() && i.intcast() < (b.globals.target.fpr0 + b.globals.target.nfpr);
		if is_float {
		    b.push_temp(.Kd);
		} else {
		    b.push_temp(.Kl);
		};
    };
}

// TODO: make the Qbe.Fn sooner and just call the functions in util.fr
fn push_temp(b: *QbeBuilder, k: Qbe.Cls) Qbe.Ref = {
    temp := Qbe.Tmp.zeroed();
    if b.temporaries.len >= Qbe.Tmp0 {
        // TODO: don't be fucking with strings, only do this in debug mode.
        name: List(u8) = (maybe_uninit = temp.name&.items(), len = 0, gpa = panicking_allocator);
        @fmt(name&, "v%", b.temporaries.len - Qbe.Tmp0);
    };
    temp.cls = k;
    temp.slot = -1;
    temp.nuse = 1;
    temp.ndef = 1;
    b.temporaries&.push(temp);
    TMP(b.temporaries.len - 1)
}

// TODO: fix load/store union in emit_bc so you can just pass `get_field_type(Qbe.Con, @symbol bits)`
fn push_literal(b: *QbeBuilder, i: i64) Qbe.Ref = {
    con: Qbe.Con = (type = .CBits, bits = (i = i));
    b.constants&.push(con);
    ref(.RCon, b.constants.len - 1)
}

fn push_literal(b: *QbeBuilder, i: f64) Qbe.Ref = {
    con: Qbe.Con = (type = .CBits, bits = (d = i));
    b.constants&.push(con);
    ref(.RCon, b.constants.len - 1)
}

fn push_literal(b: *QbeBuilder, i: f32) Qbe.Ref = {
    con: Qbe.Con = (type = .CBits, bits = (s = (s = i)));
    b.constants&.push(con);
    ref(.RCon, b.constants.len - 1)
}

fn push_symbol(b: *QbeBuilder, name: CStr) Qbe.Ref = {
    con: Qbe.Con = (type = .CAddr, bits = (i = 0));
    con.sym.id = b.globals.intern(name); // TODO: why can't do this inline :FUCKED
    b.constants&.push(con);
    ref(.RCon, b.constants.len - 1)
}

fn push_inst(b: *QbeBuilder, block: BbId, op: Qbe.O, k: Qbe.Cls, out: Qbe.Ref, in1: Qbe.Ref, in2: Qbe.Ref) void = {
    // TODO: why bother
    // if k > .Ksb {| k = .Kw; };
    @debug_assert(k == .Kl || k == .Kw || k == .Ks || k == .Kd, "size must be w/l/s/d for %", op.get_name());
    b.blocks[block.id.zext()].insts&.push(make_ins(op, k, out, in1, in2));
}

// TODO: init array from tuple. and also real bit fields. so this doesn't suck as bad. 
fn make_ins(op: Qbe.O, k: Qbe.Cls, out: Qbe.Ref, in1: Qbe.Ref, in2: Qbe.Ref) Qbe.Ins #inline = 
    (op30_cls2 = pack_op_cls(op, k), arg = init(@slice(in1, in2)), to = out);

// TODO: catch the mistake of calling this instead of push_inst0 for a store (it confuses the backend)
fn push_inst(b: *QbeBuilder, block: BbId, op: Qbe.O, k: Qbe.Cls, in1: Qbe.Ref, in2: Qbe.Ref) Qbe.Ref = {
    out := b.push_temp(k);
    b.push_inst(block, op, k, out, in1, in2);
    out
}

fn push_inst0(b: *QbeBuilder, block: BbId, op: Qbe.O, k: Qbe.Cls, in1: Qbe.Ref, in2: Qbe.Ref) void = {
    b.push_inst(block, op, k, QbeNull, in1, in2);
}

fn push_blit(b: *QbeBuilder, block: BbId, dest: Qbe.Ref, src: Qbe.Ref, size: i64) void = {
    if size < 0 || size >= 0x10000000 {
        panic("invalid blit size");
    };
    // TODO: why not just put the size in the out slot? 
    //       maybe its about avoiding a branchy special case to check that its actually a register. 
    b.push_inst(block, .blit0, .Kw, QbeNull, src, dest); // note: flipped from memcpy
    b.push_inst(block, .blit1, .Kw, QbeNull, small_int_for_blit(size), QbeNull);
}
        
// Parameters are represented as instructions at the beginning of the @start block. 
fn push_parameter(b: *QbeBuilder, arg_type: Qbe.Cls) Qbe.Ref = {
    @debug_assert(b.blocks.len == 1, "push args at the beginning of the start block");
    // TODO: check that only args pushed so far just to be helpful. 
    @debug_assert(arg_type != .Kc, "TODO: I don't support struct typed args yet because emit_bc throws away the info (but that needs to be fixed to implement the abi correctly)");
    // if (arg_type == .Kc) *curi = (Ins){Oparc, Kl, r, {TYPE(ty)}};
    
    is_small_for_abi := arg_type >= Qbe.Cls.Ksb;
    base_type := if(is_small_for_abi, => Qbe.Cls.Kw, => arg_type);
    op := if(is_small_for_abi, => offset_by_class(Qbe.O.parsb, arg_type), => Qbe.O.par);
    value_out := b.push_temp(base_type);
    block: BbId = (id = 0);
    b.push_inst(block, op, base_type, value_out, QbeNull, QbeNull);
    value_out
}

// Each argument to a call is represented by an instruction. Don't forget to `push_inst(call)` at the end. 
fn push_argument(b: *QbeBuilder, block: BbId, arg_type: Qbe.Cls, value: Qbe.Ref) void = {
    @debug_assert(arg_type != .Kc, "TODO: I don't support struct typed args yet because emit_bc throws away the info (but that needs to be fixed to implement the abi correctly)");
    is_small_for_abi := arg_type >= Qbe.Cls.Ksb;
    base_type := if(is_small_for_abi, => Qbe.Cls.Kw, => arg_type);
    op := if(is_small_for_abi, => offset_by_class(Qbe.O.argsb, arg_type), => Qbe.O.arg);
    b.push_inst(block, op, base_type, QbeNull, value, QbeNull);
}

fn offset_by_class(op: Qbe.O, k: Qbe.Cls) Qbe.O = {
    // TODO: make this not painful
    a: i64 = k.raw().zext();
    b: i64 = Qbe.Cls.Ksb.raw().zext();
    c: i64 = op.raw().zext();
    d := c + a - b;
    @as(Qbe.O) @as(i32) d.intcast()
}

// TODO: type for typeid
// TODO: the front end should cache these since it has to track types anyway. and then we wouldn't need to do this scan. 
//       they probably don't have to be uniqued anyway, i think we just care about the structure for the abi. 
fn opaque_type_slow(b: *QbeBuilder, size: i64, align_log2: i64) i64 = {
    // :SLOW
    n := b.globals.number_of_types;
    enumerate b.globals.types[].slice(0, n) { i, type | 
        if type.is_dark && type.size == size && type.align_log2.zext() == align_log2 {
            return(i);
        };
    };
    b.globals.types.grow(n + 1);
    type := b.globals.types[n]&;
    type[] = Qbe.Typ.zeroed();
    type.is_dark = true;
    type.align_log2 = align_log2.intcast();
    type.size = size;
    type.nunion = 1; // don't forget this or life is ass 
    b.globals.number_of_types += 1;
    // TODO: don't be fucking with strings, only do this in debug mode.
    name: List(u8) = (maybe_uninit = type.name&.items(), len = 0, gpa = panicking_allocator);
    @fmt(name&, "t%s%a%", n, size, align_log2);
    n
}

// TODO: could do the size+align calc here but my front end already does it for now.  that means you have to put FPad in too!!!
//       but i barely use this for now. TODO: ill need to improve that when i want to follow the abi better. 
fn struct_type(b: *QbeBuilder, fields: []Qbe.Field, size: i64, align_log2: i64) i64 = {
    n := b.globals.number_of_types;
    b.globals.types.grow(n + 1);
    type := b.globals.types[n]&;
    type[] = Qbe.Typ.zeroed();
    type.fields = new(fields.len + 1, .PHeap);
    type.align_log2 = align_log2.intcast();
    type.size = size;
    enumerate fields { i, f | 
        type.fields[i] = f[];
    };
    type.nunion = 1;// don't forget this or life is ass (it caused a 0 op, `no match for (null)(w)`)
    type.fields[fields.len] = (type = .FEnd, len = 0);
    b.globals.number_of_types += 1;
    name: List(u8) = (maybe_uninit = type.name&.items(), len = 0, gpa = panicking_allocator);
    @fmt(name&, "t%", n);
    n
}

fn ge(a: Qbe.Cls, b: Qbe.Cls) bool = a.raw().int() >= b.raw().int();
fn gt(a: Qbe.Cls, b: Qbe.Cls) bool = a.raw().int() > b.raw().int();
fn add(a: i16, b: i16) i16 #redirect(Ty(i32, i32), i32);
fn sub(a: i16, b: i16) i16 #redirect(Ty(i32, i32), i32);

fn push_block(b: *QbeBuilder) BbId = {
    // zero init terminator is Qbe.J.Jxxx
    b.blocks&.push(insts = list(b.blocks.gpa), jmp = QbeTerminator.zeroed());
    // TODO: set name for debug
    (id = b.blocks.len.sub(1).trunc())
}

fn end_block(b: *QbeBuilder, bb: BbId, jmp: QbeTerminator) void = {
    block := b.blocks[bb.id.zext()]&;
    @debug_assert(block.jmp.type == .Jxxx, "tried to close block % twice", bb.id);
    block.jmp = jmp;
}

fn build(b: *QbeBuilder, name: Str, /*TODO: link_type: Qbe.Lnk,*/) Qbe.Fn = {
    curf := Qbe.Fn.zeroed();
    curf.globals = b.globals;
	// curf.rpo = 0; filled in by later pass
	// curf.vararg = false; // TODO
    
    // :ClearOkBecauseCopied
    curf.ntmp = b.temporaries.len.intcast();
    curf.tmp = new_copy(b.temporaries.items(), .PFn);
    curf.ncon = b.constants.len.intcast();
    curf.con = new_copy(b.constants.items(), .PFn);
    curf.nmem = b.memory.len.intcast();
    curf.mem = new_copy(b.memory.items(), .PFn);
    //@println("% temps. % blocks.", curf.ntmp.zext() - Qbe.Tmp0, b.blocks.len);
    
	curf.leaf = b.leaf;
    curf.lnk = b.lnk;
	curf.retty = (b.aggragate_return_index || @as(i64) -1).intcast();
	
    if b.blocks.len == 0 {
        panic("empty function");
    };
    if name.len > 80 {
        panic("TODO: function name cannot be longer than 80 characters");
    };
    name_dest := curf.name&.items().slice(0, name.len);
    name_dest.copy_from(name);
    
    qbe_blocks: List(Qbe.Blk) = list(b.blocks.len, b.blocks.gpa); // stable!
	curf.nblk = b.blocks.len.intcast();
	
    curf.start = qbe_blocks.index_unchecked(0);
    enumerate b.blocks { i, wip |
        if wip.jmp.type == .Jxxx {
            wip.jmp.type = .Jhlt;  // TODO: report error and force the front end to be precise and not have empty blocks. 
        };
        qbe_blocks&.push(Qbe.Blk.zeroed());
        block := qbe_blocks[i]&;
        block.id = i.intcast(); // TODO: probably don't need this because cfg sets it? but qbe parser does it so just being safe for now.  
        block.nins = wip.insts.len.trunc();
        block.ins = wip.insts.maybe_uninit.ptr;
        if i == b.blocks.len - 1 {
            block.link = Qbe.Blk.ptr_from_int(0);
        } else {
            block.link = qbe_blocks.index_unchecked(i + 1);
        };
        block.jmp.type = wip.jmp.type;
        block.jmp.arg = wip.jmp.arg;
        if wip.jmp.target1.id != 0 {
            block.s1 = qbe_blocks.index_unchecked(wip.jmp.target1.id.zext());
        };
        if wip.jmp.target2.id != 0 {
            block.s2 = qbe_blocks.index_unchecked(wip.jmp.target2.id.zext());
        };
        
        // TODO: don't be fucking with strings, only do this in debug mode.
        name: List(u8) = (maybe_uninit = block.name&.items(), len = 0, gpa = panicking_allocator);
        @fmt(name&, "b%", i);
    };
    
    if b.globals.debug["P".char()] {
        write(b.globals.debug_out, "\n> After parsing:\n");
        printfn(curf&, b.globals.debug_out);
    };
	
    b.clear();
    curf
}

//////////////////////////////////////

fn pack_op_cls(op: Qbe.O, k: Qbe.Cls) u32 #inline = {
    (@as(i64) k.raw().zext()).shift_left(30).bit_or(op.raw().zext()).trunc()
}

// TODO: ugh. garbage setter, i need to add real bit fields to my language!
fn set_op(i: *Qbe.Ins, op: Qbe.O) void #inline = {
    i.op30_cls2 = pack_op_cls(op, i.cls());
}

fn set_cls(i: *Qbe.Ins, k: Qbe.Cls) void #inline = {
    i.op30_cls2 = pack_op_cls(i.op(), k);
}

fn set_nop(i: *Qbe.Ins) void #inline = {
    i[] = Qbe.Ins.zeroed();
    i.set_op(.nop);
}

fn op(i: *Qbe.Ins) Qbe.O #inline = {
    @as(Qbe.O) @as(i32) bitcast(@as(u32) i.op30_cls2.bit_and(1.shift_left(30) - 1))
}

fn cls(i: *Qbe.Ins) Qbe.Cls #inline = {
    x := i.op30_cls2.shift_right_logical(30).bit_and(0b11);
    @as(Qbe.Cls) @as(i16) x.trunc()
}

// 0 for int, 1 for float. 
fn KBASE(k: Qbe.Cls) i64 #inline = {
    x: i64 = k.raw().shift_right_logical(1).zext();
    @debug_assert(x.bit_and(1) == x, "bad KBASE. Kx=% Ke=%", k == .Kx, k == .Ke);
    x
}

fn req(a: Qbe.Ref, b: Qbe.Ref) bool #inline = {
    a.type3_val29 == b.type3_val29
}

// TODO: compiler bug. this shouldn't need to be in a block. this just delays adding it to the overload set so it doesn't get confused.
:: {
    fn eq(a: Qbe.Ref, b: Qbe.Ref) bool #inline = 
        a.type3_val29 == b.type3_val29;
        
    fn ne(a: Qbe.Ref, b: Qbe.Ref) bool #inline = 
        a.type3_val29 != b.type3_val29;
};

fn rtype(r: Qbe.Ref) Qbe.RegKind #inline = {
    r != QbeNull || return(.RNull);
    @as(Qbe.RegKind) @as(u32) r.type3_val29.bit_and(1.shift_left(3) - 1)
}

fn get_constant(f: *Qbe.Fn, r: Qbe.Ref) *Qbe.Con #inline = {
    @debug_assert(rtype(r) == .RCon, "tried to get constant of non constant");
    i := r.val();
    //@safety(.Bounds) i < f.ncon.zext();
    @debug_assert(i < f.ncon.zext(), "con oob");
    f.con.index(i)
}

fn get_memory(f: *Qbe.Fn, r: Qbe.Ref) *Qbe.Addr #inline = {
    @debug_assert(rtype(r) == .RMem, "tried to get memory of non memory");
    i := r.val();
    //@safety(.Bounds) i < f.nmem.zext();
    @debug_assert(i < f.nmem.zext(), "mem oob");
    f.mem.index(i)
}

fn get_temporary(f: *Qbe.Fn, i: i64) *Qbe.Tmp #inline = {
    //@safety(.Bounds) i < f.ntmp.zext();
    @debug_assert(i < f.ntmp.zext(), "tmp oob");
    f.tmp.index(i)
}

fn get_temporary(f: *Qbe.Fn, r: Qbe.Ref) *Qbe.Tmp #inline = {
    @debug_assert(rtype(r) == .RTmp, "tried to get tmp of non-tmp");
    i := r.val();
    @safety(.Bounds) i < f.ntmp.zext();
    f.tmp.index(i)
}

fn trunc(x: u32) i16 #redirect(u32, u16); // TODO
fn shift_right_logical(v: i16, shift_amount: i64) i16 = v.int().shift_right_logical(shift_amount).intcast().trunc();

fn ref(cls: Qbe.RegKind, id: i64) Qbe.Ref #inline = {
    (type3_val29 = cls.raw().bitcast().bit_or(id.shift_left(3).trunc()))
}

fn val(r: Qbe.Ref) i64 #inline = {
   x := @as(u32) r.type3_val29.shift_right_logical(3).bit_and(1.shift_left(29) - 1);
   x.zext()
}

fn rsval(r: Qbe.Ref) i32 #inline = {    
   intcast(r.val().bit_xor(0x10000000) - 0x10000000)
}

// TODO: can we use this instead of making a constant for small integer literals? 
//       qbe only uses this for blit but CBits for all constants.
fn small_int_for_blit(x: i64) Qbe.Ref #inline = {
    ref(.RInt, x.bit_and(0x1fffffff))
}

fn is_ret(j: Qbe.J) bool =  // TODO: tried to call uncompiled if #inline :FUCKED
    j.raw() >= Qbe.J.Jretw.raw() && j.raw() <= Qbe.J.Jret0.raw();

fn is_ext(j: Qbe.O) bool #inline = 
    j.raw() >= Qbe.O.extsb.raw() && j.raw() <= Qbe.O.extuw.raw();
    
fn is_alloc(j: Qbe.O) bool #inline = 
    j.raw() >= Qbe.O.alloc4.raw() && j.raw() <= Qbe.O.alloc16.raw();

fn is_store(j: Qbe.O) bool #inline = 
    j.raw() >= Qbe.O.storeb.raw() && j.raw() <= Qbe.O.stored.raw();

fn is_load(j: Qbe.O) bool #inline = 
    j.raw() >= Qbe.O.loadsb.raw() && j.raw() <= Qbe.O.load.raw();

fn is_flag(j: Qbe.O) bool #inline = 
    j.raw() >= Qbe.O.flagieq.raw() && j.raw() <= Qbe.O.flagfuo.raw();

fn is_parbh(j: Qbe.O) bool #inline = 
    j.raw() >= Qbe.O.parsb.raw() && j.raw() <= Qbe.O.paruh.raw();

fn is_par(j: Qbe.O) bool #inline = 
    j.raw() >= Qbe.O.par.raw() && j.raw() <= Qbe.O.pare.raw();

fn is_arg(j: Qbe.O) bool #inline = 
    j.raw() >= Qbe.O.arg.raw() && j.raw() <= Qbe.O.argv.raw();

fn is_retbh(j: Qbe.J) bool #inline = 
    j.raw() >= Qbe.J.Jretsb.raw() && j.raw() <= Qbe.J.Jretuh.raw();
    
fn is_argbh(j: Qbe.O) bool #inline = 
    j.raw() >= Qbe.O.argsb.raw() && j.raw() <= Qbe.O.arguh.raw();

fn is_int(k: Qbe.Cls) bool #inline =
    KBASE(k) == 0;

fn is_wide(k: Qbe.Cls) bool #inline =
    (@as(i64) k.raw().zext()).bit_and(1) != 0;
    
//////////////////////////////////////

::enum_basic(Qbe.ConType);
fn sub(a: u64, b: u64) u64 #redirect(Ty(i64, i64), i64); // TODO: wrong because of llvm UB

::enum_basic(Qbe.Cls);
::enum_basic(Qbe.J);
::enum_basic(Qbe.RegKind);
::if(Qbe.Cls);
::if(Qbe.O);
::enum_basic(Qbe.O);
::ptr_utils(Qbe.Blk);

::if(i32);
fn sub(a: i32, b: i32) i32 = a.int().sub(b.int()).intcast();

fn div(a: i32, b: i32) i32 = a.intcast().div(b.intcast()).intcast();
fn bit_or(a: i16, b: i16) i16 #redirect(Ty(i32, i32), i32);
fn bit_or(a: i32, b: i32) i32 = a.int().bit_or(b.int()).intcast();
fn shift_left(a: i32, b: i64) i32 = a.int().shift_left(b).intcast();
fn zext(v: u8) i32 #intrinsic(.ZeroExtend8To32) #fold;
