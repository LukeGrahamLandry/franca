// Adapted from Qbe. MIT License. Â© 2015-2024 Quentin Carbonneaux <quentin@c9x.me>

TRACK_IR_NAMES :: true; 

    Tmp0 :: 64; // first non-reg temporary
    MaxInstructions :: 1.shift_left(20);
    NBit :: 64;
    Rxxx :: 0;
    NCmp :: 18;
    Sym  :: @struct(id: u32);

    DebugKey :: @enum(i64) (
        Parsing = "P".char(),
        Memory = "M".char(),
        Ssa = "N".char(),
        Copy = "C".char(),
        Folding = "F".char(),
        Abi = "A".char(),
        InstSelect = "I".char(),
        Liveness = "L".char(),
        Spill = "S".char(),
        RegAlloc = "R".char(),
        Patch = "p".char(),
        Disassemble = "D".char(),
        Inlining = "i".char(),
        Block = "B".char(),
        Types = "t".char(),
        Data = "d".char(),
        AddAsm = "a".char(),
        Warn = "w".char(),
        GCM = "G".char(),
        IfOpt = "K".char(),
    );
    Cls :: @enum(i32) (
        Kw, // :JretOrder :StoreOrder
        Kl,
        Ks,
        Kd,
        
        // (different meaning for ret_cls)
        Kx, /* "top" class (see usecheck() and clsmerge()) */
        Ke, /* erroneous mode */
    );
    RegKind :: @enum(i32) (
        RTmp,
        RCon,
        RInt,  // used for blit1, arm load offset, J.switch
        RType,
        RSlot, // inserted by isel+abi
        RCall, // inserted by abi
        RMem,  // for 3-arg instructions. inserted by isel
        
        // TODO: very confusing if you make this -1 and try to match on it
        RNull, // represented as (RTmp, 0) but useful for comparisons
    ); // u3
    Target :: @struct(
        apple: bool,
        gpr0: i32, /* first general purpose reg */
        ngpr: i32,
        fpr0: i32, /* first floating point reg */
        nfpr: i32,
        rglob: u64, /* globally live regs (e.g., sp, fp) */
        caller_saved: u64, // rsave. bit mask of (nrsave[0] int registers, nrsave[1] float registers)
        nrsave: Array(i32, 2),
        retregs: @FnPtr(r: Qbe.Ref, p: *Array(i32, 2)) u64,
        argregs: @FnPtr(r: Qbe.Ref, p: *Array(i32, 2)) u64,
        memargs: @FnPtr(Qbe.O) i32,  // TODO: make this a table? 
        abi1: @FnPtr(*Qbe.Fn) void,
        isel: @FnPtr(*Qbe.Fn) void,
        emit_fn: @FnPtr(*Qbe.Fn) []Ty(Fixup, Qbe.Sym), // don't call this directly 
        finish_module: @FnPtr(*QbeModule) [][]u8,
        fixup: @FnPtr(self: *QbeModule, symbol: *SymbolInfo, fixup: *Fixup, new_got_reloc: *?Fixup) void,
        finish_passes: @FnPtr(*Qbe.Fn) void,
        gpr: u64,  // bit set of the integer registers
        fpr: u64,  // bit set of the float registers
        hack_builtin_memmove: []Qbe.Ref,
    );
    BSet :: @struct(
        nt: u32,  // measured in u64
        t: *u64,
    );
    Ref :: @struct(
        // type is a RegKind
        type3_val29: u32, // :BitField
    );
    Ins :: @struct(
        // cls is a Qbe.Cls. op is a Qbe.O
        op30_cls2: u32, // :BitField
        to: Qbe.Ref,
        arg: Array(Qbe.Ref, 2),
    );
    Phi :: @rec @struct(
        to: Qbe.Ref,
        arg: QList(Qbe.Ref),
        blk: QList(*Qbe.Blk), 
        narg: u32,
        cls: Qbe.Cls, // size changed but alignment padding makes it the same (TODO: remove comment when dont need to match abi with old version)
        link: *Qbe.Phi,
        visit: i32 = 0,
    );
    BlkJmp :: @rec @struct(
        type: Qbe.J, // :QbeJi16
        arg: Qbe.Ref,
    );
    #use("@/backend/lib.fr");
    // note: only specific fields are copied into the inlining cache. 
    Blk :: @rec @struct(
        phi: *Qbe.Phi,
        ins: RawList(Qbe.Ins),
        jmp: Qbe.BlkJmp,
        // jmp: s1=dest, s2=null
        // jnz: s1=then(1), s2=else(0)
        // switch: frontend only (lowered to if-else chain, not jump table). arg is an RInt index into Fn.switches
        s1: *Qbe.Blk, // nullable
        s2: *Qbe.Blk, // nullable
        link: *Qbe.Blk,
        
        id: i32,
        visit: i32,
        
        idom: *Qbe.Blk,
        dom: *Qbe.Blk,
        dlink: *Qbe.Blk,
        fron: QList(*Qbe.Blk),
        nfron: u32,
    
        pred: QList(*Qbe.Blk),
        npred: u32,
        in: Qbe.BSet,  // the values read by this block (but not created inside it, ie. reading a value made in a different block), but including phis.
        out: Qbe.BSet,  // the values written by this block that will be read by another. 
        gen: Qbe.BSet,
        nlive: Array(i32, 2),
        loop: i32,
        name: Str,
        
        wasm_type: i32, // TODO: surely i can union this with some other field
        depth: i32,
    );
    UseType :: @enum(i32) (UXXX, UPhi, UIns, UJmp);
    Use :: @struct(
        type: Qbe.UseType,
        bid: i32,
        u: @union(ins: *Qbe.Ins, phi: *Qbe.Phi, r: rawptr),
    );
    AliasType :: @enum(i32) ( // :OddMeansStack
        ABot = 0,
        ALoc = 1, /* stack local */
        ACon = 2,
        AEsc = 3, /* stack escaping */
        ASym = 4,
        // skip 5
        AUnk = 6,
    );
    Alias :: @struct(
        type: Qbe.AliasType, // :nullable
        base: i32,
        offset: i64,
        u: @union(
            sym: Qbe.Sym,
            loc: @struct(
                sz: i32, /* -1 if > NBit */
                m: u64,
            ),
        ),
        // This is spiritually a pointer to another tmp's Alias field.
        // Just have to be careful about the array resizing because if we suspend for inlining, it might be using an allocator that actually frees. 
        slot: Qbe.Ref,
    );
    TmpType :: @enum(i32) (
        // from fill_uses, used by copy elimination
        WFull,
        Wsb, /* must match Oload/Oext order */
        Wub,
        Wsh,
        Wuh,
        Wsw,
        Wuw,
    );
    Tmp :: @struct(
        name: Str,
        def: *Qbe.Ins, // TODO: nullable
        use: QList(Qbe.Use),
        ndef: u32,  // once in ssa form this will always be 0 or 1, but we use this field while constructing ssa form.
        nuse: u32,
        defining_block: i32,
        cost: u32,
        slot: i32,  /* -1 for unset */
        // `cls` is set by newtmp() but wrong when loaded from .frc.
        // set by fill_use (based on Ins.cls()). 
        // used in isel, fill_liveness, copy, load, rega, spill. 
        // used (and mutated) in fails_typecheck (debug mode only)
        cls: Qbe.Cls,
        hint: @struct(
            register: i32, // r /* or -1 */
            avoid: u64,    // m
        ),
        phi: i32,
        alias: Qbe.Alias,
        width: Qbe.TmpType, 
        visit: i32,  // this is just a place that passes can stick some internal information without needing to alloc thier own array and pass it around. 
        gcmbid: u32,
    );
    ConType :: @enum(i32) (CBits, CAddr);
    no_symbol :: 0xFFFFFFFF;
    no_symbol_S: Qbe.Sym: (id = Qbe.no_symbol);
    Con :: @struct(
        bits: Ty(u32, u32), 
        sym: Qbe.Sym = (id = Qbe.no_symbol),
    );
    // RMem is inserted by isel to represent some instructions that need more than three arguments. 
    // 
    // amd64:
    // (used consistantly for indirect addressing modes)
    // 
    // arm64: 
    // (some instructions need 3 arguments, totally different meaning from above)
    // - add addend, [x * y +]     (for madd)
    // - storeK value, [addr *+ INT(offset)]
    // - cas1 [old * new +], p
    // If you add one that uses mem.offset.sym on arm64 don't forget to update incremental.fr/load,push
    // 
    Addr :: @struct(
        offset: Qbe.Con,
        base: Qbe.Ref,
        index: Qbe.Ref,
        scale: i32,
    );
    Lnk :: @struct(
        export := false,
        align: u8 = 8,
        no_inline := false,
        id: Qbe.Sym,
    );
    // note: only specific fields are copied into the inlining cache. 
    Fn :: @rec @struct(
        globals: *QbeModule,
        start: *Qbe.Blk,
        tmp: QList(Qbe.Tmp),  
        con: QList(Qbe.Con),
        mem: QList(Qbe.Addr),
        ntmp: i32,
        ncon: i32,
        nmem: i32,
        nblk: i32,
        retty: Qbe.Ref,  /* RType or RNull if no aggregate return */
        retr: Qbe.Ref, // (during abi pass: indirect return pointer) (reused as SP in wasm isel)
        rpo: QList(*Qbe.Blk),
        reg: u64,
        slot: i32,
        salign: i32,
        vararg: bool,
        dynalloc: bool,
        leaf: bool,
        read_only: bool,
        track_ir_names: bool,
        varcall: bool, // only used for wasm
        lnk: Qbe.Lnk,
        
        escaping_slots: Qbe.BSet,
        switches: QList(Qbe.SwitchPayload),
        switch_count: u32,
        // TODO: need to store this in .frc file
        // This is redundant on native targets but wasm needs it (see test/abi11.ssa). 
        // (for consistency, it's part of debug fails_typecheck and must be set on all targets). 
        ret_cls: Qbe.Cls,  // Ke=aggragate, Kx=void
        
        env_par: Qbe.Ref,
    );
    InlineFn :: @struct {
        blocks: []Qbe.Blk;
        con: QList(Qbe.Con);
        ntmp: i32;
        ncon: i32;
        nblk: i32;
        retty: Qbe.Ref;
        leaf: bool;
        read_only: bool;
        past_last_param_idx: i32;
        ret_cls: Qbe.Cls;
        tmp_names: []Str;
        lnk: Qbe.Lnk;
    };
    SwitchPayload :: @struct(
        cases: QList(Ty(*Qbe.Blk, i64)),
        case_count: i64,
        default: *Qbe.Blk,
        src: *Qbe.Blk,
        inspect: Qbe.Ref,
    );
    FieldType :: @enum(u8) (
        FEnd,
        Fb,
        Fh,
        Fw,
        Fl,
        Fs,
        Fd,
        FPad,
        FTyp,
    );
    Field :: @struct(
        type: Qbe.FieldType,
        // for prims, this is size in bytes which seems redundant. 
        len: u32, /* or index in typ[] for FTyp */
    );
    // The `fields` of a struct is terminated by FEnd. 
    // In a union, there are `nunion` structs in a row. 
    // note: this is different from qbe!
    // TODO: is_union redundant? same as nunion == 1. or is there an edge case where the abi treats a 1 case union differently.  
    //       not for RISC-V abi! https://c9x.me/git/qbe.git/commit/?id=9060981c10c21834596d5677a2c9ccc56809eb64
    TypHeader :: @struct(
        // kinda small but since it's only used for abi, overflowing means you 
        // tried to pass a 4gb thing by value which was probably a mistake anyway
        size: u32,
        nunion: u16,
        align_log2: u8,
        flags: u8,  // :BitFieldsCompileError
    );
    Typ :: @struct(
        name: Str,
        fields: []u32,  // use pack() and unpack()
        // :UpdateBoot only compiler didn't support #use on fields so there's a bunch of places with a redundant `.header`
        header: TypHeader #use,
    );
    // order matters for cmp table in emit :CmpOrder
    Cmp :: @enum(i32) (
        // CmpI
        Cieq,
        Cine,
        Cisge,
        Cisgt,
        Cisle,
        Cislt,
        Ciuge,
        Ciugt,
        Ciule,
        Ciult,
        // CmpF
        Cfeq,
        Cfge,
        Cfgt,
        Cfle,
        Cflt,
        Cfne,
        Cfo,
        Cfuo,
    );
    CmpICount :: 10;
    CmpFCount :: 8;
    // :OrderMatters in a whole bunch of places (op_identities_table, can_fold, etc.)
    O :: @enum(i32) (
        Oxxx,
        /* Arithmetic and Bits */
        add,   
        sub, 
        neg,  
        div,  
        rem, 
        udiv,   
        urem, 
        mul,  
        // and/or/xor: after arm isel, a1 will be a RInt with the 13 bit (n, immr, imms) from encode_bitmask (if encodable)
        and,  
        or,   
        xor,  
        sar,  
        shr, 
        shl, 
        
        /* Comparisons */
        ceqw,   
        cnew, 
        csgew,
        csgtw, 
        cslew, 
        csltw, 
        cugew, 
        cugtw,
        culew,  
        cultw, 
    
        ceql,  
        cnel,  
        csgel,
        csgtl, 
        cslel,  
        csltl, 
        cugel,  
        cugtl, 
        culel,
        cultl, 
    
        ceqs, 
        cges, 
        cgts, 
        cles, 
        clts,  
        cnes,
        cos,  // compare-ordered-single (not trigonometry)
        cuos, 
    
        ceqd,
        cged, 
        cgtd,
        cled,   
        cltd,  
        cned,  
        cod,   
        cuod,  
    
        // :OrderMatters maybe_store maybe_load
        /* Memory */
        // after arm isel, the address can be an RMem with base + offset:u12
        storeb,
        storeh,
        storew, 
        storel,
        stores, 
        stored, 
    
        // after arm isel, the second argument can be an RInt with an offset:u12
        loadsb, // order matches ext
        loadub,
        loadsh,
        loaduh,
        loadsw,
        loaduw,
        load,  
    
        /* Extensions and Truncations */
        extsb,   // order matches store
        extub,  
        extsh,  
        extuh, 
        extsw,  
        extuw, 
    
        exts,  
        truncd,
        stosi,  
        stoui,  
        dtosi,   
        dtoui,   
        swtof,
        uwtof,
        sltof,
        ultof,  
        cast,  
        
        // new random bitwise things
        bitswap,  // arm only. needed because single instruction ctz is in FEAT_CSSC which i don't have. 
        byteswap,
        rotr,
        rotl,
        // maybe it's confusing that the cls determines the input width used even though the output is always <=64 
        ctz,  // count trailing zeros
        clz,  // count leading zeros
        ones, // count ones 
        
        // new float things 
        sqrt,
        min,
        max,
        
        truncl, // wasm: i32.wrap_i64
    
        /* Stack Allocation */
        alloc4, 
        alloc8, 
        alloc16, 
    
        /* Variadic Function Helpers */
        vaarg,
        vastart, 
    
        copy,   
    
        /* Debug */
        dbgloc, 
    
        /************************/
        /* INTERNAL OPERATIONS  */
        /************************/
        
        /* Miscellaneous and Architecture-Specific Operations */
        nop,
        addr, 
        blit0, 
        blit1, 
        swap,  
        sign,        
        salloc, 
        xidiv, 
        xdiv, 
        xcmp,   
        xtest, 
        acmp,   
        acmn,  
        afcmp,  
        reqz,        
        rnez,        
    
        // :ordermatters for meta/parse.fr/eat_b_or_h
        /* Arguments, Parameters, and Calls */
        par,   
        parsb,  
        parub,   
        parsh, 
        paruh,  
        parc,   
        pare,   
        arg,
        argsb, 
        argub, 
        argsh, 
        arguh, 
        argc,   
        arge,  
        argv,
        call,
    
        /* Flags Setting */
        flagieq,  // Order matters! for isel and emit.
        flagine,
        flagisge,
        flagisgt,
        flagisle,
        flagislt,
        flagiuge,
        flagiugt,
        flagiule,
        flagiult,
        flagfeq,
        flagfge,
        flagfgt,
        flagfle,
        flagflt,
        flagfne,
        flagfo,  
        flagfuo,
        
        // Wasm
        push,   // T.const, local.get
        pop,    // local.set, drop
        call_indirect,
        global_get, // (0: RCon of the global to read)
        global_set, // (0: RCon of the global to write, 1: value)
        flow,
        local_tee,  // saves a value to a local without popping it from the stack
       
        // Conditional select 
        sel0, // a0 is the condition
        sel1, // a0 if true, a1 if false 
        
        // (arm/amd) Conditional select between args based on flags. 
        // (riscv) selieq/seline are reused as czero.eqz/czero.nez
        selieq,
        seline,
        selisge,
        selisgt,
        selisle,
        selislt,
        seliuge,
        seliugt,
        seliule,
        seliult,
        selfeq,
        selfge,
        selfgt,
        selfle,
        selflt,
        selfne,
        selfo,
        selfuo,
        
        cas0,  // a0 is pointer
        cas1,  // a0 is old, a1 is new, r is previous
    );
    J :: @enum(i32) ( // :QbeJi16
        Jxxx, // :JretOrder
        retw, 
        retl,
        rets,
        retd,
        retsb,
        retub,
        retsh,
        retuh,
        retc,
        ret0,
        jmp,
        jnz,
        jfieq, // first of the flags
        jfine,
        jfisge,
        jfisgt,
        jfisle,
        jfislt,
        jfiuge,
        jfiugt,
        jfiule,
        jfiult,
        jffeq,
        jffge,
        jffgt,
        jffle,
        jfflt,
        jffne,
        jffo,
        jffuo,
        hlt,
        switch,
    );

// :BitFieldsCompileError
TypFlags :: @bit_fields(
    is_dark := 1,  // is it an opaque type where we only know the size and alignment. 
    is_union := 1,
    _ := 6,
);

// Used for unused arg/output slots for non 3-reg instructions.  
// (and hardware register numbers are offset by one to account for us taking val=0)
Null  :: Qbe.Ref.zeroed(); // ref(.RTmp, 0);
// TODO: when do we create these? mem.c, ssa.c
Undef :: ref(.RCon, 0);
// the literal value 0
ConZero :: ref(.RCon, 1);

// TODO: don't call these when merging for formatting names 
//       but have these fmt numbers to display if the string is empty. 
fn name(s: *Qbe.Tmp) Str = s.name;
fn name(s: *Qbe.Blk) Str = @if(s.is_null(), "(NULL)", 
    @if(s.name.len == 0, @tfmt("%", s.id), s.name));
fn name(s: *Qbe.Fn)  Str = s.globals.str(s.lnk.id);
fn name(s: *Qbe.Typ) Str = s.name;
