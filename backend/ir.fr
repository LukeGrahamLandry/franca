// Adapted from Qbe. MIT License. Â© 2015-2024 Quentin Carbonneaux <quentin@c9x.me>

Qbe :: @rec @struct(
    Tmp0 :: 64, // first non-reg temporary
    MaxInstructions :: 1.shift_left(20),
    NBit :: 64,
    Rxxx :: 0,
    NCmp :: 18, 

    DebugKey :: @enum(i64) (
        Parsing = "P".char(),
        Memory = "M".char(),
        Ssa = "N".char(),
        Copy = "C".char(),
        Folding = "F".char(),
        Abi = "A".char(),
        InstSelect = "I".char(),
        Liveness = "L".char(),
        Spill = "S".char(),
        RegAlloc = "R".char(),
        TableRefs = "T".char(),
        Disassemble = "D".char(),
        Inlining = "G".char(),
        Block = "B".char(),
    ),
    Cls :: @enum(i16) (  // :QbeClsi16
        Kx = -1, /* "top" class (see usecheck() and clsmerge()) */
        Kw = 0, // :JretOrder :StoreOrder
        Kl = 1,
        Ks = 2,
        Kd = 3,
        
        // The ones below aren't real, they just exist for the abi. So they're only used for [call args, entry args, ret]. 
        
        // signed/unsigned byte/half
        Ksb = 4, /* matches Oarg/Opar/Jret */
        Kub = 5,
        Ksh = 6,
        Kuh = 7,
     
        // A pointer to a struct passed by value, treated as Wl in the ir.
        // But the type will be in one of the instruction Ref fields, 
        // and the backend can use that to decide if it actually needs to be passed in registers.
        Kc = 8,
     
        K0 = 9, // void (for returns)
    
        Ke = -2, /* erroneous mode */
        // Km = Qbe.Cls.Kl, /* memory pointer */
    ),
    RegKind :: @rec @enum(i32) (
        RTmp = 0,
        RCon = 1,
        RInt = 2,
        RType = 3, /* last kind to come out of the parser */
        RSlot = 4,
        RCall = 5,
        RMem = 6,
        
        // TODO: very confusing if you make this -1 and try to match on it
        RNull = 7, // represented as (RTmp, 0) but useful for comparisons
    ), // u3
    Target :: @rec @struct(
        name: Array(u8, 16),
        apple: bool,
        gpr0: i32, /* first general purpose reg */
        ngpr: i32,
        fpr0: i32, /* first floating point reg */
        nfpr: i32,
        rglob: u64, /* globally live regs (e.g., sp, fp) */
        nrglob: u32,
        caller_saved: *i32, // rsave.  array of nrsave[0] int registers then nrsave[1] float registers
        nrsave: Array(i32, 2),
        retregs: @FnPtr(r: Qbe.Ref, p: *Array(i32, 2)) u64,
        argregs: @FnPtr(r: Qbe.Ref, p: *Array(i32, 2)) u64,
        memargs: @FnPtr(Qbe.O) i32,
        abi0: @FnPtr(*Qbe.Fn) void,
        abi1: @FnPtr(*Qbe.Fn) void,
        isel: @FnPtr(*Qbe.Fn) void,
        emitfn: @FnPtr(*QbeModule, *Qbe.Fn, *FILE) void,
        emitfin: @FnPtr(*FILE) void,
        asloc: Array(u8, 4),
        assym: Array(u8, 4),
    ),
    TargetAbi :: @enum(i64) (
        amd64_sysv,
        amd64_apple,
        arm64,
        arm64_apple,
        rv64,
    ),
    BSet :: @rec @struct(
        nt: u32,
        t: *u64,
    ),
    Ref :: @rec @struct(
        // type is a RegKind
        type3_val29: u32, // :BitField
    ),
    Op :: @rec @struct(
        name: CStr,
        argcls: Array(Array(i16, 4), 2),
        canfold1_hasid1_idval1: u32,  // :BitField 
    ),
    Ins :: @rec @struct(
        // cls is a Qbe.Cls. op is a Qbe.O
        op30_cls2: u32, // :BitField
        to: Qbe.Ref,
        arg: Array(Qbe.Ref, 2),
    ),
    Phi :: @rec @struct(
        to: Qbe.Ref,
        arg: QList(Qbe.Ref),
        blk: QList(*Qbe.Blk), 
        narg: u32,
        cls: Qbe.Cls, // size changed but alignment padding makes it the same (TODO: remove comment when dont need to match abi with old version)
        link: *Qbe.Phi,
    ),
    Blk :: @rec @struct(
        phi: *Qbe.Phi,
        ins: *Qbe.Ins,
        nins: u32,
        jmp: @struct(
            type: Qbe.J, // :QbeJi16
            arg: Qbe.Ref,
        ),
        s1: *Qbe.Blk, // nullable
        s2: *Qbe.Blk, // nullable
        link: *Qbe.Blk,
        
        id: i32,
        visit: i32,
        
        idom: *Qbe.Blk,
        dom: *Qbe.Blk,
        dlink: *Qbe.Blk,
        fron: QList(*Qbe.Blk),
        nfron: u32,
    
        pred: **Qbe.Blk,
        npred: u32,
        in: Qbe.BSet,  // the values read by this block (but not created inside it, ie. reading a value made in a different block), but including phis.
        out: Qbe.BSet,  // the values written by this block that will be read by another. 
        gen: Qbe.BSet,
        nlive: Array(i32, 2),
        loop: i32,
        name: Array(u8, 32),
    ),
    UseType :: @rec @enum(i32) (
        UXXX,
        UPhi,
        UIns,
        UJmp,
    ),
    Use :: @rec @struct(
        type: Qbe.UseType,
        bid: i32,
        u: @union(ins: *Qbe.Ins, phi: *Qbe.Phi),
    ),
    SymType :: @rec @enum(i32) (
        SGlo,
        SThr,
    ),
    Sym :: @rec @struct(
        type: Qbe.SymType,
        id: u32,
    ),
    Num :: @rec @struct(
        n: u8,
        nl: u8,
        nr: u8,
        l: Qbe.Ref,
        r: Qbe.Ref,
    ),
    AliasType :: @enum(i32) ( // :OddMeansStack
        ABot = 0,
        ALoc = 1, /* stack local */
        ACon = 2,
        AEsc = 3, /* stack escaping */
        ASym = 4,
        // skip 5
        AUnk = 6,
    ),
    Alias :: @rec @struct(
        type: Qbe.AliasType, // :nullable
        base: i32,
        offset: i64,
        u: @union(
            sym: Qbe.Sym,
            loc: @struct(
                sz: i32, /* -1 if > NBit */
                m: u64,
            ),
        ),
        slot: *Qbe.Alias,
    ),
    TmpType :: @rec @enum(i32) (
        // from fill_uses, used by copy elimination
        WFull,
        Wsb, /* must match Oload/Oext order */
        Wub,
        Wsh,
        Wuh,
        Wsw,
        Wuw,
        
        // from llvm/isel used by llvm/emit
        LBool,
        LPtr,
    ),
    Tmp :: @rec @struct(
        name: Array(u8, 80),
        def: *Qbe.Ins, // TODO: nullable
        use: QList(Qbe.Use),
        ndef: u32,  // once in ssa form this will always be 0 or 1, but we use this field while constructing ssa form.
        nuse: u32,
        defining_block: i32,
        cost: u32,
        slot: i32,  /* -1 for unset */
        cls: Qbe.Cls,  // :QbeClsi16
        hint: @struct(
            register: i32, // r /* or -1 */
            weight: i32,   // w
            avoid: u64,    // m
        ),
        phi: i32,
        alias: Qbe.Alias,
        width: Qbe.TmpType, 
        visit: i32,  // this is just a place that passes can stick some internal information without needing to alloc thier own array and pass it around. 
    ),
    ConType :: @rec @enum(i32) (
        CUndef,
        CBits,
        CAddr,
    ),
    Con :: @rec @struct(
        type: Qbe.ConType,
        sym := Qbe.Sym.zeroed(),
        bits: @union(i: i64, d: f64, s: f32),
        flt: u8 = 0, /* 1 to print as s, 2 to print as d */
    ),
    Addr :: @rec @struct(
        offset: Qbe.Con,
        base: Qbe.Ref,
        index: Qbe.Ref,
        scale: i32,
    ),
    Lnk :: @struct(
        export := false,
        thread := false,
        common := false,
        align: i8 = 8,
        sec := CStr.zeroed(),  // TODO: Nullable(T) but thats a pain for CStr
        secf := CStr.zeroed(),
    ),
    Fn :: @rec @struct(
        start: *Qbe.Blk,
        tmp: QList(Qbe.Tmp),  
        con: QList(Qbe.Con),
        mem: QList(Qbe.Addr),
        ntmp: i32,
        ncon: i32,
        nmem: i32,
        nblk: i32,
        retty: i32,  /* index in typ[], -1 if no aggregate return */
        retr: Qbe.Ref, // indirect return pointer
        rpo: **Qbe.Blk,
        reg: u64,
        slot: i32,
        salign: i32,
        vararg: bool,
        dynalloc: bool,
        leaf: bool,
        name: Array(u8, 80),
        lnk: Qbe.Lnk,
        
        // Qbe never stores arrays of functions (it goes one at a time), so adding our own extra fields is fine.
        globals: *QbeModule,
    ),
    FieldType :: @enum(i32) (
        FEnd,
        Fb,
        Fh,
        Fw,
        Fl,
        Fs,
        Fd,
        FPad,
        FTyp,
    ),
    Field :: @rec @struct(
        type: Qbe.FieldType,
        len: u32, /* or index in typ[] for FTyp */
    ),
    Typ :: @rec @struct(
        name: Array(u8, 80),
        is_dark: bool,  // is it an opaque type where we only know the size and alignment. 
        is_union: bool, 
        align_log2: i32,
        size: i64,
        // The `fields` of a struct is terminated by FEnd. 
        // In a union, there are `nunion` structs in a row. 
        // TODO: is_union redundant? same as nunion == 1. or is there an edge case where the abi treats a 1 case union differently.  
        nunion: u32,
        fields: QList(Qbe.Field), 
    ),
    Dat :: @rec @struct(
        type: @enum(i32) (
            DStart,
            DEnd,
            DB,
            DH,
            DW,
            DL,
            DZ,
        ),
        name: CStr,
        lnk: *Qbe.Lnk,
        u: @union(
            num: i64,
            fltd: f64,
            flts: f32,
            str: []u8,
            ref: @struct(
                name: CStr,
                off: i64,
            ),
        ),
        // TODO: just use an enum
        isref: bool,
        isstr: bool,
        has_quotes_and_escapes: bool,
    ),
    Pool :: @rec @enum(i32) (
        PHeap, /* free() necessary */
        PFn,   /* discarded after processing the function */
    ),
    // order matters for cmp table in emit :CmpOrder
    Cmp :: @enum(i32) (
        // CmpI
        Cieq,
        Cine,
        Cisge,
        Cisgt,
        Cisle,
        Cislt,
        Ciuge,
        Ciugt,
        Ciule,
        Ciult,
        // CmpF
        Cfeq,
        Cfge,
        Cfgt,
        Cfle,
        Cflt,
        Cfne,
        Cfo,
        Cfuo,
    ),
    CmpICount :: 10,
    CmpFCount :: 8,
    O :: @enum(i32) (
        // vvv BEWARE: order matters for op_identities_table vvv
        Oxxx,
        /* Arithmetic and Bits */
        add,   
        sub, 
        neg,  
        div,  
        rem, 
        udiv,   
        urem, 
        mul,  
        and,  
        or,   
        xor,  
        sar,  
        shr, 
        shl, 
        // ^^^ BEWARE: order matters for op_identities_table ^^^
        
        /* Comparisons */
        ceqw,   
        cnew, 
        csgew,
        csgtw, 
        cslew, 
        csltw, 
        cugew, 
        cugtw,
        culew,  
        cultw, 
    
        ceql,  
        cnel,  
        csgel,
        csgtl, 
        cslel,  
        csltl, 
        cugel,  
        cugtl, 
        culel,
        cultl, 
    
        ceqs, 
        cges, 
        cgts, 
        cles, 
        clts,  
        cnes,
        cos,  
        cuos, 
    
        ceqd,
        cged, 
        cgtd,
        cled,   
        cltd,  
        cned,  
        cod,   
        cuod,  
    
        /* Memory */
        storeb,
        storeh,
        storew, 
        storel,
        stores, 
        stored, 
    
        loadsb, // order matches ext
        loadub,
        loadsh,
        loaduh,
        loadsw,
        loaduw,
        load,  
    
        /* Extensions and Truncations */
        extsb,   // order matches store
        extub,  
        extsh,  
        extuh, 
        extsw,  
        extuw, 
    
        exts,  
        truncd,
        stosi,  
        stoui,  
        dtosi,   
        dtoui,   
        swtof,
        uwtof,
        sltof,
        ultof,  
        cast,  
    
        /* Stack Allocation */
        alloc4, 
        alloc8, 
        alloc16, 
    
        /* Variadic Function Helpers */
        vaarg,
        vastart, 
    
        copy,   
    
        /* Debug */
        dbgloc, 
    
        /****************************************/
        /* INTERNAL OPERATIONS (keep nop first) */
        /****************************************/
        
        /* Miscellaneous and Architecture-Specific Operations */
        nop,
        addr, 
        blit0, 
        blit1, 
        swap,  
        sign,        
        salloc, 
        xidiv, 
        xdiv, 
        xcmp,   
        xtest, 
        acmp,   
        acmn,  
        afcmp,  
        reqz,        
        rnez,        
    
        /* Arguments, Parameters, and Calls */
        par,   
        parsb,  
        parub,   
        parsh, 
        paruh,  
        parc,   
        pare,   
        arg,
        argsb, 
        argub, 
        argsh, 
        arguh, 
        argc,   
        arge,  
        argv,
        call,
    
        /* Flags Setting */
        flagieq,  // Order matters! for isel and emit.
        flagine,
        flagisge,
        flagisgt,
        flagisle,
        flagislt,
        flagiuge,
        flagiugt,
        flagiule,
        flagiult,
        flagfeq,
        flagfge,
        flagfgt,
        flagfle,
        flagflt,
        flagfne,
        flagfo,  
        flagfuo,
        
        NumberOfOps,
    ),
    J :: @enum(i16) ( // :QbeJi16
        Jxxx, // :JretOrder
        Jretw, 
        Jretl,
        Jrets,
        Jretd,
        Jretsb,
        Jretub,
        Jretsh,
        Jretuh,
        Jretc,
        Jret0,
        Jjmp,
        Jjnz,
        Jjfieq,
        Jjfine,
        Jjfisge,
        Jjfisgt,
        Jjfisle,
        Jjfislt,
        Jjfiuge,
        Jjfiugt,
        Jjfiule,
        Jjfiult,
        Jjffeq,
        Jjffge,
        Jjffgt,
        Jjffle,
        Jjfflt,
        Jjffne,
        Jjffo,
        Jjffuo,
        Jhlt,
        NJmp,
    ),
);

// Used for unused arg/output slots for non 3-reg instructions.  
// (and hardware register numbers are offset by one to account for us taking val=0)
QbeNull  :: Qbe.Ref.zeroed(); // ref(.RTmp, 0);
// TODO: when do we create these? mem.c, ssa.c
QbeUndef :: ref(.RCon, 0); ::enum_basic(Qbe.RegKind);
// the literal value 0
QbeConZero :: ref(.RCon, 1);

fn parse(_0: *FILE, _1: CStr, _2: @FnPtr(CStr) void, _3: @FnPtr(*Qbe.Dat) void, _4: @FnPtr(*Qbe.Fn) void) void #import("qbe");
fn fold(_0: *Qbe.Fn) void #import("qbe");
// Note: you have to make this not `static` in qbe/parse.fr
fn typecheck(_0: *Qbe.Fn) void #import("qbe");

fn name(s: *Qbe.Tmp) CStr = (ptr = s.name&.as_ptr());
fn name(s: *Qbe.Blk) CStr = (ptr = s.name&.as_ptr());
fn name(s: *Qbe.Fn) CStr  = (ptr = s.name&.as_ptr());
fn name(s: *Qbe.Typ) CStr  = (ptr = s.name&.as_ptr());


::enum_basic(Qbe.DebugKey);
::enum(Qbe.TargetAbi);
