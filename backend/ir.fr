// Adapted from Qbe. MIT License. Â© 2015-2024 Quentin Carbonneaux <quentin@c9x.me>

TRACK_IR_NAMES :: true;  // TODO: not quite right to turn this off because meta/template.fr uses it. 

Qbe :: @rec @struct(
    Tmp0 :: 64, // first non-reg temporary
    MaxInstructions :: 1.shift_left(20),
    NBit :: 64,
    Rxxx :: 0,
    NCmp :: 18, 

    DebugKey :: @enum(i64) (
        Parsing = "P".char(),
        Memory = "M".char(),
        Ssa = "N".char(),
        Copy = "C".char(),
        Folding = "F".char(),
        Abi = "A".char(),
        InstSelect = "I".char(),
        Liveness = "L".char(),
        Spill = "S".char(),
        RegAlloc = "R".char(),
        TableRefs = "T".char(),
        Disassemble = "D".char(),
        Inlining = "G".char(),
        Block = "B".char(),
    ),
    Cls :: @enum(i32) (  // :QbeClsi16
        Kx = 10, /* "top" class (see usecheck() and clsmerge()) */
        Kw = 0, // :JretOrder :StoreOrder
        Kl = 1,
        Ks = 2,
        Kd = 3,
        
        // The ones below aren't real, they just exist for the abi. So they're only used for [call args, entry args, ret]. 
        
        // signed/unsigned byte/half
        Ksb = 4, /* matches Oarg/Opar/Jret */
        Kub = 5,
        Ksh = 6,
        Kuh = 7,
     
        // A pointer to a struct passed by value, treated as Wl in the ir.
        // But the type will be in one of the instruction Ref fields, 
        // and the backend can use that to decide if it actually needs to be passed in registers.
        Kc = 8,
     
        K0 = 9, // void (for returns)
    
        Ke = 12, /* erroneous mode */
        // Km = Qbe.Cls.Kl, /* memory pointer */
    ),
    RegKind :: @rec @enum(i32) (
        RTmp = 0,
        RCon = 1,
        RInt = 2,
        RType = 3, /* last kind to come out of the parser */
        RSlot = 4,
        RCall = 5,
        RMem = 6,
        
        // TODO: very confusing if you make this -1 and try to match on it
        RNull = 7, // represented as (RTmp, 0) but useful for comparisons
    ), // u3
    Target :: @rec @struct(
        name: Array(u8, 16),
        apple: bool,
        gpr0: i32, /* first general purpose reg */
        ngpr: i32,
        fpr0: i32, /* first floating point reg */
        nfpr: i32,
        rglob: u64, /* globally live regs (e.g., sp, fp) */
        nrglob: u32,
        caller_saved: *i32, // rsave.  array of nrsave[0] int registers then nrsave[1] float registers
        nrsave: Array(i32, 2),
        retregs: @FnPtr(r: Qbe.Ref, p: *Array(i32, 2)) u64,
        argregs: @FnPtr(r: Qbe.Ref, p: *Array(i32, 2)) u64,
        memargs: @FnPtr(Qbe.O) i32,
        abi0: @FnPtr(*Qbe.Fn) void,
        abi1: @FnPtr(*Qbe.Fn) void,
        isel: @FnPtr(*Qbe.Fn) void,
        emitfn: @FnPtr(*QbeModule, *Qbe.Fn, *FILE) void,
        emitfin: @FnPtr(*FILE) void,
        asloc: Array(u8, 4),
        assym: Array(u8, 4),
    ),
    TargetAbi :: @enum(i64) (
        amd64_sysv,
        amd64_apple,
        arm64,
        arm64_apple,
        rv64,
    ),
    BSet :: @rec @struct(
        nt: u32,
        t: *u64,
    ),
    Ref :: @rec @struct(
        // type is a RegKind
        type3_val29: u32, // :BitField
    ),
    Op :: @rec @struct(
        name: CStr,
        argcls: Array(Array(i16, 4), 2),
        canfold1_hasid1_idval1: u32,  // :BitField 
    ),
    Ins :: @rec @struct(
        // cls is a Qbe.Cls. op is a Qbe.O
        op30_cls2: u32, // :BitField
        to: Qbe.Ref,
        arg: Array(Qbe.Ref, 2),
    ),
    Phi :: @rec @struct(
        to: Qbe.Ref,
        arg: QList(Qbe.Ref),
        blk: QList(*Qbe.Blk), 
        narg: u32,
        cls: Qbe.Cls, // size changed but alignment padding makes it the same (TODO: remove comment when dont need to match abi with old version)
        link: *Qbe.Phi,
    ),
    // note: only specific fields are copied into the inlining cache. 
    Blk :: @rec @struct(
        phi: *Qbe.Phi,
        ins: QList(Qbe.Ins),
        nins: u32,
        jmp: @struct(
            type: Qbe.J, // :QbeJi16
            arg: Qbe.Ref,
        ),
        s1: *Qbe.Blk, // nullable
        s2: *Qbe.Blk, // nullable
        link: *Qbe.Blk,
        
        id: i32,
        visit: i32,
        
        idom: *Qbe.Blk,
        dom: *Qbe.Blk,
        dlink: *Qbe.Blk,
        fron: QList(*Qbe.Blk),
        nfron: u32,
    
        pred: QList(*Qbe.Blk),
        npred: u32,
        in: Qbe.BSet,  // the values read by this block (but not created inside it, ie. reading a value made in a different block), but including phis.
        out: Qbe.BSet,  // the values written by this block that will be read by another. 
        gen: Qbe.BSet,
        nlive: Array(i32, 2),
        loop: i32,
        name: @if(TRACK_IR_NAMES, Array(u8, 32), void),
    ),
    UseType :: @rec @enum(i32) (
        UXXX,
        UPhi,
        UIns,
        UJmp,
    ),
    Use :: @rec @struct(
        type: Qbe.UseType,
        bid: i32,
        u: @union(ins: *Qbe.Ins, phi: *Qbe.Phi),
    ),
    SymType :: @rec @enum(i32) (
        SGlo,
        SThr,
    ),
    Sym :: @rec @struct(
        type: Qbe.SymType,
        id: u32,
    ),
    Num :: @rec @struct(
        n: u8,
        nl: u8,
        nr: u8,
        l: Qbe.Ref,
        r: Qbe.Ref,
    ),
    AliasType :: @enum(i32) ( // :OddMeansStack
        ABot = 0,
        ALoc = 1, /* stack local */
        ACon = 2,
        AEsc = 3, /* stack escaping */
        ASym = 4,
        // skip 5
        AUnk = 6,
    ),
    Alias :: @rec @struct(
        type: Qbe.AliasType, // :nullable
        base: i32,
        offset: i64,
        u: @union(
            sym: Qbe.Sym,
            loc: @struct(
                sz: i32, /* -1 if > NBit */
                m: u64,
            ),
        ),
        slot: *Qbe.Alias,
    ),
    TmpType :: @rec @enum(i32) (
        // from fill_uses, used by copy elimination
        WFull,
        Wsb, /* must match Oload/Oext order */
        Wub,
        Wsh,
        Wuh,
        Wsw,
        Wuw,
    ),
    Tmp :: @rec @struct(
        name: @if(TRACK_IR_NAMES, Array(u8, 80), void),
        def: *Qbe.Ins, // TODO: nullable
        use: QList(Qbe.Use),
        ndef: u32,  // once in ssa form this will always be 0 or 1, but we use this field while constructing ssa form.
        nuse: u32,
        defining_block: i32,
        cost: u32,
        slot: i32,  /* -1 for unset */
        cls: Qbe.Cls,  // :QbeClsi16
        hint: @struct(
            register: i32, // r /* or -1 */
            weight: i32,   // w
            avoid: u64,    // m
        ),
        phi: i32,
        alias: Qbe.Alias,
        width: Qbe.TmpType, 
        visit: i32,  // this is just a place that passes can stick some internal information without needing to alloc thier own array and pass it around. 
    ),
    ConType :: @rec @enum(i32) (
        CUndef,
        CBits,
        CAddr,
    ),
    Con :: @rec @struct(
        type: Qbe.ConType,
        sym := Qbe.Sym.zeroed(),
        // note: don't want junk in the high bits if inititialize through s field. 
        bits: @union(i: i64, d: f64, s: @struct(s: f32, _: u32 = 0)),
        flt: u8 = 0, /* 1 to print as s, 2 to print as d */
    ),
    Addr :: @rec @struct(
        offset: Qbe.Con,
        base: Qbe.Ref,
        index: Qbe.Ref,
        scale: i32,
    ),
    Lnk :: @struct(
        export := false,
        thread := false,
        common := false,
        align: u8 = 8,
        id: u32,
        sec := CStr.zeroed(),  // TODO: Nullable(T) but thats a pain for CStr
        secf := CStr.zeroed(),
    ),
    // note: only specific fields are copied into the inlining cache. 
    Fn :: @rec @struct(
        start: *Qbe.Blk,
        tmp: QList(Qbe.Tmp),  
        con: QList(Qbe.Con),
        mem: QList(Qbe.Addr),
        ntmp: i32,
        ncon: i32,
        nmem: i32,
        nblk: i32,
        retty: i32,  /* index in typ[], -1 if no aggregate return */
        retr: Qbe.Ref, // indirect return pointer
        rpo: QList(*Qbe.Blk),
        reg: u64,
        slot: i32,
        salign: i32,
        vararg: bool,
        dynalloc: bool,
        leaf: bool,
        name: @if(TRACK_IR_NAMES, Array(u8, 80), void),
        read_only: bool,
        lnk: Qbe.Lnk,
        
        // Qbe never stores arrays of functions (it goes one at a time), so adding our own extra fields is fine.
        globals: *QbeModule,
    ),
    FieldType :: @enum(i32) (
        FEnd,
        Fb,
        Fh,
        Fw,
        Fl,
        Fs,
        Fd,
        FPad,
        FTyp,
    ),
    Field :: @rec @struct(
        type: Qbe.FieldType,
        // for prims, this is size in bytes which seems redundant. 
        len: u32, /* or index in typ[] for FTyp */
    ),
    Typ :: @rec @struct(
        name: @if(TRACK_IR_NAMES, Array(u8, 80), void),
        is_dark: bool,  // is it an opaque type where we only know the size and alignment. 
        is_union: bool, 
        align_log2: i32,
        size: i64,
        // The `fields` of a struct is terminated by FEnd. 
        // In a union, there are `nunion` structs in a row. 
        // note: this is different from qbe!
        // TODO: is_union redundant? same as nunion == 1. or is there an edge case where the abi treats a 1 case union differently.  
        //       not for RISC-V abi! https://c9x.me/git/qbe.git/commit/?id=9060981c10c21834596d5677a2c9ccc56809eb64
        nunion: u32,
        fields: QList(Qbe.Field), 
    ),
    Dat :: @rec @struct(
        type: @enum(i32) (
            DStart,
            DEnd,
            DB,
            DH,
            DW,
            DL,
            DZ,
        ),
        name: CStr,  // TODO: remove when no longer interact with qbe. redundant with lnk.id
        lnk: *Qbe.Lnk,
        u: @union(
            num: i64,
            fltd: f64,
            flts: f32,
            str: []u8,
            ref: @struct(
                name: CStr,  // TODO: use interned id when done with qbe c. 
                off: i64,
            ),
        ),
        // TODO: just use an enum
        is_ref: bool,
        is_str: bool,
        has_quotes_and_escapes: bool,
    ),
    Pool :: @rec @enum(i32) (
        PHeap, /* free() necessary */
        PFn,   /* discarded after processing the function */
        PLong,
    ),
    // order matters for cmp table in emit :CmpOrder
    Cmp :: @enum(i32) (
        // CmpI
        Cieq,
        Cine,
        Cisge,
        Cisgt,
        Cisle,
        Cislt,
        Ciuge,
        Ciugt,
        Ciule,
        Ciult,
        // CmpF
        Cfeq,
        Cfge,
        Cfgt,
        Cfle,
        Cflt,
        Cfne,
        Cfo,
        Cfuo,
    ),
    CmpICount :: 10,
    CmpFCount :: 8,
    // :OrderMatters in a whole bunch of places (op_identities_table, can_fold, etc.)
    O :: @enum(i32) (
        Oxxx,
        /* Arithmetic and Bits */
        add,   
        sub, 
        neg,  
        div,  
        rem, 
        udiv,   
        urem, 
        mul,  
        and,  
        or,   
        xor,  
        sar,  
        shr, 
        shl, 
        
        /* Comparisons */
        ceqw,   
        cnew, 
        csgew,
        csgtw, 
        cslew, 
        csltw, 
        cugew, 
        cugtw,
        culew,  
        cultw, 
    
        ceql,  
        cnel,  
        csgel,
        csgtl, 
        cslel,  
        csltl, 
        cugel,  
        cugtl, 
        culel,
        cultl, 
    
        ceqs, 
        cges, 
        cgts, 
        cles, 
        clts,  
        cnes,
        cos,  
        cuos, 
    
        ceqd,
        cged, 
        cgtd,
        cled,   
        cltd,  
        cned,  
        cod,   
        cuod,  
    
        /* Memory */
        // after arm isel, the address can be an RMem with base + offset:u12
        storeb,
        storeh,
        storew, 
        storel,
        stores, 
        stored, 
    
        // after arm isel, the second argument can be an RInt with an offset:u12
        loadsb, // order matches ext
        loadub,
        loadsh,
        loaduh,
        loadsw,
        loaduw,
        load,  
    
        /* Extensions and Truncations */
        extsb,   // order matches store
        extub,  
        extsh,  
        extuh, 
        extsw,  
        extuw, 
    
        exts,  
        truncd,
        stosi,  
        stoui,  
        dtosi,   
        dtoui,   
        swtof,
        uwtof,
        sltof,
        ultof,  
        cast,  
    
        /* Stack Allocation */
        alloc4, 
        alloc8, 
        alloc16, 
    
        /* Variadic Function Helpers */
        vaarg,
        vastart, 
    
        copy,   
    
        /* Debug */
        dbgloc, 
    
        /****************************************/
        /* INTERNAL OPERATIONS (keep nop first) */
        /****************************************/
        
        /* Miscellaneous and Architecture-Specific Operations */
        nop,
        addr, 
        blit0, 
        blit1, 
        swap,  
        sign,        
        salloc, 
        xidiv, 
        xdiv, 
        xcmp,   
        xtest, 
        acmp,   
        acmn,  
        afcmp,  
        reqz,        
        rnez,        
    
        /* Arguments, Parameters, and Calls */
        par,   
        parsb,  
        parub,   
        parsh, 
        paruh,  
        parc,   
        pare,   
        arg,
        argsb, 
        argub, 
        argsh, 
        arguh, 
        argc,   
        arge,  
        argv,
        call,
    
        /* Flags Setting */
        flagieq,  // Order matters! for isel and emit.
        flagine,
        flagisge,
        flagisgt,
        flagisle,
        flagislt,
        flagiuge,
        flagiugt,
        flagiule,
        flagiult,
        flagfeq,
        flagfge,
        flagfgt,
        flagfle,
        flagflt,
        flagfne,
        flagfo,  
        flagfuo,
    ),
    J :: @enum(i32) ( // :QbeJi16
        Jxxx, // :JretOrder
        retw, 
        retl,
        rets,
        retd,
        retsb,
        retub,
        retsh,
        retuh,
        retc,
        ret0,
        jmp,
        jnz,
        jfieq, // first of the flags
        jfine,
        jfisge,
        jfisgt,
        jfisle,
        jfislt,
        jfiuge,
        jfiugt,
        jfiule,
        jfiult,
        jffeq,
        jffge,
        jffgt,
        jffle,
        jfflt,
        jffne,
        jffo,
        jffuo,
        hlt,
    ),
);

// Used for unused arg/output slots for non 3-reg instructions.  
// (and hardware register numbers are offset by one to account for us taking val=0)
QbeNull  :: Qbe.Ref.zeroed(); // ref(.RTmp, 0);
// TODO: when do we create these? mem.c, ssa.c
QbeUndef :: ref(.RCon, 0); ::enum_basic(Qbe.RegKind);
// the literal value 0
QbeConZero :: ref(.RCon, 1);

// Note: you have to make this not `static` in qbe/parse.fr
fn typecheck(_0: *Qbe.Fn) void #import("qbe");

fn name(s: *Qbe.Tmp) CStr = @if(TRACK_IR_NAMES, (ptr = s.name&.as_ptr()), ::"".sym().c_str());
fn name(s: *Qbe.Blk) CStr = @if(TRACK_IR_NAMES, (ptr = s.name&.as_ptr()), ::"".sym().c_str());
fn name(s: *Qbe.Fn) CStr  = @if(TRACK_IR_NAMES, (ptr = s.name&.as_ptr()), ::"".sym().c_str());
fn name(s: *Qbe.Typ) CStr = @if(TRACK_IR_NAMES, (ptr = s.name&.as_ptr()), ::"".sym().c_str());

::enum_basic(Qbe.DebugKey);
::enum(Qbe.TargetAbi);
