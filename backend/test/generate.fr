// Some of the committed .ssa tests are not hand written. 
// This program makes sure they can be deterministically regenerated. 
// See the end of @/backend/meta/test.fr for details of the test file format sections. 

// TODO: make it easy to express this as a driver because comptime compiles single threaded. 
//       need creating a new compile context and getting a pointer out to be as usable as import().
// TODO: allow adding other files as invalidating the compiler's cache

main :: fn() void = ::impl();

impl :: fn() void = {
    tests_folder := "backend/test";
    files := import("@/examples/testing.fr")'collect_with_extension(tests_folder, ".ssa") 
        || panic("didn't find tests. run from franca root dir");
    
    failed, n := (0, 0);
    for files { filename |
        continue :: local_return;
        mark := mark_temporary_storage();
        ssa_src := read_entire_file_or_crash(temp(), @tfmt("%/%", tests_folder, filename));
        sections := import("@/backend/meta/test.fr")'extract_sections(ssa_src);
        @assert(!(sections&.get("generate").is_none() && sections&.get("generated").is_some()));
        
        generate := sections&.get("generate") || {
            reset_temporary_storage(mark);
            continue();
        };
        @println("generating for [%]", filename);
        generated := sections&.get("generated").expect("test with >>>generate must also have >>>generated");
        generate := @tfmt("{ % };", generate);
        f := const_eval(@FnPtr(s: Str) Str, @{ S :: import(@[@literal generate]); S.main });
        source := sections&.get("source") || "";
        @print(Terminal.set_colour, 150, 150, 150);
        result := f(source);
        @print(Terminal.unset_colour);
        if generated != result {
            @println("FAILED to regenerate [%]", filename);
            old := @tfmt("target/%.generated.old.txt", filename);
            new := @tfmt("target/%.generated.new.txt", filename);
            write_entire_file(new, result);
            write_entire_file(old, generated);
            @println("diff % %", old, new);
            failed += 1;
        }
        @println("regenerated % bytes for [%]", result.len, filename);
        n += 1;
        reset_temporary_storage(mark);
    };
    @println("successfully regenerated % .ssa tests", n - failed);
    @assert_eq(failed, 0, "failed to regenerate .ssa tests");
    @assert_eq(n, 5, "i happen to know how many there are supposed to be. update this when you add one!");
};

Terminal :: import("@/lib/sys/terminal.fr");
