# >>> generated
export function $qbeprint0(l %fmt, ...) {
@start
	%fmtdbl =l alloc4 4
	%fmtint =l alloc4 4
	%emptys =l alloc4 4
	storew 2122789, %fmtint
	storew 2123557, %fmtdbl
	storew 0, %emptys
	%vp =l alloc8 32
	%fmt1 =l add 1, %fmt
	vastart %vp
@loop
	%p =l phi @start %fmt1, @casef %p1, @cased %p1
	%c =w loadsb %p
	%p1 =l add 3, %p
	jnz %c, @loop1, @end
@loop1
	%isg =w ceqw %c, 103
	jnz %isg, @casef, @cased
@casef
	%dbl =d vaarg %vp
	%r =w call $printf(l %fmtdbl, ..., d %dbl)
	jmp @loop
@cased
	%int =w vaarg %vp
	%r =w call $printf(l %fmtint, ..., w %int)
	jmp @loop
@end
	%r =w call $puts(l %emptys)
	ret
}

export function $qbecall0(l %fmt, ...) {
@start
	%vp =l alloc8 32
	vastart %vp
	%r =w call $print(l %fmt, l %vp)
	ret
}

export function $qbeprint1(w %argw0, l %fmt, ...) {
@start
	%fmtdbl =l alloc4 4
	%fmtint =l alloc4 4
	%emptys =l alloc4 4
	storew 2122789, %fmtint
	storew 2123557, %fmtdbl
	storew 0, %emptys
	%vp =l alloc8 32
	%fmt1 =l add 1, %fmt
	vastart %vp
@loop
	%p =l phi @start %fmt1, @casef %p1, @cased %p1
	%c =w loadsb %p
	%p1 =l add 3, %p
	jnz %c, @loop1, @end
@loop1
	%isg =w ceqw %c, 103
	jnz %isg, @casef, @cased
@casef
	%dbl =d vaarg %vp
	%r =w call $printf(l %fmtdbl, ..., d %dbl)
	jmp @loop
@cased
	%int =w vaarg %vp
	%r =w call $printf(l %fmtint, ..., w %int)
	jmp @loop
@end
	%r =w call $puts(l %emptys)
	ret
}

export function $qbecall1(w %argw0, l %fmt, ...) {
@start
	%vp =l alloc8 32
	vastart %vp
	%r =w call $print(l %fmt, l %vp)
	ret
}

export function $qbeprint2(d %argd0, l %fmt, ...) {
@start
	%fmtdbl =l alloc4 4
	%fmtint =l alloc4 4
	%emptys =l alloc4 4
	storew 2122789, %fmtint
	storew 2123557, %fmtdbl
	storew 0, %emptys
	%vp =l alloc8 32
	%fmt1 =l add 1, %fmt
	vastart %vp
@loop
	%p =l phi @start %fmt1, @casef %p1, @cased %p1
	%c =w loadsb %p
	%p1 =l add 3, %p
	jnz %c, @loop1, @end
@loop1
	%isg =w ceqw %c, 103
	jnz %isg, @casef, @cased
@casef
	%dbl =d vaarg %vp
	%r =w call $printf(l %fmtdbl, ..., d %dbl)
	jmp @loop
@cased
	%int =w vaarg %vp
	%r =w call $printf(l %fmtint, ..., w %int)
	jmp @loop
@end
	%r =w call $puts(l %emptys)
	ret
}

export function $qbecall2(d %argd0, l %fmt, ...) {
@start
	%vp =l alloc8 32
	vastart %vp
	%r =w call $print(l %fmt, l %vp)
	ret
}

export function $qbeprint3(w %argw0, w %argw1, w %argw2, w %argw3, l %fmt, ...) {
@start
	%fmtdbl =l alloc4 4
	%fmtint =l alloc4 4
	%emptys =l alloc4 4
	storew 2122789, %fmtint
	storew 2123557, %fmtdbl
	storew 0, %emptys
	%vp =l alloc8 32
	%fmt1 =l add 1, %fmt
	vastart %vp
@loop
	%p =l phi @start %fmt1, @casef %p1, @cased %p1
	%c =w loadsb %p
	%p1 =l add 3, %p
	jnz %c, @loop1, @end
@loop1
	%isg =w ceqw %c, 103
	jnz %isg, @casef, @cased
@casef
	%dbl =d vaarg %vp
	%r =w call $printf(l %fmtdbl, ..., d %dbl)
	jmp @loop
@cased
	%int =w vaarg %vp
	%r =w call $printf(l %fmtint, ..., w %int)
	jmp @loop
@end
	%r =w call $puts(l %emptys)
	ret
}

export function $qbecall3(w %argw0, w %argw1, w %argw2, w %argw3, l %fmt, ...) {
@start
	%vp =l alloc8 32
	vastart %vp
	%r =w call $print(l %fmt, l %vp)
	ret
}

export function $qbeprint4(d %argd0, d %argd1, d %argd2, d %argd3, d %argd4, d %argd5, l %fmt, ...) {
@start
	%fmtdbl =l alloc4 4
	%fmtint =l alloc4 4
	%emptys =l alloc4 4
	storew 2122789, %fmtint
	storew 2123557, %fmtdbl
	storew 0, %emptys
	%vp =l alloc8 32
	%fmt1 =l add 1, %fmt
	vastart %vp
@loop
	%p =l phi @start %fmt1, @casef %p1, @cased %p1
	%c =w loadsb %p
	%p1 =l add 3, %p
	jnz %c, @loop1, @end
@loop1
	%isg =w ceqw %c, 103
	jnz %isg, @casef, @cased
@casef
	%dbl =d vaarg %vp
	%r =w call $printf(l %fmtdbl, ..., d %dbl)
	jmp @loop
@cased
	%int =w vaarg %vp
	%r =w call $printf(l %fmtint, ..., w %int)
	jmp @loop
@end
	%r =w call $puts(l %emptys)
	ret
}

export function $qbecall4(d %argd0, d %argd1, d %argd2, d %argd3, d %argd4, d %argd5, l %fmt, ...) {
@start
	%vp =l alloc8 32
	vastart %vp
	%r =w call $print(l %fmt, l %vp)
	ret
}

export function $qbeprint5(w %argw0, w %argw1, w %argw2, w %argw3, w %argw4, d %argd0, d %argd1, d %argd2, d %argd3, d %argd4, d %argd5, d %argd6, l %fmt, ...) {
@start
	%fmtdbl =l alloc4 4
	%fmtint =l alloc4 4
	%emptys =l alloc4 4
	storew 2122789, %fmtint
	storew 2123557, %fmtdbl
	storew 0, %emptys
	%vp =l alloc8 32
	%fmt1 =l add 1, %fmt
	vastart %vp
@loop
	%p =l phi @start %fmt1, @casef %p1, @cased %p1
	%c =w loadsb %p
	%p1 =l add 3, %p
	jnz %c, @loop1, @end
@loop1
	%isg =w ceqw %c, 103
	jnz %isg, @casef, @cased
@casef
	%dbl =d vaarg %vp
	%r =w call $printf(l %fmtdbl, ..., d %dbl)
	jmp @loop
@cased
	%int =w vaarg %vp
	%r =w call $printf(l %fmtint, ..., w %int)
	jmp @loop
@end
	%r =w call $puts(l %emptys)
	ret
}

export function $qbecall5(w %argw0, w %argw1, w %argw2, w %argw3, w %argw4, d %argd0, d %argd1, d %argd2, d %argd3, d %argd4, d %argd5, d %argd6, l %fmt, ...) {
@start
	%vp =l alloc8 32
	vastart %vp
	%r =w call $print(l %fmt, l %vp)
	ret
}

export function $qbeprint6(w %argw0, w %argw1, w %argw2, w %argw3, w %argw4, w %argw5, w %argw6, w %argw7, w %argw8, w %argw9, d %argd0, d %argd1, d %argd2, d %argd3, d %argd4, d %argd5, d %argd6, d %argd7, d %argd8, d %argd9, l %fmt, ...) {
@start
	%fmtdbl =l alloc4 4
	%fmtint =l alloc4 4
	%emptys =l alloc4 4
	storew 2122789, %fmtint
	storew 2123557, %fmtdbl
	storew 0, %emptys
	%vp =l alloc8 32
	%fmt1 =l add 1, %fmt
	vastart %vp
@loop
	%p =l phi @start %fmt1, @casef %p1, @cased %p1
	%c =w loadsb %p
	%p1 =l add 3, %p
	jnz %c, @loop1, @end
@loop1
	%isg =w ceqw %c, 103
	jnz %isg, @casef, @cased
@casef
	%dbl =d vaarg %vp
	%r =w call $printf(l %fmtdbl, ..., d %dbl)
	jmp @loop
@cased
	%int =w vaarg %vp
	%r =w call $printf(l %fmtint, ..., w %int)
	jmp @loop
@end
	%r =w call $puts(l %emptys)
	ret
}

export function $qbecall6(w %argw0, w %argw1, w %argw2, w %argw3, w %argw4, w %argw5, w %argw6, w %argw7, w %argw8, w %argw9, d %argd0, d %argd1, d %argd2, d %argd3, d %argd4, d %argd5, d %argd6, d %argd7, d %argd8, d %argd9, l %fmt, ...) {
@start
	%vp =l alloc8 32
	vastart %vp
	%r =w call $print(l %fmt, l %vp)
	ret
}

export function $qbeprint7(w %argw0, w %argw1, w %argw2, w %argw3, w %argw4, w %argw5, w %argw6, w %argw7, w %argw8, l %fmt, ...) {
@start
	%fmtdbl =l alloc4 4
	%fmtint =l alloc4 4
	%emptys =l alloc4 4
	storew 2122789, %fmtint
	storew 2123557, %fmtdbl
	storew 0, %emptys
	%vp =l alloc8 32
	%fmt1 =l add 1, %fmt
	vastart %vp
@loop
	%p =l phi @start %fmt1, @casef %p1, @cased %p1
	%c =w loadsb %p
	%p1 =l add 3, %p
	jnz %c, @loop1, @end
@loop1
	%isg =w ceqw %c, 103
	jnz %isg, @casef, @cased
@casef
	%dbl =d vaarg %vp
	%r =w call $printf(l %fmtdbl, ..., d %dbl)
	jmp @loop
@cased
	%int =w vaarg %vp
	%r =w call $printf(l %fmtint, ..., w %int)
	jmp @loop
@end
	%r =w call $puts(l %emptys)
	ret
}

export function $qbecall7(w %argw0, w %argw1, w %argw2, w %argw3, w %argw4, w %argw5, w %argw6, w %argw7, w %argw8, l %fmt, ...) {
@start
	%vp =l alloc8 32
	vastart %vp
	%r =w call $print(l %fmt, l %vp)
	ret
}

# >>> driver
# #include <stdarg.h>
# #include <stdio.h>
# extern void qbeprint0(char *, ...);
# extern void qbecall0(char *, ...);
# extern void qbeprint1(int argw0, char *, ...);
# extern void qbecall1(int argw0, char *, ...);
# extern void qbeprint2(double argd0, char *, ...);
# extern void qbecall2(double argd0, char *, ...);
# extern void qbeprint3(int argw0, int argw1, int argw2, int argw3, char *, ...);
# extern void qbecall3(int argw0, int argw1, int argw2, int argw3, char *, ...);
# extern void qbeprint4(double argd0, double argd1, double argd2, double argd3, double argd4, double argd5, char *, ...);
# extern void qbecall4(double argd0, double argd1, double argd2, double argd3, double argd4, double argd5, char *, ...);
# extern void qbeprint5(int argw0, int argw1, int argw2, int argw3, int argw4, double argd0, double argd1, double argd2, double argd3, double argd4, double argd5, double argd6, char *, ...);
# extern void qbecall5(int argw0, int argw1, int argw2, int argw3, int argw4, double argd0, double argd1, double argd2, double argd3, double argd4, double argd5, double argd6, char *, ...);
# extern void qbeprint6(int argw0, int argw1, int argw2, int argw3, int argw4, int argw5, int argw6, int argw7, int argw8, int argw9, double argd0, double argd1, double argd2, double argd3, double argd4, double argd5, double argd6, double argd7, double argd8, double argd9, char *, ...);
# extern void qbecall6(int argw0, int argw1, int argw2, int argw3, int argw4, int argw5, int argw6, int argw7, int argw8, int argw9, double argd0, double argd1, double argd2, double argd3, double argd4, double argd5, double argd6, double argd7, double argd8, double argd9, char *, ...);
# extern void qbeprint7(int argw0, int argw1, int argw2, int argw3, int argw4, int argw5, int argw6, int argw7, int argw8, char *, ...);
# extern void qbecall7(int argw0, int argw1, int argw2, int argw3, int argw4, int argw5, int argw6, int argw7, int argw8, char *, ...);
# int print(char *fmt, va_list *ap) {
#    return vprintf(fmt, *ap);
# }
# int main() {
# 	puts("# (0 int, 0 double)");
# 	qbeprint0("%d \n", 8);
# 	qbecall0("%d \n", 8);
# 	qbeprint0("%g \n", -2.598);
# 	qbecall0("%g \n", -2.598);
# 	qbeprint0("%d %g \n", -4, -8.39);
# 	qbecall0("%d %g \n", -4, -8.39);
# 	qbeprint0("%g %g \n", -2.9, 4.211);
# 	qbecall0("%g %g \n", -2.9, 4.211);
# 	qbeprint0("%d %d %d %d \n", 4, 3, 2, 4);
# 	qbecall0("%d %d %d %d \n", 4, 3, 2, 4);
# 	qbeprint0("%g %g %g %g \n", -1.709, -1.743, -6.44, 7.628);
# 	qbecall0("%g %g %g %g \n", -1.709, -1.743, -6.44, 7.628);
# 	qbeprint0("%d %g %d %g \n", 8, -5.868, 7, 0.296);
# 	qbecall0("%d %g %d %g \n", 8, -5.868, 7, 0.296);
# 	qbeprint0("%g %g %d %d \n", -4.81, 0.62, -2, 0);
# 	qbecall0("%g %g %d %d \n", -4.81, 0.62, -2, 0);
# 	qbeprint0("%d %d %g %g \n", -4, 8, -6.169, -6.687);
# 	qbecall0("%d %d %g %g \n", -4, 8, -6.169, -6.687);
# 	qbeprint0("\n");
# 	qbecall0("\n");
# 	puts("# (1 int, 0 double)");
# 	qbeprint1(0, "%d \n", 6);
# 	qbecall1(0, "%d \n", 6);
# 	qbeprint1(0, "%g \n", -9.75);
# 	qbecall1(0, "%g \n", -9.75);
# 	qbeprint1(0, "%d %g \n", 9, 4.434);
# 	qbecall1(0, "%d %g \n", 9, 4.434);
# 	qbeprint1(0, "%g %g \n", 5.154, -6.458);
# 	qbecall1(0, "%g %g \n", 5.154, -6.458);
# 	qbeprint1(0, "%d %d %d %d \n", -5, 2, -8, -7);
# 	qbecall1(0, "%d %d %d %d \n", -5, 2, -8, -7);
# 	qbeprint1(0, "%g %g %g %g \n", -1.665, 9.264, 5.523, -2.564);
# 	qbecall1(0, "%g %g %g %g \n", -1.665, 9.264, 5.523, -2.564);
# 	qbeprint1(0, "%d %g %d %g \n", 4, 3.187, -1, 6.272);
# 	qbecall1(0, "%d %g %d %g \n", 4, 3.187, -1, 6.272);
# 	qbeprint1(0, "%g %g %d %d \n", -4.935, 2.581, 1, -9);
# 	qbecall1(0, "%g %g %d %d \n", -4.935, 2.581, 1, -9);
# 	qbeprint1(0, "%d %d %g %g \n", -7, 8, 0.19, 3.738);
# 	qbecall1(0, "%d %d %g %g \n", -7, 8, 0.19, 3.738);
# 	qbeprint1(0, "\n");
# 	qbecall1(0, "\n");
# 	puts("# (0 int, 1 double)");
# 	qbeprint2(0, "%d \n", 1);
# 	qbecall2(0, "%d \n", 1);
# 	qbeprint2(0, "%g \n", 6.152);
# 	qbecall2(0, "%g \n", 6.152);
# 	qbeprint2(0, "%d %g \n", 3, 2.208);
# 	qbecall2(0, "%d %g \n", 3, 2.208);
# 	qbeprint2(0, "%g %g \n", 0.644, 3.129);
# 	qbecall2(0, "%g %g \n", 0.644, 3.129);
# 	qbeprint2(0, "%d %d %d %d \n", 4, -1, 7, -1);
# 	qbecall2(0, "%d %d %d %d \n", 4, -1, 7, -1);
# 	qbeprint2(0, "%g %g %g %g \n", -8.874, 9.179, 0.692, 0.383);
# 	qbecall2(0, "%g %g %g %g \n", -8.874, 9.179, 0.692, 0.383);
# 	qbeprint2(0, "%d %g %d %g \n", -3, -6.89, 3, 3.649);
# 	qbecall2(0, "%d %g %d %g \n", -3, -6.89, 3, 3.649);
# 	qbeprint2(0, "%g %g %d %d \n", -9.206, 1.268, 6, 3);
# 	qbecall2(0, "%g %g %d %d \n", -9.206, 1.268, 6, 3);
# 	qbeprint2(0, "%d %d %g %g \n", 7, -1, -4.239, -4.525);
# 	qbecall2(0, "%d %d %g %g \n", 7, -1, -4.239, -4.525);
# 	qbeprint2(0, "\n");
# 	qbecall2(0, "\n");
# 	puts("# (4 int, 0 double)");
# 	qbeprint3(0, 0, 0, 0, "%d \n", 9);
# 	qbecall3(0, 0, 0, 0, "%d \n", 9);
# 	qbeprint3(0, 0, 0, 0, "%g \n", 8.699);
# 	qbecall3(0, 0, 0, 0, "%g \n", 8.699);
# 	qbeprint3(0, 0, 0, 0, "%d %g \n", -1, -4.465);
# 	qbecall3(0, 0, 0, 0, "%d %g \n", -1, -4.465);
# 	qbeprint3(0, 0, 0, 0, "%g %g \n", 2.295, 4.204);
# 	qbecall3(0, 0, 0, 0, "%g %g \n", 2.295, 4.204);
# 	qbeprint3(0, 0, 0, 0, "%d %d %d %d \n", 4, 2, 7, 0);
# 	qbecall3(0, 0, 0, 0, "%d %d %d %d \n", 4, 2, 7, 0);
# 	qbeprint3(0, 0, 0, 0, "%g %g %g %g \n", -2.956, 7.915, -4.728, -9.303);
# 	qbecall3(0, 0, 0, 0, "%g %g %g %g \n", -2.956, 7.915, -4.728, -9.303);
# 	qbeprint3(0, 0, 0, 0, "%d %g %d %g \n", -3, -6.903, 0, -8.343);
# 	qbecall3(0, 0, 0, 0, "%d %g %d %g \n", -3, -6.903, 0, -8.343);
# 	qbeprint3(0, 0, 0, 0, "%g %g %d %d \n", 6.717, 3.737, -7, -6);
# 	qbecall3(0, 0, 0, 0, "%g %g %d %d \n", 6.717, 3.737, -7, -6);
# 	qbeprint3(0, 0, 0, 0, "%d %d %g %g \n", 2, 3, -5.527, -6.44);
# 	qbecall3(0, 0, 0, 0, "%d %d %g %g \n", 2, 3, -5.527, -6.44);
# 	qbeprint3(0, 0, 0, 0, "\n");
# 	qbecall3(0, 0, 0, 0, "\n");
# 	puts("# (0 int, 6 double)");
# 	qbeprint4(0, 0, 0, 0, 0, 0, "%d \n", 0);
# 	qbecall4(0, 0, 0, 0, 0, 0, "%d \n", 0);
# 	qbeprint4(0, 0, 0, 0, 0, 0, "%g \n", 8.8);
# 	qbecall4(0, 0, 0, 0, 0, 0, "%g \n", 8.8);
# 	qbeprint4(0, 0, 0, 0, 0, 0, "%d %g \n", -9, -8.305);
# 	qbecall4(0, 0, 0, 0, 0, 0, "%d %g \n", -9, -8.305);
# 	qbeprint4(0, 0, 0, 0, 0, 0, "%g %g \n", -9.753, -1.166);
# 	qbecall4(0, 0, 0, 0, 0, 0, "%g %g \n", -9.753, -1.166);
# 	qbeprint4(0, 0, 0, 0, 0, 0, "%d %d %d %d \n", 0, -1, 3, -4);
# 	qbecall4(0, 0, 0, 0, 0, 0, "%d %d %d %d \n", 0, -1, 3, -4);
# 	qbeprint4(0, 0, 0, 0, 0, 0, "%g %g %g %g \n", 0.905, 4.108, -4.698, -9.76);
# 	qbecall4(0, 0, 0, 0, 0, 0, "%g %g %g %g \n", 0.905, 4.108, -4.698, -9.76);
# 	qbeprint4(0, 0, 0, 0, 0, 0, "%d %g %d %g \n", 0, 5.74, -1, -9.858);
# 	qbecall4(0, 0, 0, 0, 0, 0, "%d %g %d %g \n", 0, 5.74, -1, -9.858);
# 	qbeprint4(0, 0, 0, 0, 0, 0, "%g %g %d %d \n", -9.554, 9.875, -5, 3);
# 	qbecall4(0, 0, 0, 0, 0, 0, "%g %g %d %d \n", -9.554, 9.875, -5, 3);
# 	qbeprint4(0, 0, 0, 0, 0, 0, "%d %d %g %g \n", -4, -2, -9.734, 6.466);
# 	qbecall4(0, 0, 0, 0, 0, 0, "%d %d %g %g \n", -4, -2, -9.734, 6.466);
# 	qbeprint4(0, 0, 0, 0, 0, 0, "\n");
# 	qbecall4(0, 0, 0, 0, 0, 0, "\n");
# 	puts("# (5 int, 7 double)");
# 	qbeprint5(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "%d \n", -2);
# 	qbecall5(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "%d \n", -2);
# 	qbeprint5(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "%g \n", 0.481);
# 	qbecall5(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "%g \n", 0.481);
# 	qbeprint5(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "%d %g \n", -2, 0.98);
# 	qbecall5(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "%d %g \n", -2, 0.98);
# 	qbeprint5(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "%g %g \n", -3.792, -4.735);
# 	qbecall5(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "%g %g \n", -3.792, -4.735);
# 	qbeprint5(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "%d %d %d %d \n", -1, -5, 9, -5);
# 	qbecall5(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "%d %d %d %d \n", -1, -5, 9, -5);
# 	qbeprint5(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "%g %g %g %g \n", 0.317, 1.3, -9.533, 6.357);
# 	qbecall5(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "%g %g %g %g \n", 0.317, 1.3, -9.533, 6.357);
# 	qbeprint5(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "%d %g %d %g \n", 5, -3.518, -3, -4.29);
# 	qbecall5(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "%d %g %d %g \n", 5, -3.518, -3, -4.29);
# 	qbeprint5(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "%g %g %d %d \n", 2.278, -6.133, -8, -6);
# 	qbecall5(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "%g %g %d %d \n", 2.278, -6.133, -8, -6);
# 	qbeprint5(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "%d %d %g %g \n", -1, -5, 4.243, -4.691);
# 	qbecall5(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "%d %d %g %g \n", -1, -5, 4.243, -4.691);
# 	qbeprint5(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "\n");
# 	qbecall5(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "\n");
# 	puts("# (10 int, 10 double)");
# 	qbeprint6(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "%d \n", 6);
# 	qbecall6(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "%d \n", 6);
# 	qbeprint6(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "%g \n", -8.367);
# 	qbecall6(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "%g \n", -8.367);
# 	qbeprint6(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "%d %g \n", 0, 2.444);
# 	qbecall6(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "%d %g \n", 0, 2.444);
# 	qbeprint6(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "%g %g \n", 2.93, -7.868);
# 	qbecall6(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "%g %g \n", 2.93, -7.868);
# 	qbeprint6(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "%d %d %d %d \n", -4, -8, -1, -1);
# 	qbecall6(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "%d %d %d %d \n", -4, -8, -1, -1);
# 	qbeprint6(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "%g %g %g %g \n", 3.535, 2.526, 6.757, 5.496);
# 	qbecall6(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "%g %g %g %g \n", 3.535, 2.526, 6.757, 5.496);
# 	qbeprint6(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "%d %g %d %g \n", 0, 4.456, 6, -9.753);
# 	qbecall6(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "%d %g %d %g \n", 0, 4.456, 6, -9.753);
# 	qbeprint6(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "%g %g %d %d \n", -2.559, 8.669, -3, 9);
# 	qbecall6(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "%g %g %d %d \n", -2.559, 8.669, -3, 9);
# 	qbeprint6(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "%d %d %g %g \n", -7, -4, -2.506, 8.915);
# 	qbecall6(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "%d %d %g %g \n", -7, -4, -2.506, 8.915);
# 	qbeprint6(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "\n");
# 	qbecall6(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "\n");
# 	puts("# (9 int, 0 double)");
# 	qbeprint7(0, 0, 0, 0, 0, 0, 0, 0, 0, "%d \n", 1);
# 	qbecall7(0, 0, 0, 0, 0, 0, 0, 0, 0, "%d \n", 1);
# 	qbeprint7(0, 0, 0, 0, 0, 0, 0, 0, 0, "%g \n", -4.73);
# 	qbecall7(0, 0, 0, 0, 0, 0, 0, 0, 0, "%g \n", -4.73);
# 	qbeprint7(0, 0, 0, 0, 0, 0, 0, 0, 0, "%d %g \n", -1, -1.17);
# 	qbecall7(0, 0, 0, 0, 0, 0, 0, 0, 0, "%d %g \n", -1, -1.17);
# 	qbeprint7(0, 0, 0, 0, 0, 0, 0, 0, 0, "%g %g \n", 2.714, -4.174);
# 	qbecall7(0, 0, 0, 0, 0, 0, 0, 0, 0, "%g %g \n", 2.714, -4.174);
# 	qbeprint7(0, 0, 0, 0, 0, 0, 0, 0, 0, "%d %d %d %d \n", 1, -4, 0, -3);
# 	qbecall7(0, 0, 0, 0, 0, 0, 0, 0, 0, "%d %d %d %d \n", 1, -4, 0, -3);
# 	qbeprint7(0, 0, 0, 0, 0, 0, 0, 0, 0, "%g %g %g %g \n", 0.853, 0.615, -6.604, 8.418);
# 	qbecall7(0, 0, 0, 0, 0, 0, 0, 0, 0, "%g %g %g %g \n", 0.853, 0.615, -6.604, 8.418);
# 	qbeprint7(0, 0, 0, 0, 0, 0, 0, 0, 0, "%d %g %d %g \n", 6, -9.31, -4, -8.631);
# 	qbecall7(0, 0, 0, 0, 0, 0, 0, 0, 0, "%d %g %d %g \n", 6, -9.31, -4, -8.631);
# 	qbeprint7(0, 0, 0, 0, 0, 0, 0, 0, 0, "%g %g %d %d \n", -7.765, -9.391, 8, 2);
# 	qbecall7(0, 0, 0, 0, 0, 0, 0, 0, 0, "%g %g %d %d \n", -7.765, -9.391, 8, 2);
# 	qbeprint7(0, 0, 0, 0, 0, 0, 0, 0, 0, "%d %d %g %g \n", 6, 9, -6.319, -2.217);
# 	qbecall7(0, 0, 0, 0, 0, 0, 0, 0, 0, "%d %d %g %g \n", 6, 9, -6.319, -2.217);
# 	qbeprint7(0, 0, 0, 0, 0, 0, 0, 0, 0, "\n");
# 	qbecall7(0, 0, 0, 0, 0, 0, 0, 0, 0, "\n");
# }
# <<<

# >>> output
# # (0 int, 0 double)
# 8 
# 8 
# -2.598 
# -2.598 
# -4 -8.39 
# -4 -8.39 
# -2.9 4.211 
# -2.9 4.211 
# 4 3 2 4 
# 4 3 2 4 
# -1.709 -1.743 -6.44 7.628 
# -1.709 -1.743 -6.44 7.628 
# 8 -5.868 7 0.296 
# 8 -5.868 7 0.296 
# -4.81 0.62 -2 0 
# -4.81 0.62 -2 0 
# -4 8 -6.169 -6.687 
# -4 8 -6.169 -6.687 
# 
# 
# # (1 int, 0 double)
# 6 
# 6 
# -9.75 
# -9.75 
# 9 4.434 
# 9 4.434 
# 5.154 -6.458 
# 5.154 -6.458 
# -5 2 -8 -7 
# -5 2 -8 -7 
# -1.665 9.264 5.523 -2.564 
# -1.665 9.264 5.523 -2.564 
# 4 3.187 -1 6.272 
# 4 3.187 -1 6.272 
# -4.935 2.581 1 -9 
# -4.935 2.581 1 -9 
# -7 8 0.19 3.738 
# -7 8 0.19 3.738 
# 
# 
# # (0 int, 1 double)
# 1 
# 1 
# 6.152 
# 6.152 
# 3 2.208 
# 3 2.208 
# 0.644 3.129 
# 0.644 3.129 
# 4 -1 7 -1 
# 4 -1 7 -1 
# -8.874 9.179 0.692 0.383 
# -8.874 9.179 0.692 0.383 
# -3 -6.89 3 3.649 
# -3 -6.89 3 3.649 
# -9.206 1.268 6 3 
# -9.206 1.268 6 3 
# 7 -1 -4.239 -4.525 
# 7 -1 -4.239 -4.525 
# 
# 
# # (4 int, 0 double)
# 9 
# 9 
# 8.699 
# 8.699 
# -1 -4.465 
# -1 -4.465 
# 2.295 4.204 
# 2.295 4.204 
# 4 2 7 0 
# 4 2 7 0 
# -2.956 7.915 -4.728 -9.303 
# -2.956 7.915 -4.728 -9.303 
# -3 -6.903 0 -8.343 
# -3 -6.903 0 -8.343 
# 6.717 3.737 -7 -6 
# 6.717 3.737 -7 -6 
# 2 3 -5.527 -6.44 
# 2 3 -5.527 -6.44 
# 
# 
# # (0 int, 6 double)
# 0 
# 0 
# 8.8 
# 8.8 
# -9 -8.305 
# -9 -8.305 
# -9.753 -1.166 
# -9.753 -1.166 
# 0 -1 3 -4 
# 0 -1 3 -4 
# 0.905 4.108 -4.698 -9.76 
# 0.905 4.108 -4.698 -9.76 
# 0 5.74 -1 -9.858 
# 0 5.74 -1 -9.858 
# -9.554 9.875 -5 3 
# -9.554 9.875 -5 3 
# -4 -2 -9.734 6.466 
# -4 -2 -9.734 6.466 
# 
# 
# # (5 int, 7 double)
# -2 
# -2 
# 0.481 
# 0.481 
# -2 0.98 
# -2 0.98 
# -3.792 -4.735 
# -3.792 -4.735 
# -1 -5 9 -5 
# -1 -5 9 -5 
# 0.317 1.3 -9.533 6.357 
# 0.317 1.3 -9.533 6.357 
# 5 -3.518 -3 -4.29 
# 5 -3.518 -3 -4.29 
# 2.278 -6.133 -8 -6 
# 2.278 -6.133 -8 -6 
# -1 -5 4.243 -4.691 
# -1 -5 4.243 -4.691 
# 
# 
# # (10 int, 10 double)
# 6 
# 6 
# -8.367 
# -8.367 
# 0 2.444 
# 0 2.444 
# 2.93 -7.868 
# 2.93 -7.868 
# -4 -8 -1 -1 
# -4 -8 -1 -1 
# 3.535 2.526 6.757 5.496 
# 3.535 2.526 6.757 5.496 
# 0 4.456 6 -9.753 
# 0 4.456 6 -9.753 
# -2.559 8.669 -3 9 
# -2.559 8.669 -3 9 
# -7 -4 -2.506 8.915 
# -7 -4 -2.506 8.915 
# 
# 
# # (9 int, 0 double)
# 1 
# 1 
# -4.73 
# -4.73 
# -1 -1.17 
# -1 -1.17 
# 2.714 -4.174 
# 2.714 -4.174 
# 1 -4 0 -3 
# 1 -4 0 -3 
# 0.853 0.615 -6.604 8.418 
# 0.853 0.615 -6.604 8.418 
# 6 -9.31 -4 -8.631 
# 6 -9.31 -4 -8.631 
# -7.765 -9.391 8 2 
# -7.765 -9.391 8 2 
# 6 9 -6.319 -2.217 
# 6 9 -6.319 -2.217 
# 
# 
# <<<
# <<< 

# >>> generate
# // Adapted from https://c9x.me/git/qbe.git/tree/tools/vatest.py
# 
# Format :: @enum(I, D);
# I :: Format.I; D :: Format.D;
# S :: const_slice;
# formats :: @S(
#     @S(I),
#     @S(D),
#     @S(I,D),
#     @S(D,D),
#     @S(I,I,I,I),
#     @S(D,D,D,D),
#     @S(I,D,I,D),
#     @S(D,D,I,I),
#     @S(I,I,D,D),
#     empty(),
# );
# 
# //  numbers of fixed integer and floating point arguments to test
# generate :: @S(
#     (0, 0), (1, 0), (0, 1), (4, 0),
#     (0, 6), (5, 7), (10, 10), (9, 0),
# );
# 
# mkargs :: fn(o: *List(u8), nargs: i64, type: Str, name: Str) void = {
#     range(0, nargs) { i |
#         @fmt(o, "%%%, ", type, name, i);
#     };
# }
# 
# mkfstr :: fn(o: *List(u8), format: []Format) void = {
#     o.push_all("\"");
#     for format { it |
#         ::enum(Format);
#         o.push_all(@match(it) {
#             fn I() => "%d ";
#             fn D() => "%g ";
#         });
#     };
#     o.push_all("\\n\"");
# }
# 
# randargs :: fn(o: []Ty(*List(u8), Str), format: []Format, rng: *Random.Rng) void = {
#     rand :: fn(n: i64) i64 => rng.next().bitcast().mod(n);
#     for format { it |
#         a, b := (rand(10), rand(1000).abs());
#         for o { o, sep |
#             @match(it) {
#                 fn I() => @fmt(o, "%%", a, sep);
#                 fn D() => {
#                     @fmt(o, "%.%", a, b);
#                     while => o.items().ends_with("0") {
#                         o.len -= 1;
#                     };
#                     @fmt(o, "%", sep);
#                 }
#             };
#         };
#     }
# }
# 
# genssa :: fn(o: *List(u8), qbeprint: Str, qbecall: Str) void = {
#     enumerate generate { fnum, n |
#         nia, nfa := n[];
#         s := @slice(("qbeprint", qbeprint), ("qbecall", qbecall));
#         for s { name, code |
#             @fmt(o, "export function $%%(", name, fnum);
#             mkargs(o, nia, "w ", "%argw");
#             mkargs(o, nfa, "d ", "%argd");
#             @fmt(o, "l \%fmt, ...) %\n", code);
#         };
#     };
# }
# 
# gendriver :: fn(o: *List(u8), rng: *Random.Rng) Str = {
#     @fmt(o, "# >>> driver\n# #include <stdarg.h>\n# #include <stdio.h>\n");
# 
#     enumerate generate { fnum, n |
#         nia, nfa := n[];
#         for (@slice("qbeprint", "qbecall")) { name |
#             @fmt(o, "# extern void %%(", name, fnum);
#             mkargs(o, nia, "int ", "argw");
#             mkargs(o, nfa, "double ", "argd");
#             @fmt(o, "char *, ...);\n");
#         };
#     };
#     output := u8.list(temp()); output := output&;
#     @fmt(o, "# int print(char *fmt, va_list *ap) {\n#    return vprintf(fmt, *ap);\n# }\n# int main() {\n");
# 
#     enumerate generate { fnum, n |
#         nia, nfa := n[];
#         info := @tfmt("# (% int, % double)", nia, nfa);
#         @fmt(o, "# \tputs(\"%\");\n", info);
#         @fmt(output, "# %\n", info);
# 
#         for formats { it |
#             vaargs, expect := (u8.list(temp()), u8.list(temp()));
#             @if(it.len > 0) vaargs&.push_all(", ");
#             randargs(@slice((vaargs&, ", "), (expect&, " ")), it, rng);
#             vaargs.len -= int(it.len > 0) * 2;
#             for (@slice("qbeprint", "qbecall")) { name |
#                 @fmt(o, "# \t%%(", name, fnum);
#                 range(0, nia + nfa, fn(_) => o.push_all("0, "));
#                 mkfstr(o, it);
#                 @fmt(o, "%);\n", vaargs.items());
#                 @fmt(output, "# %\n", expect.items());
#             };
#         };
#     };
# 
#     @fmt(o, "# }\n# <<<\n\n# >>> output\n%# <<<\n", output.items());
#     o.items()
# }
# 
# qbeprint :: """{
# @start
# 	%fmtdbl =l alloc4 4
# 	%fmtint =l alloc4 4
# 	%emptys =l alloc4 4
# 	storew 2122789, %fmtint
# 	storew 2123557, %fmtdbl
# 	storew 0, %emptys
# 	%vp =l alloc8 32
# 	%fmt1 =l add 1, %fmt
# 	vastart %vp
# @loop
# 	%p =l phi @start %fmt1, @casef %p1, @cased %p1
# 	%c =w loadsb %p
# 	%p1 =l add 3, %p
# 	jnz %c, @loop1, @end
# @loop1
# 	%isg =w ceqw %c, 103
# 	jnz %isg, @casef, @cased
# @casef
# 	%dbl =d vaarg %vp
# 	%r =w call $printf(l %fmtdbl, ..., d %dbl)
# 	jmp @loop
# @cased
# 	%int =w vaarg %vp
# 	%r =w call $printf(l %fmtint, ..., w %int)
# 	jmp @loop
# @end
# 	%r =w call $puts(l %emptys)
# 	ret
# }
# """;
# 
# qbecall :: """{
# @start
# 	%vp =l alloc8 32
# 	vastart %vp
# 	%r =w call $print(l %fmt, l %vp)
# 	ret
# }
# """;
# 
# main :: fn(_: Str) Str = {
#     // format strings for printf without making the test depend on `data $name = { b "string" }` 
#     @assert_eq("%d \0".peek_type(u32)[], 2122789);  // fmtint
#     @assert_eq("%g \0".peek_type(u32)[], 2123557);  // fmtdbl
# 
#     ::Random;
#     rng := Random.xoshiro256SS.new(42);
#     o := u8.list(temp());
#     genssa(o&, qbeprint, qbecall);
#     gendriver(o&, rng&);
#     o.items()
# }
# <<<
