type :FF = { d, d } 

export
function w $main() {
@start
    %ff =l alloc8 16
    %ff8 =l add %ff, 8
    stored d_1.0, %ff
    stored d_2.0, %ff8
    %c =d call $f(env 0, :FF %ff)  # env is passed in rax
    %bad =w cned %c, d_3.0
    ret %bad
}

# when an aggregate ends up being passed in registers,  
# sysv was using storel even for floats which when promoted 
# to copies (slot.fr) got confused about which type of register. 
# so it would output copies between two float registers and then 
# read from int registers as though they'd been the target of previous copies. 
function d $f(:FF %ff) {
@start
    %ff8 =l add %ff, 8
    %a =l load %ff
    %b =l load %ff8
    %aa =d cast %a
    %bb =d cast %b
    %c =d add %aa, %bb
    ret %c
}
