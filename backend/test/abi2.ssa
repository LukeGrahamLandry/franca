type :fps = { s, b, s }

export
function s $sum(:fps %p) {
@start
	%f1 =s load %p
	%p8 =l add 8, %p
	%f2 =s load %p8
	%s =s add %f1, %f2
	ret %s
}

type :wsd = { w, s, d }

export
function :wsd $get123() {
@start
    %s =l alloc8 16
    storew 10, %s
    %s4 =l add %s, 4
    stores s_20, %s4
    %s8 =l add %s, 8
    stored d_30, %s8
	ret %s
}

# >>> driver
# typedef struct { float f1; char b; float f2; } fps;
# typedef struct { int a; float b; double c; } wsd;
# extern float sum(fps);
# extern wsd get123(void);
# int main(void) { 
#     fps x = { 1.23, -1, 2.34 }; 
#     int x_ok = sum(x) == 1.23f+2.34f;  /* Note the f suffixes above are important otherwise C does double operations. */
#     wsd y = get123();
#     int y_ok = y.a == 10 && y.b == 20 && y.c == 30;
#     return !(x_ok && y_ok); 
# } 
# <<<
