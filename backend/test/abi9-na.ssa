export
function w $main() {
@start
    %a =l shl 1, 33
	%b =l call $convert_to_long(l %a) # wrong arg type to force passing the high bit
	%c =w ceql %b, %a   # b should be 0
	ret %c
}

#
# Procedure Call Standard for the ARM 64-bit Architecture:
# "Any part of a register or a stack slot that is not used for an argument (padding bits) has unspecified content at the callee entry point" 
# ie. high bits of %arg are not necessarily zeroed.
# Apple's calling convention changes the wording:
# "The caller of a function is responsible for signing or zero-extending any argument with fewer than 32 bits."
# But that doesn't apply to this example, only to b/h.
#
# On x64 this makes sure you don't use a mov with rex.w=1 even though the output is 64 bits. 
#
function l $convert_to_long(w %arg) {
@start
    %c =l extuw %arg  # create an l with high bits zeroed and low bits of %arg
	ret %c
}
