# mistakes i made in amd64 encoding that didn't have a qbe test 
# (which is fair because they weren't writing an assembler)

export function w $main() {
@start
    call $assert_one(l 1)
    call $idiv_stuff(l 36342608771699226)  # 64 bit number with 1 in bit 31
    call $storeh_imm()
    call $fixup_addend()
    call $F872()
    call $fneg(d d_1, s s_1)
    call $imm_addr(w 0)
    
    %zero0 =l extub 256  # low byte is zero
    %zero1 =l shr %zero0, 1
    ret %zero1
}

# missing rex prefix on exub means bits 8-16 which you don't want
function $assert_one(l %x) {
@b0
	%mem =l alloc4 1
	storeb 0, %mem
	%xe =w extub %x
	storeb %xe, %mem
	%xl =w loadub %mem
	%xle =l extuw %xl
	%cond =l ceql %xle, 1
	jnz %cond, @yes, @no
@no
	hlt
@yes
	ret
}

# rex prefix for CQO when Kl 
# or you get a (confusingly named) floating point exception on my special number
function l $idiv_stuff(l %x) {
@b1
	jmp @b5
@b5
	%v0.71 =l phi @b1 %x, @b7 %v5
	%vv =l phi @b1 999, @b7 %v5
	%v3 =l csgel %v0.71, 10
	jnz %v3, @b7, @b4
@b7
	%v5 =l div %v0.71, 10
	jmp @b5
@b4
	ret %vv
}

function w $storeh_imm() {
@b0
	%v0 =l alloc4 2
	storeh 123, %v0
	%v3 =w call $ok__4897(l %v0)
	ret %v3
}

function w $ok__4897(l %v0) {
@b1
	%v10 =w loaduh %v0
	ret %v10
}

# todo: report when you use an undeclared global / make them tell you valid imports

# linker-ish bug not assembler-ish bug
function $fixup_addend() {
@b1
    %a =l add $g2, 8  # forward reference to $a so we need a fixup
	%v12 =l load %a   # folded to load [$a + 8]
	%v19 =l cnel %v12, 5
	jnz %v19, @b7, @b9
@b7
	hlt
@b9
	ret
}

data $g2 = { l 0, l 5 }  # declared later 

data $g0 = { b 123 } 

# this was a simple_addr isel bug
function $F872() {
@b0
	%arr =l alloc8 16
@b1
	storel $g0, %arr
	jmp @b8
@b7
	ret
@b8
	%index =l phi @b1 0, @b22 %v62
	%v36 =l csltl %index, 1
	jnz %v36, @b10, @b7
@b10
	%slot  =l mul %index, 16
	%p_ptr =l add %arr, %slot
	%ptr   =l load %p_ptr  # this becomes load [%arr + %slot] and %arr needs to be converted to an RSlot
	%char  =w loaduw %ptr
	%cond  =l cnew %char, 123
	jnz %cond, @b19, @b22
@b19
	call $abort()
	hlt
@b22
	%v62 =l add %index, 1
	jmp @b8
}

function $fneg(d %a, s %c) {
@start
    %a =d neg %a
	%first =l ceqd %a, d_-1
    %c =s neg %c
	%second =l ceqs %c, s_-1
	%cond =l and %first, %second
	jnz %cond, @yes, @no
@yes
    ret
@no
	hlt
}

function w $imm_addr(w %cond) {
@start
	jnz %cond, @yes, @no
@yes
    # this branch is unreachable but it's important to be able compile it 
    # because it can happen for real when jitting on linux
    %value =w load 123
    storew %value, 456
    ret %value
@no
    ret 0
}
