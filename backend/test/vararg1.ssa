export
function d $f(w %x, ...) {
@start
	%vp =l alloc8 32
	vastart %vp
	%i =l vaarg %vp
	%n =d vaarg %vp
	ret %n
}

export
function w $g(l %fmt, ...) {
@start
	%vp =l alloc8 32
	vastart %vp
	%r =w call $print(l %fmt, l %vp)
	ret %r
}

# >>> driver
# #include <stdarg.h>
# #include <stdio.h>
# extern double f(int, ...);
# extern int g(char *, ...);
# // this indirection is here to make the c compiler deal with architecture specific abi for passing a va_list by value. 
# // https://c9x.me/git/qbe.git/commit/test/vararg2.ssa?id=6a69210b0faf33ad4feb6adc97d094022c520978
# int print(const char *fmt, va_list *ap) {
# 	return vprintf(fmt, *ap);
# }
# int main() {
# 	g("Hell%c %s %g!\n", 'o', "world", f(42, "x", 42.0));
# }
# <<<

# >>> output
# Hello world 42!
# <<<
