// need to do this before abi
fn convert_intrinsics(f: *Qbe.Fn) void = {
    f.reset_scratch();
    for_blocks f { b |
        changed := false;
        for_insts_rev b { i |
            continue :: local_return;
            i := i[];
            o := i.op();
            name := @match(o) {
                fn byteswap() => @tfmt("llvm.bswap.%", @if(i.cls() == .Kl, "i64", "i32"));
                fn rotr()     => @tfmt("llvm.fshr.%", i.llvm_ty());
                fn rotl()     => @tfmt("llvm.fshl.%", i.llvm_ty());
                fn ones()     => @tfmt("llvm.ctpop.%", i.llvm_ty());
                // TODO: , i1 <is_zero_poison>
                fn clz()      => @tfmt("llvm.ctlz.%", i.llvm_ty());
                fn ctz()      => @tfmt("llvm.cttz.%", i.llvm_ty());
                @default => {
                    if changed {
                        f.emit(i[]);
                    };
                    continue()
                };
            };
            f.move_end_of_block_to_scratch(b, i, changed&);
            
            // Now convert that instruction to an O.call
            a0, a1 := (i.arg&[0], i.arg&[1]);
            con := Qbe.Con.zeroed();
            con.type = .CAddr;
            con.sym.id = f.globals.intern(name);
            f.emit(.call, i.cls(), i.to, f.newcon(con&), QbeNull);
            if a1 != QbeNull {
                f.emit(.arg, i.cls(), QbeNull, a1, QbeNull);
            };
            i[] = make_ins(.arg, i.cls(), QbeNull, a0, QbeNull);
            f.emit(i[]);
            
            // "funnel shift" takes two inputs (+ the width) and acts as rotate if the're the same
            if @is(o, .rotr, .rotl) {
                f.emit(i[]);
            };
        };
        if changed {
            f.copy_instructions_from_scratch(b); 
        };
    };
}

//!
//! Llvm treats integers and pointers as distinct types so we insert casts as needed.
//! This is kinda silly because the frontend knew the information, we forced it to throw it away, and now we're reconstructing it.
//! But like, pointers *are* integers, computer can't tell the difference, its a pain to track something that doesn't matter on the other backends. 
//!
//! Similarly llvm comparisons/jumps use i1 so we insert extensions/trunctations,
//! but that offends me less than the pointers thing. 
//! note: jnz isn't a truncation because it looks at the whole number not just the bottom bit.
//!
//! TODO: The main pain is `add` is only for integers but we use it for offseting pointers.
//!       Maybe it would be better to use GEP but we don't have type information. 
//!       I think you're allowed to just offset from an i8 but I can't get it to work on the old llvm backend.
//!

CastCtx :: @struct(
    f: *Qbe.Fn,
    tmps: QList(LlvmTmp),
    const_casts: List(Qbe.Ins),  // :SLOW
    start_tmp_count: i64,
);

LlvmTmp :: @struct(
    casts: Array(Qbe.Ref, MAX_CASTS),
    types: Array(Qbe.TmpType, MAX_CASTS),
);
MAX_CASTS :: 5;

LlvmCast :: @enum(i64) (
    None,
    IntToPtr,
    PtrToInt,
    ExtendI1ToL,
    ExtendI1ToW,
    ExtendI1ToH,
    CmpZero,
    TruncLtoW,
    TruncWtoB,
    TruncWtoH,
    TruncLtoH,
    TruncLtoB,
    PtrToIntW,
    ExtendWToL, // redundant
);
::if(LlvmCast);

// TODO: i must be able to do this in fewer passes but I just want it to work first. :SLOW
// TODO: be better about unifying phi types. its fine if they're ptr/bool as long as all args are the same. 
// sets width fields of tmps.
fn insert_redundant_casts(f: *Qbe.Fn) void = {
    N := f.ntmp.zext();
    c: CastCtx = (
        f = f, 
        tmps = new(N),
        const_casts = list(temp()),
        start_tmp_count = N,
    );
    each f.tmps() { t |
        t.visit = 0;
    };
    f.reset_scratch();
    c.tmps.slice(0, N).set_zeroed();
    
    // Note the types of all created tmps
    for_blocks f { b |
        for_phi b { p | 
            if p.to != QbeNull {
                c.f.tmp[p.to.val()].width = if(p.cls == .Kw, => .Wuw, => .WFull);
            };
        };
        for_insts_forward b { i |
            out, _ := i.llvm_types();
            if i.to != QbeNull {
                c.f.tmp[i.to.val()].width = out;
            };
        };
    }; 
    
    // note the types of all usages
    for_blocks f { b |
        for_insts_forward b { i |
            if i.op() != .copy || !isreg(i.arg&[0]) {
                _, args := i.llvm_types();
                range(0, 2) { a |
                    continue :: local_return;
                    if rtype(i.arg&[a]) == .RTmp {
                        c&.request_cast(i.arg&[a], args&[a]);
                    };
                };
            };
        };
        for_phi b { p | 
            range(0, p.narg.zext()) { a |
                c&.request_cast(p.arg&.index(a)[], if(p.cls == .Kw, => .Wuw, => .WFull));
            };
        };
        if b.jmp.type == .jnz {
            c&.request_cast(b.jmp.arg, .LBool);
        };  
    };  
    
    // emit instructions. inserting casts after creations as needed. 
    for_blocks f { b |
        if b.jmp.type == .jnz {
            c&.fix_arg(b.jmp.arg&, .LBool);
        }; 
        for_insts_rev b { i |
            continue :: local_return;
            out, args := i[].llvm_types();
            c&.emit_requested_casts(i.to);
            if i[].op() == .copy && isreg(i.arg&[0]) {
                f.emit(i[][]);
                continue();
            };
            
            // sysv.fr converts args to load directly to register sometimes. but emit.fr expects only copies to target registers. 
            if i[].op() == .load {
                if isreg(i.to) {
                    r := f.newtmp("isel", i[].cls());
                    f.emit(.copy, i[].cls(), i.to, r, QbeNull);
                    i.to = r;
                };
            };
            
            if i[].op().is_load() && i[].op() != .load {
                no_extend := (i[].op() == .loaduw || i[].op() == .loadsw) && i[].cls() == .Kw;
                if !no_extend {
                    r := f.newtmp("isel", i[].cls());
                    ext_op := @as(Qbe.O) @as(i32) i[].op().raw() - Qbe.O.loadsb.raw() + Qbe.O.extsb.raw();
                    f.emit(ext_op, i[].cls(), i.to, r, QbeNull);
                    i.to = r;
                };
            };
            o := i[].op();
            @match(o) {
                fn neg() => {
                    if i[].cls().is_int() {
                        i[][] = make_ins(.sub, i[].cls(), i.to, QbeConZero, i.arg&[0]);
                    };
                }
                @default => ();
            };
            
            x := f.emit(i[][]);
            range(0, 2) { a |
                c&.fix_arg(x.arg&.index(a), args&[a]);
            };
            if x.op() == .load {
                if rtype(x.arg&[0]) == .RSlot {
                    r := f.newtmp("isel", .Kl);
                    f.emit(.addr, .Kl, r, x.arg&[0], QbeNull);
                    x.arg&[0] = r;
                };
            };
        };
        for_phi b { p | 
            c&.emit_requested_casts(p.to);
            range(0, p.narg.zext()) { a |
                // TODO: i think this is wrong if the arg is a constant so it ends up emitting insts here instead of at end of source block?
                c&.fix_arg(p.arg&.index(a), if(p.cls == .Kw, => .Wuw, => .WFull));
            };
        };
        f.copy_instructions_from_scratch(b);
    };
    // Need to dominate thier uses (phi is the hard part because you can't just insert the cast directly before). 
    // TODO: i think they have a const version of ptrtoint but i dont care rn. 
    if c.const_casts.len > 0 {
        past_args := false;
        for_insts_forward f.start { i |
            if !past_args && !is_par(i.op()) && i.op() != .llcast {
                each(c.const_casts, fn(i) => f.emit(i[]));
                past_args = true;
            };
            f.emit(i[]);
        };
        if !past_args {
            each(c.const_casts, fn(i) => f.emit(i[]));
        };
        f.copy_instructions_from_scratch_reversed_which_means_forwards(f.start);
    };
    
    if f.globals.debug["I".char()] {
        write(f.globals.debug_out, "\n> After instruction selection:\n");
        printfn(f, f.globals.debug_out);
    };
}

fn request_cast(c: *CastCtx, r: Qbe.Ref, want: Qbe.TmpType) void = {
    if(rtype(r) != .RTmp, => return()); // TODO
    id := r.val();
    info := c.tmps[id]&;
    range(0, MAX_CASTS) { i | 
        if info.casts&[i] != QbeNull {
            if info.types&[i] == want {
                return();
            };
        } else {
            info.types&[i] = want;
            if want == c.f.tmp[id].width {
                info.casts&[i] = r;
            } else {
                info.casts&[i] = c.f.newtmp("isel", .Kl);
            };
            return();
        };
    };
    panic("raise MAX_CASTS!");
}

::enum_basic(Qbe.UseType);
::enum_basic(Qbe.TmpType);
::if(Qbe.TmpType);

fn fix_arg(c: *CastCtx, arg: *Qbe.Ref, want: Qbe.TmpType) void = {
    if rtype(arg[]) == .RCon {
        // TODO: only need to delay with const_casts if it's a phi
        con := c.f.get_constant(arg[]);
        if want != .LPtr && con.type() == .CAddr {
            r := c.f.newtmp("isel", .Kl);
            c.const_casts&.push(c.make_cast(r, arg[], want, .LPtr));
            arg[] = r;
        };
        if want == .LPtr && con.type() == .CBits {
            // Trying to use an int literal as a pointer is sketchy but technically legal. 
            // See conaddr.ssa for a contrived test that gets here. 
            // A more sane usecase would be jitting code that embeds pointers. 
            r := c.f.newtmp("isel", .Kl);
            c.const_casts&.push(c.make_cast(r, arg[], .LPtr, .WFull));
            arg[] = r;
        };
        
        return();
    };
    if(rtype(arg[]) != .RTmp, => return());
    id := arg[].val();
    if id >= c.start_tmp_count {
        return()
    };
    original := c.f.tmp[id].width;
    if original != want {
        info := c.tmps[id]&;
        range(0, MAX_CASTS) { i | 
            @assert(info.casts&[i] != QbeNull, "cast not found % for tmp=%", want, id);
            if(info.casts&[i] == QbeNull, => return()); // TODO
            if info.types&[i] == want {
                arg[] = info.casts&[i];
                return();
            };
        };
        panic("raise MAX_CASTS");
    };
}

fn emit_requested_casts(c: *CastCtx, r: Qbe.Ref) void = {
    if(rtype(r) != .RTmp, => return());
    id := r.val();
    info := c.tmps[id]&;
    original := c.f.tmp[id].width;
    range(0, MAX_CASTS) { i | 
        dest := info.casts&[i];
        if(dest == QbeNull, => return());
        if dest != r {
            c.emit_cast(dest, r, info.types&[i], original);
        };
    };
    panic("raise MAX_CASTS");
}

fn make_cast(c: *CastCtx, dest: Qbe.Ref, src: Qbe.Ref, dest_ty: Qbe.TmpType, src_ty: Qbe.TmpType) Qbe.Ins = {
    c.tmps&.grow(c.f.ntmp.zext());
    @debug_assert_eq(rtype(dest), .RTmp, "emit_cast dest = %", dest);
    cast := cast_type(dest_ty, src_ty).raw();
    if rtype(dest) == .RTmp {
        c.f.tmp[dest.val()].width = dest_ty;
        c.tmps[dest.val()].types&[0] = src_ty;
        c.tmps[dest.val()].casts&[0] = src;
    };
    make_ins(.llcast, .Kl, dest, src, INT(cast))
}

fn emit_cast(c: *CastCtx, dest: Qbe.Ref, src: Qbe.Ref, dest_ty: Qbe.TmpType, src_ty: Qbe.TmpType) void = {
    c.f.emit(make_cast(c, dest, src, dest_ty, src_ty));
}

fn cast_type(dest: Qbe.TmpType, src: Qbe.TmpType) LlvmCast = {
    @debug_assert(dest != src, "dont need a cast");
    ::enum(@type src);
    @match(dest) {
        fn WFull() => @match(src) {
            fn LBool() => .ExtendI1ToL;
            fn LPtr()  => .PtrToInt;
            fn Wuw()   => .ExtendWToL;
            @default   => @panic("TODO: to WFull %", src);
        };
        fn LPtr()  => .IntToPtr;
        fn LBool() => .CmpZero;
        @default => {
            if (dest == .Wuw || dest == .Wsw) {   
                return(@match(src) {
                    fn WFull() => .TruncLtoW;
                    fn LBool() => .ExtendI1ToW;
                    fn LPtr()  => .PtrToIntW;
                    @default   => @panic("TODO: to wrod %", src);
                });
            };
            if (dest == .Wub || dest == .Wsb) {   
                if (src == .Wuw || src == .Wsw)  {
                    return(.TruncWtoB);
                };
                if (src == .WFull)  {
                    return(.TruncLtoB);
                };
                @panic("TODO: to byte %", src);
            };
            if (dest == .Wuh || dest == .Wsh) {   
                return(@match(src) {
                    fn Wuw()    => .TruncWtoH;
                    fn Wsw()    => .TruncWtoH;
                    fn LBool()  => .ExtendI1ToH;
                    fn WFull()  => .TruncLtoH;
                    @default    => @panic("TODO: to hlaf %", src);
                });
            };
            
            @panic("tmp.width not set to an llvm type. %", @as(i64) dest.raw().zext());
        };
    }
}

// (to, arg)
fn llvm_types(i: *Qbe.Ins) Ty(Qbe.TmpType, Array(Qbe.TmpType, 2)) = {
    o := i.op();
    yield :: fn(to: Qbe.TmpType, a0: Qbe.TmpType, a1: Qbe.TmpType) => {
        xxx := @uninitialized Array(Qbe.TmpType, 2); // TODO: why can't i call init :FUCKED
        if a0 == .WFull && argcls(i, 0) == .Kw {
            a0 = .Wuw;
        };
        if a1 == .WFull && argcls(i, 1) == .Kw {
            a1 = .Wuw;
        };
        if to == .WFull && i.cls() == .Kw {
            to = .Wuw;
        };
        xxx&.index(0)[] = a0;
        xxx&.index(1)[] = a1;
        return(to, xxx)
    };
    if o == .call {
        yield(if(i.arg&[1] == QbeNull, => .WFull, => .LPtr), .LPtr, .WFull);
    };
    if(o.is_load() || o == .vastart || o == .vaarg, => yield(.WFull, .LPtr, .WFull));
    if(o == .storeb, => yield(.WFull, .Wub, .LPtr));
    if(o == .storeh, => yield(.WFull, .Wuh, .LPtr));
    if(o == .argc, => yield(.WFull, .WFull, .LPtr));
    if(o == .parc, => yield(.LPtr, .WFull, .WFull));
    if(o == .storew, => yield(.WFull, .Wuw, .LPtr)); 
    if(o.is_store(), => yield(.WFull, .WFull, .LPtr)); // TODO: could store ptr if thats what you have tho
    if(o == .blit0, => yield(.WFull, .LPtr, .LPtr));
    if(o.between(.alloc4, .alloc16), => yield(.LPtr, .WFull, .WFull));
    if(o.between(.ceqw, .cuod), => yield(.LBool, .WFull, .WFull));
    if(o == .extub || o == .extsb, => yield(.WFull, .Wub, .WFull));
    if(o == .sel0, => yield(.WFull, .LBool, .WFull));
    if(o == .salloc, => yield(.LPtr, .WFull, .WFull));
    yield(.WFull, .WFull, .WFull)
}

::enum_basic(LlvmCast);
