// TODO:
// - rem for shifts that may overflow because thats a poison value on llvm. 
// - emit bitcode like zig does
// - this way of handling env parameters with inline asm is super fragile (i think it only works on -O0)
// - byval() doesn't do what i want. need to run part of the abi pass somehow? this sucks.
// - syscall, asm, add_asm_bytes, bss
// - run_tests.fr
// - TODO: when converting copies. be careful of order. 

LlvmEmit :: @struct(
    f: *Qbe.Fn,
    out: List(u8),
);

// I think they don't need to know the signeture for the same reason I don't need to know the signeture. 
fn finish_llvm(m: *QbeModule) [][]u8 = {
    o := m.llvm_global_code_buf&;
    for_symbols m { _, symbol |
        need_decl := false;
        if symbol.kind == .Pending && !symbol.name.starts_with("llvm.") {  // HACK what if you just happened to name your function that. bad news bears.  
            need_decl = true;
        };
        if symbol.kind == .Local && symbol.size > 0 {
            // must have been add_code_bytes; translate to module level assembly. 
            need_decl = true;
            prefix := if(m.goal.os == .linux, => "", => "_");
            bytes := m.segments&[.Code].mmapped.slice(symbol.offset, symbol.offset + symbol.size);
            
            @fmt(o, "module asm \"%%:\"\n", prefix, symbol.name);
            for bytes { inst |
                @fmt(o, "module asm \".byte %\"\n", @as(i64) inst.zext());
            };
        };
        if symbol.name == "__franca_code_segment" {
            // HACK HACK HACK
            @fmt(o, "@% = private unnamed_addr global { i8 } { i8 0 }\n", symbol.name);
        };
        if need_decl {
            @fmt(o, "declare ccc void @%();\n", symbol.name);
        };
    };
    @fmt(o, "declare ptr @llvm.stacksave.p0();\n");
    @fmt(o, "declare void @llvm.stackrestore.p0(ptr);\n");
    chunks := list([]u8, temp());
    chunks&.push(m.llvm_global_code_buf.items());
    chunks.items()
}

fn emit_llvm(f: *Qbe.Fn) void = emit_llvm(f.globals, f);
fn emit_llvm(m: *QbeModule, f: *Qbe.Fn) void = {
    self: LlvmEmit = (f = f, out = list(temp()));
    
    n := f.lnk.id;
    symbol := m.get_symbol_info(n);  // :ThreadSafety
    symbol.kind = .Local;
    
    private := if(f.lnk.export, => "", => "private ");
    @fmt(self.out&, "define %ccc ", private);
    self&.write_return_type(self.f.find_rets());
    
    @fmt(self.out&, " @%(", f.name()); 
    self&.write_params();
    if f.parameter_stack_bytes > 0 {
        @fmt(self.out&, ", ptr inalloca([% x i8]) %PAR", f.parameter_stack_bytes, "%"); 
    };
    @fmt(self.out&, ") \"frame-pointer\"=\"all\" {\n");
    for_blocks f { b | 
        self&.emit_block(b);
    };
    @fmt(self.out&, "}\n"); 
    push_all(m.llvm_global_code_buf&, self.out.items());
}

fn emit_block(self: *LlvmEmit, b: *Qbe.Blk) void = {
    @fmt(self.out&, "B%:\n", b.id);
    
    for_phi b { p |
        @fmt(self.out&, "\t%% = phi ", "%", self.f.get_temporary(p.to).name());
        self.write_type(p.cls);
        comma := "";
        range(0, p.narg.zext()) { a | 
            @fmt(self.out&, "% [ ", comma);
            self.write_ref(p.arg[a], p.cls);
            @fmt(self.out&, ", %B% ]", "%", p.blk[a].id);
            comma = ",";
        };
        @fmt(self.out&, "\n");
    };
    
    n_ins := 0;
    last_salloc := QbeNull;
    last_salloc_index := 0;
    last_salloc_size := 0;
    for_insts_forward b { i |   
        n_ins += 1;
        @match(i.op()) {
            fn copy()   => (); // part of call
            fn dbgloc() => ();  // TODO
            fn sel0()   => (); // part of sel1
            fn blit0()  => (); // part of blit1
            fn nop() => ();  // just added to avoid shuffling instructions around
            fn salloc() => {
                last_salloc = i.to;
                if i.to == QbeNull {
                    @fmt(self.out&, "\tcall void @llvm.stackrestore.p0(ptr %BASE%_%);\n", "%", b.id, last_salloc_index);
                    last_salloc_size = 0;
                } else {
                    last_salloc_index = n_ins;
                    last_salloc_size = self.f.get_int(i.arg&[0]) || @panic("salloc non constant");
                    @fmt(self.out&, "\t%BASE%_% = call ptr @llvm.stacksave.p0();\n", "%", b.id, last_salloc_index);
                    @fmt(self.out&, "\t%% = alloca inalloca i8, i64 %\n", "%", self.f.get_temporary(i.to).name(), last_salloc_size);
                };
            }
            fn call() => {
                args, rets, is_void := collect_call_copies(self.f.globals, i, b);
                // TODO: this definetly is not allowed
                @if(self.f.globals.goal.arch == .x86_64)
                each args { i |
                    ::enum(Amd64Reg);
                    if i.to == TMP(Amd64Reg.RAX.raw()) {
                        // TODO: set asm style so it doens't have to be backwards?
                        push_all(self.out&, "\tcall void asm sideeffect \"mov $0, %rax\", \"r,~{rax}\"(i64 ");
                        self.write_ref(i.arg&[0], .Kl);
                        @fmt(self.out&, ")\n");
                        i.set_nop();
                    };
                };
                rcall := i.arg&[1];
                ssa_name := @tfmt("call.%_%", b.id, n_ins);
                if !is_void {
                    @fmt(self.out&, "\t%% = call ", "%", ssa_name);
                    self.write_return_type(rets);
                    self.out&.push_all(" ");
                } else {
                    @fmt(self.out&, "\tcall void");
                };
                callee := i.arg&[0];
                self.write_ref(callee, .Kl);
                @fmt(self.out&, "(");
                self.write_args(args);
                if last_salloc_size > 0 {
                    @fmt(self.out&, ", ptr inalloca([% x i8]) %%", last_salloc_size, "%", self.f.get_temporary(last_salloc).name()); 
                };
                @fmt(self.out&, ")\n");
                n := 0; // TODO: this is wrong! needs to be order independent. 
                each rets { i |
                    if i.op() == .copy && i.to != QbeNull {
                        @fmt(self.out&, "\t");
                        self.write_ref(i.to, i.cls());
                        @fmt(self.out&, " = extractvalue ");
                        self.write_return_type(rets);
                        @fmt(self.out&, " %%, %\n", "%", ssa_name, n);
                        n += 1;
                    };
                };
            };
            @default => self.emit_ins(i);
        };
    };
    
    j := b.jmp.type;
    @match(j) {
        fn jnz() => {
            @fmt(self.out&, "\tbr i1 ");
            self.write_ref(b.jmp.arg, .Kw);
            @fmt(self.out&, ", label %B%, label %B%\n", "%", b.s1.id, "%", b.s2.id);
        }
        fn jmp() => {
            @fmt(self.out&, "\tbr label %B%\n", "%", b.s1.id);
        }
        fn hlt() => self.out&.push_all("\tunreachable\n");
        fn ret0() => {
            rets := collect_ret_copies(self.f.globals, b);
            
            prev_ssa := "poison";
            n := 0; // TODO: this is wrong! needs to be order independent. 
            each rets { i |
                if i.op() == .copy {
                    next_ssa := @tfmt("%RET%_%", "%", b.id, n);
                    @fmt(self.out&, "\t% = insertvalue ", next_ssa);
                    self.write_return_type(rets);
                    @fmt(self.out&, " %, ", prev_ssa);
                    self.write_type(i.cls());
                    @fmt(self.out&, " ");
                    self.write_ref(i.arg&[0], i.cls());
                    @fmt(self.out&, ", %\n", n);
                    //i.set_nop();
                    prev_ssa = next_ssa;
                    n += 1;
                };
            };
            if n == 0 {
                prev_ssa = "";
            };
            @fmt(self.out&, "\tret ");
            self.write_return_type(rets);
            @fmt(self.out&, " %\n", prev_ssa);    
        }
        @default => panic("bad jmp");
    };
    
    //for_insts_forward b { i | 
    //    if i.op() == .copy {
    //        printins(self.f, i, self.out&);
    //        @fmt(self.out&, " | is not part of a call!\n");
    //    };
    //};
}

// TODO: less copy paste. bounds checking for blk. 
fn collect_call_copies(m: *QbeModule, call: *Qbe.Ins, b: *Qbe.Blk) Ty([]Qbe.Ins, []Qbe.Ins, bool) = {
    rcall := call.arg&[1];
    if rcall == QbeNull {
        rcall = CALL(0);
    };
    ret_counts := @uninitialized Array(i32, 2);
    retreg := {m.target.retregs}(rcall, ret_counts&);
    arg_counts := @uninitialized Array(i32, 2);
    argreg := {m.target.argregs}(rcall, arg_counts&);
    
    arg_start := call;
    narg := count_ones(argreg);
    while => narg > 0 {
        arg_start = arg_start.offset(-1);
        @assert_ge(ptr_diff(b.ins.first, arg_start), 0, "missing arg copies %", rcall);
        if arg_start.op() == .copy {
            narg -= 1;
        };
    };
    ret_end := call;
    nret := count_ones(retreg);
    start_nret := nret;
    while => nret > 0 {
        ret_end = ret_end.offset(1);
        @assert_lt(ptr_diff(b.ins.first, ret_end), b.nins.zext(), "missing ret copies");
        if ret_end.op() == .copy {
            nret -= 1;
            if ret_end.to == QbeNull {
                start_nret -= 1;
            };
        };
    };
    (arg_start.between(call), call.offset(1).between(ret_end.offset(1)), start_nret == 0)
}

fn collect_ret_copies(m: *QbeModule, b: *Qbe.Blk) []Qbe.Ins = {
    rcall := b.jmp.arg;
    if rcall == QbeNull {
        rcall = CALL(0);
    };
    ret_counts := @uninitialized Array(i32, 2);
    retreg := {m.target.retregs}(rcall, ret_counts&);
    end := b.ins.first.offset(b.nins.zext());
    ret_start := end;
    nret := count_ones(retreg);
    while => nret > 0 {
        ret_start = ret_start.offset(-1);
        @assert_lt(ptr_diff(b.ins.first, ret_start), b.nins.zext(), "missing ret copies");
        if ret_start.op() == .copy {
            nret -= 1;
        };
    };
    @assert_eq(nret, 0, "missing ret copies");
    ret_start.between(end)
}

fn llvm_ty(i: *Qbe.Ins) Str = i.cls().llvm_ty();
fn llvm_ty(k: Qbe.Cls) Str = {
    types :: @const_slice("i32", "i64", "float", "double");
    types[k.raw().intcast()]
}

fn emit_ins(self: *LlvmEmit, i: *Qbe.Ins) void = {
    o := self.out&;
    @fmt(o, "\t");
    
    bin :: fn(int: Str, float: Str) => {
        name := if(i.cls().is_int(), => int, => float);
        @fmt(o, "% ", name);
        self.write_type(i.cls());
        o.push_all(" ");
        self.write_ref(i.arg&[0], argcls(i, 0));
        o.push_all(", ");
        self.write_ref(i.arg&[1], argcls(i, 1));
        o.push_all("\n");
    };
    int_bin :: fn(name: Str) => bin(name, "");
    if i.to != QbeNull {
        @fmt(self.out&, "%% = ", "%", self.f.get_temporary(i.to).name());
    };
    toT := i.llvm_ty();
    
    cast :: fn(name: Str) => {
        cast2(name, argcls(i, 0).llvm_ty(), toT);
    };
    cast2 :: fn(name: Str, in: Str, out: Str) => {
        @fmt(o, "% % ", name, in);
        self.write_ref(i.arg&[0], .Kl);
        @fmt(o, " to %\n", out);
    };
    @assert(!isreg(i.arg&[0]), "reg arg %", i.arg&[0]);
    @match(i.op()) {
        fn addr() => {
            @debug_assert_eq(rtype(i.arg&[0]), .RSlot);
            off := -i.arg&[0].rsval() - 16;// + 8; self.f.parameter_stack_bytes + self.f.parameter_stack_bytes + 
            @fmt(o, " getelementptr i8, ptr %PAR, i32 %\n", "%", off); // TODO: this is amd64 specific
        }
        fn add()  => bin("add", "fadd");
        fn sub()  => bin("sub", "fsub");
        fn mul()  => bin("mul", "fmul");
        fn div()  => bin("sdiv", "fdiv");
        fn udiv() => int_bin("udiv");
        fn rem()  => int_bin("srem");
        fn urem() => int_bin("urem");
        fn and()  => int_bin("and");
        fn xor()  => int_bin("xor");
        fn or()   => int_bin("or");
        // TODO: these are wrong because llvm makes a poison value if you shift by too much instead of mod by the size. 
        fn sar()   => int_bin("ashr");
        fn shr()   => int_bin("lshr");
        fn shl()   => int_bin("shl");
        fn extsw() => cast("sext");
        fn extuw() => cast("zext");
        fn extub() => cast2("zext", "i8", toT);
        fn extsb() => cast2("sext", "i8", toT);
        fn extuh() => cast2("zext", "i16", toT);
        fn dtosi() => cast("fptosi");
        fn stosi() => cast("fptosi");
        fn swtof() => cast("sitofp");
        fn uwtof() => cast("uitofp");
        fn ultof() => cast("uitofp");
        fn stoui() => cast("fptoui");
        fn dtoui() => cast("fptoui");
        fn sltof() => cast("sitofp");
        fn cast()  => cast("bitcast");
        fn exts()  => cast("fpext");
        fn load() => {
            @fmt(o, "load %, ptr ", toT);
            self.write_ref(i.arg&[0], .Kl);
            o.push_all("\n");
        }
        fn neg() => {
            @fmt(o, "fneg % ", toT);
            self.write_ref(i.arg&[0], .Kl);
            o.push_all("\n");
        }
        fn llcast() => {
            @debug_assert(rtype(i.arg&[1]) == .RInt, "llcast second arg must be cast index");
            c := @as(LlvmCast) i.arg&[1].val();
            @match(c) {
                fn None() => panic("no cast");
                fn IntToPtr() => cast2("inttoptr", "i64", "ptr");
                fn PtrToInt() => cast2("ptrtoint", "ptr", "i64");
                fn PtrToIntW() => cast2("ptrtoint", "ptr", "i32");
                fn TruncLtoW() => cast2("trunc", "i64", "i32");
                fn TruncWtoB() => cast2("trunc", "i32", "i8");
                fn TruncLtoB() => cast2("trunc", "i64", "i8");
                fn TruncWtoH() => cast2("trunc", "i32", "i16");
                fn TruncLtoH() => cast2("trunc", "i64", "i16");
                fn ExtendI1ToW() => cast2("zext", "i1", "i32");
                fn ExtendI1ToH() => cast2("zext", "i1", "i16");
                fn ExtendI1ToL() => cast2("zext", "i1", "i64");
                fn CmpZero() => {   
                    int_type := "i64";
                    if rtype(i.arg&[0]) == .RTmp && self.f.tmp[i.arg&[0].val()].cls == .Kw {
                        int_type = "i32";
                    };
                    @fmt(o, "icmp ne % ", int_type);
                    self.write_ref(i.arg&[0], .Kl);
                    @fmt(o, ", 0\n");
                }
            };
        }
        fn vastart() => panic("isel lowers vastart");
        fn vaarg() => {
            push_all(o, "va_arg ptr ");
            self.write_ref(i.arg&[0], .Kl);
            push_all(o, ", ");
            self.write_type(i.cls());
            push_all(o, "\n");
        }
        fn sel1() => {
            sel1 := i;
            sel0 := i;
            while => sel0.op() != .sel0 {
                sel0 = sel0.offset(-1);
            };
            push_all(o, "select i1 ");
            self.write_ref(sel0.arg&[0], .Kl);
            @fmt(o, ", % ", toT);
            self.write_ref(sel1.arg&[0], sel1.cls());
            @fmt(o, ", % ", toT);
            self.write_ref(sel1.arg&[1], sel1.cls());
            @fmt(o, "\n");
        }
        fn blit1() => {
            i1 := i;
            i0 := i;
            while => i0.op() != .blit0 {
                i0 = i0.offset(-1);
            };
            
            @fmt(o, "call void @llvm.memmove.p0.p0.i32(ptr ");
            self.write_ref(i0.arg&[1], .Kl);
            @fmt(o, ", ptr ");
            self.write_ref(i0.arg&[0], .Kl);
            @fmt(o, ", i32 %, i1 false)\n", i1.arg&[0].rsval().abs()); 
        }
        fn pare() => {
            if self.f.globals.goal.arch == .aarch64 {
                @fmt(o, "call i64 asm \"mov $0, x9\", \"=r\"()\n");
            } else {
                panic("TODO: pare llvm arch");
            };
        }
        @default => {
            ck := Qbe.Cls.zeroed();
            cc: i32 = 0;
            if iscmp(i.op(), ck&, cc&) {
                @fmt(o, "%cmp % ", if(ck.is_int(), => "i", => "f"), llvm_condition_codes[cc.zext()]);
                self.write_type(ck);
                o.push_all(" ");
                self.write_ref(i.arg&[0], argcls(i, 0));
                o.push_all(", ");
                self.write_ref(i.arg&[1], argcls(i, 1));
                o.push_all("\n");
                return();
            };
            
            if i.op().is_store() {
                store_offset := i.op().raw() - Qbe.O.storeb.raw();
                types :: items(@list("i8", "i16", "i32", "i64", "float", "double") ast_alloc());
                @fmt(o, "store % ", types[store_offset.zext()]);
                self.write_ref(i.arg&[0], argcls(i, 0));
                o.push_all(", ptr ");
                self.write_ref(i.arg&[1], .Kl);
                o.push_all("\n");
                return();
            };
            if i.op().is_load() {
                store_offset := i.op().raw() - Qbe.O.storeb.raw();
                types :: items(@list("i8", "i16", "i32") ast_alloc());
                size := size_of_load(i).intcast().trailing_zeros();
                @fmt(o, "load %, ptr ", types[size]);
                self.write_ref(i.arg&[0], argcls(i, 0));
                o.push_all("\n");
                return();
            };
            
            if i.op().between(.alloc4, .alloc16) {
                align_log2 := i.op().raw() - Qbe.O.alloc4.raw();
                align := 1.shift_left(align_log2.intcast() + 2);
                @fmt(self.out&, "alloca i8, i64 ");
                self.write_ref(i.arg&[0], .Kl);
                @fmt(self.out&, ", align %\n", align);
                return();
            };
            
            names :: Qbe.O.get_enum_names();
            @fmt(o, "TODO:% ", names.index(@as(i64) intcast(@as(i32) i.op().raw())));
            self.write_ref(i.arg&[0], .Kl);
            self.write_ref(i.arg&[1], .Kl);
            o.push_all("\n");
            
        };
    }
} 

// TODO: we need to include abi information in attributes so we need to run some subset of the abi passes before getting here. 
fn write_params(e: *LlvmEmit) void = {
    comma := "";
    n := e.f.reg.count_ones();
    if(n == 0, => return());
    
    last_par := e.f.start.ins.first;
    while => n > 0 {
        @assert_lt(ptr_diff(e.f.start.ins.first, last_par), e.f.start.nins.zext(), "missing par copies");
        if last_par.op() == .copy {
            n -= 1;
        };
        last_par = last_par.offset(1);
    };
    pars := between(e.f.start.ins.first, last_par);
    
    each_rev pars { i |
        continue :: local_return;
        if(i.op() != .copy, => continue());  // HACK. we don't bother inserting llcast at the end
        e.out&.push_all(comma);
        e.write_type(i.cls());
        e.out&.push_all(" ");
        e.write_ref(i.to, i.cls());
        i.set_nop();
        comma = ", ";
    };
}

fn write_args(e: *LlvmEmit, args: []Qbe.Ins) void = {
    comma := "";
    each_rev args { i |
        if i.op() == .copy {
            e.out&.push_all(comma);
            e.write_type(i.cls());
            e.out&.push_all(" ");
            e.write_ref(i.arg&[0], i.cls());
            comma = ", ";
            i.set_nop();
        }
    };
}

fn write_ref(self: *LlvmEmit, r: Qbe.Ref, k: Qbe.Cls) void = {
    @match(rtype(r)) {
        fn RTmp() => {
            @fmt(self.out&, "%%", "%", self.f.get_temporary(r).name());
        }
        fn RCon() => {
            c := self.f.get_constant(r);
            @match(c.type) {
                fn CUndef() => @fmt(self.out&, "TODO:undef");
                fn CAddr() => {
                    name := self.f.globals.str(c.sym.id);
                    if c.bits.i == 0 {
                        @fmt(self.out&, " @%", name);
                    } else {
                        @fmt(self.out&, " getelementptr (i8, ptr @%, i32 %)", name, c.bits.i);
                    };
                };
                fn CBits() => {
                    i := c.bits.i;
                    if k == .Ks || k == .Kd {
                        // for f64, it wants the bits as hex. 
                        // for f32, it wants an f64 as hex that happens to be exactly representable as f32. 
                        if k == .Ks {
                            x: f32 = c.bits.s.s;
                            x: f64 = x.cast();
                            x: i64 = x.bitcast();
                            i = x;
                        };
                        h := fmt_hex(i);
                        @fmt(self.out&, "%", h); 
                    } else {
                        @fmt(self.out&, "%", i);
                    };
                }
            };
        }
        @default => {
            @fmt(self.out&, "TODO:reftype %", r);
        };
    };
}

fn write_type(self: *LlvmEmit, k: Qbe.Cls) void = {
    name := @match(k) {  
        fn Kw() => "i32";
        fn Kl() => "i64";
        fn Ks() => "float";
        fn Kd() => "double";
        @default => @panic("ICE: bad instruction class");
    };
    self.out&.push_all(name);
}

llvm_condition_codes :: items(@list( // :CmpOrder
     // Cieq Cine  Cisge  Cisgt  Cisle  Cislt  Ciuge  Ciugt  Ciule  Ciult
        "eq", "ne", "sge", "sgt", "sle", "slt", "uge", "ugt", "ule", "ult",
    // Cfeq   Cfge   Cfgt   Cfle   Cflt   Cfne    Cfo   Cfuo
       "oeq", "oge", "ogt", "ole", "olt", "une", "ord", "uno",
                                    // ne unordered because nan!=nan 
) ast_alloc());

fn find_rets(f: *Qbe.Fn) []Qbe.Ins = {
    for_blocks f { b |
        if(is_ret(b.jmp.type), => return(collect_ret_copies(f.globals, b)));
    };
    // i guess its fine if all paths hlt
    empty()
}

fn write_return_type(self: *LlvmEmit, rets: []Qbe.Ins) void = {
    n := 0;
    @fmt(self.out&, "{");
    each rets { i |
        if i.op() == .copy && i.to != QbeNull {
            self.write_type(i.cls());
            @fmt(self.out&, ",");
            n += 1;
        };
    };
    self.out.len -= 1; // , or }
    if n == 0 {
        @fmt(self.out&, "void");
    } else {
        @fmt(self.out&, "}");
    };
}

fn emit_llvm(m: *QbeModule, dat: *Qbe.Dat) void = {
    ::enum(@type dat.type);
    type := m.llvm_global_type_buf&;
    value := m.llvm_global_value_buf&;
    @match(dat.type) {
        fn DZeroInit() => panic("TODO: bss llvm");
        fn DStart() => {
            type[] = list(temp());
            value[] = list(temp());
            @fmt(type, "@% = private unnamed_addr global { ", m.str(dat.lnk.id));
            symbol := m.get_symbol_info(dat.lnk.id); // :ThreadSafety
            symbol.kind = .Local;
        }
        fn DEnd() => {
            if type.items().ends_with(",") {
                type.len -= 1;
            };
            if value.items().ends_with(",") {
                value.len -= 1;
            };
            //@fmt_write(m.outf, "% } { % }\n", type.items(), value.items());  // TODO: this should be a type error?! :FUCKED
            @fmt(m.llvm_global_code_buf&, "% } { % }\n", type.items(), value.items());  // TODO: this should be a type error?! :FUCKED
        };
        fn DZ() => {
            @fmt(type, "[% x i8],", dat.u.num);
            @fmt(value, "[% x i8] zeroinitializer,", dat.u.num);
        }
        fn DB() => {
            @debug_assert(!dat.is_ref, "can't have a byte sized pointer");
            if dat.is_str {
                s := dat.u.str;
                dest := if dat.has_quotes_and_escapes {
                    // When building ir manually you'll probably just give us the raw bytes.
                    // But this makes it easy to run Qbe's text based tests. Really the parser should handle this. 
                    q :: "\"".ascii();
                    @debug_assert(s[0] == q && s[s.len - 1] == q, "strings are quoted");
                    s = s.slice(1, s.len - 1); // quotes
                    dest := u8.list(s.len, temp());
                    expand_string_escapes(s, dest&);
                    dest.items()
                } else {
                    s
                };
                @fmt(type, "[% x i8],", dest.len);
                @fmt(value, "[% x i8] [", dest.len);
                for dest { c |
                    @fmt(value, "i8 %,", c);
                };
                if dest.len > 0 {
                    value.len -= 1;
                };
                @fmt(value, "],");
            } else {
                @fmt(type, "i8,");
                @fmt(value, "i8 %,", dat.u.num);
            };
        }
        fn DL() => {
            if dat.is_ref {
                id := dat.u.ref.id;
                @assert(dat.u.ref.off == 0, "sorry can't do offset refs yet");
                @fmt(type, "ptr,");
                @fmt(value, "ptr @%,", m.str(id));
                use_symbol(m, id) { symbol | 
                    mark_referenced(m, id, symbol);
                    // TODO: do i need local_but_marked... ?
                };
            } else {
                @fmt(type, "i64,");
                @fmt(value, "i64 %,", dat.u.num);
            };
        }
        fn DW() =>  {
            @debug_assert(!dat.is_ref, "can't have a w sized pointer");
            @fmt(type, "i32,");
            @fmt(value, "i32 %,", dat.u.num);
        }
        fn DH() =>  {
            @debug_assert(!dat.is_ref, "can't have a h sized pointer");
            @fmt(type, "i16,");
            @fmt(value, "i16 %,", dat.u.num);
        }
    };
}
