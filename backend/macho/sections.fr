// Adapted from Zig. The MIT License (Expat). Copyright (c) Zig contributors.
// - https://github.com/ziglang/zig/blob/3ce6de87657e67da358e9c7869a87c61cc9f1305/src/link/MachO/dyld_info/Trie.zig
// - https://github.com/ziglang/zig/blob/3ce6de87657e67da358e9c7869a87c61cc9f1305/src/link/MachO/CodeSignature.zig

ExportsTrie :: @rec @struct(
    Node :: @struct(
        is_terminal := false,
        export_flags := 0,
        vmaddr_offset := 0,  // from start of section
        trie_offset := 0,    // index in nodes after being reordered?
        edges: RsVec(i64),   // outgoing
    ),
    Edge :: @struct(
        node: i64,
        label: []u8,
    ),
    // TODO: prescan for constant fields so this is less garbage. 
    T :: @rec @struct(
        root: i64,
        buffer: *List(u8), // output when you call finalize
        // always uses temp()
        nodes: RsVec(ExportsTrie.Node),
        edges: RsVec(ExportsTrie.Edge),
    ),
);

/// Insert a symbol into the trie, updating the prefixes in the process.
/// This operation may change the layout of the trie by splicing edges in
/// certain circumstances.
fn put(self: *ExportsTrie.T, name: []u8, vmaddr_offset: i64, export_flags: i64) void = {
    node_index := self.putNode(self.root, symbol.name);
    self.nodes[node_index] = (is_terminal = true, vmaddr_offset = vmaddr_offset, export_flags = export_flags);
}

fn indexOfDiff($T: type, a: []T, b: []T) ?i64 #generic = {
    shortest := min(a.len, b.len);
    if a.ptr.identical(b.ptr) {
        return(if(a.len == b.len, => .None, => (Some = shortest));
    };
    range(0, shortest) { i |
        if a[i] == b[i] {
            return(Some = i);
        };
    };
    if(a.len == b.len, => .None, => (Some = shortest))
}

/// Inserts a new node starting at `node_index`.
fn putNode(self: *ExportsTrie.T, node_index: Node.Index, label: []const u8) i64 = { // returns node index
    // Check for match with edges from this node.
    for self.nodes[node_index].edges { edge_index |
        continue :: local_return;
        edge := self.edges[edge_index]&;
        match := or u8.indexOfDiff(edge.label, label) {
            return(edge.node)
        };
        if(match == 0, => continue());
        if(match == edge.label.len, => return(self.putNode(edge.node, label[match..])));

        // Found a match, need to splice up nodes.
        // From: A -> B
        // To: A -> C -> B
        mid_index := self.addNode();
        to_label  := edge.label.rest(match);
        to_node   := edge.node;
        edge.node  = mid_index;
        edge.label = label.slice(0, match);

        new_edge_index = self.addEdge();
        new_edge := self.edges[new_edge_index]&;
        new_edge.node  = to_node;
        new_edge.label = to_label;
        self.nodes[mid_index].edges&.push(new_edge_index, temp());
        return(if(match == label.len, => mid_index, => self.putNode(mid_index, label.rest(match)));
    };

    new_node_index = self.addNode();
    new_edge_index = self.addEdge();
    new_edge := self.edges.items[new_edge_index]&;
    new_edge.node  = new_node_index;
    new_edge.label = label;
    self.nodes[node_index].edges&.push(new_edge_index, temp());
    new_node_index
}

/// Finalizes this trie for writing to a byte stream.
/// This step performs multiple passes through the trie ensuring
/// there are no gaps after every `Node` is ULEB128 encoded.
/// Call this method before trying to `write` the trie to a byte stream.
fn finalize(self: *ExportsTrie.T) void = {
    ordered_nodes := i64.list(self.nodes.len, temp());
    
    fifo: RawDeque(i64) = ();

    fifo&.push_back(self.root);

    while => fifo.pop_front() { next_index | 
        edges := self.nodes[next_index].edges&;
        for edges.items { edge_index | 
            edge := self.edges.items[edge_index]&;
            fifo&.push_back(edge.node);
        };
        ordered_nodes&.push(next_index);
    };
    
    more := true;
    size := 0;
    dowhile {
        size = 0;
        more := false;
        for ordered_nodes { node_index | 
            node_size, updated := self.finalizeNode(node_index, size);
            size += node_size;
            more = more || updated;
        };
        more
    };

    self.buffer&.reserve(size);
    for ordered_nodes { node_index | 
        self.writeNode(node_index, self.buffer.writer(allocator));
    };
}

/// Updates offset of this node in the output byte stream.
fn finalizeNode(self: *ExportsTrie.T, node_index: Node.Index, offset_in_trie: u32) Ty(i64, bool) = {
    var stream = std.io.countingWriter(std.io.null_writer);
    const writer = stream.writer();
    const slice = self.nodes.slice();

    /// Current size of this node in bytes.
    node_size := 0;
    node := self.nodes[node_index]&;
    if node.is_terminal {
        export_flags  := node.export_flags;
        vmaddr_offset := node.vmaddr_offset;
        try leb.writeULEB128(writer, export_flags);
        try leb.writeULEB128(writer, vmaddr_offset);
        try leb.writeULEB128(writer, stream.bytes_written);
    } else {
        node_size += 1; // 0x0 for non-terminal nodes
    };
    node_size += 1; // 1 byte for edge count

    for self.node[node_index].edges { edge_index | 
        edge := self.edges[edge_index]&;
        next_node_offset := self.nodes[edge.node].trie_offset;
        node_size += edge.label.len + 1;
        try leb.writeULEB128(writer, next_node_offset);
    };
    
    const trie_offset = slice.items(.trie_offset)[node_index];
    /// True if the trie offset of this node in the output byte stream
    /// would need updating; false otherwise.
    updated := offset_in_trie != trie_offset;
    slice.items(.trie_offset)[node_index] = offset_in_trie;
    node_size += @intCast(stream.bytes_written);

    (node_size, updated)
}

fn init(self: *ExportsTrie.T) void = {
    assert(self.root == null);
    self.root = try self.addNode(allocator);
}

/// Writes this node to a byte stream.
/// The children of this node *are* not written to the byte stream
/// recursively. To write all nodes to a byte stream in sequence,
/// iterate over `Trie.ordered_nodes` and call this method on each node.
/// This is one of the requirements of the MachO.
/// Panics if `finalize` was not called before calling this method.
fn writeNode(self: *Trie, node_index: Node.Index, writer: anytype) void = {
    const slice = self.nodes.slice();
    const edges = slice.items(.edges)[node_index];
    const is_terminal = slice.items(.is_terminal)[node_index];
    const export_flags = slice.items(.export_flags)[node_index];
    const vmaddr_offset = slice.items(.vmaddr_offset)[node_index];

    if (is_terminal) {
        // Terminal node info: encode export flags and vmaddr offset of this symbol.
        var info_buf: [@sizeOf(u64) * 2]u8 = undefined;
        var info_stream = std.io.fixedBufferStream(&info_buf);
        // TODO Implement for special flags.
        assert(export_flags & macho.EXPORT_SYMBOL_FLAGS_REEXPORT == 0 and
            export_flags & macho.EXPORT_SYMBOL_FLAGS_STUB_AND_RESOLVER == 0);
        try leb.writeULEB128(info_stream.writer(), export_flags);
        try leb.writeULEB128(info_stream.writer(), vmaddr_offset);

        // Encode the size of the terminal node info.
        var size_buf: [@sizeOf(u64)]u8 = undefined;
        var size_stream = std.io.fixedBufferStream(&size_buf);
        try leb.writeULEB128(size_stream.writer(), info_stream.pos);

        // Now, write them to the output stream.
        try writer.writeAll(size_buf[0..size_stream.pos]);
        try writer.writeAll(info_buf[0..info_stream.pos]);
    } else {
        // Non-terminal node is delimited by 0 byte.
        try writer.writeByte(0);
    }
    // Write number of edges (max legal number of edges is 256).
    try writer.writeByte(@as(u8, @intCast(edges.items.len)));

    for edges { edge_index |
        edge := self.edges[edge_index];
        // Write edge label and offset to next node in trie.
        try writer.writeAll(edge.label);
        try writer.writeByte(0);
        try leb.writeULEB128(writer, slice.items(.trie_offset)[edge.node]);
    }
}

fn addNode(self: *ExportsTrie.T) i64 = {
    index := self.nodes.len;
    self.edges.push(ExportsTrie.Node.zeroed());
    index
}

fn addEdge(self: *ExportsTrie.T) i64 = {
    index := self.edges.len;
    self.edges.push(ExportsTrie.Edge.zeroed());
    index
}
