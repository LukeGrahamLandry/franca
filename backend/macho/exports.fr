// Adapted from Zig. The MIT License (Expat). Copyright (c) Zig contributors.
// - https://github.com/ziglang/zig/blob/3ce6de87657e67da358e9c7869a87c61cc9f1305/src/link/MachO/dyld_info/Trie.zig

ExportsTrie :: @rec @struct(
    Node :: @struct(
        is_terminal := false,
        vmaddr_offset := 0,  // from start of section
        trie_offset := 0,    // index in nodes after being reordered?
        edges := RsVec(i64).zeroed(),   // outgoing
    ),
    Edge :: @struct(
        node: i64,
        label: []u8,
    ),
    // TODO: prescan for constant fields so this is less garbage. 
    T :: @rec @struct(
        root: i64,
        // always uses temp()
        nodes: RsVec(ExportsTrie.Node),
        edges: RsVec(ExportsTrie.Edge),
    ),
);

/// Insert a symbol into the trie, updating the prefixes in the process.
/// This operation may change the layout of the trie by splicing edges in
/// certain circumstances.
fn put(self: *ExportsTrie.T, name: []u8, vmaddr_offset: i64) void = {
    node_index := self.putNode(self.root, name);
    self.nodes[node_index] = (is_terminal = true, vmaddr_offset = vmaddr_offset);
}

/// Inserts a new node starting at `node_index`.
fn putNode(self: *ExportsTrie.T, node_index: i64, label: []u8) i64 = { // returns node index
    // Check for match with edges from this node.
    for self.nodes[node_index].edges { edge_index |
        continue :: local_return;
        edge := self.edges[edge_index]&;
        match := or u8.index_of_diff(edge.label, label) {
            return(edge.node)
        };
        if(match == 0, => continue());
        if(match == edge.label.len, => return(self.putNode(edge.node, label.rest(match))));

        // Found a match, need to splice up nodes.
        // From: A -> B
        // To: A -> C -> B
        mid_index := self.add_node();
        to_label  := edge.label.rest(match);
        to_node   := edge.node;
        edge.node  = mid_index;
        edge.label = label.slice(0, match);

        new_edge_index := self.add_edge();
        new_edge := self.edges[new_edge_index]&;
        new_edge.node  = to_node;
        new_edge.label = to_label;
        self.nodes[mid_index].edges&.push(new_edge_index, temp());
        return(if(match == label.len, => mid_index, => self.putNode(mid_index, label.rest(match))));
    };

    new_node_index := self.add_node();
    new_edge_index := self.add_edge();
    new_edge       := self.edges[new_edge_index]&;
    new_edge.node   = new_node_index;
    new_edge.label  = label;
    self.nodes[node_index].edges&.push(new_edge_index, temp());
    new_node_index
}

/// This step performs multiple passes through the trie ensuring
/// there are no gaps after every `Node` is ULEB128 encoded.
fn write(self: *ExportsTrie.T, out: *List(u8)) void = {
    ordered_nodes := i64.list(self.nodes.len, temp());
    
    fifo: RawDeque(i64) = ();
    fifo&.push_back(self.root, temp());

    while => fifo&.pop_front() { next_index | 
        edges := self.nodes[next_index].edges&;
        for edges { edge_index | 
            edge := self.edges[edge_index]&;
            fifo&.push_back(edge.node, temp());
        };
        ordered_nodes&.push(next_index);
    };
    
    more := true;
    size := 0;
    dowhile {
        size = 0;
        more := false;
        for ordered_nodes { node_index | 
            node_size, updated := self.update_node_position(node_index, size);
            size += node_size;
            more = more || updated;
        };
        more
    };

    out.reserve(size);
    for ordered_nodes { node_index | 
        self.write_single_node(node_index, out);
    };
}

// How many bytes will it take to encode x?
fn uleb_size(x: i64) i64 = {
    buf := @uninitialized Array(u8, 16);
    buf: List(u8) = (maybe_uninit = buf&.items(), len = 0, gpa = panicking_allocator);
    leb128_unsigned(buf&, x);
    buf.len
}

fn update_node_position(self: *ExportsTrie.T, node_index: i64, offset_in_trie: i64) Ty(i64, bool) = {
    node := self.nodes[node_index]&;
    
    /// Current size of this node in bytes.
    node_size := 0;
    if node.is_terminal {
        node_size += 1; // export_flags=0. for now we don't care
        node_size += uleb_size(node.vmaddr_offset);
        node_size += uleb_size(node_size);
    } else {
        node_size += 1; // 0x0 for non-terminal nodes
    };
    node_size += 1; // 1 byte for edge count

    for node.edges { edge_index | 
        edge := self.edges[edge_index]&;
        next_node_offset := self.nodes[edge.node].trie_offset;
        node_size += edge.label.len + 1;
        node_size += uleb_size(next_node_offset);
    };
    
    /// True if the trie offset of this node in the output byte stream
    /// would need updating; false otherwise.
    updated := offset_in_trie != node.trie_offset;
    node.trie_offset = offset_in_trie;
    (node_size, updated)
}

fn init() ExportsTrie.T = {
    self := ExportsTrie.T.zeroed();
    self.root = self&.add_node();
    self
}

fn write_single_node(self: *ExportsTrie.T, node_index: i64, buf: *List(u8)) void = {
    node := self.nodes[node_index]&;
    if node.is_terminal {
        export_flags :: 0;  // for now we don't care
        size := uleb_size(export_flags) + uleb_size(node.vmaddr_offset);
        leb128_unsigned(buf, size);
        leb128_unsigned(buf, export_flags); 
        leb128_unsigned(buf, node.vmaddr_offset);
    } else {
        buf.push(0);
    };
    @debug_assert(node.edges.len < 256, "mach-o exports trie does not allow >255 edges");
    buf.push(@as(u8) node.edges.len.trunc());

    // tell it where to find our children 
    for node.edges& { edge_index |
        edge := self.edges[edge_index];
        buf.push_all(edge.label);
        buf.push(0);
        leb128_unsigned(buf, self.nodes[edge.node].trie_offset);
    };
}

fn add_node(self: *ExportsTrie.T) i64 = {
    index := self.nodes.len;
    self.nodes&.push(ExportsTrie.Node.zeroed(), temp());
    index
}

fn add_edge(self: *ExportsTrie.T) i64 = {
    index := self.edges.len;
    self.edges&.push(ExportsTrie.Edge.zeroed(), temp());
    index
}

fn index_of_diff($T: Type, a: []T, b: []T) ?i64 #generic = {
    ::if(?i64);
    shortest := min(a.len, b.len);
    if a.ptr.identical(b.ptr) {
        return(if(a.len == b.len, => .None, => (Some = shortest)));
    };
    range(0, shortest) { i |
        if a[i] != b[i] {
            return(Some = i);
        };
    };
    if(a.len == b.len, => .None, => (Some = shortest))
}
