#use("@/lib/encoding/leb128.fr");

macho_magic     :: 0xfeedfacf;
macos_page_size :: 16384;  // TODO: it's different on x64
MachoHeader :: @struct(
    magic: u32 = macho_magic,
    cpu_type: u32,
    cpu_subtype: u32,
    file_type: MachOFileType,
    commands_count: u32,
    commands_size: u32,
    flags: u32,
    _reserved: u32 = 0x00000000,
);

MachOFileType :: @enum(u32) (
    _Invalid = 0,
    Object = 1,
    Executable = 2,
    Dynamic = 6,
);

// TODO: should probably use the real names for these so you can google them. 
// "If a load command starts with 0x80000000 bit set that means the load command is necessary in order to be able to load or run the binary."" 
LoadCommand :: @enum(u32) (
    SegmentLoad = 0x00000019,
    LinkLibrary = 0x0000000C,  // will have full file path to the dynamically linked shared library.
    LinkLibrarySelf = 0x0000000D,
    LinkEditSymbolInfo  = 0x0000000B,
    LoadDynamicLinker  = 0x0000000E,  // just a c string
    LinkEditSymbolTable = 0x00000002,
    MinimumOsVersion    = 0x00000032,
    FunctionStarts      = 0x00000026,
    MainEntryPoint      = 0x80000028,
    SourceVersion       = 0x0000002A,
    DataInCode          = 0x00000029,
    CodeSigneture       = 0x0000001D,
    ApplicationUuid     = 0x0000001B,
    ChainedFixups       = 0x80000034,
    ExportsTrie         = 0x80000033,
);

LoadCommandHeader :: @struct(
    type: u32,
    size: u32,
);

SegmentLoad :: @struct(
    name: u128, 
    address: u64,      // offset from base address? 
    address_size: u64, // so how many bytes we want this segment to take up. 
    file_offset: u64,  // where in the file does the data start. 
    size: u64,         // if this is smaller than address size, the extra is filled in with zeros.
    max_prot: u32,     // MemPerm "Maximum virtual memory protections"
    init_prot: u32,    // MemPerm "Initial virtual memory protections"
    section_count: u32, 
    flag: u32,
); // Followed by <section_count> of SegmentSection

// TODO: have a FlagSet(MemPerm) type. 
// note: these are the same as for mmap
MemPerm :: @enum(u32) (
    Read    = 0b00000000000000000000000000000001,
    Write   = 0b00000000000000000000000000000010,
    Execute = 0b00000000000000000000000000000100,
);

SegmentSection :: @struct(
    section_name: u128, 
    segment_name: u128,  // must match SegmentLoad.name
    address: u64,     
    size: u64, 
    file_offset: u32, 
    alignment: u32,   
    relocations_file_offset: u32,
    relocations_count: u32,
    flag: u32,
    _reserved1 := 0x00000000,
    _reserved2 := 0x00000000,
    _reserved3 := 0x00000000,
);

LinkLibrary :: @struct(
    string_offset: u32 = 24,
    time_date_stamp: u32,
    current_version: u32,
    compatible_version: u32,
    // then a CStr. size of this load command includes the length of the string.
);

LoadDynamicLinker :: @struct(
    string_offset: u32 = 12,
    // then a CStr. size of this load command includes the length of the string.
);

LinkEditSymbolTable :: @struct(
    // symbol table is a list of SymbolEntry
    symbols_offset: u32, // from start of file
    symbol_count: u32,
    // strings table is a blob of null terminated strings
    strings_offset: u32, // from start of file
    strings_size: u32, // total size in bytes, NOT number of strings
);


// nlist
SymbolEntry :: @struct(
    name_offset: u32,
    symbol_type: u8,
    section_number: u8,
    desc: u16, // n_desc. high 8 bits are library ordinal number?
    symbol_address: u64,
);

LinkEditSymbolInfo :: @struct(
    // local means private. only used for debugging?
    local_symbol_index: u32,
    local_symbol_count: u32,
    // external means public symbols that we export
    external_symbol_index: u32,
    external_symbol_count: u32,
    // undefined means we import them. 
    undefined_symbol_index: u32,
    undefined_symbol_count: u32,
    content_table_offset: u32,
    content_table_count: u32,
    module_table_offset: u32,
    module_table_count: u32,
    referenced_symbol_offset: u32,
    referenced_symbol_count: u32,
    indirect_symbol_offset: u32,
    indirect_symbol_count: u32,
    external_relocation_offset: u32,
    external_relocation_count: u32,
    local_relocation_offset: u32,
    local_relocation_count: u32,
);

MinimumOsVersion :: @struct(
    platform_type: u32,
    minimum_os_version: u32,
    sdk_version: u32,
    number_of_tools_used: u32,
); // followed by number_of_tools_used of ToolType

ToolType :: @struct(
    type: u32,
    version: u32,
);

MainEntryPoint :: @struct(
    entry_offset: u64,  // in __TEXT?
    stack_size: u64, // or zero
);

SourceVersion :: @struct(
    version: u64, 
);

// There are a bunch of these: FunctionStarts, DataInCode, CodeSigneture, ChainedFixups, ExportsTrie
LinkEditBlob :: @struct(
    offset: u32, // will be in __LINKEDIT but the offset measures from start of file. 
    size: u32,
);

// DataInCode's LinkEditBlob points to a list of these
DataInCodeEntry :: @struct(
    offset: u32,
    length: u16,
    kind: u16,
);

ApplicationUuid :: @struct(
    uuid: u128,
);

ChainedFixupsHeader :: @struct(
    version: u32,
    starts_offset: u32,
    imports_offset: u32,
    symbols_offset: u32,
    imports_count: u32,
    imports_format: u32, // (_=1, _addend=2, _addend64=3)
    symbols_format: u32, // 0 means uncompressed?
);
#use("@/lib/bit_fields.fr");

ChainedImport :: @bit_fields(
    lib_ordinal := 8,
    weak        := 1,
    name_offset := 23,
);

// TODO: this is clearly not the best way to represent this data structure. 
//       you want to make it super clear that (next, is_bind) are in the same position for both cases. 
//       it would be nice if there were some way to integrate with @tagged so @match would work on your custom type. 
ChainedReloc :: @union(
    bind: @bit_fields(
        ordinal  := 24,
        addend   := 8,
        reserved := 19,
        next     := 12,
        is_bind  := 1,
    ),
    rebase: @bit_fields(
        target   := 36,
        high8    := 8,
        reserved := 7,
        next     := 12,
        is_bind  := 1,
    ),
);

ChainedStartsInSegment :: @struct(
    size: u32,
    page_size: u16,
    pointer_format: u16,
    segment_offset: u64,
    max_valid_pointer: u32,
    page_count: u16,
    // followed by Array(u16, page_count) offset to first fixup on the page
    first_starts_data: u16, // here is the first one that would be eaten by the alignment padding of the struct
    // now there are page_count-1 more of them
);

page_start_no_fixups :: 65535;
symbol_no_section :: 0;

RelocationFields :: @struct(
    offset: u32,  // index in __LINKEDIT Symbol Table (when extern=true?) 
    packed: @bit_fields(
        symbol   := 24,
        relative := 1,
        length   := 2,  // (byte, word, long, quad)
        extern   := 1,
        type     := 4,  // ARCH_RELOC_XXX
    ),
);

ARM64_RELOC_UNSIGNED :: 0;  // X86_64_RELOC_UNSIGNED is also 0. this is for DataAbsolute
ARM64_RELOC_BRANCH26 :: 2;  // b/bl
// the 12+21 are for instruction pairs that compute/load an address 
ARM64_RELOC_PAGE21 :: 3;
ARM64_RELOC_PAGEOFF12 :: 4;
ARM64_RELOC_GOT_LOAD_PAGE21 :: 5;
ARM64_RELOC_GOT_LOAD_PAGEOFF12 :: 6;

X86_64_RELOC_BRANCH :: 2;   // any func
X86_64_RELOC_SIGNED :: 1;   // local data
X86_64_RELOC_GOT_LOAD :: 3; // import data

u128 :: @struct(low: u64, high: u64);

fn str(s: *u128) Str = {
    s: []u8 = (ptr = ptr_cast_unchecked(u128, u8, s), len = 16);
    while => s.len > 0 && s[s.len - 1] == 0 {
        s.len -= 1;
    };
    s
}

ATTR_SOME_INSTRUCTIONS  :: 0x400;
ATTR_PURE_INSTRUCTIONS :: 0x80000000;
// everyone who copy-pastes this number is legally oblicated (i assume) to also copy paste the following help text:
// >>> "blocks are live if they reference live blocks"
// what the fuck does that mean? no idea. good luck. have fun. 
ATTR_LIVE_SUPPORT      :: 0x08000000;

S_SYMBOL_STUBS             :: 0x8;
S_NON_LAZY_SYMBOL_POINTERS :: 0x6;
S_ZEROFILL                 :: 0x1;
S_THREAD_LOCAL_REGULAR     :: 0x11;  // this section has initilization data for tls
S_THREAD_LOCAL_VARIABLES   :: 0x13;  // this section has an array of (fn, key, addr) descriptors for tls
// u32 offsets in text segment to functions with __attribute__((constructor)),  
// called when loaded as a shared library
S_INIT_FUNC_OFFSETS :: 0x16;  

MH_HAS_TLV_DESCRIPTORS :: 0x800000;

// numbers need byte swap!
CodeDirectory :: @struct(
    magic: u32,
    length: u32,
    version: u32,
    flags: u32,
    hashOffset: u32, // to slot 0
    identOffset: u32, // to zero terminated string
    nSpecialSlots: u32,
    nCodeSlots: u32,
    codeLimit: u32,
    hashSize: u8, // in bytes
    hashType: u8,
    platform: u8,
    pageSize: u8,  // log2(bytes)
    _reserved: u32 = 0,
    scatterOffset: u32,
    teamOffset: u32,
    _reserved2: u32 = 0,
    codeLimit64: u64,
    execSegBase: u64,
    execSegLimit: u64,
    execSegFlags: u64,
);

CSMAGIC_CODEDIRECTORY      :: 0xfade0c02;
CSMAGIC_EMBEDDED_SIGNATURE :: 0xfade0cc0;
CS_SUPPORTSEXECSEG         :: 0x20400;
CS_HASHTYPE_SHA256         :: 2;
CSSLOT_SIGNATURESLOT       :: 0x10000;
CSMAGIC_BLOBWRAPPER        :: 0xfade0b01;
CS_ADHOC :: 2;
CS_LINKER_SIGNED :: 0x20000;
CSSLOT_CODEDIRECTORY :: 0;

// numbers need byte swap!
// this goes in the linkedit section and is referenced by LoadCommand.CodeSigneture
SuperBlob :: @struct(
    magic: u32,
    total_length: u32,
    blob_count: u32,
    // followed by <blob count> of (type: u32, off: u32) pairs
    // for now i don't care about entitlements or requirements, so its just one
    type: u32,
    offset: u32,
    // followed by the actual data
);

fn for_sections(macho_bytes: []u8, $body: @Fn(type: LoadCommand, bytes_without_command_header: []u8) void) void = {
    header := macho_bytes&.pop_type(MachoHeader);
    range(0, header.commands_count.zext()) { i |
        bytes := macho_bytes;
        header := bytes&.pop_type(LoadCommandHeader);
        body(header.type, bytes.subslice(0, header.size.zext()));
        macho_bytes.ptr  = macho_bytes.ptr.offset(header.size.zext());
        macho_bytes.len -= header.size.zext();
    };
}
