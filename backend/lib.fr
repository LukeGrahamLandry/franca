#include_std("backend/ir.fr");
#include_std("backend/from_bc.fr");
#include_std("backend/builder.fr");
#include_std("backend/opt/simplify.fr");
#include_std("backend/opt/live.fr");
#include_std("backend/util.fr");
#include_std("backend/opt/copy.fr");
#include_std("backend/arm64/isel.fr");
#include_std("backend/arm64/emit.fr");
#include_std("backend/emit.fr");
#include_std("backend/opt/ssa.fr");
#include_std("backend/opt/cfg.fr");
#include_std("backend/opt/spill.fr");
#include_std("backend/opt/rega.fr");
#include_std("backend/arm64/abi.fr");
#include_std("backend/dump.fr");
#include_std("backend/arm64/target.fr");
#include_std("backend/opt/load.fr");
#include_std("backend/opt/alias.fr");
#include_std("backend/opt/inline.fr");
#include_std("backend/macho/bits.fr");
#include_std("backend/macho/emit.fr");
#include_std("backend/opt/mem.fr");

ENABLE_INTERNAL_QBE :: true;  // until i want to enable it on github actions
LINK_QBE_C :: false;
DO_INLINING :: true; // TODO: make this a runtime toggle so you can make sure you're actually testing calls

// easy-ish (?) things to try to get used to making changes. 
// TODO: if they don't do it already: 
//       - track known truthyness per block (based on jumps in dominators)
//         to remove redundant checks (like bounds checks). that use kinda relies on inlining tho.
//       - jmp on the not (xor -1) of a cmp should just flip the cmp. 
// TODO: add instructions for clz, ctz, popcnt, byteswap/bit reverse,
//          when i do firstbit, why not do whatever __builtin_ctzl does? x64 has an instruction for that. arm has reverse bits and then clz. wasm has it. 
//          the c version works with converting to that. clang -O2 doesn't treat the functions the same so maybe im missing something. 
//          have to add that as an Intrinsic to my language... which i guess means adding it to my new qbe. 
// TODO: don't bother emitting nops (when copying with emiti() anyway)? is avoiding a branch worth your blocks using extra memory
// TODO: :Explain :UnacceptablePanic :SketchyIterTargets :TodoPort :SketchPlatformRegister :nullable
//       :MakeATestThatFails places where i don't know why qbe did something and all my current tests work if you change it. 
//                           so try to make a test case that requires qbe's behaviour or remove the extra code. 
//       :HardcodeAlloc i think it can just always be an arena reset after function and then when want to keep around for inlining, 
//                      need to do a copy anyway and that can be in a seperate allocator. 
//                      so i want to bother with resetting temp between passes or just say fuck it you should ahve enough memory to compile one function all at once? 
//
// TODO: fix tests/broken/todo.fr
// TODO: the trick of having a `BitSet w[1]` so it auto decays to a pointer is cute. it's kinda a shame i can't do that. 
// TODO: fix panic on overflow block name in rega
// TODO: have a flag on module to turn off formatting name strings when we're not going to be debug printing. 
// TODO: don't use libc file structs all over the place. have my own non-painful buffered io. 
// TODO: look at the asm and make sure im not uxtb before every cmp #0 on a bool. have to fix the ir i generate.
//       do i need to be able to express that a function returns exactly 0 or 1?
// TODO: dead store elimination would make small examples generate tighter code.  
/*
(i assume you need this thing for static link)
ar rvs qbe_merged.o util.o parse.o abi.o cfg.o mem.o ssa.o alias.o load.o copy.o fold.o simpl.o live.o spill.o rega.o emit.o amd64/targ.o amd64/sysv.o amd64/isel.o amd64/emit.o arm64/targ.o arm64/abi.o arm64/isel.o arm64/emit.o rv64/targ.o rv64/abi.o rv64/isel.o rv64/emit.o
(for comptime dynamic link this works, you need main for the symbols _T/_debug)
clang -dynamiclib -o qbe_merged.dylib main.o util.o parse.o abi.o cfg.o mem.o ssa.o alias.o load.o copy.o fold.o simpl.o live.o spill.o rega.o emit.o amd64/targ.o amd64/sysv.o amd64/isel.o amd64/emit.o arm64/targ.o arm64/abi.o arm64/isel.o arm64/emit.o rv64/targ.o rv64/abi.o rv64/isel.o rv64/emit.o
*/


QbeModule :: @rec @struct(
    // These have to be pointers to the symbols Qbe externs because it uses them. 
    types: *QList(Qbe.Typ), // typ
    insb: *Array(Qbe.Ins, 1.shift_left(20)), // MaxInstructions
    curi: **Qbe.Ins,
    target: *Qbe.Target,
    debug: *Array(bool, "Z".char() + 1),
    
    // These we need to track but Qbe doesn't use internally. 
    number_of_types := 0, // ntyp. only used by parser
    debug_out: *FILE,
    namel := QbeName.ptr_from_int(0), // for reusing memory in opt/ssa.fr between functions. no information shared.
    next_tmp_id = 1,
    symbols: []SymbolBucket,
    
    // stuff for emitting code.
    segments: EnumMap(SegmentType, SegmentCursor),
    gpa: Alloc,
    fixups_locked := false,
    got_cursor  := 0,
    stubs_cursor := 0,
    goal: QbeOutputFormat,
    
    // TODO: everything that touches these needs to be rewritten eventually. 
    want_text_asm := false,
    outf := zeroed(*FILE),
);

QbeOutputFormat :: @enum(i64) (AsmText, JitOnly, MachoExe);
::enum(QbeOutputFormat);

MAX_GOT_SIZE :: 1.shift_left(13); // 15 :dontforget
SIZE_OF_STUBS :: 1.shift_left(10); // TODO: not this :explain
COMMANDS_SIZE_GUESS :: macos_page_size; // :explain

fn init_default_module(goal: QbeOutputFormat) QbeModule = 
    init(1.shift_left(23), libc_allocator, page_allocator, goal);

:: {
    @if(LINK_QBE_C) {
        //eprintln("Loading Qbe dylib!");
        c := current_compiler_context();
        handle := dlopen("./bindings/qbe/qbe_merged.dylib".sym().c_str(), DlFlag.Lazy);
        assert(!handle.lib.is_null(), "failed to open qbe dylib");
        c.add_comptime_library(@symbol "qbe", handle);
    };
};

fn init(segment_size: i64, gpa: Alloc, code_alloc: Alloc, goal: QbeOutputFormat) QbeModule = {
    m := QbeModule.zeroed();
    m.segments = EnumMap(SegmentType, SegmentCursor).zeroed();
    mem := code_alloc.alloc(u8, segment_size * 3); // TODO: ask for the alignment we need.
    make_segment :: fn(s: SegmentType, start: i64, end: i64) void => {
        m.segments&.insert(s, (mmapped = mem.slice(start, end), next = mem.index(start), start_of_writable_code = mem.index(start)));
    };
    // order matters!
    make_segment(.Code, 0, segment_size);  // :CodeIsFirst
    make_segment(.ConstantData, segment_size*1, segment_size*2);
    make_segment(.MutableData, segment_size*2, segment_size*3);
    m.gpa = gpa;
    m.goal = goal;
    m.want_text_asm = goal == .AsmText;
    m.symbols = gpa.alloc(SymbolBucket, IMask + 1);
    {   // TODO: this is kinda ass
        // :GotAtConstantDataBase
        next := m.segments&[.ConstantData].next&;
        next[] = next[].offset(MAX_GOT_SIZE); 
        next := m.segments&[.Code].next&;
        next[] = next[].offset(COMMANDS_SIZE_GUESS); 
        next[] = next[].offset(SIZE_OF_STUBS); 
    };
    
    m.debug_out = fdopen(STD_ERR, "a".sym().c_str());
    @if(LINK_QBE_C, {
        m.types  = get_qbe_dylib_variable(QList(Qbe.Typ), "typ");
        m.insb   = get_qbe_dylib_variable(Array(Qbe.Ins, 1.shift_left(20)), "insb");
        m.curi   = get_qbe_dylib_variable(*Qbe.Ins, "curi");
        m.debug  = get_qbe_dylib_variable(Array(bool, "Z".char() + 1), "debug");
        m.target = get_qbe_dylib_variable(Qbe.Target, "T");
        // note: not doing this. using fill_target_info instead. 
        // m.target[] = get_qbe_dylib_variable(Qbe.Target, "T_arm64_apple")[]; 
    }, {
        m.types  = gpa.box(@type m.types[]);
        
        //m.insb   = gpa.box(@type m.insb[]); // :FUCKED i overflow the size becuase i figured 65k bytes aught to be enough for everyone. -- Oct 8  
        mem := gpa.alloc(Qbe.Ins, Qbe.MaxInstructions);
        ::?*Array(Qbe.Ins, Qbe.MaxInstructions);
        m.insb = mem.as_array().unwrap();
        
        m.curi   = gpa.box(@type m.curi[]); // TODO: megadumb if its the page allocaotr
        m.debug  = gpa.box_zeroed(@type m.debug[]);
        m.target = gpa.box(@type m.target[]);
    });
    //m.debug[Qbe.DebugKey.Memory.raw()] = true;
    //m.debug[Qbe.DebugKey.RegAlloc.raw()] = true;
    //m.debug[Qbe.DebugKey.Parsing.raw()] = true;
    //m.debug[Qbe.DebugKey.InstSelect.raw()] = true;
    m.target.fill_target_info(.arm64_apple);
    m.types[] = new(0, Qbe.Pool.PHeap); // TODO: check the magic in QbeBuilder.init to make sure you remember to do this. 
    m.curi[] = m.insb.index_unchecked(Qbe.MaxInstructions);
    m
}

fn fill_target_info(t: *Qbe.Target, target: Qbe.TargetAbi) void = {
    @assert_eq(target, .arm64_apple, "TODO: support other abis");
    t.fill_target_arm(true);
}

fn get_qbe_dylib_variable($T: Type, $name: Str) *T #generic = {
    lib := dlopen("./bindings/qbe/qbe_merged.dylib".sym().c_str(), DlFlag.Lazy);
    assert(!lib.lib.is_null(), "failed to open qbe dylib");
    ref := dlsym(lib, name.sym().c_str());
    if(ref.is_null(), => @panic("failed to get '%'", name));
    T.ptr_from_raw(ref)
}

// TODO: this changes for aot!! remove this! garbage.
aaaa_out :: @static(TmpFile);

run_qbe_passes :: fn(fnn: *Qbe.Fn) void = {
    mark := __temp_alloc.mark();
    m := fnn.globals;
    ::ptr_utils(QbeModule);
    @debug_assert(!m.is_null(), "function module not set");
    filluse :: fill_use;
    
    if fnn.globals.debug["P".char()] {
        out := fnn.globals.debug_out;
        write(out, "\n> After parsing:\n");
        printfn(fnn, out);
    };
    
	// TODO: make sure nothing requires the extra call to fillpreds and then disable this in release mode. 
	//       if the frontend generates valid code it will always type check. 
	//       but always have to option to run this to make peoples lives easier! (ie if a user wants to use #bc)
	//       same for ssacheck
    
    @if(LINK_QBE_C) {
        typecheck(fnn); // debug. but it calls clsmerge which does mutate sometimes so maybe not.
    };
    {m.target.abi0}(fnn);
    fillrpo(fnn);
    fillpreds(fnn);
    filluse(fnn);
    promote(fnn); // optional
    filluse(fnn);
    //ssa(fnn);
    convert_to_ssa(fnn);
    filluse(fnn);
    ssacheck(fnn); // debug
    fillalias(fnn); // !
    loadopt(fnn); // optional
    filluse(fnn);
    fillalias(fnn); // for coalesce
    coalesce(fnn); // optional
    filluse(fnn); 
    filldom(fnn); 
    ssacheck(fnn); // debug
    
    if DO_INLINING { 
        inlcalls(fnn);
        filluse(fnn); 
    };
    
    copy_elimination(fnn); // optional
    //copy(fnn);
    filluse(fnn);
    @if(LINK_QBE_C) {
        fold(fnn); // optional
    };
    
    if DO_INLINING { 
        inlsave(fnn);
    };
    {m.target.abi1}(fnn);
    simplify(fnn);
    //simpl(fnn);
    fillpreds(fnn);
    filluse(fnn);
    {m.target.isel}(fnn);
    fillrpo(fnn);
    fill_liveness(fnn);
    //filllive(fnn);
    fillloop(fnn); // optional
    fillcost(fnn); // optional
    spill(fnn);
    //fn rega(f: *Qbe.Fn) void #import("qbe");
    //rega(fnn);
    register_allocation(fnn);
    fillrpo(fnn);
    simplify_jump_chains(fnn); // optional
    fillpreds(fnn);
    fillrpo(fnn);
    
    assert_eq(Qbe.Blk.int_from_ptr(fnn.rpo[]), Qbe.Blk.int_from_ptr(fnn.start));
    ::ptr_utils(*Qbe.Blk);
    // We have a linear array but want a linked list for some reason. 
    // :LinkIsNowRpo
    range(0, fnn.nblk.zext() - 1) { n |
        fnn.rpo.offset(n)[].link = fnn.rpo.offset(n + 1)[];
    };
    fnn.rpo.offset(fnn.nblk.zext() - 1)[].link = Qbe.Blk.ptr_from_int(0);
    
    if true {
        m.emit_func_arm64(fnn, m[].outf);
    } else {
        {m.target.emitfn}(fnn, m[].outf);
    };
    __temp_alloc.reset_retaining_capacity(mark);
};
::[]u64;

// all computers know these days is fill memory and branch
