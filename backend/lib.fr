#include_std("backend/ir.fr");
#include_std("backend/from_bc.fr");
#include_std("backend/builder.fr");
#include_std("backend/opt/simplify.fr");
#include_std("backend/opt/live.fr");
#include_std("backend/util.fr");
#include_std("backend/opt/copy.fr");
#include_std("backend/arm64/isel.fr");
#include_std("backend/arm64/emit.fr");
#include_std("backend/emit.fr");
#include_std("backend/opt/ssa.fr");
#include_std("backend/opt/cfg.fr");
#include_std("backend/opt/spill.fr");
#include_std("backend/opt/rega.fr");
#include_std("backend/arm64/abi.fr");
#include_std("backend/meta/dump.fr");
#include_std("backend/arm64/target.fr");
#include_std("backend/opt/load.fr");
#include_std("backend/opt/alias.fr");
#include_std("backend/opt/inline.fr");
#include_std("backend/macho/bits.fr");
#include_std("backend/macho/emit.fr");
#include_std("backend/opt/mem.fr");
#include_std("backend/opt/minimal.fr");
#include_std("backend/opt/fold.fr");
#include_std("backend/amd64/target.fr");
#include_std("backend/amd64/emit.fr");
#include_std("backend/amd64/sysv.fr");
#include_std("backend/meta/parse.fr");
#include_std("backend/meta/match.fr");
#include_std("backend/abi.fr");
#include_std("backend/meta/template.fr");
#include_std("backend/amd64/isel.fr");

ENABLE_INTERNAL_QBE :: true;  // until i want to enable it on github actions
DO_INLINING :: true; // TODO: make this a runtime toggle so you can make sure you're actually testing calls

// easy-ish (?) things to try to get used to making changes. 
// TODO: if they don't do it already: 
//       - track known truthyness per block (based on jumps in dominators)
//         to remove redundant checks (like bounds checks). that use kinda relies on inlining tho.
//       - jmp on the not (xor -1) of a cmp should just flip the cmp. 
// TODO: add instructions for clz, ctz, popcnt, byteswap/bit reverse,
//          when i do firstbit, why not do whatever __builtin_ctzl does? x64 has an instruction for that. arm has reverse bits and then clz. wasm has it. 
//          the c version works with converting to that. clang -O2 doesn't treat the functions the same so maybe im missing something. 
//          have to add that as an Intrinsic to my language... which i guess means adding it to my new qbe. 
// TODO: don't bother emitting nops (when copying with emiti() anyway)? is avoiding a branch worth your blocks using extra memory
// TODO: :Explain :UnacceptablePanic :SketchyIterTargets :TodoPort :SketchPlatformRegister :nullable
//       :MakeATestThatFails places where i don't know why qbe did something and all my current tests work if you change it. 
//                           so try to make a test case that requires qbe's behaviour or remove the extra code. 
//       :HardcodeAlloc 
//       :force_dep_on_memmove_hack
// TODO: fix tests/broken/todo.fr
// TODO: the trick of having a `BitSet w[1]` so it auto decays to a pointer is cute. it's kinda a shame i can't do that. 
// TODO: fix panic on overflow block name in rega
// TODO: have a flag on module to turn off formatting name strings when we're not going to be debug printing. 
// TODO: don't use libc file structs all over the place. have my own non-painful buffered io. 
// TODO: look at the asm and make sure im not uxtb before every cmp #0 on a bool. have to fix the ir i generate.
//       do i need to be able to express that a function returns exactly 0 or 1?
//       once i expose w ops to the language i can just generate those instead of l for working with bools and then it should be fine?
// TODO: dead store elimination would make small examples generate tighter code. 
// TODO: don't do extra copies of arg/ret when just passing through to another call.
// TODO: arm isel can use ldp/stp for consecutive loads/stores and simplify:blit can do it in pairs to make that happen. 
//       i do a lot of copies so that might be an easy win for code size at least. 
// TODO: stop using c strings all over the place. 
// TODO: ir test that uses opaque types

DONT_FORGET_OTHER_TLS_ARCH :: true;

/*
(i assume you need this thing for static link)
ar rvs qbe_merged.o util.o parse.o abi.o cfg.o mem.o ssa.o alias.o load.o copy.o fold.o simpl.o live.o spill.o rega.o emit.o amd64/targ.o amd64/sysv.o amd64/isel.o amd64/emit.o arm64/targ.o arm64/abi.o arm64/isel.o arm64/emit.o rv64/targ.o rv64/abi.o rv64/isel.o rv64/emit.o
(for comptime dynamic link this works, you need main for the symbols _T/_debug)
clang -dynamiclib -o qbe_merged.dylib inline.o main.o util.o parse.o abi.o cfg.o mem.o ssa.o alias.o load.o copy.o fold.o simpl.o live.o spill.o rega.o emit.o amd64/targ.o amd64/sysv.o amd64/isel.o amd64/emit.o arm64/targ.o arm64/abi.o arm64/isel.o arm64/emit.o rv64/targ.o rv64/abi.o rv64/isel.o rv64/emit.o
*/

QbeModule :: @rec @struct(
    // These have to be pointers to the symbols Qbe externs because it uses them. 
    types: *QList(Qbe.Typ), // typ
    insb: *Array(Qbe.Ins, 1.shift_left(20)), // MaxInstructions
    curi: **Qbe.Ins,
    target: *Qbe.Target,
    debug: *Array(bool, "Z".char() + 1),
    
    // These we need to track but Qbe doesn't use internally. 
    number_of_types := 0, // ntyp. only used by parser
    debug_out: *FILE,
    // :ThreadSafety
    namel := QbeName.ptr_from_int(0), // TODO: this is just lazy, should manually pass it around now that im using temp() and resetting between functions. 
    _ := 0,
    symbols: []SymbolBucket,
    
    // stuff for emitting code.
    segments: EnumMap(SegmentType, SegmentCursor),
    gpa: Alloc,
    fixups_locked := false,
    goal: QbeTargetEnv,
    start_of_writable_code: *u8,
    // these are special sections that live inside the main segments. 
    got: SegmentCursor,
    commands: SegmentCursor,
    stubs: SegmentCursor,
    tls_vars: SegmentCursor,
    tls_init: SegmentCursor,
    
    exports: List(u32),
    imports: List(u32),
    local_needs_reloc: List(u32),
    inlinable_but_referenced_later: List(u32),
    
    // TODO: everything that touches these needs to be rewritten eventually. 
    want_text_asm := false,
    outf := zeroed(*FILE),
    
    forever: ArenaAlloc,
    symbol_memmove: u32,
);

QbeTargetEnv :: @struct(
    arch: Arch,
    // - should we use apple's abi changes?
    // - should we emit Mach-O or ELF? (can't do ELF yet)
    os: Os,
    type: QbeOutputPurpose,
);

QbeOutputPurpose :: @enum(i64) (AsmText, JitOnly, Exe, Relocatable, Dynamic);
::enum(QbeOutputPurpose);

fn making_macho(m: *QbeModule) bool = 
    m.goal.os == .macos && (m.goal.type == .Exe || m.goal.type == .Relocatable || m.goal.type == .Dynamic);

MAX_GOT_SIZE :: 1.shift_left(15);
SIZE_OF_STUBS :: 1.shift_left(10); // TODO: not this :explain
COMMANDS_SIZE_GUESS :: macos_page_size; // :explain
MAX_TLS_VARS_SIZE   :: macos_page_size;
MAX_TLS_INIT_SIZE   :: macos_page_size;

fn init_default_module(goal: QbeTargetEnv) QbeModule = 
    init(1.shift_left(25), libc_allocator, page_allocator, goal);

:: {
    @if(LINK_QBE_C) {
        //eprintln("Loading Qbe dylib!");
        c := current_compiler_context();
        handle := dlopen("./bindings/qbe/qbe_merged.dylib".sym().c_str(), DlFlag.Lazy);
        assert(!handle.lib.is_null(), "failed to open qbe dylib");
        c.add_comptime_library(@symbol "qbe", handle);
    };
};

// the allocators need to not be temp() because we reset temp()
fn init(segment_size: i64, gpa: Alloc, code_alloc: Alloc, goal: QbeTargetEnv) QbeModule = {
    gpa = todo_allocator;
    m := QbeModule.zeroed();
    m.forever = init(gpa, size_of(Qbe.Ins) * 1.shift_left(20) + size_of(SymbolBucket) * IMask + 1.shift_left(10));
    forever := m.forever&.borrow();
    m.segments = EnumMap(SegmentType, SegmentCursor).zeroed();
    mem := code_alloc.alloc(u8, segment_size * 3); // TODO: ask for the alignment we need.
    m.start_of_writable_code = mem.ptr;
    make_segment :: fn(s: SegmentType, start: i64, end: i64) void => {
        m.segments&.insert(s, (mmapped = mem.slice(start, end), next = mem.index(start)));
    };
    // order matters!
    make_segment(.Code, 0, segment_size);  // :CodeIsFirst
    make_segment(.ConstantData, segment_size*1, segment_size*2);
    make_segment(.MutableData, segment_size*2, segment_size*3);
    m.gpa = gpa;
    m.goal = goal;
    m.exports = list(gpa);
    m.imports = list(gpa);
    m.local_needs_reloc = list(gpa);
    m.inlinable_but_referenced_later = list(gpa);
    m.want_text_asm = goal.type == .AsmText;
    m.symbols = forever.alloc_zeroed(SymbolBucket, IMask + 1);
    {   // TODO: this is kinda ass
        // :GotAtConstantDataBase
        next := m.segments&[.ConstantData].next&;
        m.got = (mmapped = (ptr = next[], len = MAX_GOT_SIZE), next = next[]);
        next[] = next[].offset(MAX_GOT_SIZE); 
        
        next := m.segments&[.Code].next&;
        m.commands = (mmapped = (ptr = next[], len = COMMANDS_SIZE_GUESS), next = next[]);
        next[] = next[].offset(COMMANDS_SIZE_GUESS); 
        m.stubs = (mmapped = (ptr = next[], len = SIZE_OF_STUBS), next = next[]);
        next[] = next[].offset(SIZE_OF_STUBS); 
       
        next := m.segments&[.MutableData].next&;
        m.tls_vars = (mmapped = (ptr = next[], len = MAX_TLS_VARS_SIZE), next = next[]);
        next[] = next[].offset(MAX_TLS_VARS_SIZE); 
        m.tls_init = (mmapped = (ptr = next[], len = MAX_TLS_INIT_SIZE), next = next[]);
        next[] = next[].offset(MAX_TLS_INIT_SIZE); 
    };
    
    m.debug_out = fdopen(STD_ERR, "a".sym().c_str());
    assert(m.goal.os == .macos, "TODO: flip the switch on linux abi");
    @if(LINK_QBE_C, {
        // TODO: this is very very wrong because i represent union cases differently! but its going away soon...
        m.types  = get_qbe_dylib_variable(QList(Qbe.Typ), "typ"); 
        m.insb   = get_qbe_dylib_variable(Array(Qbe.Ins, 1.shift_left(20)), "insb");
        m.curi   = get_qbe_dylib_variable(*Qbe.Ins, "curi");
        m.debug  = get_qbe_dylib_variable(Array(bool, "Z".char() + 1), "debug");
        m.target = get_qbe_dylib_variable(Qbe.Target, "T");
        if m.goal.arch == .x86_64 {
            m.target[] = get_qbe_dylib_variable(Qbe.Target, "T_amd64_apple")[]; 
        }; // else, not doing this. using fill_target_info instead. 
    }, {
        m.types  = forever.box(@type m.types[]);
        
        //m.insb   = forever.box(@type m.insb[]); // :FUCKED i overflow the size becuase i figured 65k bytes aught to be enough for everyone. -- Oct 8  
        mem := forever.alloc(Qbe.Ins, Qbe.MaxInstructions);
        ::?*Array(Qbe.Ins, Qbe.MaxInstructions);
        m.insb = mem.as_array().unwrap();
        
        m.curi   = forever.box(@type m.curi[]); // TODO: megadumb if its the page allocaotr
        m.debug  = forever.box_zeroed(@type m.debug[]);
        m.target = forever.box(@type m.target[]);
        
    });
    //m.debug[Qbe.DebugKey.Memory.raw()] = true;
    //m.debug[Qbe.DebugKey.RegAlloc.raw()] = true;
    //m.debug[Qbe.DebugKey.Parsing.raw()] = true;
    //m.debug[Qbe.DebugKey.Abi.raw()] = true;
    //m.debug[Qbe.DebugKey.InstSelect.raw()] = true;
    // TODO: ask for linux abi
    if m.goal.arch == .aarch64 {
        m.target.fill_target_info(.arm64_apple);
    } else {
        prev := m.target.emitfn;
        m.target.fill_target_info(.amd64_apple);
        if m.goal.type == .AsmText {
            m.target.emitfn = prev;
        };
    };
    m.types[] = new_long_life(0); // TODO: check the magic in QbeBuilder.init to make sure you remember to do this. 
    m.curi[] = m.insb.index_unchecked(Qbe.MaxInstructions);
    m.symbol_memmove = m&.intern("memmove");
    m
}

fn drop(m: *QbeModule, slowly_free_from_gpa: bool) void = {
    fst := m.segments.data&[0].mmapped;
    page_allocator.dealloc(u8, (ptr = fst.ptr, len = fst.len * m.segments.data&.len()));
    if slowly_free_from_gpa {
        for_symbols m { _, s |
            s.fixups&.drop(m.gpa);
        };
        each m.symbols { bucket | 
            if bucket.n != 0 {
                bucket.data.free();
            };
        };
    };
    m.forever&.deinit();
    m[] = zeroed(@type m[]);  // just to make sure you crash if you try to use it again. 
}

fn fill_target_info(t: *Qbe.Target, target: Qbe.TargetAbi) void = {
    apple := @is(target, .arm64_apple, .amd64_apple);
    arm := @is(target, .arm64_apple, .arm64);
    if arm {
        t.fill_target_arm(apple);
    } else {
        t.fill_target_amd(apple);
    }
}

fn get_qbe_dylib_variable($T: Type, $name: Str) *T #generic = {
    lib := dlopen("./bindings/qbe/qbe_merged.dylib".sym().c_str(), DlFlag.Lazy);
    assert(!lib.lib.is_null(), "failed to open qbe dylib");
    ref := dlsym(lib, name.sym().c_str());
    if(ref.is_null(), => @panic("failed to get '%'", name));
    T.ptr_from_raw(ref)
}

::ptr_utils(*Qbe.Blk);

run_qbe_passes :: fn(fnn: *Qbe.Fn) void = {
    mark := mark_temporary_storage();
    m := fnn.globals;
    ::ptr_utils(QbeModule);
    @debug_assert(!m.is_null(), "function module not set");
    
    if fnn.globals.debug["P".char()] {
        out := fnn.globals.debug_out;
        write(out, "\n> After parsing:\n");
        printfn(fnn, out);
    };
    
	// TODO: make sure nothing requires the extra call to fillpreds and then disable this in release mode. 
	//       if the frontend generates valid code it will always type check. 
	//       but always have to option to run this to make peoples lives easier! (ie if a user wants to use #bc)
	//       same for ssacheck
    
    @if(LINK_QBE_C) {
        // TODO: port. calls its own version of fillpreds but i didn't convert it to use QList
        //typecheck(fnn); // debug. but it calls clsmerge which does mutate sometimes so maybe not.
    };
    {m.target.abi0}(fnn);
    
    if DO_INLINING { 
        inlcalls(fnn);
    };
    
    fillrpo(fnn);
    fillpreds(fnn);
    fill_use(fnn);
    promote(fnn); // optional
    fill_use(fnn);
    convert_to_ssa(fnn);
    fill_use(fnn);
    ssacheck(fnn); // debug
    fillalias(fnn); // !
    loadopt(fnn); // optional
    fill_use(fnn);
    fillalias(fnn); // for coalesce
    coalesce(fnn); // optional
    fill_use(fnn); 
    filldom(fnn);  // TODO: do we need this here? i dont think anything breaks it after convert_to_ssa does it
    ssacheck(fnn); // debug
    
    copy_elimination(fnn); // optional
    fill_use(fnn);
    fold_constants(fnn);
    if DO_INLINING { 
        if inlsave(fnn) {
            // all uses might be inlined so we suspend processing until we know you took a function pointer later. 
            if m.debug["G".char()] {
                @fmt_write(m.debug_out, "\nSuspending inlinable function: %\n", fnn.name());
            };
            return();
        };
    };
    finish_qbe_passes(fnn);
    reset_temporary_storage(mark);
};
::[]u64;

fn finish_qbe_passes(fnn: *Qbe.Fn) void = {
    if fnn.mem.first.is_null() {
        fnn.mem = new(0);
    };
    m := fnn.globals;
    {m.target.abi1}(fnn);
    simplify(fnn);
    fillpreds(fnn);
    fill_use(fnn); 
    
    // arm isel inserts RMem (with different meaning from x64) for mul/store and RInt for load.
    {m.target.isel}(fnn);
    
    fillrpo(fnn);
    fill_liveness(fnn);
    fillloop(fnn); // optional
    fillcost(fnn); // optional
    spill(fnn);
    
    register_allocation(fnn);
    fillrpo(fnn);
    simplify_jump_chains(fnn); // optional
    fillpreds(fnn);
    fillrpo(fnn);
    
    // :LinkIsNowRpo
    set_link_from_rpo(fnn);
    
    {m.target.emitfn}(m, fnn, m[].outf);
}

/*
// TODO: finish port
fn typecheck(f: *Qbe.Fn) void = {
    fillpreds(f);
    pb := init_bitset(f.nblk.zext());
    ppb := init_bitset(f.nblk.zext());
    for_blocks f { b | 
        for_phi b { p |
            fn.tmp[p.to.val].cls = p.cls;
        };
        for (i = b.ins; i < &b.ins[b.nins]; i++)
        for_insts_forward b { i | 
            if rtype(i.to) == .RTmp {
                t = &fn.tmp[i.to.val];
                if (clsmerge(&t.cls, i.cls))
                err("temporary %%%s is assigned with"
                    " multiple types",
                    t.name);
            };
        };
    };
    for_blocks f { b |
        bszero(pb);
        for (n = 0; n < b.npred; n++){
            bsset(pb, b.pred[n].id);
        };
        for_phi b { p |
            bszero(ppb);
            t = f.get_temporary(p.to);
            for (n = 0; n < p.narg; n++) {
                k = t.cls;
                if (bshas(ppb, p.blk[n].id))
                err("multiple entries for @%s in phi %%%s", p.blk[n].name, t.name);
                if (!usecheck(p.arg[n], k, fn))
                err("invalid type (%d) for operand %%%s in phi %%%s", k,
                    fn.tmp[p.arg[n].val].name, t.name);
                bsset(ppb, p.blk[n].id);
            }
            if (!bsequal(pb, ppb)) {
                err("predecessors not matched in phi %%%s", t.name);
            }
        }
        for_insts_forward b { i 
            for (n = 0; n < 2; n++) {
                k = optab[i.op].argcls[n][i.cls];
                r = i.arg[n];
                t = &fn.tmp[r.val];
                if (k == Ke)
                err("invalid instruction type %d in %s", i.cls, optab[i.op].name);
                if (rtype(r) == RType)
                continue;
                if (rtype(r) != -1 && k == Kx)
                err("no %s operand expected in %s", n == 1 ? "second" : "first",
                    optab[i.op].name);
                if (rtype(r) == -1 && k != Kx)
                err("missing %s operand in %s", n == 1 ? "second" : "first",
                    optab[i.op].name);
                if (!usecheck(r, k, fn))
                err("invalid type for %s operand %%%s in %s (in %s)",
                    n == 1 ? "second" : "first", t.name, optab[i.op].name,
                    fn.name);
            }
        };
    
        r := b.jmp.arg;
        if (isret(b.jmp.type)) {
        if (b.jmp.type == Jretc)
            k = Kl;
        else if (b.jmp.type >= Jretsb)
            k = Kw;
        else
            k = b.jmp.type - Jretw;
        if (!usecheck(r, k, fn))
            goto JErr;
        }
        if (b.jmp.type == Jjnz && !usecheck(r, Kw, fn))
        JErr:
        err("invalid type for jump argument %%%s in block @%s",
            fn.tmp[r.val].name, b.name);
        if (b.s1 && b.s1.jmp.type == Jxxx)
        err("block @%s is used undefined", b.s1.name);
        if (b.s2 && b.s2.jmp.type == Jxxx)
        err("block @%s is used undefined", b.s2.name);
        };
    }
}
*/
// all computers know these days is fill memory and branch
