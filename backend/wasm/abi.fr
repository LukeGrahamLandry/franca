//! https://github.com/WebAssembly/tool-conventions/blob/main/BasicCABI.md
//! - non-scalar aggragates are always passed by pointer 
//! - aggragate return pointer is prepended to arguments
//! - varargs pointer is appended to arguments
//! - need an entry in the type table for the function's signeture. 
//! - hidden env parameter is passed in a global (which is good enough until i want to support some extension that adds threads)

// TODO: untangle Kw vs Kl: vararg, indirect return

fn wasm_abi(f: *Qbe.Fn) void = {
    m := f.globals;
    
    // params come in as locals, not on the stack, which seems odd, 
    // but to be fair, the first thing i would do here is save them in locals anyway so i can't complain. 
    // we leave par instructions because then we can look at them later to know the function signeture. 
    // emit.fr just skips them and creates thier locals directly. 
    for_pars f { i |
        @match(i.op()) {
            fn pare() => {
                i[] = make_ins(.global_get, .Kl, i.to, f.symcon(m.wasm_symbol_env_parameter), QbeNull);
            }
            fn parc() => {
                // TODO: we're supposed to insert a copy here
                // TODO: check if they said its a type but really there's only one scalar so the ir expects a pointer but we got a value. 
                i.set_op(.par);
                i.arg&[0] = QbeNull;
            }
            @default => ();
        };
    };
    
    // TODO: check if they said its a type but really there's only one scalar 
    retr := @if(f.retty != QbeNull, f.newtmp("abi", .Kl), QbeNull);
    ret_cls := Qbe.Cls.Ke;
    
    for_blocks f { b |
        changed := false; 
        f.reset_scratch();
        
        if is_ret(b.jmp.type) && b.jmp.arg != QbeNull {
            @debug_assert(b.jmp.type != .ret0, "J.ret0 had arg");
            // TODO: check if they said its a type but really there's only one scalar 
            is_scalar := b.jmp.type != .retc;
            changed = true;
            if is_scalar {
                k := b.jmp.type.cls();
                ret_cls = k;
                if need_trunc(f, k, b.jmp.arg) {
                    f.emit(.truncl, k, QbeNull, QbeNull, QbeNull);
                    k = .Kl;
                };
                f.emit(.push, k, QbeNull, b.jmp.arg, QbeNull);
            } else {
                @debug_assert(retr != QbeNull, "missing indirect return pointer");
                size := f.get_type(f.retty)[].header.size; 
                f.emit(.blit1, .Kw, QbeNull, INT(zext size), QbeNull);
                f.emit(.blit0, .Kw, QbeNull, b.jmp.arg, retr);  // src, dest
            };
            b.jmp.type = .ret0;
            b.jmp.arg = QbeNull;
        };
        
        va_base, no_more_va_par := (QbeNull, false);
        for_insts_rev b { i | 
            continue :: local_return;
            
            if i[].op() == .call {
                f.move_end_of_block_to_scratch(b, i[], changed&);
                i[] = sel_call(f, b, i[]);
                continue();
            };
            i := i[];
            
            @match(i.op()) {
                fn vastart() => {
                    if va_base == QbeNull {
                        va_base = f.newtmp("va", .Kl);
                    };
                    f.move_end_of_block_to_scratch(b, i, changed&);
                    
                    // unfortunatly we're doing this after we're in ssa form so need to use memory for mutability. 
                    f.emit(.storel, .Kw, QbeNull, va_base, i.arg&[0]);
                    continue();
                }
                fn vaarg() => {
                    f.move_end_of_block_to_scratch(b, i, changed&);
                    // move the pointer up by one slot and load the new value
                    size := if(i.cls().is_wide(), => 8, => 4);
                    @emit_instructions((f = f), (i.arg&[0], i.to, i.cls(), f.getcon(size-1), f.getcon(bit_not(size-1)), f.getcon(size)), """
                    @start
                        %old =l load %0
                        %raw =l add %old, %3  # align
                        %cur =l and %raw, %4  # ^
                        %new =l add %cur, %5
                        storel %new, %0
                        %1   =2 load %cur
                    """);
                    continue();
                }
                fn par() =>{
                    if va_base != QbeNull {
                        @debug_assert(!no_more_va_par);
                        f.move_end_of_block_to_scratch(b, i, changed&);
                        f.emit(.par, .Kl, va_base, QbeNull, QbeNull);
                        va_base = QbeNull;
                    };
                    no_more_va_par = true;
                }
                @default => ();
            };
            
            // TODO: we need to know argument types for indirect_call but don't want to rely on consecutive pushes holding cls
            
            if changed {
                i = f.emit(i[]);
            };
        };
        
        if retr != QbeNull && f.start.identical(b) {
            // prepend aggragate return pointer to our parameters
            f.move_end_of_block_to_scratch(b, b.ins.ptr, changed&);
            f.emit(.par, .Kl, retr, QbeNull, QbeNull);
        };
        
        if changed {
            f.copy_instructions_from_scratch(b); 
        };
    };
    
    f.slot = f.slot.align_to(4);
    
    use_symbol(m, f.lnk.id) { s |
        s.wasm_type_index = pack_wasm_result_type m { $yield_arg #duplicated |
            for_pars f { i |
                yield_arg(i.cls());
            };
        } and { $yield_ret |
            if(ret_cls != .Ke, => yield_ret(ret_cls));
        };
    }; 
    
    when_debug_printfn(f, .Abi, "\n## After ABI lowering:\n");
}

sel_call :: fn(f: *Qbe.Fn, b: *Qbe.Blk, i: *Qbe.Ins) *Qbe.Ins = {
    arg0 := b.find_first_arg(i);
    m    := f.globals;
    
    type := type_index_for_call(f, b, i, arg0);
    if f.get_sym(i.arg&[0]) { id, off | 
        use_symbol(m, id) { s |
            @debug_assert_eq(off, 0, "tried to call offset from symbol ($% + %)\nwhich is probably a mistake for any target but certainly not possible on wasm.", s.name, off);
            if s.kind != .Local {
                // We allow imports without type declarations, but wasm's import table does not. 
                // So if we haven't seen this symbol yet, it might be an import, so we need to save the type info from this call. 
                s.wasm_type_index = type;
                // TODO: if we deduplicated types we could do a typecheck here to make sure we don't generate an invalid module. 
            };
        }; 
    };
    
    // TODO: check if they said its a type but really there's only one scalar and it should be converted to a load. 
    is_scalar := i.arg&[1] == QbeNull;
    pending_indirect_return := QbeNull;
    if is_scalar {
        if i.to != QbeNull {
            f.emit(.pop, i.cls(), i.to, QbeNull, QbeNull);
        };
    } else {
        pending_indirect_return = i.to;
    };
    i.to = QbeNull;
    call_arg1 := i.arg&[1];
    i.arg&[1] = CALL(type.intcast());
    f.emit(i[]);
    
    args := between(arg0, i);
    
    // varargs are passed by writing them to memory and appending that pointer as an argument. 
    is_va := false;
    va_slot := QbeNull;
    enumerate args { j, i |
        if is_va {
            // write the argument to the next stack slot
            size: i32 = if(i.cls().is_wide(), => 8, => 4);
            f.slot = f.slot.align_to(size);
            f.emit(i.cls().store_op(), .Kw, QbeNull, i.arg&[0], SLOT(f.slot));
            f.slot += size;
        };
        if i.op() == .argv {
            @debug_assert(!is_va);
            // TODO: why does this need to be 16 not 8? am i losing my mind? 8 fails abi1.ssa
            //       im afraid it's just luck that this works
            f.slot = f.slot.align_to(16);  
            va_slot = SLOT(f.slot);
            is_va = true;
            args = args.slice(0, j);  // remove the rest of the args
            f.varcall = true;
        };
    };
    if is_va {
        f.emit(.push, .Kl, QbeNull, va_slot, QbeNull);
    };
    
    each_rev args { i |
        @match(i.op()) {
            // TODO: check if they said its a type but really there's only one scalar and it should be converted to a load. 
            // it's a pointer to a struct. just pass the pointer. 
            fn argc() => {
                f.emit(.push, i.cls(), QbeNull, i.arg&[1], QbeNull);
            }
            fn arg()  => {
                f.emit(.push, i.cls(), QbeNull, i.arg&[0], QbeNull);
            }
            fn arge() => {
                f.emit(.global_set, .Kl, QbeNull, f.symcon(m.wasm_symbol_env_parameter), i.arg&[0]);
            }
            @default => unreachable();
        };
    };
    
    if pending_indirect_return != QbeNull {
        t := m.get_type(call_arg1.val());
        f.slot = align_to(f.slot, 1.shift_left(t.header.align_log2.zext()));
        f.emit(.push, .Kw, QbeNull, SLOT(f.slot), QbeNull);
        f.emit(.copy, i.cls(), pending_indirect_return, SLOT(f.slot), QbeNull);
        f.slot += t.header.size.bitcast();
    };
    
    arg0
};

fn type_index_for_call(f: *Qbe.Fn, b: *Qbe.Blk, call: *Qbe.Ins, arg0: *Qbe.Ins) i32 = {
    void := call.to == QbeNull;
    scalar := !void && is_scalar(f, call.arg&[1]);
    pack_wasm_result_type f.globals { $yield_arg #duplicated |
        if !void && !scalar {
            yield_arg(.Kw);
        };
        va := false;
        for(arg0, call) { i |
            if i.op() == .argv {
                va = true;
                yield_arg(.Kl);
            };
            if !va && i.op() != .arge {
                yield_arg(i.cls());
            };
        };
    } and { $yield_ret |
        if(scalar, => yield_ret(call.cls())); // TODO: cls is wrong once we do single field structs correctly
    }
}

fn is_scalar(f: *Qbe.Fn, maybe_type: Qbe.Ref) bool = {
    if(rtype(maybe_type) != .RType, => return(true));
    // TODO: you need to do this to implement the abi properly but then need to deal with converting to a pointer when expected by the ir. 
    // is_scalar(f, maybe_type.val())
    false
}

fn is_scalar(f: *Qbe.Fn, type_index: i64) bool = {
    m := f.globals;
    type := m.get_type(type_index);
    if(type.is_union, => return(false));
    fst := type.fields[0]&;
    @debug_assert(fst.type != .FEnd, "You should not have 0-sized types in the IR. Lower them in the frontend instead please.");
    if(type.fields[1].type != .FEnd, => return(false));
    fst.type != .FType || is_scalar(f, fst.len.intcast()) 
}

#use("@/backend/lib.fr");
