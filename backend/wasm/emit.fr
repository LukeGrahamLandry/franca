//! - Wasm is a bit annoying because it's designed to be compact and fast to load, not to be output in one pass. 
//!   For example, you can't know the index of any functions until you know how many imports there are. 
//! - It requires structured control flow. 

EmitWasmFn :: @struct(
    m: *QbeModule,
    f: *Qbe.Fn,
    locals: []i32,
    a: List(u8),
    block_stack: List(*Qbe.Blk),
);

WASM_INDEX_PADDING :: 3;

fn emit_func_wasm32(f: *Qbe.Fn) void = {
    code := f.globals.segments&[.Code]&;
    e: EmitWasmFn = (
        f = f,
        m = f.globals,
        locals = temp().alloc(i32, f.ntmp.zext()),
        a = (maybe_uninit = (ptr = code.next, len = code.cap() - code.len()), len = 0, gpa = panicking_allocator),
        block_stack = list(temp()), 
    ); e := e&;
   
    printfn(f, f.globals.debug_out);
    use_symbol(e.m, f.lnk.id) { s |
        s.got_lookup_offset = e.m.local_needs_reloc.len;
    };
    e.m.local_needs_reloc&.push(f.lnk.id);
    
    e.pad(WASM_INDEX_PADDING); // reserve space for length of code. 
    
    start_locals := e.a.len;
    pack_locals(e);
    end_locals := e.a.len;
    
    emit_block(e, e.f.start);
    e.op(.Unreachable);  // keep the verifier happy (wihtout this the implicit return needs to typecheck)
    e.op(.End);
    code.next = code.next.offset(e.a.len());
    
    // TODO: this is so convoluted
    size_of_func := e.a.len;
    e.a.len = 0;
    inner_size := size_of_func - uleb_size(size_of_func);
    @debug_assert_eq(uleb_size(size_of_func), uleb_size(inner_size), "TODO: deal with variable length numbers here");
    leb128_unsigned(e.a&, size_of_func - uleb_size(size_of_func)); // :FUCKED
    @assert_le(e.a.len, WASM_INDEX_PADDING, "function $% is too big to patch length", f.name());
    end_of_length := e.a.len;
    e.a.len = size_of_func;
    size_of_locals := end_locals - start_locals;
    e.a.items().copy_overlapping(end_of_length, start_locals, size_of_locals);
    extra := start_locals - end_of_length;
    e.a.len = end_of_length + size_of_locals;
    e.pad(extra);
    e.a.len = size_of_func;
    
    // TODO: fix -d D llvm-mc dis needs to not include the locals part
}

// im so impressed that this works
fn pack_wasm_result_type(m: *QbeModule, $iter_args: @Fn(yield: @Fn(k: Qbe.Cls) void) void, $iter_ret: @Fn(yield: @Fn(k: Qbe.Cls) void) void) i32 = {
    m.stubs&.reserve(Wasm.ValType)[] = .ResultStart;
    body :: fn($iter) => {
        count := m.stubs&.reserve(u8);
        n := 0;
        iter { k |
            m.stubs&.reserve(Wasm.ValType)[] = to_wasm_type(k);
            n += 1;
        };
        @debug_assert_lt(n, 128, "TODO: so so many types"); 
        count[] = n.trunc();
    };
    body(iter_args);
    body(iter_ret);
    // TODO: deduplicate these
    c := m.wasm_function_type_count&;
    c[] += 1;
    c[] - 1
}

fn pack_locals(e: *EmitWasmFn) void = {
    // 0-4 uleb fits in one byte so this patch is easy. 
    patch := e.a.index_unchecked(e.a.len);
    e.pad(1);
    
    memset(i32.raw_from_ptr(e.locals.ptr), 0xFF, e.locals.len * size_of(@type e.locals[0]));
    total_locals: i32 = 0;
    for_pars e.f { i |
        e.locals[i.to.val()] = total_locals;
        // TODO: use cls to say function signeture. 
        total_locals += 1;
        i.set_nop();
    };
    // TODO: this probably isn't worth the time. 
    // Declaration of locals uses run-length-encoding so group by type to shrink the module. 
    k_ :: @const_slice(Qbe.Cls.Kw, .Kl, .Ks, .Kd);
    wasm_type_ :: @const_slice(Wasm.ValType.I32, .I64, .F32, .F64);
    entries := 0;
    range(0, 4) { i |
        k, wasm_type := (k_[i], wasm_type_[i]);
        prev_locals := total_locals;
        range(Qbe.Tmp0, e.f.ntmp.zext()) { i |
            t := e.f.tmp.index(i);
            if e.locals[i].intcast() == -1 && t.nuse > 0 && t.cls == k {
                e.locals[i] = total_locals;
                total_locals += 1;
            };
        };
        n := total_locals - prev_locals;
        if n > 0 {
            leb128_unsigned(e.a&, n.zext());
            ::enum(@type wasm_type);
            e.a&.push(wasm_type.raw());
            entries += 1;
        };
    };
    
    patch[] = entries.trunc();
}

fn to_wasm_type(k: Qbe.Cls) Wasm.ValType = {
    wasm_type :: @const_slice(Wasm.ValType.I32, .I64, .F32, .F64);
    wasm_type[k.raw().zext()]
}

// TODO: this way of recreating nested structure is super dumb,
//       if you get unlucky the same block will be emitted multiple times. 
//       even trivial cases like a branch that rejoins will generate garbage redundant code. 
fn emit_block(e: *EmitWasmFn, b: *Qbe.Blk) void = {
    depth := 0;
    for_rev e.block_stack& { check |
        if check.identical(b) {
            e.op(.Br);
            leb128_unsigned(e.a&, depth);
            return();
        };
        depth += 1;
    };

    e.block_stack&.push(b);
    e.op(.Loop);
    
    leb128_signed(e.a&, b.wasm_type.intcast());
    
    for_insts_forward b { i |
        emit(e, i);
    };
    
    @match(b.jmp.type) {
        fn ret0() => e.op(.Return);
        fn hlt()  => e.op(.Unreachable);
        // :TodoSwitch
        fn jmp() => emit_block(e, b.s1);
        fn jnz() => {
            // TODO: br_if
            emit_block(e, b.s1);
            emit_block(e, b.s2);
        }
        @default => @panic("invalid terminator");
    };
    e.op(.End);
    e.block_stack&.pop();
}

fn emit(e: *EmitWasmFn, i: *Qbe.Ins) void = {
    if lookup_wasm_encoding(i.op(), i.cls()) { byte |
        e.a&.push(byte);
        if maybe_load(i) { size |
            e.a&.push(@as(u8) size.zext().trailing_zeros().trunc());  // align hint
            e.a&.push(0);
        };
        if maybe_store(i) { size | 
            e.a&.push(@as(u8) size.zext().trailing_zeros().trunc());  // align hint
            e.a&.push(0);
        };
        return();
    };
    
    @match(i.op()) {
        fn call() => {
            e.op(.Call);
            @debug_assert(i.arg&[0].rtype() == .RCon, "use call_indirect for non-constant callee");
            c := e.f.get_constant(i.arg&[0]);
            @debug_assert(c.type == .CAddr && c.bits.i == 0, "wasm can only call symbols");
            e.index_patch(c.sym.id, .Func);
        }
        fn call_indirect() => {
            eprintln("TODO");
        }
        fn push() => @match(rtype(i.arg&[0])) {
            fn RCon() => {
                c := e.f.get_constant(i.arg&[0]);
                @match(c.type) {
                    fn CBits() => {
                        @match(i.cls()) {
                            fn Ks() => {
                                e.op(.F32_Const);
                                e.a&.reserve_type(f32)[] = c.bits.s.s;
                            }
                            fn Kd() => {
                                e.op(.F64_Const);
                                e.a&.reserve_type(f64)[] = c.bits.d;
                            }
                            @default => {
                                e.op(@if(i.cls().is_wide(), .I64_Const, .I32_Const));
                                leb128_unsigned(e.a&, c.bits.i);
                            };
                        };
                    }
                    fn CAddr() => {
                        use_symbol(e.m, c.sym.id) { symbol | 
                            if symbol.kind == .Local {
                                @debug_assert(symbol.segment == .MutableData, "TODO: wasm addr non-MutableData");
                                e.op(@if(i.cls().is_wide(), .I64_Const, .I32_Const));
                                leb128_unsigned(e.a&, symbol.offset + c.bits.i);
                            } else {
                                patch_at := e.a.maybe_uninit.ptr.offset(e.a.len);
                                push_fixup(e.m, symbol, (patch_at = patch_at, type = (WasmAddr = (wide = i.cls().is_wide(), increment = c.bits.i.trunc()))));
                                // note: we don't push an op here. 
                                e.pad(WASM_INDEX_PADDING);  // TODO: might need more space than this.
                            };
                        };
                        eprintln("TODO");
                    }
                    fn CUndef() => unreachable();
                };
            }
            fn RTmp() => {
                local_index := e.locals[i.arg&[0].val()];
                @debug_assert_ne(local_index, -1, "read from tmp without assigned local");
                e.op(.LocalGet);
                leb128_unsigned(e.a&, local_index.zext());
            }
            fn RSlot() => {
                eprintln("TODO");
            }
            @default => @panic("invalid argument for op push");
        };
        fn pop() => {
            if i.to == QbeNull {
                e.op(.Drop);
                return();
            };
            @debug_assert(rtype(i.to) == .RTmp);
            local_index := e.locals[i.to.val()];
            @debug_assert_ne(local_index, -1, "write to tmp without assigned local");
            e.op(.LocalSet);
            leb128_unsigned(e.a&, local_index.zext());
        }
        fn global_set() => {
            id, off := e.f.get_sym(i.arg&[0]) || @panic("global_set arg0 must be a symbol");
            @debug_assert_eq(off, 0);
            @debug_assert(i.arg&[1] == QbeNull, "should be on stack, not in a local");
            e.op(.GlobalSet);
            // :OnlyOneGlobal
            @debug_assert_eq(id, e.m.wasm_symbol_stackbase);
            e.a&.push(0);
            // e.index_patch(id, .Global);
        }
        fn global_get() => {
            id, off := e.f.get_sym(i.arg&[0]) || @panic("global_get arg0 must be a symbol");
            @debug_assert_eq(off, 0);
            e.op(.GlobalGet);
            // :OnlyOneGlobal
            @debug_assert_eq(id, e.m.wasm_symbol_stackbase);
            e.a&.push(0);
            // e.index_patch(id, .Global);
        }
        fn nop()    => ();
        fn dbgloc() => ();
        @default => @panic("TODO: wasm encoding for %", i.op());
    };
}

// Stack grows downwards and __stack_base points to the bottom of our frame. 
fn slot(e: *EmitWasmFn, r: Qbe.Ref) i64 = {
    s := i.arg&[0].val();
    f := f.slot.zext();
    @debug_assert(f > s && s > 0, "invalid RSlot %", s);
    (f - s) * 4
}

fn index_patch(e: *EmitWasmFn, id: u32, _space: Wasm.ImportType) void = {
    use_symbol(e.m, id) { s |
        patch_at := e.a.maybe_uninit.ptr.offset(e.a.len);
        push_fixup(e.m, s, (patch_at = patch_at, type = .WasmIndex));
    };
    e.pad(WASM_INDEX_PADDING);
}

fn pad(e: *EmitWasmFn, count: i64) void = range(0, count) { _ |
    e.op(.Nop);
};

fn op(e: *EmitWasmFn, o: Wasm.Inst) void = 
    e.a&.push(o.raw());

fn fixup_wasm32(self: *QbeModule, symbol: *SymbolInfo, fixup: *Fixup, new_got_reloc: *?Fixup) void = {
    @match(fixup.type) {
        fn WasmIndex() => {
            @debug_assert_ne(symbol.got_lookup_offset, -1);
            lst: List(u8) = (maybe_uninit = (ptr = fixup.patch_at, len = WASM_INDEX_PADDING), len = 0, gpa = panicking_allocator);
            leb128_unsigned(lst&, symbol.got_lookup_offset);
        }
        fn WasmAddr(it) => {
            lst: List(u8) = (maybe_uninit = (ptr = fixup.patch_at, len = WASM_INDEX_PADDING), len = 0, gpa = panicking_allocator);
            @assert(symbol.segment == .MutableData, "TODO: non-MutableData Fixup:WasmAddr");
            o := @if(it.wide, Wasm.Inst.I64_Const, Wasm.Inst.I32_Const);
            lst&.push(@as(u8) o);
            leb128_unsigned(lst&, symbol.offset + it.increment.zext());
        }
        @default => panic("invalid fixup type for wasm");
    };
}

// order matters
fn output_wasm_module(m: *QbeModule) [][]u8 = {
    min_mem_pages := 200; // TODO: set this to something good
    stack_size := 1.shift_left(23); // 8MB
    
    memory_reserved := wasm_page_size;  // :WasmZeroPage
    data_seg := m.segments&[.MutableData]&;
    data_size := data_seg.len() - wasm_page_size;  // :WasmZeroPage
    memory_reserved += data_size;
    
    // TODO: remove
    code_count := m.segments&[.Code]&.len() - COMMANDS_SIZE_GUESS - SIZE_OF_STUBS;
    @eprintln(">>> % bytes of code, % bytes of data.", code_count, data_size);
    
    // we need to know how many imports there are before we can start patching anything. 
    for_symbols m { id, symbol | // :SLOW  just keep list of pending symbols instead
        if symbol.kind == .Pending && symbol.fixups.len != 0 {
            symbol.got_lookup_offset = m.imports.len;
            m.imports&.push(id); 
            symbol.kind = .DynamicPatched;
        };
    };
    
    for_symbols m { id, symbol |
        if symbol.fixups.len != 0 {
            @debug_assert(symbol.got_lookup_offset != -1, "TODO: wasm data entries");
            if symbol.kind == .Local && symbol.segment == .Code {
                symbol.got_lookup_offset += m.imports.len;
            };
            m.do_fixups(u8.ptr_from_int(0), symbol);
        };
    };
    
    code_segment := m.segments&[.Code]&;
    cursor: List(u8) = (maybe_uninit = (ptr = code_segment.mmapped.ptr, len = COMMANDS_SIZE_GUESS), len = 0, gpa = panicking_allocator);
    push_buf :: fn($body: @Fn(buf: *List(u8)) void) void = {
        start := cursor.len;
        body(cursor&);
        chunks&.push(cursor.items().rest(start));
    };
    chunks := list([]u8, temp());
    
    push_buf { buf |
        //buf.push_all(Wasm.version_magic); // :UpdateBoot "Panicked: Assertion Failed: unhanlded mutual recursion!"
        version_magic :: @const_slice(0x00, 0x61, 0x73, 0x6D, 0x01, 0x00, 0x00, 0x00);
        buf.push_all(version_magic);
    };
    
    f_count := m.local_needs_reloc.len;
    
    {
        push_buf { buf |
            buf.push(@as(u8) Wasm.Section.Type);
            leb128_unsigned(buf, m.stubs&.len() + uleb_size(m.wasm_function_type_count.intcast()));
            leb128_unsigned(buf, m.wasm_function_type_count.intcast());
        };
        chunks&.push(m.stubs.mmapped.slice(0, m.stubs&.len()));
    }; 
    
    {
        imports_buf := u8.list(m.imports.len * 10, temp());
        for m.imports& { id |
            use_symbol(m, id) { s |
                sep := index_of(s.name, "$".ascii());
                mod, name := ("", s.name);
                if sep { sep |
                    name = s.name.slice(0, sep);
                    mod = s.name.rest(sep + 1);
                };
                leb128_unsigned(imports_buf&, mod.len);
                imports_buf&.push_all(mod);
                leb128_unsigned(imports_buf&, name.len);
                imports_buf&.push_all(name);
                // For now we only do functions
                push(imports_buf&, @as(u8) Wasm.ImportType.Func);
                leb128_unsigned(imports_buf&, s.wasm_type_index.intcast());
            };
        };
        push_buf { buf |
            buf.push(@as(u8) Wasm.Section.Import);
            leb128_unsigned(buf, imports_buf.len() + uleb_size(m.imports.len));
            leb128_unsigned(buf, m.imports.len);
        };
        chunks&.push(imports_buf.items());
    }; 
    
    {
        function_type_indices := u8.list(m.local_needs_reloc.len, temp());
        for m.local_needs_reloc& { id |
            use_symbol(m, id) { s |
                leb128_unsigned(function_type_indices&, s.wasm_type_index.intcast()); 
            };
        };
        
        push_buf { buf |
            buf.push(@as(u8) Wasm.Section.Function);
            leb128_unsigned(buf, function_type_indices.len + uleb_size(f_count));
            leb128_unsigned(buf, f_count);
        };
        chunks&.push(function_type_indices.items());
    };
    
    // TABLES, go here
    
    push_buf { buf |
        buf.push(@as(u8) Wasm.Section.Memory);
        leb128_unsigned(buf, 1 + 1 + uleb_size(min_mem_pages));
        buf.push(1); // length of memories vec
        buf.push(0); // no max
        leb128_unsigned(buf, min_mem_pages);
    };
    
    {
        // :OnlyOneGlobal so __stackbase is index 0 and doesn't need a patch
        // TODO: this will have to change if we want to allow frontends to create thier own wasm globals. 
    
        // Create a global for the stack pointer
        memory_reserved += stack_size;
        stack_base := memory_reserved;  // :WasmZeroPage
        
        push_buf { buf |
            buf.push(@as(u8) Wasm.Section.Global);
            leb128_unsigned(buf, 1 + 1 + 1 + 1 + uleb_size(stack_base) + 1);
            
            push(buf, 1); // length of globals vector
            
            push(buf, @as(u8) Wasm.ValType.I32); // type
            push(buf, 1); // mutable
            
            // initial value
            push(buf, @as(u8) Wasm.Inst.I32_Const);
            leb128_unsigned(buf, stack_base);
            push(buf, @as(u8) Wasm.Inst.End);
        };
    };
    // GLOBALS, go here
    
    if m.exports.len > 0 {
        chunk_i := chunks.len;
        exports_size := uleb_size(m.exports.len);
        for(m.exports&, fn(id) => use_symbol(m, id) { s |
            exports_size += 1 + uleb_size(s.name.len) + s.name.len + uleb_size(s.got_lookup_offset);
        });
        
        push_buf { buf |
            buf.push(@as(u8) Wasm.Section.Export);
            leb128_unsigned(buf, exports_size);
            leb128_unsigned(buf, m.exports.len);
        };
        for m.exports& { id |
            use_symbol(m, id) { s |
                push_buf { buf |
                    leb128_unsigned(buf, s.name.len);
                };
                chunks&.push(s.name);
                push_buf { buf |
                    buf.push(@as(u8) Wasm.ImportType.Func);
                    leb128_unsigned(buf, s.got_lookup_offset);
                };
            };
        };
    };
    
    // START, ELEM, go here
    
    {
        padding :: COMMANDS_SIZE_GUESS + SIZE_OF_STUBS;
        total_code_bytes := code_segment.len() - padding;
        push_buf { buf |
            buf.push(@as(u8) Wasm.Section.Code);
            f_count := m.local_needs_reloc.len;
            total_section_bytes := total_code_bytes + uleb_size(f_count);
            leb128_unsigned(buf, total_section_bytes);
            leb128_unsigned(buf, f_count);
        };
        
        chunks&.push(code_segment.mmapped.slice(padding, code_segment.len()));
    };
    
    if data_size > 0 {
        push_buf { buf |
            buf.push(@as(u8) Wasm.Section.Data);
            leb128_unsigned(buf, 1 + 1 + 1 + uleb_size(wasm_page_size) + 1 + uleb_size(data_size) + data_size);
            leb128_unsigned(buf, 1); // number of datas 
            leb128_unsigned(buf, 0); // mode: active
            
            // offset expr
            buf.push(@as(u8) Wasm.Inst.I32_Const);
            leb128_unsigned(buf, wasm_page_size); 
            buf.push(@as(u8) Wasm.Inst.End);
            
            leb128_unsigned(buf, data_size);
        };
        chunks&.push(data_seg.mmapped.slice(wasm_page_size, data_seg.len()));
    };
    
    total_size := 0;
    for chunks { c |
        total_size += c.len;
    };
    @eprintln(">>> % bytes total module", total_size);
    @assert_le(memory_reserved, min_mem_pages * wasm_page_size);
    
    chunks.items()
}

//
// After the magic + version, the thing is a list of sections. 
// Each section is [id byte, size u32, data]
// Note that many sections are a vec of something which is encoded as [count u32, data], 
// so you sometimes have two lengths, one in bytes and then one in elements. 
// Also, when the spec says sizes like u32, that doesn't mean encode using that many bytes, 
// you still use the leb128 stuff. The type is just a range restriction. 
//
