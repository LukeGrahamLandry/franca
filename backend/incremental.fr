/// This defines the .frc file format used by the franca compiler. 
/// See @/docs/caching.md

MAGIC :: 0x0006_41434E415246;  // FRANCA__
Header :: @struct {
    meta: Meta #use;
    dep: Storage(Dep);
    sym: Storage(Sym);
    blk: Storage(Blk);
    ins: Storage(Qbe.Ins);
    con: Storage(Qbe.Con);
    mem: Storage(Qbe.Addr);
    rel: Storage(Dat2.Reloc);
    str: Storage(u8);
    lib: Storage(Lib);
    idx: Storage(u32);
    typ: Storage(Typ);
    fty: Storage(FTy);
    fld: Storage(Fld);
};

Meta :: @struct {
    magic_v: u64 = MAGIC;
    filelen: u32 = 0;  // patched by to_bytes()
    arch_os: u32;
    // Qbe.no_symbol if this file cannot be executed
    entry_sym: u32;
    entry_dep: u32;
};

// Hashes of all the input files that contributed to this module. 
Dep :: @struct {
    filename: Ref(u8);
    file_len: u32;
    hashcode: Sha256.Digest;
};

Sym :: @struct {
    segment: Seg; 
    align_log2: u8;
    name: Ref(u8);  // TODO: having names is kinda dumb
    // TODO: this should parse when inlined but then need to :UpdateBoot :Compiler
    P :: @union(fnc: Fnc, dat: Dat, imp: Imp);  
    payload: P #use;  // active variant depends on segment
};

Seg :: @enum(u8) (
    Invalid,  // used while writing when the symbol has been referenced but not declared yet
    Code,  // payload: Fnc;
    ConstantData, MutableData, ZeroInitData,  // payload: Dat;
    Import,  // payload: Imp;
    MachineCode,  // payload: Dat; but goes in Segment.Code
);

// Currently i only save right before emitting machine code, 
// so no need for phi/typ/switch. Those can be added later when i want to do 
// inlining across modules or saving right after "parse". 
Fnc :: @struct {
    reg: u64;
    // When the instructions have Blk/Con indices, they're relative to these arrays, 
    // so they don't need to be remapped when saving. 
    blk: Ref(Blk);
    con: Ref(Qbe.Con);  // not including the first `fixed_const_count`
    mem: Ref(Qbe.Addr);
    either: @union(slot: i32, retty: Qbe.Ref);
    flags: u32;
    // idx[tmp] = (chunks, [chunks](packed cls:u2))
    tmp: u32 = Qbe.no_symbol;
};

// :BitFieldsCompileError
FncFlags :: @bit_fields(
    leaf   := 1,
    vararg := 1,
    salign := 4,
    dynalloc := 1,
    _ := 25,
);

Blk :: @struct {
    ins: Ref(Qbe.Ins);
    s1: u32;  // local in Fnc.blks
    s2: u32;  // loacl in Fnc.blks
    jmp: Qbe.BlkJmp;
    phi: u32; // idx[phi] = (nphi, [nphi](narg, to, [narg](blk, arg)))
};

Dat :: @struct {
    bytes: Ref(u8);  // off=Qbe.no_symbol when it's all zeroes
    rel: Ref(Dat2.Reloc);
};

Imp :: @struct {
    lib: One(Lib);
};

Lib :: @struct {
    name: Ref(u8);
};

Typ :: @struct {
    header: Qbe.TypHeader;
    fields: Ref(u32);
};

Storage :: fn($T: Type) Type = {
    // SAFETY: the serialized data is immediately after the header in memory
    // check() ensures that storage.count is within filelen. 
    fn get(self: *Header, i: Ref(T)) []T = {
        f :: find_storage_field(T);
        storage := Header.get_field_ptr(self, f);
        first := T.ptr_from_raw(Header.raw_from_ptr(self).offset(storage.off.zext()));
        @debug_assert_le(i.off + i.count, storage.count, "%", ::f[].name.str());
        (ptr = first.offset(i.off.zext()), len = i.count.zext())
    }
    
    fn get(self: *Header, i: u32) *T = {
        i: Ref(T) = (off = i, count = 1);
        self.get(i).index(0)
    }

    fn get(self: *Header, i: One(T)) *T = {
        i: Ref(T) = (off = i.off, count = 1);
        self.get(i).index(0)
    }
    
    fn for(self: *Header, i: Ref(T), $body: @Fn(it: One(T), itp: *T) void) void = {
        f :: find_storage_field(T);
        storage := Header.get_field_ptr(self, f);
        range(0, storage.count.zext()) { i |
            it: One(T) = (off = i.trunc());
            body(it, self.get(it));
        };
    }
    
    @struct(
        off: u32 /* bytes from start of header to first element */, 
        count: u32, 
        StorageElement :: T,
    )
};

fn all(self: *Header, $T: Type) Ref(T) #generic = {
    f :: find_storage_field(T);
    storage := Header.get_field_ptr(self, f);
    (off = 0, count = storage.count)
}

Ref :: fn($T: Type) Type = 
    @struct(off: u32, count: u32, RefElement :: T);

One :: fn($T: Type) Type = 
    @struct(off: u32, OneElement :: T);

fn check(data: []u8) *Header = {
    @assert_ge(data.len, size_of(Header));
    self := ptr_cast_unchecked(u8, Header, data.ptr);
    @assert_eq(self.magic_v, MAGIC, "Tried to load .frc with invalid magic!");
    @assert_le(self.filelen.zext(), data.len, "header.filelen corrupted");
    
    for storage_fields { off, size |
        S :: @struct(off: u32, count: u32);
        storage := S.ptr_from_raw(Header.raw_from_ptr(self).offset(off.zext()));
        @assert_le(storage.off, self.filelen);
        @assert_le(storage.off + storage.count * size, self.filelen);
    };
    self
}

storage_fields :: {
    out := Ty(u32, u32).list(ast_alloc());
    for Header.get_fields() { f |
        if get_constant(Type, Type.scope_of(f.ty), @symbol StorageElement) { T |
            push(out&, (f.byte_offset.trunc(), T.size_of().trunc()));
        }
    };
    out.items()
};

// TODO: bucketarray. comptime generate this from the Header. 
Writer :: @struct {
    dep: List(Dep);
    sym: List(Sym);
    blk: List(Blk);
    ins: List(Qbe.Ins);
    con: List(Qbe.Con);
    mem: List(Qbe.Addr);
    rel: List(Dat2.Reloc);
    str: List(u8);
    lib: List(Lib);
    idx: List(u32);
    typ: List(Typ);
    fty: List(FTy);
    fld: List(Fld);
    symbols: HashMap(u32, i64);
};

fn init(a: Alloc) Writer = (
    symbols = init(a),
    // TODO: generate this
    dep = list(a),
    sym = list(a),
    blk = list(a),
    ins = list(a),
    con = list(a),
    mem = list(a),
    rel = list(a),
    str = list(a),
    lib = list(a),
    idx = list(a),
    typ = list(a),
    fty = list(a),
    fld = list(a),
);

fn push(self: *Writer, it: []u8) Ref(u8) = {
    r: Ref(u8) = (off = self.str.len.trunc(), count = it.len.trunc());
    self.str&.push_all(it);
    r
}

fn map_sym(self: *Writer, m: *QbeModule, id: Qbe.Sym) i64 = {
    self.symbols&.get_or_insert(id.id) {
        i := self.sym.len;
        self.sym&.push(zeroed Sym);
        self.sym[i].name = self.push(m.str(id));
        i
    }[]
}

fn push(self: *Writer, f: *Qbe.Fn, did_regalloc: bool) void = {
    id := self.map_sym(f.globals, f.lnk.id);
    
    self.sym[id].segment = .Code;
    
    // unfortunatly this includes constants that are no longer used. 
    // so a function will all uses inlined will still have an Invalid Sym because of this map_sym
    self.sym[id].fnc.con = (off = self.con.len.trunc(), count = trunc(f.ncon.zext() - fixed_const_count));
    self.con&.reserve(zext f.ncon);
    each f.con.slice(fixed_const_count, f.ncon.zext()) { c |
        self.con&.push_assume_capacity(
            // bleh, really this should be One(Sym) instead of Qbe.Sym
            sym = (id = @if(c.sym.id == Qbe.no_symbol, Qbe.no_symbol, trunc self.map_sym(f.globals, c.sym))), 
            bits = c.bits,
        );
    };
    
    self.sym[id].fnc.blk = (off = self.blk.len.trunc(), count = f.nblk.bitcast());
    {
        i: i32 = 0;
        for_blocks f { b |
            b.id = i;
            i += 1;
        };
        @debug_assert_eq(i, f.nblk, "% lied about nblk", f.name());
    };
    self.blk&.reserve(zext f.nblk);
    for_blocks f { b |
        phi := write_phi(self, b, f.nblk);
        self.blk&.push_assume_capacity(
            ins = (off = self.ins.len.trunc(), count = b.ins.len.trunc()),
            s1 = @if(b.s1.is_null(), Qbe.no_symbol, bitcast b.s1.id),
            s2 = @if(b.s2.is_null(), Qbe.no_symbol, bitcast b.s2.id),
            jmp = b.jmp,
            phi = phi,
        );
        self.ins&.push_all(b.ins.items());
    };
    
    self.sym[id].fnc.mem = (off = self.mem.len.trunc(), count = f.nmem.bitcast());
    self.mem&.push_all(f.mem.slice(0, zext f.nmem));
    
    self.sym[id].fnc.reg = f.reg;
    if did_regalloc {
        self.sym[id].fnc.either.slot = f.slot;
    } else {
        self.sym[id].fnc.either.retty = f.retty;
    };
    
    flags: FncFlags = construct(
        leaf = int(f.leaf),
        vararg = int(f.vararg),
        salign = f.salign.intcast(),
        dynalloc = int(f.dynalloc),
        _ = 0,
    );
    self.sym[id].fnc.flags = flags.repr;
    
    self.sym[id].fnc.tmp = @if(did_regalloc, Qbe.no_symbol, write_tmp(self, f));
}

fn push(self: *Writer, m: *QbeModule, d: *Dat2) void = {
    id := self.map_sym(m, d.id);
    
    self.sym[id].segment = @as(Seg) @as(u8) trunc((@as(i64) d.seg) + 1);
    @match(d.template) {
        fn Bytes(it) => {
            self.sym[id].dat.bytes = self.push(it);
        };
        fn Zeroes(it) => {
            self.sym[id].dat.bytes.count = it.trunc();
            self.sym[id].dat.bytes.off = Qbe.no_symbol;
        }
    };

    self.sym[id].dat.rel = (off = self.rel.len.trunc(), count = d.relocations.len.trunc());
    self.rel&.reserve(d.relocations.len);
    each d.relocations { it |
        self.rel&.push_assume_capacity(
            off = it.off,
            // bleh, really this should be One(Sym) instead of Qbe.Sym
            id = (id = self.map_sym(m, it.id).trunc()),
            addend = it.addend,
        );
    };
    
    self.sym[id].align_log2 = d.align.trailing_zeros().trunc();
}

fn push_asm(self: *Writer, m: *QbeModule, code: []u8, id: Qbe.Sym) void = {
    id := self.map_sym(m, id);
    self.sym[id].segment = .MachineCode;
    self.sym[id].dat.bytes = (off = self.str.len.trunc(), count = code.len.trunc());
    self.str&.push_all(code);
}

// TODO: this shouldn't suck this bad
find_storage_field :: fn(T: Type) *Field = {
    each Header.get_fields() { f | 
        ::AutoEq(?Type);
        ::RefEq(?Type);
        if get_type_info_ref(f.ty).is(.Struct) {
            c := get_constant(Type, Type.scope_of(f.ty), @symbol StorageElement);
            if c == (Some = T) {
                return(f);
            }
        }
    };
    unreachable()
};

fn to_bytes(self: *Writer, meta: Meta, m: *QbeModule) [][]u8 = {
    if m.goal.type == .CachedEarly {
        write_types(m.save.unwrap(), m);
    };

    bytes := list([]u8, 14, temp());
    
    n := size_of(Header);
    header := temp().box(Header);
    ::[]Header;
    bytes&.push(header.slice(1).interpret_as_bytes());
    header.meta = meta;
    
    X :: fn(storage, data) => {
        b := data.items().interpret_as_bytes();
        bytes&.push(b);
        storage[] = (off = n.trunc(), count = data.len.trunc());
        n += b.len;
    };
    
    // TODO: generate this
    X(header.dep&, self.dep&);
    X(header.sym&, self.sym&);
    X(header.blk&, self.blk&);
    X(header.ins&, self.ins&);
    X(header.con&, self.con&);
    X(header.mem&, self.mem&);
    X(header.rel&, self.rel&);
    X(header.str&, self.str&);
    X(header.lib&, self.lib&);
    X(header.idx&, self.idx&);
    X(header.typ&, self.typ&);
    X(header.fty&, self.fty&);
    X(header.fld&, self.fld&);
    header.filelen = n.trunc();
    
    // Maybe limitting to 4GB is too small and I should make all the offsets be u64 instead. 
    // Could probably produce a reasonable program that hit that by embedding a lot of data 
    // (like 3d meshes maybe) but I already can't do arbitrary sizes because I don't resize 
    // segments and the constants in ../lib.fr are already kinda low.  -- May 26, 2025
    @assert_lt(n, 0xFFFFFFFF, "overflow");
    
    bytes.items()
}

fn finish_imports(writer: *Writer, m: *QbeModule) void = {
    writer := m.save.unwrap();
        
    // :SLOW
    _, symbols := collect_aot_fixups(m);
    for symbols { s |
        if s.kind != .Local {
            if s.library == 0 {
                ::?u32;
                s.library = m.find_library("libc") || {
                    @panic("import % from unknown library", s.name)
                };
            };
            
            id := writer.map_sym(m, m.intern(s.name));
            writer.sym[id].segment = .Import;
            writer.sym[id].imp.lib.off = s.library - 1;
        };
    };
}

finish_module :: fn(m: *QbeModule) [][]u8 = {
    writer := m.save.unwrap();
    finish_imports(writer, m);
    meta: Incremental.Meta = (
        arch_os = Incremental'pack_target(m.goal.arch, m.goal.os),
        entry_sym = writer.map_sym(m, m.intern("main")).trunc(), // :HardcodeMain
        // TODO: would be nice if you could set this without needing to paste this function
        entry_dep = Qbe.no_symbol,
    );
    writer.to_bytes(meta, m)
};

// note: this only calls default_init if !did_rega
fn load(header: *Header, f: *Qbe.Fn, it: One(Sym), syms: []Qbe.Sym) bool /*did_rega lloc*/ = {
    m := f.globals;
    sym := header.get(it);
    fnc := sym.fnc&;
    did_regalloc := fnc.tmp == Qbe.no_symbol;
    if !did_regalloc {
        default_init(f, m);
    };
    f.lnk.id = syms[it.off.zext()];
    f.lnk.export = true;  // TODO: only for entry point?
    
    f.con = new(fnc.con.count.zext() + fixed_const_count);
    f.ncon = 0;
    push_fixed_consts(f);
    f.ncon = fixed_const_count.trunc() + fnc.con.count.bitcast();
    enumerate header.get(fnc.con) { i, src |
        dest := f.con[i + fixed_const_count]&;
        dest[] = src[];
        if src.sym != Qbe.no_symbol_S {
            dest.sym = syms[src.sym.id.zext()];
        }
    };
    
    flags: FncFlags = (repr = fnc.flags);
    if !did_regalloc {
        f.retty = fnc.either.retty;
        read_tmp(header, f, fnc.tmp);  // This must be before read_phi
        @debug_assert_eq(fnc.mem.count, 0);
    } else {
        f.slot = fnc.either.slot;
        f.reg = fnc.reg;
        f.salign = flags.get(.salign).intcast();
        
        // TODO: these are pretty chunky. it would be nice to deduplicate them. 
        //       need to be careful, there might be something in amd64/emit.fr that assumes they don't alias?
        f.nmem = fnc.mem.count.bitcast();
        f.mem = new_copy(header.get(fnc.mem));
    };
    f.leaf = flags.get(.leaf) != 0;
    f.dynalloc = flags.get(.dynalloc) != 0;
    f.vararg = flags.get(.vararg) != 0;
    
    blks := temp().alloc_zeroed(Qbe.Blk, fnc.blk.count.zext());
    enumerate header.get(fnc.blk) { i, b |
        blks[i].id = i.trunc();
        blks[i].ins = as_raw_list(header.get(b.ins));
        blks[i].jmp = b.jmp;
        if b.s1 != Qbe.no_symbol {
            blks[i].s1 = blks.index(b.s1.zext());
        }
        if b.s2 != Qbe.no_symbol {
            blks[i].s2 = blks.index(b.s2.zext());
        }
        if i != blks.len - 1 {
            blks[i].link = blks.index(i + 1);
        }
        
        read_phi(header, blks, b, i, f.tmp.slice(0, f.ntmp.zext()));
    };
    f.start = blks.index(0);
    f.nblk = fnc.blk.count.bitcast();
    
    did_regalloc
}

fn load(header: *Header, m: *QbeModule, i: One(Sym), syms: []Qbe.Sym) Dat2 = {
    it := header.get(i);
    relocs := temp().alloc(Dat2.Reloc, it.dat.rel.count.zext());
    relocs.copy_from(header.get(it.dat.rel));
    each relocs { it |
        if it.id != Qbe.no_symbol_S {
            it.id = syms[it.id.id.zext()];
        }
    };
    
    (
        template = @if(it.dat.bytes.off == Qbe.no_symbol, 
            (Zeroes = it.dat.bytes.count.zext()),
            (Bytes = header.get(it.dat.bytes)),
        ),
        relocations = relocs,
        align = 1.shift_left(@as(i64) it.align_log2.zext()),
        seg = @as(SegmentType) @as(i64) zext(@as(u8) it.segment) - 1,
        id = syms[i.off.zext()],
        export = false, // TODO
    )
}

pack_current_target :: fn() u32 = {
    arch, os := (query_current_arch(), query_current_os());
    pack_target(arch, os)
};

pack_target :: fn(arch: Arch, os: Os) u32 = 
    bit_or(@as(i64) os, shift_left(@as(i64) arch, 8)).trunc();

fn preintern_syms(header: *Header, m: *QbeModule) []Qbe.Sym = {
    count: i64 = header.sym.count.zext();
    syms := m.forever&.borrow().alloc(Qbe.Sym, count);
    for(header, header.all(Sym)) { i, it |
        syms[i.off.zext()] = m.intern(header.get(it.name));
    };
    syms
}

fn compile_all_symbols(header: *Header, m: *QbeModule) void = {
    // TODO: maybe entry_sym should be export=true
    f := @uninitialized Qbe.Fn;
    default_init(f&, m);
    
    syms := preintern_syms(header, m);
    read_types(header, m);
    
    for(header, header.all(Sym)) { i, it |
        mark := mark_temporary_storage();
        ::enum(@type it.segment);
        @match(it.segment) {
            fn Code() => {
                did_regalloc := load(header, f&, i, syms);
                zone := @if(ENABLE_ENABLE_TRACY, zone_begin(.Backend), ());
                if f.globals.debug["P".char()] {
                    out := f.globals.debug_out;
                    write(out, "\n> After loading:\n");
                    printfn(f&, out);
                };
                if did_regalloc {
                    emit_fn(f&);
                } else {
                    // TODO: suspend for inlining (can be a bit in FncFlags)
                    {f.globals.target.finish_passes}(f&);
                };
                @if(ENABLE_ENABLE_TRACY) zone_end(zone);
            }
            fn MachineCode() => {
                m.add_code_bytes(syms[i.off.zext()], header.get(it.dat.bytes));
            }
            fn Import() => {
                lib := header.get(it.imp.lib);
                lib := header.get(lib.name);
                m.set_library(syms[i.off.zext()], lib);
            }
            fn Invalid() => ();
            @default => {
                dat := load(header, m, i, syms);
                m.emit_data(dat);
            };
        };
        reset_temporary_storage(mark);
    };
    m.emit_suspended_inlinables();  // only meaningful if !did_regalloc
    
    // TODO: it would kinda feel better to keep track of the imports
    //       instead of making the caller loop over all the symbols again 
    //       (probably by calling fill_from_libc), but that gets messed up by m.symbol_memmove, 
    //       which i guess doesn't get set_library called on it (should be fixed anyway). 
    //       + need to do a more complicated thing to allow non-libc libraries anyway. 
}

// 
// Some fields (tmp, phi, typ) are only used when the function is pre-regalloc 
// (which happens when it needs to be inlinable). 
// 

read_tmp :: fn(header: *Header, f: *Qbe.Fn, idx: u32) void #once = {
    if(idx == Qbe.no_symbol, => return());
    @debug_assert_eq(f.ntmp, Qbe.Tmp0);
    chunks: u32 = header.get(idx)[]; idx += 1;
    f.tmp&.grow(Qbe.Tmp0 + chunks.zext()*16);
    range(0, chunks.zext()) { _ |
        data: u32 = header.get(idx)[]; idx += 1;
        range(0, 16) { i |
            k := data.shift_right_logical(i*2).bit_and(0b11);
            f.newtmp("", @as(Qbe.Cls) @as(i32) bitcast k);
        };
    };
};

write_tmp :: fn(self: *Writer, f: *Qbe.Fn) u32 #once = {
    //if(f.ntmp == Qbe.Tmp0, => return(Qbe.no_symbol));  // can't do this because i need to know if did_regalloc
    tmp: u32 = self.idx.len.trunc();
    chunks := align_to(f.ntmp.zext() - Qbe.Tmp0, 16) / 16;
    self.idx&.push(chunks.trunc());
    range(0, chunks) { c |
        packed: u32 = 0;
        range(0, 16) { i |
            t := Qbe.Tmp0 + c*16+i;
            if t < f.ntmp.zext() {
                k := @as(u32) bitcast @as(i32) f.tmp[t].cls;
                packed = bit_or(packed, k.shift_left(i*2));
            }
        };
        self.idx&.push(packed);
    };
    tmp
};

read_phi :: fn(header: *Header, blks: []Qbe.Blk, b: *Blk, i: i64, tmp: []Qbe.Tmp) void #once = {
    if(b.phi == Qbe.no_symbol, => return());
    idx: u32 = b.phi;
    nphi: u32 = header.get(idx)[]; idx += 1;
    range(0, nphi.zext()) { i_phi | 
        narg: u32 = header.get(idx)[]; idx += 1;
        to: u32 = header.get(idx)[]; idx += 1;
        k := tmp[to.zext()].cls;
        p := new_phi(blks[i]&, k, narg.zext(), TMP(to.zext()));
        range(0, narg.zext()) { _ |
            blk_i: u32 = header.get(idx)[]; idx += 1;
            arg_i: u32 = header.get(idx)[]; idx += 1;
            p.push(blks[blk_i.zext()]&, (type3_val29 = arg_i));
        };
    };
};

write_phi :: fn(self: *Writer, b: *Qbe.Blk, nblk: i32) u32 #once = {
    if(b.phi.is_null(), => return(Qbe.no_symbol));
    phi: u32 = self.idx.len.trunc();
    self.idx&.push(0);  // nphi
    for_phi b { p |
        self.idx[phi.zext()] += 1;
        self.idx&.push(p.narg);
        self.idx&.push(p.to.val().trunc());
        range(0, p.narg.zext()) { n |
            @debug_assert_lt(p.blk&[n].id, nblk);
            self.idx&.push(p.blk&[n].id.bitcast());
            self.idx&.push(p.arg&[n].type3_val29);
        };
    };
    phi
};

write_types :: fn(self: *Writer, m: *QbeModule) void = {
    @debug_assert_eq(self.typ.len, 0, "can only write types once");
    lock(m.types_mutex&);
    self.typ&.reserve(m.types.len);
    enumerate m.types { i, t |
        m.flush_debug();
        self.typ&.push(
            header = t.header,
            fields = (off = trunc self.idx.len, count = t.nfield),
        );
        self.idx&.push_all(t.fields.slice(0, zext t.nfield));
    };
    unlock(m.types_mutex&);
};

read_types :: fn(header: *Header, m: *QbeModule) void = {
    lock(m.types_mutex&);
    msg :: "can only read_types in a fresh module because RType is a global index and i don't remap instructions";
    @debug_assert(m.types.len == 0 || header.typ.count == 0, msg);
    
    types: Ref(Typ) = (off = 0, count = header.typ.count);
    each header.get(types) { t | 
        fields := m.new_copy_long_life(header.get(t.fields));  // TODO: this copy is lame. make it a slice instead of a QList
        i := m.new_type(
            name = "",
            header = t.header,
            nfield = t.fields.count,
            fields = fields,
        );
    };
    
    unlock(m.types_mutex&);
};

// 
// Some fields are for frontend declaraction/type info. 
//

FTy :: @rec @struct {
    Tag :: @enum(u8) (
        Alias,
        Number, Array, Ptr, Function, 
        Enum, Scope, Struct, Union, 
    );
    tag: Tag;
    align_log2: u8;
    // franca structs can have runtime fields and also an associated scope. TODO: might need more bits for this field. 
    scope: u16 = 0xFFFF;
    payload: @union(
        array:  @struct(inner: One(FTy), count: u32),  // or ptr
        fields: Ref(Fld),  // enum/scope/struct/union
        func:   @struct(arg: One(FTy), ret: One(FTy)),
        int:    @struct(bits: u32, signed: bool, float: bool),
    );
    
    UNKNOWN  ::  0;
    VOID     ::  1;
    TYPE     ::  2;
    I64      ::  3;
    BOOL     ::  4;
    VARIADIC ::  5;
    NEVER    ::  6;
    F64      ::  7;
    OVERLOAD ::  8;
    SCOPE    ::  9;
    U32      :: 10;
    RAWPTR   :: 11;
    F32      :: 12;
    FUNCID   :: 13;
    LABELID  :: 14;
    SYMBOL   :: 15;
};

Fld :: @rec @struct {
    name: Ref(u8);
    type: One(FTy);
    payload: @union(
        offset: u32,         // a runtime offset in bytes for struct/union
        value: One(Qbe.Con), // a constant value for scope
        type: One(FTy),
    );
    source_location: u32;
};

ENABLE_ENABLE_TRACY :: get_environment_variable("FRANCA_TRACY").is_some();
Sha256 :: import("@/backend/macho/sha256.fr");
