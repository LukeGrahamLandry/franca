MAGIC :: 0x464c457f;

Header :: @struct(
    magic: u32, 
    class: u8,
    data: u8,
    header_version: u8,
    os_abi: u8,
    _pad: i64 = 0,
    type: Type,
    machine: Machine,
    version: u32,
    entry: i64,
    program_header_off: i64,
    section_header_off: i64,
    flags: u32,
    ehsize: u16,
    program_header_entsize: u16 = size_of(ProgramHeader),
    program_header_num: u16,
    section_header_entsize: u16 = size_of(SectionHeader),
    section_header_num: u16,
    section_header_names_index: u16,  // e_shstrndx
);
Type :: @enum(u16) (
    None, Relocatable, Executable, Dynamic,
);
Machine :: @enum(u16) (
    none = 0, amd64 = 0x3E, arm64 = 0xB7, rv64 = 0xF3,
);
ProgramHeader :: @struct(
    type: SegmentType,
    prot: u32,
    offset: i64,
    vaddr: i64, 
    paddr: i64,
    file_size: i64,
    mem_size: i64,
    align: i64,
);
SegmentType :: @enum(u32) (
    Null = 0, 
    Load = 1, 
    Dynamic = 2, 
    Interp = 3, 
    Note = 4, 
    Shlib = 5, 
    Phdr = 6, 
    Tls = 7,
    EHFrame = 0x6474e550,
    Stack = 0x6474e551,
    Relro = 0x6474e552,
);
PF_X :: 0b001;
PF_W :: 0b010;
PF_R :: 0b100;

SectionHeader :: @struct(
    name: u32,
    type: SectionType, 
    flags: i64,  // bit set of SectionFlag
    addr: i64,
    offset: i64, 
    size: i64,
    link: u32 = 0,
    info: u32 = 0, 
    addr_align: i64,
    ent_size: i64 = 0,
);
SectionType :: @enum(u32) (
    Null=0, ProgramBits=1, SymbolTable=2, StringTable=3, RelocAddend=4, 
    Hash=5, Dynamic=6, Note=7, Bss=8, RelocNoAddend=9, Lib=10, DynSymbolTable=11,
    InitArray=12, FiniArray=13, PreInitArray=14, Group=15, SymTabShIndex=16, 
    GnuHash = 0x6FFFFFF6,
    VerNeed = 0x6FFFFFFE,
    VerSym = 0x6FFFFFFF,
);
SectionFlag :: @enum(i64) (
    Write=0, Alloc=1, Exec=2, Merge=4, Strings=5, InfoLink=6, LinkOrder=7, OsNonConforming=8, Group=9, Tls=10,
);
Symbol :: @struct(
    name: u32,
    info: u8 = 0,
    other: u8 = 0,
    section_header_index: u16 = 0,
    value: i64 = 0,
    size: i64 = 0,
);

// for Symbol.info
STB_LOCAL :: 0;
STB_GLOBAL :: 1;
STB_WEAK :: 2;

Rel :: @struct(
    offset: i64,
    type: u32,
    sym: u32,
);
RelA :: @struct(
    offset: i64,
    type: u32,
    sym: u32,
    addend: i64,
);
Dyn :: @struct(
    tag: DynTag,
    val: i64,
);
VersionNeed :: @struct(
    version: u16 = 1,
    count: u16,
    file: u32,
    aux: u32,
    next: u32,
);
VersionAux :: @struct(
    hash: u32,
    flags: u16,
    other: u16 = 0,
    name: u32,
    next: u32,
);
DynTag :: @enum(i64) (
    Null = 0, 
    Needed = 1,
    PltRelSz = 2,
    PltGot = 3,
    Hash = 4,
    StrTab = 5,
    SymTab = 6,
    RelA = 7,
    RelASz = 8,
    RelAEnt = 9,
    StrSz = 10,
    SymEnt = 11,
    Init = 12,
    Fini = 13,
    SoName = 14,
    RPath = 15,
    Symbolic = 16,
    Rel = 17,
    RelSz = 18,
    RelEnt = 19,
    PltRel = 20,
    Debug = 21,
    TextRel = 22,
    JmpRel = 23,
    BindNow = 24,
    InitArray = 25,
    FiniArray = 26,
    InitArraySz = 27,
    FiniArraySz = 28,
    RunPath = 29,
    Flags = 30,
    Encoding = 32,
    PreInitArray = 32,
    PreInitArraySz = 33,
    
    Flags_1 = 0x6FFFFFFB, 
    GnuHash = 0x6FFFFEF5,
    VerSym = 0x6FFFFFF0,
    VerNeed = 0x6FFFFFFE,
    VerNeedNum = 0x6FFFFFFF,
    
    RelACount = 0x6ffffff9,
);

R_AMD64_PC32 :: 2;
R_AMD64_GLOB_DAT :: 6;
R_AMD64_PLT32 :: 4;
R_AMD64_64 :: 1;

MYSTERY_SPICE :: 0x10000;

//
// utils
//

DynUnpacked :: @struct {  // not a real thing in the file format
    strings: []u8;
    symbols: *Symbol;
    relocations: []RelA;
};

// be careful with this, it's called from franca_runtime_init
load_from_dynamic_header :: fn(dynamic: []Dyn) DynUnpacked #inline = {
    unpacked := DynUnpacked.zeroed();
    for dynamic { it |
        ::enum(@type it.tag);
        @match(it.tag) {
            fn StrTab() => {
                unpacked.strings.ptr = u8.ptr_from_int(it.val);
            }
            fn StrSz() => {
                unpacked.strings.len = it.val;
            }
            fn SymTab() => {
                unpacked.symbols = Symbol.ptr_from_int(it.val);
            }
            fn RelA() => {
                unpacked.relocations.ptr = RelA.ptr_from_int(it.val);
            }
            fn RelASz() => {
                unpacked.relocations.len = it.val / size_of(RelA);
            }
            @default => ();
        };
    };
    unpacked
};
