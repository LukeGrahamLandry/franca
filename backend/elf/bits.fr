Header :: @struct(
    magic: u32 = 0x464c457f, 
    class: u8 = 2, // 64-bit
    data: u8 = 1, // little endian
    header_version: u8 = 1,  // "current version"... as of 1997 (?)
    os_abi: u8 = 0,  // no extensions OR system-V depending who you ask (?)
    _pad: i64 = 0,
    type: Type,
    machine: Machine,
    version: u32 = 1,
    entry: i64,
    program_header_off: i64,
    section_header_off: i64,
    flags: u32,
    ehsize: u16,
    program_header_entsize: u16 = size_of(ProgramHeader),
    program_header_num: u16,
    section_header_entsize: u16 = size_of(SectionHeader),
    section_header_num: u16,
    section_header_names_index: u16,
);
Type :: @enum(u16) (
    None, Relocatable, Executable, Dynamic,
);
Machine :: @enum(u16) (
    none = 0, amd64 = 0x3E, arm64 = 0xB7,
);
ProgramHeader :: @struct(
    type: SegmentType,
    prot: u32,
    offset: i64,
    vaddr: i64, 
    paddr: i64,
    file_size: i64,
    mem_size: i64,
    align: i64,
);
SegmentType :: @enum(u32) (
    Null = 0, 
    Load = 1, 
    Dynamic = 2, 
    Interp = 3, 
    Note = 4, 
    Shlib = 5, 
    Phdr = 6, 
    Tls = 7,
    EHFrame = 0x6474e550,
    Stack = 0x6474e551,
    Relro = 0x6474e552,
);
SectionHeader :: @struct(
    name: u32,
    type: SectionType, 
    flags: i64,  // bit set of SectionFlag
    addr: i64,
    offset: i64, 
    size: i64,
    link: u32 = 0,
    info: u32 = 0, 
    addr_align: i64,
    ent_size: i64 = 0,
);
SectionType :: @enum(u32) (
    Null, ProgramBits, SymbolTable, StringTable, RelocAddend, 
    Hash, Dynamic, Note, Bss, RelocNoAddend, Lib, DynSymbolTable,
    InitArray, FiniArray, PreInitArray, Group, SymTabShIndex, 
);
SectionFlag :: @enum(i64) (
    Write, Alloc, Exec, _Pad, Merge, Strings, InfoLink, LinkOrder, OsNonConforming, Group, Tls,
);
Symbol :: @struct(
    name: u32,
    info: u8 = 0,
    other: u8 = 0,
    section_header_index: u16 = 0,
    value: i64 = 0,
    size: i64 = 0,
);
Rel :: @struct(
    offset: i64,
    type: u32,
    sym: u32,
);
RelA :: @struct(
    offset: i64,
    type: u32,
    sym: u32,
    addend: i64,
);
Dyn :: @struct(
    tag: DynTag,
    val: i64,
);
DynTag :: @enum(i64) (
    Null = 0, 
    Needed = 1,
    PltRelSz = 2,
    PltGot = 3,
    Hash = 4,
    StrTab = 5,
    SymTab = 6,
    RelA = 7,
    RelASz = 8,
    RelAEnt = 9,
    StrSz = 10,
    SymEnt = 11,
    Init = 12,
    Fini = 13,
    SoName = 14,
    RPath = 15,
    Symbolic = 16,
    Rel = 17,
    RelSz = 18,
    RelEnt = 19,
    PltRel = 20,
    Debug = 21,
    TextRel = 22,
    JmpRel = 23,
    BindNow = 24,
    InitArray = 25,
    FiniArray = 26,
    InitArraySz = 27,
    FiniArraySz = 28,
    RunPath = 29,
    Flags = 30,
    Encoding = 32,
    PreInitArray = 32,
    PreInitArraySz = 33,
    
    Flags_1 = 0x6FFFFFFB, 
    GnuHash = 0x6FFFFEF5,
    VerSym = 0x6FFFFFF0,
    VerNeed = 0x6FFFFFFE,
    VerNeedNum = 0x6FFFFFFF,
    
    RelACount = 0x6ffffff9,
);
