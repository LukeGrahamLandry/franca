Elf :: import("@/backend/elf/bits.fr");

// results are in temp()
fn output_elf(m: *QbeModule) [][]u8 = {
    debug_log_byte_size(m);
    patch_pending_symbols(m);
     
    code := m.segments&[.Code]&;
    code_size := code.len() - COMMANDS_SIZE_GUESS - SIZE_OF_STUBS;
    for_enum SegmentType { s | 
        m.align_to(s, 4096);
        // blink (https://github.com/jart/blink) wants 65k pages to let you turn on linear memory optimisation. 
        // which makes it a lot faster (they claim 400%, i get 20%, but still). 
        // (this is what `-Wl,-z,common-page-size=65536,-z,max-page-size=65536` i guess)
        m.align_to(s, 1.shift_left(16));
    };
    m.fixups_locked = true; // we're going to stomp the data section with relocation info so you can run it jitted anymore after this. 
    
    // TODO: don't import libc just because we have local fixups (use m.imports.len)
    fixups, symbols := collect_aot_fixups(m);
    
    // local symbols are kept seperate from imports. 
    // dynsym.sh_info is the index of the first global symbol. 
    partition_unordered(*SymbolInfo, symbols, fn(it) => it.kind == .Local);
    
    local_count := 0;
    enumerate symbols { i, s |
        s.got_lookup_offset = i;  // note: all symbols. not just imports
        local_count += int(s.kind == .Local);
    };
    have_any_imports := local_count != symbols.len;
    
    chunks := list([]u8, 10, temp());
    segment_base := u8.ptr_from_raw(m.segment_address(.Code, 0));
    commands: List(u8) = fixed_list(ptr = segment_base, len = COMMANDS_SIZE_GUESS);
    
    @assert_eq(m.goal.type, .Exe, "TODO: other types of elf");
    
    e_header := commands&.reserve_type(Elf.Header);
    e_header[] = (
        type = @match(m.goal.type) {
            fn Exe() => .Executable;
            fn Relocatable() => .Relocatable;
            fn Dynamic() => .Dynamic;
            @default => unreachable();
        },
        machine = @if(m.goal.arch == .aarch64, .arm64, .amd64),
        entry = main_entry_point_vaddr(m) + Elf.MYSTERY_SPICE,
        program_header_off = size_of(Elf.Header),
        section_header_off = 0, 
        flags = 0, // todo
        ehsize = 0, //64, // TODO?
        program_header_num = 0, // patched
        section_header_num = 0,
        section_header_names_index = 0, 
    );
    
    start_program_headers := commands.len;
    total_prog_headers := @if(symbols.len > 0, 9, 8);
    program_headers_size := total_prog_headers * size_of(Elf.ProgramHeader);
    @debug_assert_gt(commands.maybe_uninit.len, program_headers_size);
    program_headers: []Elf.ProgramHeader = (ptr = ptr_cast_unchecked(u8, Elf.ProgramHeader, commands.maybe_uninit.index_unchecked(commands.len)), len = total_prog_headers);
    commands.len += program_headers_size;
    
    program_header :: fn() => {
        e_header.program_header_num += 1;
        program_headers.index(e_header.program_header_num.zext() - 1)
    };
    
    // TODO: it seems you still need one empty one even tho they don't do anything? wtf?
    section_names := Str.list(10, temp());
    e_header.section_header_off = commands.len;
    section_header :: fn(name: Str) => {
        section_names&.push(name);
        h := commands&.reserve_type(Elf.SectionHeader);
        e_header.section_header_num += 1;
        h
    };
    section_header("")[] = Elf.SectionHeader.zeroed();
    
    p_header := program_header();
    
    dynamic_header: ?Ty(*Elf.ProgramHeader, *Elf.ProgramHeader, *Elf.ProgramHeader) = .None;
    
    virtual_offset := Elf.MYSTERY_SPICE; 
    file_offset    := 0;
    make_segment :: fn(seg: SegmentType, prot: u32) => {
        segment := m.segments&[seg]&;
        chunks&.push(live_segment_part(m, seg)); // :waste :commandsispartofcodenow
    
        program_header()[] = (
            type = .Load,
            prot = prot,
            offset = file_offset,
            vaddr = virtual_offset, 
            paddr = virtual_offset,
            file_size = segment.len(),
            mem_size = segment.len(),
            align = 4096,
        );
        
        // for static linking, local symbols are defined relative to a section so we need them even for Exe
        //section_header("")[] = (
        //    name = 0, // TODO
        //    type = .ProgramBits, 
        //    flags = 0, 
        //    //flags = 1.shift_left(@as(i64) Elf.SectionFlag.Exec),
        //    addr = virtual_offset,  
        //    offset = file_offset, 
        //    size = segment.len(),
        //    addr_align = 4096,
        //);
        
        virtual_offset += segment.mmapped.len;
        file_offset += segment.len();
        header
    };
    
    // TODO: we're asking it to map the elf info like you need to for mach-o but probably shouldn't do that here. 
    
    // the LOAD headers are required to be in order. 
    
    make_segment(.Code, RX); RX :: 5;// :waste :commandsispartofcodenow
    make_segment(.ConstantData, RW); R :: 4; // :waste  // TODO: how the fuck do i do relocations in a non-writable segment?
    make_segment(.MutableData, RW); RW :: 6;
    
    // BSS
    {
        segment := m.segments&[.ZeroInitData]&;
        program_header()[] = (
            type = .Load,
            prot = RW,
            offset = file_offset,
            vaddr = virtual_offset, 
            paddr = virtual_offset,
            file_size = 0,
            mem_size = segment.len(),
            align = 4096,
        );
        virtual_offset += segment.len();
    };
    
    if symbols.len > 0 {
        interp := @if(have_any_imports, program_header(), Elf.ProgramHeader.ptr_from_int(0));
        dynamic_header = (Some = (interp, program_header(), Elf.ProgramHeader.ptr_from_int(0)));
    };
    
    if dynamic_header& { it |
        it._2 = program_header();  // TODO: can this get moved up? or does it have to be after all load commands? 
    };
    
    payload := u8.list(CHAINED_SIZE_GUESS, temp());
    
    program_header()[] = (
        type = .Stack,
        prot = RW,
        offset = 0,
        vaddr = 0, 
        paddr = 0,
        file_size = 0,
        mem_size = 16777216,
        align = 0,
    );
    
    dynamics := Elf.Dyn.list(10, temp());
    
    p_header[] = (
        type = .Phdr,
        prot = 4,
        offset = size_of(Elf.Header),
        vaddr = size_of(Elf.Header) + Elf.MYSTERY_SPICE, 
        paddr = size_of(Elf.Header) + Elf.MYSTERY_SPICE,
        file_size = program_headers_size,
        mem_size = program_headers_size,
        align = 8,
    );
    
    if dynamic_header { it |
        interp_header, load_payload_header, dynamic_header := it;
        if have_any_imports {
            loader_path := "/lib64/ld-linux-x86-64.so.2\0";
            size := loader_path.len;
            addr := virtual_offset + payload.len;
            interp_header[] = (
                type = .Interp,
                prot = R,
                offset = file_offset + payload.len,
                vaddr = addr, 
                paddr = addr,
                file_size = size,
                mem_size = size,
                align = 1,
            );
            payload&.push_all(loader_path);
            payload&.zero_pad_to_align(8);
        };
        
        // SectionHeader.link: Relocations -> DynSymbolTable -> StringTable
        // This is conceptually the same, it's just that the section headers don't do anything (?)
        
        string_table_start := payload.len;
        imported_symbol_name_offsets := u32.list(symbols.len, temp());
        payload&.push(0);  // null
        
        for glibc_dylib_paths { name |
            off := payload.len - string_table_start;
            payload&.push_all(name);
            payload&.push(0);
            dynamics&.push(tag = .Needed, val = off);
        };
        
        dynamics&.push(tag = .Flags, val = 8);  // DF_BIND_NOW // TODO: does this do anything?
        dynamics&.push(tag = .Flags_1, val = 1);  // ?     // TODO: does this do anything?
        dynamics&.push(tag = .Debug, val = 0);  // ?     // TODO: does this do anything?
        
        //dynamics&.push(tag = .BindNow, val = 0);  // TODO: does this do anything? 
        
        for symbols { info |
            @debug_assert_eq(info.got_lookup_offset, imported_symbol_name_offsets.len);
            imported_symbol_name_offsets&.push(trunc(payload.len - string_table_start));
            @debug_assert(info.name.len > 0 && info.name[info.name.len - 1] != 0, "empty symbol name or extra null terminator will not go well");
            payload&.push_all(info.name);
            payload&.push(0);
        };
        
        // ugh
        string_table_index := e_header.section_header_num;
        section_header(".dynstr")[] = (
            name = 0,
            type = .StringTable, 
            flags = 1.shift_left(@as(i64) Elf.SectionFlag.Strings),
            addr = 0,
            offset = file_offset + string_table_start, 
            size = payload.len - string_table_start,
            addr_align = 1,
        );
        
        dynamics&.push(tag = .StrTab, val = virtual_offset + string_table_start);
        dynamics&.push(tag = .StrSz, val = payload.len - string_table_start);
        payload&.zero_pad_to_align(8);
        symbol_table_start := payload.len;
        payload&.reserve_type(Elf.Symbol)[] = Elf.Symbol.zeroed();  // null
        for symbols { symbol |
            STT_FUNC :: 2;
            xx := payload&.reserve_type(Elf.Symbol);
            local := symbol.kind == .Local;
            // TODO: for static linking don't add segment_base?
            segment_base := Elf.MYSTERY_SPICE + ptr_diff(m.segments&[.Code].mmapped.ptr, m.segments&[symbol.segment].mmapped.ptr);
            xx[] = (
                name = imported_symbol_name_offsets[symbol.got_lookup_offset],
                info = if(local, => 0, => 1).shift_left(4).bit_or(2).trunc(), // GLOBAL FUNC
                value = @if(local, segment_base + symbol.offset, 0),
                section_header_index = 0, // TODO: for static linking? trunc(@if(local, @as(i64) symbol.segment.raw() + 1, 0)),  // :SegmentOrderMatters
            );
        };
        
        // ugh
        symbol_table_index := e_header.section_header_num;
        section_header(".dynsym")[] = (
            name = 0, // TODO
            type = .DynSymbolTable, 
            flags = 2, // TODO: what does this mean? 
            addr = 0,  // TODO: clang has some virtual place here
            offset = file_offset + symbol_table_start, 
            size = payload.len - symbol_table_start,
            addr_align = 8,
            ent_size = size_of(Elf.Symbol),
            link = string_table_index.zext(),
            info = local_count.trunc() + 1, 
        );
        
        dynamics&.push(tag = .SymTab, val = virtual_offset + symbol_table_start);
        dynamics&.push(tag = .SymEnt, val = size_of(Elf.Symbol));
        
        relocation_table_start := payload.len;
        // TODO: do they have to be ordered by memory location like mach-o?
        each fixups { fix |
            it := fix.fix.type.DataAbsolute;
            i64.ptr_from_raw(fix.fix.patch_at)[] = 0;
            payload&.reserve_type(Elf.RelA)[] = (
                sym = trunc(fix.symbol.got_lookup_offset + 1),
                offset = ptr_diff(m.segments&[.Code].mmapped.ptr, fix.fix.patch_at) + Elf.MYSTERY_SPICE, // TODO: or is it offset in a specific segment?
                addend = it.increment,
                type = Elf.R_AMD64_GLOB_DAT, // 8 R_AMD64_RELATIVE // R_AMD64_64 1 // R_AMD64_GLOB_DAT 6  // R_AMD64_JUMP_SLOT 7,  // TODO: what does this mean?
            );
        };
        
        // ugh
        section_header(".rela.dyn")[] = (
            name = 0,
            type = .RelocAddend, 
            flags = 2, // TODO: what does this mean? 
            addr = 0,  // TODO: clang has some virtual place here
            offset = file_offset + relocation_table_start, 
            size = payload.len - relocation_table_start,
            addr_align = 8,
            ent_size = size_of(Elf.RelA),
            link = symbol_table_index.zext(),
        );
        dynamics&.push(tag = .RelA, val = virtual_offset + relocation_table_start);
        dynamics&.push(tag = .RelASz, val = payload.len - relocation_table_start);
        dynamics&.push(tag = .RelAEnt, val = size_of(Elf.RelA));
        
        dynamics&.push(tag = .Null, val = 0);
        
        dynamics := dynamics.items().interpret_as_bytes();
        addr := virtual_offset + payload.len;
        
        // ugh
        section_header(".dynamic")[] = (
            name = 0,
            type = .Dynamic, 
            flags = 2,
            addr = addr, 
            offset = file_offset + payload.len, 
            size = dynamics.len,
            ent_size = size_of(Elf.Dyn),
            addr_align = 8,
        );
        
        code := m.segments&[.Code]&;
        section_header(".plt")[] = (
            name = 0, // TODO
            type = .ProgramBits, 
            flags = 1.shift_left(@as(i64) Elf.SectionFlag.Exec),
            addr = Elf.MYSTERY_SPICE + COMMANDS_SIZE_GUESS, 
            offset = COMMANDS_SIZE_GUESS, 
            size = m.stubs&.len(),
            addr_align = 1,
        );
        section_header(".text")[] = (
            name = 0, // TODO
            type = .ProgramBits, 
            flags = 1.shift_left(@as(i64) Elf.SectionFlag.Exec),
            addr = Elf.MYSTERY_SPICE + COMMANDS_SIZE_GUESS + SIZE_OF_STUBS,  
            offset = COMMANDS_SIZE_GUESS + SIZE_OF_STUBS, 
            size = code_size,
            addr_align = 1,
        );
        
        dynamic_header[] = (
            type = .Dynamic,
            prot = RW,
            offset = file_offset + payload.len,
            vaddr = addr, 
            paddr = addr,
            file_size = dynamics.len,
            mem_size = dynamics.len,
            align = 8,
        );
        payload&.push_all(dynamics);
        size := payload.len();
        load_payload_header[] = (
            type = .Load,
            prot = RW,
            offset = file_offset,
            vaddr = virtual_offset, 
            paddr = virtual_offset,
            file_size = size,
            mem_size = size,
            align = 4096,
        );
        
        // TODO: I think it really doesn't need the names so maybe i can take this out. 
        {
            e_header.section_header_names_index = e_header.section_header_num;
            header := section_header(".shstrtab");
            
            offsets := u32.list(temp());
            string_table_start := payload.len;
            for section_names { n |
                offsets&.push(trunc(payload.len - string_table_start));
                payload&.push_all(n);
                payload&.push(0);
            };
            header[] = (
                name = 0,
                type = .StringTable, 
                flags = 0,
                addr = 0,
                offset = file_offset + string_table_start, 
                size = payload.len - string_table_start,
                addr_align = 1,
            );
            
            ptr := ptr_cast_unchecked(u8, Elf.SectionHeader, commands.maybe_uninit.ptr.offset(e_header.section_header_off));
            s_headers: []Elf.SectionHeader = (ptr = ptr, len = e_header.section_header_num.zext());
            enumerate s_headers { i, h |
                h.name = offsets[i];
            };
        };
        
        file_offset += size;
        virtual_offset += size;
    };
    
    end := commands.len;
    @assert_le(end, COMMANDS_SIZE_GUESS, "we guessed wrong so the array resized and all the pointers are junk");
    commands.len = COMMANDS_SIZE_GUESS;
    commands.items().rest(end).set_zeroed();
    @assert_le(payload.len, CHAINED_SIZE_GUESS, "resized and now the pointers are junk");  // TODO: don't think i need this here, just mach-o did
    if payload.len != 0 {
        chunks&.push(payload.items());
    };
    
    chunks.items()
}
