// The RISC-V Instruction Set Manual Volume I:
// > https://riscv.org/specifications/ratified/ -> https://drive.google.com/file/d/1uviu1nH-tScFfgrovvFCrj7Omv8tFtkp/view

// (ordered by encoding, named by usage in calling convention)
RvReg :: @enum(u8) (
    // integers
    Zero, 
    RA, SP, GP,  TP, T0, T1, T2, FP, S1,
    A0, A1, A2,  A3, A4, A5, A6, A7, 
    S2, S3, S4,  S5, S6, S7, S8, S9, S10, S11,
    T3, T4, T5, _T6,
    
    // floats
    FT0, FT1, FT2, FT3, FT4, FT5, FT6, FT7,
    FS0, FS1,
    FA0, FA1, FA2, FA3, FA4, FA5, FA6, FA7,
    FS2, FS3, FS4, FS5, FS6, FS7, FS8, FS9, FS10, FS11,
    FT8, FT9, FT10, _FT11,
);

Opcode :: @enum(u7) (
    lui   = 0b0110111, // load upper immidiate
    auipc = 0b0010111, // add upper immidiate to pc
    // "and link" means write next pc to a register, so dest=zero register for just normal jump
    jal   = 0b1101111, // jump and link
    jalr  = 0b1100111, // jump to register and link
    // they don't have a flags register. compare 2 registers and jump based on the result is one instruction. 
    bcmp  = 0b1100011, // branch if cmp
    load  = 0b0000011,  // I
    loadf = 0b0000111,  // I
   store  = 0b0100011,  // S
   storef = 0b0100111,  // S
   op_imm = 0b0010011,  // I
   op     = 0b0110011,  // R
   opw    = 0b0011011,
);

// with .op or .op_imm
OpI :: @enum(u3) (
    add  = 0b000,
    slt  = 0b010,
    sltu = 0b011,
    xor  = 0b100,
     or  = 0b110,
    and  = 0b111,
    sll  = 0b001, // imm prefix = 0
    srl  = 0b101, // imm prefix = 0 for logical or 0100000 for arithmetic
);

Bcmp :: @enum(i64) (
    beq  = 0b000,
    bne  = 0b001,
    blt  = 0b100,
    bge  = 0b101,
    bltu = 0b110,
    bgeu = 0b111,
);

ecall  :: 0b000000000000_0000000000000_1110011;
ebreak :: 0b000000000001_0000000000000_1110011;

// off is measured in bytes
// link = pc + 4; pc = (target + off) &~1;
fn jalr(target: RvReg, off: i12, link: RvReg) u32 = {
    I(off, target.bits(), 0, link.bits(), .jalr)
}

// note: `off` is always a multiple of 2 so the low bit is ignored
// link = pc + 4; pc += off;
fn jal(off: i21, link: RvReg) u32 = 
    J(off, link.bits(), .jal);

fn load(dest: RvReg, addr: RvReg, off: i12, size_bytes: i64, zero_extend: bool, float: bool) u32 #inline = 
    I(off, addr.bits(), mem_width(size_bytes, zero_extend), dest.bits(), @if(float, .loadf, .load));

fn store(value: RvReg, addr: RvReg, off: i12, size_bytes: i64, float: bool) u32 #inline = 
    S(off, value.bits(), addr.bits(), mem_width(size_bytes, false), @if(float, .storef, .store));

// width for funct3 of load/store
mem_width :: fn(size_bytes: i64, zero_extend_load: bool) u3 = {
    @debug_assert(size_bytes == 1 || size_bytes == 2 || size_bytes == 4 || size_bytes == 8);
    @as(u3) @as(i64) size_bytes.trailing_zeros().bit_or(zero_extend_load.int().shift_left(2))
}

//
// produce an address via an i32 relative offset from the current instruction. 
// auipc => tmp = (20 bits immediate).shift_left(12).sign_extend(32 -> 64).add(pc);
//  add  => out = (12 bit immediate).sign_extend(12 -> 64).add(tmp);
//
// Note that both immediates are sign extended. This is NOT the same as 
// sign extending [hi:lo] and adding that to pc. If the high bit of the lo immediate 
// is set, it will act as a subtraction. So to compensate, add one to the hi immediate. 
//
// In contrast to arm where you compute the address of the previous page (always <= the target)
// and then add the low u12 bits. Here you compute the address of the nearest page boundary (in 
// either direction) and then adjust by i12 bits. 
//
fn rel_off(dest: rawptr, src: rawptr, reg: RvReg, is_import: bool) Ty(u32, u32) = {
    lo, hi := double_sign_extend_imm(ptr_diff(src, dest));
    small := @if(is_import, 
        load(reg, reg, lo, 8, false, false),
        I(@as(i12) lo, reg.bits(), @as(u3) OpI.add, reg.bits(), .op_imm));
    (U(hi, reg.bits(), .auipc), small)
}

fn double_sign_extend_imm(i: i64) Ty(i12, i20) = {
    d := i + int(i.bit_and(1.shift_left(11)) != 0).shift_left(12);
    lo := @as(i64) d.imm(11, 0);
    hi := @as(i64) d.imm(31, 12);
    @debug_assert_eq(i, hi.shift_left(12).sign_extend(31) + lo.sign_extend(11), "unencodable imm: %", i);
    (@as(i12) lo, @as(i20) hi)
}

// TODO: don't name it this...
fn fits_sext(n: i64, $bit_index: i64) bool = {
    n <= 1.shift_left(bit_index) - 1 && n >= -(1.shift_left(bit_index))
}

I :: fn(i: i12, rs1: u5, funct3: u3, rd: u5, opcode: Opcode) u32 = 
    @bits(i, rs1, funct3, rd, opcode);

R :: fn(funct7: u7, rs2: u5, rs1: u5, funct3: u3, rd: u5, opcode: Opcode) u32 = 
    @bits(funct7, rs2, rs1, funct3, rd, opcode);

U :: fn(i: i20, rd: u5, opcode: Opcode) u32 = 
    @bits(i, rd, opcode);

S :: fn(i: i12, rs2: u5, rs1: u5, funct3: u3, opcode: Opcode) u32 = 
    @bits(i.imm(11, 5), rs2, rs1, funct3, i.imm(4, 0), opcode);

// note: `i` is always a multiple of 2 so the low bit is ignored
B :: fn(i: i13, rs2: u5, rs1: u5, funct3: u3, opcode: Opcode) u32 = 
    @bits(i.imm(12), i.imm(10, 5), rs2, rs1, funct3, i.imm(4, 1), i.imm(11), opcode);

// note: `i` is always a multiple of 2 so the low bit is ignored
J :: fn(i: i21, rd: u5, opcode: Opcode) u32 = 
    @bits(i.imm(20), i.imm(10, 1), i.imm(11), i.imm(19, 12), rd, opcode);

fn imm(n: ~T, $bit: i64) u1 #where = 
    imm(n, bit, bit);

fn imm(n: ~T, $left: i64, $right: i64) UInt(left-right+1) #where = {
    n := @as(i64) int n;
    count :: left - right + 1;
    mask := 1.shift_left(count) - 1;
    result := n.shift_right_logical(right).bit_and(mask);
    @if(count == 8) return(@as(u8) trunc result); // TODO: this is stupid
    @as(UInt(count)) result
};

fn bits(r: RvReg) u5 = {
    r := bit_and(@as(u8) r, 0b11111);
    @as(u5) @as(i64) r.zext()
}

// TODO: annoying. for @bits
#use("@/backend/arm64/bits.fr");
