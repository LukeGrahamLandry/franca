
EmitRv :: @struct {
    f: *Qbe.Fn;
    m: *Qbe.Module;
    start_of_function: i64;
};

rv64_emitfn :: fn(f: *Qbe.Fn) []Ty(Fixup, Qbe.Sym) = {
    e: EmitRv = (
        f = f,
        m = f.globals,
        start_of_function = f.globals.segments&.index(.Code).len(),
    );
    emit_the_code(e&);
    empty()
}

rv_scratch_int :: TMP(RvReg._T6);

// TODO: stop calling getcon here, it might reallocate when loading a cache file which seems sad  
emit_the_code :: fn(e: *EmitRv) void = {
    f := e.f;
    if f.vararg {
        e.emit(make_ins(.add, .Kl, TMP(RvReg.SP), TMP(RvReg.SP), f.getcon(-64)));
        range(0, 8) { i |
            e.emit_store_off(TMP(@as(i64) RvReg.A0.raw().zext() + i), TMP(RvReg.SP), 8*i);
        }
    }
    
    e.emit_store_off(TMP(RvReg.FP), TMP(RvReg.SP), -16);
    e.emit_store_off(TMP(RvReg.RA), TMP(RvReg.SP), -8);
    e.emit(make_ins(.add, .Kl, TMP(RvReg.FP), TMP(RvReg.SP), f.getcon(-16)));

    to_save   := f.reg.bit_and(Abi.rv64_rclob);
    save_area := to_save.count_ones().zext() * 8;
    frame := f.slot.zext().add(16).align_to(16).add(save_area).align_to(16);

    if frame <= 2048 {  // '<=' is not a mistake; there are more negative numbers than positive ones 
        e.emit(make_ins(.add, .Kl, TMP(RvReg.SP), TMP(RvReg.SP), f.getcon(-frame)));
    } else {
        e.emit(make_ins(.copy, .Kl, rv_scratch_int, f.getcon(frame), Qbe.Null));
        e.emit(make_ins(.sub, .Kl, TMP(RvReg.SP), TMP(RvReg.SP), rv_scratch_int));
    }

    off := 0;
    for_bits to_save { i |
        r := @as(RvReg) @as(u8) i.trunc();
        e.emit_store_off(TMP(r), TMP(RvReg.SP), off);
        off += 8;
    };
    
    local_labels := temp().alloc_zeroed(i64, e.f.nblk.zext());
    patches := Patch.list(e.f.nblk.zext(), temp());
    for_blocks f { b | 
        local_labels[b.id.zext()] = e.next_inst_offset();
        for_insts_forward b { i |
            e.emit(i[]);
        };
        
        @match(b.jmp.type) {
            fn hlt() => e.inst(ebreak);
            fn ret0() => {
                if f.dynalloc {
                    if frame - 16 <= 2048 {
                        e.emit(make_ins(.add, .Kl, TMP(RvReg.SP), TMP(RvReg.FP), f.getcon(-(frame - 16))));
                    } else {
                        e.emit(make_ins(.copy, .Kl, rv_scratch_int, f.getcon(frame - 16), Qbe.Null));
                        e.emit(make_ins(.sub, .Kl, TMP(RvReg.SP), TMP(RvReg.FP), rv_scratch_int));
                    }
                };
                
                off := 0;
                for_bits to_save { i |
                    r := @as(RvReg) @as(u8) i.trunc();
                    e.emit_load_off(TMP(r), TMP(RvReg.SP), off);
                    off += 8;
                };
                
                e.emit_add_off(TMP(RvReg.SP), TMP(RvReg.FP), 16 + f.vararg.int() * 64);
                e.emit_load_off(TMP(RvReg.RA), TMP(RvReg.FP), 8);
                e.emit_load_off(TMP(RvReg.FP), TMP(RvReg.FP), 0);
                e.inst(jalr(.RA, 0, .Zero)); // ret
            }
            fn jmp() => if !b.s1.identical(b.link) {
                patches&.push(target_bid = b.s1.id, offset_from_start = e.next_inst_offset(), cond = -1);
                e.inst(ebreak);
            };
            fn jnz() => {
                swap := b.link.identical(b.s2);
                if swap {
                    s := b.s1;
                    b.s1 = b.s2;
                    b.s2 = s;
                };
                @debug_assert(isreg(b.jmp.arg));
                cond := @if(swap, Qbe.Cmp.Cine, .Cieq);
                patches&.push(target_bid = b.s2.id, offset_from_start = e.next_inst_offset(), cond = cond.raw());
                e.inst(ebreak);
                if !b.s1.identical(b.link) {
                    patches&.push(target_bid = b.s1.id, offset_from_start = e.next_inst_offset(), cond = -1);
                    e.inst(ebreak);
                };
            };
            @default => unreachable();
        }
    };
    
    each patches& { p |
        target := local_labels[p.target_bid.zext()];
        @debug_assert(target != 0);  
        distance := (target - p.offset_from_start);
        code  := e.m.segments&[.Code]&;
        patch := code.mmapped.ptr.offset(e.start_of_function + p.offset_from_start);
        patch := ptr_cast_unchecked(u8, u32, patch);
        @debug_assert_eq(ebreak, patch[], "not expecting patch");
        if p.cond >= 0 {
            // Opcode.bcmp, j, b.jmp.type, zero register, b.s2
            //_ := _[p.cond.zext()];
            patch[] = todo(); 
            // TODO: assert in range
        } else {
            patch[] = jal(0, .Zero); 
            // TODO: assert in range
        };
    };
}

fixmem :: fn(e: *EmitRv, pr: *Qbe.Ref) void = {
    r := pr[];
    if rtype(r) == .RSlot {
        s := e.f.slot(r);
        if s < -2048 || s > 2047 {
            e.emit(make_ins(.copy, .Kl, rv_scratch_int, e.f.getcon(s), Qbe.Null));
            e.emit(make_ins(.add, .Kl, rv_scratch_int, TMP(RvReg.FP), rv_scratch_int));
            pr[] = rv_scratch_int;
        }
    }
}

fn emit(e: *EmitRv, i: Qbe.Ins) void = 
    emit(e, i&);
    
fn emit(e: *EmitRv, i: *Qbe.Ins) void = {
    if is_load(i.op()) {
        e.fixmem(i.arg&[0]&);
    }
    if is_store(i.op()) {
        e.fixmem(i.arg&[1]&);
    }
    
    f := e.f;
    a0 := i.arg&[0];
    @match(i.op()) {
        fn nop() => ();
        fn dbgloc() => e.m.add_debug_info(i, e.next_inst_offset());
        fn syscall() => e.inst(ecall);
        fn copy() => {
            if(i.to == a0, => return());
            if rtype(i.to) == .RSlot {
                @debug_assert(isreg(i.arg&[0]));
                i.arg&[1] = i.to;
                i.to = Qbe.Null;
                i.set_op(i.cls().store_op());
                e.emit(i);
                return();
            }
            @debug_assert(i.to.isreg());
            @match(rtype(a0)) {
                fn RCon() => {
                    c := f.get_constant(a0);
                    off := c.bits();
                    @match(c.type()) {
                        fn CBits() => if off <= 2047 && off >= -2048 {
                            e.emit(make_ins(.add, .Kl, i.to, TMP(RvReg.Zero), a0));
                        } else {
                            panic("todo: riscv copy big");
                        };
                        fn CAddr() => e.load_symbol(c, i.to.rv());
                    }
                }
                fn RSlot() => {
                    i.set_op(.load);
                    e.emit(i);
                }
                fn RTmp() => {
                    @debug_assert(a0.isreg());
                    @debug_assert(i.cls().is_int());
                    // op_imm not zero register so it disassembles to `mv` (more readable)
                    e.emit(make_ins(.add, .Kl, i.to, a0, Qbe.ConZero));
                }
                @default => unreachable();
            }
        }
        fn addr() => {
            @debug_assert(rtype(a0) == .RSlot);
            s := f.slot(a0);
            // TODO: very unfortunate precedence :compiler
            if (-s < 2048) {
                e.emit_add_off(i.to, TMP(RvReg.FP), s);
            } else {
                e.emit(make_ins(.copy, .Kl, i.to, f.getcon(s), Qbe.Null));
                e.emit(make_ins(.add, .Kl, i.to, TMP(RvReg.FP), i.to));
            }
        }
        fn call() => {
            @match(rtype(i.arg&[0])) {
                fn RCon() => {
                    c := f.get_constant(i.arg&[0]);
                    @debug_assert(c.type() == .CAddr && c.bits() == 0, "invalid call");
                    panic("todo: riscv call symbol");
                }
                fn RTmp() => {
                    link := i.arg&[1] != Qbe.RCALL_TAIL_SENTINAL;
                    e.inst(jalr(a0.rv(), 0, @if(link, .RA, .Zero)));
                }
                @default => unreachable();
            }
        }
        fn salloc() => {
            e.emit(make_ins(.sub, .Kl, TMP(RvReg.SP), TMP(RvReg.SP), i.arg&[0]));
            if i.to != Qbe.Null {
                e.emit(make_ins(.copy, .Kl, i.to, TMP(RvReg.SP), Qbe.Null));
            }
        }
        fn add() => e.simple_op(i, .add);
        @default => {
            @println("%", i.op());
            todo()
        };
    }
}

// TODO: factor together with arm/loadaddr_bits>
fn load_symbol(e: *EmitRv, c: *Qbe.Con, dest_reg: RvReg) void = {
    use_symbol(e.m, c.sym) { symbol |
        @assert(symbol.kind == .Local, "TODO: riscv relocations");
        patch_addr := e.m.segment_address(.Code, e.m.current_offset(.Code));
        inc := c.bits();
        patch: Fixup = (patch_at = patch_addr, type = (InReg = (r = dest_reg.raw().zext(), increment = inc)));
        @match(symbol.kind) {
            fn DynamicPatched() => todo();
            fn Local() => {
                distance := e.m.distance_between(.Code, e.m.current_offset(.Code), symbol.segment, symbol.offset + inc);
                @debug_assert(symbol.segment != .Code || distance < 0, "we must be jumping backwards");
                dest := e.m.segment_address(symbol.segment, symbol.offset + inc);
                i_page, i_off := rel_off(dest, patch_addr, dest_reg);
                e.inst(i_page);
                e.inst(i_off);
                
                if e.m.goal.type == .Relocatable {
                    push_fixup(e.m, symbol, patch);
                };
            }
            fn Pending() => todo();
        };
    };
}

fn simple_op(e: *EmitRv, i: *Qbe.Ins, o: OpI) void = {
    @debug_assert(i.cls().is_int(), "TODO: riscv float instruction encoding");
    a0, a1 := (i.arg&[0], i.arg&[1]);
    @debug_assert(isreg(i.to) && a0.val() < 64);
    @debug_assert(i.op() != .sar, "TODO: arithmetic");
    i := if rtype(a1) == .RCon {
        c := e.f.get_constant(a1);
        off := c.bits();
        @debug_assert(c.type() == .CBits && off <= 2047 && off >= -2048);
        I(@as(i12) off, a0.rv().bits(), @as(u3) o, i.to.rv().bits(), .op_imm)
    } else {
        R(0, a1.rv().bits(), a0.rv().bits(), @as(u3) o, i.to.rv().bits(), .op)
    };
    e.inst(i);
}

fn rv(r: Qbe.Ref) RvReg = {
    @debug_assert(r.val() < 64);
    @as(RvReg) @as(u8) r.val().trunc()
}

slot :: fn(f: *Qbe.Fn, r: Qbe.Ref) i64 = {
    s := rsval(r);
    -intcast @if(s < 0, 2 * s, f.slot - s)
}

fn inst(e: *EmitRv, opcode: u32) void = {
    code := e.m.segments&[.Code]&;
    ptr_cast_unchecked(u8, u32, code.next)[] = opcode;  // SAFETY: aligned becuase i don't do compressed instructions yet
    code.next = code.next.offset(4);
}

fn emit_store_off(e: *EmitRv, value: Qbe.Ref, addr: Qbe.Ref, off: i64) void = {
    @debug_assert(off <= 2047 && off >= -2048);
    e.inst(store(value.rv(), addr.rv(), @as(i12) off, 8, value.val() >= 32));
}

fn emit_load_off(e: *EmitRv, dest: Qbe.Ref, addr: Qbe.Ref, off: i64) void = {
    @debug_assert(off <= 2047 && off >= -2048);
    e.inst(load(dest.rv(), addr.rv(), @as(i12) off, 8, false, dest.val() >= 32));
}

fn emit_add_off(e: *EmitRv, dest: Qbe.Ref, a: Qbe.Ref, off: i64) void = {
    e.emit(make_ins(.add, .Kl, dest, a, e.f.getcon(off)));
}

fixup_rv64 :: fn(self: *QbeModule, symbol: *SymbolInfo, fixup: *Fixup, new_got_reloc: *?Fixup) void = {
    todo()
}

fn next_inst_offset(self: *EmitRv) i64 = {
    code := self.m.segments&[.Code]&;
    ptr_diff(code.mmapped.ptr, code.next) - self.start_of_function
}

#use("@/backend/lib.fr");
#use("@/backend/rv64/bits.fr");
Abi :: import("@/backend/rv64/abi.fr");

// same as qbe
/*
+=============+
| varargs     |
|  save area  |
+-------------+
|  saved ra   |
|  saved fp   |
+-------------+ <- fp
|    ...      |
| spill slots |
|    ...      |
+-------------+
|    ...      |
|   locals    |
|    ...      |
+-------------+
|   padding   |
+-------------+
| callee-save |
|  registers  |
+=============+
*/
