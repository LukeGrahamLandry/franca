// Adapted from Qbe. MIT License. Â© 2015-2024 Quentin Carbonneaux <quentin@c9x.me>

//! Various computations about a function's control flow graph.
// :Explain

fn edgedel(source: *Qbe.Blk, dest_p: **Qbe.Blk) void = {
    dest := dest_p[];
    same := identical(source.s1, source.s2);
    dest_p[] = Qbe.Blk.ptr_from_int(0);
    if(dest.is_null() || same, => return());
    
    // remove the phis along this edge.
    // this would happen for free if we used block arguments instead of phis, but phis are more convient in other passes. 
    // :MakeATestThatFails if you don't do this
    for_phi dest { p |
        a := index_in_phi(source, p);
        // remove_unordered that option from the array
        p.narg -= 1;
        p.blk[a] = p.blk[p.narg.zext()];
        p.arg[a] = p.arg[p.narg.zext()];
    };
    
    if dest.npred != 0 {
        // record that source is no longer a predecessor of dest. 
        a := 0;
        while => !dest.pred[a].identical(source) {
            @debug_assert(a + 1 < dest.npred.zext(), "tried to remove nonexistant edge (% not a predecessor of %)", source.name(), dest.name());
            a += 1;
        };
        dest.npred -= 1;
        dest.pred[a] = dest.pred[dest.npred.zext()];  // remove_unordered
    };
}

/* fill predecessors information in blocks */
fn fillpreds(f: *Qbe.Fn) void = {
    for_blocks f { b |
        b.npred = 0;
        b.visit = 0;
    };
    // count first so we don't have to resize the array
    for_blocks f { b |
        for_jump_targets b { s | 
            s.npred += 1;
        };
    };
    for_blocks f { b |
        for_jump_targets b { s | 
            addpred(b, s);
        };
    };
    
    addpred :: fn(bp: *Qbe.Blk, bc: *Qbe.Blk) void = {
        if bc.pred.first.is_null() {
            bc.pred = new(bc.npred.zext());
        } else {
            bc.pred&.grow(bc.npred.zext());
        };
        bc.pred[bc.visit.zext()] = bp;
        bc.visit += 1;
    };
}

fn rporec(b: *Qbe.Blk, x: i32) i32 = {
    if b.is_null() || b.id != -1 {
        return(x);
    };
    b.id = 1;
    s1 := b.s1;
    s2 := b.s2;
    if !s1.is_null() && !s2.is_null() && s1.loop > s2.loop {
        s1 = b.s2;
        s2 = b.s1;
    };
    x = rporec(s1, x);
    x = rporec(s2, x);
    b.id = x;
    @debug_assert(x != -1, "did you lie about f.nblk?");
    x - 1
}

/* fill the rpo information */
fn fillrpo(f: *Qbe.Fn) void = {
    for_blocks f { b | 
        b.id = -1;
    };
    xxx: i32 = f.nblk - 1;
    n := rporec(f.start, xxx) + 1;
    f.nblk = f.nblk - n;
    if f.rpo.first.is_null() {
        f.rpo = new(f.nblk.zext());
    } else {
        f.rpo&.grow(f.nblk.zext());
    };
    p := f.start&;
    while => !p[].is_null() {
        b := p[];
        if b.id == -1 {
            ::enum(Qbe.J);
            @debug_assert_ne(b.jmp.type, .switch, "C");
            edgedel(b, b.s1&);
            edgedel(b, b.s2&);
            p[] = b.link;
        } else {
            b.id -= n;
            f.rpo[b.id.zext()] = b;
            p = b.link&;
        }
    }
}

/* for dominators computation, read
 * "A Simple, Fast Dominance Algorithm"
 * by K. Cooper, T. Harvey, and K. Kennedy.
 */

fn inter(b1: *Qbe.Blk, b2: *Qbe.Blk) *Qbe.Blk = {
    if(b1.is_null(), => return(b2));
    while => !b1.identical(b2) {
        if b1.id < b2.id {
            bt := b1;
            b1 = b2;
            b2 = bt;
        };
        while => b1.id > b2.id {
            b1 = b1.idom;
            @debug_assert(!b1.is_null(), "null idom");
        }
    };
    b1
}

fn filldom(f: *Qbe.Fn) void = {
    for_blocks f { b |
        b.idom = Qbe.Blk.ptr_from_int(0);
        b.dom = Qbe.Blk.ptr_from_int(0);
        b.dlink = Qbe.Blk.ptr_from_int(0);
    };
    dowhile {
        changed := false;
        range(1, f.nblk.zext()) { n |
            b := f.rpo[n];
            d := Qbe.Blk.ptr_from_int(0);
            for_pred b { p |
                if !p.idom.is_null() || p.identical(f.start) {
                    d = inter(d, p);
                }
            };
            if !d.identical(b.idom) {
                changed = true;
                b.idom = d;
            }
        };
        changed
    };
    
    for_blocks f { b | 
        d := b.idom;
        if !d.is_null() {
            @debug_assert(!d.identical(b), "can't idom youself");
            b.dlink = d.dom;
            d.dom = b;
        };
    };
}

fn sdom(b1: *Qbe.Blk, b2: *Qbe.Blk) bool = {
    @debug_assert(!b1.is_null() && !b2.is_null(), "sdom null");
    if(b1.identical(b2), => return(false));
    while => b2.id > b1.id {
        b2 = b2.idom;
        @debug_assert(!b2.is_null(), "sdom!");
    };
    b1.identical(b2)
}

fn dom(b1: *Qbe.Blk, b2: *Qbe.Blk) bool #inline = 
    b1.identical(b2) || sdom(b1, b2);

fn addfron(a: *Qbe.Blk, b: *Qbe.Blk) void = {
    range(0, a.nfron.zext()) { n | 
        if a.fron[n].identical(b) {
            return();
        }
    };
    if a.nfron == 0 {
        a.nfron += 1;
        a.fron = new(1);
    } else {
        a.nfron += 1;
        a.fron&.grow(a.nfron.zext());
    };
    a.fron[a.nfron.zext() - 1] = b;
}

/* fill the dominance frontier */
fn fillfron(f: *Qbe.Fn) void = {
    for_blocks f { b | 
        b.nfron = 0;
    };
    for_blocks f { b |
        for_jump_targets b { s | 
            a := b;
            while => !sdom(a, s) {
                addfron(a, s);
                a = a.idom;
            };
        };
    }
}

LoopMark :: @FnPtr(hd: *Qbe.Blk, b: *Qbe.Blk) void;

fn loopmark(hd: *Qbe.Blk, b: *Qbe.Blk, func: LoopMark) void = {
    if b.id < hd.id || b.visit == hd.id {
        return();
    };
    b.visit = hd.id;
    func(hd, b);
    for_pred(b, fn(p) => loopmark(hd, p, func));
}

fn loopiter(f: *Qbe.Fn, func: LoopMark) void = {
    for_blocks f { b | 
        b.visit = -1;
    };
    range(0, f.nblk.zext()) { n | 
        b := f.rpo[n];
        for_pred b { pred | 
            if pred.id.zext() >= n {
                loopmark(b, pred, func);
            }
        };
    };
}

fn is_pred(b: *Qbe.Blk, s: *Qbe.Blk) bool = {
    for_pred s { pred | 
        if(identical(b, s), => return(true));
    };
    false
}


// :Explain (used for spilling huristic)
fn fillloop(f: *Qbe.Fn) void = {
    for_blocks f { b | 
        b.loop = 1;
    };

    // TODO: should allow infering type for non '=>' functions when used like this. 
    //       tho this syntax is suposed to be the same as a '=>' so maybe this is sketchy. 
    //       but its so obvious that this does what you expect its probably not a big deal. 
    loopiter f { _: *Qbe.Blk, b: *Qbe.Blk | 
        b.loop = intcast(b.loop.zext() * 10);
    };
}

/* requires rpo and no phis, breaks cfg */
// - Replaces returns with jumps to a single new block so the codegen only needs to emit one epilogue. 
// - Replaces chains of unconditional jumps through empty blocks with just jumping directly to the end.  
// - Replaces conditional jumps that go to the same place (perhaps created by the above) with unconditional jumps.
fn simplify_jump_chains(f: *Qbe.Fn) void = {
    epilogue := newblk();
    epilogue.id = f.nblk;
    f.nblk += 1;
    epilogue.jmp.type = .ret0;
    direct_jumps := temp().alloc_zeroed(*Qbe.Blk, f.nblk.zext());
    for_blocks f { b | 
        @debug_assert(b.phi.is_null(), "simpljmp requires no phis");
        
        if b.jmp.type == .ret0 {
            b.jmp.type = .jmp;
            b.s1 = epilogue;
        };
        if b.ins.len == 0 && b.jmp.type == .jmp {
            update_target(b.s1&, direct_jumps);
            if !b.s1.identical(b) { // avoids infinite loop while processing single block infinite loop
                direct_jumps[b.id.zext()] = b.s1;
            }
        }
    };
    last_link := ptr_from_int(*Qbe.Blk, 0);
    for_blocks f { b |
        last_link = b.link&;
        // TODO: make sure it's ok that this skips duplicates. 
        //       i think it's fine because it rechecks the list every time and it wont be a duplicate if it changed. 
        for_jump_targets_mut(b) { s |
            update_target(s, direct_jumps);
        };
        if b.jmp.type == .jnz && b.s1.identical(b.s2) {
            b.jmp.type = .jmp;
            b.s2 = Qbe.Blk.ptr_from_int(0);
        };
    };
    @debug_assert(!last_link.is_null() && last_link[].is_null(), "invarient: f.start exists and b.link doesn't loop");
    last_link[] = epilogue; // append our new block to the linked list. 
}

fn update_target(pb: **Qbe.Blk, uf: []*Qbe.Blk) void = {
    old_entry := uf[pb[].id.zext()]&;
    if !old_entry[].is_null() {
        update_target(old_entry, uf);
        pb[] = old_entry[];
    }
}

fn newblk() *Qbe.Blk = 
    temp().box_zeroed(Qbe.Blk);

fn replacepred(blks: QList(*Qbe.Blk), nblk: i64, to: *Qbe.Blk, from: *Qbe.Blk) void = {
    range(0, nblk) { n | 
        if blks[n].identical(from) {
            blks[n] = to;
            return();
        };
    };
    @panic("pred not found for % -> %", from.name(), to.name());
}

/* replace b.pred[] and p.blk[] entries */
fn replacepreds(s: *Qbe.Blk, to: *Qbe.Blk, from: *Qbe.Blk) void = {
    if(s.is_null(), => return());
    @debug_assert(s.npred != 0, "expected preds");
    replacepred(s.pred, s.npred.zext(), to, from);
    for_phi s { p |
        @debug_assert_eq(p.narg, s.npred, "expected a phi source for each predecessor");
        replacepred(p.blk, p.narg.zext(), to, from);
    };
}

/* remove marked-dead blks - marked as fn.rpo[id] == 0 */
fn killblks(f: *Qbe.Fn) void = {
    pb := f.start&;
    while => !pb[].is_null() {
        if !f.rpo[pb.id.zext()].is_null() {
            pb = pb.link&;
        } else {
            pb[] = pb.link;
        };
    };
}

/* merge linear jmp chains */
/* requires rpo pred, breaks cfg use */
// [a -> b -> c -> (d or e)] becomes [abc -> (d or e)]
fn blkmerge(f: *Qbe.Fn) void = {
    when_debug(f, .Block) { out |
        write(out, "\n## Block merge:\n");
    };
    
    vins: RawList(Qbe.Ins) = empty();
    /* linear jmp chains will be consecutive in rpo */
    curb := ptr_from_int(Qbe.Blk, 0);
    bid := 0;
    changed := false;
    while => bid < f.nblk.zext() { 
        b := f.rpo[bid];
        ::ptr_utils(Qbe.Blk);
        if curb.is_null() {
            curb = b;
            @debug_assert_eq(vins.len, 0);
        } else {
            // This block will be merged into the previous block so we don't need it anymore. 
            f.rpo[bid] = ptr_from_int(Qbe.Blk, 0);
        };
        
        // :CreepyNop
        // This seems wasteful, it does an extra copy for any block that isn't part of a jump chain.
        // But if you change that, you still need to clear out the nop instructions or it doesn't work, 
        // and it seems to end up being slower that way. TODO: so that's a bit off putting... 
        // This was also why disabling inlining didn't work for a while (because i was also not calling blkmerge). 
        addbins(b, vins&);
        
        ::ptr_utils(Qbe.Phi);
        if b.jmp.type != .jmp || b.s1.npred != 1 || !b.s1.phi.is_null() {
            // b does not end in a linear jump so put all the collected instructions in curb. 
            { t := curb.ins; curb.ins = vins; vins = t; };
            vins.len = 0;
            curb.jmp = b.jmp;
            for_jump_targets_mut b { s |
                replacepreds(s[], curb, b);
            };
            curb.s1 = b.s1;
            curb.s2 = b.s2;
            curb = ptr_from_int(Qbe.Blk, 0);
        } else {
            @debug_assert(b.s1.id.zext() == bid + 1, "rpo not in order");
            when_debug(f, .Block) { out |
                @fmt(out, "#    merging blocks @% -> @%\n", b.name(), b.s1.name());
                changed = true;
            };
        };
        bid += 1;
    };
    @debug_assert(curb.is_null(), "still have blocks??");
    killblks(f);
    if changed {
        printfn(f, f.globals.debug_out);  
    };
    flush_debug(f.globals);
}

// unused. 
// example that fixes :CreepyNop
fn clear_nops(b: *Qbe.Blk) void = {
    j := 0;
    range(0, b.ins.len) { i |
        if b.ins[i]&.op() != .nop {
            if i != j {
                b.ins[j] = b.ins[i];
            };
            j += 1;
        }
    };
    b.ins.len = j;
}

fn set_link_from_rpo(f: *Qbe.Fn) void = {
    @debug_assert(identical(f.rpo.first[], f.start), "wrong start block");
    // We have a linear array but want a linked list for some reason. 
    range(0, f.nblk.zext() - 1) { n |
        f.rpo[n].link = f.rpo[n + 1];
    };
    f.rpo[f.nblk.zext() - 1].link = Qbe.Blk.ptr_from_int(0);   
}

fn index_in_phi(dest: *Qbe.Blk, p: *Qbe.Phi) i64 = {
    n := 0;
    // find the value the phi needs to have when coming from this block.
    while => !p.blk[n].identical(dest) {
        @debug_assert(n+1 < p.narg.zext(), "expected phi value when coming from %", dest.name());
        n += 1;
    };
    n
}

#use("@/backend/lib.fr");
