// Adapted from Qbe. MIT License. Â© 2015-2024 Quentin Carbonneaux <quentin@c9x.me>

/* liveness analysis
 * requires rpo computation
 */
fn fill_liveness(f: *Qbe.Fn) void = {
    target := f.globals.target;
    
    // all the places we loop twice is once for floats and one for ints. 
    
    // Before each iteration we save the previous results and then check if anything changed.
    saved_out     := init_bitset(f.ntmp.zext());
    liveon_output := init_bitset(f.ntmp.zext());
    
    for_blocks f { b |
        bsinit(b.in&,  f.ntmp.zext());
        bsinit(b.out&, f.ntmp.zext());
        bsinit(b.gen&, f.ntmp.zext());
    };
    changed := true;
    nrglob := count_ones(target.rglob);
    while => changed {
        changed = false;
        for_blocks_rpo_rev f { b |
            bscopy(saved_out&, b.out&);
            for_jump_targets_mut b { s |
                live_on_edge(liveon_output&, b, s[]);
                bsunion(b.out&, liveon_output&);
            };
            changed = changed || !bsequal(b.out&, saved_out&);
            // saved_out and liveon_output are dead below. we just keep them outside the loop to reuse thier memory. 
            
            live_count := Array(i32, 2).zeroed();
            b.out.t[] = b.out.t[].bit_or(target.rglob);
            bscopy(b.in&, b.out&);
            for b.in& { t |
                live_count&[KBASE(f.get_temporary(t)[].cls)] += 1;
            };
            if rtype(b.jmp.arg) == .RCall {
                @debug_assert(bscount(b.in&) == nrglob && b.in.t[] == target.rglob, "only globally live registers may be live at ret");
                
                // This jmp.arg is a number describing the argsclass. 
                // The target converts that to the bitset of registers that will be used for the return.
                @debug_assert(b.jmp.type.is_ret());
                return_registers := {target.retregs}(b.jmp.arg, live_count&);
                b.in.t[] = b.in.t[].bit_or(return_registers);
            } else {
                @debug_assert(rtype(b.jmp.arg) != .RMem);
                // otherwise, the arg could be a conditional branch, which is just a normal read. 
                add_read(b.jmp.arg, b, live_count&, f.tmp);
            };
            b.nlive = live_count; 
            
            for_insts_rev b { i |
                i := i[];
                if rtype(i.arg&[1]) == .RCall {
                    @debug_assert(@is(i.op(), .call, .syscall), "RCall on non-call");
                    counts := Array(i32, 2).zeroed(); // TODO: just use multiple return values instead of passing this in.
                    b.in.t[] = b.in.t[].bit_and(bit_not({target.retregs}(i.arg&[1], counts&)));
                    range(0, 2) { k |
                        live_count&[k] -= counts&[k];
                        /* caller-save registers are used
                        * by the callee, in that sense,
                        * right in the middle of the call,
                        * they are live: */
                        live_count&[k] += target.nrsave&[k];
                        if live_count&[k] > b.nlive&[k] {
                            b.nlive&[k] = live_count&[k];
                        };
                    };
                    
                    // Ref.RCall stores the argsclass, convert that to the bitset of registers to be used. 
                    counts := Array(i32, 2).zeroed(); // TODO: just use multiple return values instead of passing this in.
                    arg_registers := {target.argregs}(i.arg&[1], counts&);
                    b.in.t[] = b.in.t[].bit_or(arg_registers);
                    range(0, 2) { k |
                        live_count&[k] -= target.nrsave&[k];
                        live_count&[k] += counts&[k];
                    };
                };
                if i.to != QbeNull {
                    // This instruction has an output. 
                    @debug_assert(rtype(i.to) == .RTmp, "can only assign to temporaries");
                    t := i.to.val();
                    if bshas(b.in&, t) {
                        live_count&[KBASE(f.get_temporary(t)[].cls)] -= 1;
                    };
                    bsset(b.gen&, t);
                    bsclr(b.in&, t);
                };
                
                // we read our arguments so track them as inputs to the block. 
                for i.arg& { r | 
                    if rtype(r) == .RMem {
                        ma := f.get_memory(r);
                        add_read(ma.base, b, live_count&, f.tmp);
                        add_read(ma.index, b, live_count&, f.tmp);
                    } else {
                        add_read(r, b, live_count&, f.tmp);
                    };
                };
                
                range(0, 2) { k |
                    if live_count&[k] > b.nlive&[k] {
                        b.nlive&[k] = live_count&[k];
                    };
                };
            };
        };
    };

    if f.globals.debug["L".char()] {
        f.debug_dump_liveness();
    };
}

// We know source_block jumps to dest_block;
// We're outputting into `result` to add to `source_block.out`. 
// note: spill.fr uses this too
fn live_on_edge(result: *Qbe.BSet, source_block: *Qbe.Blk, dest_block: *Qbe.Blk) void = {
    // Start by assuming all inputs to dest must be outputs of source.
    bscopy(result, dest_block.in&);
    
    // If a phi in dest writes to a tmp, we don't care what value that tmp had in source (because we're setting it now).
    // (control flow can have loops, so its fine for a block before to read a value being made now, that's what phi nodes represent) 
    for_phi dest_block { p |
        if rtype(p.to) == .RTmp {
            bsclr(result, p.to.val());
        }
    };
    
    // If a phi in dest is set when entering from source, the arg of that phi is an output of source (becuase we're reading it right now). 
    for_phi dest_block { p |
        a := p.arg[index_in_phi(source_block, p)];
        if rtype(a) == .RTmp {
            bsset(result, a.val());
            bsset(source_block.gen&, a.val());
        }
    };
}

// Add the tmp to `in` and `gen` of the block and if it's new, add it to the count for its register class. 
fn add_read(r: Qbe.Ref, b: *Qbe.Blk, live_count: *Array(i32, 2), temporaries: QList(Qbe.Tmp)) void #inline = {
    rtype(r) == .RTmp || return();
    i := r.val();
    bsset(b.gen&, i);
    if !bshas(b.in&, i) {
        idx := KBASE(temporaries[i].cls);
        live_count[idx] += 1;
        bsset(b.in&, i);
    };
}
