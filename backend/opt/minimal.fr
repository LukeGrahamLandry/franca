//! This is a worse alternative to the spill+rega passes. 
//! You probably never want to use it but it's a useful source of truth for debugging miscompilations. 
//! It's super dumb: never holds values in registers, inserts redundant load-store pairs, etc. 
//! IT ALSO DOES NOT WORK, its really just for niche testing!

// do this after abi+isel
fn minimal_rega(f: *Qbe.Fn) void = {
    @assert(f.globals.goal.arch == .aarch64, "TODO: choose available register numbers for x64");
    f.reset_scratch();
    f.insert_phi_copies();
    for_blocks f { b |
        @debug_assert(b.jmp.arg == QbeNull || rtype(b.jmp.arg) == .RCall, "jmp args must be removed already");
        for_insts_rev b { i |
            f.lower(i[]);
        };
        f.copy_instructions_from_scratch(b);
    };
    
    f.slot += 4;
    /* align the locals to a 16 byte boundary */
    /* specific to NAlign == 3 */
    f.slot += f.slot.zext().bit_and(3).intcast();
    
    if f.globals.debug["R".char()] {
        out := f.globals.debug_out;
        write(out, "\n> Stack mappings:\n");
        range(Qbe.Tmp0, f.ntmp.zext()) { i |
            t := f.get_temporary(i);
            if t.slot != -1 {
                @fmt_write(out, "(%, S%) ", t.name(), t.slot);
            } else {
                @fmt_write(out, "(%, DEAD) ", t.name());
            };
        };
        write(out, "\n> After naive lowering:\n");
        printfn(f, out);
    };
}

fn lower(f: *Qbe.Fn, i: *Qbe.Ins) void = {
    if i.op() == .copy && i.to == QbeNull {  // hacky fake one after a call for other rega 
        return();
    };
    assert(i.op() != .swap, "TODO: swap");
   
    sa := f.assign_slot(i.arg&[0]);
    sb := f.assign_slot(i.arg&[1]);
    sc := f.assign_slot(i.to);
    sd: ?Qbe.Ref = .None;
    se: ?Qbe.Ref = .None;
    m  := Qbe.Addr.ptr_from_int(0);
    if rtype(i.arg&[1]) == .RMem {
        m = f.get_memory(i.arg&[1]);
        sd = f.assign_slot(m.base);
        se = f.assign_slot(m.index);
    };
    if rtype(i.arg&[0]) == .RMem {
        @debug_assert(rtype(i.arg&[1]) != .RMem);
        m = f.get_memory(i.arg&[0]);
        sd = f.assign_slot(m.base);
        se = f.assign_slot(m.index);
    };
    
    ka := if(sa.is_none(), => Qbe.Cls.Kw, => argcls(i, 0));
    kb := if(sb.is_none(), => Qbe.Cls.Kw, => argcls(i, 1));
    ra := if(sa.is_none() || is_int(ka),  => TMP(11), => TMP(17 + 32));
    rb := if(sb.is_none() || is_int(kb),  => TMP(12), => TMP(18 + 32));
    rc := if(is_int(i.cls()),             => TMP(13), => TMP(19 + 32));
    rd := TMP(14);
    re := TMP(15);

    if sc { sc |
        store_idx: i64 = i.cls().raw().zext();
        o := store_ops[store_idx];
        f.emit(o, .Kw, QbeNull, rc, sc);
        i.to = rc;
    };
    
    if sa.is_some() {
        i.arg&[0] = ra;
    };
    if sb.is_some() {
        i.arg&[1] = rb;
    };
    if sd.is_some() {
        m.base = rd;
    };
    if se.is_some() {
        m.index = re;
    };
    
    f.emit(i[]);
    
    if sa { sa | 
        f.emit(.load, ka, ra, sa, QbeNull);
    };
    if sb { sb | 
        f.emit(.load, kb, rb, sb, QbeNull);
    };
    if sd { sd | 
        f.emit(.load, .Kl, rd, sd, QbeNull);
    };
    if se { se | 
        f.emit(.load, .Kl, re, se, QbeNull);
    };
}

fn assign_slot(f: *Qbe.Fn, r: Qbe.Ref) ?Qbe.Ref = {
    if(rtype(r) != .RTmp || r.val() < Qbe.Tmp0, => return(.None));
    t := f.get_temporary(r);
    if t.slot == -1 {
        t.slot = f.slot;
        f.slot += 2;
    };
    (Some = SLOT(t.slot))
}

// this is the same operation as /* 4. emit remaining copies in new blocks */ in rega.fr
// it's not quite equivilent to just inserting copies at the end of b becuase you might not have the same phis in both jump targets. 
// see the `eucl.ssa` test for an example where this matters.
fn insert_phi_copies(f: *Qbe.Fn) void = {
    if(f.nblk == 1, => return());
    f.reset_scratch();
    blist := Qbe.Blk.ptr_from_int(0);
    count := f.nblk;
    if true {
        break :: local_return;
        for_blocks f { b |
            if(b.id >= count, => break());
            // TODO: if there's only one jump target, it would be fine to insert the copies at the end of `b` instead of makign an extra block. 
            for_jump_targets_mut b { sp |
                continue :: local_return;
                s := sp[];
                if(s.phi.is_null(), => continue());
                blk := newblk();
                
                // TODO: this is wrong. you need parallel moves i think. :moves
                for_phi s { p | 
                    n := index_in_phi(b, p);
                    f.emit(.copy, p.cls, p.to, p.arg&.index(n)[], QbeNull);
                    p.blk[n] = blk;
                };
                
                blk.link = blist;
                blist = blk;
                blk.id = count;
                count += 1;  // don't change f.nblk yet as that would infinite loop
                blk.jmp.type = .jmp;
                blk.s1 = s;
                sp[] = blk;
                // TODO: order shoudn't matter. this is just a HACK that makes the simple tests pass for now. :moves
                //       its not a huge deal this codepath isn't used for real programs so its not a huge deal. 
                //       just a sanity check that lets you turn off the compilicated register allocator. 
                f.copy_instructions_from_scratch_reversed_which_means_forwards(blk);
                l: List(u8) = (maybe_uninit = blk.name&.items(), len = 0, gpa = panicking_allocator); // :UnacceptablePanic
                @fmt(l&, "%_%", b.name(), s.name());
            };
        };
    };
    found := false;
    for_blocks f { b |
        b.phi = Qbe.Phi.ptr_from_int(0);
        if b.id < f.nblk && b.link.is_null() {
            @debug_assert(!found);
            found = true;
            b.link = blist;
        };
    };
    @debug_assert(found);
    f.nblk = count;
}
