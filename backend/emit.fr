SegmentCursor :: @struct(
    mmapped: []u8,
    next: *u8,
);

SegmentType :: @enum(i64) (
    Code,
    MutableData,
    ConstantData,
);

SymbolInfo :: @tagged(
    // We haven't compiled this yet so we've emitted references as lookups into a table in the data section. 
    Pending: @struct(fixups: RsVec(Relocation), jit_lookup_offset: i64),  // :SameFieldOffset
    // We've already compiled this and we know its close to the code and addressable by a static offset. 
    Local:   @struct(segment: SegmentType, offset: i64),
    // This is a dynamic import. 
    // - For jit, references still go through the table because that means we didn't have to make the code memory writeable again if it already started executing. 
    // - For aot, you may want to go through the fixups again and translate them to use a GOT section. 
    //   That way you don't make the loader waste time patching two tables. 
    Dynamic: @struct(fixups: RsVec(Relocation), jit_lookup_offset: i64, aot_lookup_offset: i64),  // :SameFieldOffset
);

RelocationType :: @tagged(
    InReg: @struct(r: i64, increment: i64),
    Call,
);

Relocation :: @struct(
    patch_at: *u8,
    type: RelocationType,
);

// TODO: i dont trust calling this multiple times on the same module... thats important to fix. 
fn make_exec(self: *QbeModule) void = {
    prot := bit_or(@as(i64) MapProt.Exec, @as(i64) MapProt.Read);
    end := self.segments&[.Code].next&;
    len := self.start_of_writable_code.ptr_diff(end[]);
    if(len == 0, => return());
    res := mprotect(u8.raw_from_ptr(self.start_of_writable_code), len, prot); 
    assert(res.value.eq(0), "mprotect failed");
    clear_instruction_cache(u8.raw_from_ptr(self.start_of_writable_code), u8.raw_from_ptr(end[]));
        
    PAGE_SIZE :: 16384; // TODO: ask the os for this. we're wasting hella memory on linux. 
    page_start := u8.int_from_ptr(end[]) / PAGE_SIZE * PAGE_SIZE;
    end[] = u8.ptr_from_int(page_start + PAGE_SIZE);
    self.start_of_writable_code = end[];
}

fn get_addr(self: *QbeModule, name: Str) ?rawptr = {
    name := name.maybe_borrow_cstr(temp());
    self.get_addr(name)
}

fn get_addr(self: *QbeModule, name: CStr) ?rawptr = {
    id := self.intern(name);
    if self.symbols&.get_ptr(id) { s | 
        @match(s) {
            fn Local(s) => {
                segment := self.segments&[s.segment];
                addr := segment.mmapped.ptr.offset(s.offset);
                return(Some = u8.raw_from_ptr(addr));
            }
            @default => ();
        };
    };
    .None
}

// TODO: be able to specify mutable or constant
fn new_emit_data(self: *QbeModule, dat: *Qbe.Dat) void = {
    self.emit_data_to_segment(dat);
    if self.want_text_asm {
        fn emitdat(_0: *Qbe.Dat, _1: *FILE) void #import("qbe"); // :TodoPort
        emitdat(dat, global_module[].outf);
    };
    if self.want_llvm {
        self.emit_llvm(dat);
    };
}

// Used when doing our own bytes. Not needed for emitting text asm/llvm. 
fn emit_data_to_segment(self: *QbeModule, dat: *Qbe.Dat) void = {
    ::enum(@type dat.type);
    segment := self.segments&[.MutableData]&;
    next := segment.next&;
    @match(dat.type) {
        fn DStart() => {
            segment.align_to(8);
            id := self.intern(dat.name);
            self.do_jit_relocations(id, .MutableData, segment.mmapped.ptr.ptr_diff(next[]));
        }
        fn DEnd() => ();
        fn DZ() => {
            range(0, dat.u.num) { _ |
                next[][] = 0;
                next[] = next[].offset(1);
            };
        }
        fn DB() => {
            @debug_assert(!dat.isref, "can't have a byte sized pointer");
            next[][] = dat.u.num.trunc();
            next[] = next[].offset(1);
        }
        fn DL() => {
            @assert_eq(u8.int_from_ptr(next[]).mod(8), 0, "sorry can't do unaligned constants yet");
            ptr := ptr_cast_unchecked(u8, i64, next[]);
            if dat.isref {
                @assert(dat.u.ref.off == 0, "sorry can't do offset refs yet");
                name := dat.u.ref.name;
                value := or self.get_addr(name) {
                    panic("TODO: data relocations (data containing pointer to data/func declared later)")
                };
                ptr[] = int_from_rawptr(value); // TODO: we have to record that we did this somewhere for aot.
            } else {
                ptr[] = dat.u.num;
            };
            next[] = next[].offset(8);
        }
        fn DW() =>  {
            @debug_assert(!dat.isref, "can't have a w sized pointer");
            @assert_eq(u8.int_from_ptr(next[]).mod(4), 0, "sorry can't do unaligned constants yet");
            ptr_cast_unchecked(u8, u32, next[])[] = dat.u.num.trunc();
            next[] = next[].offset(4);
        }
        fn DH() =>  {
            @debug_assert(!dat.isref, "can't have a h sized pointer");
            @assert_eq(u8.int_from_ptr(next[]).mod(2), 0, "sorry can't do unaligned constants yet");
            ptr_cast_unchecked(u8, u16, next[])[] = dat.u.num.trunc();
            next[] = next[].offset(2);
        }
    }
}

// TODO: have this emit to text too so you don't have to do both
fn add_code_bytes(self: *QbeModule, name: CStr, bytes: []u8) void = {
    name_id := self.intern(name);
    code := self.segments&[.Code]&;
    code.align_to(4);
    start_offset := ptr_diff(code.mmapped.ptr, code.next);
    self.do_jit_relocations(name_id, .Code, start_offset);
    dest := slice(code.next, bytes.len);
    dest.copy_from(bytes);
    code.next = code.next.offset(bytes.len);
}

fn align_to(s: *SegmentCursor, align: i64) void = {
    extra := u8.int_from_ptr(s.next).mod(align);
    if extra != 0 {
        s.next = s.next.offset(align - extra); 
    };
}

fn put_jit_addr(self: *QbeModule, name: CStr, addr: rawptr) void = {
    // TODO: insert if not already there. 
    if self.symbols&.get_ptr(self.intern(name)) { it | 
        if it.is(.Dynamic) || it.is(.Pending) {
            self.put_jit_addr_in_table(it.Dynamic.jit_lookup_offset, u8.ptr_from_raw(addr));
            // TODO: if pending make it dynamic. 
            // TODO: error if local
        };
    };
}

// :SLOW insanely inefficient way of doing this. especially when someone tries to add multiple libs. 
// TODO: keep track of which need to be filled
fn fill_pending_dynamic_imports(self: *QbeModule, lib: DlHandle) void = {
    each self.symbols& { id, it | 
        if it.is(.Dynamic) || it.is(.Pending) {
            name := self.str(id);
            found := lib.dlsym(name);
            if !found.is_null() {
                // :SameFieldOffset
                self.put_jit_addr_in_table(it.Dynamic.jit_lookup_offset, u8.ptr_from_raw(found));
            } else {
                // TODO: remove this and report at the end.
                @eprintln("jit missing symbol %", name); // wrong once they add multiple dylibs
            }
        };
    };
}

fn fill_from_libc(self: *QbeModule) void = {
    if find_os_libc_dylib() { libc_path | 
        libc := dlopen(libc_path, .Lazy);
        if !libc.lib.is_null() { 
            self.fill_pending_dynamic_imports(libc);
        };
    };
}
