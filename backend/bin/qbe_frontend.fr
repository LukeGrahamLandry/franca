#!/usr/bin/env franca
//! This is just for running Qbe's test files. 
//! As a convinence you can pass -r to run directly (if the qbe ir has a main() function and doesn't require a driver c program).
//! For Franca's normal interaction with the backend we just generate the ir in memory. 
// TODO: Should try to get Hare to compile with this instead of Qbe as a source of more tests. 
//       I'm a bit worried that there might be some shapes of programs that Franca never generates but I can't articulate an example.        

LINK_QBE_C :: true;
#include_std("backend/lib.fr");
fn main() void = { 
    // Have to smuggle this through qbe's parser callback that doesn't let you pass a data pointer.
    global_module :: @static(QbeModule);
    
    outpath := "-";
    inpath := "-";
    run := false;
    debug := false;
    want_exe := false;
    slow := false;
    args := cli_args();
    pop :: fn() => {
        args.ptr = args.ptr.offset(1);
        args.len -= 1;
    };
    flags := i64.list(temp());
    goal := QbeOutputPurpose.AsmText;
    arch := query_current_arch().unwrap();
    while => args.len > 0 {
        a := args[0].str();
        @switch(a) {
            @case("-t?") => exit(0); // TODO: qbe prints the name of default target
            @case("-t") => { 
                pop();
                target := args[0].str(); // TODO
                @switch(target) {
                    @case("arm64_apple") => { arch = .aarch64; };
                    @case("amd64_apple") => { arch = .x86_64; };
                    @case("amd64_sysv")  => panic("TODO: flip the switch on linux abi");
                    @case("arm64")       => panic("TODO: flip the switch on linux abi");
                    @default => @panic("unsupported target option '%'", target);
                };
                pop();
            };
            @case("franca") => pop();
            @case("-o") => {
                pop();
                outpath = args[0].str();
                pop();
            };
            @case("-d") => {
                debug = true;
                pop();
                for args[0].str() { c |     
                    found := false;
                    for_enum Qbe.DebugKey { key | 
                        if key.raw() == c.zext() {
                            found = true;
                        }
                    };
                    @assert(found, "invalid -d flag %", c);
                    flags&.push(c.zext());
                };
                pop();
            };
            @case("-r") => {
                run = true;
                goal = .JitOnly;
                pop();
            };
            @case("-h") => {
                print(HELP);
                exit(0);
            };
            @case("-e") => {
                want_exe = true;
                goal = .Exe;
                pop();
            };
            @case("-c") => {
                want_exe = true;
                goal = .Relocatable;
                pop();
            };
            @case("-s") => {
                slow = true;
                pop();
            };
            @default => {
                if a.ends_with(".fr") {// TODO: ugh don't care about the file extension 
                    pop();
                } else {
                    if a.starts_with("-") && a != "-" {
                        @panic("Unknown option %", a);
                    };
                    inpath = a;
                    pop();
                }
            };
        };
    };
    global_module[] = init_default_module(type = goal, os = query_current_os(), arch = arch);
    for flags { d | 
        global_module[].debug.items()[d] = true;
    };
    
    ::if(*FILE);
    ::ptr_utils(FILE);
    //@eprintln(";% -> %", inpath, outpath);
    outfile := if debug || run {    
        assert(outpath == "-", "not yet implemented: output the debug dump to the -o arg.");
        global_module[].want_text_asm = false;
        fopen("/dev/null".sym().c_str(), "w".sym().c_str())
    } else {
        if outpath == "-" {
            fdopen(STD_OUT, "a".sym().c_str())
        } else {
            fopen(outpath.maybe_borrow_cstr(temp()), "w".sym().c_str())
        }
    };
    !outfile.is_null(); // TODO: compiler bug. tried to call uncompiled if you do it first in the macro. :FUCKED
    @assert(!outfile.is_null(), "failed to open outpu '%'", outpath);
    infile := if inpath == "-" {
        fdopen(STD_IN, "r".sym().c_str())
    } else {
        fopen(inpath.maybe_borrow_cstr(temp()), "r".sym().c_str())
    };
    @assert(!infile.is_null(), "failed to open input '%'", inpath);
    
    INFILE :: @static(*FILE);
    INFILE[] = infile;
    global_module[].outf = outfile;
    
    handle_dbg :: fn(s: CStr) void = ();
    
    handle_fn :: fn(fnn: *Qbe.Fn) void = {
        fnn.globals = global_module;  // if you got it from qbe's parser it doesn't set this. 
        run_qbe_passes(fnn);
    };
    handle_fn_slow :: fn(fnn: *Qbe.Fn) void = {
        fnn.globals = global_module;  // if you got it from qbe's parser it doesn't set this.     
        run_qbe_passes_slow(fnn);
    };
    handle_data :: fn(d: *Qbe.Dat) void = {
        global_module.new_emit_data(d);
    };
    if slow {
        parse(infile, "<file>".sym().c_str(), handle_dbg, handle_data, handle_fn_slow);
    } else {
        parse(infile, "<file>".sym().c_str(), handle_dbg, handle_data, handle_fn);
    };
    if want_exe {
        // TODO: just stick this in emitfin?
        chunks := output_macho(global_module);
        for chunks { chunk | 
            write(outfile, chunk);
        };
        fclose(outfile);
    } else {
        {global_module[].target.emitfin}(global_module[].outf);
    };
    
    fclose(infile);
    if run {
        global_module.fill_from_libc();
        global_module.make_exec();
        f := or global_module.get_addr("main") {
            panic("couldn't find main()")
        };
        f := assume_types_fn(Arg = void, Ret = i64, ptr = f);
        status := f();
        exit(status);
    };
    exit(0);
}

HELP :: """qbe_frontend [OPTIONS] {file.ssa, -}
	-h          prints this help.
	-o file     output to file.
	-d <flags>  dump debug information.
	-r          jit and run main() without outputting asglobal_module.
	            can call functions from libc.
""";

// You probably don't want to call this one!
run_qbe_passes_slow :: fn(fnn: *Qbe.Fn) void = {
    mark := __temp_alloc.mark();
    m := fnn.globals;
    filluse :: fill_use;
    
    if fnn.globals.debug["P".char()] {
        out := fnn.globals.debug_out;
        write(out, "\n> After parsing:\n");
        printfn(fnn, out);
    };
    
    {m.target.abi0}(fnn);
    
    fillrpo(fnn);
    fillpreds(fnn);
    filluse(fnn);
    convert_to_ssa(fnn);
    filluse(fnn);
    ssacheck(fnn); // debug
    
    {m.target.abi1}(fnn);
    simplify(fnn);
    filluse(fnn); 
    
    {m.target.isel}(fnn);
    
    minimal_rega(fnn);
    fnn.fillrpo();
    set_link_from_rpo(fnn);  // :LinkIsNowRpo
    
    {m.target.emitfn}(m, fnn, m[].outf);
    __temp_alloc.reset_retaining_capacity(mark);
};