#!/usr/bin/env franca
//! You want the test runner external to the program being tested so you don't have to think about crashes. 
//! TODO: Maybe I should make it a goal to make this sort of script like thing less painful. 
//!
//! [test.fr] [options] ['all' or list of .ssa files]
//!     -v    show output on failure.  

fn main() void = {
    eprintln("note: this is slow because it recompiles the backend from scratch for each test and runs it in the old unoptimising JIT.");
    eprintln("====");
    // TODO: cli args for these too
    tests_folder := "bindings/qbe/test";
    qbe_bin := "backend/bin/qbe_frontend.fr";
    //qbe_bin := "./a.out";
    
    to_run := Str.list(temp());
    args := cli_args().slice_pop_first();
    do_my_own_exes := false;
    verbose := false;
    slow := false;
    arch := query_current_arch().unwrap();
    own_parse := false;
    for args { arg |
        continue :: local_return;
        arg := arg.str();
        if arg == "franca" || arg.ends_with(".fr") {
            continue();
        };
        if arg.starts_with("-") {
            @switch(arg) {
                @case("-x86") => panic("did you mean -x64?");
                @case("-x64") => {
                    arch = .x86_64;  
                };
                @case("-e") => {
                    do_my_own_exes = true;
                };
                @case("-v") => {
                    verbose = true;
                };
                @case("-s") => {
                    slow = true;
                };
                @case("-p") => {
                    own_parse = true;
                };
                @default => @panic("unhandled flag '%'", arg);
            };
            continue();
        };
        if arg == "all" {
            walk_directory(@fmt_cstr("%", tests_folder)) { e |
                if e.name.ends_with(".ssa") && !e.name.starts_with("_") {
                    to_run&.push(items(@format("%/%", tests_folder, e.name) temp()));
                };
            };
            continue();
        };
        if arg.ends_with(".ssa") {
            to_run&.push(items(@format("%/%", tests_folder, arg) temp()));
            continue();
        };
        
        @panic("unknown argument %\n", arg);
    };
    
    @assert(!to_run.is_empty(), "nothing to run. pass filepaths or 'all'");
    passed := 0;
    failed := 0;
    for to_run { file |
        pass := run_one(qbe_bin, file, verbose, do_my_own_exes, arch, slow, own_parse);
        (@if(pass, passed&, failed&))[] += 1;
    };
    if failed == 0 {
        @println("\nAll is fine! (passed % tests)", passed);
    } else {
        @println("\n% of % tests failed.", failed, failed + passed);
        if !verbose {
            println("(run with -v to see output)");
        };
    };
    exit((failed != 0).int());
}

fn run_one(qbe_path: Str, file_path: Str, verbose: bool, do_my_own_exes: bool, arch: Arch, slow: bool, own_parse: bool) bool #inline = {
    ::FmtPad(Str);
    mark := __temp_alloc.mark();
    src := temp().read_to_string(file_path).items(); // :panic
    ir_path := "target/out/q.s";
    driver_path := "target/out/driver.c";
    obj_path_mine := "target/out/q.o";
    obj_path_driver := "target/out/d.o";
    exe_path := "target/out/q.exe";
    @print("%", f_pad(file_path, 40, .After));
    
    driver := extract_section(src, "driver");
    expected := extract_section(src, "output");
    
    args := Str.list(temp());
    if do_my_own_exes {
        args&.push(if(driver.is_some(), => "-c", => "-e"));
    };
    args&.push("-t");
    assert(query_current_os() == .macos, "TODO: flip the switch on linux abi");
    args&.push(if(arch == .aarch64, => "arm64_apple", => "amd64_apple"));
    args&.push("-o");
    args&.push(if(do_my_own_exes, => if(driver.is_some(), => obj_path_mine, => exe_path), => ir_path));
    args&.push(file_path);
    if slow {
        args&.push("-s");
    };
    if own_parse {
        args&.push("-p");
    };
    run(qbe_path, "gen ir");
        
    assert(query_current_os() == .macos, "TODO: flip the switch on linux abi");
    clang_triple := if(arch == .aarch64, => "aarch64-apple-darwin", => "x86_64-apple-darwin");

    run :: fn(exe: Str, what: Str) => {
        ok, out, err := fork_and_catch(temp()) {
            exec_cmd(exe, args.items()) 
        };
        if !ok {
            @println("[fail %]", what);
            if verbose {
                println(err.items());
                println(out.items());
            };
            return(false);
        };
    };
    
    if driver { driver_src | 
        write_entire_file(driver_path, driver_src);
        args&.clear();
        args&.push_all(@slice("-target", clang_triple, "-c", "-o", obj_path_driver, driver_path));
        run("clang", "driver");
    };
    
    if do_my_own_exes && driver.is_none() {
        // Tim Apple likes to waste my time. 
        args&.clear();
        args&.push_all(@slice("-s", "-", exe_path));
        run("codesign", "compile ir");
    } else {
        if !do_my_own_exes {
            args&.clear();
            args&.push_all(@slice(ir_path, "-target", clang_triple, "-c", "-o", obj_path_mine));
            run("clang", "compile ir");
        };
        
        args&.clear();
        if driver { _ |
            args&.push(obj_path_driver);
        };
        args&.push_all(@slice(obj_path_mine, "-o", exe_path, "-target", clang_triple));
        run("clang", "link");
    };
    args&.clear();
    args&.push_all(@slice("a", "b", "c"));
    ok, out, err := fork_and_catch(temp()) {
        exec_cmd(exe_path, args.items()) 
    };
    if !ok {
        @println("[fail run]");
        if verbose {
            println(err.items());
            println(out.items());
        };
        return(false);
    };
    
    if expected { expected | 
        if expected != out.items() {
            @println("[fail output]");
            if verbose {
                println(err.items());
                println(out.items());
            };
            return(false);
        };
    }; 
    println("[ok]");
    
    __temp_alloc.reset_retaining_capacity(mark);
    true
}

fn extract_section(src: Str, name: Str) ?Str = {
    out: List(u8) = list(temp());
    want := items(@format("# >>> %", name) temp());
    while => src.len != 0 {
        while => src[0] != "#".ascii() {
            src = src.skip_line();
            if(src.len == 0, => return(.None));
        };
        if src.starts_with(want) {
            src = src.skip_line();
            while => !src.starts_with("# <<<") {
                chunk := src;
                // TODO: push a chunk to out
                src = src.skip_line();
                chunk = chunk.slice(0, chunk.len - src.len);
                @assert(chunk.starts_with("# "), "bad format for section: %\nline: |%|\n", name, chunk);
                if chunk.ends_with("#\n") {
                    out&.push_all(chunk.slice(2, chunk.len - 2));
                    out&.push_all("\n");
                } else {
                    out&.push_all(chunk.slice(2, chunk.len));
                };
            };
            return(Some = out.items());
        };
        src = src.skip_line();
    };
    .None
}

fn skip_line(s: Str) Str = {
    loop {
        if(s.len <= 0, => return(s));
        if s[0] == "\n".ascii() {
            return(s.slice_pop_first());
        };
        s = s.slice_pop_first();
    }
}
