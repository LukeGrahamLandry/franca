// 
// Instead of crashing immediately, try to print a stack trace first so you can see what's going on. 
// 
// This is not enabled in AOT programs by default! You have to manually set it as the panic/signal handler from your main function. 
// The stack trace will only be useful if you `-debug-info -keep-names` (which will also make your binary larger). 
// Note that -debug-info embeds the whole source code of your program in the executable. 
// 
// Traces that go through jitted code is a first class usecase. 
// To show info for an instruction pointer, we go through the list of LocationResolver and see who owns that memory. 
// - runtime: find_in_debug_info reads AotDebugInfo in the executable. 
// - comptime: the compiler includes one that inspects the asts of jitted code. 
// You can add your own as well if your program loads code dynamically.  
// 
// Basic usage (at the beginning of main()): import("@/lib/crash_report.fr")'hook_backtrace();
//           and then run your program with: FRANCA_BACKTRACE=true
//

// TODO: preallocate some stuff and set that as temp() while printing a backtrace. 
// TODO: doesn't work with -c if stuff gets rearranged 

// SAFETY: trace_(start, prev, return) must be kept in sync with the stack frame layout in backend/<arch>/emit.fr. 

trace_start :: AsmFunction(fn() rawptr = (), { #use("@/backend/arm64/bits.fr"); @const_slice(
    add_im(.X64, x0, fp, @as(u12) 0, 0b0),
    ret(),
)}, (fn(out) #use("@/backend/amd64/bits.fr") = @asm_x64(
    encode_bin(PrimaryOp.MovReg, X86Reg.rax, X86Reg.rbp),
    PrimaryOp.Ret,
) out));

// same on arm64 and amd64
trace_prev :: fn(frame: rawptr) rawptr = 
    rawptr.ptr_from_raw(frame)[];

// same on arm64 and amd64
trace_return :: fn(frame: rawptr) rawptr = 
    rawptr.ptr_from_raw(frame).offset(1)[];

STASH_ENVIRONMENT :: false; // TODO: formalize this. 
ENV_STASH :: @static(rawptr);

hook_backtrace :: fn() void = {
    if ALWAYS_BE_SIGNALLING || get_environment_variable("FRANCA_BACKTRACE").is_some() {
        if STASH_ENVIRONMENT {
            ENV_STASH[] = get_dynamic_context();
        };
    
        push_aot_debug_resolver();
        request_backtrace_on_panic();
        request_backtrace_on_signal();
    };
};

push_aot_debug_resolver :: fn() void = {
    push_resolver(@import_symbol "__franca_aot_debug_info", find_in_debug_info);
};

request_backtrace_on_panic :: fn() void = {
    context(DefaultContext)[].panic_hook = backtracing_panic_handler;
};

backtracing_panic_handler :: fn(msg: Str) Never = {
    scary_log("A franca program panicked.\n");
    scary_log(msg);
    context(DefaultContext)[].panic_hook = fn(msg) = {
        scary_log("\nPanicked while logging a backtrace.");
        scary_log(msg);
        report_backtrace_safe(fp = trace_start(), ip = 0.rawptr_from_int());
        Syscall'exit(1)
    };
    scary_log("\n");
    report_backtrace(fp = trace_start(), ip = 0.rawptr_from_int());

    Syscall'exit(1);
};

request_backtrace_on_signal :: fn() void = 
    catch_signals(fn(s, info, ctx) = { 
        signal_handler_body(info, ctx) { info, ctx |
            show_trace_and_exit(s, info, ctx);
        };
    });

#use(Posix);
    
catch_signals :: fn(handle: SignalHandler) void = {
    S :: SIG;
    useful_signals :: @const_slice(S.ILL, S.TRAP, S.BUS, S.SEGV, S.FPE, S.INT);
    for useful_signals { s |
        new: SigAction = (sa_handler = handle);
        sigaction(s, new&, zeroed(*SysSigAction)).unwrap();
    };
};

LOOPING :: @static(i64) 0;
show_trace_and_exit :: fn(s: i64, info: *SigInfo, ctx: *UContext) void = {
    scary_log("A franca program received a fatal signal.\n");
    
    if STASH_ENVIRONMENT {
        set_dynamic_context(ENV_STASH[]);
    };
    if LOOPING[] == 2 {
        scary_log("... give up\n");
        Syscall'exit(1);
    };
    
    prev := LOOPING[]; 
    LOOPING[] = 2;  // incase we crash in this switch somehow
    ip, fp := (ctx.ip, ctx.fp);
    LOOPING[] = prev;
    if LOOPING[] == 1 {
        LOOPING[] = 2;
        scary_log("... while handling a previous signal.\n");
        report_backtrace_safe(fp = fp, ip = ip);
        Syscall'exit(1);
    };
    LOOPING[] = 1;
    
    @eprintln("(signal = %, addr = %, value = %, code = %, ip = %)", info.si_signo, info.si_addr, info.si_value, info.si_code, ip);
    report_backtrace(fp = fp, ip = ip);
    Syscall'exit(1);
};

LocationResolver :: @FnPtr(userdata: rawptr, ip: rawptr) ?Str; 

LocationResolverNode :: @rec @struct(next: *LocationResolverNode, data: rawptr, func: LocationResolver);
RESOLVERS :: @static(*LocationResolverNode) zeroed(*LocationResolverNode);

// TODO: generate shitty code like this 
fn push_resolver($T: Type, data: *T, func: @FnPtr(userdata: *T, ip: rawptr) ?Str) *LocationResolverNode #generic = {
    func := ptr_cast_unchecked(@type func, LocationResolver, func&)[];
    push_resolver(T.raw_from_ptr(data), func)
}

// TODO: don't add things twice
fn push_resolver(data: rawptr, func: LocationResolver) *LocationResolverNode = {
    ::ptr_utils(LocationResolverNode);
    #use("@/lib/sys/sync/atomics.fr");
    a := general_allocator();
    node := a.box_zeroed(LocationResolverNode);  // This needs to leak!
    a.ignore_leak(LocationResolverNode, node.slice(1));
    node.data = data; 
    node.func = func;
    // There's a moment here where the node is in the slot but with next=0, 
    // which just means if someone looks at it, they'll miss the rest of the list. 
    node.next = atomic_set(*LocationResolverNode, RESOLVERS, node);
    node
}

fn pop_resolver(it: *LocationResolverNode) void = {
    ::ptr_utils(LocationResolverNode);
    prev := RESOLVERS;
    node := prev[];
    while => !node.is_null() {
        if identical(node, it) {
            atomic_set(*LocationResolverNode, prev, node.next);
            // leak the old node because you don't know if someone's looking at it. 
            return();
        };
        node = node.next;
    };
}

MAX_SHOWN :: 40;
MAX_LOOPS :: 2000;


FpIp :: @struct(fp: rawptr, ip: rawptr);

fn report_backtrace(start: FpIp) void = {
    shown := 0;
    last_ip := 0.rawptr_from_int();
    walk_stack_trace(start, MAX_LOOPS) { i, ip, _ |
        if shown >= MAX_SHOWN {
            scary_log("\n...hidden frames\n");
            return();
        };
        if !identical(ip, last_ip) {
            if name_from_ip(RESOLVERS[], ip) { s | 
                @println("  %: %", i, s);
                shown += 1;
            };
        };
        last_ip = ip;
    };
}

walk_stack_trace :: fn(it: FpIp, max_loops: i64, $body: @Fn(i: i64, ip: rawptr, fp: rawptr) void) void = {
    fp, ip := (it.fp, it.ip);  // it's too easy to swap these and call it wrong otherwise
    i := 0;
    while => !fp.is_null() && i < max_loops {
        body(i, ip, fp);
        ip = trace_return(fp);
        fp = trace_prev(fp);
        i += 1;
    };
};

name_from_ip :: fn(node: *LocationResolverNode, ip: rawptr) ?Str = {
    ::ptr_utils(LocationResolverNode);
    while => !node.is_null() {
        if node'func(node.data, ip) { s |
            return(Some = s);
        };
        node = node.next;
    };
    .None
};

// This doesn't attempt to call resolvers, it just prints raw addresses. 
fn report_backtrace_safe(start: FpIp) void = {
    shown := 0;
    last_ip := 0.rawptr_from_int();
    walk_stack_trace(start, MAX_LOOPS) { i, ip, fp |
        if shown >= MAX_SHOWN {
            scary_log("\n...hidden frames\n");
            return();
        };
        if !identical(ip, last_ip) {
            scary_log("\n");
            scary_log(i);
            scary_log(": ");
            scary_log(ip);
            scary_log(" ");
            scary_log(fp);
            shown += 1;
        };
        last_ip = ip;
    };
} 

// The backend generates one of these for an executable based on dbgloc instructions. 
// The numbers are variable width U/S LEB128.  
AotDebugInfo :: @struct {
    VERSION :: 1;
    version := VERSION;
    // order matters!
    code_segment: []u8;   // not including text_padding
    headers: []u8;        // [U off payload, U size code]
    payload: []u8;        // [U name len, name bytes, [U off in func, S off source]]
    source:  []u8;        // all the source files in the program concatenated together 
    files:   []u8;        // (U file count, [U size source, U name len, name bytes])
    nullable_cached_codemap: rawptr;  // this is kinda dumb
};

fn find_in_debug_info(userdata: rawptr, ip: rawptr) ?Str = {
    #use("@/lib/leb128.fr");
    addr := int_from_rawptr(ip);
    debug_info := AotDebugInfo.ptr_from_raw(userdata);
    if(debug_info.version != AotDebugInfo.VERSION, => return(.None));
    code_start := u8.int_from_ptr(debug_info.code_segment.ptr);
    not_mine := addr < code_start || addr >= code_start + debug_info.code_segment.len;
    if(not_mine, => return(.None));
    
    cm := ptr_cast_unchecked(rawptr, *CodeMap, debug_info.nullable_cached_codemap&);
    ::ptr_utils(CodeMap);
    if cm[].is_null() {
        a := general_allocator();
        cm[] = a.box(CodeMap);
        a.ignore_leak(CodeMap, cm[].slice(1));
        cm[][] = decode_codemap(debug_info, a);
        a.ignore_leak(File, cm.files.items());
    };
    codemap := cm[];
    
    cursor := debug_info.headers;
    off := 0;
    while => cursor.len > 0 {
        if off > debug_info.code_segment.len {
            scary_log("malformed debug info. (sum of function sized > code segment).");
            return(.None);
        };
        off_to_data, r, ok := read_leb128(cursor, false);
        cursor = r;
        size, r, ok := read_leb128(cursor, false);
        cursor = r;
        
        dist := addr - (code_start + off);
        if dist >= 0 && dist < size {
            if off_to_data > debug_info.payload.len {
                return(.None); // malformed
            };
            data := debug_info.payload.rest(off_to_data);
            name_len, r, ok := read_leb128(data, false);
            data = r;
            name := data.slice(0, name_len);
            data = data.rest(name_len);
            
            best_distance := size;
            best_byte := 0;
            off_in_func := 0;
            offset_in_source := 0;
            
            // at this point we know addr is in this function. 
            // try to find the closest dbgloc instruction to give a more precise source location. 
            // (emit_ir inserts them before each function call when compiled with -debug-info). 
            @if(debug_info.source.len != 0)
            dowhile {
                delta_off_in_func, r, ok := read_leb128(data, false);
                data = r;
                delta_offset_in_source, r, ok := read_leb128(data, true);
                data = r;
                off_in_func += delta_off_in_func;
                offset_in_source += delta_offset_in_source;
                check := dist - off_in_func;
                if check > 0 && check < best_distance {
                    best_distance = check;
                    best_byte = offset_in_source;
                };
                delta_off_in_func != 0 || delta_offset_in_source != 0
            };
            
            loc: Span = (low = best_byte.trunc(), high = best_byte.trunc() + 1);
            // TODO: this "AOT" is misleading now
            return(Some = fmt_for_trace(codemap, loc, name, "AOT"));
        };
        
        off += size;
    };
    .None
};

fn fmt_for_trace(codemap: *CodeMap, loc: Span, name: Str, tag: Str) Str = {
    out := u8.list(temp());
    @fmt(out&, "% %", name, tag);
    if loc.low != 0 && loc.high <= codemap.total_len {
        @fmt(out&, " ");
        codemap.fmt_error_line(loc, out&, true);
        out.len -= 1;
    };
    out.items()
}

#use("@/compiler/codemap.fr");
fn decode_codemap(debug_info: *AotDebugInfo, a: Alloc) CodeMap = {
    off := 0;
    bytes := debug_info.files;
    count := read_leb128(bytes&, false) || return(CodeMap.zeroed());
    files := File.list(count, a);
    range(0, count) { _ |
        size := read_leb128(bytes&, false) || return(CodeMap.zeroed());
        name := read_leb_prefixed_string(bytes&) || return(CodeMap.zeroed());
        files&.push(
            name = name, 
            content = debug_info.source.subslice(off, size), 
            start = off.trunc(),
            hash = zeroed Array(u32, 8),
        );
        off += size;
    };
    (files = files, total_len = off.trunc())
}
