//! Your globals will be safe in the invisible hash table in the sky. 
//! This is mostly useful for letting me avoid implementing thread locals. 

// A pointer to this struct is passed as a hidden parameter to (almost) every function. 
// (Soon you will be able to add your own things, to use this as tls).
DefaultContext :: @struct(
    comptime: rawptr,  // Will be null at runtime (unless you call into the compiler as a library). 
    reserved2 := 0,
    thread_index: i64,
    general_allocator: Alloc,  // this must be thread safe!
    reserved: Array(i64, 3),
    environment_variables: *CStr,  // a null terminated array of null terminated strings
    cli_arguments: []CStr,
    temporary_allocator: *ArenaAlloc,  // each thread has its own
    panic_hook: @FnPtr(msg: Str) Never,
    extra := 0,
);

// For AOT builds, the compiler generates a call to this as your program's main entry point. 
// note: whatever you had in the context at comptime is NOT baked into your program (unlike all other reachable memory).
// For jitted code, you inherit the compiler's context. (TODO: maybe that should only be for comptime/drivers)
franca_runtime_init :: fn(argc: i64, argv: *CStr, user: @FnPtr() void, envp: *CStr) void = {
    os := import("@/lib/sys/process.fr")'query_current_os();
    if(os == .linux, => fix_stack_linux(argc&, argv&, envp&));

    CAPTURE :: @static(@FnPtr() void);
    CAPTURE[] = user;
    
    impl2 :: fn(argc: i64, argv: *CStr, envp: *CStr) void = {
        push_zeroed_dynamic_context { 
            c := context(DefaultContext);
            temporary_allocator: ArenaAlloc = init(page_allocator, 1.shift_left(20));
            c.temporary_allocator = temporary_allocator&;
            c.panic_hook = print_and_exit1;
            @if(is_linking_libc(), {
                c.general_allocator = libc_allocator;
            }, {
                A :: import("@/lib/alloc/fixed_block.fr").BlockAlloc;
                general_allocator: A = init(page_allocator);
                c.general_allocator = general_allocator&.borrow();
            });
            c.cli_arguments = (ptr = argv, len = argc);
            c.environment_variables = envp;
            @if(use_threads) set_new_thread_id(c);
            fixup :: fn() void #target_os = 
                (fn($os) => @if(::(os == .linux && !is_linking_libc())) do_relocations_static_linux());
            fixup();
            
            @if(ALWAYS_BE_SIGNALLING) {
                C :: import("@/lib/crash_report.fr");
                C'request_backtrace_on_signal();
                C'request_backtrace_on_panic();
            };
            CAPTURE[]();
            exit(0);
        };
    };
    impl1 :: fn(argc: i64, argv: *CStr, envp: *CStr) void #target_os =
        (fn($os) => @if(::(os == .linux && is_linking_libc())) {
            __libc_start_main :: fn(user: @FnPtr(argc: i64, argv: *CStr, envp: *CStr) void, argc: i64, argv: *CStr, i: i64, f: i64, l: i64) i64 #libc;
            __libc_start_main(impl2, argc, argv, 0, 0, 0);
        }); 
    
    impl1(argc, argv, envp);
    impl2(argc, argv, envp);
};

// On macos (argc, argv) are passed to the entry point in registers so we're good to go. 
// But on linux, they're passed on the stack, so we have to grab them from our caller's frame. 
// Also on linux glib expects the stack to be 16 byte aligned but the kernel doesn't do that for you. 
//
// The forced #inline is important! We need this call to not fuck with the stack. 
// TODO: that's why this can't be #target_os
fn fix_stack_linux(argc: *i64, argv: **CStr, envp: **CStr) void #inline = {
    // TODO: start_trace
    #use("@/backend/amd64/bits.fr");
    #use("@/backend/arm64/bits.fr");
    fn get_fp();
    fn get_fp() i64 #c_call #asm #aarch64 = (mov(Bits.X64, x0, fp), ret());
    fn get_fp() i64 #c_call #asm #x86_bytes = fn(out) = @asm_x64(encode_bin(PrimaryOp.MovReg, X86Reg.rax, X86Reg.rbp), PrimaryOp.Ret) out;
    fn fix_stack();
    fn fix_stack() i64 #c_call #asm #aarch64 = (ret(),ret());  // hopefully unreachable. i think the stack alignment hting is much more strict on arm. 
    fn fix_stack() i64 #c_call #asm #x86_bytes = fn(out) = @asm_x64(
        // We just want to sub 8 from sp but we have to return by popping something off the stack. 
        encode_op_reg(PrimaryOp.PopBase, X86Reg.rax),
        encode_op_reg(PrimaryOp.PushBase, X86Reg.rax),
        encode_op_reg(PrimaryOp.PushBase, X86Reg.rax), 
        PrimaryOp.Ret,
    ) out;
    caller_frame := ptr_from_int(*Ty(i64, i64, CStr), get_fp())[];
    argv[] = caller_frame._2&;
    argc[] = caller_frame._1;
    @debug_assert_eq(get_fp().mod(8), 0);
    if get_fp().mod(16) != 0 {
        fix_stack();
    };
    envp[] = argv[].offset(argc[] + 1);
}

// Don't try to do relocations when loaded from a .frc 
// TODO: better would be to give you the real base address and just have a fake elf header with no relocations. 
FRHOSTED_MAGIC :u64: 0x444554534F485246;

// On linux, if we're not linking to libc, we need to handle relocating pointers in static memory ourselves. 
// Since this runs before are done, you can't use anything with a pointer stored in @static memory in this function. 
// But calls and referencing symbols is fine because they use relative addressing. 
// Just no vtables. Alloc is fine because that's just a function pointer, not a pointer to a function pointer. 
do_relocations_static_linux :: fn() void = {
    Elf :: import("@/backend/elf/bits.fr");
    base   := @import_symbol "__franca_base_address";
    if u64.ptr_from_raw(base)[] == FRHOSTED_MAGIC {
        return();
    }
    header := Elf.Header.ptr_from_raw(base);
    @debug_assert_eq(header.magic, Elf.MAGIC, "we're not in an elf file?");
    headers: []Elf.ProgramHeader = (
        ptr = Elf.ProgramHeader.ptr_from_raw(base.offset(header.program_header_off)), 
        len = header.program_header_num.zext(),
    );
    ::enum(Elf.SegmentType);
    ::enum(Elf.DynTag);
    
    ElfDynUnpacked :: @struct {
        strings: []u8;
        symbols: *Elf.Symbol;
        relocations: []Elf.RelA;
    };
    
    unpacked := ElfDynUnpacked.zeroed();
    each headers { h |
        if h.type == .Dynamic {
            // TODO: i don't super understand why i don't need to add `base` here. i guess it fixed it for me? 
            dynamic: []Elf.Dyn = (ptr = Elf.Dyn.ptr_from_int(h.vaddr), len = h.mem_size / 16);
            for dynamic { it |
                @match(it.tag) {
                    fn StrTab() => {
                        unpacked.strings.ptr = u8.ptr_from_int(it.val);
                    }
                    fn StrSz() => {
                        unpacked.strings.len = it.val;
                    }
                    fn SymTab() => {
                        unpacked.symbols = Elf.Symbol.ptr_from_int(it.val);
                    }
                    fn RelA() => {
                        unpacked.relocations.ptr = Elf.RelA.ptr_from_int(it.val);
                    }
                    fn RelASz() => {
                        unpacked.relocations.len = it.val / size_of(Elf.RelA);
                    }
                    @default => ();
                };
            };
        };
    };
    
    ::ptr_utils(Elf.Symbol);
    each unpacked.relocations { it |
        @debug_assert_eq(it.type, Elf.R_AMD64_GLOB_DAT, "TODO: unknown relocation type %", it.type);
        sym := unpacked.symbols.offset(it.sym.zext());
        dest := rawptr.ptr_from_raw(base.offset(it.offset - Elf.MYSTERY_SPICE));
        dest[] = base.offset(sym.value).offset(it.addend - Elf.MYSTERY_SPICE);
    };
};

// HACK. if context is passed in a global it will leak out from the callee. 
fn query_context_is_implicit() bool = {
    callee :: fn() void #noinline = {
        if get_dynamic_context() != rawptr_from_int(123) {
            scary_log("lost the context");
            exit(1);
        };
        set_dynamic_context(rawptr_from_int(456));  // leaks context!
    };
    old_context := get_dynamic_context();
    outer := rawptr_from_int(123);
    set_dynamic_context(outer);
    callee();
    implicit := get_dynamic_context() == outer;
    set_dynamic_context(old_context);
    implicit
}

size_of_dynamic_context :: DefaultContext.size_of(); // @builtin size_of_dynamic_context;

fn get_dynamic_context() rawptr = 
    builtin_get_dynamic_context(0);

builtin_get_dynamic_context :: fn(_: i64) rawptr #intrinsic(INTRINSIC_GET_ENV);  // :UpdateBoot
set_dynamic_context :: fn(context: rawptr) i64 #intrinsic(INTRINSIC_SET_ENV);  // :UpdateBoot

INTRINSIC_GET_ENV :: 64;
INTRINSIC_SET_ENV :: 65;

fn push_zeroed_dynamic_context($body: @Fn() void) void = {
    new_context := @uninitialized Array(u8, size_of_dynamic_context);
    new_context&.items().set_bytes(0);
    new_context := raw_from_ptr(@type new_context, new_context&);
    old_context := get_dynamic_context();
    set_dynamic_context(new_context);
    body();
    set_dynamic_context(old_context);
}

fn push_dynamic_context($body: @Fn() void) void = {
    old_context := get_dynamic_context();
    new_context := @uninitialized Array(u8, size_of_dynamic_context);
    new_context := raw_from_ptr(@type new_context, new_context&);
    if !old_context.is_null() {
        copy_no_alias(new_context, old_context, size_of_dynamic_context); 
    } else {
        scary_log("Tried to inherit null context.");
    };
    set_dynamic_context(new_context);
    body();
    set_dynamic_context(old_context);
}

// TODO: let the driver program add new fields. 
fn get_offset_to_dynamic_context_field(T: Type) i64 = {
    if T == DefaultContext {
        0
    } else {
        exit(1)
    }
}

fn context($T: Type) *T #generic = {
    off :: {
        env := get_comptime_environment();
        get_offset_to_dynamic_context_field(T)  
    };
    c := get_dynamic_context().offset(off);
    T.ptr_from_raw(c)
}

::if(rawptr);
fn scary_log(s: Str) void = {
    write(@as(Fd) (fd = 1), s.ptr, s.len);
}

fn temp() Alloc #inline = 
    context(DefaultContext)[].temporary_allocator.borrow();

fn general_allocator() Alloc #inline = 
    context(DefaultContext)[].general_allocator;

fn mark_temporary_storage() ArenaMarker = 
    context(DefaultContext)[].temporary_allocator.mark();

fn reset_temporary_storage(mark: ArenaMarker) void = 
    context(DefaultContext)[].temporary_allocator.reset_retaining_capacity(mark);
    
#inline #use("@/lib/sys/sync/atomics.fr") 
fn set_new_thread_id(ctx: *DefaultContext) void= {
    NEXT_THREAD_ID :: @static(i64) 1;  // :ThreadIdStartsAtOne
    ctx.thread_index = i64.atomic_inc(NEXT_THREAD_ID);
}

// - We saved (argc, argv) from the entry point (but someone might have changed it in the context).  
// - The memory returned here is shared with other threads. So it's probably a bad plan to mutate it. 
fn cli_args() []CStr = {
    context(DefaultContext)[].cli_arguments
}

// - We saved (envp) from the entry point (but someone might have changed it in the context).  
// - Have to iterate every time you look something up, so if you want multiple you're better off writing the loop yourself. 
// - The memory returned here is shared with other threads. So it's probably a bad plan to mutate it. 
// - fn getenv(name: CStr) CStr #libc;
fn get_environment_variable(name: Str) ?CStr = {
    envp := context(DefaultContext)[].environment_variables;
    while => !envp[].ptr.is_null() {
        if starts_with(envp[], name) && envp[][name.len] == "=".ascii() {
            return(Some = (ptr = envp[].ptr.offset(name.len + 1)));
        };
        envp = envp.offset(1);
    };
    .None
}    
