//! Your globals will be safe in the invisible hash table in the sky. 
//! This is mostly useful for letting me avoid implementing thread locals. 

// A pointer to this struct is passed as a hidden parameter to (almost) every function. 
// (Soon you will be able to add your own things, to use this as tls).
DefaultContext :: @struct(
    comptime: rawptr,  // Will be null at runtime (unless you call into the compiler as a library). 
    reserved2 := 0,
    thread_index: i64,
    general_allocator: Alloc,  // this must be thread safe!
    current_os: u8,
    prefer_syscalls: bool,
    reserved: Array(i64, 2),
    environment_variables: *CStr,  // a null terminated array of null terminated strings
    cli_arguments: []CStr,
    temporary_allocator: *Arena.Allocator,  // each thread has its own
    panic_hook: @FnPtr(msg: Str) Never,
    extra := 0,
    global: *GlobalFrancaRuntime,
    temporary_allocator_i: Alloc,
    reserved3: Array(i64, 7),
);

// These are things that need to be inherited between compliation units. 
// ie. if comptime code starts a thread, its next_thread_id needs to continue 
//     from the compiler's, not reset at 1 or mutexes don't work. 
// note: this means you can't start threads from inside push_emergency_dynamic_environment()
// note: since this is in the environment, it doesn't get baked (unlike @static), 
//       instead franca_runtime_init sets up a new one if it thinks it can't inherit one from the host. 
GlobalFrancaRuntime :: @struct {
    next_thread_id: i64;
    green_threads: rawptr;  // lib/sys/sync/green.fr/Runtime (when SLOW_USERSPACE_THREADS=true)
    // TODO: crash_report RESOLVERS should be here too, 
    //       but the main place you want that is push_emergency_dynamic_environment. 
    //       maybe should have a static for saving the last globals pointer. 
    //       same idea as STASH_ENV but more official. 
};

// TODO: comptime init from @as(Os) @as(i64) c.current_os.zext(); instead, there's no need for a ComptimeEnvironment field anymore
// this is set in franca_runtime_init and read in push_zeroed_dynamic_context
OS :: @static(ClearOnAotBake(Os)) (it = ComptimeEnvironment.ptr_from_raw(get_build_options()[].env)[].comptime_os);

// For AOT builds, the compiler generates a call to this as your program's main entry point. 
// note: whatever you had in the context at comptime is NOT baked into your program (unlike all other reachable memory).
// For jitted code, you inherit the compiler's context. (TODO: maybe that should only be for comptime/drivers)
// This also is not called for cached .frc programs run by the compiler (even though they're technically AOT too). 
franca_runtime_init :: fn(argc: i64, argv: *CStr, user: @FnPtr() void, envp: *CStr, sp: i64) void = {
    // TODO: this will be wrong if you pass >4096 cli arguments
    is_sane_pointer :: fn(p: ~T) bool #where = {
        p := bit_cast_unchecked(@type p, i64, p);
        p > 4096 && p.shift_right_logical(48) == 0
    };
    ::ptr_utils(CStr);
    
    align_stack(sp);
    #use("@/lib/sys/process.fr");
    a := query_current_arch();
    // This is very fragile. relies on compiler/worker.fr/wrap_with_runtime_init and backend/<arch>/emit.fr
    sp += @if(a == .aarch64, 0x40, @if(a == .rv64, 0x50, 0x48));
    
    // If you pass a .frc file to the compiler directly, it assumes it's a driver so the first argument 
    // will be a *ImportVTable, and we can skip the runtime setup stuff and just inherit its panic handler, etc. 
    if is_sane_pointer(argc) {
        driver_vtable_magic_offset :: offset_of(ImportVTable, Fields(ImportVTable).magic);
        p := i64.ptr_from_int(argc + driver_vtable_magic_offset)[];
        if p == DRIVER_VTABLE_MAGIC {
            c := context(DefaultContext);
            OS[].it = @as(Os) @as(i64) c.current_os.zext();
            user();
            return();
        };
    };
    
    // TODO: this is probably a stupid idea. for now it feels clever that i can guess the os by apple passing the 
    //       normal c args to the entry point in registers and linux passing them on the stack. 
    //       super fragile to rely on nobody leaving junk in the registers for this. 
    is_linux := is_sane_pointer(argc) || !is_sane_pointer(envp) || !is_sane_pointer(argv);
    
    if is_linux && a != .wasm32 {
        entry_args_from_stack_linux(argc&, argv&, envp&, sp);
    } else {
        // if the args to main looked reasonable, assume we're in a hosted libc. 
        // which is always true on macos, and true on linux if we didn't make the exe ourself 
        // so the linker inserted an extra _start wrapper before calling our wrapper before calling this function. 
        // past the end of envp, linux has the auxiliary vector which is (key, value) pairs with the 
        // key seeming to be mostly low numbers. macos has more string pointers. 
        p := envp;
        while => !p.ptr.is_null() {
            p = p.offset(1);
        };
        p = p.offset(1);
        is_linux = !is_sane_pointer(p[]);
    };
    
    OS[].it = @if(is_linux, .linux, .macos);
    @if(query_current_arch() != .wasm32)
    @assert(!(is_sane_pointer(argc) || !is_sane_pointer(envp) || !is_sane_pointer(argv)), "failed to guess os");
    
    CAPTURE :: @static(@FnPtr() void);
    CAPTURE[] = user;
    
    impl2 :: fn(argc: i64, argv: *CStr, envp: *CStr) void = {
        push_zeroed_dynamic_context {   // for now this sets c.current_os=OS[]
            c := context(DefaultContext);
            temporary_allocator: Arena.Allocator = init(page_allocator, 1.shift_left(20));
            set_temporary_allocator(temporary_allocator&);
            c.panic_hook = print_and_exit1;
            c.global = @static(GlobalFrancaRuntime);
            c.global.next_thread_id = 1;  // :ThreadIdStartsAtOne
            
            @if(SLOW_DEBUG_ALLOC, {
                general_allocator: import("@/lib/alloc/debug_alloc.fr").DebugAlloc = init();
                c.general_allocator = general_allocator&.borrow();
            }, {
                if is_linking_libc() && !NEVER_USE_LIBC_ALLOC {
                    c.general_allocator = libc_allocator;
                } else {
                    A :: import("@/lib/alloc/fixed_block.fr").BlockAlloc;
                    general_allocator: A = init(page_allocator);
                    c.general_allocator = general_allocator&.borrow();
                };
            });
            
            c.cli_arguments = (ptr = argv, len = argc);
            c.environment_variables = envp;
            @if(use_threads) set_new_thread_id(c);
            
            @if(!TODOWASM || query_current_arch() != .wasm32)
            @if(!IS_BOOTSTRAPPING)  // :UpdateBoot
            if !is_linking_libc() && query_current_os() == .linux {
                do_relocations_static_linux();
            };
            
            @if(ALWAYS_BE_SIGNALLING) {
                C :: import("@/lib/crash_report.fr");
                C'request_backtrace_on_signal();
                C'request_backtrace_on_panic();
            };
            @if(SLOW_DEBUG_ALLOC) import("@/lib/crash_report.fr")'push_aot_debug_resolver();
            @if(SLOW_USERSPACE_THREADS, 
                import("@/lib/sys/sync/green.fr")'start_main_thread(CAPTURE[]),
                CAPTURE[]());
            temporary_allocator&.deinit(); // bleh, waste of time
            @if(SLOW_DEBUG_ALLOC) general_allocator().deinit();
            Syscall'exit(0);
        };
    };

    @if(!TODOWASM || query_current_arch() != .wasm32)
    @if(!IS_BOOTSTRAPPING)
    if is_linux && is_linking_libc() {
        __libc_start_main :: fn(user: @FnPtr(argc: i64, argv: *CStr, envp: *CStr) void, argc: i64, argv: *CStr, i: i64, f: i64, l: i64) i64 #weak #libc;
        __libc_start_main(impl2, argc, argv, 0, 0, 0);
        unreachable();
    };
    
    impl2(argc, argv, envp);
};

// surely we don't need to call uname... right... right...?
fn query_current_os() Os = {
    @if(IS_BOOTSTRAPPING) return(Os.macos);
    @as(Os) @as(i64) context(DefaultContext)[].current_os.zext()
}

// On macos (argc, argv) are passed to the entry point in registers so we're good to go. 
// But on linux, they're passed on the stack, so we have to grab them from our caller's frame. 
// Also on linux glib expects the stack to be 16 byte aligned but the kernel doesn't do that for you. 
//
// The forced #inline is important! We need this call to not fuck with the stack. 
fn align_stack(s: i64) void #inline = {
    #use("@/backend/amd64/bits.fr");
    #use("@/backend/arm64/bits.fr");
    #use("@/backend/rv64/bits.fr");
    
    fix_stack :: AsmFunction(fn() void = (), {
        @const_slice(ret(),ret())  // hopefully unreachable. i think the stack alignment hting is much more strict on arm. 
    }, fn(out: *List(u8)) => @asm_x64(
        // We just want to sub 8 from sp but we have to return by popping something off the stack. 
        encode_op_reg(PrimaryOp.PopBase, X86Reg.rax),
        encode_op_reg(PrimaryOp.PushBase, X86Reg.rax),
        encode_op_reg(PrimaryOp.PushBase, X86Reg.rax), 
        PrimaryOp.Ret,
    ) out, fn(out: *List(u8)) => {
        out.push_all(@slice(0x00, 0x0B)); // 0 locals. end.
    }, @const_slice(jalr(.RA, 0, .Zero), jalr(.RA, 0, .Zero)));
    
    @debug_assert_eq(s.mod(8), 0);
    if s.mod(16) != 0 {
        fix_stack();
    };
}

//
// <low addresses>
// 
// (^^^ stack grows this way ^^^)
// [stack frame of user_main()]
// [stack frame of franca_runtime_init()]
// [stack frame of builtin_main()]
// argc  <- initial sp set by the kernel points here
// argv[0]
// ...
// argv[argc] = 0
// envp[0]
// ...
// envp[N] = 0
// aux key [0]
// aux val [0]
// ...
// aux key [M] = 0
// aux val [M] = 0
// 
// <high addresses>
//

fn entry_args_from_stack_linux(argc: *i64, argv: **CStr, envp: **CStr, sp: i64) void #inline = {
    caller_frame := ptr_from_int(Ty(i64, CStr), sp);
    argv[] = caller_frame._1&;
    argc[] = caller_frame._0;
    envp[] = argv[].offset(argc[] + 1);
}

// Don't try to do relocations when loaded from a .frc 
// TODO: better would be to give you the real base address and just have a fake elf header with no relocations. 
FRHOSTED_MAGIC :u64: 0x444554534F485246;

// On linux, if we're not linking to libc, we need to handle relocating pointers in static memory ourselves. 
// Since this runs before are done, you can't use anything with a pointer stored in @static memory in this function. 
// But calls and referencing symbols is fine because they use relative addressing. 
// Just no vtables. Alloc is fine because that's just a function pointer, not a pointer to a function pointer. 
do_relocations_static_linux :: fn() void = {
    Elf :: import("@/backend/elf/bits.fr");
    // TODO: use (maybe backwards offset from) AT_PHDR instead of this symbol, 
    //       then it should work when going through a relocatable object as well
    base   := @import_symbol "__franca_base_address";
    if u64.ptr_from_raw(base)[] == FRHOSTED_MAGIC {
        return();
    }
    header := Elf.Header.ptr_from_raw(base);
    @debug_assert_eq(header.magic, Elf.MAGIC, "we're not in an elf file?");
    headers: []Elf.ProgramHeader = (
        ptr = Elf.ProgramHeader.ptr_from_raw(base.offset(header.program_header_off)), 
        len = header.program_header_num.zext(),
    );
    ::enum(Elf.SegmentType);
    ::enum(Elf.DynTag);
        
    unpacked := Elf.DynUnpacked.zeroed();
    skew := 0;//base.int_from_rawptr() - Elf.MYSTERY_SPICE;  // this will always be zero except for my hacked blink
    each headers { h |
        if h.type == .Dynamic {
            dynamic: []Elf.Dyn = (ptr = Elf.Dyn.ptr_from_int(h.vaddr + skew), len = h.mem_size / 16);
            unpacked = Elf'load_from_dynamic_header(dynamic);
        };
    };
    
    ::ptr_utils(Elf.Symbol);
    unpacked.relocations.ptr = unpacked.relocations.ptr.offset_bytes(skew);
    each unpacked.relocations { it |
        @debug_assert(it.type == Elf.R_AMD64_64 || it.type == Elf.R_AARCH64_ABS64 || it.type == Elf.R_RISCV_64, "TODO: unknown relocation type %", it.type);
        sym := unpacked.symbols.offset(it.sym.zext()).offset_bytes(skew);
        dest := rawptr.ptr_from_raw(base.offset(it.offset - Elf.MYSTERY_SPICE));
        dest[] = base.offset(sym.value).offset(it.addend - Elf.MYSTERY_SPICE);
    };
};

size_of_dynamic_context :: DefaultContext.size_of(); // @builtin size_of_dynamic_context;

fn get_dynamic_context() rawptr = 
    builtin_get_dynamic_context(0);

builtin_get_dynamic_context :: fn(_: i64) rawptr #intrinsic(INTRINSIC_GET_ENV);  // :UpdateBoot
set_dynamic_context :: fn(context: rawptr) i64 #intrinsic(INTRINSIC_SET_ENV);  // :UpdateBoot

INTRINSIC_GET_ENV :: 64;
INTRINSIC_SET_ENV :: 65;

fn create_and_set_unsafe_environment() Ty(rawptr, *DefaultContext) #inline/*semantic*/ = {
    new_context := @uninitialized Array(u8, size_of_dynamic_context);
    new_context&.items().set_bytes(0);
    new_context := raw_from_ptr(@type new_context, new_context&);
    old_context := get_dynamic_context();
    set_dynamic_context(new_context);
    (old_context, context(DefaultContext))
}

fn push_zeroed_dynamic_context($body: @Fn() void) void = {
    old_context, c := create_and_set_unsafe_environment();
    c.current_os = (@as(i64) @as(Os) OS[].it).trunc();  // unfortunate we're not doing what the name of the function would imply
    c.prefer_syscalls = !is_linking_libc();
    
    // TODO: really this should be @must_return because it will leak outside 
    //       if you do something after the push block in the same function before returning 
    //       (but not outside the function because it's stored in a local). but im not quite 
    //       sure if i want to commit to doing things this way enough to make 
    //       compiler/main.fr/do_signals()/handle_signal() more ugly.  -- Jul 27, 2025. 
    body();
    set_dynamic_context(old_context);
}

fn push_dynamic_context($body: @Fn() void) void = {
    old_context := get_dynamic_context();
    new_context := @uninitialized Array(u8, size_of_dynamic_context);
    new_context := raw_from_ptr(@type new_context, new_context&);
    if !old_context.is_null() {
        copy_no_alias(new_context, old_context, size_of_dynamic_context); 
    } else {
        scary_log("Tried to inherit null context.");
    };
    set_dynamic_context(new_context);
    @must_return body();
    // there are places where i early return from body so you can't do anything interesting here. 
    // but the environment is stored in a local variable this set() only matters if the caller does something after the push() block. 
    set_dynamic_context(old_context);
}

fn push_emergency_dynamic_environment($body: @Fn() void) void = {
    push_zeroed_dynamic_context { // restores .os from a static 
        a: Arena.Allocator = init(page_allocator, 16000);  // :leak
        set_temporary_allocator(a&);
        context(DefaultContext)[].general_allocator = temp();
        context(DefaultContext)[].panic_hook = emergency_panic;
        body();
    };
}

emergency_panic :: fn(msg: Str) Never = {
    scary_log("panicked inside push_emergency_dynamic_environment\n");
    scary_log(msg);
    Syscall'exit(1)
};

// TODO: let the driver program add new fields. 
fn get_offset_to_dynamic_context_field(T: Type) i64 = {
    if T == DefaultContext {
        0
    } else {
        scary_exit()
    }
}

fn context($T: Type) *T #generic = {
    off :: {
        env := get_comptime_environment();
        get_offset_to_dynamic_context_field(T)  
    };
    c := get_dynamic_context().offset(off);
    T.ptr_from_raw(c)
}

::if(rawptr);
fn scary_log(s: Str) void = {

    // force a jit-shim because write() has a weird dependency on @syscall
    //_ := Syscall'write(@as(Fd) (fd = 1), s.ptr, s.len);
    impl :: fn(s: Str) void = {
        _ := Syscall'write(@as(Fd) (fd = 1), s.ptr, s.len);
    };
    f: (@FnPtr(s: Str) void) = impl;
    f(s)
}

fn temp() Alloc = {
    c := context(DefaultContext);
    @if(IS_BOOTSTRAPPING) return(c.temporary_allocator.borrow());
    @if(::(__builtin_compiler_abi < 1263)) return(c.temporary_allocator.borrow());
    c.temporary_allocator_i
}

// TODO: make this take an Alloc instead and get rid of the old ArenaAlloc field. need to kinda keep it around for isbootstrapping i think. 
fn set_temporary_allocator(a: *Arena.Allocator) void = {
    c := context(DefaultContext);
    c.temporary_allocator = a;
    c.temporary_allocator_i = a.borrow();
}
    
fn general_allocator() Alloc = 
    context(DefaultContext)[].general_allocator;

fn mark_temporary_storage() Alloc.Mark = 
    temp().mark();

fn reset_temporary_storage(mark: Alloc.Mark) void = 
    temp().reset(mark);
    
#inline #use("@/lib/sys/sync/atomics.fr") 
fn set_new_thread_id(ctx: *DefaultContext) void = {
    ctx.thread_index = i64.atomic_inc(ctx.global.next_thread_id&);
}

// - We saved (argc, argv) from the entry point (but someone might have changed it in the context).  
// - The memory returned here is shared with other threads. So it's probably a bad plan to mutate it. 
fn cli_args() []CStr = {
    context(DefaultContext)[].cli_arguments
}

// - We saved (envp) from the entry point (but someone might have changed it in the context).  
// - Have to iterate every time you look something up, so if you want multiple you're better off writing the loop yourself. 
// - The memory returned here is shared with other threads. So it's probably a bad plan to mutate it. 
// - fn getenv(name: CStr) CStr #libc;
fn get_environment_variable(name: Str) ?CStr = {
    envp := context(DefaultContext)[].environment_variables;
    while => !envp[].ptr.is_null() {
        if starts_with(envp[], name) && envp[][name.len] == "=".ascii() {
            return(Some = (ptr = envp[].ptr.offset(name.len + 1)));
        };
        envp = envp.offset(1);
    };
    .None
}    
