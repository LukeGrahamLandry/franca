//! Your globals will be safe in the invisible hash table in the sky. 
//! This is mostly useful for letting me avoid implementing thread locals. 

// A pointer to this struct is passed as a hidden parameter to (almost) every function. 
// (Soon you will be able to add your own things, to use this as tls).
DefaultContext :: @struct(
    comptime: rawptr, 
    thread_index: i64,
    reserved: Array(i64, 7),
    cli_arguments: []CStr,
    temporary_allocator: *ArenaAlloc,
    panic_hook: @FnPtr(msg: Str) Never,
);

// For AOT builds, the compiler generates a call to this as your program's main entry point. 
// note: whatever you had in the context at comptime is NOT baked into your program (unlike all other reachable memory).
// For jitted code, you inherit the compiler's context. (TODO: maybe that should only be for comptime/drivers)
franca_runtime_init :: fn(argc: i64, argv: *CStr, user_main: @FnPtr(argc: i64, argv: *CStr) void) i64 = {
    push_zeroed_dynamic_context { 
        c := context(DefaultContext);
        temporary_allocator: ArenaAlloc = init(page_allocator, 1.shift_left(20));
        c.temporary_allocator = temporary_allocator&;
        c.cli_arguments = (ptr = argv, len = argc);
        c.panic_hook = print_and_abort;
        user_main(argc, argv);
    };
    0
};

// HACK. if context is passed in a global it will leak out from the callee. 
fn query_context_is_implicit() bool = {
    callee :: fn() void #noinline = {
        if get_dynamic_context() != rawptr_from_int(123) {
            scary_log("lost the context");
            abort();
        };
        set_dynamic_context(rawptr_from_int(456));  // leaks context!
    };
    old_context := get_dynamic_context();
    outer := rawptr_from_int(123);
    set_dynamic_context(outer);
    callee();
    implicit := get_dynamic_context() == outer;
    set_dynamic_context(old_context);
    implicit
}

size_of_dynamic_context :: DefaultContext.size_of(); // @builtin size_of_dynamic_context;

fn get_dynamic_context() rawptr = 
    builtin_get_dynamic_context(0);

builtin_get_dynamic_context :: fn(_: i64) rawptr #intrinsic(.GetContext);
set_dynamic_context :: fn(context: rawptr) i64 #intrinsic(.SetContext);

fn push_zeroed_dynamic_context($body: @Fn() void) void = {
    new_context := @uninitialized Array(u8, size_of_dynamic_context);
    new_context := raw_from_ptr(@type new_context, new_context&);
    memset(new_context, 0, size_of_dynamic_context);
    old_context := get_dynamic_context();
    set_dynamic_context(new_context);
    body();
    set_dynamic_context(old_context);
}

fn push_dynamic_context($body: @Fn() void) void = {
    old_context := get_dynamic_context();
    new_context := @uninitialized Array(u8, size_of_dynamic_context);
    new_context := raw_from_ptr(@type new_context, new_context&);
    if !old_context.is_null() {
        memcpy(new_context, old_context, size_of_dynamic_context); 
    } else {
        scary_log("Tried to inherit null context.");
    };
    set_dynamic_context(new_context);
    body();
    set_dynamic_context(old_context);
}

// TODO: let the driver program add new fields. 
fn get_offset_to_dynamic_context_field(T: Type) i64 = {
    if T == DefaultContext {
        0
    } else {
        abort()
    }
}

fn context($T: Type) *T #generic = {
    off :: {
        env := get_comptime_environment();
        get_offset_to_dynamic_context_field(T)  
    };
    c := get_dynamic_context().offset(off);
    T.ptr_from_raw(c)
}

::if(rawptr);
fn scary_log(s: Str) void = {
    write(@as(Fd) (fd = 0), s.ptr, s.len);
}

fn temp() Alloc #inline = 
    context(DefaultContext)[].temporary_allocator.borrow();

fn mark_temporary_storage() ArenaMarker = 
    context(DefaultContext)[].temporary_allocator.mark();

fn reset_temporary_storage(mark: ArenaMarker) void = 
    context(DefaultContext)[].temporary_allocator.reset_retaining_capacity(mark);
