//! Your globals will be safe in the invisible hash table in the sky. 
//! This is mostly useful for letting me avoid implementing thread locals. 

// A pointer to this struct is passed as a hidden parameter to (almost) every function. 
// (Soon you will be able to add your own things, to use this as tls).
DefaultContext :: @struct(
    comptime: rawptr,  // This will be null at runtime. It's impossible to forget because the compiler can't bake a non-null rawptr. 
    thread_index: i64,
    reserved: Array(i64, 7),
    cli_arguments: []CStr,
    temporary_allocator: *ArenaAlloc,
    implicit_context_abi: bool,
    reserved2: Array(i64, 8),
    //panic_hook: @FnPtr(msg: Str) Never,
);

// The compiler generates a call to this as your program's main entry point. 
franca_runtime_init :: fn(argc: i64, argv: *CStr, user_main: @FnPtr(argc: i64, argv: *CStr) void) i64 = {
    push_zeroed_dynamic_context { 
        c := context(DefaultContext);
        temporary_allocator: ArenaAlloc = init(page_allocator, 1.shift_left(20));
        c.temporary_allocator = temporary_allocator&;
        c.cli_arguments = (ptr = argv, len = argc);
        temp().alloc(u8, 1); // coconut.jpg // TODO
        user_main(argc, argv);
    };
    0
};

// HACK. if context is passed in a global it will leak out from the callee. 
fn query_context_is_implicit() bool = {
    callee :: fn() void #noinline = {
        if get_dynamic_context() != rawptr_from_int(123) {
            scary_log("lost the context");
            abort();
        };
        set_dynamic_context(rawptr_from_int(456));  // leaks context!
    };
    old_context := get_dynamic_context();
    outer := rawptr_from_int(123);
    set_dynamic_context(outer);
    callee();
    implicit := get_dynamic_context() == outer;
    set_dynamic_context(old_context);
    implicit
}

use_single_threaded_context :: false; // @builtin use_single_threaded_context;
size_of_dynamic_context     :: DefaultContext.size_of(); // @builtin size_of_dynamic_context;
single_threaded_context     :: @static(*DefaultContext);

fn get_dynamic_context() rawptr = {
    fn builtin_get_dynamic_context(_: i64) rawptr #intrinsic(.GetContext);
    builtin_get_dynamic_context(0)
}

fn set_dynamic_context(context: rawptr) void #inline = {
    fn builtin_set_dynamic_context(context: rawptr) i64 #intrinsic(.SetContext);
    builtin_set_dynamic_context(context);
}

fn push_zeroed_dynamic_context($body: @Fn() void) void = {
    new_context := @uninitialized Array(u8, size_of_dynamic_context);
    new_context := raw_from_ptr(@type new_context, new_context&);
    memset(new_context, 0, size_of_dynamic_context);
    old_context := get_dynamic_context();
    //if !old_context.is_null() {
    //memcpy(new_context, old_context, size_of_dynamic_context);
    //};
    set_dynamic_context(new_context);
    body();
    //if get_dynamic_context() != new_context {
    //    scary_log("Context leak. Do not early return from push_zeroed_dynamic_context. Do not call set_dynamic_context directly.");
    //};
    set_dynamic_context(old_context);
}

fn push_dynamic_context($body: @Fn() void) void = {
    old_context := get_dynamic_context();
    push_zeroed_dynamic_context {
        new_context := get_dynamic_context();
        if !old_context.is_null() {
            memcpy(new_context, old_context, size_of_dynamic_context);  // :slow don't bother zeroing before 
        } else {
            scary_log("Tried to inherit null context.");
        };
        body();
    };
}

fn get_offset_to_dynamic_context_field(T: Type) i64 = {
    if T == DefaultContext {
        0
    } else {
        abort()
    }
}

fn context($T: Type) *T #generic #inline = {
    off :: {
        env := get_comptime_environment();
        get_offset_to_dynamic_context_field(T)  
    };
    T.ptr_from_raw(get_dynamic_context().offset(off))
}

//:: init_dynamic_context();
::if(rawptr);
fn scary_log(s: Str) void #inline = {
    write(@as(Fd) (fd = 0), s.ptr, s.len);
}

fn init_dynamic_context() void = {
    if get_dynamic_context().is_null() {
        scary_log("comptime init_dynamic_context found null context but expected to inherit from the compiler.");
    };
    fill_first_context();
}

fn fill_first_context() void #inline = {
    // this is not what you want
    //new_context_ :: @static(Array(u8, size_of_dynamic_context));
    //new_context := raw_from_ptr(@type new_context_[], new_context_);
    //set_local_dynamic_context(new_context);
    
    context := context(DefaultContext);
    context.thread_index = 0;
    context.temporary_allocator = init(page_allocator, 1.shift_left(20));
    //context.panic_hook = print_and_abort;
    // TODO: crippling problem with this type of seperate init, comptime code before us can reference the variable 
    //       and cause its declaration early but that won't make this code run early.  
}

fn temp() Alloc #inline = 
    context(DefaultContext)[].temporary_allocator.borrow();

fn mark_temporary_storage() ArenaMarker = 
    context(DefaultContext)[].temporary_allocator.mark();

fn reset_temporary_storage(mark: ArenaMarker) void = 
    context(DefaultContext)[].temporary_allocator.reset_retaining_capacity(mark);
