fn quicksort($T: Type, $my_le: @Fn(a: *T, b: *T) bool) (@Fn(self: []T) void) #generic = {
    // TODO: let this be a constant so you can instantiate twice reliably without having to guess a name that wont already be an overload set
    fn inner_sort(self: []T) void = {
        if(self.len <= 1, => return());
        
        pivot := self.index(self.len - 1);
        s := 0;
        range(0, self.len - 1) { i | 
            if self.index(i).my_le(pivot) {
                self.swap(i, s);
                s += 1;
            };
        };
        self.swap(self.len - 1, s);
        
        inner_sort(self.slice(0, s));
        inner_sort(self.slice(s, self.len));
    };
    inner_sort
}
