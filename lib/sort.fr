// :VoidSortContext TODO: allow passing void as Ctx (same applies to using a hashmap as a hashset)
// Since this is recursive you can't just use an inline lambda that can access your stack frame (we don't support that without inlining all callsites). 
// Instead you have to manually pass through a context pointer. 
// Which is kinda annoying but not quite as garbage as c's qsort just making you put a static variable somewhere to smuggle information to the comparator. 
// TODO: Eventually I want to support non-escaping capturing closures that pass a pointer to thier stackframe along with the function pointer to access variables. 
// note: it loops if you give me '<' instead of '<='
fn quicksort($Ctx: Type, $T: Type, $my_le: @Fn(a: *T, b: *T, ctx: Ctx) bool) (@Fn(self: []T, ctx: Ctx) void) #generic = {
    // TODO: let this be a constant so you can instantiate twice reliably without having to guess a name that wont already be an overload set
    fn inner_sort(self: []T, ctx: Ctx) void = {
        if(self.len <= 1, => return());
        
        pivot := self.index(self.len - 1);
        s := 0;
        range(0, self.len - 1) { i | 
            if self.index(i).my_le(pivot, ctx) {
                self.swap(i, s);
                s += 1;
            };
        };
        self.swap(self.len - 1, s);
        
        inner_sort(self.slice(0, s), ctx);
        inner_sort(self.slice(s, self.len), ctx);
    };
    inner_sort
}
