// :VoidSortContext TODO: allow passing void as Ctx (same applies to using a hashmap as a hashset)
// Since this is recursive you can't just use an inline lambda that can access your stack frame (we don't support that without inlining all callsites). 
// Instead you have to manually pass through a context pointer. 
// Which is kinda annoying but not quite as garbage as c's qsort just making you put a static variable somewhere to smuggle information to the comparator. 
// TODO: Eventually I want to support non-escaping capturing closures that pass a pointer to thier stackframe along with the function pointer to access variables. 
fn quicksort($Ctx: Type, $T: Type, $my_le: @Fn(a: *T, b: *T, ctx: Ctx) bool) (@Fn(self: []T, ctx: Ctx) void) #generic #fold = {
    inner_sort :: fn(self: []T, ctx: Ctx) void = {
        if(self.len <= 1, => return());
        
        pivot := self.index(self.len - 1);
        s := 0;
        range(0, self.len - 1) { i | 
            if self.index(i).my_le(pivot, ctx) {
                self.swap(i, s);
                s += 1;
            };
        };
        self.swap(self.len - 1, s);
        
        inner_sort(self.slice(0, s), ctx);
        inner_sort(self.slice(s + 1, self.len), ctx);
    };
    inner_sort
}

// :VoidSortContext should be possible to pass void as Ctx when you don't care instead of i64
fn quicksort($T: Type, $my_le: @Fn(a: *T, b: *T) bool) (@Fn(self: []T) void) #generic = {
    inner_sort2 :: fn(self: []T) void = {
        f :: fn(a: *T, b: *T, _: i64) bool = my_le(a, b);
        quicksort(i64, T, f)(self, 0);
    };
    inner_sort2
}

// sorts the list into two parts, items where put_at_front() 
// returns true are all together at the beginning of the list. 
// returns the number of items in the first part of the list. 
// TODO: only one callsite for put_at_front()
fn partition_unordered($T: Type, self: []T, $put_at_front: @Fn(a: *T) bool #duplicated) i64 #generic = {
    i := 0;
    j := self.len - 1;
    while => i < j { 
        while => i < j && put_at_front(self.index(i)) {
            i += 1;
        };
        while => i < j && !put_at_front(self.index(j)) {
            j -= 1;
        };
        
        if i < j {
            self.swap(i, j);
            i += 1;
            j -= 1;
        };
    };
    i + 1
}
