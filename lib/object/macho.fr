//! https://en.wikipedia.org/wiki/Mach-O

macho_magic :: 0xfeedfacf;
MachoHeader :: @struct(
    magic := macho_magic,
    cpu_type: u32,
    cpu_subtype: u32,
    file_type: u32,
    commands_count: u32,
    commands_size: u32,
    flags: u32,
    _reserved := 0x00000000,
);

// TODO: "If a load command starts with 0x80000000 bit set that means the load command is necessary in order to be able to load or run the binary."" 
LoadCommand :: @enum(u32) (
    SegmentLoad = 0x00000019,
    LinkLibrary = 0x0000000C,  // will have full file path to the dynamically linked shared library.
);

SegmentLoad :: @struct(
    name: u128, 
    address: u64,      // offset from base address? 
    address_size: u64, // so how many bytes we want this segment to take up. 
    file_offset: u64,  // where in the file does the data start. 
    size: u64,         // if this is smaller than address size, the extra is filled in with zeros.
    max_prot: u32,     // MemPerm "Maximum virtual memory protections"
    init_prot: u32,    // MemPerm "Initial virtual memory protections"
    section_count: u32, 
    flag: u32,
); // Followed by <section_count> of SegmentSection

// TODO: have a FlagSet(MemPerm) type. 
MemPerm :: @enum(u32) (
    Read    = 0b00000000000000000000000000000001,
    Write   = 0b00000000000000000000000000000010,
    Execute = 0b00000000000000000000000000000100,
);

SegmentSection :: @struct(
    section_name: u128, 
    segment_name: u128,  // must match SegmentLoad64.name
    address: u64,     
    size: u64, 
    file_offset: u32, 
    alignment: u32,   
    relocations_file_offset: u32,
    relocations_count: u32,
    flag: u32,
    _reserved1 := 0x00000000,
    _reserved2 := 0x00000000,
    _reserved3 := 0x00000000,
);

LinkLibrary :: @struct(
    string_offset: u32 = 24,
    time_date_stamp: u32,
    current_version: u32,
    compatible_version: u32,
    file_path: CStr, // size of this load command includes the length of the string.
);

u128 :: @struct(low: u64, high: u64);
fn str_to_16_byte_value(s: Str) u128 = {
    assert(name.len.le(16), "A segment name cannot be larger than 16 text characters in bytes");
    low := 0;
    high := 0;
    s.enumerate {(i: i64, c: u8)|
        c := @as(i64) c;
        if(i.lt(8)) {|
            high = high.bit_or(c.left_shift(i));
        } {|
            low = low.bit_or(c.sub(8).left_shift(i));
        }
    };
    (low = low, high = high)
}

////////////////////////////////////////////////////////////////////////////////////////
// TODO: this could go in a more generic reflection place. 

#macro
fn write_body(self: AstExpr, out: AstExpr) AstExpr = {
    self := compile_ast(self);
    ty := get_type_info(self.ty);
    ty := (@as(*Type) info.Ptr&)[];
    info := get_type_info(ty);
    
    todo();
    
    'unit'
}

#macro
fn read_body(type: AstExpr, reader: AstExpr) AstExpr = {
    ty := const_eval_type(type);
    reader := compile_ast(reader);
    assert(reader.ty.eq(BufReader), "expected BufReader");
    ty := get_type_info(self.ty);
    
    
    todo();
    
    'unit'
}

////////////////////////////////////////////////////////////////////////////////////////
// TODO: this could go in a more generic io place.

BufReader :: @struct(mem: Slice(u8), i: i64);
fn read(self: *BufReader) ?u8 = {
    self.i += 1;
    if(self.i.lt(self.mem.len), => (Some = self.mem[self.i.sub(1)]), => (None = unit))
}
