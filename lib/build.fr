
LinkTime :: @enum(i64) (Static, Dynamic);

// TODO: hack
// TODO: switch between clang and clang++ based on lib
CLANG_PATH :: "/opt/homebrew/opt/llvm/bin/clang++";

fn with(vtable: *ImportVTable, comp: Compiler) CompCtx = 
    (data = comp, vtable = vtable);

fn get_tagged(comp: CompCtx, tag: Str) Slice(FuncId) = {
    tag := {comp.vtable.intern_string}(comp.data, tag);
    {comp.vtable.get_fns_with_tag}(comp.data, tag)
}

// TODO: overloading
fn get_unique_named(c: CompCtx, name: Str) ?FuncId = {
    f := {c.vtable.intern_string}(c.data, name);
    {c.vtable.find_unique_func}(c.data, f)
}

// SAFETY: you must call created_jit_fn_ptr_value if you create a Values and then compile for AOT
// TODO: no unwrap! return error. but then llvm backend has to be able to deal with tagged unions correctly. 
fn get_jitted(c: CompCtx, f: FuncId) rawptr = {
    res := {c.vtable.compile_func}(c.data, f, .Jit);
    or res { err |
        c.report_error(err)
    };
    ptr := {c.vtable.get_jitted_ptr}(c.data, f);
    ptr := or ptr { err |
        c.report_error(err)
    };
    ptr
}

fn default_build_options(vtable: *ImportVTable) *BuildOptions = {
    mem := general_allocator().alloc(BuildOptions, 1);
    mem.ptr[] = (driver_vtable_ptr = {vtable.get_default_driver_exports}(), handle_message = zeroed(@type mem.ptr.handle_message));
    mem.ptr
}


fn add_comptime_library(c: CompCtx, lib_name: Symbol, handle: DlHandle) void = {
    {c.vtable.add_comptime_library}(c.data, lib_name, handle);
}

fn report_error(c: CompCtx, err: *CompileError) Never = {
    out: List(u8) = list(temp());
    {c.vtable.fmt_error}(c.data, err, out&);
    panic(out.items())
}

fn new_with_src(vtable: *ImportVTable, src: Str, options: *BuildOptions) Compiler = {
    new_with_src(vtable, src, "main", options)
}

fn new_with_src(vtable: *ImportVTable, src: Str, filename: Str, options: *BuildOptions) Compiler = {
    comp := {vtable.init_compiler}(options);
    file := {vtable.add_file}(comp, filename, src).shrink();
    stmts := {vtable.parse_stmts}(comp, file&);
    stmts := or stmts { err |
        vtable.with(comp).report_error(err)
    };
    //@debug_assert(stmts.len != 0, "parse_stmts returned 0");
    res := {vtable.make_and_resolve_and_compile_top_level}(comp, stmts);
    or res { err |
        vtable.with(comp).report_error(err)
    };
    comp
}

fn intern_string(comp: CompCtx, s: Str) Symbol = {
    {comp.vtable.intern_string}(comp.data, s)
}

fn get_string(comp: CompCtx, s: Symbol) Str = {
    {comp.vtable.get_string}(comp.data, s)
}

fn get_function(comp: CompCtx, f: FuncId) *Func = {
    {comp.vtable.get_function}(comp.data, f)
}

fn get_function_name(comp: CompCtx, f: FuncId) Symbol = {
    comp.get_function(f)[].name
}

TmpFile :: @struct(name: Array(u8, 16), fd: Fd);
fn remove(self: TmpFile) voidResult = remove(self&.c_name());
fn c_name(self: *TmpFile) CStr = (ptr = self.name&.as_ptr());
fn s_name(self: *TmpFile) Str = self.c_name().str();

fn open_temp_file() TmpFile = {
    template := "/tmp/fXXXXXX\0";
    name: Array(u8, 16) = init(@as(u8) 0.trunc());
    name&.items().subslice(0, template.len).copy_from(template);
    filename: CStr = (ptr = name&.as_ptr());
    fd := mkstemp(filename).unwrap();
    (name = name, fd = fd)
}

// TODO: a version that returns error instead of panicking
fn read_to_string_or_crash(alloc: Alloc, path: Str) List(u8) #inline = {
    bytes: List(u8) = list(alloc);
    bytes&.read_and_push_or_crash(path);
    bytes
}

fn save_path_for_lib(env: Ty(Arch, Os), linking: LinkTime, lib_name: Str) Str = {
    ::enum(LinkTime);
    ext := @match(linking) {
        fn Static() => "o";
        fn Dynamic() => "dylib";
    };
    (@format("target/franca/%-%/%.%", env._0, env._1, lib_name, ext) temp()).items()
}

#redirect(Ty(i64, i64), bool) fn eq(a: LinkTime, b: LinkTime) bool;

// Essentially describing something to pass to clang (after adding some combination of -o -O -c -dynamiclib -static -ast-dump) 
ForeignLibrary :: @struct(
    name: Str, // for caching the output file and #import functions knowing which dylib to check. 
    input_files: Slice(Str) = empty(),
    macro_defines: Slice(Str) = empty(),     // -D, ie. SOME_LIB_IMPL
    include_paths: Slice(Str) = empty(),     // -I,
    macos_frameworks: Slice(Str) = empty(),  // -framework, ie. MetalKit
    objective_c: bool = false,
    raw_c_source: ?Str = .None,
    allow_at_comptime: bool = true,
    cpp: bool = false,
);

ForeignLanguage :: @enum(C, CPlusPlus, ObjectiveC);  // :UNUSED

// TODO: move these to x/<name>
// TODO: impl build system with these. make it a one-liner to add a dependency to driver. 

wuffs_lib: ForeignLibrary : (
    name = "wuffs",
    input_files = "bindings/wuffs/release/c/wuffs-v0.4.c".single(ast_alloc()),
    macro_defines = "WUFFS_IMPLEMENTATION".single(ast_alloc()),
);

// TODO: i guess macro_defines needs to be a function you pass the os/arch to. :Linux
sokol_macos_lib: ForeignLibrary : (
    name = "sokol",
    macro_defines = @slice("SOKOL_METAL", "SOKOL_IMPL", "SOKOL_NO_ENTRY") ast_alloc(),
    include_paths = "bindings/sokol".single(ast_alloc()),
    macos_frameworks = @slice("Metal", "MetalKit", "Cocoa", "QuartzCore") ast_alloc(),
    objective_c = true,
    raw_c_source = (Some = SOKOL_ALL_SOURCE),
);

SOKOL_ALL_SOURCE :: """
#include "sokol_app.h"
#include "sokol_gfx.h"
#include "sokol_glue.h"
#include "sokol_log.h"
#include "sokol_time.h"
// #include "sokol_audio.h"
#include "util/sokol_debugtext.h"
#include "util/sokol_gl.h"
#include "util/sokol_shape.h"
""";


sokol_and_imgui_macos_lib: ForeignLibrary : (
    name = "sokol_imgui",
    macro_defines = @slice("SOKOL_METAL", "SOKOL_IMPL", "SOKOL_NO_ENTRY", "CIMGUI_DEFINE_ENUMS_AND_STRUCTS") ast_alloc(),
    include_paths = @slice("bindings/sokol", "bindings/cimgui") ast_alloc(),
    macos_frameworks = @slice("Metal", "MetalKit", "Cocoa", "QuartzCore") ast_alloc(),
    objective_c = true,
    raw_c_source = (Some = SOKOL_AND_IMGUI_ALL_SOURCE),
    allow_at_comptime = false,
);

SOKOL_AND_IMGUI_ALL_SOURCE :: """
#include "sokol_app.h"
#include "sokol_gfx.h"
#include "sokol_glue.h"
#include "sokol_log.h"
#include "sokol_time.h"
// #include "sokol_audio.h"
#include "util/sokol_debugtext.h"
#include "util/sokol_gl.h"
#include "util/sokol_shape.h"
#include "cimgui.h"
#include "util/sokol_imgui.h"
""";

// TODO: be consistant about figuring out the cwd
tracy_lib: ForeignLibrary : (
    name = "tracy",
    input_files = "bindings/tracy/public/TracyClient.cpp".single(ast_alloc()),
    macro_defines = "TRACY_ENABLE=1".single(ast_alloc()),
    include_paths = "bindings/tracy".single(ast_alloc()),
    cpp = true,
);

// dont forget recursive clone git submodules
dearimgui_lib: ForeignLibrary : (
    name = "dearimgui",
    include_paths = ("bindings/cimgui").single(ast_alloc()),
    raw_c_source = (Some = """
#include "imgui/imgui.cpp"
#include "imgui/imgui_draw.cpp"
#include "imgui/imgui_tables.cpp"
#include "imgui/imgui_widgets.cpp"
#include "imgui/imgui_demo.cpp"
#define IMGUI_DEFINE_MATH_OPERATORS
#include "cimgui.cpp"
    """),
    cpp = true,
);

::display_slice(Str);
fn build_foreign_cached(lib: ForeignLibrary, env: Ty(Arch, Os), linking: LinkTime) Result(Str, void) = {
    path := save_path_for_lib(env, linking, lib.name);
    if(path.file_exists(), => return((Ok = path)));
    
    args: List(Str) = list(10, temp());
    
    for lib.include_paths { s | 
        s := @format("-I%", s) temp();
        args&.push(s.items());
    };
    
    for lib.macro_defines { s | 
        s := @format("-D%", s) temp();
        args&.push(s.items());
    };
    
    if lib.objective_c {
        args&.push_all(@slice ("-x", "objective-c"));
    };
    
    if lib.cpp {
        args&.push_all(@slice ("-x", "c++"));
        args&.push("-lc++");    
    };
    
    // TODO: put this on the lib struct? tracy spams
    args&.push("-Wno-deprecated-declarations");
    
    src_file: ?TmpFile = .None;
    if lib.raw_c_source { src | 
        src_file = (Some = open_temp_file());
        f := src_file.Some&;
        f.fd&.write(src);
        args&.push(f.s_name()); // Note: this points into the thing so it can't move. // TODO: footgun :(
    };
    
    for lib.input_files { s | 
        args&.push(s);
    };
    
    ::enum(LinkTime);
    @match(linking) {
        fn Static() => {
            args&.push("-c");
            args&.push("-static");// TODO: only tracy?
        };
        fn Dynamic() => {
            args&.push("-dynamiclib");
            
            // TODO: if os == macos
            for lib.macos_frameworks { name |
                args&.push("-framework");
                args&.push(name);
            };
        };
    };
    args&.push_all(@slice ("-o", path));
    
    // Since we save it, might as well take the extra hundred years to make it go fast. 
    args&.push("-Os");
    
    args&.push("-target");
    args&.push(target_triple(env._0, env._1));

    @println("[build %] %;", lib.name, args.items());
    success := run_cmd_blocking("clang", args.items());  // TODO: use the right clang (might not want ++ for something that can be compiled as either)
    if(not(success), => return(.Err));
    
    if src_file { f |
        f.remove();
    };
    
    (Ok = path)
}

fn target_triple(arch: Arch, os: Os) Str = {
    if arch == .wasm32 {
        return("wasm32");
    };
    @match(os) {
        fn macos() => {
            @match(arch) {
                fn aarch64() => return("aarch64-apple-darwin");
                fn x86_64()  => return("x86_64-apple-darwin");
                @default => ();
            };
        }
        fn linux() => {
            // TODO: dont always say gnu!!
            @match(arch) {
                fn aarch64() => return("aarch64-linux-gnu");
                fn x86_64()  => return("x86_64-linux-gnu");
                @default => ();
            };
        }
        fn wasip1 => return("wasm32-wasi");
        // TODO: you want this but then you have to deal with #target_arch not supporting all options
        //fn free_standing() => {
        //    @match(arch) {
        //        fn wasm32() => return("wasm32");
        //        @default => ();
        //    };
        //}
        //@default => ();
    };
    @panic("we don't support the triple for % % because we are dumb and bad and new", arch, os)
}
   
fn qbe_target_name(arch: Arch, os: Os) Str = {
    @match(arch) {
        fn aarch64() => if(os == .macos, => "arm64_apple", => "arm64");
        fn x86_64()  => if(os == .macos, => "amd64_apple", => "amd64_sysv");
        fn wasm32()  => panic("qbe does not support wasm");
    }
}
 
ComptimeLibs :: @struct(
    ctx: CompCtx, 
    handles: import("@/lib/collections/map.fr")'HashMap(Symbol, BuiltLib),
);

// TODO: all these should get the allocator from the compiler 
//       so they don't have to use ast_alloc#ct so drivers could be prebuilt as a normal program
fn empty_libs(ctx: CompCtx) ComptimeLibs = {
    (ctx = ctx, handles = init(ast_alloc()))
}

BuiltLib :: @struct(
    aot_object_file: ?Str,
);

fn add_lib(self: *ComptimeLibs, lib: ForeignLibrary) void = {
    env := {self.ctx.vtable.comptime_arch}();  // TODO: pass in for cross compiling
    
    ::Result(Str, void);
    aot_path := lib.build_foreign_cached(env, .Static).unwrap();
    
    name := self.ctx.intern_string(lib.name);
    if lib.allow_at_comptime {
        jit_path := lib.build_foreign_cached(env, .Dynamic).unwrap(); 
        jit := dlopen(jit_path.maybe_borrow_cstr(temp()), DlFlag.Lazy);
        @assert(!jit.lib.is_null(), "failed to open '%' at '%' for comptime", lib.name, jit_path);
        self.ctx.add_comptime_library(name, jit);
    };
    
    built: BuiltLib = (aot_object_file = (Some = aot_path));
    prev := self.handles&.insert(name, built);
    @assert(prev.is_none(), "added lib % twice", lib.name);
}

fn get_aot_objects(self: *ComptimeLibs) List(Str) = {
    out: List(Str) = list(self.handles.raw.len_including_tombstones, temp());
    
    each self.handles& { _, v | 
        if v.aot_object_file { path | 
            out&.push(path);
        };
    };
    
    out
}
