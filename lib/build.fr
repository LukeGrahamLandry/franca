
LinkTime :: @enum(i64) (Static, Dynamic);

// TODO: hack
CLANG_PATH :: "/opt/homebrew/opt/llvm/bin/clang";

fn with(vtable: *ImportVTable, comp: Compiler) CompCtx = 
    (data = comp, vtable = vtable);

fn get_tagged(comp: CompCtx, tag: Str) Slice(FuncId) = {
    tag := {comp.vtable.intern_string}(comp.data, tag);
    {comp.vtable.get_fns_with_tag}(comp.data, tag)
}

// TODO: no unwrap! return error. but then llvm backend has to be able to deal with tagged unions correctly. 
fn get_jitted(c: CompCtx, f: FuncId) rawptr = {
    res := {c.vtable.compile_func}(c.data, f, .Jit).unwrap();
    ptr := {c.vtable.get_jitted_ptr}(c.data, f).unwrap();
    {c.vtable.make_jitted_exec}(c.data);
    ptr
}

fn new_with_src(vtable: *ImportVTable, src: Str, arch: Backend) Compiler = {
    comp := {vtable.init_compiler}(arch);
    file := {vtable.add_file}(comp, "main", src);
    stmts := {vtable.parse_stmts}(comp, file).unwrap();
    {vtable.make_and_resolve_and_compile_top_level}(comp, stmts).unwrap();
    comp
}

TmpFile :: @struct(name: Array(u8, 16), fd: Fd);
fn remove(self: TmpFile) voidResult = remove(self&.c_name());
fn c_name(self: *TmpFile) CStr = (ptr = self.name&.as_ptr());
fn s_name(self: *TmpFile) Str = self.c_name().str();

fn open_temp_file() TmpFile = {
    template := "/tmp/fXXXXXX\0";
    name: Array(u8, 16) = init(@as(u8) 0.trunc());
    name&.slice().subslice(0, template.len).copy_from(template);
    filename: CStr = (ptr = name&.as_ptr());
    fd := mkstemp(filename).unwrap();
    (name = name, fd = fd)
}

fn exec_cmd(path: Str, args: Slice(Str)) Never = {
    path := path.maybe_borrow_cstr(temp()); // LEAK, but who cares, we just forked. 
    cargs: List(CStr) = list(args.len.add(2), temp());
    cargs&.push(path);
    for(args) {s|
        cargs&.push(s.maybe_borrow_cstr(temp()));
    };
    // TODO: this is what llvm doen't like, it cant do ptr_from_int.
    cargs&.push((ptr = u8.ptr_from_int(0))); // libc wants a null terminated array.
    execv(path, cargs.maybe_uninit.ptr);
    
    // ERROR
    @println("Failed to exec path=%", path);
    cargs.len -= 1; // don't try to print the null terminator
    for(cargs) {s|
        @println("- %", s);
    };
    panic("failed to exec!")
}

// TODO: better error handling. 
// TODO: use posix_spawnp instead? that makes it easier to return an error to the caller. using fork is a pain. 
// TODO: it doesn't look up the command like a shell does.
fn run_cmd_blocking(path: Str, args: Slice(Str)) bool = {
    pid := fork();
    if(pid.eq(0.intcast())) {|
       exec_cmd(path, args);
       unreachable();
    };
    
    status: i32 = 0.intcast();
    res := waitpid(pid, status&, 0.intcast()); 
    :: assert_eq(i32);
    assert_eq(res, pid); // TODO: error handling, check errno
    status.eq(0.intcast())
}

// TODO: return error if this becomes a lib thing which it probably should. 
fn read_to_string(alloc: Alloc, path: Str) List(u8) = {
    bytes: List(u8) = list(alloc);
    bytes&.read_and_push(path);
    bytes
}

// TODO: return error
fn read_and_push(out: *List(u8), path: Str) Unit = {
    path := path.maybe_borrow_cstr(out.gpa); // TODO: LEAK
    flag := (@as(i64) OpenFlag.Read);
    f := open(path, flag).unwrap();
    len := f.lseek(0, .End).unwrap();
    f.lseek(0, .Set);
    out.reserve(len);
    ptr := out.maybe_uninit.ptr.offset(out.len);
    read_len := read(f, ptr, out.maybe_uninit.len).unwrap();
    assert_eq(read_len, len); // sanity
    out.len += len;
    close(f); // TODO: defer
}

fn fork_and_catch(alloc: Alloc, const f: @Fn() Unit) Ty(bool, List(u8), List(u8)) = {
    out := Array(Fd, 2).zeroed();
    err := Array(Fd, 2).zeroed();
    pipe(out&);
    pipe(err&);
    
    pid := fork();
    if(pid.eq(0.intcast())){|
        // Child
        dup2(out&[1], STD_OUT);
        dup2(err&[1], STD_ERR);
        
        // need to make sure there's something on both pipes or it blocks?
        println(" ");
        err := STD_ERR;
        err&.write(" ");
        
        f();
        exit(0);
    };
    
    read_all :: fn(fd: Fd) List(u8) => {
        buf: List(u8) = list(99999, alloc);
        len := read(fd, buf.maybe_uninit.ptr, buf.maybe_uninit.len).unwrap();
        buf.len = len;
        buf
    };

    status := 0.intcast();
    waitpid(pid, status&, 0.intcast());

    // TODO: how big is the pipe's buffer?
    outs := read_all(out&[0]);
    errs := read_all(err&[0]);
    close(out&[0]);
    close(err&[0]);

    (status.eq(0.intcast()), outs, errs)
}

fn render_callgraph(comp: CompCtx, entry_points: Slice(FuncId), out_a: Alloc) List(u8) = {
    out: List(u8) = list(out_a);
    pending: List(FuncId) = entry_points.clone(temp());
    done: BitSet = empty();
    while(=> pending.len.ne(0)){|
        continue :: @return;
        fid := pending&.pop().unwrap();
        if(done&.get(fid.to_index().zext()), => continue()); // might have been added multiple times
        done&.set(fid.to_index().zext(), temp());
        
        // Note: compile before checking callees!
        {comp.vtable.compile_func}(comp.data, fid, .Aot).unwrap();
        func := {comp.vtable.get_function}(comp.data, fid);
        @fmt(out&, "\n[%]\n   - ", {comp.vtable.get_string}(comp.data, func.name));
        
        callee :: fn(c: FuncId) Unit => {
            func := {comp.vtable.get_function}(comp.data, c);
            @fmt(out&, "%, ", {comp.vtable.get_string}(comp.data, func.name));
            if(not(done&.get(c.to_index().zext()))){|
                pending&.push(c);
            };
        
        };
        
        for(func.callees.items(), callee);
        out&.push_all("\n   - ");
        for(func.mutual_callees.items(), callee);
    };
    out
}

// TODO auto fucking matic
fn display(self: Arch, out: *List(u8)) Unit = {
    s: Str = @switch(self) {
        @case(.Aarch64) => "aarch64";
        @case(.X86_64) => "x86_64";
    };
    out.push_all(s);
}

fn display(self: Os, out: *List(u8)) Unit = {
    s: Str = @switch(self) {
        @case(.Macos) => "macos";
        @case(.Linux) => "linux";
        @case(.Windows) => "windows";
    };
    out.push_all(s);
}

fn save_path_for_lib(env: Ty(Arch, Os), linking: LinkTime, lib_name: Str) Str = {
    ext := @switch(linking) {
        @case(.Static) => "o";
        @case(.Dynamic) => "dylib";
    };
    (@format("target/franca/%-%/%.%", env._0, env._1, lib_name, ext) temp()).items()
}

#redirect(Ty(i64, i64), bool) fn eq(a: Os, b: Os) bool;
#redirect(Ty(i64, i64), bool) fn eq(a: LinkTime, b: LinkTime) bool;

// TODO: not this!
#redirect(Ty(i64, i64), bool) fn eq(a: Arch, b: Arch) bool;
#redirect(Ty(i64, i64), bool) fn ne(a: Arch, b: Arch) bool;
