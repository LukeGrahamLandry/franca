
const usize = u64;
const isize = i64;

// TODO
// A value-type like a tuple but all elements are the same type. 
//  fn StaticArray(inner: Type, count: i64) Type;
// TODO: need to support using comptime args in other args. 
// @comptime fn static_array(Inner: Type, count: i64, element: Inner) StaticArray(Inner);
// @comptime fn static_array_uninit(Inner: Type, count: i64) StaticArray(Inner);
//  fn Comptime(T: Type) Type;
//  fn Runtime(T: Type) Type;
// const NullTerminated = Ptr(u8);


/// Get the discriment used at runtime. 
// fn tag_value(E: Type, case_name: Symbol) i64;

// Control flow
// fn if(cond: bool, false_branch: Fn(Any, Any), true_branch: Fn(Any, Any)) Any = {
//     (cond, false_branch, true_branch)!if  // TODO: better generics so you dont have to manually instantiate something per return type
// }

/*  // TODO: support baking when fully constant arg. 
fn while(cond: Fn(Unit, bool), body: Fn(Unit, Unit)) Unit = {
    (cond, body)!while;
}
*/

// Note: these are not short circuiting because arguments are always evaluated. TODO: varients that accept closures
fn and(a: bool, b: bool) bool = (a, fn() bool = b, fn() bool = false)!if;
fn or(a: bool, b: bool) bool = (a, fn() bool = true, fn() bool = b)!if;

// TODO: be more efficient about this type of function. It needs to be evaluated at comptime,
//       but you don't have to make a new function object to specialize it, just inline the value.
//       @inline instead of @comptime should work for that since !macros are intercepted in the compiler,
//       but it doesn't bind the args correctly for some reason.
// Measured in interpreter stack slots.
@comptime fn size_of(T: Type) i64 = T!size_of;
// These don't care about the size of the type, they just measure in interp stack slots. 

// @cap(raw_ptr)
fn raw_slice(ptr: VoidPtr, first: i64, one_past_last: i64) VoidPtr;
/// The result may have more room than you asked for (which is useful for growable collections in allocators that use fixed size blocks). 
// @cap(raw_ptr)
@impure fn alloc(Element: Type, count: i64) VoidPtr; 
/// `ptr` must be exactly a slice returned by `alloc` (not a subslice of it).
// @cap(raw_ptr)
@impure fn dealloc(Element: Type, ptr: VoidPtr, len: i64) Unit;

// Inspecting the interpreter
fn is_comptime() bool;
fn is_uninit(_: VoidPtr) bool;
fn is_oob_stack(_: VoidPtr) bool;
// @cap(io)
@env fn print_callstack() Unit;

// @cap(io)
@env fn puts(msg: (Ptr(i64), i64)) Unit;
// Halts the program and reports an error. 
// The return value can typecheck as anything because it never returns. 
// @cap(throw)
fn panic(msg: (Ptr(i64), i64)) Never;
// @cap(throw)
fn assert(cond: bool, msg: (Ptr(i64), i64)) Unit = (cond, fn() Unit=(), fn() Unit=panic(msg))!if;
