Vec3  :: Vec(f64, false);
Vec4  :: Vec(f64, true);
// TODO: these won't work until I have f32 intrinsics but you want them because they take so much less memory when you have giant meshes. 
//Vec3F :: Vec(f32, false);
//Vec4F :: Vec(f32, true);

//
// If you're using Vec4 for homogenious coordinates, w is always 1.0 for a point or 0.0 for a vector. 
// Some operations are ill-formed (like `add(pos, pos)`, `len(pos)`, etc) and attempting to perform them will break that invarient.
// 
fn Vec($F: Type, $have_w: bool) V = {
    W :: if(have_w, => F, => void);
    V :: @struct(x: F, y: F, z: F, w: W);
    
    or_void  :: fn(e: FatExpr) FatExpr #macro = if(have_w, e, @{} );
    or_zero  :: fn(e: FatExpr) FatExpr #macro = if(have_w, e, @{ 0 } );
    or_false :: fn(e: FatExpr) FatExpr #macro = if(have_w, e, @{ false } );
    count    :: if(have_w, 4, 3);
    
    fn items(self: *V) []F #inline = 
        (ptr = ptr_cast_unchecked(self, V, F), len = count);
    
    fn to_array(self: V)   Array(F, count) #unsafe_noop_cast;
    fn as_array(self: *V) *Array(F, count) #unsafe_noop_cast;
    
    fn add(a: V, b: V) V #inline = 
        (x = a.x + b.x, y = a.y + b.y, z = a.z + b.z, w = @or_void a.w + b.w);
    
    fn sub(a: V, b: V) V #inline = 
        (x = a.x - b.x, y = a.y - b.y, z = a.z - b.z, w = @or_void a.w - b.w);
    
    fn len_sq(a: V) F #inline = 
        a.dot(a);
    
    fn len(a: V) F #inline = 
        a.len_sq().sqrt();
    
    fn index(self: *V, i: i64) *F #inline = 
        self&.items().index(i);
    
    fn mul_elements(a: V, b: V) V #inline = 
        (x = a.x * b.x, y = a.y * b.y, z = a.z * b.z, w = @or_void a.w * b.w);
    
    fn dot(a: V, b: V) F #inline = 
        a.x*b.x + a.y*b.y + a.z*b.z + @or_zero a.w*b.w;
    
    fn normalize(a: V) V #inline = {
        norm := a.len();
        (x = a.x / norm, y = a.y / norm, z = a.z / norm, w = @or_void a.w / norm) // TODO: dumb to do the division if w is always 0
    }
    
    fn any_nan(a: V) bool #inline = 
        a.x.is_nan().or(a.y.is_nan()).or(a.z.is_nan()).or(@or_false a.w.is_nan())
    
    V
}

fn mul_elements();
fn dot();
fn len_sq();
fn cross();
fn any_nan();
fn to_array();
fn as_array();

// 
// TODO
// - sqrt intrinsic
// - f32 intrinsics
// - trig functions
//   The sane thing would be to use https://github.com/ziglang/zig/blob/master/lib/compiler_rt
//   but thats so close to admitting some things are too magic to do myself, 
//   which i really don't want to do because thats so annoying. 
//
