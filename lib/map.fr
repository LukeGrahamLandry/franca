
fun insert() Unit = unit;
fun get() Unit = unit;
fun get_ptr() Unit = unit;

#comptime 
fn DumbMap(const K: Type, const V: Type) Type = {
    // TODO: instead of complicated traits, just require(eq, Ty(K, K), bool);
    const Self = @struct(arr: List(Ty(K, V)));
    
    fun init() Self = (arr = list());
    
    ::?*V;
    :: if_opt(*V, ?V);
    
    fun insert(self: *Self, key: K, value: V) ?V = {
        self.get_ptr(key).if(fn(v: *V) ?V => {
            let old = v[];
            v[] = value;
            some(old)
        }, fn() ?V => {
            let entry = (key, value);
            self.arr&.push(entry);
            none()
        })
    }

    fun get(self: *Self, key: K) ?V = {
        let found: ?*V = self.get_ptr(key);
        @match(found) {
            (fn Some(t: *V) ?V = some(t[]));
            (fn None(t: Unit) ?V = none());
        }
    }
    
    /// SAFETY: the returned pointer is invalid after a call to 'insert' (which may trigger a resize)
    fun get_ptr(self: *Self, key: K) ?*V = {
        var i = 0;
        let count = self.arr.len;
        var out: ?*V = none();
        count.ne(0).if {|
            dowhile {() bool |
                a := self.arr&; // TODO: can't inline. need to propagate after addr of? 
                let p: *Ty(K, V) = a.index(i);
                let k: K = p[]._0;
                k.eq(key).if {|
                    let v = p[]._1&;
                    out = some(v);
                };
                
                i = i.add(1);
                i.lt(count).and(out.is_none())
            };
        };
    
        out
    }
    
    // TODO: drop entries? 
    fun drop(self: *Self) Unit = {
        self.arr&.drop();
    }
    
    Self
}
