fn mod(big: i64, divisor: i64) i64 = sub(big, mul(div(big, divisor), divisor));
fn max(a: i64, b: i64) i64 = (lt(a, b), =>b, =>a)!if;
fn min(a: i64, b: i64) i64 = (gt(a, b), =>b, =>a)!if;
fn neg(a: i64) i64 = sub(0, a);
fn abs(val: i64) i64 = (val.ge(0), => val, => val.neg())!if;
fn int(val: bool) i64 = (val, => 1, => 0)!if;
fn eq(lhs: Symbol, rhs: Symbol) bool = lhs.int().eq(rhs.int());
fn to_bool(b: i64) bool = (eq(b, 0), => false, => true)!if;

// TODO: this gets a bit silly if I have to define this stuff all again but with different types. 
//       it would be cool if it could be done with traits. like anything with an ordering could have a fn max (bad example for floats i guess)
fn neg(a: f64) f64 = sub(0.0, a); // TODO: there's an instruction for this. which would be better because there's no zero register for floats. 

/// Yes, really...
fn is_nan(a: f64) bool = a.eq(a).not();  // TODO: this could be fewer instructions but this is more fun. 

// There must be a not insane way to do this but i gave up and read the two's complement wikipedia page.
/// Convert an i64 to an i<bit_count> with the (64-<bit_count>) leading bits 0.
fn signed_truncate(x: i64, bit_count: i64) u32 = {
    let mask = 1.shift_left(bit_count).sub(1);
    (le(x, 0), => bit_and(add(bit_not(mul(x, neg(1))), 1), mask).trunc(), => x.trunc())!if
}

////////////////
/// Booleans ///
////////////////
// u1 is a number so this is kinda like math... idk.

fn if(cond: bool, const then: @Fn() Unit) Unit =
    (cond, then, =>())!if;

fn if(const T: Type) Unit = {
    fn if(cond: bool, const then: @Fn() T, const else: @Fn() T) T =
        (cond, then, else)!if;
}

// TODO: auto impl generics
::if(i64); ::if(Unit); ::if(bool); ::if(u8);

fn eq(a: bool, b: bool) bool = a.int().eq(b.int());
fn not(b: bool) bool = if(b, => false, => true);

// Note: these are not short circuiting because arguments are always evaluated. 
fn and(a: bool, b: bool) bool = a.if(=> b, => false);
fn or(a: bool, b: bool) bool = a.if(=> true, => b);

// Note: these are short circuiting. The closure will only be called if necessary. 
fn and(a: bool, const b: @Fn() bool) bool = a.if(b, => false);
fn or(a: bool, const b: @Fn() bool) bool = a.if(=> true, b);

/////////////////
/// Fake Ints ///
/////////////////
// TODO: this sucks. dynamically make these for uxx & ixx.
// TODO: store these in the next sane size up, not always i64. 

fn UInt(bits: i64) Type #fold = IntType(bits, false);
fn SInt(bits: i64) Type #fold = IntType(bits, true);

const u1 = UInt(1);
const u2 = UInt(2);
const u4 = UInt(4);
const u5 = UInt(5);
const u6 = UInt(6);
const u8 = UInt(8);
const u12 = UInt(12);
const u16 = UInt(16);
const u19 = UInt(19);
const u32 = UInt(32);
const u64 = UInt(64);
const i7 = SInt(7);
const i8 = SInt(8);
const i16 = SInt(16);
const i19 = SInt(19);
const i26 = SInt(26);
const i32 = SInt(32);
const i33 = SInt(33);


/////////////////
/// Redirects ///
/////////////////

fn Ord(const T: Type) Unit = {
    fn eq(lhs: T, rhs: T) bool = lhs.int().eq(rhs.int());
    fn ne(lhs: T, rhs: T) bool = lhs.int().ne(rhs.int());
    fn lt(lhs: T, rhs: T) bool = lhs.int().lt(rhs.int());
    fn le(lhs: T, rhs: T) bool = lhs.int().le(rhs.int());
    fn gt(lhs: T, rhs: T) bool = lhs.int().gt(rhs.int());
    fn ge(lhs: T, rhs: T) bool = lhs.int().ge(rhs.int());
}

fn int(i: u8)  i64 #inline = i.zext();    ::Ord(u8);
fn int(i: u32) i64 #inline = i.zext();    ::Ord(u32);
fn int(i: u64) i64 #inline = i.bitcast(); ::Ord(u64); // TODO: wrong!!! signed
fn int(i: i32) i64 #inline = i.intcast(); ::Ord(i32);

::{
    UNum :: fn(const T: Type) Unit = {
        fn add(lhs: T, rhs: T) T = lhs.int().add(rhs.int()).trunc();
        fn sub(lhs: T, rhs: T) T = lhs.int().sub(rhs.int()).trunc();
        fn mul(lhs: T, rhs: T) T = lhs.int().mul(rhs.int()).trunc();
        fn div(lhs: T, rhs: T) T = lhs.int().div(rhs.int()).trunc();
        fn min(lhs: T, rhs: T) T = lhs.int().min(rhs.int()).trunc();
        fn max(lhs: T, rhs: T) T = lhs.int().max(rhs.int()).trunc();
    };
    UNum(u8); 
    UNum(u16);
    UNum(u32);
};

#redirect(Ty(i64, i64), i64)  fn shift_left(value: u64, shift_amount: i64) u64;
#redirect(Ty(i64, i64), i64)  fn bit_or(lhs: u64, rhs: u64) u64;
#redirect(Ty(i64, i64), i64)  fn bit_and(lhs: u64, rhs: u64) u64;
#redirect(i64, i64)           fn bit_not(value: u64) u64;

// TODO: dumb
fn bit_or(lhs: u32, rhs: u32) u32 = bit_or(@as(i64) lhs.zext(), @as(i64) rhs.zext()).trunc();
fn bit_and(lhs: u32, rhs: u32) u32 = bit_and(@as(i64) lhs.zext(), @as(i64) rhs.zext()).trunc();
fn shift_left(value: u32, shift_amount: i64) u32 = shift_left(@as(i64) lhs.zext(), @as(i64) rhs.zext()).trunc();
// TODO: bit_not can't just redirect because that would flip the leading zeros too. 
