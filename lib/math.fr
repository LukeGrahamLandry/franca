
fn div_mod(big: i64, divisor: i64) Ty(i64, i64) #inline = {
    d := big / divisor;
    (d, big - d * divisor)
}

fn mod(big: i64, divisor: i64) i64 = sub(big, mul(div(big, divisor), divisor));
fn max(a: i64, b: i64) i64 = if(lt(a, b), =>b, =>a);
fn min(a: i64, b: i64) i64 = if(gt(a, b), =>b, =>a);
fn max(a: u64, b: u64) u64 = {
    @debug_assert(a >= 0 && b >= 0, "TODO: remove this with new backend that does proper unsigned compares");
    @if(a < b, b, a)
}
fn neg(a: i64) i64 #fold = sub(0, a);
fn neg(a: i16) i16 #fold #redirect(i64, i64); // TODO: sign extension?
fn neg(a: i32) i32 #fold = sub(0, a);
fn abs(val: i64) i64 = {
    all_sign_bit := val.shift_right_arithmetic(63);
    // +) nop 
    // -) subtract one and flip all the bits. https://en.wikipedia.org/wiki/Two%27s_complement
    bit_xor(val + all_sign_bit, all_sign_bit)
}
fn abs(val: i32) i32 = if(val.ge(0), => val, => val.neg()); // TODO: wait for new backend where im consistant about int repr
fn eq(lhs: Symbol, rhs: Symbol) bool #redirect(Ty(u32, u32), bool);
fn to_bool(b: i64) bool = b != 0;

// TODO: this gets a bit silly if I have to define this stuff all again but with different types. 
//       it would be cool if it could be done with traits. like anything with an ordering could have a fn max (bad example for floats i guess)
fn neg(a: f64) f64 #fold = sub(0.0, a); // TODO: there's an instruction for this. which would be better because there's no zero register for floats. 

/// Yes, really...
fn is_nan(a: f64) bool = a.eq(a).not();  // TODO: this could be fewer instructions but this is more fun. 

// Convert an i64 to an i<bit_count> with the leading bits 0.
// so the mask takes care of negative numbers. 
fn signed_truncate(x: i64, bit_count: i64) u32 = {
    mask := 1.shift_left(bit_count).sub(1);
    mask.bit_and(x).trunc()
}

fn s_trunc(x: i64, $bit_count: i64) SInt(bit_count) #generic = {
    mask :: 1.shift_left(bit_count).sub(1);
    mask.bit_and(x) // todo: this wont work for real sizes i8/i16, it will want a trunc. really need to store the other small sizes properly and have real bit fields.
}

////////////////
/// Booleans ///
////////////////
// u1 is a number so this is kinda like math... idk.

// Note: its a fun game to make this call the other fn if instead of the macro and measure how much slower it compiles itself. 
fn if(cond: bool, $then: @Fn() void) void =
    @if(cond, then(), ());

fn if($T: Type) void = {
    fn if(cond: bool, $then: @Fn() T, $else: @Fn() T) T = @if(cond, then(), else());
}

// TODO: auto impl generics
::if(i64); ::if(void); ::if(bool); ::if(u8); 

fn eq(a: bool, b: bool) bool = a.int().eq(b.int());
fn not(b: bool) bool #fold = b.int() == 0;
fn int(val: bool) i64 #intrinsic(.ZeroExtend8To64) #fold; // bool is always 0 or 1

// Note: these are not short circuiting because arguments are always evaluated. 
fn and(a: bool, b: bool) bool = a.if(=> b, => false);
fn or(a: bool, b: bool) bool = a.if(=> true, => b);
fn xor(a: bool, b: bool) bool = a.if(=> !b, => b);

// Note: these are short circuiting. The closure will only be called if necessary. 
fn and(a: bool, $b: @Fn() bool) bool = @if(a, b(), false); // operator &&
fn or(a: bool, $b: @Fn() bool) bool = @if(a, true, b());   // operator ||
// TODO: those should go in sugar.fr

/////////////////
/// Fake Ints ///
/////////////////
// TODO: this sucks. dynamically make these for uxx & ixx.
// TODO: store these in the next sane size up, not always i64. 

fn UInt(bits: i64) Type #fold = IntType(bits, false);
fn SInt(bits: i64) Type #fold = IntType(bits, true);

u1  :: UInt(1);
u2  :: UInt(2);
u4  :: UInt(4);
u5  :: UInt(5);
u6  :: UInt(6);
u8  :: UInt(8);
u12 :: UInt(12);
u16 :: UInt(16);
u19 :: UInt(19);
u32 :: UInt(32);
u64 :: UInt(64);
i7  :: SInt(7);
i8  :: SInt(8);
i16 :: SInt(16);
i19 :: SInt(19);
i26 :: SInt(26);
i32 :: SInt(32);
i33 :: SInt(33);


/////////////////
/// Redirects ///
/////////////////

fn Ord($T: Type) void = {
    fn eq(lhs: T, rhs: T) bool = lhs.int().eq(rhs.int());
    fn ne(lhs: T, rhs: T) bool = lhs.int().ne(rhs.int());
    fn lt(lhs: T, rhs: T) bool = lhs.int().lt(rhs.int());
    fn le(lhs: T, rhs: T) bool = lhs.int().le(rhs.int());
    fn gt(lhs: T, rhs: T) bool = lhs.int().gt(rhs.int());
    fn ge(lhs: T, rhs: T) bool = lhs.int().ge(rhs.int());
}

fn int(i: i64) i64 #unsafe_noop_cast;
fn int(i: u8)  i64 #inline = i.zext();    ::Ord(u8);
fn int(i: u32) i64 #inline = i.zext();    ::Ord(u32);
fn int(i: u64) i64 #inline = i.bitcast(); ::Ord(u64); // TODO: wrong!!! signed
fn int(i: i32) i64 #inline = i.intcast(); ::Ord(i32);
fn int(i: u16) i64 #inline = i.zext();    ::Ord(u16);
fn int(i: i16) i64 #inline = i.zext();    ::Ord(i16);// TODO: wrong!!! signed

::{
    UNum :: fn($T: Type) void = {
        fn add(lhs: T, rhs: T) T = lhs.int().add(rhs.int()).trunc();
        fn sub(lhs: T, rhs: T) T = lhs.int().sub(rhs.int()).trunc();
        fn mul(lhs: T, rhs: T) T = lhs.int().mul(rhs.int()).trunc();
        fn div(lhs: T, rhs: T) T = lhs.int().div(rhs.int()).trunc();
        fn min(lhs: T, rhs: T) T = lhs.int().min(rhs.int()).trunc();
        fn max(lhs: T, rhs: T) T = lhs.int().max(rhs.int()).trunc();
        fn mod(lhs: T, rhs: T) T = lhs.int().mod(rhs.int()).trunc();
    };
    UNum(u8); 
    UNum(u16);
    UNum(u32);
};

#redirect(Ty(i64, i64), i64) #fold fn shift_left(value: u64, shift_amount: i64) u64;
#redirect(Ty(i64, i64), i64)  fn bit_or(lhs: u64, rhs: u64) u64;
#redirect(Ty(i64, i64), i64)  fn bit_and(lhs: u64, rhs: u64) u64;
#redirect(i64, i64)           fn bit_not(value: u64) u64;
#redirect(Ty(i64, i64), i64)  fn mul(lhs: u64, rhs: u64) u64;
#redirect(Ty(i64, i64), i64)  fn add(lhs: u64, rhs: u64) u64;
fn add(lhs: i32, rhs: i32) i32 = lhs.intcast().add(rhs.intcast()).intcast();

// TODO: wrong! signed
#redirect(Ty(i64, i64), i64)  fn div(lhs: u64, rhs: u64) u64;

// TODO: dumb
fn bit_or(lhs: u32, rhs: u32) u32 = bit_or(@as(i64) lhs.zext(), @as(i64) rhs.zext()).trunc();
fn bit_and(lhs: u32, rhs: u32) u32 = bit_and(@as(i64) lhs.zext(), @as(i64) rhs.zext()).trunc();
fn shift_left(value: u32, shift_amount: i64) u32 #fold = shift_left(@as(i64) value.zext(), shift_amount).trunc();
fn bit_or(lhs: u8, rhs: u8) u8 = lhs.int().bit_or(rhs.int()).trunc();
// TODO: bit_not can't just redirect because that would flip the leading zeros too. 

fn shift_right_logical(value: u32, shift_amount: i64) u32 = 
    shift_right_logical(@as(i64) value.zext(), shift_amount).trunc();
fn shift_right_logical(value: u64, shift_amount: i64) u64 = 
    shift_right_logical(@as(i64) value.bitcast(), shift_amount).bitcast();
fn shift_right_logical(value: i32, shift_amount: i64) i32 = 
    shift_right_logical(value.intcast(), shift_amount).intcast();

fn bit_and(a: i32, b: i32) i32 #redirect(Ty(u32, u32), u32);

// TODO: :SLOW?
fn pow(base: i64, exp: i64) i64 = {
    n := 1;
    range(0, exp) {_|
        n *= base;
    };
    n
}

MAX_u16 :: 0xFFFF;
MAX_i32 :: 2147483647;
MIN_i32 :: -2147483648;
MAX_u32 :: 0xFFFFFFFF;
MAX_i64 :: 9223372036854775807;
MIN_i64 :: -MAX_i64 - 1;  // -9223372036854775808 but it feels fragile to parse that (tho it does overflow into the right thing). 
                          // there are more negative numbers than positive numbers!

MANTISSA_DIGITS_f64 :: 53;
MANTISSA_DIGITS_f32 :: 24;
