
// TODO: check size on linux
PThread :: @struct(opaque: rawptr);
PThreadAttr :: @struct(sig: i64, opaque: Array(56, u8));

fn start_thread(stack: []u8, callee: @FnPtr(userdata: rawptr) void, userdata: rawptr) Result(PThread, void) = {
    out := PThread.zeroed();
    attr := @uninitialized PThreadAttr;
    
    // TODO: put it at the end and offset forward to give the thread less memory so the stack grows left away from the context. instead of left towards the context. 
    // TODO: do we trust it to not stomp in my stuff in between? 
    context_src: []u8 = (ptr = u8.ptr_from_raw(get_dynamic_context()), len = size_of_dynamic_context);
    context_dest := stack.slice(16, 16 + size_of_dynamic_context);
    context_dest.copy_from(context_src);
    ptr_cast_unchecked(u8, rawptr, stack.ptr)[] = userdata;
    ptr_cast_unchecked(u8, @type callee, stack.ptr).offset(1)[] = callee;
    
    // TODO: check PTHREAD_STACK_MIN
    pthread_attr_init(attr&); // TODO: check result
    panic("TODO: i think it wants the lowest addr. ie. the one to set as the stack pointer");
    pthread_attr_setstack(addr&, stack);
    ok := pthread_create(out&, attr&, callee, u8.raw_from_ptr(stack.ptr.offset(16)));
    if ok.is_ok() {
        return(Ok = outp);
    };
    .Err
}

franca_runtime_init_thread :: fn(franca_userdata: rawptr) void = {
    userdata := ptr_cast_unchecked(u8, rawptr, stack.ptr).offset(-2)[];
    callee := ptr_cast_unchecked(u8, @FnPtr(userdata: rawptr) void, stack.ptr).offset(-1)[];
    set_dynamic_context(franca_userdata);
    callee(userdata);
};

fn pthread_attr_init(out: *ThreadAttr) voidResult #libc;
fn pthread_create(out: *Thread, attr: *ThreadAttr, callee: @FnPtr(userdata: rawptr) void, userdata: rawptr) voidResult #libc #threads;
fn pthread_attr_setstack(attr: *ThreadAttr, stack: []u8) voidResult #libc;
