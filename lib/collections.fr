// TODO: fix scope resolution for generics 
@pub fn list() Unit = {unit};
@pub fn push() Unit = {unit};
@pub fn items() Unit = {unit};
@pub fn drop() Unit = {unit};
@pub fn subslice() Unit = {unit};
@pub fn push_all() Unit = {unit};
@pub fn list_clone() Unit = {unit};
@pub fn slice_eq() Unit = {unit};
@pub fn foreach() Unit = {unit};
@pub fn enumerate() Unit = {unit};
@pub fn index() Unit = {unit};
@pub fn slice() Unit = {unit};
@pub fn len() Unit = {unit};
@pub fn find() Unit = {unit};
@pub fn pop_last() Unit = {unit};
@pub fn memcpy() Unit = {unit};
@pub fn get() Unit = {unit};
@pub fn set() Unit = {unit};
@pub fn reserve() Unit = {unit};
@pub fn rest() Unit = {unit};
@pub fn repeated() Unit = {unit};
@pub fn clear() Unit = {unit};
@pub fn fill() Unit = {unit};


@pub
fn range(start: i64, end: i64, const yield: Fn(i64, Unit)) Unit = {
    var i = start;
    (fn()=lt(i, end), fn()={  // TODO: fix vm poison when no brackets.
        yield(i);
        i = add(i, 1);
    })!while;
}


// TODO: return slice so the result may have more room than you asked for (which is useful for growable collections in allocators that use fixed size blocks). 
@interp @pub fn alloc(Element: Type, count: i64) VoidPtr; 
/// `ptr` must be exactly a slice returned by `alloc` (not a subslice of it).
@interp @impure @pub fn dealloc(Element: Type, ptr: VoidPtr, len: i64) Unit;

@impl @pub 
fn Slice(const T: Type) Type = {
    const Self: Type = (ptr: *T, len: i64)!struct;
    const T = T;  // TODO
    
    @pub fn slice(ptr: *T) Self = (ptr: ptr, len: 1);
    // TODO: @pub fn empty() Self = (ptr: zeroed(), len: 0);
    @pub fn slice(ptr: *T, count: i64) Self = (ptr: ptr, len: count);
    @pub fn len(self: Self) i64 = self&.len[];
    @pub fn assume(ptr: *T, len: i64) Self = (ptr: ptr, len: len);
    
    @pub fn get(self: Self, i: i64) T = {
        // assert(lt(i, len(self)), "OOB"); // TODO: asm
        let v: *T = index(self, i);  // TODO: fix so dont need useless binding 
        v[]
    }
    
    @pub fn index(self: Self, i: i64) *T = {
        // assert(lt(i, len(self)), "OOB"); // TODO: asm
        var s: Self = subslice(self, i, 1);
        s&.ptr[]
    }
    
    @pub fn set(self: Self, i: i64, v: T) Unit = {
        assert(lt(i, len(self)), "OOB");
        index(self, i)[] = v
    }
    
    @pub fn slice(self: Self, first: i64, past_last: i64) Self = {
        const slots = size_of(T);
        let raw_first = mul(first, slots);
        let raw_past_last = mul(past_last, slots);
        let new_ptr = raw_slice(self&.ptr[], raw_first, raw_past_last);
        (ptr: new_ptr, len: sub(past_last, first))
    }
    
    @pub fn subslice(ptr: Self, first: i64, count: i64) Self = {
        slice(ptr, first, add(first, count))
    }
    
    
    @pub fn rest(self: Self, first: i64) Self = {
        slice(self, first, self.len())
    }
    
    // TODO: the other fn type syntax so you can name the arguments in the closure as documentation. 
    // TODO: be more consistant about how tuples are expanded into args to fix Fn((a, b), c) === Fn(a, b, c) when you want Fn(Ty(a, b), c)
    //       seems like a massive mistake that I create ambiguity and then just guess something stupid and hope for the best. 
    @pub fn enumerate(arr: Self, const f: Fn(Ty(i64, *T), Unit)) Unit = {
        var i = 0;
        let l: i64 = len(arr);
        (fn() bool = lt(i, l), fn() Unit = {
            let e: *T = index(arr, i);
            f(i, e);
            i = add(i, 1);
        })!while;
    }
    
    // TODO: I don't love that I have to write the deref version seperatly
    //       but I dont have let destructuring (only function args) so its a pain to take tuples by pointer. 
    //       I should be able to destructure Ptr(A, B) to (Ptr(A), Ptr(B))
    @pub fn foreach(arr: Self, const f: Fn(T, Unit)) Unit = {
        foreach(arr, fn(v: *T) Unit = f(v[]))
    }
    
    @pub fn foreach(arr: Self, const f: Fn(*T, Unit)) Unit = {
        var i = 0;
        let l: i64 = len(arr);
        (fn() bool = lt(i, l), fn() Unit = {
            let e: *T = index(arr, i);
            f(e);
            i = add(i, 1);
        })!while;
    }
    
    @pub fn memcpy(dest: Self, src: Self) Unit = {
        assert(eq(len(dest), len(src)), "OOB");  // Note: not using `asser t_eq` because the vm tracks those for my tests
        // TODO: vm doesnt like empty slices? it should work without the zero check
        (len(src).ne(0), fn() = {
            const f = fn(i: i64, e: *T) Unit = set(dest, i, e[]);
            enumerate(src, f);
        }, fn()=())!if;
    }
    
    // TODO: have eq be generic and do something sane but currently its just in the vm and does addr_eq which should be a seperate thing. 
    @pub fn slice_eq(lhs: Self, rhs: Self) bool = {
        (eq(len(lhs), len(rhs)), fn() bool = {
            (len(lhs).eq(0), fn() = true, fn() = {
                var i = 0;
                var prev = true;  // TODO: this is weird because 'and' doesn't short circuit  
                (
                    fn() bool = { 
                        and(lt(i, len(lhs)), prev) 
                    }, 
                    fn() Unit = { 
                        prev = eq(get(lhs, i), get(rhs, i)); 
                        i = add(i, 1); 
                    },
                )!while;
                and(prev, eq(i, len(lhs)))
            })!if
            
        }, fn() bool = false)!if
    }
    
    /// Set all elements of the slice to 't'. 
    @pub fn fill(self: *Self, t: T) Unit = {
        foreach(self, fn(ptr: *T) Unit = {
            ptr[] = t;
        });
    }
    
    Self
}

@impl @pub
fn List(const T: Type) Type = {
    const Self: Type = (maybe_uninit: Slice(T), len: i64)!struct;
    @pub fn list(cap: i64) Self = (maybe_uninit: (ptr: alloc(T, cap), len: cap), len: 0);  // todo: no alloc if len 0 since i dont free
    @pub fn list() Self = list(0);
    
    @pub fn repeated(t: T, count: i64) Self = {
        var self: Self = list(count);
        range(0, count, fn(_: i64) Unit = self&.push(t));
        self
    }
    
    // Can't reuse the allocation because drop() will free it. TODO: COW
    @pub fn list_clone(from: Slice(T)) Self = {  // TODO: better error message if you put the = on the wrong side of the type
        var self: Self = list(len(from));
        push_all(self&, from);
        self
    }
    
    @pub fn items(self: *Self) Slice(T) = {
        slice(self.maybe_uninit[], 0, self.len[])
    }
    
    @pub fn index(self: *Self, i: i64) *T = {
        index(self.maybe_uninit[], i)
    }
    
    @pub fn get(self: Self, i: i64) T = {
        let ptr: *T = index(self&, i);
        ptr[]
    }
    
    @pub fn reserve(self: *Self, extra: i64) Unit = {
        let total = add(self.len[], extra);
        let old_cap: i64 = len(self.maybe_uninit[]);
        // TODO: why can't I use @if here? 
        (lt(old_cap, total), fn() = {
            let cap = max(max(add(old_cap, extra), mul(old_cap, 2)), 4);
            var new: Self = list(cap);
            (gt(self.len[], 0), fn() Unit = {  // TODO: it doesnt let you create a zero length slice in items()
                let dest: Slice(T) = subslice(new&.maybe_uninit[], 0, self.len[]);
                memcpy(dest, items(self));
                new&.len[] = self.len[];
            }, fn() Unit = ())!if;
            drop(self);
            self[] = new;
        }, fn()=())!if
    }
    
    @pub fn push(self: *Self, v: T) Unit = {
        reserve(self, 1);
        let last: *T = index(self.maybe_uninit[], self.len[]); 
        last[] = v;
        self.len[] = add(self.len[], 1);
    }
    
    @pub fn pop_last(self: *Self) T = {
        assert(gt(self.len[], 0), "OOB");
        let i = sub(self.len[], 1);
        let e: *T = index(self.maybe_uninit[], i);
        self.len[] = i;
        e[]
    }
    
    @pub fn push_all(self: *Self, new: Slice(T)) Unit = {
        reserve(self, len(new));
        let dest: Slice(T) = subslice(self.maybe_uninit[], self.len[], len(new));
        memcpy(dest, new);
        self.len[] = add(self.len[], len(new));
    }
    
    @pub fn push_all(self: *Self, owned: *Self) Unit = {
        self.push_all(owned.items());
        owned.drop();
    }
    
    @pub fn drop(self: *Self) Unit = {
        (self.maybe_uninit.len[].ne(0), fn() = {
            dealloc(T, self.maybe_uninit.ptr[], self.maybe_uninit.len[]);
            self.maybe_uninit.len[] = 0;
            self.len[] = 0;
        }, fn()=())!if;
    }
    
    /// Retains capacity
    @pub fn clear(self: *Self) Unit = {
        self.len[] = 0;
    }
    
    Self
}

@pub const Str = Slice(i64);
@pub fn dump_ffi_types() Str;

// TODO: this is really inefficient if you already own 'a'
@pub fn concat(a: Str, b: Str) Str = {
    var c: List(i64) = list(add(len(a), len(b)));
    c&.push_all(a);
    c&.push_all(b);
    c&.items()
}

@pub fn split(haystack: Str, needle: Str) List(Str) = {
    assert(gt(len(needle), 0), "OOB");
    var lines: List(Str) = list(1);
    var i = 0;
    let last = sub(len(haystack), len(needle));
    var start = 0;
    (fn() bool = le(i, last), fn() Unit = {
        (eq(get(haystack, i), get(needle, 0)), fn() Unit = {
            let check: Str = subslice(haystack, i, len(needle));
            (slice_eq(check, needle), fn() Unit = {
                let found: Str = subslice(haystack, start, sub(i, start));
                push(lines&, found);
                i = add(i, len(needle));
                start = i;
            }, fn() Unit = { i = add(i, 1); })!if
        }, fn() Unit = { i = add(i, 1); })!if
    })!while;
    let found: Str = subslice(haystack, start, max(0, sub(len(haystack), start)));
    push(lines&, found);
    lines
}

// TODO: better error message if you call this on Ptr(Str)
@pub fn splitlines(s: Str) List(Str) = {
    var lf: Str = (10)!slice;  // TODO: string escapes
    split(s, lf)
}

@pub fn endswith(haystack: Str, needle: Str) bool = {
    // TODO: prefix if syntax forces you to give a return type annotation
    (lt(len(haystack), len(needle)),
        fn() = false,
        fn() = {
            let start: Str = subslice(haystack, sub(len(haystack), len(needle)), len(needle));  // TODO: infer type
            slice_eq(start, needle)
        }
    )!if
}

// TODO: these should just be on Slice(T)
@pub fn startswith(haystack: Str, needle: Str) bool = {
    if(lt(len(haystack), len(needle)),
        fn() bool = false,
        fn() bool = {
            let start: Str = subslice(haystack, 0, len(needle));  // TODO: infer type
            slice_eq(start, needle)
        }
    )
}

@pub fn str() Unit = { unit };  // TODO: scope.rs support recursion. 

@pub fn str(i: i64) Str = {
    var s: List(i64) = list(1);
    if(and(ge(i, 0), lt(i, 10)), 
        fn() Unit = push(s&, add(48, i)),
        fn() Unit = {
            push_all(s&, str(div(i, 10))); // TODO: push to list
            push(s&, add(48, mod(i, 10)));
        }
    );
    
    items(s&)
}

// TODO: error checking. 
@pub fn hex_digit(c: i64) i64 = {
    if(ge(c, 97), 
        fn() i64 =  { assert(lt(c, 107), "hex OOB"); add(sub(c, 97), 10) }, 
        fn() i64 = if(ge(c, 65), 
            fn() i64 = { assert(lt(c, 75), "hex OOB"); add(sub(c, 65), 10) }, 
            fn() i64 = { assert(lt(c, 58), "hex OOB"); sub(c, 48)}
        )
    )
}

@pub fn hex(s: Str) i64 = {
    var total = 0;
    var scale = 1;
    var i = sub(len(s), 1);
    var first = 0;
    
    // This prevents overflow for tracking scale for lots of leading zeros. 
    /* TODO: support fully const 
    while(fn() bool = eq(get(s, first), 48),
         fn() Unit = { first = add(first, 1) }
    );
    */
    
    (fn() bool = eq(get(s, first), 48),  
        fn() Unit = { first = add(first, 1) }
    )!while;
    (fn() bool = ge(i, first), fn() Unit = {
        total = add(total, mul(scale, hex_digit(get(s, i))));
        scale = mul(scale, 16);
        i = sub(i, 1);
    })!while;  // TODO: warning if you forget the !while :(
    total
}

@pub fn multi_puts(s: Slice(Str)) Unit = {
    const one = fn(s: Ptr(Str)) Unit = puts(s[]);
    foreach(s, one);
}

// TODO: this is stupid. i have a whole house of cards going on with unique types. 
@pub fn str_eq(lhs: (Ptr(i64), i64), rhs: (Ptr(i64), i64)) bool = slice_eq(slice(lhs), slice(rhs));

// See `puts(Str)` or `e!reflect_print` for something more useful. TODO: make this generic.
@pub @env fn print(i: i64) Unit = {
    var s: Str = str(i);  // TODO: dont treat missing type annotation as Any. actually infer it
    puts(s&.ptr[], s&.len[]);
}

// TODO: letting you use this at runtime gets pretty yucky. you need to garbage collect symbols somehow? 
@pub @interp fn str(s: Symbol) Str;

@pub fn str(s: ""!type) Str = {  // TODO: god damn bro
    let ptr: Ptr(Ptr(i64)) = raw_slice(s&, 0, size_of(i64));
    let len: Ptr(i64) = raw_slice(s&, size_of(i64), mul(2, size_of(i64)));
    slice(ptr[], len[])
};

@pub fn push_all(self: *List(i64), s: ""!type) Unit = {  // TODO: god damn bro
    self.push_all(s.str());
};
