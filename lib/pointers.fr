
fn ptr_diff(start: rawptr, end: rawptr) i64 = 
    end.int_from_rawptr() - start.int_from_rawptr();

fn offset(ptr: rawptr, bytes: i64) rawptr #ir(.add, .Kl);

fn identical(a: rawptr, b: rawptr) bool #ir(.ceql, .Kl);

// TODO: put this in fn Ptr so you always get them? 
fn ptr_utils($T: Type) void = {
    fn ptr_diff_bytes(start: *T, end: *T) i64 = sub(@as(i64) T.int_from_ptr(end), T.int_from_ptr(start));
    fn offset(ptr: *T, element_count: i64) *T = 
        ptr.offset_bytes(element_count * T.size_of());
        
    fn offset_bytes(ptr: *T, bytes: i64) *T #ir(.add, .Kl);
    fn ptr_diff(start: *T, end: *T) i64 = 
        ptr_diff_bytes(start, end).div(::T.size_of());
    
    fn identical(a: *T, b: *T) bool #ir(.ceql, .Kl);
    
    fn for(first: *T, past_last: *T, $body: @Fn(it: *T) void) void = {
        end := T.int_from_ptr(past_last);
        while(=> end.ne(T.int_from_ptr(first))) {
            body(first);
            first = first.offset(1);
        }
    }
    
    // TODO: replace with niche ?*T
    fn is_null(ptr: *T) bool = 0.eq(T.int_from_ptr(ptr));
    
    fn in_memory_after(after: *T, before: *T) bool #ir(.cugtl, .Kl);
        
    fn between(first: *T, past_last: *T) []T = 
        (ptr = first, len = ptr_diff(first, past_last))
}

// TODO: replace with niche ?rawptr
fn is_null(ptr: rawptr) bool #inline = 
    ptr.int_from_rawptr().eq(0);

// These can't just be #redirect(Ty(i64, i64), bool) because llvm is a whiner. 
fn eq(a: rawptr, b: rawptr) bool #ir(.ceql, .Kl);

fn ne(a: rawptr, b: rawptr) bool #ir(.cnel, .Kl);

fn ptr_diff(start: rawptr, end: *u8) i64 =
    ptr_diff(start, u8.raw_from_ptr(end));

fn ptr_diff(start: *u8, end: rawptr) i64 =
    ptr_diff(u8.raw_from_ptr(start), end);
