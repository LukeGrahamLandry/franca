
fun ptr_diff(start: rawptr, end: rawptr) i64 = end.ptr_to_int().sub(start.ptr_to_int());
fun ptr_diff_bytes() Unit; // TODO: useless because u8 is not a real type, its still 8 bytes. 
fun offset() Unit;
fun offset_bytes() Unit;

// TODO: put this in fn Ptr so you always get them? 
#comptime
fun ptr_utils(const T: Type) Unit = {
    fun ptr_diff_bytes(start: *T, end: *T) i64 = ptr_diff(@as(rawptr) start, @as(rawptr) end);
    fun offset(ptr: *T, element_count: i64) *T = @as(rawptr) raw_slice(@as(rawptr) ptr, element_count.mul(T.size_of()), 0); // TODO: remove last param, it doesn't do anything anymore since I removed my interp. 
    fun offset_bytes(ptr: *T, bytes: i64) *T = @as(rawptr) raw_slice(@as(rawptr) ptr, bytes, 0); 
    fun ptr_diff(start: *T, end: *T) i64 = ptr_diff_bytes(start, end).div(T.size_of());
    fn ptr_to_int(ptr: *T) i64 = ptr_to_int(@as(rawptr) ptr);
    
    fun for(var first: *T, past_last: *T, const body: Fn(*T, Unit)) Unit = {
        while(fn = first.ptr_to_int().ne(past_last.ptr_to_int())) {|
            body(first);
            first = first.offset(1);
        }
    }
}
