
fn ptr_diff(start: rawptr, end: rawptr) i64 = end.int_from_rawptr().sub(start.int_from_rawptr());
fn ptr_diff_bytes() void; 
fn offset() void;
fn offset_bytes() void;

// TODO: put this in fn Ptr so you always get them? 
fn ptr_utils($T: Type) void = {
    fn ptr_diff_bytes(start: *T, end: *T) i64 = sub(@as(i64) T.int_from_ptr(end), T.int_from_ptr(start));
    fn offset(ptr: *T, element_count: i64) *T = {
        bytes := element_count.mul(:: T.size_of());
        ptr.offset_bytes(bytes)
    }
    fn offset_bytes(ptr: *T, bytes: i64) *T = {
        old := T.raw_from_ptr(ptr);
        new := old.offset(bytes);
        T.ptr_from_raw(new)
    }
    fn ptr_diff(start: *T, end: *T) i64 = ptr_diff_bytes(start, end).div(::T.size_of());
    
    fn for(first: *T, past_last: *T, $body: Fn(*T, void)) void = {
        end := T.int_from_ptr(past_last);
        while(=> end.ne(T.int_from_ptr(first))) {|
            body(first);
            first = first.offset(1);
        }
    }
        
    // TODO: replace with niche ?*T
    fn is_null(ptr: *T) bool = 0.eq(T.int_from_ptr(ptr));
}

// TODO: replace with niche ?rawptr
fn is_null(ptr: rawptr) bool = ptr.int_from_rawptr().eq(0);

fn eq(a: rawptr, b: rawptr) bool #redirect(Ty(i64, i64), bool);
fn ne(a: rawptr, b: rawptr) bool #redirect(Ty(i64, i64), bool);
