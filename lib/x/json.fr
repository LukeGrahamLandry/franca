#include_std("bindings/wuffs.fr");

JsonParser :: @struct(
    decoder: WuffsJsonDecoder,
    input: WuffsIoBuffer,
    output: WuffsTokenBuffer,
    depth: i64 = 0,
    cursor: i64 = 0,
    is_dict: BitSet = empty(),
    last_thing_was_key: bool = false,
);

// TODO: if the first thing doesn't have a payload, you get an unwrap in export_ffi. -- Jul 4
JsonPart :: @tagged(
    Key: Str, 
    StringValue: Str,
    BoolValue: bool,
    // TODO: null, numbers.
    StartDict,
    StartList,
    End,
    Eof,
);

// TODO: you can't call this init because the overload set is needed too early.
fn new(input: Str, mem: Alloc) JsonParser = {
    self: JsonParser = (
        decoder = WuffsJsonDecoder.zeroed(),
        input = WuffsIoBuffer.zeroed(),
        output = WuffsTokenBuffer.zeroed(),
    );
    self.input.data = input;
    self.input.meta.wi = self.input.data.len;
    self.output.data = mem.alloc(WuffsToken, 256);
    // TODO: idk if this is allowed to be moved or if it has internal pointers. 
    self.decoder&.wuffs_json__decoder__initialize(WuffsJsonDecoder.size_of(), WUFFS_VERSION, 0).unwrap();
    self
}

fn next(self: *JsonParser) Result(JsonPart, Str) = { 
    (token: WuffsToken, src: Str) := @match(self.next_token()) {
        (fn Ok(v) Ty(WuffsToken, Str) => v);
        (fn Err(status) => {
            if status == "@base: end of data" {|
                return(Ok = .Eof);
            };
            return(Err = status)
        });
    };
    
    if token.category() == .String {|
        ::tagged(Result(Str, Str));
        s := @try(self.parse_str(token)) return;
        if self.expecting_key() && !self.last_thing_was_key {|
            self.last_thing_was_key = true;
            return(Ok = (Key = s));
        } else {|
            self.last_thing_was_key = false;
            return(Ok = (StringValue = s));
        };
    };
    self.last_thing_was_key = false;
    
    if token.is(.Structure, .Push) {|
        self.last_thing_was_key = false;
        self.depth += 1;
        if token.is(.Structure, .ToList) {|
            self.is_dict&.unset(self.depth);
            return(Ok = .StartList);
        };
        if token.is(.Structure, .ToDict) {|
            self.is_dict&.set(self.depth, temp());
            return(Ok = .StartDict);
        };
        return(Err = "wuffs bad push?");
    };
    if token.is(.Structure, .Pop) {|
        self.depth -= 1;
        return(Ok = .End);
    };
    
    if token.is(.Literal, .False) {|
        return(Ok = (BoolValue = false));
    };
    if token.is(.Literal, .True) {|
        return(Ok = (BoolValue = true));
    };
    
    println("bad token category");
    (Err = "wuffs bad json")
}

fn expecting_key(self: *JsonParser) bool = 
    self.is_dict&.get(self.depth);

fn parse_str(self: *JsonParser, prev: WuffsToken) Result(Str, Str) = {
    msg :: "TODO: non-basic quotes";
    assert(prev.is(.String, .Convert0DstFrom1SrcDrop), msg);
    (token, data) := @try(self.next_token()) return;
    if token.is(.String, .Convert0DstFrom1SrcDrop) {| // assuming this is the only empty string for now. 
        assert(data == "\"", "expected empty string"); 
        return (Ok = "");
    };
    assert(token.is(.String, .Convert1DstFrom1SrcCopy), msg); // TODO: someone has to do the copy if i end up compacting the input buffer so don't have to hold the whole file in memory.
    (token, _) := @try(self.next_token()) return;
    assert(token.is(.String, .Convert0DstFrom1SrcDrop), msg);
    (Ok = data)
}

fn next_token(self: *JsonParser) Result(Ty(WuffsToken, Str), Str) = {
    loop {|
        continue :: local_return;
        
        if self.output.meta.ri >= self.output.meta.wi {|
            // Can't call wuffs_base__token_buffer__compact (its static?)
            // but also I guess I don't even need that, cause I know I ready all the tokens. 
            self.output.meta.ri = 0;
            self.output.meta.wi = 0;
            status := self.decoder&.wuffs_json__decoder__decode_tokens(self.output&, self.input&, empty());
            // TODO: use status
            if self.output.meta.ri >= self.output.meta.wi {|
                assert(!status.repr.ptr.is_null(), "didn't decode but claimed 'ok'");
                status := status.repr.str();
                return(Err = status);
            };
        };
        token := self.output.data[self.output.meta.ri];
        self.output.meta.ri += 1;
        
        if token.category() == .Filler {|
            self.cursor += token.len();
            continue();
        };
        
        source := self.input.data.subslice(self.cursor, token.len());
        self.cursor += token.len();
        //@println("%: %; %; %", token.repr.bitcast(), token.category(), token.len(), source);
        return(Ok = (token, source))
    }; // TODO: have emit_bc allow non-discard result of loop. its a never so doesn't matter. 
    panic("unreachable end of loop")
}

// Call when you just got a key you don't care about and want to skip the whole subtree of its value. 
fn skip_next_value(self: *JsonParser) Result(void, Str) = {
    // TODO: debug assert in list or last was key. 
    depth := self.depth;
    part := @try(self.next()) return;
    @match(part) {
        (fn StartDict() => return(self.skip_until_depth(depth)));
        (fn StartList() => return(self.skip_until_depth(depth)));
        // TODO: it used to work if this fell through
        (fn StringValue() => return(.Ok)); // Strings are a single Part, so we're done. 
        @default => return(Err = "Expected start of json value.");
    }; // TODO: the compiler segfaults if you forget this semicolon. :FUCKED -- Jul 4
    .Ok
}

// This skips the rest of the current dist/list. 
// So you can see a key, and its value, and then decide to discard the whole thing. 
fn skip_current_value(self: *JsonParser) Result(void, Str) = {
    self.skip_until_depth(self.depth - 1)
}

// Fast path where we don't bother decoding string escapes into memory. 
fn skip_until_depth(self: *JsonParser, end_depth: i64) Result(void, Str) = {
    //println("start skip");
    while => end_depth < self.depth {|
        (token, _) := @try(self.next_token()) return; // TODO: don't even bother returning the source slice. 
    
        if token.is(.Structure, .Push) {|
            self.depth += 1;
        } else {|
            if token.is(.Structure, .Pop) {|
                self.depth -= 1;
            };
        };
    };
    //println("end skip");
    .Ok
}

/////////////////////////////////////////////////////////////////////////////////////

fn unwrap(s: WuffsStatus) void = {
    @assert(s.repr.ptr.is_null(), "Wuffs: %", s.repr);
}

VALUE_BASE_CATEGORY__SHIFT :: 38;
VALUE_BASE_DETAIL__SHIFT :: 17;
fn category(t: WuffsToken) WuffsVbc = {
    v := t.repr.right_shift_arith(VALUE_BASE_CATEGORY__SHIFT);
    bit_cast_unchecked(u64, WuffsVbc, v)
}
fn detail(t: WuffsToken) u64 = {
    t.repr.right_shift_arith(VALUE_BASE_DETAIL__SHIFT).bit_and(0x1FFFFF)
}
fn len(t: WuffsToken) i64 = { // TODO: why doesn't this const coerece without the extra zeros? 
    t.repr.bit_and(0x00000000FFFF).bitcast()
}

fn right_shift_arith(value: u64, shift_amount: i64) u64 = 
    value.div(1.shift_left(shift_amount)); // TODO: right shift intrinsic

#redirect(Ty(i64, i64), i64) fn div(a: u64, b: u64) u64; // TODO: WRONG! unsigned is different than signed. 

fn is(self: WuffsToken, c: WuffsVbc, d: WuffsVbd) bool = {
    self.category() == c && {
        mask := bit_cast_unchecked(u64, WuffsVbd, d);
        self.detail().bit_and(mask) != 0
    }
}

WUFFS_VERSION :: 0x0000400;

:: enum(WuffsVbc);
