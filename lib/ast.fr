const AstExpr = FatExpr;

fn infer_raw_deref_type(expr: FatExpr) TypeInfo;
fn promote_closure(expr: FatExpr) FuncId;

// @cap(io)
fn print_ast(v: FatExpr) Unit;

// TODO: Calling the same macro multiple times was totally fucked because you alias the constants!
//       I need copy vs clone. but this is my temporary fix. you need to call this every time you use !quote. 
// TODO: it correctly errors when yuou try to mutate through an array but not when you just try to set a field value i guess? 
//       need to put is_constant on Values instead of on InterpBox. 
fn clone_ast(e: FatExpr) FatExpr;
// Only works on const heap pointers (panics otherwise).
fn clone_const(ptr: VoidPtr) VoidPtr;

// Convert a pointer to a value into an ast that will produce that value when evaluated. 
fn literal_ast(ty: Type, ptr: VoidPtr) FatExpr;
fn intern_type(ty: TypeInfo) TypeId;

// TODO: really need better error for missing dot (or just don't require the dot.
const IntType;
fn get_type_int(e: AstExpr) IntType;

// TODO: These can be done with ffi already. 
// TODO: this wouldn't be as important if !quote could do less clunky placeholders.  
//       but maybe its nicer for simple things to just be function calls. 
// TODO: const ast = @module { fn new_call(); ... }; for namespacing? 
fn new_call_ast(f: AstExpr, arg: AstExpr) AstExpr;
fn new_pair_ast(a: AstExpr, b: AstExpr) AstExpr;

// You probably don't want to call this directly.  
fn unquote_macro_apply_placeholders(exprs: Slice(FatExpr)) FatExpr;  
