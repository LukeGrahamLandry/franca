fn rs(); 
fn assume_owned();
fn to_index();

UnknownType :: @builtin UnknownType;
// TODO: HACK: -- May 27
//      The compiler can't expose this directly because the argument is an enum which is hard to cope with for my current c_call,
//      but the return type isn't a multiple of 8 bytes (now that TypeId is small) so it doesn't know how to load it into a register 
//      so it can't be a flat_call either. this can go away when i follow proper c abi. 
//      there are some contexts it wont let you call this from. see body of fn Array(Type, i64) for an example. 
fn intern_type(ty: TypeInfo) Type = intern_type_ref(ty&);

// TODO: really you want the compiler ffi things to be defined here so they're easy to see and hang comments off. 
//       but for now its convient to have thier signetures in the same place as i assign thier comptime_addr.  -- Apr 20

// TODO: Make a 'fn const_eval($T, value: FatExpr) T;' once i have partial const in @generic -- Apr 27

fn const_eval($T: Type) (@Fn(value: FatExpr) T) #generic = (fn(value: FatExpr) T = {
    out := @uninitialized T;
    const_eval(value, T, T.raw_from_ptr(out&)); // crashes on type error
    out
});

// TODO: make sure its an error to shadow a const with a function. -- Apr 27
const_eval_string :: const_eval(Str);
const_eval_type :: const_eval(Type);

fn ne(a: Type, b: Type) bool #redirect(Ty(u32, u32), bool);

// This checks if types are identical. 
// You might want to use can_assign_types instead since that has more knowledge about assignable but not identical types.
fn eq(a: Type, b: Type) bool #redirect(Ty(u32, u32), bool);

#fold fn int(s: Symbol) i64 = {
    i := ptr_cast_unchecked(From = Symbol, To = u32, ptr = s&)[];
    i.zext()
}

fn get_flag(self: *Func, flag: FnFlag) bool = {
    mask := 1.shift_left(@as(i64) flag);
    self.flags.bit_and(mask) != 0
}

fn set_flag(self: *Func, flag: FnFlag) void = {
    mask := 1.shift_left(@as(i64) flag);
    new := self.flags.bit_or(mask);
    self.flags = new;
}

fn unset_flag(self: *Func, flag: FnFlag) void = {
    mask := 1.shift_left(@as(i64) flag);
    new := self.flags.bit_and(mask.bit_not());
    self.flags = new;
}

fn has_tag(self: *Func, flag: Flag) bool = {
    each self.annotations { a |
        if(a.name == flag.ident(), => return(true));
    };
    false
}

fn ident(self: *Binding) ?Symbol = {
    @match(self.name) {
        fn Var(v) => (Some = v.name);
        fn Ident(v) => (Some = v);
        @default => .None;
    }
}

fn ne(a: FuncId, b: FuncId) bool #redirect(Ty(u32, u32), bool);

fn from_index();
fn as_index();

fn TypedIndex($T: Type) void = {
    fn as_index(f: T) i64 = f.to_index().zext();
    
    fn to_index(f: T) u32 #unsafe_noop_cast;
    
    fn from_index(idx: i64) T = {
        val: u32 = idx.trunc();
        ptr_cast_unchecked(From = u32, To = T, ptr = val&)[]
    }
}

:: TypedIndex(FuncId);
:: TypedIndex(OverloadSet);
:: TypedIndex(LabelId);
:: TypedIndex(Type);

fn Ty(a: Type, b: Type, c: Type, d: Type, e: Type) Type #fold = 
    Ty(@slice(a, b, c, d, e));
