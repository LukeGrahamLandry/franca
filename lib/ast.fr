const AstExpr = FatExpr;

@pub fn infer_raw_deref_type(expr: FatExpr) TypeInfo;
@pub fn promote_closure(expr: FatExpr) FuncId;

// @cap(io)
@pub fn print_ast(v: FatExpr) Unit;

// TODO: Calling the same macro multiple times was totally fucked because you alias the constants!
//       I need copy vs clone. but this is my temporary fix. you need to call this every time you use !quote. 
// TODO: it correctly errors when yuou try to mutate through an array but not when you just try to set a field value i guess? 
//       need to put is_constant on Values instead of on InterpBox. 
@pub fn clone_ast(e: FatExpr) FatExpr;
// Only works on const heap pointers (panics otherwise).
@interp @pub fn clone_const(ptr: VoidPtr) VoidPtr;

/// Convert a pointer to a value into an ast that will produce that value when evaluated. 
@pub fn literal_ast(ty: Type, ptr: VoidPtr) FatExpr;
@pub fn intern_type(ty: TypeInfo) Type;

const IntType;  // TODO: it breaks if you remove this const decl. 
@pub fn get_type_int(e: AstExpr) IntType;

// TODO: These can be done with ffi already. 
// TODO: const ast = @module { @pub fn new_call(); ... }; for namespacing? 
// Note: These are less important now that !unquote exists but maybe its nicer for simple things to just be function calls. 
// TODO: implement here using !quote instead of in the compiler? 
@pub fn new_call_ast(f: AstExpr, arg: AstExpr) AstExpr;
@pub fn new_pair_ast(a: AstExpr, b: AstExpr) AstExpr;

// You probably don't want to call this directly.  
@pub fn unquote_macro_apply_placeholders(exprs: Slice(FatExpr)) FatExpr;  

/// Calls Compiler::compile_expr 
/// Infers the type and avoids some redundant work if you duplicate the ast node in a bunch of places after calling this. 
@pub fn compile_ast(expr: AstExpr) AstExpr;

fn const_eval_string(value: AstExpr) Str;
