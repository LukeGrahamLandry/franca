Type  :: @builtin Type;  // but what kind...?
unit  :: ();  // The officially blessed empty tuple.
void  :: @type(unit);  // The set of all empty tuples.
bool  :: @builtin bool;
true  :: @builtin true;
false :: @builtin false;
i64   :: @builtin i64;
f64   :: @builtin f64;
Never :: @builtin Never;  // It is illegal to create a value of this type. 
usize :: i64; // todo
isize :: i64; // todo
rawptr :: @builtin rawptr;
OverloadSet :: @builtin OverloadSet;
f32 :: @builtin f32;

// An interned string blessed by the compiler.
// This is the type of identifiers in source files.
// There's nothing special about it unless you're interacting with the asts in macros.

// TODO: this is the forward declaration for struct initilizers to bind to. hate it. 
fn init(_: void) void;

// TODO: these are still somewhat order dependent because of `:: expr;`.
#include_std("compiler");
#include_std("driver_api.fr");
:: __compiler_save_fatexpr_type(FatExpr);
#include_std("math.fr");
#include_std("collections/slice.fr");
#include_std("arena.fr");
#include_std("sys/libc.fr");
#include_std("codegen/llvm/intrinsics.fr");
#include_std("pointers.fr");
#include_std("casts.fr");
#include_std("alloc.fr");
#include_std("collections/list.fr");
#include_std("collections/map.fr");
#include_std("option.fr");
#include_std("sys/process.fr");
#include_std("ast.fr");
#include_std("macros.fr");
#include_std("fmt.fr");
#include_std("sys/panic.fr");
#include_std("collections/bucket_array.fr");
#include_std("collections/bit_set.fr");
#include_std("codegen/aarch64/instructions.fr");
#include_std("codegen/aarch64/intrinsics.fr");
#include_std("codegen/wasm/instructions.fr");
#include_std("codegen/bf/instructions.fr");
#include_std("codegen_cranelift_intrinsics");
#include_std("codegen/aarch64/unwind.fr");
#include_std("codegen/aarch64/jump.fr");
#include_std("codegen/c/intrinsics.fr");
#include_std("loop.fr");
#include_std("build.fr");
#include_std("sys/fs.fr");
#include_std("sys/terminal.fr");
#include_std("trace.fr");
