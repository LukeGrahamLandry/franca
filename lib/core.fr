Type  :: Type!builtin;  // but what kind...?
unit  :: ();  // The officially blessed empty tuple.
Unit  :: @type(unit);  // The set of all empty tuples.
bool  :: bool!builtin;
true  :: true!builtin;
false :: false!builtin;
i64   :: i64!builtin;
f64   :: f64!builtin;
Never :: Never!builtin;  // It is illegal to create a value of this type. 
usize :: i64; // todo
isize :: i64; // todo
rawptr :: rawptr!builtin;
OverloadSet :: OverloadSet!builtin;

// An interned string blessed by the compiler.
// This is the type of identifiers in source files.
// There's nothing special about it unless you're interacting with the asts in macros.
const Symbol = Symbol!builtin;

// TODO: this is the forward declaration for struct initilizers to bind to. hate it. 
fun init(_: Unit) Unit = ();

fun UInt(bits: i64) Type = IntType(bits, false);
fun SInt(bits: i64) Type = IntType(bits, true);

fun Tag(E: Type) Type = i64;  // Currently enum tags are untyped but that will likely change.

// TODO: this sucks. dynamically make these for uxx & ixx.
const u1 = UInt(1);
const u2 = UInt(2);
const u4 = UInt(4);
const u5 = UInt(5);
const u6 = UInt(6);
const u8 = UInt(8);
const u12 = UInt(12);
const u16 = UInt(16);
const u19 = UInt(19);
const u32 = UInt(32);
const u64 = UInt(64);
const i7 = SInt(7);
const i8 = SInt(8);
const i16 = SInt(16);
const i19 = SInt(19);
const i26 = SInt(26);
const i32 = SInt(32);
const i33 = SInt(33);

fun operator_star_prefix(T: Type) Type = Ptr(T);

const Fd = Unique(i64);

#comptime 
fun if(const T: Type) Unit = {
    fun if(cond: bool, const then: Fn(Unit, T), const else: Fn(Unit, T)) T =
        (cond, then, else)!if;
}

// TODO: auto impl generics
if(i64); if(Unit); if(bool); if(u8);

fun if(cond: bool, const then: Fn(Unit, Unit)) Unit =
    (cond, then, =>())!if;

fun while(const cond: Fn(Unit, bool), const body: Fn(Unit, Unit)) Unit =
    (cond, body)!while;

fun dowhile(const f: Fn(Unit, bool)) Unit = (=> f(), =>())!while;

/// This is intended to be used with early returns... obviously.
fun loop(const f: Fn(Unit, Unit)) Never = {
    dowhile {|
        f();
        true
    };
    // TODO: this typechecks for the wrong reason. 
}


fun mod(big: i64, divisor: i64) i64 = sub(big, mul(div(big, divisor), divisor));
fun max(a: i64, b: i64) i64 = (lt(a, b), =>b, =>a)!if;
fun min(a: i64, b: i64) i64 = (gt(a, b), =>b, =>a)!if;
fun not(b: bool) bool = (b, => false, => true)!if;
fun neg(a: i64) i64 = sub(0, a);
fun abs(val: i64) i64 = (val.ge(0), => val, => val.neg())!if;
fun int(val: bool) i64 = (val, => 1, => 0)!if;
fun eq(a: bool, b: bool) bool = a.int().eq(b.int());
fun eq(lhs: Symbol, rhs: Symbol) bool = lhs.int().eq(rhs.int());
fn to_bool(b: i64) bool = (eq(b, 0), => false, => true)!if;
fn add(a: u8, b: u8) u8 = @as(u8) @as(i64) add(@as(i64) a, @as(i64) b);
fn ne(a: u8, b: u8) bool = ne(@as(i64) a, @as(i64) b);
fun eq(a: u8, b: u8) bool = eq(@as(i64) a, @as(i64) b);
fn lt(a: u8, b: u8) bool = lt(@as(i64) a, @as(i64) b);
fn gt(a: u8, b: u8) bool = gt(@as(i64) a, @as(i64) b);
fn le(a: u8, b: u8) bool = le(@as(i64) a, @as(i64) b);
fn ge(a: u8, b: u8) bool = ge(@as(i64) a, @as(i64) b);
fn sub(a: u8, b: u8) u8 = @as(u8) @as(i64) sub(@as(i64) a, @as(i64) b);

// TODO: this gets a bit silly if I have to define this stuff all again but with different types. 
//       it would be cool if it could be done with traits. like anything with an ordering could have a fn max (bad example for floats i guess)
fun neg(a: f64) f64 = sub(0.0, a); // TODO: there's an instruction for this. which would be better because there's no zero register for floats. 

/// Yes, really...
fun is_nan(a: f64) bool = a.eq(a).not();  // TODO: this could be fewer instructions but this is more fun. 

// There must be a not insane way to do this but i gave up and read the two's complement wikipedia page.
/// Convert an i64 to an i<bit_count> with the (64-<bit_count>) leading bits 0.
fun signed_truncate(x: i64, bit_count: i64) i64 = {
    let mask = 1.shift_left(bit_count).sub(1);
    (le(x, 0), => bit_and(add(bit_not(mul(x, neg(1))), 1), mask), => x)!if
}

// Note: these are not short circuiting because arguments are always evaluated. 
fun and(a: bool, b: bool) bool = a.if(=> b, => false);
fun or(a: bool, b: bool) bool = a.if(=> true, => b);

// Note: these are short circuiting. The closure will only be called if necessary. 
fun and(a: bool, const b: Fn(Unit, bool)) bool = a.if(b, => false);
fun or(a: bool, const b: Fn(Unit, bool)) bool = a.if(=> true, b);

fun assert(cond: bool, msg: Str) Unit = (cond, =>(), fn() Unit=>{
    panic(msg); // TODO: fix overload resolution so this doesn't need the semi colon to turn Never to Unit
})!if;

fun println(msg: bool) Unit = {
    let msg = (msg, =>"true", =>"false")!if;
    println(msg);
}

fun println(msg: i64) Unit = {
    println(msg.str()); // TODO: LEAK
}
fun println(msg: u8) Unit = println(@as(i64) msg);

#include_std("compiler");
#include_std("libc");
#include_std("codegen/llvm/basic.fr");
#include_std("pointers.fr");
#include_std("slice.fr");
#include_std("mem.fr");
#include_std("list.fr");
#include_std("map.fr");
#include_std("option.fr");
#include_std("system.fr");
#include_std("ast.fr");
#include_std("macros.fr");
#include_std("fmt.fr");
#include_std("codegen/aarch64/instructions.fr");
#include_std("codegen/aarch64/basic.fr");
#include_std("codegen/wasm/instructions.fr");
#include_std("codegen/bf/instructions.fr");
#include_std("codegen_cranelift_basic");
#include_std("testing.fr");
