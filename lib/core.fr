@pub const Type;  // but what kind...?
@pub const Unit: Type = ();  // The set of all empty tuples.
@pub const unit: Unit = ();  // The officially blessed empty tuple.
@pub const bool: Type;
@pub const true: bool;
@pub const false: bool;
@pub const i64: Type;
@pub const f64: Type;
@pub const Never: Type;
@pub const usize = i64; // todo
@pub const isize = i64; // todo
@pub const VoidPtr: Type;
@pub const OverloadSet: Type;

// An interned string blessed by the compiler.
// This is the type of identifiers in source files.
// There's nothing special about it unless you're interacting with the asts in macros.
@pub const Symbol: Type;

// TODO: this is the forward declaration for struct initilizers to bind to. hate it. 
@pub fn init(_: Unit) Unit = ();

@pub fn IntType(bits: i64, signed: bool) Type;

/// The parser emits calls to this function for 0b____ and 0x____ tokens.
@comptime @generic 
@pub fn from_bit_literal(bit_count: i64, value: i64) IntType(bit_count, false) = @as(IntType(bit_count, false)) value;  // TODO: actual types

// TODO: dynamically make these for uxx & ixx.
@pub const f32 = f64; // TODO

@pub fn UInt(bits: i64) Type = IntType(bits, false);
@pub fn SInt(bits: i64) Type = IntType(bits, true);

@pub fn Tag(E: Type) Type = i64;  // Currently enum tags are untyped but that will likely change.

@pub fn type_id(T: Type) i64;

/// The type of '@pub fn(Arg) Ret'. This is a comptime only value.
/// All calls are inlined, as are calls that pass one of these as an argument.
/// Captures of runtime variables are allowed since you just inline everything anyway.
/// Const captures behave as you'd expect from first class closures.
@pub fn Fn(Arg: Type, Ret: Type) Type;

// TODO: include calling convention.
/// Like @pub fn(Arg, Ret) but as a runtime value. Same as a function pointer in c but with less insane syntax :).
/// Use '!addr' on a normal @pub fn value to get create a value of this type.
/// - The function cannot have any runtime variable captures,
///   but they could be implemented on top of this by taking an environment data pointer as an argument.
/// - The function cannot have any const arguments, they must be baked before creating the pointer.
@pub fn FnPtr(Arg: Type, Ret: Type) Type;

@pub fn Opaque(size_bytes: i64, align_bytes: i64) Type;

// TODO: this sucks. dynamically make these for uxx & ixx.
@pub const u1 = UInt(1);
@pub const u2 = UInt(2);
@pub const u4 = UInt(4);
@pub const u5 = UInt(5);
@pub const u6 = UInt(6);
@pub const u8 = UInt(8);
@pub const u12 = UInt(12);
@pub const u16 = UInt(16);
@pub const u19 = UInt(19);
@pub const u32 = UInt(32);
@pub const u64 = UInt(64);
@pub const i7 = SInt(7);
@pub const i8 = SInt(8);
@pub const i16 = SInt(16);
@pub const i19 = SInt(19);
@pub const i26 = SInt(26);
@pub const i32 = SInt(32);
@pub const i33 = SInt(33);

#include_std("codegen/aarch64/basic.gen.fr");
#include_std("codegen/llvm/basic.fr");

@pub fn mod(big: i64, divisor: i64) i64 = sub(big, mul(div(big, divisor), divisor));
@pub fn max(a: i64, b: i64) i64 = (lt(a, b), fn()=b, fn()=a)!if;
@pub fn min(a: i64, b: i64) i64 = (gt(a, b), fn()=b, fn()=a)!if;
@pub fn not(b: bool) bool = (b, fn() bool = false, fn() bool = true)!if;
@pub fn neg(a: i64) i64 = sub(0, a);

// There must be a not insane way to do this but i gave up and read the two's complement wikipedia page.
/// Convert an i64 to an i<bit_count> with the (64-<bit_count>) leading bits 0.
@pub fn signed_truncate(x: i64, bit_count: i64) i64 = {
    let mask = sub(shift_left(1, bit_count), 1);
    (le(x, 0), fn() i64 = {
        bit_and(add(bit_not(mul(x, neg(1))), 1), mask)
    }, fn() i64 = x)!if
}

@forward @pub fn assert_eq() = ();  // TODO

// TODO: this cant just be a no-op because the vm counts that my tests trigger all their assertions.
/// Stupid question, but I guess it's wierd if I don't let you ask.
@pub fn assert_eq(_: Unit, __: Unit) Unit = assert_eq(0, 0);

@pub fn Ty(A: Type, B: Type) Type;
// Note: these are not short circuiting because arguments are always evaluated. TODO: varients that accept closures
@pub fn and(a: bool, b: bool) bool = (a, fn() bool = b, fn() bool = false)!if;
@pub fn or(a: bool, b: bool) bool = (a, fn() bool = true, fn() bool = b)!if;

// TODO: be more efficient about this type of function. It needs to be evaluated at comptime,
//       but you don't have to make a new function object to specialize it, just inline the value.
//       @inline instead of @comptime should work for that since !macros are intercepted in the compiler,
//       but it doesn't bind the args correctly for some reason.
// Measured in interpreter stack slots.
@comptime @pub fn size_of(T: Type) i64 = T!size_of;
// These don't care about the size of the type, they just measure in interp stack slots. 

@interp @pub fn raw_slice(ptr: VoidPtr, first: i64, one_past_last: i64) VoidPtr;

#include_std("compiler");

@pub const Fd = Unique(i32);
#include_std("libc");

@interp @env @pub fn puts(msg: (Ptr(i64), i64)) Unit;
// Halts the program and reports an error. The return value can typecheck as anything because it never returns. 
@interp @pub fn panic(msg: (Ptr(i64), i64)) Never;
@pub fn assert(cond: bool, msg: (Ptr(i64), i64)) Unit = (cond, fn() Unit=(), fn() Unit=panic(msg))!if;

#include_std("collections.fr");
#include_std("system.fr");
#include_std("ast.fr");
#include_std("macros.fr");
#include_std("codegen/aarch64/instructions.fr");
#include_std("codegen/aarch64/basic.fr");
#include_std("codegen/wasm/instructions.fr");

#include_std("compiler_late");
