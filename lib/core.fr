Type  :: @builtin Type;
void  :: @builtin void;  // The set of all empty tuples.
bool  :: @builtin bool;
true  :: @builtin true;
false :: @builtin false;
i64   :: @builtin i64;
f64   :: @builtin f64;
Never :: @builtin Never;  // It is illegal to create a value of this type. 
usize :: i64; // todo
isize :: i64; // todo
rawptr :: @builtin rawptr;
OverloadSet :: @builtin OverloadSet;
f32 :: @builtin f32;

:: bootstrap_compiler_environment_pre();
:: bootstrap_compiler_environment_post();

// :blessed:
// Code behind the @late macro is only enabled after this function runs. 
// Non-builtin_prefix_macro macros cannot be expanded before this function runs, 
// because the compiler doesn't have the type 'FatExpr', so it can't resolve the overload.
fn bootstrap_compiler_environment_pre() void = {
    env := get_comptime_environment();
    s: Fn(Type, Type) : Slice;
    env.make_slice_t = (Some = s);
    env.bake_os = (Some = bake_relocatable_value);  // This is only needed for aot so it's not super important that it be here... but it does have to be somewhere. 
    env.fat_expr_type = (Some = FatExpr);
    env.intrinsic_type = (Some = i64);  // :UpdateBoot
    q: Fn(Slice(FatExpr), FatExpr) : unquote_macro_apply_placeholders;
    env.unquote_placeholders = (Some = q);
    env.c_str_type = CStr;
    
    // you have to do tagged TypeInfo before you enable @late code. 
    // but now since these are all compiled in one block, it instantiates the const arg functions first regardless of lexical order, so its fine. 
    tagged(TypeInfo); 
    tagged(Expr);
    tagged(Stmt);
    tagged(LazyType);
    tagged(Name);
}

fn bootstrap_compiler_environment_post() void = {
    // :link_rename
    env := get_comptime_environment(); // TODO: this can just be a thing on the comptime context but it starts to get a bit circular...
    env.compile_error_pointer = (Some = *CompileError);
    env.os_type = (Some = Os);
    env.dynamic_context_type = @struct(default: DefaultContext); // TODO: get more fancy with letting the driver program add things. 
    env.runtime_init = (Some = franca_runtime_init);
}

// TODO: this is a pain but doing it for every program makes mandlebrot like 10-30% slower -- Sep 21

fn enable_franca_ir_types(t: Type) void = {
    env := get_comptime_environment();
    env.ir_op_cls_types = t;
}

fn get_build_options() *BuildOptions = {
    env := get_comptime_environment();
    BuildOptions.ptr_from_raw(env.build_options)
}

// TODO: need a more consistant system for adding parameters that you set from the outside. 
//       would be good for imports too (like render backend in ../graphics). 
//       and you want to allow having different values at comptime and runtime. 
//       so something like #target_os where you get different versions of functions that they access a config thingy. 
//       somehow unify that system so people can add thier own easily. 
fn is_linking_libc() bool #fold =  
    !get_build_options()[].use_raw_syscalls;

// TODO: a use_threads=false compiler cannot build a use_threads=true compiler. -- Mar 14, 2025
//       "panic! unlocked a mutex that was already unlocked"
use_threads :: true;

SLOW_MEMORY_DEBUGGING :: false;
SLOW_MEMORY_JUNK :: 0xAB;
NEVER_USE_LIBC_ALLOC :: false;
ALWAYS_BE_SIGNALLING :: false;
SLOW_DEBUG_ALLOC :: false;

// TODO: these are still somewhat order dependent because of `:: expr;`.
//       should go through and make sure everything weird is pulled up into bootstrap_compiler_environment. 
#include_std("compiler");
#include_std("lib/driver_api.fr");
#include_std("lib/sugar.fr");
#include_std("lib/math.fr");
#include_std("lib/collections/slice.fr");
#include_std("lib/alloc/arena.fr");
#include_std("lib/context.fr");
#include_std("lib/sys/libc.fr");
#include_std("lib/memory.fr");
#include_std("lib/pointers.fr");
#include_std("lib/casts.fr");
#include_std("lib/alloc/alloc.fr");
#include_std("lib/collections/list.fr");
#include_std("lib/option.fr");
#include_std("lib/ast.fr");
#include_std("lib/macros.fr");
#include_std("lib/fmt.fr");
#include_std("lib/sys/panic.fr");
#include_std("lib/build.fr");
#include_std("lib/meta.fr");
#include_std("lib/hash.fr");

// :UpdateBoot this seems fixed now? 
:: @if(IS_BOOTSTRAPPING) {  // coconut.jpg ðŸ¤¡
    //x: Expr.Tag() = .Block;
    //y := x.ordinal();
    // the above works on arm but not macos-x64 (it hangs forever)
    assert_eq(1, 1);
};

Sha256 :: import("@/lib/mix/sha256.fr");
Random :: import("@/lib/mix/random.fr");
