Type  :: @builtin Type;  // but what kind...?
unit  :: ();  // The officially blessed empty tuple.
void  :: @builtin("void");  // The set of all empty tuples.
bool  :: @builtin bool;
true  :: @builtin true;
false :: @builtin false;
i64   :: @builtin i64;
f64   :: @builtin f64;
Never :: @builtin Never;  // It is illegal to create a value of this type. 
usize :: i64; // todo
isize :: i64; // todo
rawptr :: @builtin rawptr;
OverloadSet :: @builtin OverloadSet;
f32 :: @builtin f32;

:: bootstrap_compiler_environment_pre();
:: bootstrap_compiler_environment_post();

// :blessed:
// Code behind the @late macro is only enabled after this function runs. 
// Non-builtin_prefix_macro macros cannot be expanded before this function runs, 
// because the compiler doesn't have the type 'FatExpr', so it can't resolve the overload.
fn bootstrap_compiler_environment_pre() void = {
    env := get_comptime_environment();
    s: Fn(Type, Type) : Slice;
    env.make_slice_t = (Some = s);
    env.bake_os = (Some = bake_relocatable_value);  // This is only needed for aot so it's not super important that it be here... but it does have to be somewhere. 
    env.fat_expr_type = (Some = FatExpr);
    env.intrinsic_type = (Some = Intrinsic);
    q: Fn(Slice(FatExpr), FatExpr) : unquote_macro_apply_placeholders;
    env.unquote_placeholders = (Some = q);
    env.c_str_type = CStr;
    
    // you have to do tagged TypeInfo before you enable @late code. 
    // but now since these are all compiled in one block, it instantiates the const arg functions first regardless of lexical order, so its fine. 
    tagged(TypeInfo); 
    tagged(Expr);
    tagged(Stmt);
    tagged(LazyType);
    tagged(Name);
}

fn bootstrap_compiler_environment_post() void = {
    // :link_rename
    env := get_comptime_environment(); // TODO: this can just be a thing on the comptime context but it starts to get a bit circular...
    env.link_rename_arg = (Some = LinkRenameArg);
    env.push_x86_func = (Some = @Fn(bytes: *List(u8)) void);
    env.compile_error_pointer = (Some = *CompileError);
    env.os_type = (Some = Os);
    env.dynamic_context_type = @struct(default: DefaultContext); // TODO: get more fancy with letting the driver program add things. 
    env.runtime_init = (Some = franca_runtime_init);
}

// TODO: this is a pain but doing it for every program makes mandlebrot like 10-30% slower -- Sep 21
fn enable_inline_bc() void = {
    env := get_comptime_environment();
    env.inline_bc_fn_type = (Some = @Fn(body: *FnBody) void);
}

fn get_build_options() *BuildOptions = {
    env := get_comptime_environment();
    BuildOptions.ptr_from_raw(env.build_options)
}

// TODO: these are still somewhat order dependent because of `:: expr;`.
//       should go through and make sure everything weird is pulled up into bootstrap_compiler_environment. 
#include_std("compiler");
#include_std("lib/driver_api.fr");
#include_std("lib/sugar.fr");
#include_std("lib/math.fr");
#include_std("lib/collections/slice.fr");
#include_std("lib/arena.fr");
#include_std("lib/context.fr");
#include_std("lib/sys/libc.fr");
#include_std("lib/memory.fr");
#include_std("lib/pointers.fr");
#include_std("lib/casts.fr");
#include_std("lib/alloc.fr");
#include_std("lib/collections/list.fr");
#include_std("lib/collections/map.fr");
#include_std("lib/option.fr");
#include_std("lib/sys/process.fr");
#include_std("lib/ast.fr");
#include_std("lib/macros.fr");
#include_std("lib/fmt.fr");
#include_std("lib/sys/panic.fr");
#include_std("lib/collections/bucket_array.fr");
#include_std("lib/collections/bit_set.fr");
#include_std("lib/arch/aarch64/instructions.fr");
#include_std("lib/arch/wasm/instructions.fr");
#include_std("lib/arch/bf/instructions.fr");
#include_std("lib/arch/aarch64/jump.fr");
#include_std("lib/loop.fr");
#include_std("lib/build.fr");
#include_std("lib/sys/fs.fr");
#include_std("lib/sys/terminal.fr");
#include_std("lib/meta.fr");
#include_std("lib/hash.fr");
#include_std("lib/intrinsics.fr");
#include_std("lib/sort.fr"); 
#include_std("lib/arch/x86_64/instructions.fr");
#include_std("lib/json.fr");
#include_std("lib/sys/macos.fr");
#include_std("lib/sys/linux.fr");
#include_std("lib/build/foreign_compiler.fr");
#include_std("lib/tokenize.fr");
#include_std("lib/threads.fr");
#include_std("lib/collections/deque.fr");
