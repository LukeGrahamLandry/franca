Type  :: Type!builtin;  // but what kind...?
unit  :: ();  // The officially blessed empty tuple.
Unit  :: @type(unit);  // The set of all empty tuples.
bool  :: bool!builtin;
true  :: true!builtin;
false :: false!builtin;
i64   :: i64!builtin;
f64   :: f64!builtin;
Never :: Never!builtin;  // It is illegal to create a value of this type. 
usize :: i64; // todo
isize :: i64; // todo
rawptr :: rawptr!builtin;
OverloadSet :: OverloadSet!builtin;
f32 :: f32!builtin;

// An interned string blessed by the compiler.
// This is the type of identifiers in source files.
// There's nothing special about it unless you're interacting with the asts in macros.

// TODO: this is the forward declaration for struct initilizers to bind to. hate it. 
fn init(_: Unit) Unit;

// TODO: these are still somewhat order dependent because of `:: expr;`.
#include_std("compiler");
#include_std("libc");
#include_std("math.fr");
#include_std("collections/slice.fr");
#include_std("arena.fr");
#include_std("sys/libc.fr");
#include_std("codegen/llvm/basic.fr");
#include_std("pointers.fr");
#include_std("casts.fr");
#include_std("alloc.fr");
#include_std("collections/list.fr");
#include_std("collections/map.fr");
#include_std("option.fr");
#include_std("sys/process.fr");
#include_std("ast.fr");
#include_std("macros.fr");
#include_std("fmt.fr");
#include_std("sys/panic.fr");
#include_std("collections/bucket_array.fr");
#include_std("collections/bit_set.fr");
#include_std("codegen/aarch64/instructions.fr");
#include_std("codegen/aarch64/basic.fr");
#include_std("codegen/wasm/instructions.fr");
#include_std("codegen/bf/instructions.fr");
#include_std("codegen_cranelift_basic");
#include_std("codegen/aarch64/unwind.fr");
#include_std("codegen/aarch64/jump.fr");
#include_std("codegen/c/basic.fr");
#include_std("loop.fr");
#include_std("build.fr");
#include_std("sys/fs.fr");
