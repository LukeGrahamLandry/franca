
fn cli_args() Slice(Str);

const CmdResult: Type;
fn system(cmd: Slice(Str)) CmdResult;

fn system_no_args(cmd: Str) CmdResult = { 
    let parts: Slice(Str) = slice(cmd!addr);
    var parts: List(Str) = list_clone(parts);   // TODO: Vec<String>::deserialize can't deal with stack addrs. 
    let parts: Slice(Str) = items(parts!addr);
    system(parts)
}


@comptime fn Result(ok: Type, err: Type) Type = {
    const Self = (Ok: ok, Err: err)!enum;
    @pub fn unwrap(r: Self) ok = r.ok[];

    Self
}
@enum fn FileErr(NotExists: Unit, Other: Unit);

@env fn write(path: Str, content: Str) Result(Unit, FileErr);
@env fn read(path: Str) Result(Slice(u8), FileErr);
