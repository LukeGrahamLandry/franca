
@pub fn cli_args() Slice(Str);

@pub const CmdResult: Type;
@pub fn system(cmd: Slice(Str)) CmdResult;

@pub fn system_no_args(cmd: Str) CmdResult = { 
    let parts: Slice(Str) = slice(cmd!addr);
    var parts: List(Str) = list_clone(parts);   // TODO: Vec<String>::deserialize can't deal with stack addrs. 
    let parts: Slice(Str) = items(parts!addr);
    system(parts)
}

// TODO: stack trace
@llvm @pub fn panic(msg: ""!type) Never = {
    println(msg);
    exit(1)
}

// TODO: stack trace
@no_interp @aarch64 @pub
fn panic(msg: ""!type) Never = {
    println(msg);
    exit(314)
}


@no_interp @pub fn println(msg: ""!type) Unit = {
    const STD_OUT: Fd = 1;
    let ptr: Ptr(u8) = msg&[0][];
    let len: usize = msg&[1][];
    // TODO: this will try to write a bunch of zeros because i dont have bytes as a data type yet. 
    let written: isize = write(STD_OUT, ptr, len.mul(8));
    // TODO: check errno. loop if not all written. 
    
    // TODO: extra syscall is sad
    var ln = 10;
    let ptr: Ptr(u8) = ln&;
    let written: isize = write(STD_OUT, ptr, 1); 
    
}
