// TODO: 
//     - fix @print
//     - be able to declare fn display for anything with a write method. really I want my old @impl syntax. 
//     - derive fn display for structs based on fields. 
//     - \n etc. 

fn todo() Never = panic("Not Yet Implemented");

@struct fn Write(data: VoidPtr, write: FnPtr(Ty(VoidPtr, Slice(u8)), Unit));

@pub fn write(self: Write, bytes: Slice(u8)) Unit = 
    (self&.write[])(self&.data[], bytes);

@pub fn write(fd: *Fd, bytes: Slice(u8)) Unit = {
    let len = bytes.len().mul(8);
    let written: isize = write(fd[], bytes&.ptr[], len);
    assert(written.eq(len), "Failed Write");
}

const KnownFd = @enum(Fd) (
    StdOut = 1,
);

fn as(self: *List(u8)) Write = {
    const w: Fn(Ty(*List(u8), Slice(u8)), Unit) = push_all;
    init(data: self, write: w!fn_ptr)
}

fn as(self: *Fd) Write = {
    const w: Fn(Ty(*Fd, Slice(u8)), Unit) = write;
    init(data: self, write: w!fn_ptr)
}

fn as(self: *KnownFd.T[]) Write = {
    const w: Fn(Ty(*Fd, Slice(u8)), Unit) = write;
    init(data: self, write: w!fn_ptr)
}

// const stdout: Write = KnownFd.StdOut.as();

// TODO: HACK! i broke comptime caching so calling this multiple times adds the same functions to overload set repeatedly?? 
//       symptom: ambigous overload when trying to do write_fn = push_all
@pub const List_i64 = List(i64);

@pub fn write(self: *List_i64, bytes: Str) Unit = self.push_all(bytes);
@pub fn display(self: Str, writer: *List_i64) Unit = writer.write(self);

/// (@fmt(Writer, fmt_spec_str, ...Args))
/// Currently display is only implemented with 'Writer' being *List_i64 (TODO: need better generics). 
/// 'Args' can be any types that have fn display(Self, Writer) Unit;
/// 'fmt_spec_str' must be a const string value. '%' characters will be replaced (like printf, you just don't need the type hint). 
@annotation @pub
fn fmt(arg: AstExpr, target: AstExpr) AstExpr = {
    let args: Slice(AstExpr) = arg&.expr.Tuple[];
    let writer: *AstExpr = args.index(0);  // TODO: assert no side effects or use variable so it doesn't run many times. 
    var writer = compile_ast(writer[]);
    
    let fmt_string: *AstExpr = args.index(1);
    let params = args.rest(2);  // TODO: fix bounds check when this is one long?
    
    let fmt_string = const_eval_string(fmt_string[]);
    var parts: List(Str) = fmt_string.split("%".str());  // TODO: dont leak
    var parts: Slice(Str) = parts&.items();
    parts.len().eq(params.len().add(1)).assert("Fmt specifier count mismatch");
    
    let count = parts.len().add(params.len());
    var actions: List(AstExpr) = list(count);  // TODO: with_capacity_exact or shrink_to_fit at the end or have AstExpr.Tuple expose that its a Vec not a Slice 
    
    var display_fn = @literal(OverloadSet) display;
    
    fn emit(msg: AstExpr) Unit = {
        let action: FatExpr = (display_fn!unquote(msg!unquote, writer!unquote))!quote;
        actions&.push(action);
    }
    
    let s: *Str = parts.index(0);
    emit(@literal(Str) s[]);
    
    // TODO: zip iterators 
    params.enumerate(fn(i: i64, param: *AstExpr) Unit = {
        emit(param[]);
        let s: *Str = parts.index(i.add(1));
        emit(compile_ast(@literal(Str) s[]));
    });
    
    var actions: Slice(AstExpr) = actions&.items();
    arg&.expr.Tuple[] = actions;
    arg
}

// TODO: I want to call this @concat. fix overload resolution when colliding with macros. 
@annotation @pub
fn join(arg: AstExpr, target: AstExpr) AstExpr = {
    let args: Slice(AstExpr) = arg&.expr.Tuple[];
    var actions: List(AstExpr) = list(args.len());
    
    // TODO: this is really trash. need a better way to express this. the problem is that you don't re-run closure captures after expanding the macro. 
    let list_fn = @literal(OverloadSet) List;
    let init_fn = @literal(OverloadSet) list;
    let push_fn = @literal(OverloadSet) push_all;
    let str_t = @literal(Type) Str;
    let items_fn = @literal(OverloadSet) items;
    let i64_t = @literal(Type) i64;
    
    // TODO: zip iterators 
    args.enumerate(fn(i: i64, param: *AstExpr) Unit = {
        let action: FatExpr = (@as(()) (push_fn!unquote(join_list&, @as(str_t!unquote) param[]!unquote)))!quote;
        actions&.push(action);
    });
    
    var actions: Slice(AstExpr) = actions&.items();
    arg&.expr.Tuple[] = actions;
    
    (@with_var(join_list, @as(list_fn!unquote(i64_t!unquote)) init_fn!unquote()) { arg!unquote; items_fn!unquote(join_list&)})!quote
}

/*
@annotation @pub
fn print(arg: AstExpr, target: AstExpr) AstExpr = {
    {  // TODO: do I call resolve on this already? 
        puts("Did Print");
        var output: List_i64 = list();
        // TODO: without brackets it parses as anotation on stmt and doesnt call the macro
        // TODO: need to flatten the tuple so we supply the writer and caller supplies the fmt_string. 
        (@fmt(output&, arg!unquote));
        var words = output&.items();
        puts(words);
        output&.drop();
    }!quote
}
*/

// TODO: HACK. Compiler doesn't know about Slice(_) so string literals are the wrong type. 
@pub fn display(self: ""!type, writer: *List_i64) Unit = {
    let ptr: Ptr(Ptr(i64)) = self&[0];
    let len: Ptr(i64) = self&[1];
    let s: Str = (ptr: ptr[], len: len[]);  // TODO: why can't I call assume(_, _)
    display(s, writer);
}

@pub fn display(self: i64, writer: *List_i64) Unit = {
    // TODO: use fn display to implement fn str instead of fn str allocating. rn this leaks. 
    let s = self.str();
    display(s, writer);
}

// TODO: this whole model of resolving the overload up front doesn't work because you need to call different functions 
//       at compiletime or runtime depending on the target arch. So need to delay as long as possible by passing in the overload set. 
//       Alternatively, I could go through with the Expr::Either but that feels like special casing just for the ct/rt. 

// What's the easiest way to spell generic impls? 
// const Write: Type = @trait(fn(T: Type) bool = function_exists(write!symbol, Ty(T, Str), Unit));
// @impl fn(const W: Write) Unit = {
//     @pub fn display(self: i64, writer: W) Unit = {
//         let s = self.str();
//         writer.write(s)
//      }
// }
// 
// @pub fn write(self: *List_i64, bytes: Str) Unit = self.push_all(bytes);
// List_i64.Ptr().implements(Write).assert();
// var output: List_i64;
// 123.display(output&);
// 
