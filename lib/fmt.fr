// TODO: 
//     - be able to declare fn display for anything with a write method. really I want my old @impl syntax. 
//     - derive fn display for structs based on fields. 

//!
//! The (e)print(ln) functions are unbuffered! 
//! You should @fmt into a List and then print that all at once if you want it to be fast.
//!

fn tfmt(arg: FatExpr) FatExpr #macro = 
    @{ items(@format(@[arg]) temp()) };

fn println(msg: Str) void = {
    print_impl(STD_OUT, msg, true);
}

fn print(msg: Str) void = {
    print_impl(STD_OUT, msg, false);
}

fn eprintln(msg: Str) void = {
    print_impl(STD_ERR, msg, true);
}

fn eprint(msg: Str) void = {
    print_impl(STD_ERR, msg, false);
}

// REMEMBER, you can't just open with flags .Write and then call this, it wont truncate the file!
fn write(fd: *Fd, bytes: Slice(u8)) bool = {
    print_impl(fd[], bytes, false)
}

fn print_impl(fd: Fd, msg: Str, $new_line: bool) bool = {
    written := Syscall'write(fd, msg.ptr, msg.len) || return(false);
    @if(new_line) {
        // TODO: extra syscall is sad
        new_line: u8 = 10.trunc();
        new_line := @as(Str) (ptr = new_line&, len=1);
        print_impl(fd, new_line, false);
    };
    // TODO: SysResult
    // TOOD: loop if not all written
    true
};

fn write(self: *List(u8), bytes: Str) void = self.push_all(bytes);
fn display(self: Str, writer: *List(u8)) void = writer.write(self);

/// @fmt(Writer, fmt_spec_str, ...Args)
/// Currently display is only implemented with 'Writer' being *List$u8 (TODO: need better generics). 
/// 'Args' can be any types that have fn display(Self, Writer) void;
/// 'fmt_spec_str' must be a const string value. '%' characters will be replaced (like printf, you just don't need the type hint).
// TODO: double '%%' to actually put a literal '%' 
#macro 
fn fmt(arg: FatExpr) FatExpr = {
    arg := compile_ast(arg);
    assert(arg.expr&.is(.Tuple), "fmt expected tuple");
    args := arg.expr.Tuple.items();
    // TODO: assert no side effects or use variable so it doesn't run many times. 
    
    writer := compile_ast(args[0]);
    format_into(writer, args.rest(1), arg.loc)
}

// compiler bug: if you get a `Assertion Failed: Not typechecked:` here, try @enum(i64)(...) instead of @enum(...) somewhere random. 
//               hopefully new sema can fix this -- Aug 15
fn format_into(writer: FatExpr, args: Slice(FatExpr), loc: Span) FatExpr = {
    fmt_string := const_eval(Str)(args[0]);
    if args.len == 1 {
        percent := "%".ascii();
        if fmt_string.contains(percent&)  {
            compile_error("Found place holders in fmt string but no args.", loc);
        };
        
        s := fmt_string.hack_percent_escapes();
        return(@{
            display(@[@literal s], @[writer]);
        });
    };
    
    params := args.rest(1);
    parts := fmt_string.split("%", temp());
    parts := parts&.items();
    if(parts.len != params.len + 1, => compile_error("Fmt specifier count mismatch", loc));
    
    count := parts.len().add(params.len());
    actions: List(FatExpr) = list(count, ast_alloc());  // TODO: with_capacity_exact or shrink_to_fit at the end or have FatExpr.Tuple expose that its a Vec not a Slice 
    
    // TODO: reserve space for known length args. 
    emit :: fn(msg1: FatExpr) void => {
        msg := compile_ast(msg1);
        // TODO: don't hardcode the writer type but then need to fix other places that call format_into
        fid := resolve_overload(display, Ty(msg.ty, *List(u8)), void, msg.loc);
        action: FatExpr = @{ @[@literal fid](@[msg], @[writer]) };
        actions&.push(action);
    };
    
    if parts[0].len > 0 {
        s := parts[0].hack_percent_escapes();
        emit(@literal s);
    };
    
    hack_percent_escapes :: fn(s: Str) Str = {
        copied := false;
        range(0, s.len) { i |
            if s[i] == this_is_dumb_but_im_actually_going_to_lose_my_mind.trunc() {
                if !copied {
                    copied = true;
                    s = s.shallow_copy(temp());
                };
                s[i] = "%".ascii();
            }
        };
        s.sym().str()  // deduplicate in the compiler's string pool
    };
    
    // TODO: zip iterators
    enumerate params { i, param |
        emit(param[]);
        
        s := parts[i + 1].hack_percent_escapes();
        if s.len > 0 {
            emit(compile_ast(@literal s));
        }
    };
    // need to compile so @println can use a macro that expands to a tuple but dont want to remember the type since it will change when our macro gets expanded. -- Apr 25
    e: FatExpr = (expr = (Tuple = actions.as_raw()), loc = loc, ty = UnknownType, done = false);
    @{ @[e]; } // make it have type unit
}

#macro 
fn prepend_tuple(arg: FatExpr, target: FatExpr) FatExpr = {
    target := compile_ast(target);
    // TODO: now that i dont double track types, this will break everything if you do it to an int literal. -- May 1
    if target.expr&.is(.Tuple) {
        original := target.expr.Tuple.items();
        tuple := FatExpr.list(original.len + 1, ast_alloc()); 
        tuple&.push(arg);
        tuple&.push_all(original);
        target.expr.Tuple = tuple.as_raw();
    } else {
        if target.ty == void {
            compile_error("prepend_tuple on void doesn't make sense", target.loc);  
        };
        e := @{ (@[arg], @[target]) };
        assert(e.expr&.is(.Block), "quote repr");
        target.expr = e.expr.Block.result.expr;
        assert(target.expr&.is(.Tuple), "quote repr");
    };
    target.ty = UnknownType;
    target.done = false;
    target
}

#macro 
fn println(arg: FatExpr) FatExpr = @{
    out: List(u8) = list(0, temp());
    @fmt(@prepend_tuple(out&) @[arg]);
    out&.push_all(::"\n");  // TODO: shouldn't need the :: here
    print(out&.items());
};

#macro 
fn eprintln(arg: FatExpr) FatExpr = @{
    out: List(u8) = list(0, temp());
    @fmt(@prepend_tuple(out&) @[arg]);
    out&.push_all(::"\n");  // TODO: shouldn't need the :: here
    eprint(out&.items());
};

#macro 
fn print(arg: FatExpr) FatExpr = @{
    out: List(u8) = list(0, temp());
    @fmt(@prepend_tuple(out&) @[arg]);
    print(out&.items());
};

#macro 
fn eprint(arg: FatExpr) FatExpr = @{
    out: List(u8) = list(0, temp());
    @fmt(@prepend_tuple(out&) @[arg]);
    eprint(out&.items());
};

#macro 
fn format(arg: FatExpr, alloc: FatExpr) FatExpr = @{
    out: List(u8) = list(0, @[alloc]);
    @fmt(@prepend_tuple(out&) @[arg]);
    out
};

#macro 
fn panic(arg: FatExpr) FatExpr = {
    if !safety_check_enabled(.KeepPanicMessages) {
        arg = @{ "panicked" };
    };
    if arg&.items().len() == 1 {
        return(@{ panic(@[arg]) });
    };
    @{
        out: List(u8) = list(0, temp()); 
        @fmt(@prepend_tuple(out&) @[arg]);
        panic(out&.items())
    }
}

fn scary_log(i: rawptr) void = i.int_from_rawptr().scary_log();

fn scary_log(i: i64) void = {
    buf := @uninitialized Array(u8, 40);
    if i != 0 && i == -i { // ugly twos compliment :hack
        scary_log("-9223372036854775808");
        return();
    };
    operator_index :: index_unchecked;
    len := 0;
    inner :: fn(i: i64, buf: []u8, len: *i64) void = {
        if i < 0 {
            buf[len[]] = "-".ascii();
            len[] += 1;
            inner(-i, buf, len);
        } else {
            is_digit := i >= 0 && i < 10;
            if is_digit {
                buf[len[]] = i.trunc() + 48;
                len[] += 1;
            } else {
                inner(i / 10, buf, len);
                buf[len[]] = i.mod(10).trunc() + 48;
                len[] += 1;
            };
        };
    };
    inner(i, buf&.items(), len&);
    scary_log(@as(Str) (ptr = buf&.as_ptr(), len = len));
}


fn display(i: i64, s: *List(u8)) void = {
    if i != 0 && i == -i { // ugly twos compliment :hack
        s.push_all("-9223372036854775808");
        return();
    };
    if i < 0 {
        push(s, "-".ascii());
        display(-i, s);
    } else {
        is_digit := i >= 0 && i < 10;
        if is_digit {
            s.push(i.trunc() + 48);
        } else {
            display(i / 10, s);
            s.push(i.mod(10).trunc() + 48);
        };
    };
}

fn display(self: bool, writer: *List(u8)) void = display(self.str(), writer);
fn display(self: *bool, writer: *List(u8)) void = display(self[].str(), writer);

fn display(self: Type, writer: *List(u8)) void = {
    to_index :: fn(t: Type) u32 #unsafe_noop_cast;
    self.to_index().display(writer);
}

// Note: at comptime with compiler symbols you could use .c_str but the compiler itself cant which makes it annoying 
fn display(self: Symbol, writer: *List(u8)) void = {
    // TODO: !!!! don't use c str! but need to have less sketchy tuple abi. 
    display(self.id(), writer);
}

// You probably don't want to be calling this often, it has to iterate the string to get the length. 
fn display(self: CStr, writer: *List(u8)) void = {
    if self.ptr.is_null() {
        return();
    };
    for self {c|
        writer.push(c);
    };
}
fn display(self: *CStr, writer: *List(u8)) void = self[].display(writer);

fn display(self: void, writer: *List(u8)) void = display("()", writer);

fn display(self: f64, writer: *List(u8)) void = {
    // TODO: if you try to inline this into the macro call, it crashes trying to compile in fn fmt. 
    //       bus error. works on cranelift tho which is fun. 
    //       works if you call self.int here and then also inline it so its a problem with adding it as a callee?
    //       -- May 26
    if self.is_nan() {
        return(display("NaN", writer));
    };
    value := self.int();
    @fmt(writer, "%", value); // TODO: higher precision rendering
}

fn println(self: CStr) void = @println("%", self);

::if(Str);
fn str(self: bool) Str = if(self, fn()Str = "true", fn()Str = "false");

// TODO: this whole model of resolving the overload up front doesn't work because you need to call different functions 
//       at compiletime or runtime depending on the target arch. So need to delay as long as possible by passing in the overload set. 
//       Alternatively, I could go through with the Expr::Either but that feels like special casing just for the ct/rt. 


//////
/// CStr

/// Not bounds checked
fn index(self: CStr, i: i64) *u8 = offset_bytes(self.ptr, i);
fn get(self: CStr, i: i64) u8 = self.index(i)[];
fn set(self: CStr, i: i64, v: u8) void = self.index(i).store(v);

fn for(self: CStr, $f: @Fn(c: u8) void) void = {
    ::ptr_utils(u8);
    
    dowhile {
        c := self[0];
        c != 0 && {
            f(c);  
            self = (ptr = self.ptr.offset_bytes(1));
            true
        }
    }
}

/// The returned string is backed by the same memory as the original.
fn str(self: CStr) Str #inline = 
    @if(self.ptr.is_null(), empty(), (ptr = self.ptr, len = self.slow_len()));

/// Slowly iterates the string to find the null terminator. 
fn slow_len(self: CStr) i64 = {
    len := 0;
    for self { _ | 
        len += 1;
    };
    len
}

fn eq(s2:  Str, s1: CStr) bool = s1 == s2;
fn eq(s1: CStr, s2:  Str) bool = {
    range(0, s2.len) { i |
        if(s1[i] == 0 || s1[i] != s2[i], => return(false));
    };
    s1[s2.len] == 0
}

// TODO: this should probably check for internal zeros?
fn as_cstr(s: Str) CStr = {
    s2 := temp().alloc(u8, s.len + 1);
    s2.slice(0, s.len).copy_from(s);
    s2[s.len] = 0;
    (ptr = s2.ptr)
}

fn println(msg: bool) void = {
    msg := if(msg, => "true", => "false");
    println(msg);
}

fn println(i: i64) void = {
    buf := @uninitialized Array(u8, 40);
    mem: List(u8) = fixed_list(buf&.items());
    i.display(mem&);
    mem&.push_all("\n");
    print(mem&.items());
}

fn println(msg: u8) void = println(@as(i64) msg.zext());

fn print(i: i64) void = {
    buf := @uninitialized Array(u8, 32);
    mem: List(u8) = fixed_list(buf&.items());
    i.display(mem&);
    print(mem&.items());
}

// for porting c code that uses 0 prefixed numbers because they hate you
fn octal(s: Str) i64 #fold = {
    value := 0;
    for s { c |
        c := c - "0".ascii();
        @assert(c >= 0 && c <= 8);
        value *= 8;
        value += c.zext();
    };
    value
}

// TODO: you could do the bits trick but who cares man
fn hex_digit(cc: u8) ?i64 = {
    c: i64 = cc.zext();
    @if(c >= "a".char() && c <= "f".char()) return(Some = c - "a".char() + 10);
    @if(c >= "A".char() && c <= "F".char()) return(Some = c - "A".char() + 10);
    @if(c >= "0".char() && c <= "9".char()) return(Some = c - "0".char());
    .None
}

// returns the number and the rest of the string after the first invalid digit (or "" if it was all valid)
fn convert_number(s: Str, base: i64, $digit: @Fn(c: u8) ?i64) Ty(i64, Str) = {
    total := 0;
    while => s.len > 0 {
        d := digit(s[0]) || return(total, s);
        total *= base;
        total += d;
        s = s.rest(1);
    };
    (total, s)
}

fn hex(s: Str) ?i64 = {
    i, rest := convert_number(s, 16, hex_digit);
    if(rest.len != 0, => return(.None));
    (Some = i)
}

// TODO: this should return an error. 
fn parse_int(s: Str) i64 = {
    i, rest := convert_number(s, 10, dec_digit);
    @assert_eq(rest.len, 0, "invalid input to parse_int()");
    i
}

fn push_prefixed_hex_byte(hex: *List(u8), byte: u8) void = {
    hex.push_all("0x");
    push_hex_byte(hex, byte, true);
}

fn push_hex_byte(hex: *List(u8), byte: u8, $upper: bool) void = {
    // TODO: clean this up. it's an old copy paste from fmt_hex for llvm ir hex floats.
    range(14, 16) {i|
        shift := 15.sub(i).mul(4);
        mask := 15.shift_left(shift);
        aaaaa: i64 = byte.zext().bit_and(mask);
        digit := aaaaa.shift_right_logical(shift);
        ::if(u8);
        d := if(digit < 10, => "0".ascii() + digit.trunc(), => @if(upper, "A", "a").ascii() + digit.sub(10).trunc()); 
        hex.push(d);
    };
}

fn show_hex_bytes(code: []u8) void = {
    hex := u8.list(code.len * 5, temp());
    for code { b |
        hex&.push_prefixed_hex_byte(b);
        hex&.push_all(" ");
    };
    println(hex.items());
}

// TODO: this should return an option instead of asserting. 
fn dec_digit(cc: u8) ?i64 = {
    c: i64 = cc.zext();
    if(c < "0".char() || c > "9".char(), => return(.None));
    (Some = c - "0".char())
}
    
// TODO: this should return an error. 
fn float(s: Str) f64 = {
    value := 0.0;
    scale := 0.1;
    seen_decimal := false;
    dec_digit2 :: fn(c) => dec_digit(c).unwrap();
    for(s){c|
        if seen_decimal {
            value += dec_digit2(c).float().mul(scale);
            scale = scale.div(10.0);  // TODO: /= doesn't work??
        } else {
            if(c == ".".ascii(), => { seen_decimal = true; }) {
                value *= 10.0;
                value += dec_digit2(c).float();
            }
        };
    };
    
    value
}

fn is_ascii_digit(c: u8) bool #inline = c >= "0".ascii() && c <= "9".ascii();
fn is_ascii_alpha(c: u8) bool #inline = 
    (c >= "a".ascii() && c <= "z".ascii()) ||
    (c >= "A".ascii() && c <= "Z".ascii());

#redirect(i64, void) fn println(a: u64) void; // TODO: WRONG. sign
fn println(a: u32) void = println(@as(i64) a.zext()); 
#redirect(Ty(i64, *List(u8)), void) fn display(a: u64, out: *List(u8)) void; // TODO: WRONG. sign
fn display(a: u32, out: *List(u8)) void = display(@as(i64) a.zext(), out); 
fn display(a: i32, out: *List(u8)) void = display(@as(i64) a.intcast(), out);  
fn display(a: u16, out: *List(u8)) void  = display(@as(i64) a.zext(), out);
fn display(self: u8, out: *List(u8)) void = display(@as(i64) self.zext(), out);

// includes the '0x'... kinda cringe? 
fn fmt_hex(value: i64) Str = {
    out := "0x".clone(temp());
    range(0, 16) {i|
        shift := 15.sub(i).mul(4);
        mask := 15.shift_left(shift);
        digit := value.bit_and(mask).shift_right_logical(shift); 
        ::if(u8);
        d: u8 = digit.trunc();
        d := if(digit < 10, => "0".ascii() + d, => "A".ascii() + d - 10); 
        out&.push(d);
    };
    out.items()
}

fn display(self: rawptr, out: *List(u8)) void = 
    self.int_from_rawptr().display(out);

/// SAFETY: must not be cyclic!
fn DeriveFmt($T: Type) void = {
    fn display(self: *T, out: *List(u8)) void = {
        @inline_match(@run T.get_type_info_ref()) {
            // TODO: have it put the $ there for you. currently even if you don't use the var it gets added as a runtime needed const and emitted. 
            //       which is extra bad because my bake thing can't handle everything in a type info yet! -- Jul 6
            fn Struct($f) => {
                ::assert(!f[].is_union, "TODO: format union");
                out.push_all("(");
                prefix := "";
                inline_for T.get_fields() { $f | 
                    inner := T.get_field_ptr(self, f);
                    // TODO: better error message if not defined. 
                    name :: f[].name.str();
                    @fmt(out, "%% = %", prefix, name, inner);
                    prefix = ", ";
                };
                out.push_all(")");
            }
            fn Tagged($t) => {
                out.push_all("(");
                self.tag().display(out);
                out.push_all(" = ");
                
                i := 0; // TODO : inline_enumerate
                tag_value := self.tag().raw();
                // TODO: @inline_switch.
                inline_for T.get_variants() { $f | 
                    non_void :: !(f[]._1 == void);
                    if i == tag_value {
                        @if(non_void, {
                            inner := T.get_variant_ptr_for(self, f);
                            inner.display(out);
                        }, "()".display(out));
                        out.push_all(")");
                        return();
                    };
                    i += 1;
                };
                // TODO: @safety unreachable_unchecked so you don't bloat the code. 
                panic("Tried to print @tagged with invalid tag value. Uninitilized memory?");
            }
            fn Ptr(it) => display(it[], out);
            @default => panic("Unsupported type for DeriveFmt");
        }
    }
}

fn display(i: *i64, out: *List(u8)) void = i[].display(out);
fn display(i: *u32, out: *List(u8)) void = i[].display(out);
fn display(i: *Str, out: *List(u8)) void = i[].display(out);
fn display(i: *u16, out: *List(u8)) void = 
    display(@as(i64) i[].zext(), out);

fn is_ascii_whitespace(c: u8) bool = c == " ".ascii() || c == "\n".ascii() || c == "\t".ascii() || c == "\r".ascii();

fn trim(s: Str) Str = {
    while => s.len > 0 && s[s.len - 1] <= 32 {
        s.len -= 1;
    };
    while => s.len > 0 && s[0] <= 32 {
        s.ptr = s.ptr.offset(1);
        s.len -= 1;
    };
    
    s
}

fn fmt_write(arg: FatExpr) FatExpr #macro = {
    assert(arg.expr&.is(.Tuple), "fmt expected tuple");
    args := arg.expr.Tuple.items();
    @{
        out: List(u8) = list(0, temp());
        @[format_into(@{ out& }, args.rest(1), arg.loc)];
        @[args[0]].write(out.items())
    }
}

PaddingSide :: @enum(Before, After); 
fn f_pad();
fn FmtPad($T: Type) void = {
    FmtPad :: @struct(value: T, w: i64, side: PaddingSide);
    fn f_pad(value: T, w: i64, side: PaddingSide) FmtPad = (value = value, w = w, side = side);
    fn display(self: *FmtPad, out: *List(u8)) void = display(self[], out);
    fn display(self: FmtPad, out: *List(u8)) void = {
        ::enum(PaddingSide);
        buf: List(u8) = list(temp());
        self.value.display(buf&);
        if(self.side == .After, => out.push_all(buf.items())); // :SLOW
        range(0, max(0, self.w - buf.len)) { _ |
            out.push(" ".ascii());
        };
        if(self.side == .Before, => out.push_all(buf.items()));
    }
}

FmtRep :: @struct(s: Str, count: i64);
fn f_rep(s: Str, count: i64) FmtRep = 
    (s = s, count = count);

fn display(self: *FmtRep, out: *List(u8)) void = display(self[], out);
fn display(self: FmtRep, out: *List(u8)) void = 
    push_rep(out, self.s, self.count);

fn push_rep(out: *List(u8), s: Str, count: i64) void = 
    range(0, count) { _ |
        out.push_all(s);
    };

// always temp() because i tend to just want to pass it to libc.
fn fmt_cstr(fmt_args: FatExpr) FatExpr #macro = @{
    msg := @format(@[fmt_args]) temp();
    msg&.push(0);
    @as(CStr) (ptr = msg.maybe_uninit.ptr)
}

fn display(v: f32, out: *List(u8)) void = {
    v: f64 = v.cast();
    display(v, out);
}

// makes multiline strings in local scopes less unpleasent. 
fn undent(s: Str, chars: i64, a: Alloc) Str = {
    out := a.alloc(u8, s.len);
    i := 0;
    j := 0;
    while => i < s.len {
        continue :: local_return;
        out[j] = s[i];
        i += 1; j += 1;
        
        if s[i-1] == "\n".ascii() {
            range(0, chars) { _ |
                if i >= s.len - 1 {
                    out.len = j-1; // no trailing new line
                    return(out);
                };
                if s[i] == "\n".ascii() {
                    continue();
                };
                i += 1;
            };
            continue();
        };
    };
    out.len = j;
    out
}

fn assert_c_str(bytes: *List(u8)) CStr = {
    @assert(bytes.len > 0 && bytes[bytes.len - 1] == 0, "expected a c string");
    (ptr = bytes.maybe_uninit.ptr)
}

// TODO: make Str a real type
fn println_bytes(s: []u8) void = {
    out := u8.list(s.len * 3, temp());
    out&.push_all("[");
    for s { b |
        @fmt(out&, "%, ", b);
    };
    if out.len > 1 {
        out.len -= 2;  // ", "
    };
    out&.push_all("]\n");
    print(out.items());
}

// 
// These are extra :SLOW so serious programs shouldn't used them, 
// but they're convenient for a few little tests. 
//

putchar_UNBUFFERED :: fn(c: u8) void = {
    s: []u8 = (ptr = c&, len = 1);
    print(s);
};

getchar_UNBUFFERED :: fn() i32 = {
    c: u8 = 0;
    len := Syscall'read(STD_IN, c&, 1).unwrap();
    @if(len == 0, c.zext(), -1)
};
