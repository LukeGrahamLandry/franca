// TODO: 
//     - fix @print
//     - be able to declare fn display for anything with a write method. really I want my old @impl syntax. 
//     - derive fn display for structs based on fields. 

fn todo() Never = panic("Not Yet Implemented");

fn write(fd: *Fd, bytes: Slice(u8)) Unit = {
    let len = bytes.len().mul(8); // TODO: packed strings
    let written: isize = write(fd[], bytes&.ptr[], len);
    assert(written.eq(len), "Failed Write");
}

fn write(self: *List(u8), bytes: Str) Unit = self.push_all(bytes);
fn display(self: Str, writer: *List(u8)) Unit = writer.write(self);

/// @fmt(Writer, fmt_spec_str, ...Args)
/// Currently display is only implemented with 'Writer' being *List$u8 (TODO: need better generics). 
/// 'Args' can be any types that have fn display(Self, Writer) Unit;
/// 'fmt_spec_str' must be a const string value. '%' characters will be replaced (like printf, you just don't need the type hint).
// TODO: double '%%' to actually put a literal '%' 
#macro 
fn fmt(arg: AstExpr) AstExpr = {
    var arg = compile_ast(arg);
    arg.ty = UnknownType;  // need to compile so @println can use a macro that expands to a tuple but dont want to remember the type since it will change when our macro gets expanded. -- Apr 25
    args := AstExpr.slice_from_tuple(arg.expr.Tuple);
    // TODO: assert no side effects or use variable so it doesn't run many times. 
  
    var writer = compile_ast(args[0]);

    let params = args.rest(2);  // TODO: fix bounds check when this is one long?
    
    let fmt_string = const_eval_string(args[1]);
    var parts: List(Str) = fmt_string.split("%", libc_allocator);  // TODO: dont leak
    var parts: Slice(Str) = parts&.items();
    parts.len().eq(params.len().add(1)).assert("Fmt specifier count mismatch");

    let count = parts.len().add(params.len());
    var actions: List(AstExpr) = list(count, libc_allocator);  // TODO: with_capacity_exact or shrink_to_fit at the end or have AstExpr.Tuple expose that its a Vec not a Slice 
    
    // TODO: reserve space for known length args. 
    const emit = fn(msg: AstExpr) Unit => {
        var action: FatExpr = 'display(@[msg], @[writer])';
        actions&.push(action);
    };
    emit(@literal(Str) parts[0]);
    
    // TODO: zip iterators
    params.enumerate(fn(i, param) => {
        emit(param[]);
        let s = parts[i.add(1)]&;
        emit(compile_ast(@literal(Str) s[]));
    });
    var actions: Slice(AstExpr) = actions&.items();
    arg.expr.Tuple = AstExpr.tuple_from_slice(actions);
    arg
}

#macro 
fn concat(var arg: AstExpr) AstExpr = {
    args := AstExpr.slice_from_tuple(arg.expr.Tuple);
    var actions: List(AstExpr) = list(args.len(), libc_allocator);
    
    '{
        // TODO: caller needs to pass allocator since this is at runtime. 
        var join_list: List(u8) = list(libc_allocator);
        @[{
            args.enumerate(fn(i, param) => {  // TODO: zip iterators 
                // TODO: having () in the cast instead of lit(Unit) stopped working when I changed some things to use the infallible imm_eval_known which is weird -- Apr 21 
                let action: FatExpr = '@as(Unit) push_all(join_list&, @as(Str) @[param[]])';
                actions&.push(action);
            });
            
            var actions: Slice(AstExpr) = actions&.items();
            arg.expr.Tuple = AstExpr.tuple_from_slice(actions);
            arg
        }];
        join_list&.items()  // TODO: this leaks the list. 
    }'
}

#macro 
fn prepend_tuple(arg: AstExpr, target: AstExpr) AstExpr = {
    var target = compile_ast(target);
    // TODO: now that i dont double track types, this will break everything if you do it to an int literal. -- May 1
    target.ty = UnknownType;
    original := AstExpr.slice_from_tuple(target.expr.Tuple);
    var tuple: List(AstExpr) = list(original.len.add(1), libc_allocator);
    tuple&.push(arg);
    tuple&.push_all(original);
    target.expr.Tuple = (tuple.maybe_uninit.ptr, tuple.len); // TODO
    target
}

#macro 
fn println(arg: AstExpr) AstExpr = '{
    // TODO: caller needs to pass allocator since this is at runtime. 
    //       but also thats really fucking annoying. 
    var out: List(u8) = list(0, libc_allocator);
    @fmt(@prepend_tuple(out&) @[arg]);
    println(out&.items());
    out&.drop();
}';

#macro 
fn format(arg: AstExpr) AstExpr = '{
    // TODO: caller needs to pass allocator since this is at runtime. 
    //       but also thats really fucking annoying. 
    var out: List(u8) = list(0, libc_allocator);
    @fmt(@prepend_tuple(out&) @[arg]);
    out
}';


// TODO: use fn display to implement fn str instead of fn str allocating. rn this leaks. 
fn display(i: i64, s: *List(u8)) Unit = {
    if(i.lt(0)) {|
        push(s, "-".ascii());
        i.neg().display(s);
    } {|
        is_digit := i.ge(0).and(i.lt(10));
        if(is_digit, 
            => s.push(add(48, i)),
            => {
                i.div(10).display(s);
                s.push(i.mod(10).add(48));
            }
        );
    };
}

fn display(self: bool, writer: *List(u8)) Unit = display(self.str(), writer);

fn display(self: Type, writer: *List(u8)) Unit = {
    display("TODO: display type", writer);
}

fn display(self: Symbol, writer: *List(u8)) Unit = {
    // TODO: !!!! don't use c str! but need to have less sketchy tuple abi. 
    display(self.c_str(), writer);
}

// You probably don't want to be calling this often, it has to iterate the string to get the length. 
fn display(self: CStr, writer: *List(u8)) Unit = {
    self.for {c|
        writer.push(c);
    };
}

fn display(self: Unit, writer: *List(u8)) Unit = display("()", writer);

fn display(self: f64, writer: *List(u8)) Unit = {
    // TODO: if you try to inline this into the macro call, it crashes trying to compile in fn fmt. 
    //       bus error. works on cranelift tho which is fun. 
    //       works if you call self.int here and then also inline it so its a problem with adding it as a callee?
    //       -- May 26
    value := self.int();
    @fmt(writer, "%", value); // TODO: higher precision rendering
}

fn println(self: CStr) Unit = @println("%", self);

::if(Str);
fn str(self: bool) Str = if(self, fn()Str = "true", fn()Str = "false");

// TODO: this whole model of resolving the overload up front doesn't work because you need to call different functions 
//       at compiletime or runtime depending on the target arch. So need to delay as long as possible by passing in the overload set. 
//       Alternatively, I could go through with the Expr::Either but that feels like special casing just for the ct/rt. 


//////
/// CStr

/// Not bounds checked
fn index(self: CStr, i: i64) *u8 = offset_bytes(@as(*u8) self, i);
fn get(self: CStr, i: i64) u8 = self.index(i).load();
fn set(self: CStr, i: i64, v: u8) Unit = self.index(i).store(v);

fn for(var self: CStr, const f: @Fn(c: u8) Unit) Unit = {
    ::ptr_utils(u8);
    
    dowhile {|
        c := self[0]; // this doesn't need .load() anymore because of :SmallTypes
        if(c.eq(@as(u8) 0.trunc()), => false){|
            f(c);  
            self = @as(*u8) (@as(*u8) self).offset_bytes(1);
            true
        }
    }
}

/// Slowly iterates the string to find the null terminator. 
/// The returned string is backed by the same memory as the original.
fn str(self: CStr) Str = {
    len := 0;
    self.for {_| 
        len += 1;
    };
    (ptr = @as(*u8) self, len = len)
}

/// Like rust, not c. hex escapes eat exactly two chars. no octal escapes except \0. 
// Note: you can't use the string escapes in the body of this function, or any it calls, because there's no bootstrapping step. 
fn __string_escapes(raw: Str) Str #fold = {
    backslash       : u8 : 92.trunc();
    doublequote     : u8 : 34.trunc();
    horizontal_tab  : u8 :  9.trunc();
    carriage_return : u8 : 13.trunc();
    new_line        : u8 : 0x0A;

    out : List(u8) = list(raw.len, libc_allocator);
    i := 0;
    while(=> i.lt(raw.len)){|
        c := raw[i]; i += 1;
        if(c.eq(backslash)){|
            c = raw[i]; i += 1;
            c = @switch(c) {
                @case("n".ascii()) => new_line;
                @case(doublequote) => doublequote;
                @case(backslash)   => backslash;
                @case("r".ascii()) => carriage_return;
                @case("t".ascii()) => horizontal_tab;
                @case("'".ascii()) => "'".ascii();  // rust has this one because of single quoted char literals. 
                @case("0".ascii()) => @as(u8) 0.trunc();
                @case("x".ascii()) => {
                    s := raw.subslice(i, 2); i += 2;
                    @as(u8) hex(s).trunc()
                };
                @default fn(_: u8) => panic("Unknown escape character"); // TODO: compile_error. better message. show line. 
            };
        };
        out&.push(c);
    };
    
    // TODO: should put in the string pool. 
    //       maybe this should be a macro that works on idents so compiler knows they're still just a string literal.
    //       but that kinda feels less elegant. 
    out.items() // LEAK
}

fn println(msg: bool) Unit = {
    let msg = (msg, =>"true", =>"false")!if;
    println(msg);
}

fn println(i: i64) Unit = {
    // TODO: static alloc since we know the bound on number of digits
    mem: List(u8) = list(i.div(10).abs().add(2), libc_allocator);
    i.display(mem&);
    mem&.push_all("\n");
    print(mem&.items());
    mem&.drop();
}
fn println(msg: u8) Unit = println(@as(i64) msg);

fn print(i: i64) Unit = {
    // TODO: static alloc since we know the bound on number of digits
    mem: List(u8) = list(i.div(10).abs().add(1), libc_allocator);
    i.display(mem&);
    print(mem&.items());
    mem&.drop();
}

// TODO: this should return an option. 
// TODO: use @switch once I have ranges. 
fn hex_digit(cc: u8) i64 = {
    c: i64 = cc.zext();
    if(ge(c, 97), 
        => { 
            assert(lt(c, 107), "hex OOB"); 
            add(sub(c, 97), 10) 
        }, 
        => if(ge(c, 65), 
            => { 
                assert(lt(c, 75), "hex OOB"); 
                add(sub(c, 65), 10) 
            }, 
            => { 
                assert(lt(c, 58), "hex OOB"); 
                sub(c, 48)
            }
        )
    )
}

// TODO: this should return an error. 
fn hex(s: Str) i64 = {
    var total = 0;
    var scale = 1;
    var i = s.len().sub(1);
    var first = 0;
    
    // This prevents overflow for tracking scale for lots of leading zeros. 
    // TODO: add a test that requires this. lol its an insane number tho so could just not bother 
    while(=> first.lt(s.len()).and(=> eq(get(s, first), @as(u8) 48.trunc()))) {|
        first = add(first, 1) 
    };
    
    while(=> ge(i, first)) {|
        total = add(total, mul(scale, hex_digit(get(s, i))));
        scale = mul(scale, 16);
        i = sub(i, 1);
    };
    total
}


// TODO: this should return an option instead of asserting. 
fn dec_digit(cc: u8) i64 = {
    c: i64 = cc.zext();
    //assert(c.ge("0".char()).and(c.le("9".char())), "dec OOB");
    c.sub("0".char())
}
    
// TODO: this should return an error. 
fn float(s: Str) f64 = {
    value := 0.0;
    scale := 0.1;
    seen_decimal := false;
    for(s){c|
        if(seen_decimal) {|
            value += dec_digit(c).float().mul(scale);
            scale = scale.div(10.0);  // TODO: /= doesn't work??
        } {|
            if(c.eq(".".ascii()), => { seen_decimal = true; }) {|
                value *= 10.0;
                value += dec_digit(c).float();
            }
        };
    };
    
    value
}