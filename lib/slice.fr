@pub fn for() Unit = {unit};
@pub fn enumerate() Unit = {unit};
@pub fn get() Unit = {unit};
@pub fn set() Unit = {unit};
@pub fn fill() Unit = {unit};
@pub fn subslice() Unit = {unit};
@pub fn index() Unit = {unit};
@pub fn slice() Unit = {unit};
@pub fn len() Unit = {unit};
@pub fn memcpy() Unit = {unit};
@pub fn rest() Unit = {unit};
@pub fn find() Unit = {unit};

@pub
fn range(start: i64, end: i64, const yield: Fn(i64, Unit)) Unit = {
    var i = start;
    while(fn = i.lt(end)) {|
        yield(i);
        i = i.add(1);
    };
}

// TODO: return slice so the result may have more room than you asked for (which is useful for growable collections in allocators that use fixed size blocks). 
@interp fn alloc_inner(Element: Type, count: i64) VoidPtr; 
/// `ptr` must be exactly a slice returned by `alloc` (not a subslice of it).
@interp fn dealloc_inner(Element: Type, ptr: VoidPtr, len: i64) Unit;

@interp @pub fn alloc(const Element: Type, count: i64) VoidPtr = alloc_inner(Element, count); 
@interp @pub fn dealloc(const Element: Type, ptr: VoidPtr, len: i64) Unit = dealloc_inner(Element, ptr, len); 

// TODO: PROBLEM: now that im not just taking the first overload, this not using comptiem cache because its not @comptime so multiple versions of inner functions can get made 
//       I still want to replace @comptiem with just having const args but need to make @impl use the cache. 
//       also if you say its @comptime, then you cant have const arg or you get random "overwrite arg" assertions

@impl @pub @comptime
fn Slice(T: Type) Type = {
    const Self: Type = (ptr: *T, len: i64)!struct;
    const T = T;  // TODO
    
    @pub fn slice(ptr: *T) Self = (ptr: ptr, len: 1);
    // TODO: @pub fn empty() Self = (ptr: zeroed(), len: 0);
    @pub fn slice(ptr: *T, count: i64) Self = (ptr: ptr, len: count);
    @pub fn len(self: Self) i64 = self&.len[];
    
    @pub fn get(self: Self, i: i64) T = {
        let v: *T = self.index(i);  // TODO: fix so dont need useless binding 
        v[]
    }
    
    @pub fn index(self: Self, i: i64) *T = {
        var s = self.subslice(i, 1);
        s&.ptr[]
    }
    
    @pub fn set(self: Self, i: i64, v: T) Unit = {
        // TODO: allowing this is a bit creepy if I don't specify order of evaluation. 
        //       and having it be placement is scary if you aliased the lhs ptr on the rhs. 
        self.index(i)[] = v;
    }
    
    @pub fn slice(self: Self, first: i64, past_last: i64) Self = {
        // TODO: first should be lt
        // TODO: its sad that im doing double bounds check in common case where its just index()
        assert(first.le(self.len()).and(past_last.le(self.len())), "OOB"); 
        const slots = size_of(T);
        let raw_first = first.mul(slots);
        let raw_past_last = past_last.mul(slots);
        let ptr: VoidPtr = self&.ptr[];
        let new_ptr: VoidPtr = ptr.raw_slice(raw_first, raw_past_last);
        (ptr: new_ptr, len: past_last.sub(first))
    }
    
    @pub fn subslice(self: Self, first: i64, count: i64) Self = {
        self.slice(first, first.add(count))
    }
    
    @pub fn rest(self: Self, first: i64) Self = {
        self.slice(first, self.len())
    }
    
    // TODO: the other fn type syntax so you can name the arguments in the closure as documentation. 
    // TODO: be more consistant about how tuples are expanded into args to fix Fn((a, b), c) === Fn(a, b, c) when you want Fn(Ty(a, b), c)
    //       seems like a massive mistake that I create ambiguity and then just guess something stupid and hope for the best. 
    @pub fn enumerate(arr: Self, const f: Fn(Ty(i64, *T), Unit)) Unit = {
        var i = 0;
        while(fn = lt(i, arr.len())) {|
            let e: *T = arr.index(i);
            f(i, e);
            i = i.add(1);
        };
    }
    
    // TODO: I don't love that I have to write the deref version seperatly
    //       but I dont have let destructuring (only function args) so its a pain to take tuples by pointer. 
    //       I should be able to destructure Ptr(A, B) to (Ptr(A), Ptr(B))
    @pub fn for(arr: Self, const f: Fn(T, Unit)) Unit = {
        for(arr, fn(v: *T) Unit = f(v[]))
    }
    
    @pub fn for(arr: Self, const f: Fn(*T, Unit)) Unit = {
        var i = 0;
        let l = arr.len();
        while(fn() bool = lt(i, l)) {|
            f(arr.index(i));
            i = i.add(1);
        };
    }
    
    @pub fn memcpy(dest: Self, src: Self) Unit = {
        assert(eq(len(dest), len(src)), "OOB");  // Note: not using `asser t_eq` because the vm tracks those for my tests
        // TODO: sad that this does the bounds check every iteration but a real optimiser would fix it for me anyway so meh. 
        const f = fn(i: i64, e: *T) Unit = dest.set(i, e[]);
        src.enumerate(f);
    }
    
    // TODO: add addr_eq/identical if that's really what you want but like... it never is I feel. 
    @pub fn eq(lhs: Self, rhs: Self) bool = {
        (eq(lhs.len(), rhs.len()), fn() bool = {
            var i = 0;
            while(fn=i.lt(len(lhs)).and(fn = lhs.get(i).eq(rhs.get(i)))) {| 
                i = i.add(1); 
            };
            eq(i, lhs.len())
        }, fn() bool = false)!if
    }
    
    /// Set all elements of the slice to 't'. 
    @pub fn fill(self: *Self, t: T) Unit = {
        for(self) { (ptr: *T) |
            ptr[] = t;
        };
    }
    
    Self
}

/*
@pub @comptime @generic
fn slice_cast(Dest: Type, Src: Type) Fn(Slice$Src, Slice$Dest) = {
    
    (fn(self: Slice$Src) Slice$Dest = {
        // TODO: adjust len & assert mod==0
    })
}
*/
