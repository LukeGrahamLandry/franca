// TODO: These are just cringe forward declarations to create the overload sets. 
fun for();
fun enumerate();
fun get();
fun set();
fun fill();
fun subslice();
fun index();
fun slice();
fun len();
fun memcpy();
fun rest();
fun find();

fun range(start: i64, end: i64, const yield: Fn(i64, Unit)) Unit = {
    var i = start;
    while(fn = i.lt(end)) {|
        yield(i);
        i = i.add(1);
    };
}

// TODO: PROBLEM: now that im not just taking the first overload, this not using comptiem cache because its not @comptime so multiple versions of inner functions can get made 
//       I still want to replace @comptiem with just having const args but need to make @impl use the cache. 
//       also if you say its @comptime, then you cant have const arg or you get random "overwrite arg" assertions

@impl @pub @comptime
fn Slice(T: Type) Type = {
    const Self = (ptr: *T, len: i64)!struct;
    const T = T;  // TODO
    
    fun slice(ptr: *T) Self = (ptr: ptr, len: 1);
    // TODO: fun empty() Self = (ptr: zeroed(), len: 0);
    fun slice(ptr: *T, count: i64) Self = (ptr: ptr, len: count);
    fun len(self: Self) i64 = self&.len[];
    
    fun get(self: Self, i: i64) T = {
        let v: *T = self.index(i);  // TODO: fix so dont need useless binding 
        v[]
    }
    
    fun index(self: Self, i: i64) *T = {
        var s = self.subslice(i, 1);
        s&.ptr[]
    }
    
    fun set(self: Self, i: i64, v: T) Unit = {
        // TODO: allowing this is a bit creepy if I don't specify order of evaluation. 
        //       and having it be placement is scary if you aliased the lhs ptr on the rhs. 
        self.index(i)[] = v;
    }
    
    fun slice(self: Self, first: i64, past_last: i64) Self = {
        // TODO: first should be lt
        // TODO: its sad that im doing double bounds check in common case where its just index()
        assert(first.le(self.len()).and(past_last.le(self.len())), "OOB"); 
        const slots = size_of(T);
        let raw_first = first.mul(slots);
        let raw_past_last = past_last.mul(slots);
        let ptr: VoidPtr = self&.ptr[];
        let new_ptr: VoidPtr = ptr.raw_slice(raw_first, raw_past_last);
        (ptr: new_ptr, len: past_last.sub(first))
    }
    
    fun subslice(self: Self, first: i64, count: i64) Self = {
        self.slice(first, first.add(count))
    }
    
    fun rest(self: Self, first: i64) Self = {
        self.slice(first, self.len())
    }
    
    // TODO: the other fn type syntax so you can name the arguments in the closure as documentation. 
    // TODO: be more consistant about how tuples are expanded into args to fix Fn((a, b), c) === Fn(a, b, c) when you want Fn(Ty(a, b), c)
    //       seems like a massive mistake that I create ambiguity and then just guess something stupid and hope for the best. 
    fun enumerate(arr: Self, const f: Fn(Ty(i64, *T), Unit)) Unit = {
        var i = 0;
        while(fn = lt(i, arr.len())) {|
            let e: *T = arr.index(i);
            f(i, e);
            i = i.add(1);
        };
    }
    
    // TODO: I don't love that I have to write the deref version seperatly
    //       but I dont have let destructuring (only function args) so its a pain to take tuples by pointer. 
    //       I should be able to destructure Ptr(A, B) to (Ptr(A), Ptr(B))
    fun for(arr: Self, const f: Fn(T, Unit)) Unit = {
        for(arr, fn(v: *T) Unit = f(v[]))
    }
    
    fun for(arr: Self, const f: Fn(*T, Unit)) Unit = {
        var i = 0;
        let l = arr.len();
        while(fn() bool = lt(i, l)) {|
            f(arr.index(i));
            i = i.add(1);
        };
    }
    
    fun memcpy(dest: Self, src: Self) Unit = {
        assert(eq(len(dest), len(src)), "OOB");  // Note: not using `asser t_eq` because the vm tracks those for my tests
        // TODO: sad that this does the bounds check every iteration but a real optimiser would fix it for me anyway so meh. 
        const f = fn(i: i64, e: *T) Unit = dest.set(i, e[]);
        src.enumerate(f);
    }
    
    // TODO: add addr_eq/identical if that's really what you want but like... it never is I feel. 
    fun eq(lhs: Self, rhs: Self) bool = {
        (eq(lhs.len(), rhs.len()), fn() bool = {
            var i = 0;
            while(fn=i.lt(len(lhs)).and(fn = lhs.get(i).eq(rhs.get(i)))) {| 
                i = i.add(1); 
            };
            eq(i, lhs.len())
        }, fn() bool = false)!if
    }
    
    /// Set all elements of the slice to 't'. 
    fun fill(self: *Self, t: T) Unit = {
        for(self) { (ptr: *T) |
            ptr[] = t;
        };
    }
    
    Self
}

/*
@pub @comptime @generic
fn slice_cast(Dest: Type, Src: Type) Fn(Slice$Src, Slice$Dest) = {
    
    (fn(self: Slice$Src) Slice$Dest = {
        // TODO: adjust len & assert mod==0
    })
}
*/

@pub const Str = Slice(i64);

fun str(s: ""!type) Str = {  // TODO: god damn bro
    let ptr: **i64 = s&[0];
    let len = s&[1];
    slice(ptr[], len[])
};

fun str(s: Str) ""!type = {  // TODO: god damn bro
    let ptr: **i64 = s&[0];
    let len = s&[1];
    (ptr[], len[])
};

fun endswith(haystack: Str, needle: Str) bool = {
    // TODO: prefix if syntax forces you to give a return type annotation
    (lt(len(haystack), len(needle)),
        fn= false,
        fn= {
            let start: Str = subslice(haystack, sub(len(haystack), len(needle)), len(needle));  // TODO: infer type
            eq(start, needle)
        }
    )!if
}

// TODO: these should just be on Slice(T)
fun startswith(haystack: Str, needle: Str) bool = {
    if(lt(len(haystack), len(needle)), fn = false,
        fn() bool = {
            let start: Str = subslice(haystack, 0, len(needle));  // TODO: infer type
            eq(start, needle)
        }
    )
}

fun startswith(lhs: ""!type, rhs: ""!type) bool = startswith(str(lhs), str(rhs));
fun endswith(lhs: ""!type, rhs: ""!type) bool = endswith(str(lhs), str(rhs));

// TODO: this should return an option. 
// TODO: use @switch once I have ranges. 
fun hex_digit(c: i64) i64 = {
    if(ge(c, 97), 
        fn() i64 =  { assert(lt(c, 107), "hex OOB"); add(sub(c, 97), 10) }, 
        fn() i64 = if(ge(c, 65), 
            fn() i64 = { assert(lt(c, 75), "hex OOB"); add(sub(c, 65), 10) }, 
            fn() i64 = { assert(lt(c, 58), "hex OOB"); sub(c, 48)}
        )
    )
}

// TODO: this should return an error. 
fun hex(s: Str) i64 = {
    var total = 0;
    var scale = 1;
    var i = s.len().sub(1);
    var first = 0;
    
    // This prevents overflow for tracking scale for lots of leading zeros. 
    // TODO: add a test that requires this. lol its an insane number tho so could just not bother 
    while(fn = first.lt(s.len()).and(fn = eq(get(s, first), 48))) {|
        first = add(first, 1) 
    };
    
    while(fn = ge(i, first)) {|
        total = add(total, mul(scale, hex_digit(get(s, i))));
        scale = mul(scale, 16);
        i = sub(i, 1);
    };
    total
}

fun multi_println(s: Slice$Str) Unit = {
    for(s) {(s: *Str)| println(s[]); };
}
