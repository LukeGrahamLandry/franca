

// TODO: return the function instead so you can wrap with your own logic. 
// TODO: pass things as byte slices when possible? (no pointers + no padding)
fn AutoHash($T: Type, $Hasher: Type) void = {
    fn hash(hasher: *Hasher, self: *T) void = {
        @inline_match(@run T.get_type_info_ref()) {
            (fn Struct($_) => {
                inline_for T.get_fields() { $f | 
                    inner := T.get_field_ptr(self, f);
                    // TODO: better error message if not defined. 
                    hasher.hash(inner);
                };
            });
            (fn Tagged($_) => {
                i := 0; // TODO : inline_enumerate
                tag_value := self.tag().ordinal();
                hasher.hash(tag_value&); // TODO: do i want to hash it as Tag so you get the type and can do cool things if you try hard enough? -- Jul 6
                // TODO: @inline_switch.
                inline_for T.get_varients() { $f | 
                    if i == tag_value {|
                        inner := T.get_varient_ptr(self, f);
                        hasher.hash(inner);
                        return();
                    };
                    i += 1;
                };
                // TODO: @safety unreachable_unchecked so you don't bloat the code. i don't trust that llvm can notice my tag preconditions. 
                panic("Tried to hash @tagged with invalid tag value. Uninitilized memory?")
            });
            @default => panic("Unsupported type for AutoHash");
        }
    }
}

fn AutoEq($T: Type) void = {
    fn eq(lhs: *T, rhs: *T) bool = {
        @inline_match(@run T.get_type_info_ref()) {
            (fn Struct($_) => {
                inline_for T.get_fields() { $f | 
                    l_inner := T.get_field_ptr(lhs, f);
                    r_inner := T.get_field_ptr(rhs, f);
                    // TODO: better error message if not defined. 
                    if(!l_inner.eq(r_inner), => return(false));
                };
                true
            });
            (fn Tagged($_) => {
                i := 0; // TODO : inline_enumerate
                tag_value := lhs.tag().ordinal();
                
                if tag_value != rhs.tag().ordinal() {|
                    return(false);
                };
                
                // TODO: @inline_switch.
                inline_for T.get_varients() { $f | 
                    if i == tag_value {|
                        l_inner := T.get_varient_ptr(lhs, f);
                        r_inner := T.get_varient_ptr(rhs, f);
                        return(l_inner.eq(r_inner));
                    };
                    i += 1;
                };
                // TODO: @safety unreachable_unchecked so you don't bloat the code. i don't trust that llvm can notice my tag preconditions. 
                panic("Tried to eq @tagged with invalid tag value. Uninitilized memory?")
            });
            @default => panic("Unsupported type for AutoEq");
        }
    }
}

////////////////////////////////////

TrivialHasher :: @struct(h: u64);
fn init() TrivialHasher #inline = {
    (h = 2166136261)
}
fn hash(hasher: *TrivialHasher, i: *u64) void = {
    hasher.h = hasher.h.bit_xor(i[]);
    hasher.h *= @as(u64) 16777619;
}
fn end(self: *TrivialHasher) u64 = {
    self.h
}

// this is dumb! 
fn HashAsInt($T: Type, $Hasher: Type) void = {
    fn hash(hasher: *Hasher, self: *T) void = {
        i: u64 = self[].int().bitcast();
        hasher.hash(i&);
    }
}

// TODO: really need to have less painful polymorphism stuff so you don't have to put everything in one place. 
fn StupidAddHashable($H: Type) void = {
    WalkInts() { $T | HashAsInt(T, H); };
    #redirect(Ty(*H, *u32), void) fn hash(h: *H, s: *Type) void;
    #redirect(Ty(*H, *u32), void) fn hash(h: *H, s: *Symbol) void;
    HashEach([]u8, H);
    
    fn hash(h: *H, s: *Var) void = {
        h.hash(s.id&);
    }
    
}

:: StupidAddHashable(TrivialHasher);

fn DerefEq($T: Type) void = {
    fn eq(a: *T, b: *T) bool #inline = a[] == b[];
}

:: WalkInts(fn($T) => DerefEq(T));
:: DerefEq(Type);
:: DerefEq(Symbol);

fn WalkInts($do: @Fn(t: Type) void) void = {
    do(u32);
    do(u16);
    do(u8);
    do(i64);
    do(i32);
    do(i16);
    do(i8);
    do(bool);
}

