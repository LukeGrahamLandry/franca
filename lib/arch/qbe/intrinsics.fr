// TODO: UNUSED

//! https://c9x.me/compile/doc/il.html

//////
/// Bitwise

#qbe #asm #c_call
fn bit_not(a: i64) i64 = """
    %out =l xor %a, -1
    ret %out
""";

//////
/// Casts

// TODO: do i have to and off the top?
#qbe #asm #c_call fn trunc(v: u64) u8 = """
    ret %v
""";
// TODO: do i have to and off the top?
#qbe #asm #c_call fn trunc(v: u32) u8 = """
    ret %v
""";
// TODO: do i have to and off the top?
#qbe #asm #c_call fn trunc(v: i64) u8 = """
    ret %v
""";
// TODO: do i have to and off the top?
#qbe #asm #c_call fn trunc(v: i64) u16 = """
    ret %v
""";
// TODO: do i have to and off the top?
#qbe #asm #c_call fn trunc(v: u64) u16 = """
    ret %v
""";
// TODO: do i have to and off the top?
#qbe #asm #c_call fn trunc(v: u64) u32 = """
    ret %v
""";
#qbe #asm #c_call fn trunc(v: u32) u16 = """
    ret %v
""";
#qbe #asm #c_call fn trunc(v: i64) u32 = """
    ret %v
""";
#qbe #asm #c_call fn trunc(v: u16) u8 = """
    ret %v
""";

#qbe #asm #c_call fn zext(v: u32) u64 = """
    %out =l extuw %v
    ret %out
""";
#qbe #asm #c_call fn zext(v: u8) u64 = """
    %out =l extuw %v
    ret %out
""";
#qbe #asm #c_call fn zext(v: u32) u64 = """
    %out =l extuw %v
    ret %out
""";
#qbe #asm #c_call fn zext(v: u8) u32 = """
    ret %v
""";
#qbe #asm #c_call fn zext(v: u16) u32 = """
    ret %v
""";
#qbe #asm #c_call fn zext(v: u32) i64 = """
    %out =l extuw %v
    ret %out
""";
#qbe #asm #c_call fn zext(v: u16) i64 = """
    %out =l extuw %v
    ret %out
""";
#qbe #asm #c_call fn zext(v: u16) u64 = """
    %out =l extuw %v
    ret %out
""";
#qbe #asm #c_call fn zext(v: i32) i64 = """
    %out =l extuw %v
    ret %out
""";

#qbe #asm #c_call fn intcast(v: i32) i64 = """
    %out =l extsw %v
    ret %out
""";

// TODO: this is probably wrong. 
#qbe #asm #c_call fn intcast(v: i64) i32 = """
    ret %v
""";

// preserves the value (not the bit pattern). rounds towards zero. 
#qbe #asm #c_call
fn int(a: f64) i64 = """
    %out =l dtosi %a
    ret %out
""";

// preserves the value (not the bit pattern). 
#qbe #asm #c_call
fn float(a: i64) f64 = """
    %out =d sltof %a
    ret %out
""";

// preserves the bit pattern (not the value)
#qbe #asm #c_call
fn bitcast(a: f64) i64 = """
    %out =l cast %a
    ret %out
""";

// preserves the bit pattern (not the value)
// TODO: do i really have to do it through memory?
#qbe #asm #c_call
fn bitcast(a: i64) f64 = """
    %out =d cast %a
    ret %out
""";

#qbe #asm #c_call
fn cast(v: f64) f32 = """
    %out =s truncd %v
    ret %out
""";

#qbe #asm #c_call
fn cast(v: f32) f64 = """
    %out =d exts %v
    ret %out
""";

