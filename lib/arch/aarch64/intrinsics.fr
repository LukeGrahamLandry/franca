//! #one_ret_pic SAFETY: one return at the end (or HACK), c abi, no relative jumps outside the function, no stack frame. 
//! - means it can be done inline by just chopping off the ret at the end. makes it a bit less insane to use fns for add, etc. 
//! - always inlines, trusts you that its small enough to be worth it. 
//! - still really dumb rn cause i do redundant stack loads/stores. 
// TODO: some consistent way of expressing debug mode bounds checks for div, shift, etc.

#one_ret_pic #aarch64 #asm // TODO: actually test
fn bit_not(a: i64) i64 = (
    orn(Bits.X64, x0, x0, 0b11111, Shift.LSL, @as(u6) 0),
    ret(),
);

//////
/// Floats
// TODO: my macro system should be able to make all these binary operators much neater
//       something like @bin_math_op(add, f64, fadd, FType.D64)
//       There's wierdness around bootstrapping (for ints, prosumably the compiler doesn't need floats),
//       but I do that by precompiling to bit literals anyway so its fine. 
//       Other problem is name resolution, but they can probably just add themselves to the .gen int versions so its fine. 

// preserves the value (not the bit pattern). rounds towards zero. 
#aarch64 #one_ret_pic #asm
fn int(a: f64) i64 = (
    fcvtzs(Bits.X64, FType.D64, x0, x0),
    ret(),
);

// preserves the value (not the bit pattern). 
#aarch64 #one_ret_pic #asm
fn float(a: i64) f64 = (
    scvtf(Bits.X64, FType.D64, x0, x0),
    ret(),
);

// preserves the bit pattern (not the value)
#aarch64 #one_ret_pic #asm
fn bitcast(a: f64) i64 = (
    fmov_from(x0, x0),
    ret(),
);

// preserves the bit pattern (not the value)
#aarch64 #one_ret_pic #asm
fn bitcast(a: i64) f64 = (
    fmov_to(x0, x0),
    ret(),
);

#aarch64 #one_ret_pic #asm
fn cast(v: f64) f32 = (
    fcnv(.D64, .S32, x0, x0),
    ret(),
);

#aarch64 #one_ret_pic #asm
fn cast(v: f32) f64 = (
    fcnv(.S32, .D64, x0, x0),
    ret(),
);

// Always store things sign extended. 
#aarch64 #one_ret_pic #asm fn intcast(v: i64) i32 = (ret(), ret());
#aarch64 #one_ret_pic #asm fn intcast(v: i32) i64 = (ret(), ret())
