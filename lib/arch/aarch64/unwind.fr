AsmInst :: i64; // TODO: Should be Unique(u32) but then need to fix resolve_backtrace_symbol
InstPtr :: *AsmInst;  // TODO: **AsmInst as return type doesnt work?? 

// The first 16 bytes of a stack frame is always one of these. 
Frame :: @struct(
    // TODO: be able to say this type is *Frame. this is harder than fixing the forward declarations thing i feel. 
    fp: rawptr,  // Pointer to the previous Frame (start of its stack). 
    lr: InstPtr  // Saved instruction pointer value. 
);

#aarch64 #c_call #asm 
fn get_fp() *Frame = (
    mov(Bits.X64, x0, fp),
    ret(),
);

/// An array of compiled asm function pointers. Indices are FuncId and missing entries are 0. 
// __get_comptime_dispatch_ptr is now in the compiler because my previous strat with x21 felt sketchy
// so i'll need to revisit this when i want to emit executables that do stack traces on panic. 
fn get_indirect_fn_array() Slice(InstPtr) = {
    (ptr = __get_comptime_dispatch_ptr(), len = number_of_functions())
}

/// Guess which function contains the instruction pointer 'ip'.
/// 'f' will be the one that starts closest to 'ip' but before it. 
/// 'rel_ip' is how many bytes into the function 'ip' is (1 asm instruction is 4 bytes). 
/// If 'ip' is in an ffi (or compiler builtin) function, 'rel_ip' will be very large. 
fn get_func_index(ip: InstPtr) (@struct(f: i64, rel_ip: i64)) = {
    functions := get_indirect_fn_array();
    best_index: i64 = number_of_functions();
    best_distance := 99999999;
    
    // Check every function id. 
    functions.enumerate(fn(i, func) => {
        func := AsmInst.int_from_ptr(func[]);
        ip := AsmInst.int_from_ptr(ip);
        dist := ip.sub(func);
        // If distance is negative, 'ip' is before 'func' so can't be inside it (don't care if its closer). 
        if(dist.lt(best_distance).and(dist.ge(0))) {|
            best_distance = dist;
            best_index = i;
        };
    });
    
    // TODO: return optional. 
    (f = best_index, rel_ip = best_distance)
}

FrResolvedSymbol :: @struct(name: Symbol, fid: FuncId);
ResolvedFn       :: @tagged(Franca: FrResolvedSymbol, Unknown: InstPtr);

// TODO: take const callback instead of allocating list? since list wants to panic which wasnts to call this,
// TODO: check for panic while panicking. 
/// TODO: you want to do this on panics should shouldn't be allocating but this is nice for test. 
/// Note: This relies on the stack frame layout used by bc_to_asm and rustc matching. 
#aarch64 fn walk_backtrace($yield: @Fn(f: ResolvedFn) void) void = {
    addr := get_fp();
    i := 0;
    info := RsResolvedSymbol.uninitialized();
    // TODO: nullable pointer should be spelled ?*T
    while(=> addr[].fp.int_from_rawptr().ne(0)) {|
        ::if(ResolvedFn);

        // TODO: check that its not some other ffi thing that rust couldn't find a name for. 
        func := addr[].lr.get_func_index();
        fid := func.f;
        found: ResolvedFn = if(number_of_functions().gt(fid), fn() ResolvedFn=> {
            fid := fid.index_to_func_id();
            name := fid.name();
            (Franca = (name = name, fid = fid))
            
        }, fn() ResolvedFn => {
            (Unknown = addr[].lr)
        });
        yield(found);
        
        fp := ptr_from_raw(Frame, addr[].fp);
        addr = fp;
        i = i.add(1);
    };
}
