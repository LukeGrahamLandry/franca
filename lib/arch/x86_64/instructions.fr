//! https://wiki.osdev.org/X86-64_Instruction_Encoding
//! http://ref.x86asm.net/coder64.html     (ref)
//! https://www.felixcloutier.com/x86/     (fel)

/*

an instruction has several slots for information:
[prefixes] [mandatory prefix] [REX byte] [opcode] [modR/M byte] [SIB byte] [displacement] [immediate] 
not all instructions will have all those parts (and some are just opcode).

opcode (ref[po]) selects the instruction. [byte] or [0x0F] [byte]          (some are 3 byte but i dont need them yet)
sometimes the same opcode has multiple meanings
    - opcode extension (ref[o]) stored in reg field of modR/M.
       ref[o] can be 0-7 or r means it encodes a register. fel notation is /0, /1, etc or /r
    - mandetory prefix (ref[pf]) 
sometimes operand register is stored in the opcode number, (like pop is 50+r with r being register number 0-7).
    with extension bit in REX to encode the high 8 registers (TODO: which bits of rex? all?).
for ones with a condition code thats often in the opcode number as well. (like 70+X86cc for jump short). 

An instruction can have zero or one arguments that reference memory (perhaps using SIB encoding). 
The opcode decides which arg is memory. (ie. 0x29 is sub with memory on the left and 0x2B has memory on the right).
- since every instruction is a load or a store, you suddenly care about the difference between operand sizes more than on arm. 
  like 32 bit and 64 bit or are not interchangeable because they stomp different amounts of memory. 
- most instructions are 2-address where the left input is also the output.

modR/M has 3 fields: mod:2, reg:3, rm:3.
the meanings of the fields change based on mod and rm. see fn table_modrm.
- mod=00,rm=BP/R13 means RIP+displacement.                                                             <-| note: these both leave reg free
- mod!=11,rm=SP/R12 means use the SIB byte. with difference sizes of displacement depending on mod.    <-| as another argument (or op ext).
- mod=11 tends to mean direct use of the registers and the others mean indirect: one arg is in memory
note: you can never have 4 registers encoded because you have to waste a slot to enable SIB. 

SIB has 3 fields: scale:2, index:3, base:3
again, the meanings change based on mod, index, and base. see fn table_sib.
but they're all computing an address (maybe base) + (maybe index * decoded scale) + (maybe displacement)

some observations:
- LEA instruction is special because it lets you materialize the value computed by the convoluted SIB encoding instead of dereferencing it. 
- The modrm+sib combination chooses the size of the [displacement] slot (none/8/16/32 bytes).
- modR/M + SIB is mostly orthogonal to opcode (except for the extension in reg). 

REX byte has 4 fields: 0b0100, W:1, R:1, X:1, B:1
W changes the operand size of some instructions. fel has `REX.W` in the opcode column.
The others are extensions to change 3 bit fields to 4 bit. (R=reg, X=index, B=rm or base).
- note that when you select sib, the 0 and 1 extended rm mean the same thing so you don't need B for that and its used for base instead. 

The important take away is that you can't just encode whatever registers you want, because some are magic placeholders 
that change the meaning of the fields, so you can't express all combinations of registers used + meanings. 

*/

PrimaryOp :: @enum(u8) (
    AddReg = 0x01,
    OrReg  = 0x09,
    AndReg = 0x21,
    SubReg = 0x29,
    XorReg = 0x31,
    CmpReg = 0x39,
    AddImm32 = 0x81, // opcode extension (0 = add, 5 = sub) 
    MovReg = 0x89, // also store. 
    MovRegLoad = 0x8b, // flip 
    Ret = 0xc3,  // pop return address from the stack and then jump there. 
    MovImm32 = 0xc7,
    Nop = 0x90,
    JmpImm8CC = 0x70, // or with an X86cc
    CallImm32 = 0xe8, // push return address to stack and then jump to an offset.
    JmpImm32 = 0xe9,  // ??? "Use of operand-size prefix in 64-bit mode may result in implementation-dependent behaviour"
    JmpImm8  = 0xeb,
    Int3 = 0xcc,
    MovImm64Base = 0xb8,
    PushBase = 0x50,
    PopBase = 0x58,
    Test = 0x85,
    MovByte = 0x88,
    MovByteLoad = 0x8A,
    SignExtendAxToDxAx = 0x99,  // cqo
    ShiftBase = 0xd3,
    Leave = 0xc9, // mov RSP, RBP; pop RBP; 
    // Load Effective Address: do the computation for a memory argument but don't dereference it. 
    Lea = 0x8d,
);

// (AddReg, OrReg, AndReg, SubReg, XorReg, CmpReg, MovReg)
// can change if loading or storing by flipping bit ______1_

TwoByteOp :: @enum(u8) (
    JmpImm32CC = 0x80,  // ??? "Use of operand-size prefix in 64-bit mode may result in implementation-dependent behaviour"
    SetCC = 0x90,
    IMul = 0xaf,
    CMovCC = 0x40,
    MovZX = 0xB6,
);

FloatOp :: @enum(u8) (
    MovQ = 0x7e,
    MovQTo = 0x6e,
    UComIsd = 0x2e, // fcmp unordered
    ComIsd = 0x2f, // fcmp ordered
    DivSd = 0x5e,
    AddSd = 0x58,
    SubSd = 0x5c,
    MulSd = 0x59,
    // incomprehensible letters my beloved, at least this is familiar to arm 
    CVTSI2SD = 0x2a,  // Convert Doubleword Integer to Scalar Double Precision Floating-Point Value
    CVTSD2SI = 0x2d,  // Convert Scalar Double Precision Floating-Point Value to Doubleword Integer
    cvttsd2si = 0x2c, // Convert With Truncation Scalar Double Precision Floating-Point Value to SignedInteger
    cvtsd2ss = 0x5a,  // Convert Scalar Double Precision Floating-Point Value to Scalar Single PrecisionFloating-Point Value
    // cvtss2sd same as ^ but with float_prefix instead of double_prefix
);

TWO_BYTE_OP_PREFIX :: 0x0f;
operand_16bit_prefix :: 0x66; // use with REX.W=0
float_prefix :: 0xf3;
double_prefix :: 0xf2;
precision_prefix :: 0x66;

// note: a,b,c,d are NOT in order!
// note: names matter! i use them in x86_encoding test to compare against llvm-mc's disassembly. 
X86Reg :: @enum(u4) (
    rax = 0b0000, // 0
    rcx = 0b0001,
    rdx = 0b0010,
    rbx = 0b0011,
    rsp = 0b0100,
    rbp = 0b0101, // 5
    rsi = 0b0110,
    rdi = 0b0111,
    r8  = 0b1000,
    r9  = 0b1001,
    r10 = 0b1010,
    r11 = 0b1011,
    r12 = 0b1100,
    r13 = 0b1101,
    r14 = 0b1110,
    r15 = 0b1111,
); ::enum(X86Reg);

// for now names match default assembly for the test. meh. maybe shouldn't do that. 
// note: floats use unsigned condition codes
X86cc :: @enum(u4) (
     o = 0b0000,  // overflow
    no = 0b0001,  // no overflow
     b = 0b0010,  // below, unsigned <
    ae = 0b0011,  // above or equal, not below, unsigned >=
     e = 0b0100,  // equal
    ne = 0b0101,  // not equal
    be = 0b0110,  // not above, below or equal, unsigned <=
     a = 0b0111,  // above, not (below or equal), unsigned >
     s = 0b1000,  // sign ??
    ns = 0b1001,  // no sign ??
     p = 0b1010,  // parity even ??
    np = 0b1011,  // parity odd ??
     l = 0b1100,  // less, signed >
    ge = 0b1101,  // greated or equal, not less, signed >=
    le = 0b1110,  // less or equal, signed <=
     g = 0b1111,   // greater, not (less or equal), signed > 
); ::enum(X86cc);

ModRmMeaning :: @struct(tag: ModRmTag, disp := Displacement.D0);
SibMeaning   :: @struct(base: bool, scaled_index: bool, disp: Displacement);
Displacement :: @enum(i64) (D0, D8, D32);  ::enum(Displacement);
ModRmTag     :: @enum(i64) (Rm, Sib, Rip); ::enum(ModRmTag);

fn table_modrm(mode: ModrmMode, rm: X86Reg) ModRmMeaning #fold = {
    ::if(ModRmTag); ::if(ModRmMeaning);
    sp_r12 := rm.eq(X86Reg.rsp).or(rm == X86Reg.r12);
    bp_r13 := rm.eq(X86Reg.rbp).or(rm == X86Reg.r13);
    tag: ModRmTag = if(sp_r12, => .Sib, => .Rm);
    @match(mode) {
        fn Indirect00() => if(bp_r13, => (tag = .Rip, disp = .D32), => (tag = tag));
        fn Indirect01() => (tag = tag, disp = .D8);
        fn Indirect10() => (tag = tag, disp = .D32);
        fn Direct()     => (tag = .Rm);
    }
}

fn table_sib(mode: ModrmMode, index: X86Reg, base: X86Reg) SibMeaning #fold = {
    sp := index == X86Reg.rsp;  // no index register is encoded??
    bp_r13 := rm.eq(X86Reg.rbp).or(rm == X86Reg.r13);   // no base register is encoded?? just the extension bit i guess?
    @match(mode) {
        fn Indirect00() => (base = !bp_r13, scaled_index = !sp, disp = if(bp_r13, => .D32, => .D0));
        fn Indirect01() => (base = true,    scaled_index = !sp, disp = .D8);
        fn Indirect10() => (base = true,    scaled_index = !sp, disp = .D32);
        fn Direct()     => panic("no sib byte with direct addressing");
    }
}

// REX prefix lets you use new numbered registers
// (fixed:u4 = 0100, 64_bit_operand?:u1, reg_extend:u1 = 1 for r8-r15, indexing_extend:u1, rm_extend:u1 = 1 for r8-r15)
// TODO: i dont understand what 64_bit_operand does for me. r__ instead of e__ makes sense, same as arm,
//       but it also lets me `mov rsp, -256` which seems unrelated? 
// and then the modrm byte is 
// (??:u2:11, reg:u3 = src, rm:u3 = accumulator)

ModrmMode :: @enum(u2) (
    Indirect00 = 0b00, // one operand is an address
    Indirect01 = 0b01,
    Indirect10 = 0b10,
    Direct     = 0b11, // both operands are register values
); ::enum(ModrmMode);

fn pack_modrm(mode: ModrmMode, rm__dest_or_addr: X86Reg, reg__src: X86Reg) u8 = {
    modrm := (@as(i64) @as(u2) mode).shift_left(6);
    modrm = modrm.bit_or((@as(i64) @as(u4) reg__src).bit_and(@as(i64) 0b111).shift_left(3));
    modrm = modrm.bit_or((@as(i64) @as(u4) rm__dest_or_addr).bit_and(@as(i64) 0b111));
    modrm.trunc()
}

// TODO: don't need prefix if all bits unset?
// TODO: do i ever want W=0? 
// TODO: X extends SIB.index 
// 0100WRXB
// W = use 64-bit operand?? idk
// R = extend modrm.reg
// X = extend sib.index
// B = extend modrm.rm OR sib.base

// for two arg instructions with no sib
fn pack_rex(rm__dest_or_addr: X86Reg, reg__src: X86Reg) u8 = {
    pack_rex_si(true, reg__src, rm__dest_or_addr, DONT_CARE_REG)
}

// TODO: confusing that the arguments are not in order
// for three arg instructions where you need to extend (reg, base, index)
fn pack_rex_si(w: bool, reg_modrm: X86Reg, base_sib__rm_modrm: X86Reg, index_sib: X86Reg) u8 = {
    prefix: i64 = if(w, => 0b01001000, => 0b01000000);
    x: i64 = @as(u4) reg_modrm;
    if x >= 8 {   
        prefix = prefix.bit_or(0b00000100);
    };
    x: i64 = @as(u4) index_sib;
    if x >= 8 {   
        prefix = prefix.bit_or(0b00000010);
    };
    x: i64 = @as(u4) base_sib__rm_modrm;
    if x >= 8 {   
        prefix = prefix.bit_or(0b00000001);
    };
    prefix.trunc()
}

SibScale :: @enum(u2) (One = 0b00, Two = 0b01, Four = 0b10, Eight = 0b11);

// three operand instructions can have 2 in sib + 1 in modrm (other still matters tho somehow?)
fn pack_sib(scale: SibScale, index: X86Reg, base: X86Reg) u8 = {
    // TODO: also need another version of pack_rex that puts our extension bits there + an extra one for the third register. 
    sib := (@as(i64) @as(u2) scale).shift_left(6);
    sib = sib.bit_or((@as(i64) @as(u4) index).bit_and(@as(i64) 0b111).shift_left(3));
    sib = sib.bit_or((@as(i64) @as(u4) base).bit_and(@as(i64) 0b111));
    sib.trunc()
}

DONT_CARE_REG :: X86Reg.rax;

fn encode_bin(code: *List(u8), op: PrimaryOp, dest: X86Reg, src: X86Reg) void = {
    code.push(pack_rex(dest, src));
    code.push(@as(u8) op);
    code.push(pack_modrm(ModrmMode.Direct, dest, src));
}

fn encode_bin2(code: *List(u8), op: TwoByteOp, dest: X86Reg, src: X86Reg) void = {
    code.push(pack_rex(dest, src));
    code.push(TWO_BYTE_OP_PREFIX);
    code.push(@as(u8) op);
    code.push(pack_modrm(ModrmMode.Direct, dest, src));
}

fn encode_bin_mem(code: *List(u8), op: PrimaryOp, dest: X86Reg, src: X86Reg) void = {
    code.push(pack_rex(dest, src));
    code.push(@as(u8) op);
    code.push(pack_modrm(ModrmMode.Indirect00, dest, src));
}

fn encode_bin_mem32(code: *List(u8), op: PrimaryOp, dest: X86Reg, src: X86Reg) void = {
    code.push(pack_rex_si(false, src, dest, DONT_CARE_REG));
    code.push(@as(u8) op);
    code.push(pack_modrm(ModrmMode.Indirect00, dest, src));
}

fn encode_tri_mem(code: *List(u8), op: PrimaryOp, reg: X86Reg, base: X86Reg, index: X86Reg) void = {
    code.push(pack_rex_si(true, reg, base, index));
    code.push(@as(u8) op);
    code.push(pack_modrm(ModrmMode.Indirect00, base, reg));
    code.push(pack_sib(SibScale.One, index, base));
}

fn encode_call_reg(code: *List(u8), mode: ModrmMode, f_ptr: X86Reg) void = {    
    encode_extended_op(code, mode, 0xff, 0b0010, f_ptr);
}

fn encode_not(code: *List(u8), r: X86Reg) void = {    
    encode_extended_op(code, ModrmMode.Direct, 0xf7, 0b0010, r);
}

fn encode_cmp_imm32(code: *List(u8), r: X86Reg, value: i64) void = {    
    encode_extended_op(code, ModrmMode.Direct, 0x81, 0b0111, r);
    value := signed_truncate(value, 32);
    code.push_u32(value);
}

// TODO: extension should be u3? is it allowed to be extended by rex? 
/// when the table says `F7 /2` they mean `encode_extended_op(opcode = 0xF7, extension = 2)`
fn encode_extended_op(code: *List(u8), mode: ModrmMode, opcode: u8, extension: u4, reg: X86Reg) void = {
    opcode_extension := @as(X86Reg) extension;
    code.push(pack_rex(reg, opcode_extension));
    code.push(opcode);
    code.push(pack_modrm(mode, reg, opcode_extension));
}

// note: if you're clever about encoding for smaller numbers you have to fix offsets in tests/jit.fr
fn encode_imm(code: *List(u8), op: PrimaryOp, dest: X86Reg, value: i64) void = {
    value := signed_truncate(value, 32);
    code.push(pack_rex(dest, DONT_CARE_REG));
    code.push(@as(u8) op);
    code.push(pack_modrm(ModrmMode.Direct, dest, DONT_CARE_REG));
    code.push_u32(value);
}

fn encode_imm(code: *List(u8), dest: X86Reg, value: i64) void = {
    encode_imm(code, PrimaryOp.MovImm32, dest, value);
}

// TODO: i dont understand why https://www.felixcloutier.com/x86/jcc says i need 0xcd in there but i clearly don't
//       its it telling me x86 not x86_64? but it says 64-bit mode valid. 
fn encode_jmp(code: *List(u8), cc: X86cc, offset: i64) void = {
    encode_2cc(code, TwoByteOp.JmpImm32CC, cc);
    offset := signed_truncate(offset, 32);
    code.push_u32(offset);
}

fn encode_jmp(code: *List(u8), offset: i64) void = {
    encode_imm32_only(code, PrimaryOp.JmpImm32, offset); 
}

fn encode_imm32_only(code: *List(u8), op: PrimaryOp, offset: i64) void = {
    offset := signed_truncate(offset, 32);
    code.push(@as(u8) op);
    code.push_u32(offset);
}

fn encode_2cc(code: *List(u8), op: TwoByteOp, cc: X86cc) void = {
    code.push(TWO_BYTE_OP_PREFIX);
    op := bit_or(@as(i64) cc, zext(@as(u8) op));
    code.push(@as(u8) op.trunc());
}

fn encode_setcc(code: *List(u8), reg: X86Reg, cc: X86cc) void = {
    code.push(pack_rex(reg, DONT_CARE_REG));
    encode_2cc(code, TwoByteOp.SetCC, cc);
    code.push(pack_modrm(ModrmMode.Direct, reg, DONT_CARE_REG));
}

fn encode_movcc(code: *List(u8), dest: X86Reg, src: X86Reg, cc: X86cc) void = {
    code.push(pack_rex(src, dest));
    encode_2cc(code, TwoByteOp.CMovCC, cc);
    code.push(pack_modrm(ModrmMode.Direct, src, dest));
}

fn encode_imm64(out: *List(u8), reg: X86Reg, value: u64) void = {
    encode_op_reg(out, PrimaryOp.MovImm64Base, reg);
    out.push_u64(value);
}

fn encode_op_reg(out: *List(u8), op: PrimaryOp, reg: X86Reg) void = {
    out.push(pack_rex_si(true, reg, reg, reg)); // TODO: only one of these
    x := @as(i64) (@as(u8) op).zext() + bit_and(@as(i64) reg, @as(i64) 0b111);
    out.push(@as(u8) x.trunc());  // :W=1
}

fn encode_non_sp_offset(asm: *List(u8), op: PrimaryOp, reg: X86Reg, index: X86Reg, offset: i64) void = {
    encode_non_sp_offset(asm, true, op, reg, index, offset);
}

fn encode_non_sp_offset(asm: *List(u8), w: bool, op: PrimaryOp, reg: X86Reg, index: X86Reg, offset: i64) void = {
    @debug_assert_ne(index, X86Reg.rsp, "guess what you passed to encode_non_sp_offset");
    asm.push(pack_rex_si(w, reg, X86Reg.rbp, index));
    asm.push(@as(u8) op);
    asm.push(pack_modrm(ModrmMode.Indirect00, X86Reg.rsp, reg)); // mod=0, rm=sp means use sib
    asm.push(pack_sib(SibScale.One, index, X86Reg.rbp));
    offset := signed_truncate(offset, 32);
    asm.push_u32(offset);
}

fn encode_binf(code: *List(u8), prefix: u8, w: bool, op: FloatOp, dest: u4, src: u4) void = {
    code.push(prefix);
    code.push(pack_rex_si(w, @as(X86Reg) dest, @as(X86Reg) src, DONT_CARE_REG));
    code.push(TWO_BYTE_OP_PREFIX);
    code.push(@as(u8) op);
    code.push(pack_modrm(ModrmMode.Direct, @as(X86Reg) src, @as(X86Reg) dest)); // flipped?
}

// See tests/x86_64_jit.fr for how to use this. 
fn asm_x64(arg: FatExpr, out: FatExpr) FatExpr #macro = {
    @ct_assert(arg.expr&.is(.Tuple), arg.loc, "Expected @asm_x64(Tuple...)");
    parts := arg.expr.Tuple;

    actions: List(FatExpr) = list(parts.len() * 3, ast_alloc());
    @{
        out := @[out];
        @[{
            each parts { part |
                if part.expr&.is(.Call) {
                    part.expr.Call.arg[] = prepend_tuple(@{ out }, part.expr.Call.arg[]);
                    actions&.push(part[]);
                } else {
                    part[] = compile_ast(part[]);
                    @switch(part.ty) {
                        @case(u8) => actions&.push(@{ out.push(@[part[]]) });
                        @case(PrimaryOp) => actions&.push(@{ out.push(@as(u8) @[part[]]) });
                        @case(TwoByteOp) => actions&.push(@{ out.push(@as(u8) @[part[]]) });
                        @case(u32) => actions&.push(@{ out.push_u32(@[part[]]) });
                        @default => compile_error("unhandled type in @asm_x64.", part.loc);
                    };
                };
            };
            arg.expr.Tuple = actions.rs();
            arg
        }];
    }
}

// TODO: this doesn't work because of how it wants to evaluate constants. 
//fn asm_x64(arg: FatExpr) FatExpr #macro = @{
//    (fn(out: *List(u8)) void = @asm_x64(@[arg]) out)
//};

fn push_u32(code: *List(u8), value: u32) void = {
    code.push(@as(u8) value.bit_and(0xFF).trunc());
    code.push(@as(u8) value.shift_right_logical(8).bit_and(0xFF).trunc());
    code.push(@as(u8) value.shift_right_logical(16).bit_and(0xFF).trunc());
    code.push(@as(u8) value.shift_right_logical(24).bit_and(0xFF).trunc());
}

fn push_u64(code: *List(u8), value: u64) void = {
    code.push(@as(u8) value.bit_and(0xFF).trunc());
    code.push(@as(u8) value.shift_right_logical(8).bit_and(0xFF).trunc());
    code.push(@as(u8) value.shift_right_logical(16).bit_and(0xFF).trunc());
    code.push(@as(u8) value.shift_right_logical(24).bit_and(0xFF).trunc());
    code.push(@as(u8) value.shift_right_logical(32).bit_and(0xFF).trunc());
    code.push(@as(u8) value.shift_right_logical(40).bit_and(0xFF).trunc());
    code.push(@as(u8) value.shift_right_logical(48).bit_and(0xFF).trunc());
    code.push(@as(u8) value.shift_right_logical(56).bit_and(0xFF).trunc());
}
