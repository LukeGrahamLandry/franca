#c #asm fn add(a: i64, b: i64) i64 = "return a + b;";
#c #asm fn sub(a: i64, b: i64) i64 = "return a - b;";
#c #asm fn mul(a: i64, b: i64) i64 = "return a * b;";
#c #asm fn div(a: i64, b: i64) i64 = "return ((int64_t) a) / ((int64_t) b);";
#c #asm fn eq(a: i64, b: i64) bool = "return a == b;";
#c #asm fn ne(a: i64, b: i64) bool = "return a != b;";
#c #asm fn le(a: i64, b: i64) bool = "return ((int64_t) a) <= ((int64_t) b);";
#c #asm fn ge(a: i64, b: i64) bool = "return ((int64_t) a) >= ((int64_t) b);";
#c #asm fn lt(a: i64, b: i64) bool = "return ((int64_t) a) < ((int64_t) b);";
#c #asm fn gt(a: i64, b: i64) bool = "return ((int64_t) a) > ((int64_t) b);";

#c #asm fn add(a: f64, b: f64) f64 = "return a + b;";
#c #asm fn sub(a: f64, b: f64) f64 = "return a - b;";
#c #asm fn mul(a: f64, b: f64) f64 = "return a * b;";
#c #asm fn div(a: f64, b: f64) f64 = "return a / b;";
#c #asm fn eq(a: f64, b: f64) bool = "return a == b;";
#c #asm fn ne(a: f64, b: f64) bool = "return a != b;";
#c #asm fn le(a: f64, b: f64) bool = "return a <= b;";
#c #asm fn ge(a: f64, b: f64) bool = "return a >= b;";
#c #asm fn lt(a: f64, b: f64) bool = "return a < b;";
#c #asm fn gt(a: f64, b: f64) bool = "return a > b;";

#c #asm fn shift_left(value: i64, shift_amount: i64) i64 = "return value << shift_amount;";
#c #asm fn bit_or(a: i64, b: i64) i64 = "return a | b;";
#c #asm fn bit_not(a: i64) i64 = "return !a;";
#c #asm fn bit_and(a: i64, b: i64) i64 = "return a & b;";

#c #asm fn offset(ptr: rawptr, bytes: i64) rawptr = "return ptr + bytes;";

#c #asm fn int(a: f64) i64 = "return (long) a;";  // TOOD: rounding
#c #asm fn float(a: i64) f64 = "return (double) a;";

#c #asm fn bitcast(a: f64) i64 = """
    union {
        long as_i;
        double as_f;
    } data;
    data.as_f = a;
    return data.as_i;
""";

#c #asm fn bitcast(a: i64) f64 = """
    union {
        long as_i;
        double as_f;
    } data;
    data.as_i = a;
    return data.as_f;
""";

// TODO: need this on all arches before i can remove my hack version.
//#c #asm fn bitcast(a: f64) u32 = """
//    union {
//        uint32_t as_i;
//        float as_f;
//    } data;
//    data.as_f = a;
//    return data.as_i;
//""";
//#c #asm fn bitcast(a: u32) f32 = """
//    union {
//        uint32_t as_i;
//        float as_f;
//    } data;
//    data.as_i = a;
//    return data.as_f;
//""";

// TODO: you can't express this idea! because you can only have platform dependent code when the body of the function is . 
/*
#c #asm fn try(buf: *JumpBuf) WhichJump #inline = setjmp(buf);
#c #asm fn throw(buf: *JumpBuf) Never = longjmp(buf, 1);
#c #asm #libc fn setjmp(buf: *JumpBuf) WhichJump;
#c #asm #libc fn longjmp(buf: *JumpBuf) WhichJump;
*/
