//! Instruction encoding for wasm32. 
//! Magic numbers from https://webassembly.github.io/spec/core/binary/index.html
//! Abstraction will continue until moral improves. 

FuncIdx :: @struct(id: u32);
TypeIdx :: @struct(id: u32);
TableIdx :: @struct(id: u32);
LabelIdx :: @struct(id: u32);
LocalIdx :: @struct(id: u32);
GlobalIdx :: @struct(id: u32);
MemIdx :: @struct(id: u32);

wasm_page_size :: 65536;
NumType        :: @enum(u8) (I32 = 0x7F, I64 = 0x7E, F32 = 0x7D, F64 = 0x7C);
BlockType      :: @tagged(Empty: void, Value: u8, Index: i33);
MemArg         :: @struct(offset: u32, align: u32);

WasmInst :: @enum(u8) (
    Unreachable = 0x00,
    Nop = 0x01,
    Block = 0x02,
    Loop = 0x03,
    If = 0x04,
    Else = 0x05,
    End = 0x0B,
    Br = 0x0C,
    BrIf = 0x0D,
    Return = 0x0F,
    Call = 0x10,
    CallIndirect = 0x11,
    Drop = 0x1A,
    LocalGet = 0x20,
    LocalSet = 0x21,
    LocalTee = 0x22,
    GlobalGet = 0x23,
    GlobalSet = 0x24,
    I64_Load = 0x29,
    F64_Load = 0x2B,
    I64_Store = 0x37,
    F64_Store = 0x39,
    I64_Const = 0x42,
    F64_Const = 0x44,
    I64_Eq = 0x46,
    I64_Add = 0x7C,
);

fn raw(s: WasmInst) u8 #unsafe_noop_cast;
fn raw(s: NumType) u8 #unsafe_noop_cast;

// TODO: better error message if you use '=' instead of ':'. 
Op :: @tagged(
    Call: FuncIdx,
    CallIndirect: (TypeIdx, TableIdx),
    Br: LabelIdx,
    BrIf: LabelIdx,
    LocalGet: LocalIdx,
    LocalSet: LocalIdx,
    LocalTee: LocalIdx,  // same as local set but returns the value as well
    GlobalGet: GlobalIdx,
    GlobalSet: GlobalIdx,
    I64_Const: i64,
    F64_Const: f64,
    I64_Load: MemArg,
);

Section :: @enum(u8) (
    Custom = 0,
    Type = 1,
    Import = 2,
    Function = 3,
    Table = 4,
    Memory = 5,
    Global = 6,
    Export = 7,
    Start = 8,
    Element = 9,
    Code = 10,
    Data = 11,
    DataCount = 12, 
);
:: enum(Section);

// Note: 
// "Every import defines an index in the respective index space. 
// In each index space, the indices of imports go before the first 
// index of any definition contained in the module itself."
//

WasmModule :: @struct(
    types: List(WasmFuncType), // [TypeIdx] function types
    // Functions are split into two parts. the types are seperate from the code. 
    functions: List(TypeIdx),  // [FuncIdx]
    exports: List(WasmExport),
    code: List(WasmFunc),      // [FuncIdx]
);

fn empty(a: Alloc) WasmModule = {
    (types = list(a), functions = list(a), exports = list(a), code = list(a))
} 

// "Value types can occur in contexts where type indices are also allowed, such as in the case of block types. Thus, the binary format for types corresponds to the signed LEB128 encoding of small negative 
// values, so that they can coexist with (positive) type indices in the future."
WasmValType :: @struct(repr: u8);
WasmFuncType :: @struct(arg: RsVec(WasmValType), ret: RsVec(WasmValType));
WasmFunc :: @struct(locals: RsVec(WasmLocal), insts: RsVec(u8));
WasmLocal :: @struct(ty: WasmValType, count: i64);
// It's tempting to store 4 seperate arrays so you don't need the tag except that you have to refer to them by index. 
WasmExport :: @struct(name: RsVec(u8), desc: WasmExportDesc);
WasmExportDesc :: @tagged(Function: FuncIdx, Table: TableIdx, Memory: MemIdx, Global: GlobalIdx);
:: tagged(WasmExportDesc);

//
// After the magic + version, the thing is a list of sections. 
// Each section is [id byte, size u32, data]
// Note that many sections are a vec of something which is encoded as [count u32, data], 
// so you sometimes have two lengths, one in bytes and then one in elements. 
// Also, when the spec says sizes like u32, that doesn't mean encode using that many bytes, 
// you still use the leb128 stuff. The type is just a range restriction. 
// 
// TODO: use bucket arrays for less copying? 
fn dump(self: *WasmModule, out: *List(u8)) void = {
    out.push_all(@slice(0x00, 0x61, 0x73, 0x6D));  // magic
    out.push_all(@slice(0x01, 0x00, 0x00, 0x00));  // version
    buf: List(u8) = list(temp());
    buf := buf&;
    inner_buf: List(u8) = list(temp());
    inner_buf := inner_buf&;
    
    out.push(Section.Type.raw());
    buf.leb128_unsigned(self.types.len); 
    for self.types { it | 
        buf.push(0x60);
        buf.leb128_unsigned(it.arg.len);
        for it.arg { ty |
            buf.push(ty.repr);
        };
        buf.leb128_unsigned(it.ret.len);
        for it.ret { ty |
            buf.push(ty.repr);
        };
    };
    out.leb128_unsigned(buf.len);
    out.push_all(buf.items());
    buf.clear();
    
    out.push(Section.Function.raw());
    buf.leb128_unsigned(self.functions.len); 
    for self.functions { it | 
        buf.leb128_unsigned(it.id.zext());
    };
    out.leb128_unsigned(buf.len);
    out.push_all(buf.items());
    buf.clear();
    
    out.push(Section.Export.raw());
    buf.leb128_unsigned(self.exports.len); 
    each self.exports { it | 
        buf.leb128_unsigned(it.name.len);
        buf.push_all(it.name.items());
        tag: u8 = it.desc&.tag().ordinal().trunc();
        buf.push(tag);
        @match(it.desc) {  // TODO: this is kinda sad
            fn Function(idx) => buf.leb128_unsigned(idx.id.zext());
            fn Table(idx)    => buf.leb128_unsigned(idx.id.zext());
            fn Memory(idx)   => buf.leb128_unsigned(idx.id.zext());
            fn Global(idx)   => buf.leb128_unsigned(idx.id.zext());
        };
    };
    out.leb128_unsigned(buf.len);
    out.push_all(buf.items());
    buf.clear();
    
    out.push(Section.Code.raw());
    buf.leb128_unsigned(self.code.len); 
    each self.code { it | 
        inner_buf.leb128_unsigned(it.locals.len);
        each it.locals { local | 
            inner_buf.leb128_unsigned(local.count);
            inner_buf.push(local.ty.repr);
        };
        
        // Expressions aren't length prefixed, they have a terminator. 
        inner_buf.push_all(it.insts.items());
        ::?*u8;
        end := it.insts.items().last().unwrap()[];
        @assert_eq(end, WasmInst.End.raw()); // TODO: move @debug_assert_eq to lib
        
        buf.leb128_unsigned(inner_buf.len);
        buf.push_all(inner_buf.items());
        inner_buf.clear();
    };
    out.leb128_unsigned(buf.len);
    out.push_all(buf.items());
    buf.clear();
}

//! https://en.wikipedia.org/wiki/LEB128

LEB_MORE :: 128;
MAX_u8 :: 255;
fn leb128_unsigned(out: *List(u8), i: i64) void = {
    dowhile {
        byte := i.bit_and(MAX_u8);
        i = i.shift_right_logical(7);
        more := i != 0;
        if more {
            byte = byte.bit_or(LEB_MORE);
        }; 
        out.push(@as(u8) byte.trunc());
        more
    };
}

fn leb128_signed(out: *List(u8), i: i64) void = {
    done := false;
    while => !done {
        byte: u8 = i.trunc();
        i = i.shift_right_arithmetic(6);
        done = i.eq(0).or(i == -1);
        if done {
            byte = (@as(i64) byte.zext().bit_and(LEB_MORE.bit_not())).trunc();
        } else {
            i = i.shift_right_arithmetic(1);
            byte = (@as(i64) byte.zext().bit_or(LEB_MORE)).trunc();
        };
        out.push(byte);
    };
}
