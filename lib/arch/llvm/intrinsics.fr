//! https://llvm.org/docs/LangRef.html
// TODO: callable functions that return ir so i can template int vs float. rn its a sad copy-paste. 

//////
/// Bitwise

#llvm #asm #c_call
fn bit_not(a: i64) i64 = """
    %out = xor i64 %a, -1
    ret i64 %out
""";


//////
/// Casts

#llvm #asm #c_call fn intcast(v: i32) i64 = """
    %out = sext i32 %v to i64
    ret i64 %out
""";
// TODO: this is probably wrong. 
#llvm #asm #c_call fn intcast(v: i64) i32 = """
    %out = trunc i64 %v to i32
    ret i32 %out
""";

// preserves the value (not the bit pattern). rounds towards zero. 
#llvm #asm #c_call
fn int(a: f64) i64 = """
    %out = fptosi double %a to i64
    ret i64 %out
""";

// preserves the value (not the bit pattern). 
#llvm #asm #c_call
fn float(a: i64) f64 = """
    %out = sitofp i64 %a to double
    ret double %out
""";

// preserves the bit pattern (not the value)
#llvm #asm #c_call
fn bitcast(a: f64) i64 = """
    %out = bitcast double %a to i64
    ret i64 %out
""";

// preserves the bit pattern (not the value)
#llvm #asm #c_call
fn bitcast(a: i64) f64 = """
    %out = bitcast i64 %a to double
    ret double %out
""";

#llvm #asm #c_call
fn cast(v: f64) f32 = """
    %out = fptrunc double %v to float
    ret float %out
""";

#llvm #asm #c_call
fn cast(v: f32) f64 = """
    %out = fpext float %v to double
    ret double %out
""";
