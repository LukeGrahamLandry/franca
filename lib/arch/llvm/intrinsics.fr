//! https://llvm.org/docs/LangRef.html
// TODO: callable functions that return ir so i can template int vs float. rn its a sad copy-paste. 

//////
/// Bitwise

#llvm #asm #c_call
fn bit_not(a: i64) i64 = """
    %out = xor i64 %a, -1
    ret i64 %out
""";

//////
/// Floats

#llvm #asm #c_call
fn add(a: f64, b: f64) f64 = """
    %out = fadd double %a, %b
    ret double %out
""";

#llvm #asm #c_call
fn sub(a: f64, b: f64) f64 = """
    %out = fsub double %a, %b
    ret double %out
""";

#llvm #asm #c_call
fn mul(a: f64, b: f64) f64 = """
    %out = fmul double %a, %b
    ret double %out
""";

#llvm #asm #c_call
fn div(a: f64, b: f64) f64 = """
    %out = fdiv double %a, %b
    ret double %out
""";

// For float cmp, 
// - o=ordered: false if either is nan
// - u=unordered: true if either is nan
// Which is interesting because it means the NaN != NaN thing isn't real, they just all choose that for some reason. 

#llvm #asm #c_call
fn eq(a: f64, b: f64) bool = """
    %out = fcmp oeq double %a, %b
    %outb = zext i1 %out to i8
    ret i8 %outb
""";

#llvm #asm #c_call
fn ne(a: f64, b: f64) bool = """
    %out = fcmp one double %a, %b
    %outb = zext i1 %out to i8
    ret i8 %outb
""";

#llvm #asm #c_call
fn le(a: f64, b: f64) bool = """
    %out = fcmp ole double %a, %b
    %outb = zext i1 %out to i8
    ret i8 %outb
""";

#llvm #asm #c_call
fn ge(a: f64, b: f64) bool = """
    %out = fcmp oge double %a, %b
    %outb = zext i1 %out to i8
    ret i8 %outb
""";

#llvm #asm #c_call
fn lt(a: f64, b: f64) bool = """
    %out = fcmp olt double %a, %b
    %outb = zext i1 %out to i8
    ret i8 %outb
""";

#llvm #asm #c_call
fn gt(a: f64, b: f64) bool = """
    %out = fcmp ogt double %a, %b
    %outb = zext i1 %out to i8
    ret i8 %outb
""";

//////
/// Other

// TODO: the arg names are based on a different body of the function (dif arch, which ever was seen first) so you can't rename them here.  -- Jun 16
#llvm #asm #c_call
fn offset(ptr: rawptr, bytes: i64) rawptr = """
    %pp = ptrtoint ptr %ptr to i64
    %a = add i64 %pp, %bytes
    %ppp = inttoptr i64 %a to ptr
    ret ptr %ppp
""";

//////
/// Casts

#llvm #asm #c_call fn trunc(v: u64) u8 = """
    %out = trunc i64 %v to i8
    ret i8 %out
""";
#llvm #asm #c_call fn trunc(v: u32) u8 = """
    %out = trunc i32 %v to i8
    ret i8 %out
""";
#llvm #asm #c_call fn trunc(v: i64) u8 = """
    %out = trunc i64 %v to i8
    ret i8 %out
""";
#llvm #asm #c_call fn trunc(v: i64) u16 = """
    %out = trunc i64 %v to i16
    ret i16 %out
""";
#llvm #asm #c_call fn trunc(v: u64) u16 = """
    %out = trunc i64 %v to i16
    ret i16 %out
""";
#llvm #asm #c_call fn trunc(v: u64) u32 = """
    %out = trunc i64 %v to i32
    ret i32 %out
""";
#llvm #asm #c_call fn trunc(v: u32) u16 = """
    %out = trunc i32 %v to i16
    ret i16 %out
""";
#llvm #asm #c_call fn trunc(v: i64) u32 = """
    %out = trunc i64 %v to i32
    ret i32 %out
""";
#llvm #asm #c_call fn trunc(v: u16) u8 = """
    %out = trunc i16 %v to i8
    ret i8 %out
""";

#llvm #asm #c_call fn zext(v: u32) u64 = """
    %out = zext i32 %v to i64
    ret i64 %out
""";
#llvm #asm #c_call fn zext(v: u8) u64 = """
    %out = zext i8 %v to i64
    ret i64 %out
""";
#llvm #asm #c_call fn zext(v: u32) u64 = """
    %out = zext i32 %v to i64
    ret i64 %out
""";
#llvm #asm #c_call fn zext(v: u8) u32 = """
    %out = zext i8 %v to i32
    ret i32 %out
""";
#llvm #asm #c_call fn zext(v: u16) u32 = """
    %out = zext i16 %v to i32
    ret i32 %out
""";
#llvm #asm #c_call fn zext(v: u32) i64 = """
    %out = zext i32 %v to i64
    ret i64 %out
""";
#llvm #asm #c_call fn zext(v: u16) i64 = """
    %out = zext i16 %v to i64
    ret i64 %out
""";
#llvm #asm #c_call fn zext(v: u16) u64 = """
    %out = zext i16 %v to i64
    ret i64 %out
""";
#llvm #asm #c_call fn zext(v: i32) i64 = """
    %out = zext i32 %v to i64
    ret i64 %out
""";

#llvm #asm #c_call fn intcast(v: i32) i64 = """
    %out = sext i32 %v to i64
    ret i64 %out
""";
// TODO: this is probably wrong. 
#llvm #asm #c_call fn intcast(v: i64) i32 = """
    %out = trunc i64 %v to i32
    ret i32 %out
""";

// preserves the value (not the bit pattern). rounds towards zero. 
#llvm #asm #c_call
fn int(a: f64) i64 = """
    %out = fptosi double %a to i64
    ret i64 %out
""";

// preserves the value (not the bit pattern). 
#llvm #asm #c_call
fn float(a: i64) f64 = """
    %out = sitofp i64 %a to double
    ret double %out
""";

// preserves the bit pattern (not the value)
#llvm #asm #c_call
fn bitcast(a: f64) i64 = """
    %out = bitcast double %a to i64
    ret i64 %out
""";

// preserves the bit pattern (not the value)
#llvm #asm #c_call
fn bitcast(a: i64) f64 = """
    %out = bitcast i64 %a to double
    ret double %out
""";

#llvm #asm #c_call
fn cast(v: f64) f32 = """
    %out = fptrunc double %v to float
    ret float %out
""";

#llvm #asm #c_call
fn cast(v: f32) f64 = """
    %out = fpext float %v to double
    ret double %out
""";
