// TODO: make a version of this that checks alignment
/// This function does nothing, it just lies to the typechecker. 
/// It's a bit clunky to type but maybe that's good for morale since its wildly unsafe!
/// SAFETY: the pointer must be aligned correctly for the new type and valid for use as the new size. 
ptr_cast_unchecked :: fn($From: Type, $To: Type, ptr: *From) *To #generic #unsafe_noop_cast;

raw_from_ptr :: fn($From: Type, ptr: *From) rawptr #generic #unsafe_noop_cast;
ptr_from_raw :: fn($To: Type, ptr: rawptr) *To #generic #unsafe_noop_cast;

int_from_ptr :: fn($From: Type, ptr: *From) i64 #generic #ir(.copy, .Kl);
ptr_from_int :: fn($To: Type, ptr: i64) *To #generic #ir(.copy, .Kl);

// TODO: most of the time what you want to do with these is replace the first argument with a rawptr or reverse that. 
//       should provide convience functions for that. 
erase_types_fn :: fn($Arg: Type, $Ret: Type, ptr: FnPtr(Arg, Ret)) rawptr #generic #unsafe_noop_cast;
assume_types_fn :: fn($Arg: Type, $Ret: Type, ptr: rawptr) FnPtr(Arg, Ret) #generic #unsafe_noop_cast;

// TODO: this no longer works if it's an expr
fn zeroed($T: Type) T #generic #inline = {
    impl :: fn() T = {
        t := @uninitialized T;
        set_zeroed(@as([]T) (ptr = t&, len = 1));
        t
    };
    ::impl() 
}

// Signs aren't real. You just use different operations depending on the type. 
fn bitcast(v: u64) i64 #unsafe_noop_cast;
fn bitcast(v: i64) u64 #unsafe_noop_cast;

fn bitcast(a: u32) f32 #ir(.cast, .Ks);
fn bitcast(a: f32) u32 #ir(.cast, .Kw);

fn bitcast(x: i32) u32 #unsafe_noop_cast;
fn bitcast(x: u32) i32 #unsafe_noop_cast;

cast_to_bytes :: fn($T: Type, self: *T) Slice(u8) #generic = {
    ptr := ptr_cast_unchecked(T, u8, self);
    slice(ptr, :: T.size_of())
};

bit_cast_unchecked :: fn($From: Type, $To: Type, v: From) To #generic = {
    ptr_cast_unchecked(From, To, v&)[]
};

reinterpret_bytes :: fn($T: Type, bytes: []u8) []T #generic = 
    (ptr = ptr_cast_unchecked(u8, T, bytes.ptr), len = bytes.len / size_of(T));
