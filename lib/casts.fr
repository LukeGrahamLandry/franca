// TODO: make a version of this that checks alignment
/// This function does nothing, it just lies to the typechecker. 
/// It's a bit clunky to type but maybe that's good for morale since its wildly unsafe!
/// SAFETY: the pointer must be aligned correctly for the new type and valid for use as the new size. 
ptr_cast_unchecked :: fn($From: Type, $To: Type, ptr: *From) *To #generic #unsafe_noop_cast = unreachable("This is a no-op at runtime!");

raw_from_ptr :: fn($From: Type, ptr: *From) rawptr #generic #unsafe_noop_cast = unreachable("This is a no-op at runtime!");
ptr_from_raw :: fn($To: Type, ptr: rawptr) *To #generic #unsafe_noop_cast = unreachable("This is a no-op at runtime!");

int_from_ptr :: fn($From: Type, ptr: *From) i64 #generic = From.raw_from_ptr(ptr).int_from_rawptr();
ptr_from_int :: fn($To: Type, ptr: i64) *To #generic = To.ptr_from_raw(ptr.rawptr_from_int());

// TODO: most of the time what you want to do with these is replace the first argument with a rawptr or reverse that. 
//       should provide convience functions for that. 
erase_types_fn :: fn($Arg: Type, $Ret: Type, ptr: FnPtr(Arg, Ret)) rawptr #generic #unsafe_noop_cast = unreachable("This is a no-op at runtime!");
assume_types_fn :: fn($Arg: Type, $Ret: Type, ptr: rawptr) FnPtr(Arg, Ret) #generic #unsafe_noop_cast = unreachable("This is a no-op at runtime!");

fn zeroed($T: Type) T #generic = {
    t := T.uninitialized();
    ptr := ptr_cast_unchecked(From = T, To = u8, ptr = t&);
    // TODO: have a fancier memset.
    each(slice(ptr, T.size_of())) { b |
        b[] = 0.trunc(); 
    };
    t
}

// TODO: this should work as just asigning to the macro but then it gets wrong prim types for llvm.
//       this used to just be #compiler_builtin_transform_callsite which is like using the macro directly at the callsite which also worked -- Jul 22 
fn uninitialized($T: Type) T #generic = {
    a: T = @_uninitialized();
    // this fixes "slot %v0 is read but never stored to"
    dumb_escape_pointer_to_confuse_qbe :: fn(a: *T) void #noinline = ();
    dumb_escape_pointer_to_confuse_qbe(a&);
    a
}


fn bitcast(v: u64) i64 #unsafe_noop_cast = unreachable("This is a no-op at runtime!");
fn bitcast(v: i64) u64 #unsafe_noop_cast = unreachable("This is a no-op at runtime!");

// TODO: intrinsic
fn bitcast(a: u32) f32 = ptr_cast_unchecked(u32, f32, a&)[];
fn bitcast(a: f32) u32 = ptr_cast_unchecked(f32, u32, a&)[];

cast_to_bytes :: fn($T: Type, self: *T) Slice(u8) #generic = {
    ptr := ptr_cast_unchecked(T, u8, self);
    slice(ptr, :: T.size_of())
};

bit_cast_unchecked :: fn($From: Type, $To: Type, v: From) To #generic = {
    ptr_cast_unchecked(From, To, v&)[]
}
