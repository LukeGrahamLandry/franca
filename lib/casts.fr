// TODO: make a version of this that checks alignment
/// This function does nothing, it just lies to the typechecker. 
/// It's a bit clunky to type but maybe that's good for morale since its wildly unsafe!
/// SAFETY: the pointer must be aligned correctly for the new type and valid for use as the new size. 
ptr_cast_unchecked :: fn(const From: Type, const To: Type, ptr: *From) *To #generic #unsafe_noop_cast = unreachable("This is a no-op at runtime!");

raw_from_ptr :: fn(const From: Type, ptr: *From) rawptr #generic #unsafe_noop_cast = unreachable("This is a no-op at runtime!");
ptr_from_raw :: fn(const To: Type, ptr: rawptr) *To #generic #unsafe_noop_cast = unreachable("This is a no-op at runtime!");

int_from_ptr :: fn(const From: Type, ptr: *From) i64 #generic #unsafe_noop_cast = unreachable("This is a no-op at runtime!");
ptr_from_int :: fn(const To: Type, ptr: i64) *To #generic #unsafe_noop_cast = unreachable("This is a no-op at runtime!");
int_from_rawptr :: fn(ptr: rawptr) i64 #unsafe_noop_cast = unreachable("This is a no-op at runtime!");
rawptr_from_int :: fn(addr: i64) rawptr #unsafe_noop_cast = unreachable("This is a no-op at runtime!");

// TODO: most of the time what you want to do with these is replace the first argument with a rawptr or reverse that. 
//       should provide convience functions for that. 
erase_types_fn :: fn(const Arg: Type, const Ret: Type, ptr: FnPtr(Arg, Ret)) rawptr #generic #unsafe_noop_cast = unreachable("This is a no-op at runtime!");
assume_types_fn :: fn(const Arg: Type, const Ret: Type, ptr: rawptr) FnPtr(Arg, Ret) #generic #unsafe_noop_cast = unreachable("This is a no-op at runtime!");

// TODO: HACK: this only exists because you have to do this so often because generated ffi types don't know how to create a real slice type. 
//       previously you could use @as to do this but it seemed super fragile to have that just ignore field names,
//       when this is the probably the only common situation you'd do that on purpose.  
//       having @as essentually be a transmute is dumb.  -- Jun 1
// TODO: these are dumb names because it sounds like it would be `self: *(T, T)` <-> `(ptr = self, len = 2)`
//       but its temporary anyway. 
slice_from_tuple :: fn(const E: Type, tuple: Ty(*E, i64)) Slice(E) #generic #inline = 
    (ptr = tuple._0, len = tuple._1);

tuple_from_slice :: fn(const E: Type, slice: Slice(E)) Ty(*E, i64) #generic #inline = 
    (slice.ptr, slice.len);

fn zeroed(const T: Type) T #generic = {
    t: T = ()!uninitialized;
    ptr := ptr_cast_unchecked(From = T, To = u8, ptr = t&);
    // TODO: have a fancier memset.
    each(slice(ptr, T.size_of())) { b |
        b[] = 0.trunc(); 
    };
    t
}

// I always use the whole register so its fine? 
// TODO: its hard to think about why this works, because it seems using #unsafe_noop_cast directly doesn't work.
fn zext(v: u32) u64 = unsafe_assume_type(From = u32, To = u64, value = v);
fn zext(v: u8)  u64 = unsafe_assume_type(From =  u8, To = u64, value = v);
fn zext(v: u8)  u32 = unsafe_assume_type(From =  u8, To = u32, value = v);
fn zext(v: u8)  i64 = unsafe_assume_type(From =  u8, To = i64, value = v);
fn zext(v: u16) u32 = unsafe_assume_type(From = u16, To = u32, value = v);
fn zext(v: u32) i64 = unsafe_assume_type(From = u32, To = i64, value = v);

fn trunc(v: u64)  u8 = unsafe_assume_type(From = u64, To =  u8, value = bit_and(v, @as(u64) ::0xFF.zext()));
fn trunc(v: u32)  u8 = unsafe_assume_type(From = u32, To =  u8, value = bit_and(v, @as(u32) ::0xFF.zext()));
fn trunc(v: i64)  u8 = unsafe_assume_type(From = i64, To =  u8, value = bit_and(v, @as(i64) ::0xFF.zext()));
fn trunc(v: u64) u32 = unsafe_assume_type(From = u64, To = u32, value = bit_and(v, @as(u64) ::0xFFFFFFFF.zext()));
fn trunc(v: i64) u32 = unsafe_assume_type(From = i64, To = u32, value = bit_and(v, @as(i64) ::0xFFFFFFFF.zext()));

// Always store things sign extended. 
fn intcast(v: i64) i32 #unsafe_noop_cast = unreachable("This is a no-op at runtime!");
fn intcast(v: i32) i64 #unsafe_noop_cast = unreachable("This is a no-op at runtime!");

fn bitcast(v: u64) i64 #unsafe_noop_cast = unreachable("This is a no-op at runtime!");

unsafe_assume_type :: fn(const From: Type, const To: Type, value: From) To #generic #unsafe_noop_cast = unreachable("This is a no-op at runtime!");
