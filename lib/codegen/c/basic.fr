#c fn add(a: i64, b: i64) i64 = "return a + b;"!asm;
#c fn sub(a: i64, b: i64) i64 = "return a - b;"!asm;
#c fn mul(a: i64, b: i64) i64 = "return a * b;"!asm;
#c fn div(a: i64, b: i64) i64 = "return a / b;"!asm;
#c fn eq(a: i64, b: i64) bool = "return a == b;"!asm;
#c fn ne(a: i64, b: i64) bool = "return a != b;"!asm;
#c fn le(a: i64, b: i64) bool = "return a <= b;"!asm;
#c fn ge(a: i64, b: i64) bool = "return a >= b;"!asm;
#c fn lt(a: i64, b: i64) bool = "return a < b;"!asm;
#c fn gt(a: i64, b: i64) bool = "return a > b;"!asm;

#c fn add(a: f64, b: f64) f64 = "return a + b;"!asm;
#c fn sub(a: f64, b: f64) f64 = "return a - b;"!asm;
#c fn mul(a: f64, b: f64) f64 = "return a * b;"!asm;
#c fn div(a: f64, b: f64) f64 = "return a / b;"!asm;
#c fn eq(a: f64, b: f64) bool = "return a == b;"!asm;
#c fn ne(a: f64, b: f64) bool = "return a != b;"!asm;
#c fn le(a: f64, b: f64) bool = "return a <= b;"!asm;
#c fn ge(a: f64, b: f64) bool = "return a >= b;"!asm;
#c fn lt(a: f64, b: f64) bool = "return a < b;"!asm;
#c fn gt(a: f64, b: f64) bool = "return a > b;"!asm;

#c fn shift_left(value: i64, shift_amount: i64) i64 = "return value << shift_amount;"!asm;
#c fn bit_or(a: i64, b: i64) i64 = "return a | b;"!asm;
#c fn bit_not(a: i64) i64 = "return !a;"!asm;
#c fn bit_and(a: i64, b: i64) i64 = "return a & b;"!asm;

#c fn offset(ptr: rawptr, bytes: i64) rawptr = "return ptr + bytes;"!asm;

#c fn int(a: f64) i64 = "return (long) a;"!asm;  // TOOD: rounding
#c fn float(a: i64) f64 = "return (double) a;"!asm;

#c fn bitcast(a: f64) i64 = """
    union {
        long as_i64;
        double as_f64;
    } data;
    data.as_f64 = a;
    return data.as_i64;
"""!asm;

#c fn bitcast(a: i64) f64 = """
    union {
        long as_i64;
        double as_f64;
    } data;
    data.as_i64 = a;
    return data.as_f64;
"""!asm;

// TODO: you can't express this idea! because you can only have platform dependent code when the body of the function is !asm. 
/*
#c fn try(buf: *JumpBuf) WhichJump #inline = setjmp(buf);
#c fn throw(buf: *JumpBuf) Never = longjmp(buf, 1);
#c #libc fn setjmp(buf: *JumpBuf) WhichJump;
#c #libc fn longjmp(buf: *JumpBuf) WhichJump;
*/
