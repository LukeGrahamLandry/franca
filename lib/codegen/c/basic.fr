#c fn add(a: i64, b: i64) i64 = "return a + b;"!asm;
#c fn sub(a: i64, b: i64) i64 = "return a - b;"!asm;
#c fn mul(a: i64, b: i64) i64 = "return a * b;"!asm;
#c fn div(a: i64, b: i64) i64 = "return a / b;"!asm;
#c fun eq(a: i64, b: i64) bool = "return a == b;"!asm;
#c fun ne(a: i64, b: i64) bool = "return a != b;"!asm;
#c fun le(a: i64, b: i64) bool = "return a <= b;"!asm;
#c fun ge(a: i64, b: i64) bool = "return a >= b;"!asm;
#c fun lt(a: i64, b: i64) bool = "return a < b;"!asm;
#c fun gt(a: i64, b: i64) bool = "return a > b;"!asm;

#c fn add(a: f64, b: f64) f64 = "return a + b;"!asm;
#c fn sub(a: i64, b: f64) f64 = "return a - b;"!asm;
#c fn mul(a: f64, b: f64) f64 = "return a * b;"!asm;
#c fn div(a: f64, b: f64) f64 = "return a / b;"!asm;
#c fun eq(a: f64, b: f64) bool = "return a == b;"!asm;
#c fun ne(a: f64, b: f64) bool = "return a != b;"!asm;
#c fun le(a: f64, b: f64) bool = "return a <= b;"!asm;
#c fun ge(a: f64, b: f64) bool = "return a >= b;"!asm;
#c fun lt(a: f64, b: f64) bool = "return a < b;"!asm;
#c fun gt(a: f64, b: f64) bool = "return a > b;"!asm;

#c fn shift_left(value: i64, shift_amount: i64) i64 = "return value << shift_amount;"!asm;
#c fn bit_or(a: i64, b: i64) i64 = "return a | b;"!asm;
#c fn bit_not(a: i64) i64 = "return !a;"!asm;
#c fn bit_and(a: i64, b: i64) i64 = "return a & b;"!asm;

#c fun offset(ptr: rawptr, bytes: i64) rawptr = "return ptr + bytes;"!asm;
#c fn ptr_to_int(ptr: rawptr) i64 = "return (long) ptr;"!asm;
#c fn int_to_ptr(ptr: i64) rawptr = "return (void*) ptr;"!asm;

#c fun int(a: f64) i64 = "return (long) a;"!asm;  // TOOD: rounding
#c fun float(a: i64) f64 = "return (double) a;"!asm;

#c fn load(ptr: *u8) u8 = "return *ptr;"!asm;
#c fn store(ptr: *u8, value: u8) Unit = "*ptr = value;"!asm;
#c fn load(ptr: *u32) u32 = "return *ptr;"!asm;
#c fn store(ptr: *u32, value: u32) Unit = "*ptr = value;"!asm;
#c fn load(ptr: *u16) u16 = "return *ptr;"!asm;
#c fn store(ptr: *u16, value: u16) Unit = "*ptr = value;"!asm;
#c fn load(ptr: *Unit) Unit = ""!asm;
#c fn store(ptr: *Unit, value: Unit) Unit = ""!asm; 

#c fun bitcast(a: f64) i64 = """
    union {
        long as_i64;
        double as_f64;
    } value;
    data.as_f64 = a;
    return data.as_i64;
"""!asm;

#c fun bitcast(a: i64) f64 = """
    union {
        long as_i64;
        double as_f64;
    } value;
    data.as_i64 = a;
    return data.as_f64;
"""!asm;
