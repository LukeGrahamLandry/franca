
EmitC :: @struct(
    out: List(u8),
    types: List(Str),
    next_var: i64,
);

fn emit_c(self: *EmitC, expr: *FatExpr, result: ?i64) Unit = {
    @match(expr.expr&) {
        (fn Poison() => { panic("Poison"); });
        (fn WipFunc(_) => { panic("WipFunc"); });
        (fn Closure(_) => { panic("Closure"); });
        (fn AddToOverloadSet(_) => { panic("AddToOverloadSet"); });
        (fn PrefixMacro(_) => { panic("PrefixMacro"); });
        (fn GetNamed(_) => { panic("GetNamed"); });
        (fn String(_) => { panic("String"); });
        (fn GetParsed(_) => { panic("GetParsed"); });
        (fn FieldAccess(_) => { panic("FieldAccess"); });
        
        (fn Value(value) => {
            println("value");
        });
        (fn SuffixMacro(suffix) => {
            @switch(suffix._0) {
                @case(@symbol if) => {
                    self.out&.push_all("TYPE out;\nif(");
                    self.emit_c(@as(*FatExpr) suffix._1, result);
                };
            };
        });
        (fn Call(call) => {
            f := self.get_temp();
            self.emit_c(@as(*FatExpr) call._0, @as(?i64) (Some = f));
            self.out&.push_all(")(");
            // self.emit_c(@as(*FatExpr) call._1, );
            @fmt(self.out&, "_tmp_%()", f);
        });
        (fn Block(block) => {
            self.emit_c(@as(*FatExpr) block.result, result);
        });
        (fn Tuple(parts) => {
            
            println("tuple");
        });
        (fn StructLiteralP(pattern) => {
            
            println("struct");
        });
        (fn GetVar(name) => {
            @fmt(self.out&, "%_%", name.name, name.id);
        });
        (fn PtrOffset(offset) => {
            
        });
        (fn Cast(inner) => {
            
        });
    };
}

fn get_temp(self: *EmitC) i64 = {
    self.next_var = self.next_var.add(1);
    self.next_var.sub(1)
}

#macro fn as_c_source(e: FatExpr) FatExpr = {
    self: EmitC = (out = list(), types = list(), next_var = 0);
    e := compile_ast(e);
    self&.emit_c(e&, @as(?i64) (Some = 0));
    @literal(Str) self.out.items()
}
