//! Instruction encoding for aarch64. 
//! Magic numbers from https://developer.arm.com/documentation/ddi0487/latest/ (section 6.2 is the good bit)
//! Helpful for debugging: https://armconverter.com/ (toggle the endianness)


@pub const RegI = Unique(u5);
@pub const RegO = Unique(u5);
@pub const Bits = @enum(u1) (W32 = 0b0, X64 = 0b1);
@pub const Shift = @enum(u2) (LSL = 0b00, LSR = 0b01, ASR = 0b10);
@pub const Cond = @enum(u4) (
    EQ = 0b0000, // equal
    NE = 0b0001, // not equal
    HS = 0b0010, // unsigned greater than or equal
    LO = 0b0011, // unsigned less than
    MI = 0b0100,
    PL = 0b0101,
    VS = 0b0110,
    VC = 0b0111,
    HI = 0b1000, // unsigned greater than
    LS = 0b1001, // unsigned less than or equal
    GE = 0b1010, //  signed greater than or equal
    LT = 0b1011, // signed less than
    GT = 0b1100, // signed greater than
    LE = 0b1101, // signed less than or equal
    _AL2 = 0b1110, // Always, (yes it has two encodings).
    _AL1 = 0b1111, // Always
);

// TODO: this is wrong becuase you want JumpRel(i19) === JumpRel(i19). 
//       Really Unique shouldn't be a function because you don't want it to act like other comptime generics. 
// Note: Branch instructions replace the normal ip increment. So b(1) is a no-op and b(0) is an infinite loop on that instruction.
@pub fn JumpRel(Int: Type) = Unique(Int);  // measured in instructions, not bytes

@pub @rs fn add_sr(sf: Bits.T[], dest: RegO, a: RegI, b: RegI, shift: Shift.T[], amount: u6) u32 =
    @bits(sf, 0b0001011, shift, 0b0, a, amount, b, dest);

@pub @rs fn add_im(sf: Bits.T[], dest: RegO, src: RegI, imm: u12, lsl_12: u1) u32 =
    @bits(sf, 0b00100010, lsl_12, imm, src, dest);

@pub @rs fn orr(sf: Bits.T[], dest: RegO, a: RegI, b: RegI, shift: Shift.T[], amount: u6) u32 =
    @bits(sf, 0b0101010, shift, 0b0, a, amount, b, dest);

/// dest = a | ~(b <shift> amount)  // TODO: make sure that order is right.
@pub @rs fn orn(sf: Bits.T[], dest: RegO, a: RegI, b: RegI, shift: Shift.T[], amount: u6) u32 =
    @bits(sf, 0b0101010, shift, 0b1, a, amount, b, dest);

@pub @rs fn and_sr(sf: Bits.T[], dest: RegO, a: RegI, b: RegI, shift: Shift.T[], amount: u6) u32 =
    @bits(sf, 0b0001010, shift, 0b0, a, amount, b, dest);

@pub @rs fn sub_sr(sf: Bits.T[], dest: RegO, a: RegI, b: RegI, shift: Shift.T[], amount: u6) u32 =
    @bits(sf, 0b1001011, shift, 0b0, b, amount, a, dest);

@pub @rs fn sub_im(sf: Bits.T[], dest: RegO, src: RegI, imm: u12, lsl_12: u1) u32 =
    @bits(sf, 0b10100010, lsl_12, imm, src, dest);

// TODO: really the sub instructions should have a set_flags: u1 = 0 and this could just call that.
//       in general default arguments could make a lot of this neater I think, but then it gets harder for the rust code to use.
@pub @rs fn cmp(sf: Bits.T[], a: RegI, b: RegI) u32 =  // should be cmp_sr with more args but like who would ever want that?
    @bits(sf, 0b1101011, Shift.LSL[], 0b0, b, 0b000000, a, 0b11111);

@pub @rs fn cmp_im(sf: Bits.T[], src: RegI, imm: u12, lsl_12: u1) u32 =
    @bits(sf, 0b11100010, lsl_12, imm, src, 0b11111);

@pub @rs fn mov(sf: Bits.T[], dest: RegO, src: RegI) u32 = orr(sf, dest, src, 0b11111, Shift.LSL[], 0);

/// dest = (x * y) + add
/// This works with signed numbers, even though there's another instruction that says signed mul? i guess the difference matters for the ones that have multiple output registers.
@pub @rs fn madd(sf: Bits.T[], dest: RegO, x: RegI, y: RegI, add: RegI) u32 =
    @bits(sf, 0b0011011000, x, 0b0, add, y, dest);

/// dest = dividend / divisor
@pub @rs fn sdiv(sf: Bits.T[], dest: RegO, dividend: RegI, divisor: RegI) u32 =
    @bits(sf, 0b0011010110, divisor, 0b000011, dividend, dest);

@pub @rs fn cbz(sf: Bits.T[], offset: JumpRel(i19), val: RegI) u32 =
    @bits(sf, 0b0110100, offset, val);

@pub @rs fn cbnz(sf: Bits.T[], offset: JumpRel(i19), val: RegI) u32 =
    @bits(sf, 0b0110101, offset, val);

@pub @rs fn b(offset: JumpRel(i26), set_link: u1) u32 =
    @bits(set_link, 0b00101, offset);

@pub @rs fn b_cond(offset: JumpRel(i19), cond: Cond.T[]) u32 =
    @bits(0b01010100, offset, 0b0, cond);

@pub const Hw = @enum(u2) (Left0 = 0b00, Left16 = 0b01, Left32 = 0b10, Left48 = 0b11);

/// Zero the other bits.
@pub @rs fn movz(sf: Bits.T[], dest: RegO, imm: u16, hw: Hw.T[]) u32 =
    @bits(sf, 0b10100101, hw, imm, dest);

/// Keep the other bits.
@pub @rs fn movk(sf: Bits.T[], dest: RegO, imm: u16, hw: Hw.T[]) u32 =
    @bits(sf, 0b11100101, hw, imm, dest);

// TODO: this is an alias for the one where you specify a register. 
@pub @rs fn ret() u32 = 0xD65F03C0;

// Note: be very careful! The scale of offset_words depends on sf. They save bits by making unaligned access un-encodable.

@pub @rs fn str_uo(sf: Bits.T[], src: RegI, addr: RegI, offset_words: u12) u32 = 
    @bits(0b1, sf, 0b11100100, offset_words, addr, src);

@pub @rs fn ldr_uo(sf: Bits.T[], dest: RegO, addr: RegI, offset_words: u12) u32 = 
    @bits(0b1, sf, 0b11100101, offset_words, addr, dest);

/// Load two sequential words (addr, addr+word_size) into two registers. idk why offset can be negative in this one but not in ldr.
@pub @rs fn ldp_so(sf: Bits.T[], dest1: RegO, dest2: RegO, addr: RegI, offset_words: i7) u32 =
    @bits(sf, 0b010100101, offset_words, dest2, addr, dest1);

@pub @rs fn stp_so(sf: Bits.T[], src1: RegO, src2: RegO, addr: RegI, offset_words: i7) u32 =
    @bits(sf, 0b010100100, offset_words, src2, addr, src1);

/// Branch to an address in a register. Maybe set link register to next pc (return address).
@pub @rs fn br(addr: RegI, set_link: u1) u32 = 
    @bits(0b1101011000, set_link, 0b11111000000, addr, 0b00000);

/// Raise a hardware exception
@pub @rs fn brk(context: u16) u32 =
    @bits(0b11010100001, context, 0b00000);

/// IMPORTANT: this is an alias of CSINC so the cond is inverted from what you'd expect from a real assembler.
/// cond=TRUE === dest=0      cond=FALSE === dest=1
/// https://stackoverflow.com/questions/56519227/arm-cset-condition-encoding-as-vs-docu
@pub @rs fn cset(sf: Bits.T[], dest: RegI, zero_when: Cond.T[]) u32 =
    @bits(sf, 0b0011010100, 0b11111, zero_when, 0b01, 0b11111, dest);

/// Logical Shift Left. <shift> is truncated to the bottom 5/6 bits. (1 << 64 === 1)
@pub @rs fn lslv(sf: Bits.T[], dest: RegI, val: RegI, shift: RegI) u32 =
    @bits(sf, 0b0011010110, shift, 0b001000, val, dest);

// TODO: there's a bit of a confusing dependency where this needs to import things but everything expands to calls to these...
//       but I think it works out because you just need to bootstrap with a different backend. 
//       so need a way of delegating comptime calls to precompiled libs. 
//       think about the boundary between magic generic comptime calls and normal calls that just happen to be at comptime. 
//       and the implementation of the magic generics will include normal calls that work on TypeInfos or whatever. 
//       should document `Type <: TypeId === Ptr(TypeInfo)` 

@pub const x0: u5 = 0;
@pub const x1: u5 = 1;
@pub const x2: u5 = 2;
@pub const x3: u5 = 3;
@pub const sp: u5 = 31;

@pub const OpPtr = VoidPtr;
@pub const YieldArg: Type = (OpPtr, u32);
@pub const RetOp = FnPtr(YieldArg, Unit);
