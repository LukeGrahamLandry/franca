//! This file was @generated from lib/codegen/aarch64/basic.fr

#one_ret_pic #pub #aarch64 
fn eq(a: i64, b: i64, ) bool = (
    0xeb01001f, 0x9a9f17e0, 0xd65f03c0, 
)!asm;

#one_ret_pic #aarch64 
fn add(a: i64, b: i64, ) i64 = (
    0x8b000020, 0xd65f03c0, 
)!asm;

#one_ret_pic #aarch64 
fn sub(a: i64, b: i64, ) i64 = (
    0xcb010000, 0xd65f03c0, 
)!asm;

#one_ret_pic #aarch64 
fn mul(a: i64, b: i64, ) i64 = (
    0x9b007c20, 0xd65f03c0, 
)!asm;

#one_ret_pic #aarch64 
fn div(a: i64, b: i64, ) i64 = (
    0x9ac10c00, 0xd65f03c0, 
)!asm;

#one_ret_pic #aarch64 
fn shift_left(value: i64, shift_amount: i64, ) i64 = (
    0x9ac12000, 0xd65f03c0, 
)!asm;

#one_ret_pic #aarch64 
fn bit_or(a: i64, b: i64, ) i64 = (
    0xaa000020, 0xd65f03c0, 
)!asm;

#one_ret_pic #aarch64 
fn bit_not(a: i64, ) i64 = (
    0xaa2003e0, 0xd65f03c0, 
)!asm;

#one_ret_pic #aarch64 
fn bit_and(a: i64, b: i64, ) i64 = (
    0x8a000020, 0xd65f03c0, 
)!asm;

#one_ret_pic #aarch64 
fn ne(a: i64, b: i64, ) bool = (
    0xeb01001f, 0x9a9f07e0, 0xd65f03c0, 
)!asm;

#one_ret_pic #aarch64 
fn le(a: i64, b: i64, ) bool = (
    0xeb01001f, 0x9a9fc7e0, 0xd65f03c0, 
)!asm;

#one_ret_pic #aarch64 
fn ge(a: i64, b: i64, ) bool = (
    0xeb01001f, 0x9a9fb7e0, 0xd65f03c0, 
)!asm;

#one_ret_pic #aarch64 
fn lt(a: i64, b: i64, ) bool = (
    0xeb01001f, 0x9a9fa7e0, 0xd65f03c0, 
)!asm;

#one_ret_pic #aarch64 
fn gt(a: i64, b: i64, ) bool = (
    0xeb01001f, 0x9a9fd7e0, 0xd65f03c0, 
)!asm;

#one_ret_pic #pub #aarch64 
fn raw_slice(ptr: rawptr, first: i64, one_past_last: i64, ) rawptr = (
    0x8b000020, 0xd65f03c0, 
)!asm;
