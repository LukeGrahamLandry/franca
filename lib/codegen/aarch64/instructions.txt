//! Instruction encoding for aarch64. 
//! - https://developer.arm.com/documentation/ddi0487/latest/ (section 6.2 is the good bit)
//! - https://armconverter.com/ (toggle the endianness)

const RegI = Unique(u5);
const RegO = Unique(u5);
const Bits = @enum(u1) .{ W32 = 0b0, X64 = 0b1 };
const Shift = @enum(u2) .{ LSL = 0b00, LSR = 0b01, ASR = 0b10 };

// TODO: this is wrong becuase you want JumpRel(i19) === JumpRel(i19)
fn JumpRel(Int: Type) = Unique(Int);  // measured in instructions, not bytes

@rs fn add_sr(sf: Bits.T[], dest: RegO, a: RegI, b: RegI, shift: Shift.T[], amount: u6) u32 =
    @bits(sf, 0b0001011, shift, 0b0, a, amount, b, dest) ();

@rs fn add_im(sf: Bits.T[], dest: RegO, src: RegI, imm: u12, lsl_12: u1) u32 =
    @bits(sf, 0b00100010, lsl_12, imm, src, dest) ();

@rs fn orr(sf: Bits.T[], dest: RegO, a: RegI, b: RegI, shift: Shift.T[], amount: u6) u32 =
    @bits(sf, 0b0101010, shift, 0b0, a, amount, b, dest) ();

// TODO: do i have a/b backwards
@rs fn sub_sr(sf: Bits.T[], dest: RegO, a: RegI, b: RegI, shift: Shift.T[], amount: u6) u32 =
    @bits(sf, 0b1001011, shift, 0b0, b, amount, a, dest) ();

@rs fn sub_im(sf: Bits.T[], dest: RegO, src: RegI, imm: u12, lsl_12: u1) u32 =
    @bits(sf, 0b10100010, lsl_12, imm, src, dest) ();

@rs fn mov(sf: Bits.T[], dest: RegO, src: RegI) u32 = orr(sf, dest, src, 0b11111, Shift.LSL[], 0);

@rs fn cbz(sf: Bits.T[], offset: JumpRel(i19), val: RegI) u32 =
    @bits(sf, 0b0110100, offset, val) ();

@rs fn b(offset: JumpRel(i26)) u32 =
    @bits(0b000101, offset) ();

const Hw = @enum(u2) .{ Left0 = 0b00, Left16 = 0b01, Left32 = 0b10, Left48 = 0b11 };

@rs fn movz(sf: Bits.T[], dest: RegO, imm: u16, hw: Hw.T[]) u32 = {
    // assert(or(eq(sf, Bits.X64[]), or(eq(hw, Hw.Left0[]), eq(hw, Hw.Left16[]))), "OOB 32bit");
    // TODO: allow annotation as expression statement. 
    (@bits(sf, 0b10100101, hw, imm, dest) ())
}

// TODO: this is an alias for the one where you specify a register. 
@rs fn ret() u32 = 0xD65F03C0;

// Note: be very careful! The scale of offset_words depends on sf. They save bits by making unaligned access un-encodable.

@rs fn str_uo(sf: Bits.T[], src: RegI, addr: RegI, offset_words: u12) u32 = 
    @bits(0b1, sf, 0b11100100, offset_words, addr, src) ();

@rs fn ldr_uo(sf: Bits.T[], dest: RegO, addr: RegI, offset_words: u12) u32 = 
    @bits(0b1, sf, 0b11100101, offset_words, addr, dest) ();

/// Load two sequential words (addr, addr+word_size) into two registers. idk why offset can be negative in this one but not in ldr.
@rs fn ldp_so(sf: Bits.T[], dest1: RegO, dest2: RegO, addr: RegI, offset_words: i7) u32 =
    @bits(sf, 0b010100101, offset_words, dest2, addr, dest1) ();

@rs fn stp_so(sf: Bits.T[], src1: RegO, src2: RegO, addr: RegI, offset_words: i7) u32 =
    @bits(sf, 0b010100100, offset_words, src2, addr, src1) ();

/// Branch to an address in a register. Maybe set link register to next pc (return address).
@rs fn br(addr: RegI, set_link: u1) u32 = 
    @bits(0b1101011000, set_link, 0b11111000000, addr, 0b00000) ();

// TODO: there's a bit of a confusing dependency where this needs to import things but everything expands to calls to these...
//       but I think it works out because you just need to bootstrap with a different backend. 
//       so need a way of delegating comptime calls to precompiled libs. 
//       think about the boundary between magic generic comptime calls and normal calls that just happen to be at comptime. 
//       and the implementation of the magic generics will include normal calls that work on TypeInfos or whatever. 
//       should document `Type <: TypeId === Ptr(TypeInfo)` 

const x0: u5 = 0;
const x1: u5 = 1;
const x2: u5 = 2;
const x3: u5 = 3;
const sp: u5 = 31;
