

/*
fn bc_to_asm(func: FnBody) Slice(u32) = {
    var insts: Slice(Bc) = func.insts[];
    var out: List(u32) = list(insts.len[]);
    
    const __todo = List(Bc);
    
    enumerate(insts, fn(i: i64, inst: Ptr(Bc)) Unit = {
        let inst = inst[];
        (@match(inst) {
            (fn CallDynamic(arg: CallDynamic) i64 = 0);
            (fn CallDirect(arg: CallDirect) i64 = 0);
            (fn CallBuiltin(arg: CallBuiltin) i64 = 0);
            (fn LoadConstant(arg: LoadConstant) i64 = 0);
            (fn JumpIf(arg: JumpIf) i64 = 0);
            (fn Goto(arg: Goto) i64 = 0);
            (fn Ret(arg: Ret) i64 = 0);
            (fn AbsoluteStackAddr(arg: AbsoluteStackAddr) i64 = 0);
            (fn DebugMarker(arg: DebugMarker) i64 = 0);
            (fn DebugLine(arg: DebugLine) i64 = 0);
            (fn Clone(arg: Clone) i64 = 0);
            (fn Ret(arg: Ret) i64 = 0);
            (fn CloneRange(arg: CloneRange) i64 = 0);
            (fn Move(arg: Move) i64 = 0);
            (fn MoveRange(arg: MoveRange) i64 = 0);
            (fn Drop(arg: Drop) i64 = 0);
            (fn SlicePtr(arg: SlicePtr) i64 = 0);
            (fn Load(arg: Load) i64 = 0);
            (fn TagCheck(arg: TagCheck) i64 = 0);
            (fn CallC(arg: CallC) i64 = 0);
        });
    });
    
    var ops: Slice(u32) = items(out!addr);
    ops
}
*/