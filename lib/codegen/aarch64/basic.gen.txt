//! This file was @generated from lib/codegen/aarch64/basic.txt

@c_call fn add(a: i64, b: i64, ) i64 = (
    0x8b000020, 0xd65f03c0, 
)!asm;

@c_call fn sub(a: i64, b: i64, ) i64 = (
    0xcb010000, 0xd65f03c0, 
)!asm;

@c_call fn mul(a: i64, b: i64, ) i64 = (
    0x9b007c20, 0xd65f03c0, 
)!asm;

@c_call fn div(a: i64, b: i64, ) i64 = (
    0x9ac10c00, 0xd65f03c0, 
)!asm;

@c_call fn shift_left(value: i64, shift_amount: i64, ) i64 = (
    0x9ac12000, 0xd65f03c0, 
)!asm;

@c_call fn bit_or(a: i64, b: i64, ) i64 = (
    0xaa000020, 0xd65f03c0, 
)!asm;

@c_call fn bit_not(a: i64, ) i64 = (
    0xaa2003e0, 0xd65f03c0, 
)!asm;

@c_call fn bit_and(a: i64, b: i64, ) i64 = (
    0x8a000020, 0xd65f03c0, 
)!asm;

@c_call fn eq(a: i64, b: i64, ) bool = (
    0xeb01001f, 0x9a9f17e0, 0xd65f03c0, 
)!asm;

@c_call fn ne(a: i64, b: i64, ) bool = (
    0xeb01001f, 0x9a9f07e0, 0xd65f03c0, 
)!asm;

@c_call fn le(a: i64, b: i64, ) bool = (
    0xeb01001f, 0x9a9fc7e0, 0xd65f03c0, 
)!asm;

@c_call fn ge(a: i64, b: i64, ) bool = (
    0xeb01001f, 0x9a9fb7e0, 0xd65f03c0,
)!asm;

@c_call fn lt(a: i64, b: i64, ) bool = (
    0xeb01001f, 0x9a9fa7e0, 0xd65f03c0,
)!asm;

@c_call fn gt(a: i64, b: i64, ) bool = (
    0xeb01001f, 0x9a9fd7e0, 0xd65f03c0,
)!asm;
