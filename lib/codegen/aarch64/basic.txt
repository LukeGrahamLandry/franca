//! @bs functions have their bodies translated into a list of opcode integer literals.
//! If you change anything here, you have to `./bootstrap.sh` again.

const usize = u64;
const isize = i64;

// TODO fix inline asm
fn lst(ops: Slice(u32)) Slice(u32) = {
    var out: List(u32) = list(ops.len[]);
    push_all(out!addr, ops);
    var out: Slice(u32) = items(out!addr);
    out
}

@bs @c_call
fn add(a: i64, b: i64) i64 = lst((
    add_sr(Bits.X64[], x0, x0, x1, Shift.LSL[], 0),
    ret(),
)!slice)!asm;

@bs @c_call
fn sub(a: i64, b: i64) i64 = lst((
    sub_sr(Bits.X64[], x0, x0, x1, Shift.LSL[], 0),
    ret(),
)!slice)!asm;

/*
mul
le
shift_left
bit_or
bit_not
bit_and
*/
