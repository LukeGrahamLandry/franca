@llvm @pub 
fn add(a: i64, b: i64) i64 = (
    "%out = add i64 %a, %b",
    "ret i64 %out",
)!asm;

@llvm @pub 
fn sub(a: i64, b: i64) i64 = (
    "%out = sub i64 %a, %b",
    "ret i64 %out",
)!asm;

@llvm @pub 
fn mul(a: i64, b: i64) i64 = (
    "%out = mul i64 %a, %b",
    "ret i64 %out",
)!asm;

@llvm @pub 
fn div(a: i64, b: i64) i64 = (
    "%out = sdiv i64 %a, %b",
    "ret i64 %out",
)!asm;

@llvm @pub 
fn shift_left(value: i64, shift_amount: i64) i64 = (
    "%out = shl i64 %value, %shift_amount",
    "ret i64 %out",
)!asm;

@llvm @pub 
fn bit_or(a: i64, b: i64) i64 = (
    "%out = or i64 %a, %b",
    "ret i64 %out",
)!asm;

@llvm @pub 
fn bit_not(a: i64) i64 = (
    "%out = not i64 %a",
    "ret i64 %out",
)!asm;

@llvm @pub 
fn bit_and(a: i64, b: i64) i64 = (
    "%out = and i64 %a, %b",
    "ret i64 %out",
)!asm;

@llvm @pub 
fn eq(a: i64, b: i64) bool = (
    "%out = icmp eq i64 %a, %b",
    "ret i1 %out",
)!asm;

@llvm @pub 
fn ne(a: i64, b: i64) bool = (
    "%out = icmp ne i64 %a, %b",
    "ret i1 %out",
)!asm;

@llvm @pub 
fn le(a: i64, b: i64) bool = (
    "%out = icmp sle i64 %a, %b",
    "ret i1 %out",
)!asm;

@llvm @pub 
fn ge(a: i64, b: i64) bool = (
    "%out = icmp sge i64 %a, %b",
    "ret i1 %out",
)!asm;

@llvm @pub 
fn lt(a: i64, b: i64) bool = (
    "%out = icmp slt i64 %a, %b",
    "ret i1 %out",
)!asm;

@llvm @pub 
fn gt(a: i64, b: i64) bool = (
    "%out = icmp sgt i64 %a, %b",
    "ret i1 %out",
)!asm;
