const usize = u64;
const isize = i64;

fn add(a: i64, b: i64) i64 = (
    "%out = add i64 %a, %b",
    "ret i64 %out",
)!asm;

fn sub(a: i64, b: i64) i64 = (
    "%out = sub i64 %a, %b",
    "ret i64 %out",
)!asm;

fn mul(a: i64, b: i64) i64 = (
    "%out = mul i64 %a, %b",
    "ret i64 %out",
)!asm;

fn div(a: i64, b: i64) i64 = (
    "%out = sdiv i64 %a, %b",
    "ret i64 %out",
)!asm;

fn shift_left(value: i64, shift_amount: i64) i64 = (
    "%out = shl i64 %value, %shift_amount",
    "ret i64 %out",
)!asm;

fn bit_or(a: i64, b: i64) i64 = (
    "%out = or i64 %a, %b",
    "ret i64 %out",
)!asm;

@bs @c_call // TODO: actually test
fn bit_not(a: i64) i64 = (
    "%out = not i64 %a",
    "ret i64 %out",
)!asm;

fn bit_and(a: i64, b: i64) i64 = (
    "%out = and i64 %a, %b",
    "ret i64 %out",
)!asm;

fn eq(a: i64, b: i64) bool = (
    "%out = icmp eq i64 %a, %b",
    "ret i1 %out",
)!asm;

fn ne(a: i64, b: i64) bool = (
    "%out = icmp ne i64 %a, %b",
    "ret i1 %out",
)!asm;

fn le(a: i64, b: i64) bool = (
    "%out = icmp sle i64 %a, %b",
    "ret i1 %out",
)!asm;

fn ge(a: i64, b: i64) bool = (
    "%out = icmp sge i64 %a, %b",
    "ret i1 %out",
)!asm;

fn lt(a: i64, b: i64) bool = (
    "%out = icmp slt i64 %a, %b",
    "ret i1 %out",
)!asm;

fn gt(a: i64, b: i64) bool = (
    "%out = icmp sgt i64 %a, %b",
    "ret i1 %out",
)!asm;
