
// meta programming goal: 
/*

// TODO: #Macros, fn queue_parse(franca_src: Str) FatStmt, !asm handle single element

#macro_stmt
fn wasm_basic() FatStmt = {
    var types = (i64, f64)!slice;
    var arith = ("add", "sub", "mul", "div")!slice;
    var cmp = ("eq", "ne", "lt", "gt", "le", "ge")!slice;
    
    var code: List(u8) = list();
    for(types) {(ty: Type)|
        for(arith) {(name: Str)|
            @fmt(code&, "#wasm fn %(a: %, b: %) % = (Instr.%)!asm", name, ty, ty, ty, name);
        }
        for(cmp) {(name: Str)|
            @fmt(code&, "#wasm fn %(a: %, b: %) bool = (Instr.%)!asm", name, ty, ty, name);
        }
    }
    
    s := code.items().queue_parse();
    code&.drop(); // TODO: defer. 
    s
}

#wasm_basic;

*/
