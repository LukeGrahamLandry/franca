
// Calling Slice.copy_from is easier
// Importing this is just so dumb cause like what does your operating system know that I don't? We're all just shuffling bytes around.  

fn copy_no_alias(dest: rawptr, src: rawptr, len: i64) void = {
    copy_overlapping(dest, src, len);  // im not convinced memcpy is that much faster that we should create extra bugs. 
}

// TODO: im hoping the amount slower that my shitty mem___ are than the fancy libc ones
//       will incentivise me to rethink how TargetSplit configuration works. 
//       so maybe try to refrain from turning them back on until there's a system that isn't embarrassing to explain. 
//       :SLOW -- Apr 14, 2025
// TODO: is alignment real?

fn copy_overlapping(dest: rawptr, src: rawptr, len: i64) void = {
    //@if(is_linking_libc(), {
    //    memmove :: fn(dest: rawptr, source: rawptr, num: i64) rawptr #libc;
    //    memmove(dest, src, len);
    //}, {
        copy_bytes(dest, src, len);
    //});
}

fn copy_bytes(dest: rawptr, src: rawptr, count: i64) void = {
    impl :: fn(dest: rawptr, src: rawptr, count: i64, $T: Type, $delta: i64) void #inline = {
        if false {  
            // TODO: I AM BAD AT MY JOB; first use of an intrinsic sometimes doesn't get inlined? 
            a := T.ptr_from_int(0);
            a.offset(0).ptr_diff(a);
            a.ptr_diff_bytes(a);
        };
        
        src  := T.ptr_from_raw(src); 
        dest := T.ptr_from_raw(dest); 
        @if(delta == -1) {
            src = src.offset(count-1);
            dest = dest.offset(count-1);
        };
        range(0, count) { _ |
            dest[] = src[];
            dest = dest.offset(delta); 
            src = src.offset(delta);
        };
    };
    big := count.shift_right_logical(3);
    dist := ptr_diff(src, dest);
    if dist > 0 && dist < count { 
        impl(dest.offset(big * 8), src.offset(big * 8), count.bit_and(7), u8, -1);
        impl(dest, src, big, i64, -1);
    } else {
        impl(dest, src, big, i64, 1);
        impl(dest.offset(big * 8), src.offset(big * 8), count.bit_and(7), u8, 1);
    }
}

fn set_bytes(mem: []u8, to: u8) void = {
    //@if(is_linking_libc(), {
    //    memset :: fn(destination: rawptr, value: u8, count: i64) rawptr #libc;
    //    memset(u8.raw_from_ptr(mem.ptr), to, mem.len);
    //}, {
        expand :: fn(a: u8) i64 = {
            a: i64 = a.zext();
            a = a.bit_or(a.shift_left(8));
            a = a.bit_or(a.shift_left(16));
            a.bit_or(a.shift_left(32))
        };
        
        // Set 8 bytes at a time and then set the rest. 
        big := mem.len.shift_right_logical(3);
        big:  []i64 = (ptr = ptr_cast_unchecked(u8, i64, mem.ptr), len = big);
        
        to2 := expand(to);
        each big { b |
            b[] = to2;
        };
        if mem.len.bit_and(7) != 0 {
            small: []u8 = mem.rest(big.len * 8);
            each small { b |
                b[] = to;
            };
        };
    //});
}
