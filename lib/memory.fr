
// Calling Slice.copy_from is easier
// TODO: would llvm bless real memcpy in a way it wouldn't bless mine? 
// Importing this is just so dumb cause like what does your operating system know that I don't? We're all just shuffling bytes around.  
// I do still use llvm's intrinsic which ends up generating calls to this when targetting wasm which is a massive pain in the ass. 

fn copy_no_alias(dest: rawptr, src: rawptr, len: i64) void = {
    fn memcpy(dest: rawptr, src: rawptr, len: i64) void #libc; 
    memcpy(dest, src, len);
    //copy_one_by_one(dest, src, len);
}

fn copy_overlapping(dest: rawptr, src: rawptr, len: i64) void = {
    fn memmove(dest: rawptr, source: rawptr, num: i64) rawptr #libc;
    memmove(dest, src, len);
    //copy_one_by_one(dest, src, len);
}

fn memset(destination: rawptr, value: u8, count: i64) rawptr #libc;

fn copy_one_by_one(dest: rawptr, src: rawptr, count: i64) void = {
    src  := u8.ptr_from_raw(src); 
    dest := u8.ptr_from_raw(dest); 
    if ptr_diff(src, dest) > 0 { 
        src = src.offset(count-1);
        dest = dest.offset(count-1);
        range(0, count) { _ |
            dest[] = src[];
            dest = dest.offset(-1); 
            src = src.offset(-1);
        };
    } else {
        range(0, count) { _ |
            dest[] = src[];
            dest = dest.offset(1);
            src = src.offset(1);
        };
    }
}

// TODO: write my own good ones
/*

// TODO: this is dumb. if you want to copy a billion bytes but they're 1 aligned, you should just fix the start/end. 
fn copy_aligned(dest: rawptr, src: rawptr, count_bytes: i64, $align: i64) void = {
    @if(@run align == 0) return();
    T :: UInt(align * 8); ::ptr_utils(T);
    src  := T.ptr_from_raw(src); 
    dest := T.ptr_from_raw(dest); 
    chunks := count_bytes / T.size_of();
    if ptr_diff(src, dest) > 0 {  // TODO: is llvm offended by comparing pointers? 
        src = src.offset(chunks-1);
        dest = dest.offset(chunks-1);
        range(0, chunks) { _ |
            dest[] = src[];
            dest = dest.offset(-1); // units are T not bytes!
            src = src.offset(-1);
        };
    } else {
        range(0, chunks) { _ |
            dest[] = src[];
            dest = dest.offset(1); // units are T not bytes!
            src = src.offset(1);
        };
    }
}

// TODO: this is dumb. if you want to zero a billion bytes but they're 1 aligned, you should just fix the start/end. 
fn set_zero_aligned(dest: rawptr, count_bytes: i64, $align: i64) void = {
    @if(@run align == 0) return();
    T :: UInt(align * 8); ::ptr_utils(T);
    dest := T.ptr_from_raw(dest); 
    range(0, count_bytes / T.size_of()) { _ |
        dest[] = 0;
        dest = dest.offset(1); // units are T not bytes!
    };
}

*/