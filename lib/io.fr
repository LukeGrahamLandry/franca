// TODO: actually use this!

// TODO: more elegant way of signalling error than returning -1. 
// TODO: bug!! why can't i return an optional?
Write :: @struct(data: rawptr, write_fn: FnPtr(Ty(rawptr, Slice(u8)), i64));

// TODO: I already have this in fmt.fr
fn write(fd: *Fd, bytes: Slice(u8)) i64 = {
    written: isize = write(fd[], bytes.ptr, bytes.len);
    // if(written.eq(1.neg()), => (None = unit), => (Some = written))
    written
}

fn write(self: *List(u8), bytes: Slice(u8)) i64 = {
    self.push_all(bytes);
    //(Some = bytes.len)
    bytes.len
}

fn write(self: Write, bytes: Slice(u8)) i64 = {
    f := self.write_fn;
    f(self.data, bytes)
}

as_write :: fn(const W: Type, self: *W) Write #generic = (data = W.raw_from_ptr(self), write_fn = :: {
    f_ty :: Fn(Ty(*W, Slice(u8)), i64);
    p : f_ty : write; // TODO: this type of coercce but htis file isnt used yet -- Jun 24
    ptr := erase_types_fn(Ty(*W, Slice(u8)), i64, p);
    ptr := assume_types_fn(Ty(rawptr, Slice(u8)), i64, ptr);
    ptr
});

#test fn do_write() = {
    lst: List(u8) = list(temp());
    w := List(u8).as_write(lst&);
    w.write("Hello World");
    println(lst.items());
    
    std_out: Fd = (fd = 1.intcast());
    w := Fd.as_write(std_out&);
    w.write("Hello World");
}
