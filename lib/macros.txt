
// Note: this sucks because it can't use @match because that implementation wants to use this function. 
fn visit_expr(start: Ptr(FatExpr), f: Fn(Ptr(FatExpr), Unit)) Unit = {
    var stack: List(Ptr(FatExpr)) = list(1);
    push(stack!addr, start);
    
    (fn() bool = gt(stack.len[], 0), fn() Unit = {
        var e: Ptr(FatExpr) = pop_last(stack!addr);
        f(e);
        
        let tag: Symbol = tag_symbol(Expr, e.expr!tag[]);
        (eq(tag, Call!symbol), fn()={
            (fn(func: Ptr(FatExpr), arg: Ptr(FatExpr)) Unit = {
                push(stack!addr, func);
                push(stack!addr, arg);
            })(e.expr.Call[]);
        }, fn()={
           (eq(tag, Tuple!symbol), fn() Unit ={
                let parts: Slice(FatExpr) = e.expr.Tuple[];  // TODO: shouldnt need binding
                foreach(parts, fn(part: Ptr(FatExpr)) Unit = {
                    push(stack!addr, part);
                });
            }, fn() Unit ={
                (eq(tag, PrefixMacro!symbol), fn() Unit ={
                    let arg: Ptr(FatExpr) = e.expr.PrefixMacro.arg[];
                    let target: Ptr(FatExpr) = e.expr.PrefixMacro.target[];
                    push(stack!addr, arg);
                    push(stack!addr, target);
                }, fn() Unit ={
                    (eq(tag, Closure!symbol), fn() Unit ={
                        const OptExpr: Type = (i64, FatExpr);
                        let body: Ptr(OptExpr) = e.expr.Closure.body;  // TODO: better option ffi
                        (fn(a: i64, b: FatExpr) Unit = { assert(eq(a, 0), "missing body"); })(body[]);
                        let body: Ptr(FatExpr) = raw_slice(body, 1, size_of(OptExpr));
                        push(stack!addr, body);
                    }, fn() Unit ={
                        (eq(tag, SuffixMacro!symbol), fn() Unit ={
                            (fn(a: Symbol, arg: Ptr(FatExpr)) Unit = { 
                                push(stack!addr, arg);
                             })(e.expr.SuffixMacro[]);
                        }, fn() Unit ={
                            // @todo
                        })!if
                    })!if
                })!if
            })!if
        })!if
    })!while;
    drop(stack!addr);
}

const Subst: Type = (Symbol, FatExpr);
const ___dasdasddsfe = List(Subst);
// TODO: instead of this, extend `!quote` to capture ast vars? 
fn apply_placeholders(template: Ptr(FatExpr), replacements: Slice(Subst)) Unit = {
    visit_expr(template, fn(expr: Ptr(FatExpr)) Unit = {
        (eq(expr.expr!tag[], tag_value(Expr, GetNamed!symbol)), fn()={
            let found: Symbol = expr.expr.GetNamed[];
            foreach(replacements, fn(key: Symbol, value: FatExpr) Unit = 
                (eq(key, found), fn()={
                    expr[] = value;
                }, fn()=())!if
            );
        }, fn()=())!if;
    });
}


const _todotodo: Type = List(FatStmt);
const CasePayload: Type = (Symbol, TypeId);
const __asda: Type = List(CasePayload);



// TODO: need to have an actual clone method because just relying on stack copy will share heap ptrs. 
// TODO: once i have an asm backend, this can become a jump table which is pretty cool. 
// TODO: this has a referential transparency problem
@annotation
fn match(arg: FatExpr, target: FatExpr) FatExpr = {
    let stmts: Slice(FatStmt) = target.expr.Block.body[];
    let enum_type: TypeInfo = infer_raw_deref_type(arg);
    var enum_type: TypeId = intern_type(enum_type);
    
    // Declaring variables is weird because name resolution has already run.
    var handler = clone_ast((@with_var(arg_var, arg_init) @with_var(tag_val, arg_var!tag!deref) body_placeholder)!quote);
    var body = (if_false)!quote;
    
    foreach(stmts, fn(stmt: Ptr(FatStmt)) Unit = {
        // TODO: typecheck err message (forgot to deref !tag) points at the wrong location in the expression. 
        (eq(stmt.stmt!tag[], tag_value(Stmt, Eval!symbol)), fn()={
            var handler_body: FatExpr = stmt.stmt.Eval[];
            var name: Symbol = handler_body.expr.Closure.name[];
            
            // TODO: infer output type instead of just forcing int. 
            var new_branch = clone_ast((eq(tag_val, tag_value(enum_type_placeholder, case_tag_name)), 
                fn() i64 = (case_handler)(case_access_placeholder!deref), 
                fn() i64 = if_false_temp
            )!if!quote);
            
            var case_access: FatExpr = clone_ast((arg_var.___)!quote);
            let name_ptr: Ptr(Symbol) = raw_slice(case_access.expr.FieldAccess, 1, 2);  // TODO: destructure by reference so this isnt as suck
            name_ptr[] = name;
            
            let new_rep = (
                (case_tag_name!symbol, literal_ast(Symbol, name!addr)),
                (case_handler!symbol, handler_body),
                (enum_type_placeholder!symbol, literal_ast(Type, enum_type!addr)),
                (case_access_placeholder!symbol, case_access)
            )!slice;
            apply_placeholders(new_branch!addr, new_rep);
            
            // TODO: single element slice. really just want to addr rvalue?
            let body_rep = (
                (if_false!symbol, new_branch),
                (asklsaklsalk!symbol, new_branch),
            )!slice;
            apply_placeholders(body!addr, body_rep);
            
            let body_rep = (
                (if_false_temp!symbol, clone_ast(if_false!quote)),
                (asklsaklsalk!symbol, new_branch),
            )!slice;
            apply_placeholders(body!addr, body_rep);
            
        }, fn()=())!if;
    });
    let body_rep = (  // TODO: single element slice
        (if_false!symbol, panic("unhandled match case")!quote),
        (lmdksdsalmkdasklm!symbol, panic("unhandled match case")!quote),
    )!slice;
    apply_placeholders(body!addr, body_rep);
    
    let handler_rep = (
        (arg_init!symbol, arg),
        (body_placeholder!symbol, body),
        (enum_type_placeholder!symbol, literal_ast(Type, enum_type!addr))
    )!slice;
    apply_placeholders(handler!addr, handler_rep);
    
    handler
}

// TODO: support annotations without a target (just an arg). 
//       Needs support in the parser, just allow tokens that can't be an expression. 
//       Try to make sure no sad ambiguity first. 
// There are implicit range assertions because we get the bit count from the type of the ints. 
@annotation
fn bits(arg: AstExpr, target: AstExpr) AstExpr = {
    let fn_trunc = signed_truncate!quote;
    let fn_shift = shift_left!quote;
    let fn_or = bit_or!quote;
    var zero = 0;

    var parts: Slice(AstExpr) = arg.expr.Tuple[];
    var expr = literal_ast(i64, zero!addr);
    var shift = 32;
    foreach(parts, fn(part: Ptr(AstExpr)) Unit = {
        var int: IntType = get_type_int(part[]);
        shift = sub(shift, int.bit_count[]);
        assert(ge(shift, 0), "expected 32 bits. TODO: other sizes.");
        let next = (int.signed[], 
            fn() AstExpr = new_call_ast(fn_trunc, new_pair_ast(part[], literal_ast(i64, int.bit_count))),
            fn() AstExpr = part[]
        )!if;
        let next = new_call_ast(fn_shift, new_pair_ast(next, literal_ast(i64, shift!addr)));
        expr = new_call_ast(fn_or, new_pair_ast(expr, next));
    });
    assert(eq(shift, 0), "expected 32 bits. TODO: other sizes.");
    expr
}
