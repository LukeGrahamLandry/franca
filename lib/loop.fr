// TODO: this should be expressed as tail recursion. 
/// This is intended to be used with non-local early returns... obviously.
fn loop($f: FuncId) Never = @loop(f());

fn while($cond: @Fn() bool, $body: @Fn() void) void = 
    @loop(@if(cond(), body(), return()));

fn dowhile($f: @Fn() bool) void = while(f, =>());

fn whileb($cond: @Fn() bool, $body: @Fn(break: LabelId) void) void = {
    break :: return;
    loop(=> if(cond(), => body(break), => break()));
}
