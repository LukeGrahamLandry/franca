// TODO: this should be expressed as tail recursion. 
/// This is intended to be used with non-local early returns... obviously.
fn loop(const f: Fn(Unit, Unit)) Never = (=> f())!loop;

fn while(const cond: Fn(Unit, bool), const body: Fn(Unit, Unit)) Unit = {
    break :: !return;
    loop(=> if(cond(), body, => break()));
    // TODO: this typechecks for the wrong reason. 
}

fn dowhile(const f: Fn(Unit, bool)) Unit = while(f, =>());

fn whileb(const cond: Fn(Unit, bool), const body: Fn(Label(Unit), Unit)) Unit = {
    break :: !return;
    loop(=> if(cond(), => body(break), => break()));
}

fn whilec(const cond: Fn(Unit, bool), const body: Fn(Label(Unit), Unit)) Unit = {
    while(cond) {|
        continue :: !return;
        body(continue);
    };
}
