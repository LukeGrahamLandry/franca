
/// This is intended to be used with early returns... obviously.
fn loop(const f: Fn(Unit, Unit)) Never = {
    (=> true, f)!while;
    // TODO: this typechecks for the wrong reason. 
}

//fn while(const cond: Fn(Unit, bool), const body: Fn(Unit, Unit)) Unit = {
//    break :: __return;
//    loop(=> if(cond(), body, => break()));
//}

fn while(const cond: Fn(Unit, bool), const body: Fn(Unit, Unit)) Unit = 
    (cond, body)!while;

fn dowhile(const f: Fn(Unit, bool)) Unit = (=> f(), =>())!while;

fn whileb(const cond: Fn(Unit, bool), const body: Fn(Label(Unit), Unit)) Unit = {
    break :: __return;
    while(cond) {|
        body(break);
    };
}

fn whilec(const cond: Fn(Unit, bool), const body: Fn(Label(Unit), Unit)) Unit = {
    while(cond) {|
        continue :: __return;
        body(continue);
    };
}

fn whilebc(const cond: Fn(Unit, bool), const body: Fn(Ty(Label(Unit), Label(Unit)), Unit)) Unit = {
    break :: __return;
    while(cond) {|
        continue :: __return;
        body(break, continue);
    };
}
