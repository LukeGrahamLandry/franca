//! https://en.wikipedia.org/wiki/LEB128

LEB_MORE :: 128;
MAX_u8 :: 255;

fn leb128_unsigned(out: *List(u8), i: i64) void = 
    leb128_unsigned(out, i, 0);

fn leb128_unsigned(out: *List(u8), i: i64, $pad_to: i64) void = {
    ::@assert_le(pad_to, 19, "too much leb padding");
    n := 0;
    dowhile {
        n += 1;
        byte := i.bit_and(MAX_u8);
        i = i.shift_right_logical(7);
        more := i != 0;
        if more {
            byte = byte.bit_or(LEB_MORE);
        };
        out.push(@as(u8) byte.trunc());
        more
    };
    
    @if(pad_to > 0) {
        @debug_assert_le(n, pad_to, "no enough room for leb in pad_to");
        while => n < pad_to {
            out[out.len - 1] = bit_or(out[out.len - 1], LEB_MORE.trunc());
            out.push(0);
            n += 1;
        };
    };
}

fn leb128_signed(out: *List(u8), i: i64) void = 
    leb128_signed(out, i, 0);

fn leb128_signed(out: *List(u8), i: i64, $pad_to: i64) void = {
    ::@assert_le(pad_to, 19, "too much leb padding");
    done := false;
    n := 0;
    positive := i >= 0;
    while => !done {
        n += 1;
        byte: u8 = i.trunc();
        i = i.shift_right_arithmetic(6);
        done = i.eq(0).or(i == -1);
        if done {
            byte = (@as(i64) byte.zext().bit_and(LEB_MORE.bit_not())).trunc();
        } else {
            i = i.shift_right_arithmetic(1);
            byte = (@as(i64) byte.zext().bit_or(LEB_MORE)).trunc();
        };
        out.push(byte);
    };
    @if(pad_to > 0) {
        p: u8 = @if(positive, 0, 0x7F);
        @debug_assert_le(n, pad_to, "no enough room for leb in pad_to");
        while => n < pad_to {
            out[out.len - 1] = bit_or(out[out.len - 1], LEB_MORE.trunc());
            out.push(p);
            n += 1;
        };
    };
}

fn read_leb128_unsigned(bytes: []u8) Ty(u64, []u8, bool) = {
    a, b, c := read_leb128(bytes, false);
    (a.bitcast(), b, c)
}

fn read_leb128_signed(bytes: []u8) Ty(i64, []u8, bool) = 
    read_leb128(bytes, true);

fn read_leb128(bytes: []u8, $signed: bool) Ty(i64, []u8, bool) = {
    result := 0;
    shift := 0;
    loop {
        if bytes.len == 0 {
            return(0, empty(), false);
        };
        
        b := bytes[0];
        low_bits: i64 = b.zext().bit_and(127);
        result = result.bit_or(low_bits.shift_left(shift));
        shift += 7;
        bytes = bytes.slice_pop_first();

        if b.zext().bit_and(LEB_MORE) == 0 {
            @if(signed) {
                xxx := (@as(i64) b.zext()).bit_and(64) == 64;
                if xxx {
                    result = result.bit_or(shift_left(-1, shift));
                };
            };
            return(result, bytes, true);
        };
    }
}

// How many bytes will it take to encode x?
fn uleb_size(x: i64) i64 = {
    buf := @uninitialized Array(u8, 16);
    buf := fixed_list(buf&.items());
    leb128_unsigned(buf&, x);
    buf.len
}

fn read_leb128(bytes: *[]u8, $signed: bool) ?i64 = {
    v, rest, ok := read_leb128(bytes[], signed);
    bytes[] = rest;
    if(!ok, => return(.None));
    (Some = v)
}

fn read_leb_prefixed_string(bytes: *[]u8) ?Str = {
    size := read_leb128(bytes, false) || return(.None);
    if(bytes.len < size, => return(.None));
    s := bytes[].slice(0, size);
    bytes[] = bytes[].rest(size);
    (Some = s)
}
