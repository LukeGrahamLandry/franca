
// TODO: hard to use because need brackets or treated as annotation on noop stmt. need to give warning at least. 
//       should replace @annotation with @macro(Prefix) @macro(Bang) @macro(Func)
@annotation @pub
fn if(arg: AstExpr, target: AstExpr) AstExpr = 
    (arg!unquote, fn() Unit = target!unquote, fn()=())!if!quote;

// TODO: stop using __ names with @with_var in other places, it only does get_named so don't need to avoid collissions. 
// TODO: make calling literal_ast less painful. The problem is can't use generics in compiler ffi 
//       so have to pass by void ptr but currently can't just make lvalue refernce like rust. 
//       can't decide if this macro is good enough or want ^ as more general solution. 
@annotation @pub
fn literal(arg: AstExpr, target: AstExpr) AstExpr = {
    var lit_fn: OverloadSet = literal_ast;
    let lit_fn = literal_ast(OverloadSet, lit_fn&);
    
    (@with_var(value, target!unquote) 
        lit_fn!unquote(arg!unquote, value&)
    )!quote
}

// Note: this sucks because it can't use @match because that implementation wants to use this function. 
@pub fn visit_expr(start: Ptr(FatExpr), f: Fn(Ptr(FatExpr), Unit)) Unit = {
    const P = Ptr(FatExpr); // TODO
    var stack: List() = list(1);
    push(stack!addr, start);
    
    (fn() bool = gt(stack&.len[], 0), fn() Unit = {
        var e: Ptr(FatExpr) = pop_last(stack!addr);
        f(e);
        
        let tag: Symbol = tag_symbol(Expr, e.expr!tag[]);
        (eq(tag, Call!symbol), fn()={
            (fn(func: Ptr(FatExpr), arg: Ptr(FatExpr)) Unit = {
                push(stack!addr, func);
                push(stack!addr, arg);
            })(e.expr.Call[]);
        }, fn()={
           (eq(tag, Tuple!symbol), fn() Unit ={
                let parts: Slice(FatExpr) = e.expr.Tuple[];  // TODO: shouldnt need binding
                foreach(parts, fn(part: Ptr(FatExpr)) Unit = {
                    push(stack!addr, part);
                });
            }, fn() Unit ={
                (eq(tag, PrefixMacro!symbol), fn() Unit ={
                    let arg: Ptr(FatExpr) = e.expr.PrefixMacro.arg[];
                    let target: Ptr(FatExpr) = e.expr.PrefixMacro.target[];
                    push(stack!addr, arg);
                    push(stack!addr, target);
                }, fn() Unit ={
                    (eq(tag, Closure!symbol), fn() Unit ={
                        const OptExpr: Type = (i64, FatExpr);
                        let body: Ptr(OptExpr) = e.expr.Closure[].body;  // TODO: better option ffi
                        (fn(a: i64, b: FatExpr) Unit = { assert(eq(a, 0), "missing body"); })(body[]);
                        let body: Ptr(FatExpr) = raw_slice(body, size_of(Tag(Expr)), size_of(OptExpr));
                        push(stack!addr, body);
                    }, fn() Unit ={
                        (eq(tag, SuffixMacro!symbol), fn() Unit ={
                            (fn(a: Symbol, arg: Ptr(FatExpr)) Unit = { 
                                push(stack!addr, arg);
                             })(e.expr.SuffixMacro[]);
                        }, fn() Unit ={
                            // @todo
                        })!if
                    })!if
                })!if
            })!if
        })!if
    })!while;
    drop(stack!addr);
}

@pub const Subst: Type = (Symbol, FatExpr);
const ___dasdasddsfe = List(Subst);
// TODO: instead of this, extend `!quote` to capture ast vars? 
@pub fn apply_placeholders(template: Ptr(FatExpr), replacements: Slice(Subst)) Unit = {
    visit_expr(template, fn(expr: Ptr(FatExpr)) Unit = {
        @if(eq(expr.expr!tag[], tag_value(Expr, GetNamed!symbol))) {
            let found: Symbol = expr.expr.GetNamed[];
            foreach(replacements, fn(key: Symbol, value: FatExpr) Unit = 
                @if(eq(key, found)) {
                    expr[] = value;
                }
            );
        };
    });
}


const _todotodo: Type = List(FatStmt);
@pub const CasePayload: Type = (Symbol, Type);
const __asda: Type = List(CasePayload);



// TODO: need to have an actual clone method because just relying on stack copy will share heap ptrs. 
// TODO: once i have an asm backend, this can become a jump table which is pretty cool. 
// TODO: this has a referential transparency problem
@annotation @pub
fn match(arg: FatExpr, target: FatExpr) FatExpr = {
    let stmts: Slice(FatStmt) = target&.expr.Block.body[];
    let enum_type: TypeInfo = infer_raw_deref_type(arg);
    var enum_type: Type = intern_type(enum_type);
    
    // Declaring variables is weird because name resolution has already run.
    var body = (if_false)!quote;
    
    foreach(stmts, fn(stmt: Ptr(FatStmt)) Unit = {
        // TODO: typecheck err message (forgot to deref !tag) points at the wrong location in the expression. 
        (eq(stmt.stmt!tag[], tag_value(Stmt, Eval!symbol)), fn()={
            var handler_body: FatExpr = stmt.stmt.Eval[];
            var name: Symbol = handler_body&.expr.Closure[].name[];
            
            // TODO: infer output type instead of just forcing int. 
            var case_access: FatExpr = clone_ast((arg_var&.___)!quote);
            let name_ptr = case_access&.expr.FieldAccess[1];
            name_ptr[] = name;
            
            // TODO: giving in an having unquote syntax is probably worth it. is $(expr) that much better than expr!unquote? this is a bit illegable. 
            // TODO: its too hacky that you only have to call clone_ast when there's no placeholders
            var cond = eq(tag_val, tag_value(
                literal_ast(Type, enum_type!addr)!unquote, 
                literal_ast(Symbol, name!addr)!unquote
            ))!quote;
            var new_branch = (cond!unquote,
                fn() i64 = (handler_body!unquote)(case_access!unquote!deref), 
                fn() i64 = if_false_temp
            )!if!quote;
            
            var body_rep = (if_false!symbol, new_branch);
            apply_placeholders(body!addr, body_rep!addr.slice());
            
            let body_rep = (
                (if_false_temp!symbol, clone_ast(if_false!quote)),
                (asklsaklsalk!symbol, new_branch),
            )!slice;
            apply_placeholders(body!addr, body_rep);
            
        }, fn()=())!if;
    });
    let body_rep = (  // TODO: single element slice
        (if_false!symbol, panic("unhandled match case")!quote),
        (lmdksdsalmkdasklm!symbol, panic("unhandled match case")!quote),
    )!slice;
    apply_placeholders(body!addr, body_rep);
    
    (@with_var(arg_var, arg!unquote) @with_var(tag_val, arg_var&!tag!deref) body!unquote)!quote
}

// TODO: There are implicit range assertions because we get the bit count from the type of the ints. 
@annotation @pub
fn bits(arg: AstExpr, target: AstExpr) AstExpr = {
    let fn_trunc = @literal(OverloadSet) signed_truncate;
    let fn_shift = @literal(OverloadSet) shift_left;
    let fn_or = @literal(OverloadSet) bit_or;
    var zero = 0;
    var i64_ast = @literal(Type) i64;

    var parts: Slice(AstExpr) = arg&.expr.Tuple[];
    var expr = @literal(i64) 0;
    var shift = 32;
    foreach(parts, fn(part: Ptr(AstExpr)) Unit = {
        var int: IntType = get_type_int(part[]);
        // TODO: fix inference + overloading. 
        //       you only need this annotation if you include instructions.fr so there's another definition of `fn sub`
        //       So it doesn't infer through the field lookup but even without that it should notice that
        //       it can't possibly be the one that takes like 6 arguments. 
        let bc: i64 = int&.bit_count[];
        shift = sub(shift, bc);
        assert(ge(shift, 0), "expected 32 bits. TODO: other sizes.");  // TODO: str(i64) for negative numbers
        let part_ast = (@as(i64_ast!unquote) part[]!unquote)!quote;
        let next = (int&.signed[], 
            fn() AstExpr = new_call_ast(fn_trunc, new_pair_ast(part_ast, literal_ast(i64, int&.bit_count))),
            fn() AstExpr = part_ast
        )!if;
        let next = new_call_ast(fn_shift, new_pair_ast(next, @literal(i64) shift));
        expr = new_call_ast(fn_or, new_pair_ast(expr, next));
        
    });
    assert(eq(shift, 0), concat(str(shift), " != 0; expected 32 bits. TODO: other sizes."));
    (@as(i64_ast!unquote) expr!unquote)!quote
}

// Seems like a fairly crippling design problem the range at which adding new code can mess you up. 
// But that should get better with a stricter module system that lets you import into a namespace. 
// Prior art: 
// - https://journal.stuffwithstuff.com/2012/06/12/multimethods-global-scope-and-monkey-patching/
// - https://journal.stuffwithstuff.com/2011/04/21/multimethods-multiple-inheritance-multiawesome/
