// TODO: this probably shouldn't be allowed -- Apr 27
const ASSERTIONS_PASSED: *i64 = @as(rawptr) malloc(8);

// TODO: why can't I #c_call
// Note: this is a magic name the rust code looks for. 
#when(COUNT_ASSERT)
fun __get_assertions_passed() i64 = ASSERTIONS_PASSED[];

// This gets propagated so it doesn't have to compile all the formatting stuff if its false which makes the tiny tests compile faster. 
VERBOSE_ASSERT :: true;
COUNT_ASSERT   :: true;

// TODO: maybe call this expect_eq to distinguish from a normal assert_eq that isn;t limmited to one call per lexical occurance in a test. 
fun assert_eq(const T: Type) Unit = {
    // TODO: unhelpful error message when there's no fn eq for T. -- Apr 27
    fun assert_eq(lhs: T, rhs: T) Unit = {
        (::VERBOSE_ASSERT, fn = assert(lhs.eq(rhs)) { ()List$i64 |
            var out: List$i64 = list(40);
            @fmt(out&, "Assertion Failed. Expected (% == %)", lhs, rhs);  // TODO: version of @fmt that makes the list for you and returns it. 
            out
        }, fn = {
            assert(lhs.eq(rhs), "assertion failed");
        })!if;
        
        (::COUNT_ASSERT, fn = {
            ASSERTIONS_PASSED[] = ASSERTIONS_PASSED[].add(1);
        }, fn=())!if;
    }
}

::assert_eq(i64);
::assert_eq(bool);
::assert_eq(Type);
::assert_eq(Symbol);
::assert_eq(f64);

// TODO: this cant just be a no-op because I count that my tests trigger all their assertions.
/// Stupid question, but I guess it's wierd if I don't let you ask.
fun assert_eq(_: Unit, __: Unit) Unit = assert_eq(0, 0);
