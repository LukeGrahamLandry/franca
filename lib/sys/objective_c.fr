// https://opensource.apple.com/source/objc4/objc4-709/runtime/runtime.h.auto.html
// https://opensource.apple.com/source/objc4/objc4-706/runtime/objc.h.auto.html

ObjCClass    :: @struct(_: rawptr);
ObjCObject   :: @struct(isa: ObjCClass);
ObjCId       :: @rec @struct(_: rawptr);
ObjCSelector :: @struct(_: rawptr);
ObjCProtocol :: @struct(_: rawptr);
ObjCIVar :: @struct(_: rawptr);
fn id(classname: Str) Type = ObjCId;

ObjCSuper :: @struct(receiver: ObjCId, super_class: ObjCClass);

fn is_nil(self: ObjCId) bool = 
    bit_cast_unchecked(ObjCId, i64, self) == 0;

// TODO: fix loop trying to compile if no driver to supply a #import (TODO: have i done this by now?)

// If you look at apple's objc/message.h, these function signetures have a `...`
// as though they used the c variadic call abi, don't let this fool you! 
// It's actually something totally different! You use it by casting the function pointer 
// to the signeture you want. The abi is the same as if you were calling a normal c function
// with the signeture of the target method (shifted by 2 for self, sel) NOT a varargs call. 
// On the sysv abi they happen to be the same but apple's arm64 abi is different. 
// TODO: since we're lying about the arg types, it freaks out when it tries to inline the shim.
//       so the #noinline (which should mean nothing to an #import) HACKs around that. :NoInlineImport
//       like i guess this does fix the problem because most of the time you super want to inline that shim, 
//       but it just looks stupid to have annotations that are clearly redundant (but aren't). 
//       note: that "shim" is the bounce_body thing which compiles to nothing so doesn't fuck with the arguments, 
//       distinct from the jit_shim which needs to save the arguments while it calls into the compiler so doesn't 
//       work at all and thus creates the need for #avoid_shim. this is... unfortunate. 
objc_msgSend :: fn(/* ObjCId, sel, ... good luck */) void #import("objc") #noinline #avoid_shim; 
objc_msgSendSuper :: fn(/* *ObjCSuper, sel, ... good luck */) void #import("objc") #noinline #avoid_shim;  

// These are only a thing on amd64 (arm64 just always uses the normal versions). 
objc_msgSend_stret       :: fn() void #link_rename(only_stret_on_applex8664) #import("objc") #noinline #avoid_shim; 
objc_msgSendSuper_stret  :: fn() void #link_rename(only_stret_on_applex8664) #import("objc") #noinline #avoid_shim;
only_stret_on_applex8664 :: fn(req: *LinkRenameArg) void = {
    req.out.push_all(req.old_name);
    @debug_assert(req.old_name.ends_with("_stret"));
    if !(req.target.arch == .x86_64 && req.target.os == .macos) { 
        req.out.len -= 6;
    };
};

// :ADistinctionWithoutADifference 
// it is important that this returns a FuncId not a rawptr and the cast happens in the runtime expression 
// TODO: think of a less hacy way to fix this
choose_objc_dispatcher :: fn(super: bool, ret_ty: Type) FuncId = {
    callee := @if(super, objc_msgSendSuper, objc_msgSend);
    callee_stret := @if(super, objc_msgSendSuper_stret, objc_msgSend_stret);
    if size_of(ret_ty) > 16 {  // TODO: are we sure this is the critera? abi says you can return in 2 registers
        callee = callee_stret;
    };
    callee
};

fn objc_getClass(name: CStr) ObjCClass #import("objc");
fn sel_getUid(name: CStr) ObjCSelector #import("objc");
fn objc_allocateClassPair(superclass: ObjCClass, name: CStr, extraBytes: i64) ObjCClass #import("objc");
fn objc_registerClassPair(cls: ObjCClass) void #import("objc");
// imp is a function pointer (reciever, selector, <any other args>)
fn class_addMethod(cls: ObjCClass, name: ObjCSelector, imp: rawptr, types: CStr) bool #import("objc"); 
fn objc_autoreleasePoolPush() rawptr #import("objc");
fn objc_autoreleasePoolPop(ctx: rawptr) void #import("objc");
fn class_addIvar(class: ObjCClass, name: CStr, size: i64, align_log2: u8, types: CStr) bool #import("objc");
fn object_setInstanceVariable(obj: ObjCId, name: CStr, value: rawptr) ObjCIVar #import("objc");
fn object_getInstanceVariable(obj: ObjCId, name: CStr, out_value: *rawptr) ObjCIVar #import("objc");
fn objc_getProtocol(name: CStr) ObjCProtocol #import("objc");
fn class_addProtocol(class: ObjCClass, protocol: ObjCProtocol) void #import("objc");

// This makes a point of forcing all selectors (method + param names) to be constant,
// so the calls to sel_getUid could (in theory) be batched at program startup. 
fn objc(ret_reciever_arg_pattern: FatExpr) FatExpr #macro = 
    objc_call_impl(ret_reciever_arg_pattern, false);

// DONT FORGET self is a *ObjCSuper
fn objc_super(ret_reciever_arg_pattern: FatExpr) FatExpr #macro = 
    objc_call_impl(ret_reciever_arg_pattern, true);

fn objc_call_impl(a: FatExpr, super: bool) FatExpr = {
    args_type: List(Type) = list(temp());
    args: List(FatExpr) = list(ast_alloc());
    selector: List(u8) = list(ast_alloc());
    placeholder := @{ panic("this will be replaced with the selector uid") };
    ret_ty := ObjCId; // default when you use call syntax. works for void as well because you can just ignore it.
    if true {
        break :: local_return;
        loop {
            @match(a.expr&) {
                fn Call(it) => {
                    name := it.f.ident() || compile_error("@objc call f must be named", it.f.loc);
                    no_args := !@is(it.arg.expr&, .Tuple, .StructLiteralP);
                    @match(it.arg.expr&) {
                        fn Tuple(it) => {
                            @ct_assert(it.len == 2, a.loc, "objc message send with multiple arguments needs names");
                            it[0] = compile_ast(it[0]);
                            if super {
                                @ct_assert(it[0].ty == *ObjCSuper, a.loc, "@objc_super first arg needs to be an ObjCSuper");
                            };
                            args_type&.push(it[0].ty);
                            args_type&.push(ObjCSelector);
                            args&.push(it[0]);
                            args&.push(placeholder);
                            @fmt(selector&, "%:", name.str());
                            
                            @if_let(it[1].expr&) fn StructLiteralP(it) => {
                                b := it.bindings&;
                                
                                e := compile_ast(b[0].default);
                                args_type&.push(e.ty);
                                args&.push(e);
                                
                                range(1, b.len) { i |
                                    b := b.index(i);
                                    name := or b.ident() {
                                        compile_error("Expected param name", a.loc)
                                    };
                                    value := b.default;
                                    @fmt(selector&, "%:", name.str());
                                    value := compile_ast(value);
                                    args&.push(value);
                                    args_type&.push(value.ty);
                                };
                                
                                break()
                            };
                            
                            it[1] = compile_ast(it[1]);
                            args_type&.push(it[1].ty);
                            args&.push(it[1]);
                            break();
                        }
                        fn StructLiteralP(_) => compile_error("@objc reciever can't have name", it.arg.loc);
                        @default => {
                            reciever := compile_ast(it.arg[]);
                            args_type&.push(reciever.ty);
                            args_type&.push(ObjCSelector);
                            args&.push(reciever);
                            args&.push(placeholder);
                            selector&.push_all(name.str());
                            break();
                        };
                    };
                }
                fn PrefixMacro(it) => {
                    loc := it.handler.loc;
                    msg :: "@objc expected @as";
                    handler := it.handler.ident() || compile_error(msg, loc);
                    @ct_assert(handler == @symbol as, loc, msg);
                    ret_ty = const_eval(Type)(it.arg[]);
                    a = it.target[];
                    // continue
                }
                @default => compile_error("@objc expected rec.m(args)", a.loc);
            };
        };
    };
    
    callee := choose_objc_dispatcher(super, ret_ty);
    arg_ty := Ty(args_type.items());
    selector := selector.items().sym().c_str();
    args[1] = @{ SEL(@[@literal selector]) };  
    arg_pattern: FatExpr = (expr = (Tuple = args.as_raw()), ty = UnknownType, done = false, loc = a.loc);
    xx := @{
        f: rawptr = @[@literal callee];  // :ADistinctionWithoutADifference
        f := assume_types_fn(@[@literal arg_ty], @[@literal ret_ty], f);
        f(@[arg_pattern])
    };
    xx.loc = a.loc;
    xx
}

fn new($classname: Str) id(classname) #generic = {
    it := @objc init(@objc cls(classname).alloc());
    @debug_assert(!it.is_nil(), "new % failed", classname);
    it
}

// TODO: collect all the strings passed to this at comptime and load 
//       all the classes at startup so you don't have to check every time 
//       and don't have to worry about races. 
fn cls($classname: Str) ObjCClass = {
    cache :: @static(ObjCClass) zeroed(ObjCClass);
    // TODO: This is not getting deduplicated properly? :FUCKED
    //       but it's also not one per callsite.     NSPasteboard,NSPasteboard are there twice
    //::@println("% :: @import_class {\n};", classname);  // :bindings
    if bit_cast_unchecked(ObjCClass, i64, cache[]) == 0 {
        cache[] = objc_getClass(::classname.sym().c_str());
        @debug_assert(!cache[]._.is_null(), "class % does not exist", classname);
    }
    cache[]
}

// TODO: this being $ is a notable compile time cost somehow
fn SEL($name: CStr) ObjCSelector = {
    //sel_getUid(name)
    
    cache := @static(ObjCSelector);
    if bit_cast_unchecked(ObjCSelector, i64, cache[]) == 0 {
        cache[] = sel_getUid(name); // this won't be null even if the selector was never registered
    }
    cache[]
}

// @objc_set(self) (name = val, ...); where self: ObjCId; -> void; => @objc self.setName(val);
fn objc_set(self: FatExpr, pat: FatExpr) FatExpr #macro = as_var self { self |
    @debug_assert(pat.expr&.is(.StructLiteralP));
    body := @{};
    each pat.expr.StructLiteralP.bindings& { b |
        b.default = compile_ast(b.default);
        name := b.ident().unwrap();
        sel  := objc_property_name_to_selector(name).c_str();
        arg  := Ty(ObjCId, ObjCSelector, b.default.ty);
        body = @{
            @[body];
            // No need to choose_objc_dispatcher() here because setters always return void. 
            // but you still need to be mindful of :ADistinctionWithoutADifference lest you call the wrong function. 
            f: rawptr = objc_msgSend;
            f := assume_types_fn(@[@literal arg], void, f);
            f(@[self], SEL(@[@literal sel]), @[b.default]);
        };
    };
    body
};

objc_property_name_to_selector :: fn(name: Symbol) Symbol = {
    sel := u8.list(temp());
    sel&.push_all("set");
    name := name.str(); // immutable!!
    sel&.push(@if(name[0] >= 97 && name[0] <= 122, name[0] - 32, name[0]));  // to upper
    sel&.push_all(name.rest(1));
    sel&.push_all(":");
    sel.items().sym()
};

// WHY IS THIS SO FUCKING DIFFICULT BUT EVERYTHING ELSE WAS SO NORMAL ?? am i missing something? 
// https://clang.llvm.org/docs/Block-ABI-Apple.html
fn new_global_block(a: Alloc, userdata: rawptr, callee: rawptr) *Block_literal_1 = {
    b := a.box_zeroed(Block_literal_1);
    d := a.box_zeroed(Block_literal_1.Desc);
    d.size = size_of(Block_literal_1);
    b.descriptor = d;
    b.userdata = userdata;
    b.invoke = callee;
    b.flags = 0b0_101000_0000000000000000000000;  // BLOCK_HAS_SIGNATURE|BLOCK_IS_GLOBAL
    // runtime for objective c blocks is in libsystem not libobjc
    
    b.isa = @import_symbol("_NSConcreteGlobalBlock", "libc");
    d.signature = "@:@";
    b
}

Block_literal_1 :: @struct {
    isa: rawptr;
    flags: i32;
    reserved: i32;
    invoke: rawptr;
    descriptor: *Desc;
    userdata: rawptr;
    
    Desc :: @rec @struct {
        reserved := 0;
        size: i64;
        copy_helper: rawptr;
        dispose_helper: rawptr;
        signature: CStr;
    };
};

//
// See @/graphics/macos/app.fr for example usage. 
//
// Provide some constant declarations to define the inheritance hierarchy. 
// - EXTENDS :: "NSObject";  // required
// - IMPLEMENTS :: @const_slice("WhateverProtocol");  // optional
// 
// Constant function declarations in the scope of `def` will become methods in the new class. 
// - parameter names matter because they're used to create the selector strings 
// - a parameter of type ObjCSelector is inserted automatically (because the 
//   runtime passes one) so your function declaration stays looking like it would in objc. 
//
// TODO: non-hacky ivars
// 
fn register_objc_class($def: Type) ObjCClass = {
    spec :: @static(ObjcClassReflect) fill_objc_reflect(def);
    register_objc_class_outlined(spec)
}

ObjcClassReflect :: @struct {
    name: CStr;
    methods: []ObjcMethodReflect;
    protocols: []Str;
    extends: CStr;
};
ObjcMethodReflect :: @struct(callable: rawptr, selector: CStr);

// Speed doesn't matter since this only runs at startup 
// so avoid code bloat by not specializing this code for each class. 
fn register_objc_class_outlined(spec: *ObjcClassReflect) ObjCClass = {
    prev := objc_getClass(spec.name);
    @debug_assert(prev._.is_null(), "tried to redeclare class %", spec.name);
    
    super := objc_getClass(spec.extends);
    @debug_assert(!super._.is_null(), "undeclared class % (super for %)", spec.extends, spec.name);
    class := objc_allocateClassPair(super, spec.name, 0);
    @debug_assert(!class._.is_null());
    
    for spec.protocols { it |
        p := objc_getProtocol(@fmt_cstr("%", it));
        @debug_assert(!p._.is_null(), "undeclared protocol %", it);
        class_addProtocol(class, p);
    };
    
    for spec.methods { it |
        // TODO: does the type string (last arg) ever matter? 
        //       maybe it's just fine for me because I'm always implementing 
        //       protocols so it already knows what the types are? 
        //       magic words: "objective c type encoding"
        class_addMethod(class, sel_getUid(it.selector), it.callable, "");
    };
    
    // TODO: reflect to ask for this instead of hardcoding. 
    //       the normal thing would be you just have the first field 
    //       be your super class and then you can offset to your own ivars directly 
    //       without going through the runtime but i think you're not supposed to 
    //       assume that the size of apple's classes is stable so you can support  
    //       multiple versions of macos without recompiling. 
    // must be before register()
    class_addIvar(class, "franca_sapp", 8, 3, "q"); 
    
    objc_registerClassPair(class);
    class
}

// outlined to avoid recompiling for every $def
fn fill_objc_reflect(def: Type) ObjcClassReflect #fold = {
    #use("@/compiler/ast_external.fr");  // TODO: putting this :HERE breaks var resolution :CompilerBug 
    ::?[]Str;
    @debug_assert_eq(size_of(def), 0, "TODO: use runtime fields as ivars");
    s := Type.scope_of(def);
    (
        // TODO: maybe you should just pass this in because relying on TypeMeta.inferred_name
        //       is kinda sketchy but also it's really annoying to type everything twice. 
        name = def.typename().c_str(), 
        extends = {
            // TODO: string literal is supposed to coerce to CStr :CompilerBug
            s := get_constant(Str, s, @symbol EXTENDS) 
                || @panic("objc class % must provide super class as a constant like `EXTENDS :: \"NSObject\"`");
            s.sym().c_str()
        },
        // TODO: why does this work as []CStr but that ^ doesn't? ... it doesn't super work tho, it seems to lose the terminator? 
        protocols = get_constant([]Str, s, @symbol IMPLEMENTS) || {
            @assert(get_constant(s, @symbol IMPLEMENTS).is_none(), "type error for objc IMPLEMENTS (want []Str)");
            empty()
        },
        methods = {
            names := get_constants(s);
            methods := ObjcMethodReflect.list(names.len, ast_alloc());
            for names { name |
                // TODO: this returns Self (a type constant) as well :FUCKED :Compiler
                //       it's just based on size not a real type check
                @if(name != @symbol Self)
                if get_constant(FuncId, s, name) { fid |
                    // resolve_body=true so it doesn't get confused when we replace it 
                    // for debugging :InstrumentObjc
                    func := get_function_ast(fid, false, true, false, false);
                    sel := sel_from_params(name.str(), func.arg.bindings.items(), false).c_str();
                    // the runtime passes you the selector as the second argument,
                    // (to avoid shifting all the arguments to objc_msgSend) 
                    // which is useless because you already know the selector since  
                    // it's the one you registered for. so i add a fake parameter 
                    // to just discard it for you. 
                    {
                        @debug_assert(func.finished_arg.is_none());
                        @debug_assert(!func.get_flag(.MadeVarsForRuntimeArgs));
                        // TODO: check that you only try to do this once
                        //       (but the assertion will fire if you do since we compile below)
                        b: Binding = (
                            name = (Ident = @symbol _SEL),
                            ty = (Finished = ObjCSelector),
                            default = binding_missing_default(func.loc),
                            kind = .Var,
                            nullable_tag = zeroed(*Annotations),
                        );
                        func.arg.bindings&.insert(1, b, ast_alloc());
                    };
                    
                    // TODO: get_jitted_ptr should set this 
                    func.set_flag(.TookPointerValue);
                    
                    // TODO: just get_constant again with rawptr should coerce :CompilerBug
                    c := current_compiler_context();
                    callable := c.get_jitted(fid); // get_constant(rawptr, s, name).unwrap();
                    push(methods&, (selector = sel, callable = callable));
                }; 
            };
            methods.items()
        },
    )
}

fn sel_from_params(name: Str, args: []Binding, is_static: bool) Symbol = {
    sel := u8.list(temp());
    sel&.push_all(name);
    // Note: we don't expect people to have a `sel: ObjCSelector` 
    //       parameter, we insert that later. 
    if args.len > int(!is_static) {  // self, ... 
        sel&.push_all(":");
    }
    if args.len > 1 + int(!is_static) {
        // grab the rest based on parameter names
        each args.rest(1 + int(!is_static)) { it |
            // :HERE
            sel&.push_all(it.name.unwrap().str());
            sel&.push_all(":");
        }
    };
    
    sel.items().sym()
};

// See @/graphics/macos/frameworks.fr for example usage. 
// These are only for imports. Use register_objc_class() instead to declare your own new classes. 
fn class(name: FatExpr, arg: FatExpr) FatExpr #macro = import_objc(name, arg, false);
fn protocol(name: FatExpr, arg: FatExpr) FatExpr #macro = import_objc(name, arg, true);

// This declares the variable of the class name but does not expand the definitions yet until the class is referenced. 
// 
// It would be nicer it it were used as `name :: @class {` instead of `@class(name) {`
// and then just had import_objc_value() here instead of an extra indirection, 
// but doing it this way makes sure that you get the right thing from typename(), 
// instead of hoping the compiler's in a good mood. 
fn import_objc(name: FatExpr, arg: FatExpr, is_protocol: bool) FatExpr = {
    @ct_assert(arg.expr&.is(.Block), arg.loc, "expected Block for objc import");
    name := name&.ident().unwrap();
    S :: import("@/graphics/macos/frameworks.fr");
    c := current_compiler_context();
    
    c'vtable'add_expr_to_scope(c.data, S, name, @{ @expand import_objc_value(@[@literal name], @[@literal arg], @[@literal is_protocol]) });
    @{}
}

// This declares all the overload sets but does not produce thier implementation until one gets called. 
fn import_objc_value(classname: Symbol, arg: FatExpr, is_protocol: bool) FatExpr = {
    #use("@/compiler/ast_external.fr");
    // TODO: fill in CLASS at startup somehow
    // TODO: without _HACK you don't get type checking.   :Compiler
    //       Named has to pass through because it's also used for @rec
    T := const_eval(Type)(@{ @struct(_: ObjCId, _HACK :: @[@literal classname], CLASS :: @static(ObjCClass)) });
    T := intern_type(Named = (T, classname));
    s := Type.scope_of(T);
    loc := arg.loc;
    
    synthesize_func :: fn(func: *Func, name: Symbol, is_static: bool) => {
        fid := c.intern_func(func);
        func := c.get_function(fid);  // TODO: footgun. it looks like it would stay valid since you pass a pointer. 
        func.body = (Normal = @{ @expand objc_method_import_body(@[@literal T], @[@literal fid], @[@literal is_static]) });
        if is_static {
            c.add_to_scope(s, name, FuncId, fid);
        } else {
            // namespaced via first parameter being a unique type
            os := get_or_create_overloads(name, TOP_LEVEL_SCOPE, func.loc);
            add_to_overload_set(os, fid);
        };
    };
    
    c := current_compiler_context();
    each arg.expr.Block.body { stmt |
        @match(stmt.stmt&) {
            fn Decl(b) => {
                name := b.name.unwrap();
                if b[].get_default() { value |
                    @ct_assert(b.kind == .Const, value.loc, "imported objc property cannot have a default value");
                    @switch(name) {
                        @case(@symbol EXTENDS) => {
                            // TODO: subtyping
                        }
                        @case(@symbol IMPLEMENTS) => {
                            // TODO: subtyping
                        }
                        @default => {
                            // it's a method
                            @ct_assert(value.expr&.is(.Closure), value.loc, "expected function in objc import block");
                            ::tagged(FuncImpl);
                            func      := value.expr.Closure;
                            is_static := func.annotations&.items().contains(fn(it) => it.name == @symbol static);
                            pars      := func.arg.bindings&;
                            has_self  := pars.len > 0 && !pars[0].ty&.is(.Finished) && pars[0].name.unwrap() == @symbol self;
                            @ct_assert(func.body&.is(.Empty), value.loc, "function in objc import block cannot have an implementation");
                            @ct_assert(is_static == !has_self, value.loc, "% explicit untyped 'self' parameter in %method import", @if(is_static, "illegal", "expected"), @if(is_static, "static/class ", ""));
                            
                            if !is_static {
                                // insert a type annotation for the 'self' parameter
                                pars[0].ty = (Finished = T);
                            };
                            synthesize_func(func, name, is_static);
                        };
                    };
                } else {
                    // it's a property. create a getter/setter
                    annotations := @if(!b.nullable_tag.is_null(), b.nullable_tag.items(), empty());
                    is_static   := annotations.contains(fn(it) => it.name == @symbol static);
                    is_readonly := annotations.contains(fn(it) => it.name == @symbol readonly);

                    val_type := b.ty; // TODO: don't duplicate this; it might have side effects
                    par_self: Binding = (name = (Ident = @symbol self), ty = (Finished = T), kind = .Var, default = binding_missing_default(loc), nullable_tag = zeroed(*Annotations));
                    par_val: Binding = (name = (Ident = @symbol value), ty = val_type, kind = .Var, default = binding_missing_default(loc), nullable_tag = zeroed(*Annotations));
                   
                    // :WhatScope i don't remember if this is the parent or a new one
                    // TODO: expose new_scope() ? :Compiler
                    
                    // all properties need a getter
                    pars := @if(is_static, @as([]Binding) empty(), @slice(par_self));
                    func: Func = (  // bleh this is verbose
                        annotations = empty(),
                        callees = empty(),
                        mutual_callees = empty(),
                        var_name = .None,
                        finished_arg = .None,
                        finished_ret = .None,
                        return_var = .None,
                        resolve_scope = Type.scope_of(T),  // :WhatScope 
                        body = .Empty,
                        arg = (bindings = shallow_copy(pars, ast_alloc()).as_raw_list(), loc = loc),
                        ret = val_type,
                        name = name,
                        loc = loc,
                    );
                    synthesize_func(func&, name, is_static);
                    if !is_readonly {
                        // need a setter too
                        name := objc_property_name_to_selector(name).str();  // foo -> setFoo:
                        name := name.slice(0, name.len - 1).sym();  // chop off the colon 
                        pars := @if(is_static, @slice(par_val), @slice(par_self, par_val));
                        func: Func = (  // bleh this is verbose
                            annotations = empty(),
                            callees = empty(),
                            mutual_callees = empty(),
                            var_name = .None,
                            finished_arg = .None,
                            finished_ret = .None,
                            return_var = .None,
                            resolve_scope = Type.scope_of(T),  // :WhatScope
                            body = .Empty,
                            arg = (bindings = shallow_copy(pars, ast_alloc()).as_raw_list(), loc = loc),
                            ret = (Finished = void),
                            name = name,
                            loc = loc,
                        );
                        synthesize_func(func&, name, is_static);
                    }
                };
            }
            fn Noop() => ();
            @default => @panic("unhandled stmt type %", stmt.stmt&.tag());
        };
    };
    last := arg.expr.Block.result;
    @ct_assert(last.ty == void, last.loc, "illegal trailing expression in objc import block");
    
    @literal T
}

// This is outlined so it only runs if you actually try to call the method. 
// I want to do as little work as possible in `import_objc()` so you're not punished 
// for classes with many unused methods. 
fn objc_method_import_body(T: Type, fid: FuncId, is_static: bool) FatExpr = {
    func := get_function_ast(fid, true, false, true, false);
    // TODO: duplication with @objc
    pars := func.arg.bindings&.items();
    f_ty := func.finished_ty().expect("infer type before compile body");
    pars.len -= int(f_ty.arg == void);
    c := current_compiler_context();
    par_types := c.arg_types(f_ty.arg);
    selector := sel_from_params(func.name.str(), pars, is_static).c_str();
    @debug_assert(func.get_flag(.MadeVarsForRuntimeArgs));
    get :: fn(b: *Binding) FatExpr => (expr = (GetVar = b.name.Var), ty = UnknownType, loc = func.loc, done = false);
    
    args := FatExpr.list(pars.len + 1 + int(is_static), ast_alloc());
    arg_types := Type.list(args.maybe_uninit.len, ast_alloc());
    if is_static {
        // TODO: use T.CLASS[] instead but then need to set that at startup
        args&.push(@{ cls(@[@literal T.typename().str()]) });
        arg_types&.push(ObjCClass);
    } else {
        args&.push(get(pars.index(0)));
        arg_types&.push(pars[0].ty.Finished);
    };
    
    args&.push(@{ SEL(@[@literal selector]) });
    arg_types&.push(ObjCSelector);
    
    range(int(!is_static), pars.len) { i | 
        args&.push(get(pars.index(i)));
        arg_types&.push(pars[i].ty.Finished);
    };
    
    callee := choose_objc_dispatcher(false, f_ty.ret);
    arg_ty := Ty(arg_types.items());
    arg_pattern: FatExpr = (expr = (Tuple = args.as_raw()), ty = UnknownType, done = false, loc = func.loc);
    xx := @{
        f: rawptr = @[@literal callee];  // :ADistinctionWithoutADifference
        f := assume_types_fn(@[@literal arg_ty], @[@literal f_ty.ret], f);
        f(@[arg_pattern])
    };
    xx.loc = func.loc;
    xx
}
