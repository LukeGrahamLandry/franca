// - We saved (argc, argv) from the entry point (but someone might have changed it in the context).  
// - The memory returned here is shared with other threads. So it's probably a bad plan to mutate it. 
fn cli_args() []CStr = {
    context(DefaultContext)[].cli_arguments
}

// - We saved (envp) from the entry point (but someone might have changed it in the context).  
// - Have to iterate every time you look something up, so if you want multiple you're better off writing the loop yourself. 
// - The memory returned here is shared with other threads. So it's probably a bad plan to mutate it. 
// - fn getenv(name: CStr) CStr #libc;
fn get_environment_variable(name: Str) ?CStr = {
    envp := context(DefaultContext)[].environment_variables;
    while => !envp[].ptr.is_null() {
        if starts_with(envp[], name) && envp[][name.len] == "=".ascii() {
            return(Some = (ptr = envp[].ptr.offset(name.len + 1)));
        };
        envp = envp.offset(1);
    };
    .None
}    

// this one does something os specific that doesn't rely on the program starting through franca_runtime_init
fn query_cli_args() []CStr #target_os = (fn($os) => @match(os){
    fn macos() => {
        argc := _NSGetArgc()[];
        argv := _NSGetArgv()[];
        // Safety: the os wouldn't lie to us... hopefully.
        slice(argv, argc)
    }
    // TODO: uhg, its not ok to allocate here! :slow
    //       if we're gonna be slow we might as well be super slow
    //       but if im committed to doing it this way caller should pass in allocator or i should cache it, or something, idk. 
    fn linux() => {
        slowly_get_cli_args_from_proc_self(page_allocator)  // :Leak
    }
    fn wasip1() => ::panic("TODO: query_cli_args wasi");
});

// TODO: add 'fn int_to_float' so i can return answer in seconds like other lang versions
fn timestamp() i64 = // :TodoLinux 
    clock_ms(MacosLibc.CLOCK_REALTIME);

fn clock_ms(clock_id: i64) i64 = {
    time_spec: TimeSpec = (seconds = 0, nanoseconds = 0);
    clock_gettime(clock_id, time_spec&);
    time_spec.ms()
}

fn get_executable_path(a: Alloc) Str #target_os = (fn($os) => @match(os) {
    fn macos() => {
        size := 0;
        // use this to check the length so we allocate the right amount. 
        _NSGetExecutablePath(u8.ptr_from_int(0), size&);
        buf := a.alloc(u8, size);
        _NSGetExecutablePath(buf.ptr, size&).unwrap();
        buf
    }
    fn linux() => {
        path :: @as(CStr) "/proc/self/exe";
        out: List(u8) = list(128, a);
        loop {
            len := or readlink(path, out.maybe_uninit.ptr, out.maybe_uninit.len) {
                // TODO: return error!!
                panic("error readlink /proc/self/exe I really hope you're using a broken emulator")
            };
            
            if len < out.maybe_uninit.len {
                out.len = len;
                return(out.items());
            } else {
                // we probably didn't have enough room to read the whole file path, try again. 
                out&.reserve(out.maybe_uninit.len);
                // continue();
            }
        }
    }
    fn wasip1() => panic("TODO: get_executable_path on wasi");
});

fn get_working_directory(a: Alloc) List(u8) = {
    out: List(u8) = list(512, a);
    s := or getcwd(out.maybe_uninit.ptr, out.maybe_uninit.len) {
        panic("failed to get_working_directory") // TODO: return error?
    };
    out.len = s.slow_len();
    out
}

// Calling `query_current_{arch, os}` at comptime is probably wrong because 
// you'll observe the host environment not the target. 

// surely we don't need to call uname... right... right...?
fn query_current_os() Os #target_os = (fn($os) => os);

// TODO: this is silly. it should be the same sort of thing as #target_os where we only give the right path to the backend. 
//       before now we can only detect arch when doing an asm function. 

fn query_current_arch() Arch #aarch64 #asm #c_call = (
    movz(.X64, x0, 0x0000, .Left0), 
    ret(), 
);

#x86_bytes #c_call #asm
fn query_current_arch() Arch = (fn(out) = @asm_x64(
    encode_imm(PrimaryOp.MovImm32, X86Reg.rax, 1), 
    PrimaryOp.Ret
) out);

//
// You must call this function when writting machine code into memory and then trying to execute it (simply mprotect-ing it to Exec is not enough)!
// Some ISAs don't guarentee coherency between instruction and data caches.  
//
// x86 doesn't this. TODO: what about riscv?
// This fixes 'illegal hardware instruction'.
// sleep(Duration::from_millis(1)) also works (in debug mode). That's really cool, it gives it time to update the other cache because instructions and data are seperate?!
// Especially fun becuase if you run it in lldb so you break on the error and disassemble... you get perfectly valid instructions because it reads the data cache!
//
// - https://community.arm.com/arm-community-blogs/b/architectures-and-processors-blog/posts/caches-and-self-modifying-code
// - https://stackoverflow.com/questions/35741814/how-does-builtin-clear-cache-work
// - https://stackoverflow.com/questions/10522043/arm-clear-cache-equivalent-for-ios-devices
// - https://github.com/llvm/llvm-project/blob/main/compiler-rt/lib/builtins/clear_cache.c
// - https://github.com/apple/darwin-libplatform/blob/main/src/cachecontrol/arm64/cache.s
// - https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man3/sys_icache_invalidate.3.htmls
//
// :ClearCacheHack
// Libcs for x86 might not have __clear_cache if you try to get it from dlopen/dlsym,
// TODO: implement #target_arch and use that here
//
fn clear_instruction_cache(beg: rawptr, end: rawptr) void #target_os = (fn($os) => @match(os) {
    // apple's x64 libc gives you this too so it's fine
    fn macos()  => __clear_cache(beg, end);  // I think this is the same as sys_icache_invalidate for apple?
    fn linux()  => ();  // for now i only do x64 linux and glibc won't give me a fake __clear_cache TODO: arm
    fn wasip1() => ();  // should compile error? makes no sense here.
});

fn clear_instruction_cache(beg: rawptr, len: i64) void = 
    clear_instruction_cache(beg, beg.offset(len));

// :JitMemProtect
fn apple_thread_jit_write_protect(executable_on_current_thread: bool) void #target_os = (fn($os) => @match(os) {
    fn macos()  => pthread_jit_write_protect_np(executable_on_current_thread);  
    fn linux()  => ();  // they let you have WX memory so this isn't a thing
    fn wasip1() => ();  // should compile error? makes no sense here.
});
