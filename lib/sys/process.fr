// Cached on start up. 
fn cli_args() []CStr = 
    context(DefaultContext)[].cli_arguments;

// this one does something os specific that doesn't rely on the program starting through franca_runtime_init
fn query_cli_args() []CStr #target_os = (fn($os) => @match(os){
    fn macos() => {
        argc := _NSGetArgc()[];
        argv := _NSGetArgv()[];
        // Safety: the os wouldn't lie to us... hopefully.
        slice(argv, argc)
    }
    // TODO: uhg, its not ok to allocate here! :slow
    //       if we're gonna be slow we might as well be super slow
    //       but if im committed to doing it this way caller should pass in allocator or i should cache it, or something, idk. 
    fn linux() => {
        slowly_get_cli_args_from_proc_self(page_allocator)  // :Leak
    }
});

// TODO: add 'fn int_to_float' so i can return answer in seconds like other lang versions
fn timestamp() i64 = {
    CLOCK_REALTIME :: 0;
    time_spec: TimeSpec = (seconds = 0, nanoseconds = 0);
    clock_gettime(CLOCK_REALTIME, time_spec&);
    time_spec.seconds.mul(1000).add(time_spec.nanoseconds.div(NS_TO_MS))
}

fn get_executable_path(a: Alloc) Str #target_os = (fn($os) => @match(os){
    fn macos() => {
        size := 0;
        // use this to check the length so we allocate the right amount. 
        _NSGetExecutablePath(u8.ptr_from_int(0), size&);
        buf := a.alloc(u8, size);
        _NSGetExecutablePath(buf.ptr, size&).unwrap();
        buf
    }
    fn linux() => {
        path :: "/proc/self/exe".sym().c_str();
        out: List(u8) = list(128, a);
        loop {
            len := or readlink(path, out.maybe_uninit) {
                // TODO: return error!!
                panic("error readlink /proc/self/exe I really hope you're using a broken emulator")
            };
            
            if len < out.maybe_uninit.len {
                out.len = len;
                return(out.items());
            } else {
                // we probably didn't have enough room to read the whole file path, try again. 
                out&.reserve(out.maybe_uninit.len);
                // continue();
            }
        }
    }
});

fn get_working_directory(a: Alloc) List(u8) = {
    out: List(u8) = list(512, a);
    s := getcwd(out.maybe_uninit).unwrap(); // TODO: return error?
    out.len = s.slow_len();
    out
}

// TODO: look at the asm for this. it's insane. need to make zeroed() less stupid. :SLOW 
// This asks the current operating system whats up. 
// If you run this at comptime, you get the arch you're compiling on! which might not be the target since we support cross compiling!
fn query_current_arch() ?Arch #target_os = (fn($os) => {
    data := LibcType(os).Utsname.zeroed();
    data&.uname().or(=> return(.None));
    machine: CStr = (ptr = data.machine&.as_ptr());
    machine.uname_machine_to_arch()
});

// surely we don't need to call uname... right... right...?
fn query_current_os() Os #target_os = (fn($os) => os);

fn uname_machine_to_arch(machine: CStr) ?Arch = {
    machine := machine.str();
    if(machine == "x86_64", => return(Some = .x86_64));
    if(machine == "arm64", => return(Some = .aarch64));
    .None
}

//
// You must call this function when writting machine code into memory and then trying to execute it (simply mprotect-ing it to Exec is not enough)!
// Some ISAs don't guarentee coherency between instruction and data caches.  
//
// x86 doesn't this. TODO: what about riscv?
// This fixes 'illegal hardware instruction'.
// sleep(Duration::from_millis(1)) also works (in debug mode). That's really cool, it gives it time to update the other cache because instructions and data are seperate?!
// Especially fun becuase if you run it in lldb so you break on the error and disassemble... you get perfectly valid instructions because it reads the data cache!
//
// - https://community.arm.com/arm-community-blogs/b/architectures-and-processors-blog/posts/caches-and-self-modifying-code
// - https://stackoverflow.com/questions/35741814/how-does-builtin-clear-cache-work
// - https://stackoverflow.com/questions/10522043/arm-clear-cache-equivalent-for-ios-devices
// - https://github.com/llvm/llvm-project/blob/main/compiler-rt/lib/builtins/clear_cache.c
// - https://github.com/apple/darwin-libplatform/blob/main/src/cachecontrol/arm64/cache.s
// - https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man3/sys_icache_invalidate.3.htmls
//
// :ClearCacheHack
// Libcs for x86 might not have __clear_cache if you try to get it from dlopen/dlsym,
// but it seems the linker fixes it and gives you a static noop copy on those targets (even if you don't ask for -static)
// TODO: implement #target_arch and use that here instead of leaning on someone else to do the right thing. 
//
fn clear_instruction_cache(beg: rawptr, end: rawptr) void = {
    __clear_cache(beg, end);
}
