
read :: @S("read") fn(fd: Fd, buf: *u8, size: i64) i64Result #weak #libc #syscall(63, 0, 3);
write :: @S("write") fn(fd: Fd, buf: *u8, size: i64) i64Result #weak #libc #syscall(64, 1, 4);
close :: @S("close") fn(fd: Fd) voidResult #libc #syscall(57, 3, 6);
lseek :: @S("lseek") fn(fd: Fd, offset: i64, whence: Whence) i64Result #libc #syscall(62, 8, 199);
remove :: fn(filepath: CStr) voidResult #libc;
// TODO: mode is a bit flag of AccessMode
access :: @S("access") fn(pathname: CStr, mode: i64) voidResult #libc #syscall(NOSYS, 21, 33); // TODO: bit flags
// TODO: on linux the syscall version might be prefixed by "(unreachable)" which should be an error or something
getcwd :: @S("getcwd") fn(ptr: *u8, len: i64) CStrResult #weak #libc #syscall(17, 79, NOSYS);
readlink :: @S("readlink") fn(pathname: CStr, ptr: *u8, len: i64) i64Result #libc #syscall(NOSYS, 89, 58); 
fchmod :: @S("fchmod") fn(fd: Fd, mode: FileMode) voidResult #libc #syscall(52, 91, 124);

mmap :: @S("mmap") fn(addr: rawptr, len: i64, prot: i64, flags: i64, fd: Fd, offset: i64) i64 #libc #syscall(222, 9, 197);
munmap :: @S("munmap") fn(addr: rawptr, len: i64) voidResult #libc #syscall(215, 11, 73);
mprotect :: @S("mprotect") fn(addr: rawptr, len: i64, prot: i64) voidResult #libc #syscall(226, 10, 74);

// linux: exit_group, not exit. exit just ends the calling thread. 
exit :: @S("exit") fn(status: i64) Never #libc #syscall(94, 231, 1);

nanosleep :: @S("nanosleep") fn(duration: *TimeSpec, nullable_remainder_out: *TimeSpec) voidResult #libc #syscall(101, 35, NOSYS);

dup2 :: @S("dup2") fn(oldfd: Fd, newfd: Fd) voidResult #libc #syscall(NOSYS, 33, 90);
dup3 :: @S("dup3") fn(oldfd: Fd, newfd: Fd, flags: i32) voidResult #libc #syscall(24, 292, NOSYS);
chdir :: @S("chdir") fn(path: CStr) voidResult #weak #libc #syscall(49, 80, 12);

renameat :: @S("renameat") fn(old_dir: Fd, old: CStr, new_dir: Fd, new: CStr) voidResult #libc #syscall(38, 264, 465);
clock_gettime :: @S("clock_gettime") fn(clock_id: i64, time_spec: *TimeSpec) void #libc #syscall(113, 228, NOSYS); // TODO: macos syscall

// not #libc because that's variadic, which we can do but is a bit annoying
// TODO: maybe that's the wrong choice for apple
openat :: @S("openat") fn(dirfd: Fd, pathname: CStr, flags: i64, mode: i64) i32 #syscall(56, 257, 463);
opendir :: fn(path: CStr) i64 #weak #libc;
@"opendir$INODE64" :: fn(path: CStr) i64 #weak #libc;
readdir :: fn(dir: rawptr) i64 #libc;
@"readdir$INODE64" :: fn(dir: rawptr) i64 #weak #libc;
mkdirat :: @S("mkdirat") fn(parent: Fd, path: CStr, mode: i64) i64 #libc #syscall(34, 258, 475);

SysStat :: @union(l: Linux.Stat, m: Macos.Stat);
fstatat :: @S("fstatat") fn(parent: Fd, path: CStr, out: *SysStat, flags: i64) i64 #syscall(79, 262, 470) #libc;
@"fstatat$INODE64" :: fn(parent: Fd, path: CStr, out: *SysStat, flags: i64) i64 #weak #libc;

// https://github.com/apple/darwin-xnu/blob/main/bsd/kern/sys_ulock.c
ulock_wait :: @S("ulock_wait") fn(op: ULockFlags, addr: *u32, only_wait_if_value_is: u32, timeout_ns_zero_is_forever: u32) i32 #syscall(NOSYS, NOSYS, 515);
ulock_wake :: @S("ulock_wake") fn(op: ULockFlags, addr: *u32, how_many_to_wake: u32) i32 #syscall(NOSYS, NOSYS, 516);
ULockFlags :: @(import("@/lib/bit_fields.fr").bit_fields)(
    op         := 8,
    wake_flags := 8,
    wait_flags := 8,
    no_errno   := 1,
    _          := 7,
);

// https://www.man7.org/linux/man-pages/man2/futex.2.html
sys_futex :: @S("sys_futex") fn(addr: *u32, futex_op: u32, val: u32, timeout: *TimeSpec) i64 #syscall(98, 202, NOSYS);

exit_thread :: @S("exit_thread") fn(status: i64) Never #syscall(93, 60, NOSYS);
clone :: @S("clone") fn(flags: i64, stack: *u8, p: i64, c: i64, t: i64) pid_t #syscall(220, 56, NOSYS) = {
    // HACK: this needs a body so it gets a return label so it can be inlined because the new thread can't return on its fresh stack
};
clone3 :: @S("clone3") fn(arg: *Clone3, size: i64) pid_t #syscall(435, 435, NOSYS) = {
    // HACK: this needs a body so it gets a return label so it can be inlined because the new thread can't return on its fresh stack
};
Clone3 :: @struct {
    flags: i64;
    pidfd: *i32;
    child_tid: *pid_t;
    parent_tid: *pid_t;
    exit_signal: i64;
    stack: []u8;
    tls: i64;
    set_tid: []pid_t;
    cgroup: i64;
};

Macos :: import("@/lib/sys/macos.fr");
Linux :: import("@/lib/sys/linux.fr");

S :: fn(name: FatExpr, fid: FatExpr) FatExpr #macro = {
    name := const_eval(Str)(name);
    fid := const_eval(FuncId)(fid);
    func := get_function_ast(fid, true, true, true, false);
    func.name = name.sym();

    @if(IS_BOOTSTRAPPING) {
        // #syscall used to be a magic builtin thing
        func.body = .Empty; // undo clone hack on old compilers where the syscall shim will be small enough to inline on its own
        return(@literal fid);
    };
    
    // TODO: factor out and share with objective_c.fr/objc_method_import_body()
    pars := func.arg.bindings&.items();
    args := FatExpr.list(pars.len + 1, ast_alloc());
    args&.push(@literal fid);
    get :: fn(b: *Binding) FatExpr => (expr = (GetVar = b.name.Var), ty = b.ty.Finished, loc = func.loc, done = false);
    each pars { it |
        args&.push(get(it));
    };

    args := @as(FatExpr) (expr = (Tuple = args.as_raw()), ty = UnknownType, done = false, loc = func.loc);
    func.body = (Normal = @{
        result := @syscall(@[args]);
        result
    });
    func.unset_flag(.BodyIsSpecial);
    
    // hack!
    if name == "clone" || name == "clone3" {
        func.set_flag(.Inline);
    };
    
    @literal fid
};

// 
// usage: 
//      @syscall(func, arg0, ... argn);
//      func :: fn(arg0: A0, ..., argn: An) R #weak #libc #syscall(linux-arm64, linux-amd64, macos); 
// this will choose whether to call imported `func` from libc or make a syscall, 
// based on (prefer_syscalls, current_arch, current_os) ***AT RUNTIME***, 
// so all branches are always compiled and you don't have to re-sema for each target. 
//
// TODO: need to either do the SysResult wrapping here or return which 
//       implementation was used so you know if you need to check errno. 
// 
// TODO: this is very hacky for now. still deciding how i want it to work. 
// 
//       i think a better system might be to just do the syscall instruction with AsmFunction instead of doing it in the backend. 
//       my original thought was you want to expose that so you could write a frontend for another language without depending 
//       on the franca library at runtime and still be able to do syscalls without caring about the arch calling convention. 
//       but since you need different numbers/struct layoyt anyway, it's such a pain in the ass to do it right that the extra 
//       help the backend gives you is kinda just a drop in the bucket, why bother. 
//       
//       im not sure if it's better to treat this call as a macro which references the function declaration just 
//       as a data structure to let you type in name+numbers+signeture in one place, or commit all the way and 
//       have it generate the wrapper implementation like AsmFunction() does. or commit more and have the syscall numbers 
//       entirely as data and generate the whole scope. but it can't be exactly like AsmFunction because the inferred name 
//       won't be set yet. can make you write it redundantly in the overload set slot tho. 
//       
//       special casing inode64_on_applex8664 here is kinda dumb. maybe go back to #link_rename, just implemented here instead of in sema? 
//       because those DIR functions aren't even direct syscall wrappers so pretending they're syscalls that i just happen to 
//       always make through libc is kinda dumb. 
//       
//       since the premise is syscalls are slow anyway, it probably makes more sense to just have syscall8 and pass in all the arguments 
//       and numbers and have it dispatch. maybe i don't want to be handing out arbitrary syscall gadgets. 
//
fn syscall(arg: FatExpr) FatExpr #macro = {
    loc := arg.loc;
    arg := arg&.items();
    
    fid := arg[0]; arg := arg.rest(1);
    fid := const_eval(FuncId)(fid);
    func := get_function_ast(fid, true, true, true, false);

    libc := false;
    can_syscall := false;
    sys := zeroed Array(i64, 3);
    inode64_on_applex8664 := false;
    each func.annotations { it |
        if it.name == (@symbol libc) {
            libc = true;
        };
        if it.name == (@symbol inode64_on_applex8664) {
            inode64_on_applex8664 = true;
        };
        if it.name == (@symbol syscall) {
            can_syscall = true;
            sys = const_eval(Array(i64, 3))(it.args);
            if sys&[2] != NOSYS {
                sys&[2] += 0x2000000;  // macos
            }
        };
    };
    
    //other_fid := fid;
    //if inode64_on_applex8664 {
    //    println("TODO: this doesn't work because this way of duplication the function is illegal");
    // /// also tfmt calls exit()
    //    fr := current_compiler_context();
    //    // this is sketchy relies on DyanamicImport.name not being set yet 
    //    func2 := func[];
    //    func2.name = sym(@tfmt("%$INODE64", func.name.str()));
    //    other_fid = fr'vtable'intern_func(fr.data, func2&);
    //};
    
    // TODO: this is super sketchy it relies on no instructions ending up between each `O.arg`
    inst := FatExpr.list(arg.len + 1, ast_alloc());
    each arg { e |
        e[] = compile_ast(e[]);
        op_l :: fn(a: ~T) void #ir(.arg, .Kl) #where;
        op_w :: fn(a: ~T) void #ir(.arg, .Kw) #where;
        op := @if(e.ty.size_of() == 8, op_l, op_w);
        inst&.push(@{
            @[@literal op](@[e[]]);
        });
    };
    
    op :: fn(a: i64) i64 #ir(.syscall, .Kl);
    ::import("@/lib/sys/process.fr");
    msg :: "unimplemented syscall";
    
    if IS_BOOTSTRAPPING {
        can_syscall = false;
    };

    // TODO: this duplicates the expressions (3 times)! that's a crime! don't do that!!
    arg_expr := @as(FatExpr) (expr = (Tuple = arg.as_raw_list()), ty = UnknownType, done = false, loc = loc);
    if arg.len == 1 {
        arg_expr = arg[0];
    };
    
    arg, ret := (func.finished_arg.unwrap(), func.finished_ret.unwrap());
    // can't just call fid now that syscall.S is replacing the function body with ourself
    callee: FatExpr = (
        expr = (DataSymbol = (name = func.name, lib = @symbol libc, comptime = 0, weak = true)),
        loc = loc, ty = FnPtr(arg, ret), done = false,
    );
    
    @{
        want_syscall := prefer_syscalls() || @[@literal !libc];
        @if(want_syscall, {
            @if(@[@literal !can_syscall]) panic(msg);
            numbers := @[@literal sys];
            sys_index := @if(query_current_os() == .macos, 2, @if(query_current_arch() == .aarch64, 0, 1));
            n := numbers&[sys_index];
            @if(n == NOSYS) panic(msg);
            @[@as(FatExpr) (expr = (Tuple = inst.as_raw()), ty = UnknownType, done = false, loc = loc)];
            result := op(n);
            bit_cast_unchecked(i64, @[@literal ret], result)
        }, {
            @if(@[@literal !libc]) panic(msg);
        
            //apple_x8664 := query_current_os() == .macos && query_current_arch() == .x86_64;
            //@if(@if(@[@literal inode64_on_applex8664], apple_x8664, false),
                //@[@literal other_fid](@[arg_expr]),
                @[callee](@[arg_expr])
            //)
        })
    }
}

fn prefer_syscalls() bool = {
    c := context(DefaultContext);
    !is_linking_libc() || c.prefer_syscalls 
}
