
// TODO: i think this is an ioctl
Terminos :: @struct(iflag: u64, oflag: u64, cflag: u64, lflag: u64, cc: Array(u8, 20), ispeed: u64, ospeed: u64);
fn tcgetattr(fd: Fd, out: *Terminos) void #libc;
fn tcsetattr(fd: Fd, optional_actions: i64, in: *Terminos) void #libc;
// TODO: :Linux
TermConstants :: @struct(_parsehack: void, $ICANON := 256, $ECHO := 8, $VMIN := 16, $VTIME := 17, $ TCSANOW := 0, $TCSADRAIN := 1);

/// Magic escape sequences you can print. 
/// https://en.wikipedia.org/wiki/ANSI_escape_code
start_other  :: "\x1B[?1049h";
end_other    :: "\x1B[?1049l";
reset        :: "\x1B[2J";
unset_colour :: "\x1B[0m";
set_colour   :: "\x1B[38;2;%;%;%m";  // @fmt(_, _, r, g, b) 0-255
set_cursor   :: "\x1B[%;%H";  // @fmt(_, _, line, col) 

// Get input on keypress immediately (instead of waiting for a whole line until <ENTER>).
start_raw :: fn(fd: Fd) void ={
    t :: TermConstants;
    term := Terminos.zeroed();
    tcgetattr(fd, term&);
    term.lflag = term.lflag.bit_and(t.ICANON.bit_or(t.ECHO).bit_not()); // dont read in lines | dont show what you're typing
    term.cc&[t.VMIN] = 0; // its ok for a read to return nothing
    term.cc&[t.VTIME] = 0; // dont wait at all
    tcsetattr(fd, t.TCSANOW, term&);
};

end_raw :: fn(fd: Fd) void = {
    t :: TermConstants;
    term := Terminos.zeroed();
    tcgetattr(fd, term&);
    term.lflag = term.lflag.bit_or(t.ICANON).bit_or(t.ECHO);
    tcsetattr(fd, t.TCSADRAIN, term&);
};

// TODO: improve this (support arrow keys)
// TODO: if the input spans multiple lines (just by being long) clear those as well. 
// TODO: optional timeout, return error
interactive_read_line :: fn(text: *List(u8)) void = {
    start_raw(STD_IN);
    prompt := ">>> ";

    render_buffer: List(u8) = list(64, temp());
    waiting := 0;
    
    loop {
        continue :: local_return;
        c: u8 = 0;
        len := Syscall'read(STD_IN, c&, 1).unwrap();
        if(len.eq(1)){
            //println(@as(i64) c.zext());
            @switch(c) {
                @case(127) => {  // backspace
                    if text.len > 0 {
                        // since we're printing a shorter string, the terminal will stay showing the last character. 
                        // so write over spaces so we don't show the old thing. 
                        // there's gotta be some ansi escaped thing for clearing a line but i don't care right now. 
                        @fmt(render_buffer&, "\r");
                        range(0, text.len + prompt.len) { _ |
                            render_buffer&.push_all(" ");
                        };
                        print(render_buffer.items());
                        render_buffer&.clear();
                        
                        // now remove a character. 
                        text.len -= 1;
                    };
                };
                @case(27) => {
                    // :TodoShareAnsiSkipLogic
                    // TODO: are some longer or shorter? (yes!)
                    c: u8 = 0;
                    dowhile {
                        Syscall'read(STD_IN, c&, 1).unwrap() == 0
                    }; // skip
                    dowhile {
                        Syscall'read(STD_IN, c&, 1).unwrap() == 0
                    };
                    // TODO: history for when you press the up arrow. 
                    // TODO: move the cursor around when you press left and right. 
                    @switch(c) {
                        @case("A".ascii()) => {
                            
                        };
                        @case("B".ascii()) => {
                            
                        };
                        @case("C".ascii()) => {
                            
                        };
                        @case("D".ascii()) => {
                            
                        };
                        @default => ();
                    };
                };
                @case(10) => {
                    // Pressed enter. 
                    end_raw(STD_IN);
                    return();
                };
                @default => text.push(c);
            };
        };
        @fmt(render_buffer&, "\r");  // take it back now yall
        render_buffer&.push_all(prompt);
        render_buffer&.push_all(text.items());
        print(render_buffer.items());
        
        render_buffer&.clear();
        
        // don't make the terminal program burn cycles redrawing the line if you're not typing. 
        // but also dont make it painful if you paste something. 
        // TODO: just use poll
        if len == 0 {
            waiting = abs(waiting + 1);
            delay := if(waiting > 300, => 200, => 10);
            usleep((delay * 1000).trunc());
        } else {
            waiting = 0;
        };
    };
};