// TODO: better error handling. 
// TODO: use posix_spawnp instead? that makes it easier to return an error to the caller. using fork is a pain. 
// TODO: it doesn't look up the command like a shell does.
fn run_cmd_blocking(path: Str, args: Slice(Str)) bool = {
    pid := fork();
    if pid == 0 {
        exec_cmd(path, args);
    };
    
    status: i32 = 0;
    res := Posix'waitpid(pid, status&, 0) 
        || return(false);
    status == 0
}

fn exec_and_catch(path: Str, args: Slice(Str), alloc: Alloc) Ty(bool, List(u8), List(u8)) = 
    exec_and_catch(path, args, alloc, "");

fn exec_and_catch(path: Str, args: Slice(Str), alloc: Alloc, input: []u8) Ty(bool, List(u8), List(u8)) = {
    cargs := make_args_for_exec(path, args, temp());
    out := u8.list(alloc);
    err := u8.list(alloc);
    ok := @match(sys_capture_exec(cargs)) {
        fn Err(msg) => {
            // TODO: kill the child? 
            err&.push_all(msg);
            report_exec_error(err&, cargs);
            false
        }
        fn Ok(p) => {
            buf := @slice(out&, err&);
            bool.loop() { $break |
                @match(poll(p&, buf, true, input&, true)) {
                    fn Ok(status) => {
                        if status { status |
                            break(status == 0);
                        };
                    }
                    fn Err(msg) => {
                        @fmt(err&, "%", msg);
                        break(false);
                    };
                };
                usleep(1000);  // TODO: this is stupid but i don't want to just spin. blocking poll instead?
            }
        }
    };
    (ok, out, err)
}

fn exec_cmd(path: Str, args: Slice(Str)) Never = {
    cargs := make_args_for_exec(path, args, temp());
    execvp(cargs[0], cargs.ptr);
    // ERROR
    err := u8.list(temp());
    report_exec_error(err&, cargs);
    eprintln(err.items());
    panic("failed to exec!")
}

RunningProcess :: @struct {
    pipes: Array(Fd, 3);  // in, out, err
    pid: i32;
    status: i32;
};

// TODO: let caller set cwd
// TODO: handle sending input to the child process
// TODO: deal with being sent signals while waiting
// TODO: deal with waiting on multiple processes at once
sys_capture_exec :: fn(args: []CStr) Result(RunningProcess, Str) = {
    pipes := zeroed Array(Array(Fd, 2), 3);
    each pipes& { p |
        pipe(p) || return(Err = "libc::pipe() failed");
    };
    @debug_assert(args[args.len - 1].ptr.is_null());
    
    pid := fork();
    if pid == 0 { // Child
        // The important thing is that the child closes it's copy of the write end of its standard-input
        // so when the parent closes its copy too, the child will read it as EOF so a program 
        // that does "while(stdin)" will know it's reached the end and terminate. 
        Syscall'close(pipes&[0]&[1]).unwrap();  // close write end
        Syscall'close(pipes&[1]&[0]).unwrap();  // close read end
        Syscall'close(pipes&[2]&[0]).unwrap();  // "
        
        Syscall'dup2(pipes&[0]&[0], STD_IN)
            || panic("failed to dup2(in)");
        Syscall'dup2(pipes&[1]&[1], STD_OUT)
            || panic("failed to dup2(out)");
        Syscall'dup2(pipes&[2]&[1], STD_ERR)
            || panic("failed to dup2(err)");
        
        // HACK HACK HACK HACK
        // I AM BAD AT MY JOB
        // I AM BAD AT MY JOB
        // I AM BAD AT MY JOB
        // I AM BAD AT MY JOB
        i := 0;
        loop {
            never := execvp(args[0], args.ptr);
            if query_current_os() != .linux || Posix'errno()[] != 26 || i >= 10 {
                @eprintln("libc::execvp() failed!");
                err := u8.list(temp());
                @fmt(err&, "% %\n", never, Posix'errno()[]);
                report_exec_error(err&, args);
                eprintln(err.items());
                Syscall'exit(1);
            };
            usleep(10000);
            i += 1;
        }
    };
    // else: Parent

    Syscall'close(pipes&[0]&[0]).unwrap();  // close the read end
    Syscall'close(pipes&[1]&[1]).unwrap();  // close the write end
    Syscall'close(pipes&[2]&[1]).unwrap();  // "
    
    (Ok = (pid = pid, pipes = @array(pipes&[0]&[1], pipes&[1]&[0], pipes&[2]&[0]), status = -1))
};

// TODO: allow using a hanging poll for when you're just calling this in a loop to collect everything
//       but need to do the right thing if the process dies while you're polling it so it never writes anything else. 
// This function should be called in a loop! 
// (which exec_and_catch will do for you if you want it to block until all done). 
// 
// buf = (out, err); it's legal for all to be the same list
fn poll(self: *RunningProcess, buf: []*List(u8), realloc: bool, input: *[]u8, last_input: bool) Result(?i32, Str) #use("@/lib/sys/posix.fr") = {
    @debug_assert_eq(buf.len, 2);  // TODO: pass *Array.
    poll_data := @array(@as(pollfd)
        (fd = self.pipes&[0], events = POLL.OUT, revents = 0),
        (fd = self.pipes&[1], events = POLL.IN, revents = 0),
        (fd = self.pipes&[2], events = POLL.IN, revents = 0)
    );
    poll_data := poll_data&.items();
    if input.len == 0 {
        poll_data = poll_data.rest(1);
    };
    
    status: i32 = 0;
    done := @if(self.status == -1, {
        done := waitpid(self.pid, status&, W.NOHANG)
            || return(Err = "libc::wait4 failed");
        if done > 0 {
            self.status = status;
        };
        done
    }, {
        status = self.status;
        self.pid
    });
    
    n := poll(poll_data, 0) || return(Err = "libc::poll() failed");
    
    if done == 0 && n == 0 {
        return(Ok = .None);
    };
    
    if input.len > 0 {
        p := poll_data.index(0);
        if p.revents.bit_and(POLL.OUT) != 0 {
            written := Syscall'write(p.fd, input.ptr, input.len) 
                || return(Err = "libc::write failed");
            input[] = input[].rest(written);
            if input.len == 0 && last_input {  // make it read EOF
                Syscall'write(p.fd, zeroed(*u8), 0); 
                Syscall'close(p.fd)
                    || return(Err = "failed to close input pipe");
                self.pipes&[0].fd = -1;
            };
        };
        poll_data = poll_data.rest(1);
    };
    
    full := false;
    enumerate poll_data { i, p |
        buf := buf[i];
        have_data := p.revents.bit_and(POLL.IN) != 0;
        @if(have_data) dowhile {
            space := buf.maybe_uninit.len - buf.len;
            if realloc && space == 0 {
                buf.reserve(1);
                space = buf.maybe_uninit.len - buf.len;
            };
            len := Syscall'read(p.fd, buf.maybe_uninit.ptr.offset(buf.len), space)
                || return(Err = "libc::read() failed");
            buf.len += len;
            full = full || buf.maybe_uninit.len == buf.len;
            
            // :BigOutputBuffer (see devlog May 9, 2025)
            system_pipe_buffer_capacity :: 65536;
            len == system_pipe_buffer_capacity && len < space
        };
    };
    
    if done != 0 && !full {
        Syscall'close(self.pipes&[0]);
        Syscall'close(self.pipes&[1]);
        Syscall'close(self.pipes&[2]);
        
        return(Ok = (Some = status));
    };
    
    (Ok = .None)
};

make_args_for_exec :: fn(path: Str, args: []Str, a: Alloc) []CStr = {
    cargs := a.alloc_uninit(CStr, args.len + 2);
    i := 0;
    cargs[i] = path.as_cstr(); i += 1;
    for args { it |
        cargs[i] = it.as_cstr(); i += 1;
    };
    cargs[i] = zeroed CStr; i += 1;
    @debug_assert_eq(i, cargs.len);
    cargs
};

report_exec_error :: fn(err: *List(u8), cargs: []CStr) void = {
    @fmt(err, "Failed to exec:\n");
    // don't try to print the null terminator
    for cargs.slice(0, cargs.len - 1) { it |
        @fmt(err, "% ", it);
    };
};
