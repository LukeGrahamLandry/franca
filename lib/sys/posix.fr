// 
// Inconveniences: 
// - Most systems don't expose a stable syscall interface. 
// - Real syscalls return errors in-band, libc wrappers return errors in errno. 
// - Posix standardises a source level API, not an ABI. Different systems have 
//   different flag values / struct layouts / link names. 
//   for example, the `$INODE64` thing: https://github.com/rust-lang/libc/issues/414 
// - Null terminated strings do not spark joy. 
// 

//
// <sys/fcntl.h>
// https://pubs.opengroup.org/onlinepubs/9799919799/basedefs/fcntl.h.html
// TODO: (creat, fcntl)
//

AT :: @struct {
    // a sentinal file descriptor that represents the current-working-directory
    FDCWD :: fn() Fd = @match(current_os()) {
        fn macos() => Macos.AT_FDCWD;
        fn linux() => Linux.AT_FDCWD;
        @default   => unreachable();
    };
};

O :: @struct {
    // [i chose arbitrary values and they get remapped at runtime]
    CLOEXEC   :: 0x008;  // close() after calling exec(), so the child process doesn't inherit it
    CREAT     :: 0x010;  // create the file if it does not exist (uses the `mode` parameter)
    DIRECTORY :: 0x020;  // assert that the target is a directory (precludes CREAT)
    EXCL      :: 0x040;  // assert the file did not already exist (for CREAT)
    NOCTTY    :: 0x080;  
    NOFOLLOW  :: 0x100;
    TRUNC     :: 0x200;  // set size to zero if (already exists + is a file + opening for writing)
    APPEND    :: 0x400;  // seek to the end of the file instead of the start
    
    // access modes, choose one. [same on macos+linux]
    ACCMODE   :: 0b11; // bit mask of all access modes
    RDONLY    :: 0b00;
    WRONLY    :: 0b01;
    RDWR      :: 0b10;
};

open :: fn(path: CStr, flags: Mask(O)) SysResult(Fd) = {
    @debug_assert_eq(bit_and(flags, O.CREAT), 0, "open(CREAT); call an overload that lets you pass mode");
    openat(AT'FDCWD(), path, flags, 0)
};

// the high bits of `flags` are platform specific. they'll be shifted down and passed directly. 
// the low bits are remapped to the correct platform values. 
openat :: fn(parent: Fd, path: CStr, flags: Mask(O), mode: Mask(S)) SysResult(Fd) = {
    d := bit_and(flags, O.ACCMODE).bit_or(flags.shift_right_logical(32));
    flags := @match(current_os()) {
        fn macos() => fix_flags(Macos.O, O, d, flags);
        fn linux() => if current_arch() == .aarch64 {
            fix_flags(Linux.O_arm, O, d, flags)
        } else {  // same for rv ones i care about
            fix_flags(Linux.O_amd, O, d, flags)
        };
        @default => unreachable();
    };
    
    errno()[] = 0/*HACK*/;
    Fd.sys_ret(Syscall'openat(parent, path, flags, mode).intcast())
};

//
// <sys/stat.h>
// https://pubs.opengroup.org/onlinepubs/9799919799/basedefs/sys_stat.h.html
// TODO: (chmod, fchmod, fchmodat, fstat, futimens, lstat, mkfifo, mkfifoat, mknod, mknodat, umask, utimensat) go here as well
//

// metadata about a file
Stat :: @struct {
    st_dev:        i64;
    st_ino:        i64;
    st_nlink:      i64;  // number of hard links
    st_mode:       u32;  // see `S` bit masks below
    st_uid:        u32;  // user
    st_gid:        u32;  // group
    st_rdev:       i64;  // garbage for normal stuff
    st_size:       i64;  // bytes
    st_atime: TimeSpec;  // accessed date
    st_mtime: TimeSpec;  // modified date
    st_ctime: TimeSpec;
    st_blksize:    i64;
    st_blocks:     i64;
};

fn stat(path: CStr, out: *Stat) SysResult(void) = 
    fstatat(AT'FDCWD(), path, out, 0);

fn fstatat(parent: Fd, path: CStr, out: *Stat, flags: i64) SysResult(void) = {
    r := @uninitialized Syscall'SysStat;
    f := choose_inode64_on_applex8664(Syscall'fstatat, Syscall'@"fstatat$INODE64");
    
    @debug_assert_eq(flags, 0, "TODO: remap AT_SYMLINK_NOFOLLOW");
    result := if current_os() == .linux {
        // old glibc won't give you fstatat with a sane name and i don't want to deal with it
        errno()[] = 0/*HACK*/;
        Syscall'fstatat_nolibc(parent, path, r&, flags)
    } else {
        f(parent, path, r&, flags)
    };
    @if(result == 0)
    @match(current_os()) {
        fn macos() => fix(out, r.m&);
        fn linux() => @if(query_current_arch() == .x86_64, 
            fix(out, r.l&), fix(out, r.la&));
        @default => unreachable();
    };
    void.sys_ret(result)
}

// bit masks for Stat.st_mode
S :: @struct {
    // file permissions: ___, RWX(user), RWX(group), RWX(other)
    // [posix specifies the numbers for these]
    IRWXU :: octal "00700";
    IRUSR :: octal "00400";
    IWUSR :: octal "00200";
    IXUSR :: octal "00100";
    IRWXG :: octal "00070";
    IRGRP :: octal "00040";
    IWGRP :: octal "00020";
    IXGRP :: octal "00010";
    IRWXO :: octal "00007";
    IROTH :: octal "00004";
    IWOTH :: octal "00002";
    IXOTH :: octal "00001";
    ISUID :: octal "04000";  // set-user-id (ex. the sudo binary will have this set)
    ISGID :: octal "02000";  // ã€ƒgroup
    ISVTX :: octal "01000";

    // file kinds
    // [posix just specifies names but macos+linux agree on the numbers?]
    IFMT   :: octal "0170000";  // all the formats or-ed together
    IFIFO  :: octal "0010000";
    IFCHR  :: octal "0020000";
    IFDIR  :: octal "0040000";  // directory
    IFBLK  :: octal "0060000";
    IFREG  :: octal "0100000";  // regular file
    IFLNK  :: octal "0120000";  // symbolic link
    IFSOCK :: octal "0140000";
    IFWHT  :: octal "0160000";
    
    ISBLK  :: fn(m: u32) bool = m.bit_and(IFMT) == IFBLK ;
    ISCHR  :: fn(m: u32) bool = m.bit_and(IFMT) == IFCHR ;
    ISDIR  :: fn(m: u32) bool = m.bit_and(IFMT) == IFDIR ;
    ISFIFO :: fn(m: u32) bool = m.bit_and(IFMT) == IFIFO ;
    ISREG  :: fn(m: u32) bool = m.bit_and(IFMT) == IFREG ;
    ISLNK  :: fn(m: u32) bool = m.bit_and(IFMT) == IFLNK ;
    ISSOCK :: fn(m: u32) bool = m.bit_and(IFMT) == IFSOCK;
}; 

fn mkdir(path: CStr, mode: i64) SysResult(void) = 
    mkdirat(AT'FDCWD(), path, mode);

// create a new directory. 
fn mkdirat(parent: Fd, path: CStr, mode: Mask(S)) SysResult(void) = {
    @debug_assert_eq(mode.bit_and(octal "0777"), mode, "mkdirat(mode)");
    void.sys_ret(Syscall'mkdirat(parent, path, mode))
}

//
// <sys/mman.h>
// https://pubs.opengroup.org/onlinepubs/9799919799/basedefs/sys_mman.h.html
//

PROT :: @struct {
    NONE  :: 0b000;
    READ  :: 0b001;
    WRITE :: 0b010;
    EXEC  :: 0b100;
};

MAP :: @struct {
    SHARED  :: 0b00001;
    PRIVATE :: 0b00010;
    ANON    :: 0b00100;  // not backed by a file
    JIT     :: 0b01000;  // (macos only) allow EXEC on one thread while WRITE from another
    FIXED   :: 0b10000;  // don't treat `addr` as a hint, put the memory exactly there (may stomp previous mappings!)
};

// the high bits of `flags` are platform specific. they'll be shifted down and passed directly. 
// the low bits are remapped to the correct platform values. 
mmap :: fn(addr: rawptr, len: i64, prot: Mask(PROT), flags: Mask(MAP), fd: Fd, offset: i64) SysResult(rawptr) = {
    agree :: @or(MAP.SHARED, MAP.PRIVATE, MAP.FIXED);
    flags := fix_flags(Macos.MAP, Linux.MAP, MAP, agree, true, flags);
    rawptr.sys_ret(Syscall'mmap(addr, len, prot, flags, fd, offset))
};

// <poll.h>

POLL :: @struct {
    IN :: 0x1;  // ready for non-blocking read
   OUT :: 0x4;  // ready for non-blocking write
};

pollfd :: @struct {
    fd: Fd;
    events: Mask(POLL, u16);   // input; these are the events you're waiting for
    revents: Mask(POLL, u16);  // output; which events are ready
};

poll :: fn(fds: []pollfd, timeout: i32) SysResult(i64) = {
    poll :: fn(fds: []pollfd, timeout: i32) i64 #weak #libc; // :slice_abi
    i64.sys_ret(poll(fds, timeout))
};

// <wait.h>

W :: @struct {
    NOHANG :: 0x1;
};

rusage :: @struct {
    ru_utime: Syscall.TimeVal;
    ru_stime: Syscall.TimeVal;
    ru: Array(i64, 14); // TODO
};

/// wait for a child to stop
waitpid :: fn(pid: pid_t, status: *i32, options: Mask(W)) SysResult(i32) = {
    u := zeroed rusage;
    wait4(pid, status, options, u&)
};

wait4 :: fn(pid: pid_t, status: *i32, options: Mask(W), usage: *rusage) SysResult(i32) = {
    i32.sys_ret(Syscall'wait4(pid, status, options, usage).intcast())
};

// 
// <dirent.h>
// TODO: (alphasort, dirfd, fdopendir, readdir_r, rewinddir, scandir, seekdir, telldir)
// TODO: linux syscall version of readdir, et al.
// 

DIR :: @struct {
    system: rawptr;
    entry: dirent;
    impl: @struct {  // used when not linking libc
        fd: Fd;
        done: bool;
        cur: i64;
        end: i64;
        buf: []u8;
    };
};

dirent :: @struct {
    d_ino: u64;
    d_seekoff: u64;
    d_type: u8;
    // TODO: since im making a copy anyway i could tell you the length
    d_name: Array(u8, 256);
};

opendir :: fn(path: CStr) SysResult(*DIR) = {
    a := general_allocator();
    dir := a.box_zeroed(DIR);
    if prefer_syscalls() {
        dir.impl.fd = @try(open(path, @or(O.RDONLY, O.DIRECTORY))) return;
        dir.impl.buf = a.alloc_uninit(u8, 4096);
    } else {
        f := choose_inode64_on_applex8664(Syscall'opendir, Syscall'@"opendir$INODE64");
        r := f(path);
        if r == 0 {
            a.dealloc_one(DIR, dir);
            return fix_errno(*DIR, r);
        };
        dir.system = rawptr_from_int r;
    };
    
    (Ok = dir)
};

readdir :: fn(dir: *DIR) SysResult(*dirent) = {
    r := @if(prefer_syscalls(), {
        self, entry := (dir.impl&, dir.entry&);
        @if(self.done) return(Ok = zeroed(*dirent), Err = (_ = 0));
        if self.cur >= self.end {
            self.cur = 0;
            self.end = Syscall'getdents(self.fd, self.buf.ptr, self.buf.len, @ref 0/*macos*/);
            self.done = self.end <= 0;
            if self.done {
                return(sys_ret(*dirent, self.end))
            };
        };
        
        r := ptr_cast_unchecked(u8, SysDirEnt, self.buf.index(self.cur));
        self.cur += @match(current_os()) {
            fn macos() => r.m.d_reclen.zext();
            fn linux() => r.l.d_reclen.zext();
            @default => unreachable();
        };
        r
    }, {
        f := choose_inode64_on_applex8664(Syscall'readdir, Syscall'@"readdir$INODE64");
        
        // TODO: if we're trying to be a libc, the caller is supposed to do this, not us. 
        errno()[] = 0;
        
        r := f(dir.system);
        if r == 0 { 
            return fix_errno(*dirent, r);
        };
        SysDirEnt.ptr_from_int(r)
    });

    SysDirEnt :: @union(m: Macos.DirEnt, l: Linux.DirEnt);
    // TODO: this can be #where when i :UpdateBoot
    fix :: fn($T: Type, d: *Posix.dirent, s: *T) void #generic = {
        d.d_ino = s.d_ino;
        d.d_seekoff = s.d_seekoff;
        d.d_type = @as(u8) s.d_type;
        strncpy :: fn(d: *u8, s: *u8, n: i64) void = {
            while => s[] != 0 && n > 0 {
                d[] = s[];
                d = d.offset(1);
                s = s.offset(1);
                n -= 1;
            };
            d.slice(n).set_zeroed();
        };
        strncpy(d.d_name&.as_ptr(), s.d_name&.as_ptr(), 255);
    };

    
    @match(current_os()) {
        fn macos() => fix(Macos.DirEnt, dir.entry&, r.m&);
        fn linux() => fix(Linux.DirEnt, dir.entry&, r.l&);
        @default => unreachable();
    };
    
    (Ok = dir.entry&)
};

closedir :: fn(dir: *DIR) SysResult(void) = {
    a := general_allocator();
    d := dir[];
    a.dealloc_one(DIR, dir);
    if prefer_syscalls() {
        a.dealloc(u8, d.impl.buf);
        _ := Syscall'close(d.impl.fd);  // TODO: wrap and return error i guess
        return(Ok = ());
    };
    closedir :: fn(dir: rawptr) i64 #weak #libc;
    void.sys_ret(closedir(d.system))
};

// [macos+linux agree]
DT :: @struct {
    FIFO ::  S.IFIFO.shift_right_logical(12);
    CHR  ::  S.IFCHR.shift_right_logical(12);
    DIR  ::  S.IFDIR.shift_right_logical(12);
    BLK  ::  S.IFBLK.shift_right_logical(12);
    REG  ::  S.IFREG.shift_right_logical(12);
    LNK  ::  S.IFLNK.shift_right_logical(12);
    SOCK :: S.IFSOCK.shift_right_logical(12);
    WHT  ::  S.IFWHT.shift_right_logical(12);
};

//
// <signal.h>
// TODO: rest of the fucking owl
//

SIG :: @struct {
    // [macos+linux agree]
     INT :: 2;
    QUIT :: 3;
     ILL :: 4;
    TRAP :: 5;
    ABRT :: 6;
     FPE :: 8;
    KILL :: 9;
    SEGV :: 11;
    PIPE :: 13;
    PROF :: 27;

    // these are different (my numbers are arbitrary and get remapped)
    BUS :: 15;
    // TODO: SYS, USR1, USR2, etc.
};

// (arbitrary numbers)
SA :: @struct {
    SIGINFO :: 1;
    // TODO
};

// ... this turned into a bit of an infinite nightmare ... 
// maybe need to rethink my strategy. TODO

SigAction :: @struct {
    sa_handler: SignalHandler;
    sa_mask: Mask(SIG) = 0;
    sa_flags: Mask(SA) = SA.SIGINFO;
    sa_restorer := zeroed rawptr;
};

SigInfo :: @struct {
    si_signo: i32;  // SIG
    si_errno: i32;
    si_code: i32;
    si_value: rawptr;
    si_addr: rawptr;
};

UContext :: @struct {
    gpr: Array(rawptr, 32);  // in encoding order
    ip: rawptr;
    fp: rawptr; // frame pointer; redundant with gpr but it saves the caller needing to check
    // TODO
};

SignalHandler :: @FnPtr(s: i64, info: *SysSigInfo, ctx: *SysUContext) void;
SysSigAction :: @union(m: Macos.SigAction, lk: Linux.KSigAction, lc: Linux.CSigAction);
SysSigInfo :: @union(m: Macos.SigInfo, l: Linux.SigInfo);
SysUContext :: @union(
    m: Macos.UContext, 
    ld: Linux.UContextAmd64, 
    lr: Linux.UContextArm64, 
);

sigaction :: fn(signum: i64, opt_new: *SigAction, sys_old: *SysSigAction) SysResult(void) = {
    sys_new := SysSigAction.ptr_from_int(0);
    ::ptr_utils(SigAction);
    if !opt_new.is_null() {
        sys_new = @ref SysSigAction.zeroed();
        fix(sys_new, opt_new);
    };
    sigaction_raw(signum, sys_new, sys_old)
};

// signum is still Posix.SIG but sys_new has already been translated
sigaction_raw :: fn(signum: i64, sys_new: *SysSigAction, sys_old: *SysSigAction) SysResult(void) = {
    @debug_assert(signum != SIG.KILL /* && != STOP */ && signum <= 64);
    signum := fix_number(Macos.SIG, Linux.SIG, SIG, signum);

    sigaction :: fn(signum: i64, new: *SysSigAction, old: *SysSigAction) i64 #weak #libc;
    err := @match(current_os()) {
        fn macos() => sigaction(signum, sys_new, sys_old);
        fn linux() => if prefer_syscalls() {
            Syscall'rt_sigaction(signum, sys_new.lk&, sys_old.lk&, 8)
        } else {
            sigaction(signum, sys_new, sys_old)
        };
        @default => unreachable();
    };
    void.sys_ret(err)
};

fn fix(d: *SysSigAction, s: *SigAction) void = {
    agree :: @or(SIG.INT, SIG.QUIT, SIG.ILL, SIG.TRAP, SIG.ABRT, SIG.FPE, SIG.KILL, SIG.SEGV, SIG.PIPE);
    @debug_assert_eq(s.sa_mask, 0); // TODO: fix_number each bit. this is not the same thing!
    sa_mask := 0; // fix_flags(Macos.SIG, Linux.SIG, SIG, agree, false, s.sa_mask);
    sa_flags := fix_flags(Macos.SA, Linux.SA, SA, 0, false, s.sa_flags);
    @match(current_os()) {
        fn macos() => {
            d.m.mask = sa_mask.trunc();
            d.m.flags = sa_flags.trunc();
            d.m.sigaction = bit_cast_unchecked(@type s.sa_handler, @type d.m.sigaction, s.sa_handler);
        }
        fn linux() => {
            if prefer_syscalls() {
                d.lk.sa_mask = sa_mask;
                d.lk.sa_flags = sa_flags.bit_or(Linux.SA.RESTORER);
                d.lk.sa_handler = bit_cast_unchecked(@type s.sa_handler, @type d.lk.sa_handler, s.sa_handler);
                d.lk.sa_restorer = @as(rawptr) fn() void = {
                    Syscall'rt_sigreturn();
                    scary_log("unreachable");
                };
            } else {
                d.lc.sa_mask&.items().rest(1).set_zeroed();
                d.lc.sa_mask&[0] = sa_mask;
                d.lc.sa_flags = sa_flags;
                d.lc.sa_handler = bit_cast_unchecked(@type s.sa_handler, @type d.lc.sa_handler, s.sa_handler);
                d.lc.sa_restorer = zeroed rawptr;
            };
        }
        @default => unreachable();
    };
}

// TODO: split fix functions into macos.fr and linux.fr 
fn signal_handler_body(info_s: *SysSigInfo, ctx_s: *SysUContext, $body: @Fn(info: *SigInfo, ctx: *UContext) void) void = {
    push_emergency_dynamic_environment {
        info_d, ctx_d := (@uninitialized SigInfo, @uninitialized UContext);
        @match(current_os()) {
            fn macos() #use(Macos) => {
                ::@assert_eq(0, offset_of(Arm64MachineContext, Fields(Arm64MachineContext).neon).mod(16), "fp unaligned");
                ctx_s := ctx_s.m&;
                gp_d := Posix.UContext.raw_from_ptr(ctx_d&);
                if ctx_s.mc_size == size_of(Arm64MachineContext) {
                    gp_s := Arm64ThreadState.raw_from_ptr(ctx_s.mc.arm64.thread&);
                    copy_bytes(gp_d, gp_s, 32*8);
                    ctx_d.ip = ctx_s.mc.arm64.thread.pc;
                } else {
                    s := ctx_s.mc.amd64.thread.rax&.slice(16);
                    d := ctx_d.gpr&.items();
                    d.slice(8, 16).copy_from(s.slice(8, 16));
                    // apple gives (abcd) but encoding order is (acdb), 
                    // and then they have the next 4 backwards
                    d[0] = s[0];
                    d[1] = s[3];
                    d[2] = s[4];
                    d[3] = s[2];
                    d[4] = s[7];
                    d[5] = s[6];
                    d[6] = s[5];
                    d[7] = s[4];
                    ctx_d.ip = ctx_s.mc.amd64.thread.rip;
                };
                
                info_d.si_signo = info_s.m.signal_number;
                info_d.si_errno = info_s.m.errno;
                info_d.si_code = info_s.m.code;
                info_d.si_value = info_s.m.value;
                info_d.si_addr = info_s.m.addr;
            }
            fn linux() => {
                @match(current_arch()) {
                    fn x86_64() => {
                        s := ctx_s.ld.mcontext.gpr&.items();
                        d := ctx_d.gpr&.items();
                        d.slice(8, 16).copy_from(s.slice(0, 8));
                        // i want them in encoding order but they give them in...  
                        // well... i must admit... i don't see the pattern here...
                        d[0] = s[8+5];
                        d[1] = s[8+6];
                        d[2] = s[8+4];
                        d[3] = s[8+3];
                        d[4] = s[8+7];
                        d[5] = s[8+2];
                        d[6] = s[8+1];
                        d[7] = s[8+0];
                        ctx_d.ip = s[16];
                    }
                    fn aarch64() => {
                        ctx_d.gpr = ctx_s.lr.mcontext.gpr;
                        ctx_d.ip = ctx_s.lr.mcontext.pc;
                    }
                    @default => panic("TODO: linux signal_handler_body new arch");
                };
                
                info_d.si_signo = info_s.l.si_signo;
                info_d.si_errno = info_s.l.si_errno;
                info_d.si_code = info_s.l.si_code;
                info_d.si_addr = info_s.l.payload&[0];
                info_d.si_value = info_s.l.payload&[1];
            }
            @default => unreachable();
        };
        
        fp_index := @match(current_arch()) {
            fn aarch64() => 29;
            fn x86_64() => 5;
            @default => todo();
        };
        ctx_d.fp = ctx_d.gpr&[fp_index];
        
        body(info_d&, ctx_d&);
        // be careful about doing stuff here. i early return from body. 
    };
}

kill :: fn(pid: i32, signum: i64) SysResult(void) = {
    signum := fix_number(Macos.SIG, Linux.SIG, SIG, signum);
    void.sys_ret(Syscall'kill(pid, signum))  // TODO: this shouldn't compile if you put a semicolon here!
};

///////////////////////////////////////////////////////////////////////

choose_inode64_on_applex8664 :: fn($normal: FuncId, $mangled: FuncId) AsFnPtr(normal) #generic = {
    @"ðŸ¤¡" := current_os() == .macos && current_arch() == .x86_64;
    @if(IS_BOOTSTRAPPING,  // :UpdateBoot
        @as(AsFnPtr(normal)) @as(FuncId) normal,
        if_func(@"ðŸ¤¡", mangled, normal),
    )
};

errno :: fn() *i32 = {
    @if(!is_linking_libc()) return(@static(i32));
    @if(IS_BOOTSTRAPPING) return(__error());          // :UpdateBoot

    // This has different names on different libc-s.
    // https://github.com/ziglang/zig/blob/master/lib/std/c.zig#L9876
    __error :: fn() *i32 #weak #libc;
    __errno_location :: fn() *i32 #weak #libc;
    @match(current_os()) {
        fn macos() => __error();
        fn linux() => __errno_location();
        @default   => unreachable();
    }
};

sys_ret :: fn($T: Type, result: i64) SysResult(T) #generic = 
    bit_cast_unchecked(SysResult(i64), SysResult(T), sys_ret_erased(result));

sys_ret_erased :: fn(result: i64) SysResult(i64) #noinline = {
    @if(result < 0) return(Ok = 0, Err = fix_errno(result));
    (Ok = result)
};

fn fix_errno($T: Type, err: i64) SysResult(T) #generic #inline = 
    (Ok = zeroed T, Err = fix_errno(err));

fn fix_errno(err: i64) SysError #noinline = {
    if is_linking_libc() && errno()[] != 0/*HACK*/ {
        err = zext errno()[];
    };
    err = abs err;
    // TODO
    
    (_ = err)
}

SysError :: @struct(_: i64);

fn SysResult($T: Type) Type = {
    Self :: @struct {
        Err: SysError = (_ = 0);
        Ok: T = zeroed T;
    };
    
    fn if(self: Self, $body: @Fn(t: T) void) void = {
        if(self.is_ok(), => body(self.Ok));
    }
    
    fn or(self: Self, $body: @Fn() T) T = {
        if(self.is_ok(), => return(self.Ok));
        body()
    }
    
    fn is_ok(self: Self) bool  = self.Err._ == 0;
    fn is_err(self: Self) bool = self.Err._ != 0;
    fn is_err(self: *Self) bool = self.Err._ != 0;
    
    fn unwrap(self: Self) T = 
        self || @panic("syscall failed. system errno = %", self.Err._);
    
    Self
}

// this is kinda lame. 
// you can't `f := @if(c, FuncId, FuncId)` because they'll unify to type FuncId 
// but it will be runtime known so you can't call it, where as you could if the 
// inputs had both coerced to function pointers first. 
fn if_func(cond: bool, $t: FuncId, $f: FuncId) AsFnPtr(t) #generic = // :UpdateBoot #inline = 
    @if(cond, t, f);

// Get type of a function pointer to `fid`
fn AsFnPtr(fid: FuncId) Type = {
    func := get_function_ast(fid, true, true, true, false);
    arg, ret := (func.finished_arg.unwrap(), func.finished_ret.unwrap());
    //info: TypeInfo = (FnPtr = (ty = (arg = arg, ret = ret, unary = func.arg.bindings.len <= 1)));
    //intern_type_ref(info&)
    FnPtr(arg, ret)
}

Macos :: import("@/lib/sys/macos.fr");
Linux :: import("@/lib/sys/linux.fr");

#use("@/lib/sys/process.fr");

current_arch :: query_current_arch;
current_os :: query_current_os;

fn fix_flags();
fn fix_flags($macos: Type, $linux: Type, $public: Type, agree: i64, preserve_high_bits: bool, flags: i64) i64 = {
    m :: create_flags_data(Type.scope_of(macos), Type.scope_of(public));
    l :: create_flags_data(Type.scope_of(linux), Type.scope_of(public));
    fix_flags(m, l, agree, preserve_high_bits, flags)
} 

fn fix_flags(macos: []FlagInfo, linux: []FlagInfo, agree: i64, preserve_high_bits: bool, flags: i64) i64 = {
    @if(TODOWASM) @if(query_current_arch() == .wasm32) return(0);
    d := bit_and(flags, agree);
    if preserve_high_bits {
        d = d.bit_or(flags.shift_right_logical(32));
    };
    data := @match(current_os()) {
        fn macos() => macos;
        fn linux() => linux;
        @default => unreachable();
    };
    fix_flags(d, flags, data)
}

fn fix_flags($Dest: Type, $Src: Type, d: i64, s: i64) i64 = {
    D :: Type.scope_of(Dest); S :: Type.scope_of(Src);
    fix_flags(d, s, ::create_flags_data(D, S))
};

fn fix_flags(d: i64, s: i64, data: []FlagInfo) i64 = {
    for data { it |
        bit := int(s.bit_and(1.shift_left(it.src.zext())) != 0);
        d = d.bit_or(bit.shift_left(it.dest.zext()));
    };
    d
}

FlagInfo :: @struct(dest: u8, src: u8);
create_flags_data :: fn(D: ScopeId, S: ScopeId) []FlagInfo = {
    out := FlagInfo.list(ast_alloc());
    for get_constants(S) { name |
        d_flag := get_constant(i64, D, name);
        if d_flag { d_flag |
            s_flag := get_constant(i64, S, name).unwrap();
            d_bit := d_flag.trailing_zeros();
            s_bit := s_flag.trailing_zeros();
            if d_flag != 0 {
                @assert(1.shift_left(d_bit) == d_flag && 1.shift_left(s_bit) == s_flag, "multiple bits in %", name.str());
                out&.push(dest = d_bit.trunc(), src = s_bit.trunc());
            }
        };
    };
    out.items()
};

fn fix_number();
fn fix_number($macos: Type, $linux: Type, $public: Type, s: i64) i64 = {
    @match(current_os()) {
        fn macos() => fix_number(macos, public, s);
        fn linux() => fix_number(linux, public, s);
        @default => unreachable();
    }
}

fn fix_number($Dest: Type, $Src: Type, s: i64) i64 = {
    D :: Type.scope_of(Dest); S :: Type.scope_of(Src);
    
    inline_for get_constants(S) { $name |
        s_flag :: get_constant(i64, S, name[]).unwrap();
        if s == s_flag {
            d_flag :: get_constant(i64, D, name[]);
            if d_flag { d_flag |
                return(d_flag);
            };
            return(s_flag);
        };
    };
    @panic("invalid fix_number %", s)
}

// TODO: be more strictly typed about bit flags and make or-ing them together less painful
fn Mask();
fn Mask($Values: Type) Type = Mask(Values, i64);
fn Mask($Values: Type, $Backing: Type) Type = Backing;
