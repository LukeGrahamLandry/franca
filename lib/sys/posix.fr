// 
// Inconveniences: 
// - Most systems don't expose a stable syscall interface. 
// - Real syscalls return errors in-band, libc wrappers return errors in errno. 
// - Posix standardises a source level API, not an ABI. Different systems have 
//   different flag values / struct layouts / link names. 
//   for example, the `$INODE64` thing: https://github.com/rust-lang/libc/issues/414 
// - Null terminated strings do not spark joy. 
// 

//
// <sys/fcntl.h>
// https://pubs.opengroup.org/onlinepubs/9799919799/basedefs/fcntl.h.html
// TODO: (creat, fcntl)
//

AT :: @struct {
    // a sentinal file descriptor that represents the current-working-directory
    FDCWD :: fn() Fd = @match(current_os()) {
        fn macos() => Macos.AT_FDCWD;
        fn linux() => Linux.AT_FDCWD;
        @default   => unreachable();
    };
};

O :: @struct {
    // [i chose arbitrary values and they get remapped at runtime]
    CLOEXEC   :: 0x008;  // close() after calling exec(), so the child process doesn't inherit it
    CREAT     :: 0x010;  // create the file if it does not exist (uses the `mode` parameter)
    DIRECTORY :: 0x020;  // assert that the target is a directory (precludes CREAT)
    EXCL      :: 0x040;  // assert the file did not already exist (for CREAT)
    NOCTTY    :: 0x080;  
    NOFOLLOW  :: 0x100;
    TRUNC     :: 0x200;  // set size to zero if (already exists + is a file + opening for writing)
    APPEND    :: 0x400;  // seek to the end of the file instead of the start
    
    // access modes, choose one. [same on macos+linux]
    ACCMODE   :: 0b11; // bit mask of all access modes
    RDONLY    :: 0b00;
    WRONLY    :: 0b01;
    RDWR      :: 0b10;
};

fn open(path: CStr, flags: Mask(O)) SysResult(Fd) = {
    @debug_assert_eq(bit_and(flags, O.CREAT), 0, "open(CREAT); call an overload that lets you pass mode");
    openat(AT'FDCWD(), path, flags, 0)
}

// the high bits of `flags` are platform specific. they'll be shifted down and passed directly. 
// the low bits are remapped to the correct platform values. 
fn openat(parent: Fd, path: CStr, flags: Mask(O), mode: Mask(S)) SysResult(Fd) = {
    d := bit_and(flags, O.ACCMODE).bit_or(flags.shift_right_logical(32));
    flags := @match(current_os()) {
        fn macos() => fix_flags(Macos.O, O, d, flags);
        fn linux() => fix_flags(Linux.O, O, d, flags);
        @default => unreachable();
    };
    
    errno()[] = 0/*HACK*/;
    err := Syscall'openat(parent, path, flags, mode);
    if err < 0 {
        return Fd.fix_errno(intcast err);
    };
    
    (Ok = (fd = err))
}

//
// <sys/stat.h>
// https://pubs.opengroup.org/onlinepubs/9799919799/basedefs/sys_stat.h.html
// TODO: (chmod, fchmod, fchmodat, fstat, futimens, lstat, mkfifo, mkfifoat, mknod, mknodat, umask, utimensat) go here as well
//

// metadata about a file
Stat :: @struct {
    st_dev:        i64;
    st_ino:        i64;
    st_nlink:      i64;  // number of hard links
    st_mode:       u32;  // see `S` bit masks below
    st_uid:        u32;  // user
    st_gid:        u32;  // group
    st_rdev:       i64;  // garbage for normal stuff
    st_size:       i64;  // bytes
    st_atime: TimeSpec;  // accessed date
    st_mtime: TimeSpec;  // modified date
    st_ctime: TimeSpec;
    st_blksize:    i64;
    st_blocks:     i64;
};

fn stat(path: CStr, out: *Stat) SysResult(void) = 
    fstatat(AT'FDCWD(), path, out, 0);

fn fstatat(parent: Fd, path: CStr, out: *Stat, flags: i64) SysResult(void) = {
    r := @uninitialized Syscall'SysStat;
    f := choose_inode64_on_applex8664(Syscall'fstatat, Syscall'@"fstatat$INODE64");
    
    @debug_assert_eq(flags, 0, "TODO: remap AT_SYMLINK_NOFOLLOW");
    err := f(parent, path, r&, flags);
    if err != 0 {
        return void.fix_errno(err);
    };
    
    @match(current_os()) {
        fn macos() => fix(out, r.m&);
        fn linux() => fix(out, r.l&);
        @default => unreachable();
    };
    
    (Ok = ())
}

// bit masks for Stat.st_mode
S :: @struct {
    // file permissions: ___, RWX(user), RWX(group), RWX(other)
    // [posix specifies the numbers for these]
    IRWXU :: octal "00700";
    IRUSR :: octal "00400";
    IWUSR :: octal "00200";
    IXUSR :: octal "00100";
    IRWXG :: octal "00070";
    IRGRP :: octal "00040";
    IWGRP :: octal "00020";
    IXGRP :: octal "00010";
    IRWXO :: octal "00007";
    IROTH :: octal "00004";
    IWOTH :: octal "00002";
    IXOTH :: octal "00001";
    ISUID :: octal "04000";  // set-user-id (ex. the sudo binary will have this set)
    ISGID :: octal "02000";  // ã€ƒgroup
    ISVTX :: octal "01000";

    // file kinds
    // [posix just specifies names but macos+linux agree on the numbers?]
    IFMT   :: octal "0170000";  // all the formats or-ed together
    IFIFO  :: octal "0010000";
    IFCHR  :: octal "0020000";
    IFDIR  :: octal "0040000";  // directory
    IFBLK  :: octal "0060000";
    IFREG  :: octal "0100000";  // regular file
    IFLNK  :: octal "0120000";  // symbolic link
    IFSOCK :: octal "0140000";
    IFWHT  :: octal "0160000";
    
    ISBLK  :: fn(m: u32) bool = m.bit_and(IFMT) == IFBLK ;
    ISCHR  :: fn(m: u32) bool = m.bit_and(IFMT) == IFCHR ;
    ISDIR  :: fn(m: u32) bool = m.bit_and(IFMT) == IFDIR ;
    ISFIFO :: fn(m: u32) bool = m.bit_and(IFMT) == IFIFO ;
    ISREG  :: fn(m: u32) bool = m.bit_and(IFMT) == IFREG ;
    ISLNK  :: fn(m: u32) bool = m.bit_and(IFMT) == IFLNK ;
    ISSOCK :: fn(m: u32) bool = m.bit_and(IFMT) == IFSOCK;
}; 

fn mkdir(path: CStr, mode: i64) SysResult(void) = 
    mkdirat(AT'FDCWD(), path, mode);

// create a new directory. 
fn mkdirat(parent: Fd, path: CStr, mode: Mask(S)) SysResult(void) = {
    @debug_assert_eq(mode.bit_and(octal "0777"), mode, "mkdirat(mode)");
    err := Syscall'mkdirat(parent, path, mode);
    if(err != 0, => return(void.fix_errno(err)));
    (Ok = ())
}

//
// <sys/mman.h>
// https://pubs.opengroup.org/onlinepubs/9799919799/basedefs/sys_mman.h.html
//

PROT :: @struct {
    NONE  :: 0b000;
    READ  :: 0b001;
    WRITE :: 0b010;
    EXEC  :: 0b100;
};

MAP :: @struct {
    SHARED  :: 0b00001;
    PRIVATE :: 0b00010;
    ANON    :: 0b00100;  // not backed by a file
    JIT     :: 0b01000;  // (macos only) allow EXEC on one thread while WRITE from another
    FIXED   :: 0b10000;  // don't treat `addr` as a hint, put the memory exactly there (may stomp previous mappings!)
};

// the high bits of `flags` are platform specific. they'll be shifted down and passed directly. 
// the low bits are remapped to the correct platform values. 
mmap :: fn(addr: rawptr, len: i64, prot: Mask(PROT), flags: Mask(MAP), fd: Fd, offset: i64) SysResult(rawptr) = {
    agree :: bit_or(MAP'SHARED, MAP'PRIVATE).bit_or(MAP'FIXED);
    d := bit_and(flags, agree).bit_or(flags.shift_right_logical(32));
    flags := @match(current_os()) {
        fn macos() => fix_flags(Macos.MAP, MAP, d, flags);
        fn linux() => fix_flags(Linux.MAP, MAP, d, flags);
        @default => unreachable();
    };
    err := Syscall'mmap(addr, len, prot, flags, fd, offset);
    
    if err < 4096 {  // TODO: does the syscall return negative or positive of the errno? neither could be a sane pointer. 
        return rawptr.fix_errno(err);
    };
    
    (Ok = rawptr_from_int err)
};

// 
// <dirent.h>
// TODO: (alphasort, dirfd, fdopendir, readdir_r, rewinddir, scandir, seekdir, telldir)
// TODO: linux syscall version of readdir, et al.
// 

DIR :: @struct(
    system: rawptr,
    entry: dirent,
);

dirent :: @struct {
    d_ino: u64;
    d_seekoff: u64;
    d_type: u8;
    // TODO: since im making a copy anyway i could tell you the length
    d_name: Array(u8, 256);
};

opendir :: fn(path: CStr) SysResult(*DIR) = {
    f := choose_inode64_on_applex8664(Syscall'opendir, Syscall'@"opendir$INODE64");
    r := f(path);
    if r == 0 {
        return fix_errno(*DIR, r);
    };
    
    dir := general_allocator().box_zeroed(DIR);
    dir.system = rawptr_from_int r;
    (Ok = dir)
};

readdir :: fn(dir: *DIR) SysResult(*dirent) = {
    SysDirEnt :: @union(m: Macos.DirEnt, l: Linux.DirEnt);
    // TODO: this can be #where when i :UpdateBoot
    fix :: fn($T: Type, d: *Posix.dirent, s: *T) void #generic = {
        d.d_ino = s.d_ino;
        d.d_seekoff = s.d_seekoff;
        d.d_type = @as(u8) s.d_type;
        strncpy :: fn(d: *u8, s: *u8, n: i64) void #libc;  // TODO
        strncpy(d.d_name&.as_ptr(), s.d_name&.as_ptr(), 255);
    };

    f := choose_inode64_on_applex8664(Syscall'readdir, Syscall'@"readdir$INODE64");
    
    // TODO: if we're trying to be a libc, the caller is supposed to do this, not us. 
    if is_linking_libc() {
        errno()[] = 0;
    };
    
    r := f(dir.system);
    if r == 0 { 
        return fix_errno(*dirent, r);
    };
    r := SysDirEnt.ptr_from_int(r);
    
    @match(current_os()) {
        fn macos() => fix(Macos.DirEnt, dir.entry&, r.m&);
        fn linux() => fix(Linux.DirEnt, dir.entry&, r.l&);
        @default => unreachable();
    };
    
    (Ok = dir.entry&)
};

closedir :: fn(dir: *DIR) SysResult(void) = {
    closedir :: fn(dir: rawptr) i64 #libc;
    err := closedir(dir.system);
    if err != 0 { 
        return void.fix_errno(err);
    };
    general_allocator().dealloc(DIR, dir.slice(1));
    (Ok = ())
};

// [macos+linux agree]
DT :: @struct {
    FIFO ::  S.IFIFO.shift_right_logical(12);
    CHR  ::  S.IFCHR.shift_right_logical(12);
    DIR  ::  S.IFDIR.shift_right_logical(12);
    BLK  ::  S.IFBLK.shift_right_logical(12);
    REG  ::  S.IFREG.shift_right_logical(12);
    LNK  ::  S.IFLNK.shift_right_logical(12);
    SOCK :: S.IFSOCK.shift_right_logical(12);
    WHT  ::  S.IFWHT.shift_right_logical(12);
};

///////////////////////////////////////////////////////////////////////

choose_inode64_on_applex8664 :: fn($normal: FuncId, $mangled: FuncId) AsFnPtr(normal) #generic = {
    @"ðŸ¤¡" := current_os() == .macos && current_arch() == .x86_64;
    @if(::(IS_BOOTSTRAPPING || (!FEATURE_WEAK_SYMBOLS && current_os() == .linux)),  // :UpdateBoot
        @as(AsFnPtr(normal)) @as(FuncId) normal,
        if_func(@"ðŸ¤¡", mangled, normal),
    )
};

errno :: fn() *i32 = {
    @if(!is_linking_libc()) return(@static(i32));
    @if(IS_BOOTSTRAPPING) return(__error());          // :UpdateBoot
    @if(!FEATURE_WEAK_SYMBOLS) return(@static(i32));  // :UpdateBoot

    // This has different names on different libc-s.
    // https://github.com/ziglang/zig/blob/master/lib/std/c.zig#L9876
    __error :: fn() *i32 #weak #libc;
    __errno_location :: fn() *i32 #weak #libc;
    @match(current_os()) {
        fn macos() => __error();
        fn linux() => __errno_location();
        @default   => unreachable();
    }
};

fn fix_errno($T: Type, err: i64) SysResult(T) #generic = 
    (Ok = zeroed T, Err = fix_errno(err));

fn fix_errno(err: i64) SysError #noinline = {
    if is_linking_libc() && errno()[] != 0/*HACK*/ {
        err = zext errno()[];
    };
    err = abs err;
    // TODO
    
    (_ = err)
}

SysError :: @struct(_: i64);

fn SysResult($T: Type) Type = {
    Self :: @struct {
        Err: SysError = (_ = 0);
        Ok: T;
    };
    
    fn if(self: Self, $body: @Fn(t: T) void) void = {
        if(self.is_ok(), => body(self.Ok));
    }
    
    fn or(self: Self, $body: @Fn() T) T = {
        if(self.is_ok(), => return(self.Ok));
        body()
    }
    
    fn is_ok(self: Self) bool  = self.Err._ == 0;
    fn is_err(self: Self) bool = self.Err._ != 0;
    
    Self
}

// this is kinda lame. 
// you can't `f := @if(c, FuncId, FuncId)` because they'll unify to type FuncId 
// but it will be runtime known so you can't call it, where as you could if the 
// inputs had both coerced to function pointers first. 
fn if_func(cond: bool, $t: FuncId, $f: FuncId) AsFnPtr(t) #generic = // :UpdateBoot #inline = 
    @if(cond, t, f);

// Get type of a function pointer to `fid`
fn AsFnPtr(fid: FuncId) Type = {
    func := get_function_ast(fid, true, true, true, false);
    arg, ret := (func.finished_arg.unwrap(), func.finished_ret.unwrap());
    //info: TypeInfo = (FnPtr = (ty = (arg = arg, ret = ret, unary = func.arg.bindings.len <= 1)));
    //intern_type_ref(info&)
    FnPtr(arg, ret)
}

Macos :: import("@/lib/sys/macos.fr");
Linux :: import("@/lib/sys/linux.fr");

#use("@/lib/sys/process.fr");

current_arch :: query_current_arch;
current_os :: query_current_os;

fix_flags :: fn($Dest: Type, $Src: Type, d: i64, s: i64) i64 = {
    D :: Type.scope_of(Dest); S :: Type.scope_of(Src);
    
    inline_for get_constants(S) { $name |
        d_flag :: get_constant(i64, D, name[]);
        if d_flag { d_flag |
            s_flag :: get_constant(i64, S, name[]).unwrap();
            if d_flag != 0 && s.bit_and(s_flag) == s_flag {
                d = bit_or(d, d_flag);
            }
        };
    };
    
    d
};

// TODO: be more strictly typed about bit flags and make or-ing them together less painful
fn Mask($T: Type) Type = i64;
