/// This is the core operating system primitive we use to implement mutex/cond/etc. 
/// The general usage pattern is you start with a cas so you stay in user-space when 
/// there's low contention. If the cas fails you know the current value and pass that to wait(). 
/// 

/// wake up `count` threads who are wait()-ing on `addr` 
wake :: fn(addr: *u32, count: u32) void #target_os = (fn($os) => @match(os) {
    fn macos() => {
        op := ULockFlags.zeroed();
        op&.set(.op, 1); // UL_COMPARE_AND_WAIT
        op&.set(.no_errno, 1);
        
        ::enum(MacosLibc.ErrNo);
        result := ulock_wake(op, addr, count);
        @assert(result != -MacosLibc.ErrNo.EINTR.raw(), "TODO: do i need a loop here? do THREAD_INTERRUPTED/THREAD_RESTART actually happen?"); 
    }
    fn linux() => {
        FUTEX_WAKE :: 1;
        // TODO: set the PRIVATE flag or whatever
        _ := sys_futex(addr, FUTEX_WAKE, count, TimeSpec.ptr_from_int(0));
    }
    @default => :: panic("TODO: contended_lock unsupported os");
});

/// If addr==expect, sleep the thread until wake() is called on the same addr. 
wait :: fn(addr: *u32, expect: u32) void #target_os = (fn($os) => @match(os) {
    // Return values just tell you stuff about timeouts and spurious wake ups 
    // which we don't care about since we're calling it in a loop. 
    fn macos() => {
        op := ULockFlags.zeroed();
        op&.set(.op, 1); // UL_COMPARE_AND_WAIT
        _ := ulock_wait(op, addr, expect, 0);
    }
    fn linux() => {
        FUTEX_WAIT :: 0;
        // TODO: set the PRIVATE flag or whatever
        _ := sys_futex(addr, FUTEX_WAIT, expect, TimeSpec.ptr_from_int(0));
    }
    @default => :: panic("TODO: contended_lock unsupported os");
});

// https://github.com/apple/darwin-xnu/blob/main/bsd/kern/sys_ulock.c
ulock_wait :: fn(op: ULockFlags, addr: *u32, only_wait_if_value_is: u32, timeout_ns_zero_is_forever: u32) i32 #syscall(_, _, 515);
ulock_wake :: fn(op: ULockFlags, addr: *u32, how_many_to_wake: u32) i32 #syscall(_, _, 516);
ULockFlags :: @(import("@/lib/bit_fields.fr").bit_fields)(
    op         := 8,
    wake_flags := 8,
    wait_flags := 8,
    no_errno   := 1,
    _          := 7,
);

// https://www.man7.org/linux/man-pages/man2/futex.2.html
sys_futex :: fn(addr: *u32, futex_op: u32, val: u32, timeout: *TimeSpec) i64 #syscall(98, 202, _);
