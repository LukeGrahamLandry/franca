/// This is the core operating system primitive we use to implement mutex/cond/etc. 
/// The general usage pattern is you start with a cas so you stay in user-space when 
/// there's low contention. If the cas fails you know the current value and pass that to wait(). 
/// 

/// wake up `count` threads who are wait()-ing on `addr` 
wake :: fn(addr: *u32, count: u32) void = {
@if(SLOW_USERSPACE_THREADS) return(import("@/lib/sys/sync/green.fr")'wake(addr, count));
@match(query_current_os()) {
    fn macos() => {
        op := Syscall'ULockFlags.zeroed();
        op&.set(.op, 1); // UL_COMPARE_AND_WAIT
        op&.set(.no_errno, 1);
        
        ::enum(MacosLibc.ErrNo);
        result := Syscall'ulock_wake(op, addr, count);
        @assert(result != -MacosLibc.ErrNo.EINTR.raw(), "TODO: do i need a loop here? do THREAD_INTERRUPTED/THREAD_RESTART actually happen?"); 
    }
    fn linux() => {
        FUTEX_WAKE :: 1;
        // TODO: set the PRIVATE flag or whatever
        _ := Syscall'sys_futex(addr, FUTEX_WAKE, count, TimeSpec.ptr_from_int(0));
    }
    @default => unreachable();
};
};

/// If addr==expect, sleep the thread until wake() is called on the same addr. 
wait :: fn(addr: *u32, expect: u32) void = {
@if(SLOW_USERSPACE_THREADS) return(import("@/lib/sys/sync/green.fr")'wait(addr, expect));
@match(query_current_os()) {
    // Return values just tell you stuff about timeouts and spurious wake ups 
    // which we don't care about since we're calling it in a loop. 
    fn macos() => {
        op := Syscall'ULockFlags.zeroed();
        op&.set(.op, 1); // UL_COMPARE_AND_WAIT
        _ := Syscall'ulock_wait(op, addr, expect, 0);
    }
    fn linux() => {
        FUTEX_WAIT :: 0;
        // TODO: set the PRIVATE flag or whatever
        _ := Syscall'sys_futex(addr, FUTEX_WAIT, expect, TimeSpec.ptr_from_int(0));
    }
    @default => unreachable();
};
};
