CondVar :: @struct {
    value: u32;
    prev: u32;
    count: i32;
};

// TODO: timed wait, broadcast

fn wait(c: *CondVar, m: *Mutex) void = {
    i32.atomic_add(c.count&, 1);
    value := c.value;
    u32.atomic_set(c.prev&, value);
    m.unlock();
    Futex'wait(c.value&, value);
    m.lock();
    i32.atomic_add(c.count&, -1);
}

fn signal_one(c: *CondVar) void = {
    if c.count != 0 {
        value := c.prev + 1;
        u32.atomic_set(c.value&, value);
        Futex'wake(c.value&, 1);
    };
}

Futex :: import("@/lib/sys/sync/futex.fr");

PCond :: @struct(sig: i64, opaque: Array(u8, 40));

fn pthread_cond_signal(c: *PCond) voidResult #libc;
fn pthread_cond_wait(c: *PCond, mutex: *PMutex) voidResult #libc;
fn pthread_cond_timedwait(c: *PCond, mutex: *PMutex, abstime: *TimeSpec) voidResult #libc;
fn pthread_cond_init(c: *PCond, todo_attr_pass_zero_for_now: i64) voidResult #libc;

fn wait(c: *PCond, m: *PMutex) void = 
    pthread_cond_wait(c, m).unwrap();

fn signal_one(c: *PCond) void = 
    pthread_cond_signal(c).unwrap();
