fn _NSGetArgc() *i64 #libc;
fn _NSGetArgv() **CStr #libc;
fn _NSGetExecutablePath(buf: *u8, len: *i64) voidResult #libc;

MacosLibc :: @struct(
    Utsname    :: @struct(
        sysname : Array(u8, 256),
        nodename: Array(u8, 256),
        release : Array(u8, 256),
        version : Array(u8, 256),
        machine : Array(u8, 256),
    ),
    DirEnt :: @struct(
        d_ino: u64, 
        d_seekoff: u64, 
        d_reclen: u16, 
        d_namlen: u16, 
        d_type: DirEntType, 
        d_name: Array(u8, 255)
    ),
    MapFlag :: @enum(i64) (Private = 2, Anonymous = 4096, Jit = 2048, Fixed = 16),
    OpenFlag :: @enum(i64) (Read = 0, Write = 1, ReadWrite = 2, Create = 512, Truncate = 1024, Append = 8),
    AT_FDCWD :: @as(Fd) (fd = -2),
    
    ErrNo :: @enum(i32) (
        EPERM = 1, ENOENT = 2, ESRCH = 3, EINTR = 4, EIO = 5, ENXIO = 6, E2BIG = 7, ENOEXEC = 8, EBADF = 9, ECHILD = 10, EDEADLK = 11, ENOMEM = 12, EACCES = 13, EFAULT = 14, ENOTBLK = 15, EBUSY = 16, EEXIST = 17, EXDEV = 18, ENODEV = 19, ENOTDIR = 20, EISDIR = 21, EINVAL = 22, ENFILE = 23, EMFILE = 24, ENOTTY = 25, ETXTBSY = 26, EFBIG = 27, ENOSPC = 28, ESPIPE = 29, EROFS = 30, EMLINK = 31, EPIPE = 32, EDOM = 33, ERANGE = 34, EAGAIN = 35, EWOULDBLOCK = 35, EINPROGRESS = 36, EINPROGRESS = 36, EALREADY = 37, ENOTSOCK = 38, EDESTADDRREQ = 39, EMSGSIZE = 40, EPROTOTYPE = 41, ENOPROTOOPT = 42, EPROTONOSUPPORT = 43, ESOCKTNOSUPPORT = 44, ENOTSUP = 45, EAFNOSUPPORT = 47, EADDRINUSE = 48, EADDRNOTAVAIL = 49, ENETDOWN = 50, ENETUNREACH = 51, ENETRESET = 52, ECONNABORTED = 53, ECONNRESET = 54, ENOBUFS = 55, EISCONN = 56, ENOTCONN = 57, ESHUTDOWN = 58, ETOOMANYREFS = 59, ETIMEDOUT = 60, ECONNREFUSED = 61, ELOOP = 62, ENAMETOOLONG = 63, EHOSTDOWN = 64, EHOSTUNREACH = 65, ENOTEMPTY = 66, EPROCLIM = 67, EUSERS = 68, EDQUOT = 69, ESTALE = 70, EREMOTE = 71, EBADRPC = 72, ERPCMISMATCH = 73, EPROGUNAVAIL = 74, EPROGMISMATCH = 75, EPROCUNAVAIL = 76, ENOLCK = 77, ENOSYS = 78, EFTYPE = 79, EAUTH = 80, ENEEDAUTH = 81, EPWROFF = 82, EDEVERR = 83, EOVERFLOW = 84, EBADEXEC = 85, EBADARCH = 86, EBADMACHO = 88, ECANCELED = 89, EIDRM = 90, ENOMSG = 91, EILSEQ = 92, ENOATTR = 93, EBADMSG = 94, EMULTIHOP = 95, ENODATA = 96, ENOLINK = 97, ENOSR = 98, ENOSTR = 99, EPROTO = 100, ETIME = 101, ENOPOLICY = 103, ENOTRECOVERABLE = 104, EOWNERDEAD = 105, EQFULL = 106, ELAST = 106, 
    ),
);
// TODO: check what these are on linux.
CLOCK_REALTIME :: 0;
CLOCK_THREAD_CPUTIME_ID :: 16;
CLOCK_MONOTONIC :: 6;
fn uname(buf: *MacosLibc.Utsname) voidResult #libc;
fn readdir(dirp: *Dir) *MacosLibc.DirEnt #link_rename(append_inode64_on_applex8664) #libc;  // TODO: nullable niche 

fn pthread_jit_write_protect_np(executable_on_current_thread: bool) void #libc;

// I think anything arm64 will need some equivilent of this but these names are specific to apple's libc?
fn sys_icache_invalidate(start: rawptr, len: i64) void #libc;
fn sys_dcache_flush(start: rawptr, len: i64) void #libc;

////////////////
/// Objective C
// https://opensource.apple.com/source/objc4/objc4-709/runtime/runtime.h.auto.html
// https://opensource.apple.com/source/objc4/objc4-706/runtime/objc.h.auto.html
// TODO: this could be seperate from macos but my impression is that nobody else uses it. 

ObjCClass    :: @struct(_: rawptr);
ObjCObject   :: @struct(isa: ObjCClass);
ObjCId       :: *ObjCObject;
ObjCSelector :: @struct(_: rawptr);

// TODO: fix loop trying to compile if no driver to supply these. 
fn objc_msgSend() void #import("objc");  // this is magic! use it by casting to a function pointer of the right type
fn objc_getClass(name: CStr) ObjCClass #import("objc");
fn sel_getUid(name: CStr) ObjCSelector #import("objc");
fn objc_allocateClassPair(superclass: ObjCClass, name: CStr, extraBytes: i64) ObjCClass #import("objc");
fn objc_registerClassPair(cls: ObjCClass) void #import("objc");
// imp is a function pointer (reciever, selector, <any other args>)
fn class_addMethod(cls: ObjCClass, name: ObjCSelector, imp: rawptr, types: CStr) bool #import("objc"); 

// This makes a point of forcing all selectors (method + param names) to be constant,
// so the calls to sel_getUid could (in theory) be batched at program startup. 
fn objc_msg(ret_reciever_arg_pattern: FatExpr) FatExpr #macro = {
    a := ret_reciever_arg_pattern;
    @ct_assert(a.expr&.is(.Tuple), a.loc, "@objc_msg expected 3 args");
    parts := a.expr.Tuple&;
    @ct_assert(parts.len == 3, a.loc, "@objc_msg expected 3 args");
    
    ret_ty      := const_eval_type(parts[0]);
    reciever    := compile_ast(parts[1]);
    arg_pattern := parts[2];
    
    args_type: List(Type) = list(temp());
    args_type&.push(reciever.ty);
    args_type&.push(ObjCSelector);
    args: List(FatExpr) = list(ast_alloc());
    args&.push(reciever);
    args&.push(@{ panic("this will be replaced with the selector uid") });
    selector: List(u8) = list(ast_alloc());
    
    @ct_assert(arg_pattern.expr&.is(.StructLiteralP), arg_pattern.loc, "expected struct literal for @objc_msg. use (selector = ()) to pass no arguments.");
    p := arg_pattern.expr.StructLiteralP&;
    each p.bindings { b |
        name := or b.ident() {
            compile_error("Expected param name", p.loc)
        };
        value := b.default;
        ::tagged(Values);
        is_void := value.expr&.is(.Value) && value.expr.Value.bytes&.is(.Small) && value.expr.Value.bytes.Small._1 == 0;
        if p.bindings.len == 1 && is_void {
            selector&.push_all(name.str());  
        } else {
            @fmt(selector&, "%:", name.str());
            value := compile_ast(value);
            args&.push(value);
            args_type&.push(value.ty);
        };
    };
    
    arg_ty := Ty(args_type.items());
    selector := selector.items().sym().c_str();
    // TODO: you don't want to call this every time, but you can't do it at comptime.  :SLOW
    args[1] = @{ sel_getUid(@[@literal selector]) };  
    arg_pattern.expr = (Tuple = args.as_raw());
    arg_pattern.ty = UnknownType;
    arg_pattern.done = false;
    @{
        f := @run assume_types_fn(@[@literal arg_ty], @[@literal ret_ty], @as(rawptr) @as(FnPtr(void, void)) objc_msgSend);
        f(@[arg_pattern])
    }
}
