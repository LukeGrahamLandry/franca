fn _NSGetArgc() *i64 #libc;
fn _NSGetArgv() **CStr #libc;
fn _NSGetExecutablePath(buf: *u8, len: *i64) voidResult #libc;

Utsname    :: @struct(
    sysname : Array(u8, 256),
    nodename: Array(u8, 256),
    release : Array(u8, 256),
    version : Array(u8, 256),
    machine : Array(u8, 256),
);
DirEnt :: @struct(
    d_ino: u64, 
    d_seekoff: u64, 
    d_reclen: u16, 
    d_namlen: u16, 
    d_type: DirEntType, 
    d_name: Array(u8, 255)
);
MapFlag :: @enum(i64) (Private = 2, Anonymous = 4096, Jit = 2048, Fixed = 16);
OpenFlag :: @enum(i64) (Read = 0, Write = 1, ReadWrite = 2, Create = 512, Truncate = 1024, Append = 8);
AT_FDCWD :: @as(Fd) (fd = -2);

ErrNo :: @enum(i32) (
    EPERM = 1, ENOENT = 2, ESRCH = 3, EINTR = 4, EIO = 5, ENXIO = 6, E2BIG = 7, ENOEXEC = 8, 
    EBADF = 9, ECHILD = 10, EDEADLK = 11, ENOMEM = 12, EACCES = 13, EFAULT = 14, ENOTBLK = 15, 
    EBUSY = 16, EEXIST = 17, EXDEV = 18, ENODEV = 19, ENOTDIR = 20, EISDIR = 21, EINVAL = 22, 
    ENFILE = 23, EMFILE = 24, ENOTTY = 25, ETXTBSY = 26, EFBIG = 27, ENOSPC = 28, ESPIPE = 29, 
    EROFS = 30, EMLINK = 31, EPIPE = 32, EDOM = 33, ERANGE = 34, EAGAIN = 35, EWOULDBLOCK = 35, 
    EINPROGRESS = 36, EALREADY = 37, ENOTSOCK = 38, EDESTADDRREQ = 39, EMSGSIZE = 40, EPROTOTYPE = 41, 
    ENOPROTOOPT = 42, EPROTONOSUPPORT = 43, ESOCKTNOSUPPORT = 44, ENOTSUP = 45, EAFNOSUPPORT = 47,
    EADDRINUSE = 48, EADDRNOTAVAIL = 49, ENETDOWN = 50, ENETUNREACH = 51, ENETRESET = 52, 
    ECONNABORTED = 53, ECONNRESET = 54, ENOBUFS = 55, EISCONN = 56, ENOTCONN = 57, ESHUTDOWN = 58, 
    ETOOMANYREFS = 59, ETIMEDOUT = 60, ECONNREFUSED = 61, ELOOP = 62, ENAMETOOLONG = 63, 
    EHOSTDOWN = 64, EHOSTUNREACH = 65, ENOTEMPTY = 66, EPROCLIM = 67, EUSERS = 68,
    EDQUOT = 69, ESTALE = 70, EREMOTE = 71, EBADRPC = 72, ERPCMISMATCH = 73, EPROGUNAVAIL = 74,
    EPROGMISMATCH = 75, EPROCUNAVAIL = 76, ENOLCK = 77, ENOSYS = 78, EFTYPE = 79, EAUTH = 80,
    ENEEDAUTH = 81, EPWROFF = 82, EDEVERR = 83, EOVERFLOW = 84, EBADEXEC = 85, EBADARCH = 86, 
    EBADMACHO = 88, ECANCELED = 89, EIDRM = 90, ENOMSG = 91, EILSEQ = 92, ENOATTR = 93, EBADMSG = 94, 
    EMULTIHOP = 95, ENODATA = 96, ENOLINK = 97, ENOSR = 98, ENOSTR = 99, EPROTO = 100, ETIME = 101,
    ENOPOLICY = 103, ENOTRECOVERABLE = 104, EOWNERDEAD = 105, EQFULL = 106, ELAST = 106, 
);

// TODO: check what these are on linux.
CLOCK_REALTIME :: 0;
CLOCK_THREAD_CPUTIME_ID :: 16;
CLOCK_MONOTONIC :: 6;
fn uname(buf: *MacosLibc.Utsname) voidResult #libc;
fn readdir(dirp: *Dir) *MacosLibc.DirEnt #link_rename(append_inode64_on_applex8664) #libc;  // TODO: nullable niche 

fn pthread_jit_write_protect_np(executable_on_current_thread: bool) void #libc;

// I think anything arm64 will need some equivilent of this but these names are specific to apple's libc?
fn sys_icache_invalidate(start: rawptr, len: i64) void #libc;
fn sys_dcache_flush(start: rawptr, len: i64) void #libc;

fn name(self: *MacosLibc.DirEnt) Str = (ptr = self.d_name&.as_ptr(), len = self.d_namlen.zext());

fn stat(path: CStr, stat: *Stat) voidResult #libc;

Stat :: @struct {
    dev: i32;
    mode: u16;
    nlink: u16;
    ino: u64;
    uid: u32;
    gid: u32;
    rdev: i32;
    atime: TimeSpec;
    mtime: TimeSpec;
    ctime: TimeSpec;
    birthtime: TimeSpec;
    size: i64;
    blocks: i64;
    blksize: i32;
    flags: u32;
    gen: u32;
    __: Array(i64, 2);
};

//
// Structs for signal handlers
//

fn sigaction(signum: SignalNum, nullable_act: *SigAction, nullable_oldact: *SigAction) voidResult #libc;

SignalHandler :: @FnPtr(s: i64, info: *SigInfo, ctx: *UContext) void;

SigAction :: @struct(
    // on macos `sa_sigaction` is a union with `sa_handler: @FnPtr(s: i32) void`
    sigaction: SignalHandler,
    mask: sigset_t,
    flags: i32,
    // "The sa_restorer field is not intended for application use. (POSIX does not specify a sa_restorer field.)"
    // macos doesn't use this, but linux (musl) does so you it can't just be garbage (the value it puts in nullable_oldact should be preserved, not just garbage from the stack),
    // doing this makes the `catch_signal` test not segsev. 
    // but since its passed by pointer its fine if this struct is bigger than the os expects on macos. 
    __sa_restorer := 0,
);

UContext :: @rec @struct(
    onstack: i32,
    sigmask: i32,
    stack: SigAltStack,
    link: *UContext,
    mc_size: i64,  // size_of(mc[])
    mc: *@union(arm64: Arm64MachineContext, amd64: Amd64MachineContext),
);

SigAltStack :: @struct(
    sp: rawptr,
    size: i64,
    flags: i32,
);

Arm64MachineContext :: @struct(
    exception: Arm64ExceptionContext, 
    thread: Arm64ThreadState,
    neon: Arm64NeonState,
    // neon.fp is supposed to be an array of __uint128_t which is 16 byte aligned, 
    // (and the offset happens to work out without the compiler knowing that) but 
    // the whole struct's size needs to be a multiple of 16 to match `mc_size`. 
    _align_padding := 0,
);

Arm64ExceptionContext :: @struct(
    far: u64,
    esr: u32,
    exception: u32,
);

Arm64ThreadState :: @struct(
    gp: Array(rawptr, 29),  // r0-r28
    fp: rawptr,
    lr: rawptr,
    sp: rawptr,
    pc: rawptr,
    cpsr: u32,
    flags: u32,
);

Arm64NeonState :: @struct(
    fp: Array(Ty(f64, f64), 32),  // [32] __uint128_t
    fpsr: u32,
    fpcr: u32,
);

Amd64MachineContext :: @struct(
    exception: Amd64ExceptionContext, 
    thread: Amd64ThreadState,
    float: Amd64FloatState,
);

Amd64ExceptionContext :: @struct(
    trap: u16,
    cpu: u16,
    err: u32,
    fault_addr: u64,
);

// note that the old registers are not in encoding order. 
// why do we live in fucking crazy town bro? 
Amd64ThreadState :: @struct(
    rax: rawptr,
    rbx: rawptr,
    rcx: rawptr,
    rdx: rawptr,
    rdi: rawptr,
    rsi: rawptr,
    rbp: rawptr,
    rsp: rawptr,
    hi: Array(rawptr, 8), // r8-r15
    rip: rawptr,
    rflags: rawptr,
    cs: rawptr,
    fs: rawptr,
    gs: rawptr,
);

Amd64FloatState :: @struct(
    _todo: Array(u8, 1032 - 184),
);
