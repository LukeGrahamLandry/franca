//! The standard library often provides more ergonomic wrappers of these,
//! that will also be implemented on platforms that don't have a standard libc (like wasm in the browser). 

Fd :: @struct(fd: u32); // TODO: i32. <0 means error.
fn open(null_terminated_path: CStr, flags: i64) Fd #libc;
fn read(fd: Fd, buf: Ptr(u8), size: i64) i64 #libc;
fn write(fd: Fd, buf: Ptr(u8), size: i64) i64 #libc;
fn close(fd: Fd) i64 #libc;

DlHandle :: @struct(lib: rawptr);
fn dlopen(name: CStr, flag: i64) DlHandle #libc;
fn dlsym(lib: DlHandle, name: CStr) rawptr #libc;
fn dlclose(lib: DlHandle) i64 #libc;

fn malloc(size: usize) rawptr #libc;
fn free(ptr: rawptr) Unit #libc;
fn mmap(addr: rawptr, len: i64, prot: i64, flags: i64, fd: Fd, offset: i64) rawptr #libc;
fn munmap(addr: rawptr, len: i64) i64 #libc;
fn mprotect(addr: rawptr, len: i64, prot: i64) i64 #libc;

fn exit(status: i64) Never #libc;
fn abort() Never #libc;
fn system(null_terminated_cmd: CStr) i64 #libc;
fn rand() i64 #libc;
fn get_errno() i64 #libc;
fn usleep(micro_seconds: u32) Unit #libc;
fn memcpy(dest: rawptr, src: rawptr, n: i64) i64 #libc;

TimeSpec :: @struct(seconds: i64, nanoseconds: i64);
fn clock_gettime(clock_id: i64, time_spec: *TimeSpec) Unit #libc;

// TODO: use this instead of exporting functions from the compiler.
Terminos :: @struct(iflag: u64, oflag: u64, cflag: u64, lflag: u64, cc: Array(u8, 20), ispeed: u64, ospeed: u64);
fn tcgetattr(fd: Fd, out: *Terminos) Unit #libc;
fn tcsetattr(fd: Fd, optional_actions: i64, in: *Terminos) Unit #libc;

// TODO: #when(TARGET_ARCH.eq(.Aarch64))
fn __clear_cache(beg: rawptr, beg: rawptr) Unit #libc #aarch64;

// TODO: #when(TARGET_OS.eq(.Macos))
fn _NSGetArgc() *i64 #libc;
fn _NSGetArgv() **CStr #libc;
