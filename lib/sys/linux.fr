
// TODO: these are for musl. do other libcs use different lengths?
Utsname    :: @struct(
    sysname: Array(u8, 65),
    nodename: Array(u8, 65),
    release: Array(u8, 65),
    version: Array(u8, 65),
    machine: Array(u8, 65),
    __domainname: Array(u8, 65),
);
DirEnt :: @struct(
    d_ino: u64, 
    d_seekoff: u64, 
    d_reclen: u16, 
    d_type: DirEntType, 
    d_name: Array(u8, 256),
);
MapFlag :: @enum(i64) (Private = 2, Anonymous = 32, Jit = 0);
OpenFlag :: @enum(i64) (Read = 0, Write = 1, ReadWrite = 2, Create = 64, Truncate = 512, Append = 1024);
AT_FDCWD :: @as(Fd) (fd = -100);

MAP :: @struct {
    ANON    :: 32;
    JIT     :: 0;  // linux allows W+X memory so this is a no-op
};

O :: @struct {
    CREAT     :: 0x0000040;
    EXCL      :: 0x0000080;
    NOCTTY    :: 0x0000100;  
    TRUNC     :: 0x0000200;
    APPEND    :: 0x0000400;
    DIRECTORY :: 0x0010000;
    NOFOLLOW  :: 0x0020000;
    CLOEXEC   :: 0x0080000; 
};

// TODO: it would be more sane to mark this #libc but (compile bug)            HACK
//       i redeclare the symbol in the ir for aot with get_smuggled_libc_function if it doesn't match the target.  -- Sep 17
fn uname(buf: *Utsname) voidResult #redirect(*MacosLibc.Utsname, voidResult);

Stat :: @struct {
    st_dev: i64;
    st_ino: i64;
    st_nlink: i64;
    st_mode: u32;
    st_uid: u32;
    st_gid: u32;
    __: u32;
    st_rdev: i64;
    st_size: i64;
    st_blksize: i64;
    st_blocks: i64;
    st_atime: TimeSpec;
    st_mtime: TimeSpec;
    st_ctime: TimeSpec;
    _: Array(i64, 3);
};

fn fix(d: *Posix.Stat, s: *Stat) void = {
    d.st_dev = s.st_dev;
    d.st_mode = s.st_mode;  // TODO
    d.st_nlink = s.st_nlink;
    d.st_ino = s.st_ino;
    d.st_uid = s.st_uid;
    d.st_gid = s.st_gid;
    d.st_atime = s.st_atime;
    d.st_mtime = s.st_mtime;
    d.st_mtime = s.st_mtime;
    d.st_ctime = s.st_ctime;
    d.st_size = s.st_size;
    d.st_blocks = s.st_blocks;
    d.st_blksize = s.st_blksize;
}

Posix :: import("@/lib/sys/posix.fr");

fn slowly_get_cli_args_from_proc_self(alloc: Alloc) []CStr = { // :Leak
    // can't use read_to_string because you can't seek the magic /proc things? 
    out: List(u8) = list(4096, alloc); // :Leak
    path :: @as(CStr) "/proc/self/cmdline";
    f := open_read(path).unwrap();
    loop {
        continue :: local_return;
        read_len := read(f, out.maybe_uninit.ptr.offset(out.len), out.maybe_uninit.len - out.len);
        if read_len.is_ok() {
            len := read_len.unwrap();
            out.len += len;
            if len != 0 {
                continue();
            };
        }; // else i sure hope we're done... TODO: return error? unwrap it?
        
        close(f); // TODO: defer
        
        // if we're gonna be slow we might as well be super :slow fixme fixme fixme
        args: List(CStr) = list(4096, alloc); // :Leak
        
        while => out.len != 0 {
            s: CStr = (ptr = out.maybe_uninit.ptr);
            args&.push(s);
            len := s.str().len() + 1;
            out.maybe_uninit.ptr = out.maybe_uninit.ptr.offset(len);
            out.len -= len;
        }; 
        
        return(args.items());
    }
}

get_executable_path :: fn(a: Alloc) Str = {
    path :: @as(CStr) "/proc/self/exe";
    out: List(u8) = list(128, a);
    if !read_link(path, out&) {
        // TODO: return error!!
        panic("error readlink /proc/self/exe I really hope you're using a broken emulator")
    };
    return(out.items());
};

sys_clone :: fn(stack: []u8, callee: @FnPtr(userdata: rawptr) void, userdata: rawptr) i32 = {
    // CLONE_PTRACE is 0x2000 and i feel like i want it? but blink doesn't like it. 
    clone_flags :: 0x80050F00; // CLONE_FILES | CLONE_FS | CLONE_IO | CLONE_THREAD | CLONE_VM | CLONE_SIGHAND | CLONE_SYSVSEM
    use_clone3 :: false;  // I'd rather do this but blink doesn't do clone3()
    ::if(i32);
    result := if use_clone3 {
        Clone :: @struct {
            flags: i64;
            pidfd: *i32;
            child_tid: *pid_t;
            parent_tid: *pid_t;
            exit_signal: i64;
            stack: []u8;
            tls: i64;
            set_tid: []pid_t;
            cgroup: i64;
        };
        arg: Clone = zeroed Clone;
        arg.flags = clone_flags;
        arg.stack = stack;
        
        clone3 :: fn(arg: *Clone, size: i64) pid_t #syscall(435, 435, NOSYS);
        clone3(arg&, size_of(Clone))
    } else {
        clone :: fn(flags: i64, stack: *u8, p: i64, c: i64, t: i64) pid_t #syscall(220, 56, NOSYS);
        clone(clone_flags, stack.ptr.offset(stack.len), 0, 0, 0)
    };
    if result < 0 {
        @panic("failed to clone thread %.", result);
    };
    if result == 0 {  // Child
        callee(userdata);
        exit_thread :: fn(status: i64) Never #syscall(93, 60, NOSYS);
        exit_thread(0);
    };
    // else, Parent
    result
};

LandLock :: @struct {
    // TODO: have a nice BitFlags type like @bit_fields (then remove #flags below. it doesn't do anything)
    Fs :: @enum(i64) (
        Execute, WriteFile, 
        ReadFile, ReadDir, RemoveDir, RemoveFile, 
        MakeChar, MakeDir, MakeReg, MakeSock, MakeFifo, MakeBlock, MakeSym, 
        Refer, Truncate, IoctlDev,
    );
    Net   :: @enum(i64) (BindTcp, ConnectTcp);
    Scope :: @enum(i64) (AbstractUnixSocket, Signal);
    
    Create   :: @enum(u32) (Version, Errata);
    Restrict :: @enum(u32) (LogSameExecOff, LogSameExecOn, LogSubdomainsOff);

    // TODO: have a way for an @tagged so change it's calling convention to splat the tag out as a seperate argument
    PathBeneathAttr :: @struct(flags: i64 #flags(Fs), parent: Fd);
    NetPortAttr     :: @struct(flags: i64 #flags(Net), port: u64); 
    RuleAttr :: @union(path_beneath: PathBeneathAttr, net_port: NetPortAttr);
    RuleType :: @enum(u32) (PathBeneath = 1, NetPort = 2);
    
    RuleSetAttr :: @struct {
        handled_access_fs: i64 #flags(Fs);
        handled_access_net: i64 #flags(Net);
        scope: i64 #flags(Scope);
    };
    
    create_ruleset :: fn(attr: *RulesetAttr, size: i64, flags: u32 #flags(Create)) FdResult #syscall(444, 444, _);
    add_rule       :: fn(ruleset: Fd, rule_type: RuleType, rule_attr: *RuleAttr, flags: u32) voidResult #syscall(445, 445, _);
    restrict_self  :: fn(ruleset: Fd, flags: u32 #flags(Restrict)) voidResult #syscall(446, 446, _);
};
