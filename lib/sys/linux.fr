
LinuxLibc :: @struct(
    // TODO: these are for musl. do other libcs use different lengths?
    Utsname    :: @struct(
        sysname: Array(u8, 65),
        nodename: Array(u8, 65),
        release: Array(u8, 65),
        version: Array(u8, 65),
        machine: Array(u8, 65),
        __domainname: Array(u8, 65),
    ),
    DirEnt :: @struct(
        d_ino: u64, 
        d_seekoff: u64, 
        d_reclen: u16, 
        d_type: DirEntType, 
        d_name: Array(u8, 256),
    ),
    MapFlag :: @enum(i64) (Private = 2, Anonymous = 32, Jit = 0),
    OpenFlag :: @enum(i64) (Read = 0, Write = 1, ReadWrite = 2, Create = 64, Truncate = 512, Append = 1024),
);

// TODO: it would be more sane to mark this #libc but (compile bug)            HACK
//       i redeclare the symbol in the ir for aot with get_smuggled_libc_function if it doesn't match the target.  -- Sep 17
fn uname(buf: *LinuxLibc.Utsname) voidResult #redirect(*MacosLibc.Utsname, voidResult);

fn readdir(dirp: *Dir) *LinuxLibc.DirEnt #libc;  // TODO: nullable niche 

fn slowly_get_cli_args_from_proc_self(alloc: Alloc) []CStr = { // :Leak
    // can't use read_to_string because you can't seek the magic /proc things? 
    out: List(u8) = list(4096, alloc); // :Leak
    path :: "/proc/self/cmdline".sym().c_str();
    f := open_read(path).unwrap();
    loop {
        continue :: local_return;
        read_len := read(f, out.maybe_uninit.ptr.offset(out.len), out.maybe_uninit.len - out.len);
        if read_len.is_ok() {
            len := read_len.unwrap();
            out.len += len;
            if len != 0 {
                continue();
            };
        }; // else i sure hope we're done... TODO: return error? unwrap it?
        
        close(f); // TODO: defer
        
        // if we're gonna be slow we might as well be super :slow fixme fixme fixme
        args: List(CStr) = list(4096, alloc); // :Leak
        
        while => out.len != 0 {
            s: CStr = (ptr = out.maybe_uninit.ptr);
            args&.push(s);
            len := s.str().len() + 1;
            out.maybe_uninit.ptr = out.maybe_uninit.ptr.offset(len);
            out.len -= len;
        }; 
        
        return(args.items());
    }
}
