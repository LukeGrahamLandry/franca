
// TODO: these are for musl. do other libcs use different lengths?
Utsname    :: @struct(
    sysname: Array(u8, 65),
    nodename: Array(u8, 65),
    release: Array(u8, 65),
    version: Array(u8, 65),
    machine: Array(u8, 65),
    __domainname: Array(u8, 65),
);
DirEnt :: @struct(
    d_ino: u64, 
    d_seekoff: u64, 
    d_reclen: u16, 
    d_type: DirEntType, 
    d_name: Array(u8, 256),
);
MapFlag :: @enum(i64) (Private = 2, Anonymous = 32, Jit = 0);
OpenFlag :: @enum(i64) (Read = 0, Write = 1, ReadWrite = 2, Create = 64, Truncate = 512, Append = 1024);
AT_FDCWD :: @as(Fd) (fd = -100);

// TODO: it would be more sane to mark this #libc but (compile bug)            HACK
//       i redeclare the symbol in the ir for aot with get_smuggled_libc_function if it doesn't match the target.  -- Sep 17
fn uname(buf: *LinuxLibc.Utsname) voidResult #redirect(*MacosLibc.Utsname, voidResult);

fn readdir(dirp: *Dir) *LinuxLibc.DirEnt #libc;  // TODO: nullable niche 

fn slowly_get_cli_args_from_proc_self(alloc: Alloc) []CStr = { // :Leak
    // can't use read_to_string because you can't seek the magic /proc things? 
    out: List(u8) = list(4096, alloc); // :Leak
    path :: @as(CStr) "/proc/self/cmdline";
    f := open_read(path).unwrap();
    loop {
        continue :: local_return;
        read_len := read(f, out.maybe_uninit.ptr.offset(out.len), out.maybe_uninit.len - out.len);
        if read_len.is_ok() {
            len := read_len.unwrap();
            out.len += len;
            if len != 0 {
                continue();
            };
        }; // else i sure hope we're done... TODO: return error? unwrap it?
        
        close(f); // TODO: defer
        
        // if we're gonna be slow we might as well be super :slow fixme fixme fixme
        args: List(CStr) = list(4096, alloc); // :Leak
        
        while => out.len != 0 {
            s: CStr = (ptr = out.maybe_uninit.ptr);
            args&.push(s);
            len := s.str().len() + 1;
            out.maybe_uninit.ptr = out.maybe_uninit.ptr.offset(len);
            out.len -= len;
        }; 
        
        return(args.items());
    }
}

LandLock :: @struct {
    // TODO: have a nice BitFlags type like @bit_fields (then remove #flags below. it doesn't do anything)
    Fs :: @enum(i64) (
        Execute, WriteFile, 
        ReadFile, ReadDir, RemoveDir, RemoveFile, 
        MakeChar, MakeDir, MakeReg, MakeSock, MakeFifo, MakeBlock, MakeSym, 
        Refer, Truncate, IoctlDev,
    );
    Net   :: @enum(i64) (BindTcp, ConnectTcp);
    Scope :: @enum(i64) (AbstractUnixSocket, Signal);
    
    Create   :: @enum(u32) (Version, Errata);
    Restrict :: @enum(u32) (LogSameExecOff, LogSameExecOn, LogSubdomainsOff);

    // TODO: have a way for an @tagged so change it's calling convention to splat the tag out as a seperate argument
    PathBeneathAttr :: @struct(flags: i64 #flags(Fs), parent: Fd);
    NetPortAttr     :: @struct(flags: i64 #flags(Net), port: u64); 
    RuleAttr :: @union(path_beneath: PathBeneathAttr, net_port: NetPortAttr);
    RuleType :: @enum(u32) (PathBeneath = 1, NetPort = 2);
    
    RuleSetAttr :: @struct {
        handled_access_fs: i64 #flags(Fs);
        handled_access_net: i64 #flags(Net);
        scope: i64 #flags(Scope);
    };
    
    create_ruleset :: fn(attr: *RulesetAttr, size: i64, flags: u32 #flags(Create)) FdResult #syscall(444, 444, _);
    add_rule       :: fn(ruleset: Fd, rule_type: RuleType, rule_attr: *RuleAttr, flags: u32) voidResult #syscall(445, 445, _);
    restrict_self  :: fn(ruleset: Fd, flags: u32 #flags(Restrict)) voidResult #syscall(446, 446, _);
};
