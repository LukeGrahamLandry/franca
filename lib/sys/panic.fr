PANIC_HOOK :: @static(@FnPtr(msg: Str) Never);
IS_PANICKING :: @static(bool);
::{ IS_PANICKING[] = false; };

fn panic(msg: Str) Never = {
    is_panicking := IS_PANICKING;
    if(is_panicking[], => { abort(); });
    is_panicking[] = true;
    
    hook := get_panic_hook();
    hook[](msg);
    unreachable()  // TODO: bc_to_asm handle fnptr returning never correctly -- May 23
}

fn get_panic_hook() *@FnPtr(msg: Str) Never #no_inline = PANIC_HOOK;

fn unreachable() Never = panic("Entered unreachable code.");
fn unreachable(msg: Str) Never = {
    msg := concat("Entered unreachable code.", msg, temp());
    panic(msg.items())
}

fn unreachable_hack(const T: Type) T #generic = {
    unreachable();
    T.uninitialized()
}

fn print_and_abort(msg: Str) Never = {
    println(msg);
    abort()
}

fn print_trace_and_abort(msg: Str) Never = {
    @println("Panicked: %", msg);
    walk_backtrace{f|
        print("- ");
        @match(f) {
            (fn Rust(rs) => { 
                // TODO: why is *const u8 turning into *i8
                name: Str = rs.owned_name;
                if(rs.line.ne(1.neg())){|
                    @println("[line %] %", rs.line, name); 
                }{|
                    @println("[] %", name); 
                };
            });
            (fn Franca(f) => { @println("%", f.name); });
            (fn Unknown(ip) => { @println("[ip=%] ???", AsmInst.int_from_ptr(ip)); });
        };
    };
    abort()
}

fn new_print_trace_and_abort(msg: Str) Never = {
    @println("Panicked: %", msg);
    
    // TODO: constant fold
    if RUNTIME_STACK_TRACE {|
        ctx := get_context();
        for ctx.stack_trace { f_index |
            s := get_debug_name(f_index);
            @println("- %", s);
        };
    };
    
    abort()
}

fn print_stacktrace_on_panic() void = {
    get_panic_hook()[] = print_trace_and_abort;
}

:: {
    get_panic_hook()[] = print_and_abort;
};

fn todo() Never = panic("Not Yet Implemented");

// TODO: can't do this because of circular dependency. 
//       in List it needs to call the other assert which means it needs the types of the whole overload set so it needs to compile List$i64
fn assert(cond: bool, const msg: Fn(void, List(u8))) void = {
    if(cond.not()){|
        msg := msg();
        msg: Str = msg&.items();
        panic(msg);
    }
}

fn assert(cond: bool, msg: Str) void = {
    if(cond.not()) {|
        panic(msg); // TODO: fix overload resolution so this doesn't need the semi colon to turn Never to void
    }
}

ASSERTIONS_PASSED :: @static(i64);

// TODO: why can't I #c_call
// Note: this is a magic name the rust code looks for. 
#when(COUNT_ASSERT)
fn __get_assertions_passed() i64 = ASSERTIONS_PASSED[];

// This gets propagated so it doesn't have to compile all the formatting stuff if its false which makes the tiny tests compile faster. 
VERBOSE_ASSERT :: true; 
ASSERT_SHOW_SOURCE :: true;
COUNT_ASSERT   :: true; 

// TODO: maybe call this expect_eq to distinguish from a normal assert_eq that isn;t limmited to one call per lexical occurance in a test. 
fn assert_eq(const T: Type) void = {
    // TODO: unhelpful error message when there's no fn eq for T. -- Apr 27
    fn assert_eq(lhs: T, rhs: T) void = {
        (::VERBOSE_ASSERT, => assert(lhs.eq(rhs)) { ()List(u8) |
            out: List(u8) = list(40, temp());
            @fmt(out&, "Assertion Failed. Expected (% == %)", lhs, rhs);  // TODO: version of @fmt that makes the list for you and returns it. 
            out
        }, => {
            assert(lhs.eq(rhs), "assertion failed");
        })!if;
        
        (::COUNT_ASSERT, => {
            ASSERTIONS_PASSED[] = ASSERTIONS_PASSED[].add(1);
        }, =>())!if;
    }
}

::assert_eq(i64);
::assert_eq(bool);
::assert_eq(Type);
::assert_eq(Symbol);
::assert_eq(f64);
::assert_eq(Str);

// @assert(true);
// @assert(true, "info %", 123);
fn assert(arg: FatExpr) FatExpr #macro = {
    arg := compile_ast(arg);
    arg_err :: "@assert expected '(cond, fmt_string, args)'";
    assert(!(arg.ty == bool), "TODO: single arg assert"); // TODO: auto overload ne
    assert(arg.expr&!tag[] == tag_value(Expr, @symbol Tuple), arg_err);
    parts := arg.expr.Tuple.items();
    assert(parts.len >= 2, arg_err);
    assert(parts[1].ty == Str, arg_err);
    
    if parts.len == 2 {|
        'assert(@[parts[0]], @[parts[1]])'
    } {|
        cond := parts[0];
        'if(!@[cond]){|
            out: List(u8) = list(temp());
            out&.push_all("Assertion Failed: ");
            @[format_into('out&', parts.rest(1), arg.loc)];
            panic(out.items());
        }'
    }
}

fn assert_eq(arg: FatExpr) FatExpr #macro = assert_cond(eq, "==", arg);
fn assert_ne(arg: FatExpr) FatExpr #macro = assert_cond(ne, "!=", arg);
fn assert_le(arg: FatExpr) FatExpr #macro = assert_cond(le, "<=", arg);
fn assert_ge(arg: FatExpr) FatExpr #macro = assert_cond(ge, ">=", arg);

fn assert_cond(const overload_set: OverloadSet, op: Str, arg: FatExpr) FatExpr = {
    assert(arg.expr&!tag[] == tag_value(Expr, @symbol Tuple), "@assert___ expected multiple args");
    parts := arg.expr.Tuple.items();
    @{
        lhs := @[parts[0]];
        rhs := @[parts[1]];
        // TODO: pass #cold to the backend or out-line the function or something
        // TODO: maually outline assertion_failed when not ASSERT_SHOW_SOURCE because its so easy and happens so much? 
        if not(@[@literal overload_set](lhs, rhs)) { #cold |
            out: List(u8) = list(temp());
            out&.push_all("Assertion Failed. ");
            
            @[if(parts.len == 3, => @{
                out&.push_all(@[parts[2]]);
            }, => @{()} )];
            @[if(parts.len > 3, => {
                format_into('out&', parts.rest(2), arg.loc)
            }, => @{()} )];
            
            // TODO: you can't '@h(a)' because it starts parsing a trailing expr after and theres no closing '
            @[if(VERBOSE_ASSERT, => @{
                @fmt(out&, "\n   Expected (% % %). ", lhs, @[@literal op], rhs);
            }, => @{()} )];
            @[if(ASSERT_SHOW_SOURCE, => @{
                @fmt(out&, "\n   LHS: %\n   RHS: %\n ", "TODO: render", "TODO: render");
            }, => @{()} )];
            
            panic(out.items());
        };
    }
}

// TODO: not true anymore
// TODO: this cant just be a no-op because I count that my tests trigger all their assertions.
/// Stupid question, but I guess it's wierd if I don't let you ask.
fn assert_eq(_: void, __: void) void = assert_eq(0, 0);
