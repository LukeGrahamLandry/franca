
fn panic(msg: Str) Never = {
    scary_log("panic! ");
    if get_dynamic_context().is_null() {
        scary_log("panicked without a context: ");
        scary_log(msg); 
        scary_exit();
    };
    hook := get_panic_hook();
    hook_int := ptr_cast_unchecked(*@FnPtr(msg: Str) Never, i64, hook&);
    if hook_int[] == 0 {
        // we panicked before getting to set the handler. 
        scary_log("panicked while panicking or before setting a panic hook.");
        scary_log(msg); 
    } else {
        handler := hook[];
        // you have to remember to reset this yourself if you manage to recover by translating to another language's exception system. 
        // i don't think using panics that way is the best idea but what you do on your own time is none of my business. 
        hook_int[] = 0; // is_panicking = true
        handler(msg);
    };
    scary_log("panic handler returned");
    scary_exit()
}

fn scary_exit() Never = {
    // force a jit-shim because exit() has a weird dependency on @syscall
    impl :: fn() Never = Syscall'exit(1);
    f: (@FnPtr() Never) = impl;
    f()
}

fn get_panic_hook() *(@FnPtr(msg: Str) Never) #noinline = {
    context(DefaultContext)[].panic_hook&
}

fn unreachable() Never = panic("Entered unreachable code.");
fn unreachable(msg: Str) Never = {
    msg := concat("Entered unreachable code.", msg, temp());
    panic(msg.items())
}

fn print_and_exit1(msg: Str) Never = {
    eprintln(msg);
    Syscall'exit(1)  // recall: `fn abort() Never #libc` curses the executable on macos... i don't know whats going on
}

fn todo() Never = panic("Not Yet Implemented");

// inlining this but not panic so you don't spill everything for a tiny check helps debug assertion builds quite a bit -- Nov 26.
fn assert(cond: bool, msg: Str) void #inline = {
    if !cond {
        panic(msg); // TODO: fix overload resolution so this doesn't need the semi colon to turn Never to void
    }
}

fn assert_eq($T: Type) void = {
    // TODO: unhelpful error message when there's no fn eq for T. -- Apr 27
    fn assert_eq(lhs: T, rhs: T) void #inline = {
        if !lhs.eq(rhs) {
            assertion_failed :: fn(lhs: T, rhs: T) Never #noinline = {
                @panic("Assertion Failed. Expected (% == %)", lhs, rhs)
            };
            assertion_failed(lhs, rhs);
        };
    }
}

::assert_eq(i64);
::assert_eq(bool);
::assert_eq(Type);
::assert_eq(Symbol);
::assert_eq(f64);
::assert_eq(Str);

// TODO: would be much faster if i could reliably outline the cold path here
//       it's just a bit painful to get the nice printing. -- Nov 26
// @assert(true);
// @assert(true, "info %", 123);
fn assert(arg: FatExpr) FatExpr #macro = {
    arg := compile_ast(arg);
    arg_err :: "@assert expected '(cond, fmt_string, args)'";
    if arg.ty == bool {
        arg = @{ (@[arg], "Assertion Failed" ) };
        assert(arg.expr&.is(.Block), "unquote repr");
        arg = arg.expr.Block.result[];
        arg = compile_ast(arg);
    };
    @ct_assert(arg.expr&.is(.Tuple), arg.loc, arg_err);
    parts := arg.expr.Tuple.items();
    @ct_assert(parts.len >= 2, arg.loc, arg_err);
    @ct_assert(parts[1].ty == Str, parts[1].loc, "@assert expected second arg to be format string");
    
    if parts.len == 2 {
        @{ assert(@[parts[0]], @[parts[1]]) }
    } {
        cond := parts[0];
        @{ if(!@[cond]) {
            out: List(u8) = list(temp());
            out&.push_all("Assertion Failed: ");
            @[format_into(@{ out& }, parts.rest(1), arg.loc)];
            panic(out.items());
        }}
    }
}

fn assert_eq(arg: FatExpr) FatExpr #macro = assert_cond(eq, "==", arg);
fn assert_ne(arg: FatExpr) FatExpr #macro = assert_cond(ne, "!=", arg);
fn assert_le(arg: FatExpr) FatExpr #macro = assert_cond(le, "<=", arg);
fn assert_ge(arg: FatExpr) FatExpr #macro = assert_cond(ge, ">=", arg);
fn assert_lt(arg: FatExpr) FatExpr #macro = assert_cond(lt,  "<", arg);
fn assert_gt(arg: FatExpr) FatExpr #macro = assert_cond(gt,  ">", arg);

// TODO: stuff it in a pointer when it's small? 
fn display(a: *i32, out: *List(u8)) void = a[].display(out);
fn display(a: *rawptr, out: *List(u8)) void = a[].display(out);
fn display(a: *u64, out: *List(u8)) void = a[].display(out);
fn display(a: *Type, out: *List(u8)) void = a[].display(out);
fn display(a: *u8, out: *List(u8)) void = a[].display(out);
fn display(a: *Symbol, out: *List(u8)) void = a[].display(out);
fn display(a: *f64, out: *List(u8)) void = a[].display(out);
fn display(a: *f32, out: *List(u8)) void = a[].display(out);

fn assert_cond($overload_set: OverloadSet, op: Str, arg: FatExpr) FatExpr = {
    Show :: @FnPtr(rawptr, *List(u8)) void;
    report_erased :: fn(a: rawptr, b: rawptr, $op: Str, msg: Str, show: Show) Never #noinline = {
        out: List(u8) = list(temp());
        out&.push_all(msg);
        out&.push_all("\nAssertion Failed. Expected (");
        show(a, out&);
        out&.push_all(" ");
        out&.push_all(op);
        out&.push_all(" ");
        show(b, out&);
        panic(out.items())
    };
    
    assert(arg.expr&.is(.Tuple), "@assert___ expected multiple args");
    parts := arg.expr.Tuple.items();
    @{
        lhs := @[parts[0]];
        T :: @type lhs;
        rhs: T = @[parts[1]];  // If you allow two different types to pass two display() overloads to report_erased() below. 
        if !@[@literal overload_set](lhs, rhs) {
            // :UpdateBoot
            @[@if(::!IS_BOOTSTRAPPING, @{
                msg := @[if(parts.len == 3, => parts[2], => 
                    if(parts.len < 3, => @literal "", => @{
                        out: List(u8) = list(temp());
                        @[format_into(@{ out& }, parts.rest(2), arg.loc)];
                        out&.items()
                    })
                )];
                
                display_t :: resolve_overload(display, Ty(*T, *List(u8)), void, @[@literal arg.loc]);
                show := bit_cast_unchecked(@FnPtr(*T, *List(u8)) void, Show, display_t);
                report_erased(T.raw_from_ptr(lhs&), T.raw_from_ptr(rhs&), @[@literal op], msg, show);
            }, @{
                out: List(u8) = list(temp());
                out&.push_all("Assertion Failed. ");
                
                @[if(parts.len == 3, => @{
                    out&.push_all(@[parts[2]]);
                }, => @{()} )];
                @[if(parts.len > 3, => {
                    format_into(@{ out& }, parts.rest(2), arg.loc)
                }, => @{()} )];
                
                @fmt(out&, "\n   Expected (% % %). ", lhs, @[@literal op], rhs);
                
                panic(out.items());
            })];
        };
    }
}

fn when_debug_assertions($overload_set: OverloadSet, arg: FatExpr) FatExpr = 
    @if(safety_check_enabled(.DebugAssertions), overload_set(arg), @{});

fn debug_assert(arg: FatExpr) FatExpr #macro = when_debug_assertions(assert, arg);
fn debug_assert_eq(arg: FatExpr) FatExpr #macro = when_debug_assertions(assert_eq, arg);
fn debug_assert_ne(arg: FatExpr) FatExpr #macro = when_debug_assertions(assert_ne, arg);
fn debug_assert_le(arg: FatExpr) FatExpr #macro = when_debug_assertions(assert_le, arg);
fn debug_assert_lt(arg: FatExpr) FatExpr #macro = when_debug_assertions(assert_lt, arg);
fn debug_assert_ge(arg: FatExpr) FatExpr #macro = when_debug_assertions(assert_ge, arg);
fn debug_assert_gt(arg: FatExpr) FatExpr #macro = when_debug_assertions(assert_gt, arg);
