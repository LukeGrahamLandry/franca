
fn panic(msg: Str) Never #cold = {
    if get_dynamic_context().is_null() {
        scary_log("panicked without a context: ");
        scary_log(msg); 
        abort();
    };
    hook := get_panic_hook();
    hook_int := ptr_cast_unchecked(*@FnPtr(msg: Str) Never, i64, hook&);
    if hook_int[] == 0 {
        // we panicked before getting to set the handler. 
        scary_log("a franca program panicked while panicking or before setting a panic hook.");
        scary_log(msg); 
    } else {
        handler := hook[];
        // you have to remember to reset this yourself if you manage to recover by translating to another language's exception system. 
        // i don't think using panics that way is the best idea but what you do on your own time is none of my business. 
        hook_int[] = 0; // is_panicking = true
        handler(msg);
    };
    abort()
}

fn get_panic_hook() *(@FnPtr(msg: Str) Never) #noinline = {
    context(DefaultContext)[].panic_hook&
}

:: {
    // TODO: what is going on???
    if false {
        eprintln("coconut.jpg");
    };
};

fn unreachable() Never #cold = panic("Entered unreachable code.");
fn unreachable(msg: Str) Never #cold = {
    msg := concat("Entered unreachable code.", msg, temp());
    panic(msg.items())
}

fn print_and_abort(msg: Str) Never #cold = {
    eprintln(msg);
    abort()
}

fn print_trace_and_abort(msg: Str) Never #cold = {
    @eprintln("Panicked: %", msg);
    node := context(DefaultContext)[].caller;
    ::ptr_utils(@type node[]);
    if !node.is_null() && node.id != 0 {
        depth := 0;
        while => !node.is_null() {
            @eprint("%, ", node.id);
            node = node.prev;
            depth += 1;
        };
        @eprintln("call depth: %", depth);
    };
    abort()
}

fn print_stacktrace_on_panic() void = {
    get_panic_hook()[] = print_trace_and_abort;
}

fn todo() Never #cold = panic("Not Yet Implemented");

// TODO: can't do this because of circular dependency. 
//       in List it needs to call the other assert which means it needs the types of the whole overload set so it needs to compile List$i64
fn assert(cond: bool, $msg: Fn(void, List(u8))) void = {
    if(cond.not()){
        msg := msg();
        msg: Str = msg&.items();
        panic(msg);
    }
}

fn assert(cond: bool, msg: Str) void = {
    if(cond.not()) {
        panic(msg); // TODO: fix overload resolution so this doesn't need the semi colon to turn Never to void
    }
}

// This gets propagated so it doesn't have to compile all the formatting stuff if its false which makes the tiny tests compile faster. 
VERBOSE_ASSERT :: true; 

// TODO: maybe call this expect_eq to distinguish from a normal assert_eq that isn;t limmited to one call per lexical occurance in a test. 
fn assert_eq($T: Type) void = {
    // TODO: unhelpful error message when there's no fn eq for T. -- Apr 27
    fn assert_eq(lhs: T, rhs: T) void = {
        @if(::VERBOSE_ASSERT, assert(lhs.eq(rhs)) { ()List(u8) |
            out: List(u8) = list(40, temp());
            @fmt(out&, "Assertion Failed. Expected (% == %)", lhs, rhs);  // TODO: version of @fmt that makes the list for you and returns it. 
            out
        }, {
            assert(lhs.eq(rhs), "assertion failed");
        });
    }
}

::assert_eq(i64);
::assert_eq(bool);
::assert_eq(Type);
::assert_eq(Symbol);
::assert_eq(f64);
::assert_eq(Str);

/// Stupid question, but I guess it's wierd if I don't let you ask.
fn assert_eq(_: void, __: void) void = ();

// @assert(true);
// @assert(true, "info %", 123);
fn assert(arg: FatExpr) FatExpr #macro = {
    arg := compile_ast(arg);
    arg_err :: "@assert expected '(cond, fmt_string, args)'";
    if arg.ty == bool {
        arg = @{ (@[arg], "Assertion Failed" ) };
        assert(arg.expr&.is(.Block), "unquote repr");
        arg = arg.expr.Block.result[];
        arg = compile_ast(arg);
    };
    assert(arg.expr&.is(.Tuple), arg_err);
    parts := arg.expr.Tuple.items();
    assert(parts.len >= 2, arg_err);
    @ct_assert(parts[1].ty == Str, parts[1].loc, "@assert expected second arg to be format string");
    
    if parts.len == 2 {
        @{ assert(@[parts[0]], @[parts[1]]) }
    } {
        cond := parts[0];
        @{ if(!@[cond]){
            out: List(u8) = list(temp());
            out&.push_all("Assertion Failed: ");
            @[format_into(@{ out& }, parts.rest(1), arg.loc)];
            panic(out.items());
        }}
    }
}

fn assert_eq(arg: FatExpr) FatExpr #macro = assert_cond(eq, "==", arg);
fn assert_ne(arg: FatExpr) FatExpr #macro = assert_cond(ne, "!=", arg);
fn assert_le(arg: FatExpr) FatExpr #macro = assert_cond(le, "<=", arg);
fn assert_ge(arg: FatExpr) FatExpr #macro = assert_cond(ge, ">=", arg);
fn assert_lt(arg: FatExpr) FatExpr #macro = assert_cond(lt,  "<", arg);
fn assert_gt(arg: FatExpr) FatExpr #macro = assert_cond(gt,  ">", arg);

fn assert_cond($overload_set: OverloadSet, op: Str, arg: FatExpr) FatExpr = {
    assert(arg.expr&.is(.Tuple), "@assert___ expected multiple args");
    parts := arg.expr.Tuple.items();
    @{
        lhs := @[parts[0]];
        rhs: @type lhs = @[parts[1]];
        // TODO: pass #cold to the backend or out-line the function or something
        // TODO: maually outline assertion_failed when not ASSERT_SHOW_SOURCE because its so easy and happens so much? 
        if !@[@literal overload_set](lhs, rhs) {
            out: List(u8) = list(temp());
            out&.push_all("Assertion Failed. ");
            
            @[if(parts.len == 3, => @{
                out&.push_all(@[parts[2]]);
            }, => @{()} )];
            @[if(parts.len > 3, => {
                format_into(@{ out& }, parts.rest(2), arg.loc)
            }, => @{()} )];
            
            // TODO: you can't '@h(a)' because it starts parsing a trailing expr after and theres no closing '
            @[if(VERBOSE_ASSERT, => @{
                @fmt(out&, "\n   Expected (% % %). ", lhs, @[@literal op], rhs);
            }, => @{()} )];
            
            panic(out.items());
        };
    }
}

fn when_debug_assertions($overload_set: OverloadSet, arg: FatExpr) FatExpr = 
    @if(safety_check_enabled(.DebugAssertions), overload_set(arg), @literal unit);

fn debug_assert(arg: FatExpr) FatExpr #macro = when_debug_assertions(assert, arg);
fn debug_assert_eq(arg: FatExpr) FatExpr #macro = when_debug_assertions(assert_eq, arg);
fn debug_assert_ne(arg: FatExpr) FatExpr #macro = when_debug_assertions(assert_ne, arg);
fn debug_assert_le(arg: FatExpr) FatExpr #macro = when_debug_assertions(assert_le, arg);
fn debug_assert_lt(arg: FatExpr) FatExpr #macro = when_debug_assertions(assert_lt, arg);
fn debug_assert_ge(arg: FatExpr) FatExpr #macro = when_debug_assertions(assert_ge, arg);
fn debug_assert_gt(arg: FatExpr) FatExpr #macro = when_debug_assertions(assert_gt, arg);
