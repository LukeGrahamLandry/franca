fn open_read(path: CStr) FdResult #target_os = (fn($os) => {
    F :: LibcType(os).OpenFlag;
    open(path, @as(i64) F.Read)
});

// TODO: can't pass create since i don't pass mode!
fn open_append(path: CStr) FdResult #target_os = (fn($os) => {
    F :: LibcType(os).OpenFlag;
    flag := (@as(i64) OpenFlag.Write).bit_or(@as(i64) OpenFlag.Append); // .bit_or(@as(i64) OpenFlag.Create)
    open(path, @as(i64) F.Append)
});

// TODO: can't pass create since i don't pass mode!
fn open_trunc(path: CStr) FdResult #target_os = (fn($os) => {
    F :: LibcType(os).OpenFlag;
    flag := (@as(i64) OpenFlag.Write).bit_or(@as(i64) OpenFlag.Truncate); // .bit_or(@as(i64) OpenFlag.Create)
    open(path, @as(i64) F.Write)
});

// TODO: it wont close the directory if you use an early return from the body!!
// TODO: :Linux 
fn walk_directory(path: CStr, $body: @Fn(entry: *MacosLibc.DirEnt) void) bool = {
    ::ptr_utils(Dir); ::ptr_utils(MacosLibc.DirEnt);
    entry := MacosLibc.DirEnt.zeroed();
    dir := opendir(path);
    ret :: return;
    if(dir.is_null(), => ret(false));
    
    out := entry&;
    loop {
        readdir_r(dir, entry&, out&); // TODO: error handling
        if(out.is_null()) {
            // TODO: have expr!defer that runs even if the `body` does an early return so you can use this like a normal loop without collecting the items. 
            closedir(dir); // TODO: error handling
            ret(true);
        };
        body(out);
    };
    
    unreachable()
}

fn name(self: *MacosLibc.DirEnt) Str = (ptr = self.d_name&.as_ptr(), len = self.d_namlen.zext());

fn file_exists(path: Str) bool = {
    c := path.maybe_borrow_cstr(temp());
    access(c, @as(i64) AccessMode.Exists).is_ok()
}

// TODO: i think if im passing Create i also have to pass mode as an extra argument!!!
// TODO: @try for the libc result types. 
fn write_entire_file(path: Str, content: Str) bool = {
    path := maybe_borrow_cstr(path, temp());
    fd := open_trunc(path);
    if(!fd.is_ok(), => return(false));
    fd := fd.unwrap();
    written := write(fd, content.ptr, content.len);
    if(!written.is_ok(), => return(false));
    // TODO: loop if we couldn't write the whole thing at once. 
    if(written.unwrap() != content.len, => return(false));
    fd.close();
    true
}


fn append_to_file(path: Str, content: Str) bool = {
    path := maybe_borrow_cstr(path, temp());
    fd := open_append(path);
    if(!fd.is_ok(), => return(false));
    fd := fd.unwrap();
    written := write(fd, content.ptr, content.len);
    if(!written.is_ok(), => return(false));
    // TODO: loop if we couldn't write the whole thing at once. 
    if(written.unwrap() != content.len, => return(false));
    fd.close();
    true
}

PATH_SEP :: "/";

fn push_path_segment(self: *List(u8), name: []u8) void = {
    if !self.items().ends_with(PATH_SEP) {
        self.push_all(PATH_SEP);
    };
    self.push_all(name);
}

fn pop_path_segment(self: *List(u8)) bool = {
    if !self.is_empty() && self.items().ends_with(PATH_SEP) {
        self.pop();
    };
    self.pop_until_endswith(PATH_SEP)
}

fn read_file(alloc: Alloc, path: Str) ?List(u8) = {
    out: List(u8) = list(alloc);
    path := path.maybe_borrow_cstr(alloc); // TODO: LEAK
    f := open_read(path).or(=> return(.None));
    len := f.lseek(0, .End).or(=> return(.None));
    f.lseek(0, .Set);
    out&.reserve(len);
    ptr := out.maybe_uninit.ptr.offset(out.len);
    read_len := read(f, ptr, out.maybe_uninit.len).or(=> return(.None));
    if(read_len != len, => return(.None)); // sanity
    out.len += len;
    close(f); // TODO: defer
    (Some = out)
}
