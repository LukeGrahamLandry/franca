
// TODO: it wont close the directory if you use an early return from the body!!
fn walk_directory(path: CStr, const body: @Fn(entry: *DirEnt) void) bool = {
    ::ptr_utils(Dir); ::ptr_utils(DirEnt);
    entry := DirEnt.zeroed();
    dir := opendir(path);
    ret :: @return;
    if(dir.is_null(), => ret(false));
    
    out := entry&;
    loop {|
        readdir_r(dir, entry&, out&); // TODO: error handling
        if(out.is_null()) {|
            // TODO: have expr!defer that runs even if the `body` does an early return so you can use this like a normal loop without collecting the items. 
            closedir(dir); // TODO: error handling
            ret(true);
        };
        body(out);
    };
    
    unreachable()
}

fn name(self: *DirEnt) Str = (ptr = self.d_name&.as_ptr(), len = self.d_namlen.zext());

fn file_exists(path: Str) bool = {
    c := path.maybe_borrow_cstr(temp());
    access(c, @as(i64) AccessMode.Exists).is_ok()
}