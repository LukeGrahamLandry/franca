fn open_read(path: CStr) FdResult = 
    to_fdresult Posix'open(path, Posix'O'RDONLY);

fn to_fdresult(result: Posix'SysResult(Fd)) FdResult = {
    @if(result.is_ok()) return(fd = result.Ok.fd);
    (fd = -1)
} 

fn open_append(path: CStr) FdResult = 
    open_or_create(path, false);

fn open_trunc(path: CStr) FdResult = 
    open_or_create(path, true);

// TODO: don't set executable flag all the time, let them choose. it just so happens that im mostly writing executables. 
// TODO: optional arguments to make it not painful to have these all just be one function

fn open_or_create(path: CStr, $truncate: bool) FdResult = {
    flag := bit_or(Posix'O'WRONLY, Posix'O'CREAT).bit_or(Posix'O'CLOEXEC);
    @if(truncate) {
        flag = flag.bit_or(Posix'O'TRUNC);
    };
    to_fdresult Posix'openat(Posix'AT'FDCWD(), path, int flag, Posix'S'IRWXU)
}

// TODO: this is a garbage api because i assme there will be no errors once you've opened the directory. 
// TODO: it wont close the directory if you use an early return from the body!!
// NOTE: don't nest these opening the same directory at the same time. 
fn walk_directory_unordered(path: CStr, $body: @Fn(entry: DirEntry) void) bool = {
    dir := Posix'opendir(path);
    if(dir.is_err(), => return(false));
    
    loop {
        @match(dir.Ok.iter_directory()) {
            fn Some(data) => @must_return body(data);
            fn None() => {
                // _ := :UpdateBoot
                // TODO: have expr!defer that runs even if the `body` does an early return so you can use this like a normal loop without collecting the items. 
                Posix'closedir(dir.Ok); // TODO: error handling
                return(true);
            }
        };
    }
}

// TODO: let the caller pass in a filter function? 
// TODO: could call scandir when linking libc
fn collect_directory_ordered(path: Str, list_a: Alloc, name_a: Alloc) Result(List(DirEntry), void) = {
    entries := DirEntry.list(list_a);
    ok := walk_directory_unordered(path.as_cstr()) { entry |
        if entry.name != "." && entry.name != ".." {
            entries&.push(name = entry.name.shallow_copy(name_a), type = entry.type);
        };  
    };
    // TODO: deal with error while iterating dir seperatly from err while opening. 
    if !ok {
        return(.Err);
    };
    Sort :: import("@/lib/sort.fr");
    sort :: Sort'quicksort(DirEntry, fn(a, b) => Sort'order_strings(a.name&, b.name&));
    sort(entries.items());
    (Ok = entries)
}

fn make_dirs_or_crash(path: Str) void = {
    if !make_dirs(path) {
        @panic("failed to make_dirs %", path);
    };
}

// TODO: don't be allocations georg
// TODO: don't redundant dir_exists
fn make_dirs(const_path: Str) bool = {
    path := u8.list(temp());
    path&.push_all(const_path);
    path&.pop_path_segment();
    if path.len > 0 {
        if !dir_exists(path.items()) {
            if !make_dirs(path.items()) {
                return false;
            };
        };
    };
    make_dir(const_path)
}

fn make_dir(path: Str) bool = {
    if(dir_exists(path), => return(true));
    Posix'mkdir(as_cstr path, Posix.S.IRWXU).is_ok()
};

fn dir_exists(path: Str) bool = 
    stat_exists(path, Posix.S.IFDIR);

fn file_exists(path: Str) bool = {
    @if(TODOWASM) if query_current_arch() == .wasm32 {
        // TODO: this is stupid!!! :SLOW :SLOW :SLOW :SLOW
        //       but eventually im going to replace it with wasi so there's kinda no point. 
        fetch_file :: fn(ptr: *u8, len: i64) *u8 #weak #import("libc");
        result := fetch_file(path.ptr, path.len);
        return(!result.is_null());
    };
    stat_exists(path, Posix.S.IFREG)
}

fn stat_exists(path: Str, mode: i64) bool = {
    s := zeroed Posix.Stat;
    ss := stat(as_cstr path, s&);
    _ := ss&; // :updateBoot
    xxx := ss.is_ok();
    e := xxx && s.st_mode.int().bit_and(Posix.S.IFMT) == mode;
    e
};

fn path_exists(path: Str) bool = {
    c := as_cstr path;
    Syscall'access(c, @as(i64) AccessMode.Exists).is_ok()
}

fn is(e: DirEntry, kind: DirEntType) bool =
    (@as(u8) e.type) == (@as(u8) kind);

fn iter_directory(dirp: *Posix'DIR) ?DirEntry = {
    e := Posix'readdir(dirp);
    ::ptr_utils(@type e.Ok[]);
    if !e.Ok.is_null() {
        name :: fn(e: *Posix'dirent) Str = {
            s := (@as(CStr) (ptr = e.d_name&.as_ptr()));
            s.str()
        };
        return(Some = (name = e.Ok.name(), type = @as(DirEntType) e.Ok.d_type));
    };
    
    // got to the end or got an error. 
    // TOOD: not returning an error here makes walk_directory_unordered() useless !
    .None
};

DirEntry :: @struct(
    name: Str,
    type: DirEntType,
);

// TODO: @try for the libc result types. 
fn write_entire_file(path: Str, content: Str) bool = {
    @if(path == "/dev/null") return(true);  // HACK
    n := timestamp();
    tmp_path := @fmt_cstr("%.%.atomic", path, n);
    fd := open_trunc(tmp_path) || return(false);
    written := Syscall'write(fd, content.ptr, content.len) || return(false);
    // TODO: loop if we couldn't write the whole thing at once. 
    if(written != content.len, => return(false));
    Syscall'fsync(fd) || return(false);
    fd.Syscall'close() || return(false);
    rename(tmp_path, as_cstr path) || return(false);
    true
}

fn write_chunks_or_crash(outpath: Str, chunks /*: [][]u8*/) void #where = {
    @if(outpath == "/dev/null") return();  // HACK
    n := timestamp();
    tmp_path := @fmt_cstr("%.%.atomic", outpath, n);
    file := open_trunc(tmp_path) 
        || @panic("failed to open %", tmp_path);
    for chunks { chunk | 
        write(file&, chunk)
        || @panic("failed to write %", tmp_path);
    };
    Syscall'fsync(file)
        || @panic("failed to fsync %", tmp_path);
    Syscall'close(file)
        || @panic("failed to close %", tmp_path);
    
    rename(tmp_path, @fmt_cstr("%", outpath))
        || @panic("failed to swap %", outpath);
}

fn write_entire_file_or_crash(path: Str, content: Str) void = {
    if !write_entire_file(path, content) {
        @panic("failed to write % bytes to '%'", content.len, path);
    };
}

fn append_to_file(path: Str, content: Str) bool = {
    if(content.len == 0, => return(true));
    path := as_cstr path;
    fd := open_append(path);
    if(!fd.is_ok(), => return(false));
    fd := fd.unwrap();
    written := write(fd, content.ptr, content.len);
    if(!written.is_ok(), => return(false));
    // TODO: loop if we couldn't write the whole thing at once. 
    if(written.unwrap() != content.len, => return(false));
    Syscall'fsync(fd) || return(false);
    fd.close();
    true
}

// TODO: the path fmt functions should go somewhere else
PATH_SEP :: "/";

fn push_path_segment(self: *List(u8), name: []u8) void = {
    if !self.items().ends_with(PATH_SEP) {
        self.push_all(PATH_SEP);
    };
    self.push_all(name);
}

fn pop_path_segment(self: *List(u8)) bool = {
    if !self.is_empty() && self.items().ends_with(PATH_SEP) {
        self.pop();
    };
    self.pop_until_endswith(PATH_SEP)
}

fn pop_until_endswith(self: *List(u8), suffix: []u8) bool = {
    while (=> !self.is_empty() && !self.items().ends_with(suffix)) {
        self.pop();
    };
    !self.is_empty()
}

fn pop_path_segment(self: Str) Str = {
    if !self.is_empty() && self.ends_with(PATH_SEP) {
        self.len -= 1;
    };
    self.pop_until_endswith(PATH_SEP)
}

fn pop_until_endswith(self: Str, suffix: []u8) Str = {
    while (=> !self.is_empty() && !self.ends_with(suffix)) {
        self.len -= 1;
    };
    self
}

// TODO: returns wrong length so you can't free it
fn read_entire_file(a: Alloc, path: Str) ?Str = {
    out := u8.list(a);
    read_and_push(out&, path) || return(.None);
    (Some = out.items())
}

fn read_entire_file_or_crash(a: Alloc, path: Str) Str = {
    x := read_entire_file(a, path) || @panic("failed to read %", path);
    x
}

// It's useful that this allocates exactly the right amount if the list is empty (... and the file has >4 bytes), 
// so you can read_entire_file to an empty list and then free(list.items())
fn read_and_push(out: *List(u8), path: Str) bool = {
    #use("@/lib/sys/process.fr");
    @if(TODOWASM) if query_current_arch() == .wasm32 {
        // TODO: do this without the extra copy. :SLOW
        //       but eventually im going to replace it with wasi so there's kinda no point. 
        fetch_file :: fn(ptr: *u8, len: i64) *u8 #weak #import("libc");
        result := fetch_file(path.ptr, path.len);
        @if(result.is_null()) return(false);
        result: CStr = (ptr = result);
        out.push_all(result.str());
        return(true);
    };
    
    path := as_cstr path;
    f := open_read(path) || return(false);
    len := f.Syscall'lseek(0, .End) || {
        Syscall'close(f); // TODO: defer
        return(false)
    };
    f.Syscall'lseek(0, .Set);
    out.reserve(len);
    ptr := out.maybe_uninit.ptr.offset(out.len);
    read_len := Syscall'read(f, ptr, out.maybe_uninit.len - out.len) || {
        Syscall'close(f); // TODO: defer
        return(false)
    };
    Syscall'close(f); // TODO: defer
    if read_len != len {
        // TODO: also this is a race if someone else writes to the file after we checked the length. 
        eprintln("TODO: need to loop for read(), it's fine if it gets interrupted? ðŸ¤¡");
        return(false);
    };
    out.len += len;
    true
}

fn read_and_push_or_crash(out: *List(u8), path: Str) void = {
    @assert(read_and_push(out, path), "failed to read file '%'", path);
}

// TODO: i kinda want a script module for stuff you'd never use in serious programs. 
fn read_file_from_last_arg() Str = {
    args := cli_args();
    assert(args.len > 1, "Last argument is path to file");
    path := args[args.len - 1].str(); 
    temp().read_to_string_or_crash(path).items() // :panic
}

// it sounds like this would be a good idea but it seems to actually be super slow the first time 
fn mmap_read(path: CStr) Result([]u8, void) = {
    f := Posix'open(path, Posix'O'RDONLY) || return(.Err);
    len := f.Syscall'lseek(0, .End) || {
        Syscall'close(f); // TODO: defer
        return(.Err)
    };
    f.Syscall'lseek(0, .Set);
    m := Posix'mmap(zeroed rawptr, len, Posix'PROT'READ, Posix'MAP'PRIVATE, f, 0);
    Syscall'close(f);
    if m.is_err() {
        return(.Err);
    };
    (Ok = (ptr = u8.ptr_from_raw(m.Ok), len = len))
};

TmpFile :: @struct(name: Array(u8, 16), fd: Fd);
fn remove(self: TmpFile) voidResult = remove(self&.c_name());
fn c_name(self: *TmpFile) CStr = (ptr = self.name&.as_ptr());
fn s_name(self: *TmpFile) Str = self.c_name().str();

fn open_temp_file() TmpFile = {
    template := "/tmp/fXXXXXX\0";
    name: Array(u8, 16) = init(@as(u8) 0.trunc());
    name&.items().subslice(0, template.len).copy_from(template);
    filename: CStr = (ptr = name&.as_ptr());
    fd := mkstemp(filename).unwrap();
    (name = name, fd = fd)
}

// TODO: a version that returns error instead of panicking
fn read_to_string_or_crash(alloc: Alloc, path: Str) List(u8) #inline = {
    bytes: List(u8) = list(alloc);
    bytes&.read_and_push_or_crash(path);
    bytes
}

