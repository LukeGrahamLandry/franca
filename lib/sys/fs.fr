fn open_read(path: CStr) FdResult #target_os = (fn($os) => {
    F :: LibcType(os).OpenFlag;
    open(path, @as(i64) F.Read)
});

// TODO: no auto run tests use open_trunc or open_append
// TODO: can't pass create since i don't pass mode!
fn open_append(path: CStr) FdResult #target_os = (fn($os) => {
    F :: LibcType(os).OpenFlag;
    flag := (@as(i64) F.Write).bit_or(@as(i64) F.Append); // .bit_or(@as(i64) F.Create)
    open(path, flag)
});

// TODO: can't pass create since i don't pass mode!
fn open_trunc(path: CStr) FdResult #target_os = (fn($os) => {
    F :: LibcType(os).OpenFlag;
    flag := (@as(i64) F.Write).bit_or(@as(i64) F.Truncate); // .bit_or(@as(i64) F.Create)
    open(path, flag)
});

// TODO: it wont close the directory if you use an early return from the body!!
// TODO: is readdir_r deprecated everywhere or is that just a linux thing.
//       but with readdir_r its a pain becuase you have to be extra careful about agreeing on the length of the buffer. 
//       but macos adds a d_namlen field so you need to account for that in the offset of the buffer anyway. 
// NOTE: don't nest these opening the same directory at the same time. 
fn walk_directory(path: CStr, $body: @Fn(entry: DirEntry) void) bool = {
    dir := opendir(path); ::ptr_utils(Dir);
    if(dir.is_null(), => return(false));
    
    loop {
        @match(dir.iter_directory()) {
            fn Some(data) => body(data);
            fn None() => {
                // TODO: have expr!defer that runs even if the `body` does an early return so you can use this like a normal loop without collecting the items. 
                closedir(dir); // TODO: error handling
                return(true);
            }
        };
    }
}

fn iter_directory(dirp: *Dir) ?DirEntry #target_os = (fn($os) => {
    Entry :: LibcType(os).DirEnt; ::ptr_utils(Entry);
    e: *Entry = readdir(dirp);
    if(e.is_null(), => return(.None));
    name: CStr = (ptr = e.d_name&.as_ptr());
    (Some = (name = name.str(), type = e.d_type))
});

DirEntry :: @struct(
    name: Str,
    type: DirEntType,
);

fn name(self: *MacosLibc.DirEnt) Str = (ptr = self.d_name&.as_ptr(), len = self.d_namlen.zext());

fn file_exists(path: Str) bool = {
    c := path.maybe_borrow_cstr(temp());
    access(c, @as(i64) AccessMode.Exists).is_ok()
}

// TODO: i think if im passing Create i also have to pass mode as an extra argument!!!
// TODO: @try for the libc result types. 
fn write_entire_file(path: Str, content: Str) bool = {
    path := maybe_borrow_cstr(path, temp());
    fd := open_trunc(path);
    if(!fd.is_ok(), => return(false));
    fd := fd.unwrap();
    written := write(fd, content.ptr, content.len);
    if(!written.is_ok(), => return(false));
    // TODO: loop if we couldn't write the whole thing at once. 
    if(written.unwrap() != content.len, => return(false));
    fd.close();
    true
}

fn append_to_file(path: Str, content: Str) bool = {
    if(content.len == 0, => return(true));
    path := maybe_borrow_cstr(path, temp());
    fd := open_append(path);
    if(!fd.is_ok(), => return(false));
    fd := fd.unwrap();
    written := write(fd, content.ptr, content.len);
    if(!written.is_ok(), => return(false));
    // TODO: loop if we couldn't write the whole thing at once. 
    if(written.unwrap() != content.len, => return(false));
    fd.close();
    true
}

// TODO: the path fmt functions should go somewhere else
PATH_SEP :: "/";

fn push_path_segment(self: *List(u8), name: []u8) void = {
    if !self.items().ends_with(PATH_SEP) {
        self.push_all(PATH_SEP);
    };
    self.push_all(name);
}

fn pop_path_segment(self: *List(u8)) bool = {
    if !self.is_empty() && self.items().ends_with(PATH_SEP) {
        self.pop();
    };
    self.pop_until_endswith(PATH_SEP)
}

fn pop_until_endswith(self: *List(u8), suffix: []u8) bool = {
    while (=> !self.is_empty() && !self.items().ends_with(suffix)) {
        self.pop();
    };
    !self.is_empty()
}

fn pop_path_segment(self: Str) Str = {
    if !self.is_empty() && self.ends_with(PATH_SEP) {
        self.len -= 1;
    };
    self.pop_until_endswith(PATH_SEP)
}

fn pop_until_endswith(self: Str, suffix: []u8) Str = {
    while (=> !self.is_empty() && !self.ends_with(suffix)) {
        self.len -= 1;
    };
    self
}

fn read_entire_file(a: Alloc, path: Str) ?Str = {
    out := u8.list(a);
    read_and_push(out&, path) || return(.None);
    (Some = out.items())
}

fn read_and_push(out: *List(u8), path: Str) bool = {
    path := path.maybe_borrow_cstr(temp());
    f := open_read(path) || return(false);
    len := f.lseek(0, .End) || {
        close(f); // TODO: defer
        return(false)
    };
    f.lseek(0, .Set);
    out.reserve(len);
    ptr := out.maybe_uninit.ptr.offset(out.len);
    read_len := read(f, ptr, out.maybe_uninit.len) || {
        close(f); // TODO: defer
        return(false)
    };
    if read_len != len {
        eprintln("TODO: need to loop for read(), it's fine if it gets interrupted? ðŸ¤¡");
        close(f); // TODO: defer
        return(false);
    };
    out.len += len;
    close(f); // TODO: defer
    true
}

fn read_and_push_or_crash(out: *List(u8), path: Str) void = {
    @assert(read_and_push(out, path), "failed to read file '%'", path);
}

// TODO: i kinda want a script module for stuff you'd never use in serious programs. 
fn read_file_from_last_arg() Str = {
    args := cli_args();
    assert(args.len > 1, "Last argument is path to file");
    path := args[args.len - 1].str(); 
    temp().read_to_string_or_crash(path).items() // :panic
}
