Compiler :: *CompilerValue;
CompilerValue :: @struct(pointer_to_pointer_to_selfhosted: rawptr);
CompCtx :: @rec @struct(data: Compiler, vtable: *ImportVTable);
fn CRes($T: Type) Type = Result(T, *CompileError);

// TODO: some of the old build stuff uses these names in file paths
Arch :: @enum(i64) (aarch64, x86_64, rv64, wasm32);  ::enum(Arch);
ExecStyle :: @enum(i64) (Jit, Aot);
// TODO: some of the old build stuff uses these names in file paths
Os :: @enum(i64) (macos, linux, wasip1); ::enum(Os); // TODO: windows, free_standing

TargetEnv :: @struct(
    arch: Arch,
    os: Os,
);

// :UpdateBoot don't forget to change this 
//IS_BOOTSTRAPPING :: { v := current_compiler_context(); v.vtable.driver_abi_version > 4096 };
IS_BOOTSTRAPPING :: {
    is_declared :: fn(target: FatExpr) FatExpr #macro = 
        @literal (ptr_cast_unchecked(@type target.expr, i64, target.expr&)[] == 12);
    !@is_declared typename
};

DRIVER_VTABLE_MAGIC :: 0x00445249564552FF;

ImportVTable :: @rec @struct(
    intern_string: @FnPtr(c: Compiler, s: Str) Symbol,
    get_string: @FnPtr(c: Compiler, s: Symbol) Str,
    // This makes a copy of *BuildOptions internally. 
    init_compiler: @FnPtr(options: *BuildOptions) Compiler,
    find_unique_func: @FnPtr(c: Compiler, name: Symbol) ?FuncId,
    get_fns_with_tag: @FnPtr(c: Compiler, tag: Symbol) Slice(FuncId),
    destroy_compiler: @FnPtr(c: Compiler) void, 
    compile_func: @FnPtr(c: Compiler, f: FuncId, when: ExecStyle) CRes(void),
    get_jitted_ptr: @FnPtr(c: Compiler, f: FuncId) CRes(rawptr),
    get_function: @FnPtr(c: Compiler, f: FuncId) *Func,
    add_file: @FnPtr(c: Compiler, name: Str, content: Str) AbiHackSpan, 
    parse_stmts: @FnPtr(c: Compiler, f: *Span) Result(Slice(FatStmt), *CompileError),
    make_and_resolve_and_compile_top_level: @FnPtr(c: Compiler, body: Slice(FatStmt)) CRes(void),
    get_baked: @FnPtr(c: Compiler, id: BakedVarId) rawptr, // *BakedValue
    get_build_options: @FnPtr(c: Compiler) *BuildOptions,
    magic: i64,
    frc_module_magic_v: i64,
    check_for_new_aot_bake_overloads: @FnPtr(c: Compiler) void,
    driver_abi_version: i64,
    emit_qbe_included: @FnPtr(module: rawptr, comp: *CompCtx, fns: [] FuncId, entry: ProgramEntry) [][]u8,
    fmt_error: @FnPtr(c: Compiler, err: *CompileError, out: *List(u8)) void,
    add_comptime_library: @FnPtr(c: Compiler, lib_name: Symbol, handle: rawptr) void,
    get_type_meta: @FnPtr(c: Compiler, type: Type) *TypeMeta,
    get_type_info: @FnPtr(c: Compiler, type: Type) *TypeInfo,
    get_whole_line: @FnPtr(c: Compiler, span: Span) FrancaCodeLine, // :SLOW
    report_aot_progress: @FnPtr(c: Compiler, fid: FuncId, is_start: bool, zone: i64) void, // for profiling
    emit_relocatable_constant: @FnPtr(c: Compiler, ty: Type, value: []u8, loc: Span) CRes(BakedVarId),
    log_expr: @FnPtr(c: Compiler, e: *FatExpr) Str,
    log_stmt: @FnPtr(c: Compiler, e: *FatStmt) Str,
    log_type: @FnPtr(c: Compiler, e: Type) Str,
    log_func: @FnPtr(c: Compiler, e: *Func) Str,
    emit_relocatable_constant_body: @FnPtr(c: Compiler, bytes: []u8, ty: Type, force_default_handling: bool) CRes(Slice(BakedEntry)),
    emit_qbe_included_old: rawptr, // :UpdateBoot remove
    init_default_qbe_module: @FnPtr(module_out: rawptr, qbe_env_goal_in: rawptr) void,
    took_address: @FnPtr(c: Compiler, n: *Var) bool, // (this is get, not set)
    run_qbe_passes: @FnPtr(ir_fn: rawptr) void,
    finish_qbe_module: @FnPtr(module: rawptr) [][]u8,
    get_alloc: @FnPtr(c: Compiler) Alloc,
    drop_qbe_module: @FnPtr(module: rawptr) void,
    codegen_thread_main: @FnPtr(codegenshared: rawptr) void,
    import_frc: @FnPtr(c: Compiler, bytes: []u8) CRes(ScopeId),
    compile_ast: @FnPtr(c: Compiler, expr: *FatExpr, hint: Type) void,
    intern_type: @FnPtr(c: Compiler, info: *TypeInfo) Type,  // The compiler makes a copy of the argument
    intern_func: @FnPtr(c: Compiler, f: *Func) FuncId,  // The compiler makes a copy of the argument
    add_to_scope: @FnPtr(c: Compiler, s: ScopeId, name: Symbol, type: Type, value: rawptr) void,
    reserve_baked: @FnPtr(c: Compiler, jit_ptr: ?[]u8) BakedVarId,
    cached_compile_module: @FnPtr(path: Str, opts: *BuildOptions, out_alloc: Alloc) CRes([]u8),
    _: i64,
    add_expr_to_scope: @FnPtr(c: Compiler, s: ScopeId, name: Symbol, expr: FatExpr) void,
    enqueue_task: @FnPtr(codegen_shared: rawptr, codegen_entry: rawptr) void,
    mangle_name: @FnPtr(c: Compiler, fid: FuncId) Str,
    put_baked_var: @FnPtr(c: Compiler, id: BakedVarId, var: BakedVar) void,
);

AbiHackSpan :: @struct(low: i64, high: i64);
fn shrink(s: AbiHackSpan) Span = (low = s.low.trunc(), high = s.high.trunc());

FrancaCodeLine :: @struct(filename: Str, line: i64, col: i64, line_text: Span);

// TODO: better error for @FnPtr if you forget return type. 

// All the functions we emit are name-mangled based on thier funcid, so you can't call them from the outside.
ProgramEntry :: @enum(i64) (
    // do nothing, let the caller deal with it
    GiveMeTheCodeAndGiveItToMeRaw,  
    // create a main function that calls all the <fns>
    TestRunnerMain,  
    WrapMain, 
    // create named wrappers for all the <fns>. if one of them is called "main", that will be the program entry point.
    // it is an error to have a name collission. 
    ExportWithNames, 
    // TODO: should probably clean up the api for this
    GiveMeTheCodeAndGiveItToMeRawAlsoSingleThreadCodegen,
); ::enum(ProgramEntry);

CompileError :: @tagged(
    Msg: @struct(span: Span, msg: Str),
    Parse: @struct(span: Span, msg: Str),
    ExpectedCompileError: Span,
    TypeMismatch: @struct(span: Span, wanted: Type, found: Type),
    CoerceConst: @struct(span: Span, wanted: Type, found: Type, expr: *FatExpr),
    InvalidField: @struct(span: Span, container: Type, name: Symbol),  // tried to access `name` (directly or assigned in literal)
    MissingField: @struct(span: Span, container: Type, name: Symbol),  // struct literal requires `name`
    InvalidContextualField: @struct(span: Span, type: Type, name: Symbol),  // same as InvalidField
);

ComptimeEnvironment :: @struct(
    _0: Ty(i64, i64) = (0, 0),
    make_slice_t: ?FuncId,
    bake_os: ?OverloadSet,
    fat_expr_type: ?Type,
    intrinsic_type: ?Type,
    build_options: rawptr,
    unquote_placeholders: ?FuncId,
    comptime_os: Os,
    os_type: ?Type,  // :UpdateBoot then remove this since i don't have #target_os anymore
    _1: Ty(i64, i64) = (0, 0),
    _2: Ty(i64, i64) = (0, 0),
    compile_error_pointer: ?Type,
    _4: i64 = 0,
    _3: Ty(i64, i64) = (0, 0),
    c_str_type := UnknownType,
    ir_op_cls_types := UnknownType,
    dynamic_context_type := UnknownType,
    runtime_init: ?FuncId,
    static_context_var: ?BakedVarId,
);

// Note: changing these default values requires rebuilding the compiler! (if your driver program is using ImportVTable.default_build_options). 
//       (an extra time if the program you're interested in is the compiler).
BuildOptions :: @struct(
    // false for smaller binary, true for better debugging. 
    // Without this, we put the `private` modifer on functions so they can be removed if all uses are inlined. 
    // With this, we also include the source string name of the function (instead of just the id), but the names are still unstable!
    // For exports you want to refer to by name, use the ProgramEntry option.
    // Note: turning this off might make it look like more ir if the word 'private' on every function adds more than the names, but the produced exe will be smaller.  
    retain_function_names: bool = true, 
    safety_checks: import("@/lib/collections/enum_map.fr")'EnumMap(SafetyCheck, bool) = 
        (data = init(@slice(true, true, true, true, true))),
    _pad: i64 = 0,
    // Generics may cause redundant code for distinct types that have the same representation. 
    // Should the front end remedy the situation? 
    _deduplicate_bytecode: bool = true,  // TODO: fix this. it is ignored for now. (always false)
    debug_info: bool = false,
    _pad4 := 0,
    _driver_vtable_ptr := 0,
    _driver_vtable_user_data := 0,
    no_cache := false,
    _pad5 := false, 
    _pad3 := false,
    _pad7 := true,
    _pad8 := true,
    // :UpdateBoot
    _target_os_bitset: u32 = 0,
    _target_arch_bitset: u32 = 0,
    _pad6 := 0,
    env := rawptr_from_int(0),
    use_raw_syscalls := false,
    always_track_ir_names := false,
);

SafetyCheck :: @enum(i64) (
    Bounds,
    DebugAssertions,
    // - `index` should not change the length of a collection. 
    NonCompliantOverload, // TODO: decide if i want to do this... currently UNUSED
    InvalidTag, // @match on @tagged or @enum
    // You probably never want to turn this off. 
    // But i like the idea for minimizing the compiler binary i have to commit. (tho perhaps thats a terrible idea because it could make a stressful situation more confusing).
    // TODO: this only affects the @panic macro, not direct calls to the panic function. 
    KeepPanicMessages,
);

fn symbol_from_id(id: u32) Symbol #ir(.copy, .Kw);
fn id(self: Symbol) u32 #ir(.copy, .Kw);

// An interned string blessed by the compiler.
// This is the type of identifiers in source files.
// There's nothing special about it unless you're interacting with the asts in macros.
Symbol  :: @builtin Symbol;
ScopeId :: @builtin ScopeId;
LabelId :: @builtin LabelId;
FuncId  :: @builtin FuncId;
//LabelId :: @struct(id: u32);
//ScopeId :: @struct(id: u32);
//FuncId :: @struct(id: u32);
//Symbol :: @struct(id: u32);

// TODO: Make it sane to change the layout of these. 
//       Put them in a namespace and seperate the compiler's comptime repr from its exported repr. 
//       Allow having a step where they get translated if they don't match (like the first time you compile after changing them). 
//       Currently you're pretty much fucked if you want to change the size of FatExpr/FatStmt because macros use arrays of them. 
//       -- Sep 19

FatExpr :: @rec @struct(
    expr: Expr,
    loc: Span,
    ty: Type,
    done: bool,
);
PlaceholderValue :: @enum(i64) (AllZeros, Unknown, Label_DidYouReturnOutsideABlockLikeInAnExprFunction, Argument, OverloadSet, OnceUsed, PlaceholderUsed, InProgressMacro, EmptyBindingValue, Generic, TopLevelUsed);
Expr :: @tagged(
    Poison: PlaceholderValue,
    Value: @struct(bytes: Values, coerced: bool = false),
    Switch: @struct(value: *FatExpr, default: *FatExpr, cases: RawList(Ty(i64, FatExpr))),
    Call: @struct(f: *FatExpr, arg: *FatExpr, flags: i64 = 0),
    Block: @struct(
        body: RawList(FatStmt), 
        result: *FatExpr, 
        ret_label: ?LabelId, 
        flags: u32,
        scope: ScopeId
    ),
    Tuple: RawList(FatExpr),
    Closure: *Func,
    Spread: *FatExpr,
    FrcImport: FrcImport,
    FieldAccess: @struct(container: *FatExpr, name: Symbol, no_dot_call: bool),  // :FirstFieldIsTheChild
    StructLiteralP: Pattern,
    PrefixMacro: @struct(handler: *FatExpr, arg: *FatExpr, target: *FatExpr),
    GetVar: Var,
    GetNamed: Symbol,
    String: Symbol,
    PtrOffset: @struct(ptr: *FatExpr, bytes: i64, name: Symbol),  // :FirstFieldIsTheChild
    GetParsed: WaitingParse,
    Cast: *FatExpr,
    If: @struct(cond: *FatExpr, if_true: *FatExpr, if_false: *FatExpr),
    Loop: *FatExpr,
    Addr: *FatExpr,
    Quote: *FatExpr,
    Slice: *FatExpr,
    Deref: *FatExpr,
    ConstEval: *FatExpr,
    FnPtr: *FatExpr,
    FromBitLiteral: @struct(value: i64, bit_count: i64), 
    Uninitialized,
    Unquote: *FatExpr,
    Placeholder: i64,
    Builtin: Symbol,
    ContextualField: Symbol,
    As: @struct(type: *FatExpr, value: *FatExpr),
    Unreachable,
    // On apple-arm, wasm, and riscv, extern-c variadic arguments have a different calling convention 
    // than named arguments so the backend needs to know where they start. 
    CVariadic: []FatExpr,
    UndeclaredVar: @struct(name: Symbol, scope: ScopeId),
    DataSymbol: DynamicImport, 
);

WaitingParse :: @struct(id: i64);
Values :: @tagged(
    Big: RawList(u8),
    Small: Ty(i64, u8),
);
FatStmt :: @rec @struct(
    stmt: Stmt,
    _pad1: i64 = 0,
    _pad2: i64 = 0,
    loc: Span,
    done: bool = false,
);
Stmt :: @tagged(
    Noop: void,
    Eval: FatExpr,
    DeclFunc: *Func,
    _DeclVar: @struct(_0: FatExpr, _1: LazyType, _2: Var),
    DeclVarPattern: @struct(binding: Pattern, value: FatExpr),
    _DeclNamed,
    Set: @struct(place: FatExpr, value: FatExpr),
    ExpandParsedStmts: usize,
    Annotations: RawList(Annotation),
    Decl: *Binding,  
);
Func :: @struct(
    annotations: RawList(Annotation),
    _0: i64 = 0,
    comptime_jit_symbol_id: u32 = 0,
    has_comptime_jit_symbol_id := false,
    use_scope: ScopeId = NOSCOPE,
    callees: RawList(FuncId),
    mutual_callees: RawList(FuncId),
    var_name: ?Var,
    finished_arg: ?Type,
    finished_ret: ?Type,
    _1: i64 = 0, 
    _2: i64 = 0,
    return_var: ?Var,
    _3: i64 = 0,
    resolve_scope: ScopeId = NOSCOPE,
    body: FuncImpl,
    arg: Pattern,
    ret: LazyType,
    name: Symbol,
    loc: Span,
    flags: i64 = 0,
);

FnFlag :: @enum(i64) (
    NoMangle, // TODO: not used yet.
    ResolvedBody,
    ResolvedSign,
    AllowRtCapture,
    EnsuredCompiled,
    AsmDone,
    TryConstantFold,
    Generic,
    _4,
    MayHaveAquiredCaptures,
    TookPointerValue,
    Once,
    OnceConsumed,
    NoInline,
    AnyConstArgs,
    MadeVarsForRuntimeArgs,
    Macro,
    BodyIsSpecial,
    _0,
    SyntheticImmEval,
    ComptimeOnly,
    _1,
    LogAsm,
    LogIr,
    LogAst,
    Intrinsic,
    _2,
    AlreadyHasShim,
    RealAsmDone,
    NoContext,
    YesContext,
    _3,
    UnboundGenerics,
    DisallowInOverloadSet,
    WasLambdaLiteral, // in a call expression
    AllowDuplicated,
    AvoidJitShim,
    Inline,
    TopLevel,
    NoName,
);

CallFlags :: @enum(i64) (
    MustReturn,
    _,  // TODO: garbage!
);

BlockFlags :: @enum(i64) (
    MustReturn,
    HoistedConstants,
    Resolved,
);

Annotation :: @struct(
    name: Symbol,
    _pad := 0,
    args: FatExpr,
);
Var :: @struct(
    kind: VarType,
    name: Symbol,
    id: VarId,
    scope: ScopeId,
);
VarId :: @struct(id: u32);

VarType :: @enum(i64) (
    _Unused, 
    Var,
    Const,
);

FuncImpl :: @rec @tagged(
    Normal: FatExpr,
    DynamicImport: DynamicImport,
    _5,
    JittedAarch64_OLD: RawList(u32),
    _0,
    _1,
    _4,
    PendingRedirect: @struct(arg: Type, ret: Type, os: OverloadSet),
    Redirect: FuncId,
    Merged_OLD: RawList(FuncImpl),
    Empty,
    _2,
    Intrinsic: i64,
    _3,
    X86AsmBytes_OLD: RawList(u8),
    FrcImport: FrcImport, 
    NewIntrinsic: NewIntrinsicPayload,
    _6,
    // FatExpr is 80 bytes so space for 5 of these before needing less dumb repr
    Asm: @struct(arm64: []u8, amd64: []u8, rv64: []u8, wasm32: []u8),
);

FrcImport :: @struct(module: i64, index: u32, table: u8);

// comptime=0 when you're cross compiling and it's something platform specific 
// so you can't dlopen it at comptime. that's fine, you just can't call it. 
DynamicImport :: @struct(name: Symbol, lib: Symbol, comptime: i64, weak: bool);

PrecompiledIr :: @struct(fn_internal: i64, data: []BakedVarId, funcs: []FuncId);  // for import_c/ffi
NewIntrinsicPayload :: @struct(ir_op: i32, ir_cls: i32);

Pattern :: @struct(
    bindings: RawList(Binding),
    loc: Span,
);

Annotations :: RawList(Annotation);

Binding :: @struct(
    name: Name,
    ty: LazyType,
    nullable_tag: *Annotations,
    // Will be Poison.EmptyBindingValue if none was there (not the same as void value for explicit `name = ()`).    fn get_default
    default: FatExpr,  // location valid even if EmptyBindingValue
    kind: VarType,
);
Name :: @tagged(
    Ident: Symbol,
    Var: Var,
    None,
);
LazyType :: @tagged(
    EvilUninit: void,
    Infer,
    PendingEval: FatExpr, 
    Finished: Type, 
    Returning: Type,
    UnboundGeneric: Symbol,
    Generic: Var,
);
Span :: @struct(low: u32, high: u32);
fn is_null(s: Span) bool = s.high == 0 && s.low == 0;

TypeInfo :: @tagged(
    Int: IntTypeInfo,
    Never,
    F64,
    F32,
    Bool,
    Fn: FnType,
    FnPtr: @struct(
        ty: FnType,
        _cc: i64 = 0,
    ),
    Ptr: Type,
    Array: @struct(
        inner: Type,
        len: u32, 
    ),
    Struct: @struct(
        // You probably always have few enough that this is faster than a hash map. // TODO: check that
        fields: RawList(Field),
        layout_done: bool,
        is_tuple: bool,
        is_union: bool,
        scope: ScopeId,
    ),
    // What rust calls an enum
    Tagged: @struct(
        cases: RawList(Ty(Symbol, Type)),
        tag: Type,
    ),
    // TODO: on assignment, check that it's a valid value. (at the very least do it for constants)
    Enum: @struct(
        raw: Type,
        fields: RawList(Ty(Symbol, Values)),
        sequential: bool
    ),
    Placeholder,
    Named: Ty(Type, Symbol),
    void, // TODO: same as empty tuple but easier to type
    VoidPtr,
    Label: Type,
);

IntTypeInfo :: @struct(
    bit_count: i64,
    signed: bool,
);

FnType :: @struct(
    // Functions with multiple arguments are treated as a tuple.
    arg: Type,
    ret: Type,
    unary: bool,
);

Field :: @struct(
    name: Symbol,
    ty: Type,
    nullable_tag: *Annotations,
    // id will be zero if absent.     fn get_default
    default: Var,
    byte_offset: i64, // TODO: make this optional so you can't forget to check if layout ready / field is constant? -- Jul 6
    loc: Span = (high = 0, low = 0),
);

BakedVarId :: @struct(id: u32);

// A piece of static data that can be baked into an output file (c code, object, etc).
// TODO: deduplicate
// TODO: track type so structs can be more than just a blob of bytes.
// TODO: distinguish between constant and static. For now, everything is a mutable static because the language doesn't have the concept of const pointers.
BakedVar :: @tagged(
    Zeros: i64, // length
    Bytes: RawList(u8),
    VoidPtrArray: RawList(BakedEntry),
);

BakedEntry :: @tagged(
    Num: @struct(value: i64, _ := 0),
    FnPtr: FuncId,
    AddrOf: BakedVarId,
    AddrOfA: @struct(base: BakedVarId, addend: i32),
);

TypeMeta :: @struct(
    stride_bytes: u32,
    inferred_name: Symbol = Symbol.zeroed(),
    loc: SmallSpan,
    _: u32 = 0,
    align_bytes: u16,
    contains_pointers: bool,
    __: u8 = 0,
    is_sized: bool,
);

SmallSpan :: @struct(low: u32);

#redirect(Ty(u32, u32), bool) fn eq(a: ScopeId, b: ScopeId) bool;

NOSCOPE :: @as(ScopeId) scope_from_index(trunc(-1)); 

// TODO: expose id like normal struct
fn scope_from_index(i: u32) ScopeId = {
    s := ptr_cast_unchecked(u32, ScopeId, i&)[]; 
    s
}
