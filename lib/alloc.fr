//!
//! Similar to Zig, the standard library collections require you to explicitly pass them an allocator.
//! This makes it easy to choose an algorithm tailored to your application's allocation pattern.
//! You can place groups of objects with similar lifetimes in an arena and then not bother freeing them individually. 
//! 
//! Maybe I should treat allocation as a fallible operation but I don't really care. 
//! Most operating systems over-commit anyway so you can't even tell you're out of memory until it randomly decides to kill your process.
//! The main opposition I could see is targetting web assembly, 
//! which is 32 bit and 4GB really isn't enough memory to pretend you'll never run out. 
//!

// TODO: provide an arena allocator. 
// TODO: it would be nice to be allowed to put names for the argmuents. 
//       alloc: @fnptr(self: rawptr, bytes: i64, log_align: u8) *u8;
// TODO: it seems like a good idea to allow it to return more memory than you asked for (like for a growable collection),
//       so this would return a slice. but rust's GlobalAlloc and zig's allocator interface don't do that so maybe there's a reason. 
//       tho rust's new Allocator does return a slice. 
// TODO: add resize function that tries to extend an allocation in place if possible. 
Alloc :: @struct(data: rawptr, vptr: *AllocVTable);
AllocVTable :: @struct(
    alloc: @FnPtr(self: rawptr, bytes: i64, log_2_align: u8) rawptr,   
    free: @FnPtr(self: rawptr, buf: Slice(u8), log_2_align: u8) Unit,
);

fn alloc(allocator: Alloc, const Element: Type, count: i64) Slice(Element) #generic = {
    let bytes = (:: Element.size_of()).mul(count);
    alloc := allocator.vptr.alloc; // TODO: calling through a field is ass
    ptr := alloc(allocator.data, bytes, 4.trunc()); // TODO: alignment
    (ptr = Element.ptr_from_raw(ptr), len = count)
}

// TODO: this should work as an overload set but overloading.rs doesn't handle generic args correctly yet. -- May 30. 
dealloc :: fn(allocator: Alloc, const Element: Type, mem: Slice(Element)) Unit #generic = {
    let bytes = (:: Element.size_of()).mul(mem.len);
    free := allocator.vptr.free; // TODO: calling through a field is ass
    free(allocator.data, (ptr = ptr_cast_unchecked(From = Type, To = u8, ptr = mem.ptr), len = bytes), 4.trunc()); // TODO: alignment
};

libc_allocator: Alloc : (data = 0.rawptr_from_int(), vptr = {
    vtable := @static(AllocVTable);
    // TODO: respect alignment. but im pretty sure malloc always gives you 16 bits and mostly good enough. 
    //       should do what zig does tho https://github.com/ziglang/zig/blob/master/lib/std/heap.zig#L57
    libc_alloc :: fn(_: rawptr, size: i64, log_align: u8) rawptr = malloc(size);
    libc_free :: fn(_: rawptr, buf: Slice(u8), log_align: u8) Unit = free(u8.raw_from_ptr(buf.ptr));
    vtable[] = (alloc = libc_alloc!fn_ptr, free = libc_free!fn_ptr);
    vtable
});

/// This requests new pages from the operating system on *every* allocation. 
/// Thus it should generally only be used in the implimentation of other allocators. 
/// https://man7.org/linux/man-pages/man2/mmap.2.html
page_allocator: Alloc : (data = 0.rawptr_from_int(), vptr = {
    vtable := @static(AllocVTable);
    // TODO: respect alignment. but im pretty sure malloc always gives you 16 bits and that's almost always good enough. 
    page_alloc :: fn(_: rawptr, size: i64, log_align: u8) rawptr = {
        // TODO: subtyping so working with enum flags sucks less. 
        let prot = bit_or(@as(i64) MapProt.Write, @as(i64) MapProt.Read);
        let flag = bit_or(@as(i64) MapFlag.Private, @as(i64) MapFlag.Anonymous);
        let n1 = 1.neg();
        let fd: Fd = (fd = n1.intcast());
        let addr = 0.rawptr_from_int();
        let ptr = mmap(addr, size, prot, flag, fd, 0);
        if(ptr.int_from_rawptr().eq(n1)) {|
            println(get_errno());  // TODO: ugly
            panic("mmap failed");
        };
        ptr
    };
    /// SAFETY: EASY: 'arr' must be from 'os_alloc', only passed to this function once, and never accessed again. 
    ///         HARD: If you're careful, its fine to split an allocation from 'os_alloc' and release seperate pages at different times. 
    page_free :: fn(_: rawptr, buf: Slice(u8), log_align: u8) Unit = {
        ptr := u8.raw_from_ptr(buf.ptr);
        let res = munmap(ptr, buf.len);
        assert(res.value.eq(0), "munmap failed");
    };
    vtable[] = (alloc = page_alloc!fn_ptr, free = page_free!fn_ptr);
    vtable
});

const ExecSlice = @struct(ptr: rawptr, len: i64); 

fn make_write(arr: ExecSlice) Slice(u8) = {
    ptr := u8.raw_from_ptr(arr.ptr);
    let prot = bit_or(@as(i64) MapProt.Write, @as(i64) MapProt.Read);
    let res = mprotect(ptr, arr.len, prot);
    assert(res.value.eq(0), "mprotect failed");
    (ptr = u8.ptr_from_raw(ptr), len = arr.len)
}

/// SAFETY: 'arr' must be from 'os_alloc' and not written to until 'make_write' is called on it.   
fn make_exec(arr: Slice(u8)) ExecSlice = {
    ptr := u8.raw_from_ptr(arr.ptr);
    let prot = bit_or(@as(i64) MapProt.Exec, @as(i64) MapProt.Read);
    let res = mprotect(ptr, arr.len, prot);
    assert(res.value.eq(0), "mprotect failed");
    (ptr = ptr, len = arr.len)
}

fn os_dealloc(arr: ExecSlice) Unit = {
    page_allocator.dealloc(u8, make_write(arr)); // TODO: dont do an extra syscall just for type
}
