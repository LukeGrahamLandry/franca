// TODO: get_type_info should return a pointer, once i move type stuff to a BucketArray. 
fn get_type_info_ref(T: Type) *TypeInfo #fold = {
    t := T.get_type_info(); 
    ast_alloc().boxed(TypeInfo, t)
}

fn get_fields(S: Type) Slice(Field) #fold = {
    info := get_type_info(S); 
    assert(info&.is(.Struct), "Expected struct type");
    info.Struct.fields.items() 
}

// SAFETY: S must be a struct with field f. 
get_field_ptr :: fn($S: Type, self: *S, $f: *Field) *f[].ty #generic #inline = {
    inner := S.int_from_ptr(self);
    inner := inner + (:: f[].byte_offset);
    inner := f[].ty.ptr_from_int(inner);
    inner
}
