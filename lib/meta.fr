fn has_pointers(T: Type) bool #fold = {
    i := T.get_meta();
    i.contains_pointers
}

fn align_of(T: Type) i64 #fold = {
    i := T.get_meta();
    i.align_bytes.zext()
}

fn get_fields(S: Type) Slice(Field) #fold = {
    info := get_type_info_ref(S); 
    assert(info.is(.Struct), "Expected struct type");
    info.Struct.fields.items() 
}

get_field_type :: fn(S: Type, name: Symbol) Type #fold = {
    fields := S.get_fields();
    for fields { f | 
        if f.name == name {
            return(f.ty);
        };
    };
    debug_log_type(S);
    panic("Could not find field")
};

fn get_variants(S: Type) Slice(Ty(Symbol, Type)) #fold = {
    info := get_type_info_ref(S); 
    assert(info.is(.Tagged), "Expected @tagged type");
    fuck := info.Tagged.cases;
    ::List(Ty(Symbol, Type));
    fuck.items() 
}

// SAFETY: S must be a struct with field f. 
get_field_ptr :: fn($S: Type, self: *S, $f: *Field) *f[].ty #generic #inline = {
    inner := S.int_from_ptr(self);
    inner := inner + (:: f[].byte_offset);
    inner := f[].ty.ptr_from_int(inner);
    inner
};

get_variant_ptr :: fn($E: Type, self: *E, $t: E.Tag()) *E.get_variant_type(t) #generic #inline = {
    inner := E.int_from_ptr(self);
    inner := inner + 8;
    inner := E.get_variant_type(t).ptr_from_int(inner);
    inner
};

// TODO: if you get garbage memory / safety cvheck failed here its becasue it doesnt typecheck maybe. -- Jul 16 :FUCKED
get_variant_type :: fn($E: Type, t: E.Tag()) Type #generic #fold = {
    cases := E.get_variants();
    ::tagged(E); // :sema_regression. but might just be order?
    // TODO: it doesn't like this being debug_assert when i moved some of the Hash impls on ast types into emit_bc. 
    if !(t.ordinal() < cases.len && t.ordinal() >= 0) {
        panic("ICE: invalid tag");
    };
    data := cases.index(t.ordinal());
    data._1
};

get_variant_ptr_for :: fn($E: Type, self: *E, $case: *Ty(Symbol, Type)) *case[]._1 #generic #inline = {
    inner := E.int_from_ptr(self);
    inner := inner + 8;
    inner := case[]._1.ptr_from_int(inner);
    inner
};

EnumBacking :: fn(E: Type) Type = {
    info := get_type_info_ref(T); 
    assert(info.is(.Enum), "Expected @enum type");
    info.Enum.raw 
};

get_cases :: fn($E: Type) []E #generic #fold = {
    info := get_type_info_ref(E); 
    assert(info.is(.Enum), "Expected @enum type");
    fields := info.Enum.fields&;
    out: List(E) = list(fields.len, ast_alloc());
    each fields { f |
        ptr := f._1&.rawptr_from_value();
        ptr := E.ptr_from_raw(ptr);
        out&.push(ptr[]);
    };
    out.items()
};

fn enum_count(E: Type) i64 #fold = {
    info := get_type_info_ref(E); 
    assert(info.is(.Enum), "Expected @enum type");
    info.Enum.fields.len
}

for_enum :: fn($E: Type, $f: @Fn(e: E) void) void #generic = {
    values := @run E.get_cases();
    for(values, f);
};

inline_for_enum :: fn($E: Type, $f: @Fn(e: *E) void) void #generic = {
    values :: E.get_cases();
    @inline_for(values) f;
};

// TODO: footgun: they might not be in order by oridinal or the values might not even be ints. 
// TODO: make it clear that the slice should be in a constant somehow. 
fn get_enum_names(E: Type) Slice(Str) #fold = {
    info := get_type_info(E);
    assert(info&.is(.Enum), "expected enum type");
    names: List(Str) = list(ast_alloc());
    
    for (info.Enum.fields.items()) { i|
        names&.push(i._0.str());
    };
    names.items()
}

fn get_enum_names_symbols(E: Type) Slice(Symbol) = {
    info := get_type_info(E);
    assert(info&.is(.Enum), "expected enum type");
    names: List(Symbol) = list(ast_alloc());
    
    for (info.Enum.fields.items()) { i|
        names&.push(i._0);
    };
    names.items()
}

#use("@/lib/collections/map.fr") 
fn create_enum_name_table_outlined(E: Type) HashMap(Str, *u8).Raw = {
    t: HashMap(Str, *u8) = init(ast_alloc());
    info := get_type_info_ref(E); 
    assert(info.is(.Enum), "Expected @enum type for from_name");
    for info.Enum.fields.items() { f |
        ptr := f._1&.rawptr_from_value();
        // TODO: reboxing the copy is a dumb hack :SLOW -- Nov 14
        bytes2 := ast_alloc().alloc(u8, size_of(E)); // TODO: is alignment real
        bytes1: []u8 = (ptr = u8.ptr_from_raw(ptr), len = size_of(E));
        bytes2.copy_from(bytes1);
        t&.insert(f._0.str(), bytes2.ptr);
    };
    t.raw&.zero_unused_slots();
    t.raw
}

// TODO: could do some fancy perfect hashing thing since we know the keys at comptime. 
#use("@/lib/collections/map.fr") 
fn from_name($E: Type, name: Str) ?E #generic = {
    @if(E.enum_count() < 5) {
        inline_for_enum E { $e |
            ee :: e[];
            if name == (:: ee.name_str()) {
                return(Some = ee);
            };
        }; 
        return(.None);
    };

    // TODO: we can't always store a hash table with E by value in a constant because we don't support field sizes that are not a multiple of 8 bytes -- Nov 14
    M :: HashMap(Str, *E);
    table :: @static(M.Raw) {
        t := create_enum_name_table_outlined(E);
        t2 := ptr_cast_unchecked(@type t, M.Raw, t&)[];  // IMPORTANT TO CAST BACK so the compiler knows to include the constants as the right type
        t2
    };
    
    table; // TODO: shouldn't have to hackily pre-force the constant eval. 
    if table.get(name) { p |
        return(Some = p[])
    };
    .None
}

// get an enum representing the fields of struct.
fn Fields($S: Type) Type = :: {
    T :: Ty(Symbol, Values);
    info := get_type_info_ref(S);
    assert(info.is(.Struct), "Fields expected struct type");
    ff := info.Struct.fields&;
    fields := T.list(ff.len, ast_alloc());
    enumerate ff { i, f |
        fields&.push(@as(T) (f.name, (Small = (i, 8))));
    };
    type: TypeInfo = (Enum = (raw = i64, fields = fields.as_raw(), sequential = true));
    intern_type_ref(type&)
}

fn is_sequential_enum(E: Type) bool #fold = {
    info := get_type_info_ref(E);
    info.is(.Enum) && info.Enum.sequential
}

fn is_enum(E: Type) bool #fold = {
    info := get_type_info_ref(E);
    info.is(.Enum)
}

fn offset_of($S: Type, f: Fields(S)) i64 #generic #fold = {
    ::enum(Fields(S));
    require_layout_ready(S); 
    info := get_type_info_ref(S);
    off := info.Struct.fields[f.raw()].byte_offset;
    off
}

fn is_ptr(T: Type) bool #fold = 
    get_type_info_ref(T).is(.Ptr);

fn Deref(T: Type) Type #fold = {
    info := get_type_info_ref(T);
    @assert(info.is(.Ptr), "used Deref(Type) on non-pointer");
    info.Ptr
}

fn has_field(S: Type, name: Symbol) bool #fold = {
    info := get_type_info_ref(S);
    if(!info.is(.Struct), => return(false));
    each info.Struct.fields& { f |
        if(f.name == name, => return(true));
    };
    false
}

fn has_const_field(S: Type, name: Symbol) bool #fold = {
    info := get_type_info_ref(S);
    if(!info.is(.Struct), => return(false));
    s := scope_of(Type, S);
    if(s == NOSCOPE, => return(false));  // :UpdateBoot get_constant used to crash on this
    get_constant(s, name).is_some()
}

fn has_feature($s: Str) bool #fold = 
    __builtin_compiler_has_feature(s);

fn scope_of($T: Type, t: T) ScopeId #generic = 
    scope_from_value(T, raw_from_ptr(T, t&)).expect("scope_of to succeed");

fn get_constant($T: Type, s: ScopeId, name: Symbol) ?T #generic = {
    out := zeroed(T);
    get_constant(s, name, T, T.raw_from_ptr(out&)) || return(.None);
    (Some = out)
}

fn FieldType($S: Type, name: Fields(S)) Type #generic #fold = {
    ::enum(Fields(S));
    S.get_fields()[name.raw()].ty
}

fn get_field($S: Type, self: *S, $name: Fields(S)) *FieldType(S, name) #generic = {
    p := S.raw_from_ptr(self);
    p := p.offset(offset_of(S, name));
    p := FieldType(S, name).ptr_from_raw(p);
    p
}

fn scope_to_new_type($s: ScopeId) Type #fold = {
    t: TypeInfo = (Struct = (
        fields = empty(),
        layout_done = true,
        is_tuple = false,
        is_union = false,
        scope = s,
    ));
    intern_type_ref(t&)
}
