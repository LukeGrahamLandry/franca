fn is_none();
fn is_some();
fn unwrap() void = unit;
fn if_opt();
fn as_ref();
fn none();
fn some();
fn ok();
fn expect();
fn take();
fn or_else();
fn none_or();

fn Option($T: Type) Type = {
    // TODO: it would be better if 0 was none but that's hard to change. -- Jun 26
    //       need to have better system of old compiler running comptime with old layout but compiling new compiler with new layout 
    Self: Type : @tagged(Some: T, None);
    :: tagged(Self);
    fn none() Self = (None = ());
    fn some(t: T) Self = { 
        (Some = t) 
    };
    
    // TODO: this is probably neater so leave it. but the old match version broke when I started resolving const arg patterns as const?? like it sometimes couldn't see captures. -- Apr 22
    fn if(self: Self, $then: @Fn(t: T) void) void = 
        @if(self.is_some(), then(self.Some), ()); 
    fn if(self: *Self, $then: Fn(*T, void)) void = 
        @if(self.is_some(), then(self.Some&), ());
    
    fn if(self: *Self, $then: Fn(*T, void), $else: Fn(void, void)) void = 
        @if(self.is_some(), then(self.Some&), else());
    
    fn if(self: Self, $then: @Fn(t: T) void, $else: Fn(void, void)) void = 
        @if(self.is_some(), then(self.Some), else());
        
    /*
    @match(self) {
        (fn Some(t: T) void = then(t));
        (fn None(t: void) void = ());
    };*/
    
    fn or(self: Self, $else: Fn(void, T)) T =
        @if(self.is_some(), self.Some, else());
    
    fn or_else(self: Self, $else: Fn(void, ?T)) ?T =
        @if(self&.is_some(), self, else()); 
    
    fn unwrap(self: Self) T = {
        @if(self.is_some(), self.Some, panic("Unwrapped missing value."))
    }
        
    fn expect(self: Self, msg: Str) T =
        @if(self.is_some(), self.Some, @panic("Expected %", msg));
    
    fn is_some(self: Self) bool = self&.is(.Some);
    fn is_none(self: Self) bool = self&.is(.None);
    fn is_some(self: *Self) bool = self.is(.Some);
    fn is_none(self: *Self) bool = self.is(.None);
    
    fn while($next: Fn(void, Self), $body: Fn(T, void)) void = {
        // Note: this is formated a bit awkwardly because you don't want to expand next and body in multiple places. 
        // TODO: should add an optional warning if you care about binary size for expanding the same const closure multiple times. 
        dowhile {
            v := next();
            v.if(body);
            v.is_some()
        };
    }
    
    fn take(self: *Self) Self = {
         @match(self[]) {
            fn Some(t) => {
                self[] = .None;
                (Some = t)
            }
            fn None() => .None; 
        }
    }
    
    fn none_or(self: Self, $cond: @Fn(t: T) bool) bool = {
        if self { s | 
            return(cond(s));
        };
        true
    }
 
    Self
}


// TODO: it should close over T without the extra argument when put in the #generic fn Option
fn if_opt($I: Type, $O: Type) void = {
    // TODO: the old one with @match should work. need to fix chained_captures better -- Apr 23. 
    fn if(self: ?I, $then: @Fn(some: I) O, $else: Fn(void, O)) O = 
        @if(self.is_some(), then(self.Some), else());
    
    fn if(self: *?I, $then: @Fn(some: *I) O, $else: Fn(void, O)) O = 
        @if(self.is_some(), then(self.Some&), else());
    
    /*
    @match(self) {
        (fn Some(t: I) O = then(t));
        (fn None(t: void) O = else()); // TODO: allow no arg name in match macro. 
    };
    */
}

:: as_ref(i64);
fn as_ref($T: Type) void = {
    // TODO: this sucks cause you can't @match through a pointer 
    //       and like now do i have to write pointer versions of all of them so you dont have to manually call as_ref every time? 
    fn as_ref(self: *?T) ?*T = {
        ::if(?*T); // TODO: it tries to resolve the overload before it evals the closure's return type -- Apr 25
        if(self.is_some(), fn() ?*T => {
            some(self[].Some&)
        },  fn() ?*T = none())
    }
}

fn map();
fn opt_map($In: Type, $Out: Type) void = {
    fn map(self: ?In, $f: Fn(In, Out)) ?Out = {
        :: if_opt(In, ?Out);
        if(self, fn(t) => (Some = f(t)), => .None)
    }
    fn map(self: *?In, $f: Fn(*In, Out)) ?Out = {
        :: if_opt(In, ?Out);
        if(self, fn(t) => (Some = f(t)), => .None)
    }
}


fn is_err();
fn unwrap_err();
fn is_ok();

// TODO: you kinda want a magic context pointer so you can print stuff and have... context? 
fn Result($T: Type, $E: Type) Type = {
    Self :: @tagged(Ok: T, Err: E);
    ::tagged(Self);
    fn unwrap(self: *Self) *T = @match(self) {
        (fn Ok(t: *T) *T => t);
        (fn Err(e: *E) *T => panic("Unwrapped Error")); // TODO: be a ble to derive print for anything. 
    };
    fn unwrap(self: Self) T = @match(self) {
        (fn Ok(t: T) T => t);
        (fn Err(e: E) T =>  panic("Unwrapped Error")); // TODO: be a ble to derive print for anything. 
    };
    fn is_err(self: *Self) bool = self.is(.Err);
    fn is_ok(self: *Self)  bool = self.is(.Ok);
    fn unwrap_err(self: Self) E = @match(self) {
        (fn Ok(t: T) E =>  panic("Unwrapped Ok"));  // TODO: be a ble to derive print for anything. 
        (fn Err(e: E) E => e); 
    };
    
    // TODO: make sure this parses without {}
    fn ok(self: Self) ?T = {
        @match(self) {
            (fn Ok(t: T) ?T => (Some = t)); 
            (fn Err(e: E) ?T => (None = ())); 
        }
    }
    
    fn or(self: Self, $else: @Fn(e: E) T) T = {
        @match(self) {
            (fn Ok(t: T) T => t);
            (fn Err(e: E) T => else(e)); 
        }
    }
    
    //fn or(self: Self, $else: @Fn(e: E) Never) T = {
    //    @match(self) {
    //        (fn Ok(t: T) T => t);
    //        (fn Err(e: E) T => {
    //            else(e)
    //        }); 
    //    }
    //}
    
    Self
}

// TODO: you need from_residual so you can have it work when different ok types but the same error type. 
// TOOD: this doesn't even have to be a macro cause i have non-local returns... if i had better polymorphism. 
fn try(maybe: FatExpr, ret: FatExpr) FatExpr #macro= @{
    m := @[maybe];
    @if(m&.is_err(), @[ret](Err = m.unwrap_err()), ());
    m.unwrap()
};
