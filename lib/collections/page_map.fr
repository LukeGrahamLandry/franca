fn PageMap($T: Type) Type = {
    PageMap :: @struct {
        Tag :: @enum(u8) (Unknown, FuncId, BakedVarId);
        Entry :: @struct {
            value: T;
            off: u16;  // how far from the start of the page does this object start
            len: u16;
            forward: bool;
            backward: bool;
        };
        Page :: @struct {
            entries: RawList(Entry);
            high_bits: i64;
        };
        // must be <= 15 because im using u16-s,
        // can make it smaller to test that spanning multiple pages works properly
        page_bits :: 14;
        
        lookup: RawHashMap(i64, *Page);
        gpa: Alloc;
    };
    
    fn init(a: Alloc) PageMap = (
        gpa = a,
        lookup = init(),
    );
    
    fn insert_at(self: *PageMap, vbytes: []u8, value: T) void = {
        hi, lo := self.split(u8.raw_from_ptr(vbytes.ptr));
        p := self.get_page(hi);
        e, off := self.find_entry(p, lo, true, vbytes.len).unwrap();
    
        // TODO: assert not stomping something exactly either
        @debug_assert_eq(off, 0, "TODO: baked the same address multiple times");
        e.value = value;
    }
    
    // TODO: replace addr with vbytes and assert if it's too big for an existing bake 
    //       (eventually handle that properly somehow)
    // SAFETY: pointer invalidated by insert()
    fn get_at(self: *PageMap, addr: rawptr) ?Ty(*T, i64) = {
        hi, lo := self.split(addr);
        p := self.get_page(hi);
        if self.find_entry(p, lo, false, 0) { e, off | 
            ::enum(PageMap.Tag);
            return(Some = (e.value&, off));
        };
        .None
    }
    
    fn split(self: *PageMap, addr: rawptr) Ty(i64, i64) = {
        addr := int_from_rawptr addr;
        hi := addr.shift_right_logical(PageMap.page_bits);
        lo := addr.bit_and(1.shift_left(PageMap.page_bits) - 1);
        (hi, lo)
    }
    
    fn get_page(self: *PageMap, hi: i64) *PageMap.Page = {
        p := (self.lookup&.get_or_insert(hi, self.gpa) {
            p := self.gpa.box(PageMap.Page);
            p[] = (entries = empty(), high_bits = hi);
            p
        })[];
        @debug_assert_eq(p.high_bits, hi, "get_page wrong");
        p
    }
    
    fn find_entry(self: *PageMap, p: *PageMap.Page, lo: i64, create: bool, length: i64) ?Ty(*PageMap.Entry, i64) = {
        maybe_append :: fn() Never => {
            @if(!create) return(.None);
            return(Some = (self.create_entry(p, p.entries.len, lo, length), 0))
        };
        
        if(p.entries.len == 0, maybe_append);
        end := p.entries.index(p.entries.len - 1);
        // TODO: this doesn't work :CompilerBug
        // if(lo > zext(end.off + end.len), maybe_append);
        @if(lo > zext(end.off + end.len)) maybe_append();
    
        search := p.entries.items();
        i := loop i64 { $break |
            if search.len == 0 {
                break(p.entries.ptr.ptr_diff(search.ptr));
            };
            i := search.len / 2;
            e := search.index(i);
            if lo >= e.off.zext() {
                if lo < zext(e.off + e.len) {
                    offset_in_allocation := lo - e.off.zext();
                    if e.backward {
                        // Walk backwards to find the start of the allocation. 
                        prev_page := self.get_page(p.high_bits - 1);
                        end_of_page :: 1.shift_left(PageMap.page_bits) - 1;
                        prev_e, off2 := self.find_entry(prev_page, end_of_page, false, 0)
                            || @panic("find_entry: missing before hi=%; for lo=%", p.high_bits, lo);
                        e = prev_e;
                        offset_in_allocation += off2 + 1;
                    };
                    @debug_assert(!e.backward);
                    return(Some = (e, offset_in_allocation));
                };
                search = search.rest(i + 1);
            } else {
                search = search.slice(0, i)
            };
        };
        if(!create, => return(.None));
        (Some = (self.create_entry(p, i, lo, length), 0))
    }
    
    fn create_entry(self: *PageMap, p: *PageMap.Page, i: i64, lo: i64, length: i64) *PageMap.Entry = {
        p.entries&.insert(i, zeroed PageMap.Entry, self.gpa);
        e := p.entries.index(i);
        e.off = lo.trunc();
        page_size :: 1.shift_left(PageMap.page_bits);
        space_left := page_size - lo;
        if space_left < length {
            // This allocation extends past the end of this page. 
            // Walk forwards and add new pages. 
            e.forward = true;
            next_page := self.get_page(p.high_bits + 1);
            // TODO: check if stomping something
            next_entry := self.create_entry(next_page, 0, 0, length - space_left);
            e = p.entries.index(i);  // create_entry() reallocates
            next_entry.backward = true;
            length = space_left;
        };
        e.len = length.trunc();
        if i != 0 {
            it := p.entries[i - 1]&;
            @debug_assert(e.off >= it.off + it.len, "bad backwards");
        };
        if i != p.entries.len - 1 {
            it := p.entries[i + 1]&;
            // TODO: this should be strictly <
            @debug_assert(e.off + e.len <= it.off, "bad forwards");
        };
        e
    }
    
    PageMap
}
