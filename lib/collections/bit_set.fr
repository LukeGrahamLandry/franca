fn StaticBitSet($bit_capacity: i64) Type = {
    count :: bit_capacity.add(63).div(64);
    Self  :: @struct(bits: Array(i64, count));
    
    fn empty() Self = Self.zeroed();
    fn set_all(self: *Self) void = {
        memset(Self.raw_from_ptr(self), 255, count * i64.size_of());
    }
    
    fn get(self: *Self, i: i64) bool = {
        // really ge should assert but then BitSet would have to allocate sooner which seems sad. 
        if(i.ge(bit_capacity), => false) {
            index := i.div(64);
            bit   := i.mod(64);
            self.bits&[index].bit_and(1.shift_left(bit)).ne(0)
        }
    }
    
    fn contains(self: *Self, i: *i64) bool = self.get(i[]); // match api of List
    
    fn set(self: *Self, i: i64) void = {
        @safety(.Bounds) i < bit_capacity;
        index := i.div(64);
        bit   := i.mod(64);
        self.bits&[index] = self.bits&[index].bit_or(1.shift_left(bit));
    }
    
    fn unset(self: *Self, i: i64) void = {
        if i >= bit_capacity {
            return();
        };
        index := i.div(64);
        bit   := i.mod(64);
        self.bits&[index] = self.bits&[index].bit_and(1.shift_left(bit).bit_not());
    }
    
    fn clear(self: *Self) void = {
        self[] = empty();
    }
    
    fn capacity(self: *Self) i64 = bit_capacity;
    
    fn pop(self: *Self) ?i64 = {
        range_rev(0, count) { bucket_index | 
            bucket_value := self.bits&[bucket_index];
            if bucket_value != 0 {
                // TODO: intrinsic for this. the whole loop should be one instruction. 
                range_rev(0, 64) { i |
                    if bucket_value.bit_and(1.shift_left(i)) != 0 {
                        idx := bucket_index * 64 + i;
                        self.unset(idx);
                        return(Some = idx);
                    };
                };
            };
        };
        .None
    }
    
    Self
}

fn set_all();

DynamicBitSet :: @struct(bits: List(i64));

fn empty(a: Alloc) DynamicBitSet = (bits = list(a));

fn get(self: *DynamicBitSet, i: i64) bool = {
    if(i.ge(self.bits.len.mul(64)), => false) {
        index := i.div(64);
        bit   := i.mod(64);
        self.bits&[index].bit_and(1.shift_left(bit)).ne(0)
    }
}

fn set(self: *DynamicBitSet, i: i64) void = {
    cap := self.bits.len.mul(64);
    if(i.ge(cap), => self.reserve(i.sub(cap).add(1)));
    index := i.div(64);
    bit   := i.mod(64);
    self.bits&[index] = self.bits&[index].bit_or(1.shift_left(bit));
}

fn get_set(self: *DynamicBitSet, i: i64) bool = {
    cap := self.bits.len.mul(64);
    if(i.ge(cap), => self.reserve(i.sub(cap).add(1)));
    index := i.div(64);
    bit   := i.mod(64);
    old := self.bits&[index];
    mask := 1.shift_left(bit);
    self.bits&[index] = old.bit_or(mask);
    old.bit_and(mask) != 0
}

fn unset(self: *DynamicBitSet, i: i64) void = {
    if i >= self.bits.len.mul(64) {
        return();
    };
    index := i.div(64);
    bit   := i.mod(64);
    self.bits&[index] = self.bits&[index].bit_and(1.shift_left(bit).bit_not());
}

fn reserve(self: *DynamicBitSet, extra: i64) void = {
    while(=> extra.gt(64)) {
        self.bits&.push(0); 
        extra -= 64;
    };
    self.bits&.push(0);  
}

fn clear(self: *DynamicBitSet) void = {
    self.bits&.clear();
}

fn capacity(self: *DynamicBitSet) i64 = self.bits.len.mul(64);

// TODO: if you used an unmanaged list, you wouldn't need to store the allocaotr since you pass it in every time anyway.
BitSet :: @tagged(
    Small: StaticBitSet(DynamicBitSet.size_of().mul(8)),
    Big: DynamicBitSet,
);
:: assert_eq(BitSet.size_of(), DynamicBitSet.size_of().add(i64.size_of()));

fn empty() BitSet = (Small = empty());

fn get(self: *BitSet, i: i64) bool = @match(self) {
    (fn Small(s) bool => s.get(i));
    (fn Big(s) bool => s.get(i));
};

fn set(self: *BitSet, i: i64, a: Alloc) void = @match(self) {
    (fn Small(s) void => {
        cap := s.bits&.len().mul(64);
        if(i.lt(cap), => s.set(i)) {
            self[] = (Big = (bits = s.bits&.items().clone(a)));
            self.Big&.set(i);
        };
    });
    (fn Big(s) void => s.set(i));
};

fn unset(self: *BitSet, i: i64) void = @match(self) {
    (fn Small(s) void => s.unset(i));
    (fn Big(s) void   => s.unset(i));
};

fn clear(self: *BitSet) void = @match(self) {
    (fn Small(s) void => s.clear());
    (fn Big(s) void => s.clear());
};

fn capacity(self: *BitSet) i64 = @match(self) {
    (fn Small(s) i64 => s.capacity());
    (fn Big(s) i64 => s.capacity());
};

fn drop(self: *BitSet) void = {
    @if_let(self) fn Big(s) => s.bits&.drop();
    self[] = empty();
}
