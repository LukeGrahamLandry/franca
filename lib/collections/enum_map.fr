fn EnumMap($Key: Type, $Value: Type) Type = {
    info :: get_type_info_ref(Key);
    :: {
        assert(info.is(.Enum), "EnumMap key must be enum");  // TODO: fmt type 
        assert(info[].Enum.sequential, "for now, EnumMap requires sequential integer values");
    };
    :: enum(Key);
    :: from_raw(Key);
    
    Self :: @struct(data: Array(Value, info[].Enum.fields.len));
    
    fn len(self: *Self) i64 = 
        self.data&.len();
    
    fn init(copied: Value) Self = {
        (data = init(copied))
    }
    
    fn insert(self: *Self, key: Key, value: Value) void = {
        self.data&[key.raw().int()] = value;
    }
    
    fn index(self: *Self, key: Key) *Value = {
        self.data&.index(key.raw().int())
    }
    
    fn get(self: *Self, key: Key) Value = {
        self.data&.index(key.raw().int())[]
    }
    
    fn each(self: *Self, $body: @Fn(k: Key, v: *Value) void) void = {
        enumerate self.data& { k, v |
            ::?Key;
            body(k.from_raw().unwrap(), v);
        };
    }
    
    Self
}
