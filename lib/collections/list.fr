// TODO: fix scope resolution for generics 
// TODO: These are just cringe forward declarations to create the overload sets. 
fn list() Unit;
fn push() Unit;
fn items() Unit;
fn drop() Unit;
fn push_all() Unit;
fn clone() Unit;
fn pop_last() Unit;
fn reserve() Unit;
fn repeated() Unit;
fn clear() Unit;
fn as_ptr() Unit;
fn ordered_remove();
fn pop();

fn List(const T: Type) Type = {
    const Self = @struct(maybe_uninit: Slice(T), len: i64, gpa: Alloc);
    fn list(cap: i64, gpa: Alloc) Self = { 
        maybe_uninit := gpa.alloc(T, cap);
        (maybe_uninit = maybe_uninit, len = 0, gpa = gpa)  // todo: no alloc if len 0 since i dont free
    }
    fn list(gpa: Alloc) Self = list(0, gpa);
    
    fn repeated(t: T, count: i64, gpa: Alloc) Self = {
        // TODO: better error message if you forget the type annotataion here -- Jun 4
        self: Self = list(count, gpa);
        range(0, count, fn(_) => self&.push(t));
        self
    }
    
    // TOOD: rename shallow_clone?
    // Can't reuse the allocation because drop() will free it. TODO: COW?
    fn clone(from: Slice(T), gpa: Alloc) Self = {  // TODO: better error message if you put the = on the wrong side of the type
        self: Self = list(from.len(), gpa);
        self&.push_all(from);
        self
    }
    
    fn items(self: *Self) Slice(T) = {
        self.maybe_uninit.slice(0, self.len)
    }
    fn items(self: Self) Slice(T) = self&.items();
    
    // A pointer to the first element of the list. 
    // SAFETY: dont use the pointer if the list is empty. invalidated by resize. 
    fn as_ptr(self: *Self) *T = self.maybe_uninit.ptr;
    
    #inline
    fn index(self: *Self, i: i64) *T = {
        assert(i.lt(self.len), "OOB");
        self.maybe_uninit.index(i)
    }
    
    // TODO: hack because auto deref doesn't work through function calls
    fn index(self: Self, i: i64) *T = {
        assert(i.lt(self.len), "OOB");
        self.maybe_uninit.index(i)
    }
    
    fn len(self: Self) i64 #inline = self.len;
    fn len(self: *Self) i64 #inline = self.len;

    ::DeriveIndexable(Self, T);
    ::DeriveIndexable(*Self, T);

    fn reserve(self: *Self, extra: i64) Unit = {
        let total = self.len.add(extra);
        let old_cap = self.maybe_uninit.len;
        if(lt(old_cap, total)) {|
            let cap = 4.max(old_cap.add(extra).max(old_cap.mul(2)));
            new: Self = list(cap, self.gpa);
            if(self.len.gt(0)) {|  // TODO: it doesnt let you create a zero length slice in items()
                let dest: Slice(T) = new.maybe_uninit.subslice(0, self.len);
                dest.copy_from(items(self));
                new.len = self.len;
            };
            drop(self);
            self[] = new;
        };
    }
    
    fn push(self: *Self, v: T) Unit = {
        reserve(self, 1);
        let last = self.maybe_uninit.index(self.len); 
        last[] = v;
        self.len = add(self.len, 1);
    }
    
    fn pop_last(self: *Self) ?T = {
        ::if(?T);
        if(eq(self.len, 0), => .None) {|
            let i = sub(self.len, 1);
            self.len = i;
            (Some = self.maybe_uninit.get(i))
        }
    }
    fn pop(self: *Self) ?T = self.pop_last();
    
    fn ordered_remove(self: *Self, index: i64) ?T = {
        ::if(?T);
        if(index.ge(self.len), => .None) {|
            current := self.len.sub(1);
            out := T.zeroed();
            while(=> current.ne(index.sub(1))) {|
                next_out := self[current];
                self[current] = out;
                out = next_out;
                current -= 1;
            };
            
            self.len -= 1;
            (Some = out)
        }
    }
    
    fn push_all(self: *Self, new: Slice(T)) Unit = {
        reserve(self, len(new));
        let dest = subslice(self.maybe_uninit, self.len, len(new));
        dest.copy_from(new);
        self.len = add(self.len, len(new));
    }
    
    fn push_all(self: *Self, owned: *Self) Unit = {
        self.push_all(owned.items());
        owned.drop();
    }
    
    // TODO: this doesn't drop the entries. 
    fn drop(self: *Self) Unit = {
        if(self.maybe_uninit.len.ne(0)) {|
            // TODO: calling this makes fmt.fr fail when runtime target is aarch64,
            //       but it fails in the comptime interp still which is scary. 
            //       its a poison on taking args of a SplitFunc. 
            //       but its fine when collections.fr calls drop and that targets both too tho maybe doesnt cause a split because simpler comptime. 
            //       
            self.gpa.dealloc(T, self.maybe_uninit);
            self.maybe_uninit.len = 0;
            self.len = 0;
        };
    }
    
    /// Retains capacity
    fn clear(self: *Self) Unit = {
        self.len = 0;
    }
    
    Self
}

// TODO: this is really inefficient if you already own 'a'
fn concat(a: Str, b: Str, gpa: Alloc) List(u8) = {
    c: List(u8) = list(a.len().add(b.len()), gpa);
    c&.push_all(a);
    c&.push_all(b);
    c
}

/// The returned strings are subslices of the original. 
fn split(haystack: Str, needle: Str, gpa: Alloc) List(Str) = {
    assert(needle.len().gt(0), "OOB");
    lines: List(Str) = list(1, gpa);
    i := 0;
    let last = sub(len(haystack), len(needle));
    start := 0;
    // TODO: !! should be lt maybe?
    while(=> le(i, last)) {|
        if(eq(get(haystack, i), get(needle, 0)), => {
            let check = subslice(haystack, i, len(needle));
            if(eq(check, needle), fn() Unit => {
                let found = subslice(haystack, start, i.sub(start));
                push(lines&, found);
                i = add(i, len(needle));
                start = i;
            }) {| i = add(i, 1); };
        }) {| i = add(i, 1); };
    };
    let found = subslice(haystack, start, max(0, sub(len(haystack), start)));
    lines&.push(found);
    lines
}

// TODO: better error message if you call this on Ptr(Str)
fn splitlines(s: Str, gpa: Alloc) List(Str) = {
    lf: Str = (@as(u8) 10)!slice;  // TODO: string escapes
    split(s, lf, gpa)
}

fn str() Unit = { unit };  // TODO: scope.rs support recursion. 

// It's such a pain to google an ascii table every time.  
// This takes a constant argument to ensure the length check happens during compilation.
// So this function can take the place of a char literal in other languages without new syntax. 
fn char(const s: Str) i64 = {
    :: {
        // TODO: can't get field of const cause cant take pointer. 
        // TODO: @assert that takes a format string so its less painful to print the arg as well. 
        assert(s.len().eq(1), "char str expected length 1. TODO: utf8"); 
        s.get(0).zext()
    }
}


fn ascii(const s: Str) u8 = {
    :: {
        c := s.char();
        // TODO: auto bounds checks on @as?
        assert(c.lt(128), "expected ascii"); // TODO: make an @assert fmt version. 
        @as(u8) c.trunc()
    }
}

// TODO
fn push(self: *List(u8), v: i64) Unit = self.push(@as(u8) v.trunc());

