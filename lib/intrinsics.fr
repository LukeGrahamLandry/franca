//! These used to be just normal functions defined in the language that used inline assembly. 
//! Now they're implemented in the compiler, in the inst_intrinsic function of each backend. 
//! They behave like #inline functions: type checking, overloading, and function pointers work as normal. 
//! Some can be used by thier conventional infix operator syntax which the parser desugars to a function call to the intrinsic. 

// TODO: have an is_nan that's not `a != a` so you can have an optimisation option that assumes `a == a` is true,
//       but still allows manual nan checks if you want that for like nan boxing or something? 
// TODO: 
//       - float to int rounding
//       - when you need to sign extend. are i16/i8 stored as i32 because thats what you can do math on easily? 
//         if i32 isnt stored as i64, instead high bits of register are 0, need to have <math>32.

fn add(a: i64, b: i64) i64 #intrinsic(.Add) #fold; // +
fn sub(a: i64, b: i64) i64 #intrinsic(.Sub) #fold; // -
fn mul(a: i64, b: i64) i64 #intrinsic(.Mul) #fold; // *
fn div(a: i64, b: i64) i64 #intrinsic(.Div) #fold; // /

fn eq(a: i64, b: i64) bool #intrinsic(.Eq) #fold; // ==
fn ne(a: i64, b: i64) bool #intrinsic(.Ne) #fold; // !=
fn le(a: i64, b: i64) bool #intrinsic(.Le) #fold; // <=
fn ge(a: i64, b: i64) bool #intrinsic(.Ge) #fold; // >=
fn lt(a: i64, b: i64) bool #intrinsic(.Lt) #fold; // <
fn gt(a: i64, b: i64) bool #intrinsic(.Gt) #fold; // >

// TODO: define behaviour when shift > log size. make it a SafetyCheck
fn shift_left(value: i64, shift_amount: i64) i64             #intrinsic(.ShiftLeft) #fold;
fn shift_right_logical(value: i64, shift_amount: i64) i64    #intrinsic(.ShiftRightLogical);
fn shift_right_arithmetic(value: i64, shift_amount: i64) i64 #intrinsic(.ShiftRightArithmetic);
fn bit_or(a: i64, b: i64) i64  #intrinsic(.BitOr) #fold;
fn bit_and(a: i64, b: i64) i64 #intrinsic(.BitAnd) #fold;
fn bit_xor(a: i64, b: i64) i64 #intrinsic(.BitXor) #fold;
fn bit_xor(a: u64, b: u64) u64 #intrinsic(.BitXor) #fold;
fn bit_not(a: i64) i64         #intrinsic(.BitNot) #fold;

// These do nothing but llvm wants to know about it. 
fn int_from_rawptr(ptr: rawptr) i64 #intrinsic(.PtrToInt);
fn rawptr_from_int(ptr: i64) rawptr #intrinsic(.IntToPtr);

fn add(a: f64, b: f64) f64 #intrinsic(.FAdd); // +
fn sub(a: f64, b: f64) f64 #intrinsic(.FSub); // -
fn mul(a: f64, b: f64) f64 #intrinsic(.FMul); // *
fn div(a: f64, b: f64) f64 #intrinsic(.FDiv); // /

fn eq(a: f64, b: f64) bool #intrinsic(.FEq); // ==
fn ne(a: f64, b: f64) bool #intrinsic(.FNe); // !=
fn le(a: f64, b: f64) bool #intrinsic(.FLe); // <=
fn ge(a: f64, b: f64) bool #intrinsic(.FGe); // >=
fn lt(a: f64, b: f64) bool #intrinsic(.FLt); // <
fn gt(a: f64, b: f64) bool #intrinsic(.FGt); // >

// Note: remember i32->i8 is probably a noop if you wanted a value preserving intcast!
fn trunc(v: i64) u8  #intrinsic(.Trunc64To8);
fn trunc(v: i64) u16 #intrinsic(.Trunc64To16);
fn trunc(v: u64) u16 #intrinsic(.Trunc64To16);
fn trunc(v: u64) u32 #intrinsic(.Trunc64To32);
fn trunc(v: u32) u16 #intrinsic(.Trunc32To16);
fn trunc(v: i64) u32 #intrinsic(.Trunc64To32); 
fn trunc(v: u16) u8  #intrinsic(.Trunc16To8);
fn trunc(v: u64) u8  #intrinsic(.Trunc64To8);  // Nobody uses this it seems? 
fn trunc(v: u32) u8  #intrinsic(.Trunc32To8);  // Nobody uses this it seems? 

// TODO: if you typo copy paste this conflicting overload, you try to call an uncompiled function! -- Jul 25 :FUCKED
// TODO: bring back system for testing that things fail with the right error message. 
// fn zext(v: u32) u64 #intrinsic(.ZeroExtend32To64);

fn zext(v: u32) u64 #intrinsic(.ZeroExtend32To64) #fold;
fn zext(v: u8)  u64 #intrinsic(.ZeroExtend8To64) #fold;
fn zext(v: u8)  u32 #intrinsic(.ZeroExtend8To32) #fold;
fn zext(v: u16) u32 #intrinsic(.ZeroExtend16To32) #fold;
fn zext(v: u32) i64 #intrinsic(.ZeroExtend32To64) #fold;
fn zext(v: u16) i64 #intrinsic(.ZeroExtend16To64) #fold;
fn zext(v: u16) u64 #intrinsic(.ZeroExtend16To64) #fold;
fn zext(v: i32) i64 #intrinsic(.ZeroExtend32To64) #fold;
fn zext(v: u8)  i64 #intrinsic(.ZeroExtend8To64) #fold;

fn int(a: f64) i64     #intrinsic(.FloatToIntValue); // preserves the value (not the bit pattern)
fn float(a: i64) f64   #intrinsic(.IntToFloatValue); // preserves the value (not the bit pattern)
fn bitcast(a: f64) i64 #intrinsic(.FloatToIntBits);  // preserves the bit pattern (not the value)
fn bitcast(a: i64) f64 #intrinsic(.IntToFloatBits);  // preserves the bit pattern (not the value)
fn cast(v: f64) f32 #intrinsic(.ShrinkFloat);
fn cast(v: f32) f64 #intrinsic(.GrowFloat);

// TODO: decide if i want my asm backend to use the 32 bit math that zeros the top part,
//       i guess i do because otherwise i can't talk to other languages (recive i32 params)
//       if i dont do that this is wrong and should be a noop cast
fn intcast(v: i64) i32 #intrinsic(.Trunc64To32);
fn intcast(v: i32) i64 #intrinsic(.SignExtend32To64);

// TODO: Since ive decided to put the type info in these, remove controlling_type from Bc
Intrinsic :: @enum(i64) (
    Add, Sub, Mul, Div,
    UDiv,
    FAdd, FSub, FMul, FDiv,
    ShiftLeft,
    ShiftRightLogical,
    ShiftRightArithmetic,
    BitAnd,
    BitOr,
    BitXor,
    Eq, Ne, Lt, Gt, Le, Ge,
    ULt, UGt, ULe, UGe,
    FEq, FNe, FLt, FGt, FLe, FGe,
    // First Single Argument
    BitNot,
    IntToFloatBits, FloatToIntBits, _a, IntToFloatValue, FloatToIntValue,
    ShrinkFloat, GrowFloat,
    IntToPtr, PtrToInt, // These do nothing but llvm gets super stressed out if you don't tell it what's going on. 
    SignExtend32To64,
    Trunc64To32, Trunc64To16, Trunc64To8, Trunc32To16, Trunc32To8, Trunc16To8,
    ZeroExtend32To64, ZeroExtend16To64, ZeroExtend8To64, ZeroExtend16To32, ZeroExtend8To32, ZeroExtend8To16,
);
