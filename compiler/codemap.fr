// TODO: I don't think panicking on invalid spans is acceptable, 
//       given how annoying it is that the library I use does that,
//       when I might have got my spans from buggy jitted code reading garbage memory. 
//       But since I don't have error return traces, a panic is less annoying to debug. 
//       I should try to steal what zig does, but I don't want a blessed error type.
//       https://ziglang.org/documentation/master/#Error-Return-Traces
//

CodeMap :: @struct(
    files: List(File),
    total_len: u32,
);
File :: @struct(name: Str, content: Str, start: u32);

// TODO: if you name a field gpa, it shadows the argument so you can't use it in later field initializers. -- May 31
fn init(gpa: Alloc) CodeMap = 
    (files = list(gpa), total_len = 0);

// The caller is responsible for ensuring name/src outlive the codemap. 
fn add_file(self: *CodeMap, name: Str, content: Str) Span = {
    @assert_lt(@as(i64) self.total_len.zext() + content.len, 0xFFFFFFFF, "add_file total > 4gb. old len = %, content len = %, content ptr = %", self.total_len, content.len, u8.raw_from_ptr(content.ptr));
    span: Span = (low = self.total_len, high = self.total_len.add(content.len.trunc()));
    self.total_len += content.len.trunc();
    self.files&.push((name = name, content = content, start = span.low));
    //@println("add file: %-%", @as(i64) span.low.zext(), @as(i64) span.high.zext());
    @assert_eq(span.len(), content.len, "Miscompiled????");
    span
}

fn find_single_file(self: *CodeMap, span: Span) *File = {
    @safety(.Bounds) span.high >= span.low;
    @safety(.Bounds) span.high <= self.total_len;
    skipped: u32 = 0;
    each(self.files){file|
        end := skipped.add(@as(u32) file.content.len.trunc());
        //@println("low:% high:% skipped:% end:%", span.low, span.high, skipped, end);
        if(span.low.ge(skipped)){
            if(span.high.le(end)) {
                return(file);
            };
        };
        skipped = end;
    };
    @panic("span covers multiple files. %-%", span.low, span.high)
};

fn source_slice(self: *CodeMap, span: Span) Str = {
    //@println("get source: %-%", @as(i64) span.low.zext(), @as(i64) span.high.zext());
    file := self.find_single_file(span);
    start := span.low.sub(file.start);
    file.content.subslice(start.zext(), span.len())
}

// indexes are relative to the start of self. 
fn subspan(self: Span, start: u32, end: u32) Span = {
    @assert_le(@as(i64) end.zext(), self.len(), "OOB");
    @assert_le(start, end, "invalid range");
    (low = self.low.add(start), high = self.low.add(end))
}

fn get_whole_line(self: *CodeMap, span: Span) FrancaCodeLine = {
    file := self.find_single_file(span);
    line := 1; // zero indexed is unintuative for error messages
    col  := 0;
    file_start: i64 = file.start.zext();
    file_end := file_start + file.content.len;
    line_start := file_start;
    
    range(file_start, min(file_end, @as(i64) span.low.zext())) {i|
        col += 1;
        if file.content[i - file_start] == "\n".ascii() {
            line_start = i + 1; // dont include the new line
            line += 1;
            col = 0;
        };
    };
    
    index: i64 = span.low.zext();
    while(=> index.lt(file_end).and(=> file.content[index - file_start] != "\n".ascii())) {
        index += 1;
    };
    
    line_text: Span = (low = line_start.trunc(), high = index.trunc());
    (filename = file.name, line = line, col = col, line_text = line_text)
}

// recall: it is an error to call source_slice on one that spans multiple files. 
fn merge(a: Span, b: Span) Span = (
    low = a.low.min(b.low),
    high = a.high.max(b.high),
);

fn len(self: Span) i64 =
    (@as(u32) self.high.sub(self.low)).zext();

Terminal :: import("@/lib/sys/terminal.fr");

fn fmt_error_loc(self: *CodeMap, span: Span, out: *List(u8)) void = {
    line := self.get_whole_line(span);
    @fmt(out, Terminal.set_colour, 250, 0, 0);
    @fmt(out, "%:%:%", line.filename, line.line, line.col);
    @fmt(out, Terminal.unset_colour);
}

fn fmt_error_line(self: *CodeMap, span: Span, out: *List(u8)) void = {
    line := self.get_whole_line(span);
    @fmt(out, Terminal.set_colour, 250, 0, 0);
    @fmt(out, "%:%:%", line.filename, line.line, line.col);
    @fmt(out, Terminal.unset_colour);
    out.push_all("\n");
    out.push_all(self.source_slice(line.line_text));
    out.push_all("\n");
}
