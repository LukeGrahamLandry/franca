fn fill_self_hosted(vtable: *ImportVTable) void = {
    vtable.add_file = add_file;
    vtable.parse_stmts = parse_stmts;
    vtable.intern_string = intern_string;
    vtable.get_string = get_string;
    vtable.get_baked = get_baked;
    vtable.bake_var = bake_var;
}

CompilerRs :: ***SelfHosted;  // TODO: really this should be a new type so you can't accidently implement call functions by just adding extra indirection. hopefully the number of pointers makes it clear something's weird. 
fn cast(c: Compiler) CompilerRs #unsafe_noop_cast;
fn cast(c: CompilerRs) Compiler #unsafe_noop_cast;

fn add_file(c: Compiler, name: Str, content: Str) Span = {
    c := c.cast();
    c.codemap.add_file(name, content)
}

fn parse_stmts(c: Compiler, f: *Span) Result(Slice(FatStmt), ParseErr) = {
    c := c.cast();
    source := c.codemap.source_slice(f[]);
    id := c.parser.push_parse(source, f[]);
    stmts := @try(c.parser.finish_pending_stmts(id)) return; // TODO: don't return RsVec -- Jun 29
    (Ok = stmts.items())
}

fn intern_string(c: Compiler, s: Str) Symbol = {
    c := c.cast();
    c.pool.insert_owned(s)
}

fn get_string(c: Compiler, s: Symbol) Str = {
    c := c.cast();
    c.pool.get(s)
}

fn bake_var(c: Compiler, val: BakedVar) BakedVarId = {
    put_baked(c.cast()[][], val, .None)
}

fn get_baked(c: Compiler, id: BakedVarId) BakedVar = {
    val := c.cast()[][].get_baked(id); 
    val._1
}

//////////////////////////////////////////////////////////////////////
