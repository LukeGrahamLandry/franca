#include_std("compiler/profile.fr");

Futex :: import("@/lib/sys/sync/futex.fr");
ENABLE_ENABLE_TRACY :: false;

// this will always emit everything callees reachable from `fns` (so no jit-shims will remain at the end). 
// so it's suitable for AOT compilation, but you can still use it for JIT if you want. 
// since there will be no shims, it's safe to use this when you want to set comptime=null 
// before calling the function (like for drivers in `run_franca_file`). 
fn main_thread_pump(comp: CompCtx, shared: *CodegenShared, fns: []FuncId) void = {
    a      := comp.get_alloc();
    env    := comp.get_comptime_env();
    opts   := comp.get_build_options();
    opts.target_os_bitset = opts.target_os_bitset.bit_or(1.shift_left(shared.m.goal.os.raw()));
    opts.target_arch_bitset = opts.target_arch_bitset.bit_or(1.shift_left(shared.m.goal.arch.raw()));
    
    @assert(opts.implicit_context_runtime == env.static_context_var.is_none(), "should have baked the static context location already iff no implicit context");
    when := @if(shared.m.goal.type == .JitOnly, ExecStyle.Jit, .Aot);
    // TODO: really you want to mark them export
    for fns { f |
        id := shared.m.intern(comp.fmt_fn_name(f));
        use_symbol(shared.m, id) { s |
            s.referenced = true;
        };
        // TODO
        //comp.get_function(f).set_flag(.Export);
    };
    
    funcs_done: BitSet = empty();
    work_stack := FuncId.list(a);
    dynamiclib := shared.m.goal.type == .Dynamic;
    if when == .Aot && !dynamiclib {
        work_stack&.push(env.runtime_init.expect("declaration of franca_runtime_init (forgot to include lib/core.fr?)"));
    };
    work_stack&.push_all(fns);
    pending := FuncId.list(a);
    
    while => work_stack.len != 0 {
        continue :: local_return;
        fid := work_stack&.last().unwrap()[];
        if funcs_done&.get(fid.to_index().zext()) {
            work_stack&.pop();
            continue();
        }; // might have been added multiple times
        
        {comp.vtable.report_aot_progress}(comp.data, fid, true, 1);
        func := comp.get_function(fid);
        // Note: compile before checking callees! // TODO: return error instead
        xx := {comp.vtable.compile_func}(comp.data, fid, .Aot);  // TODO: fix parsing to allow this as a quick expr
        or xx { err | 
            @println("failed compile %", comp.get_string(func.name));
            comp.report_error(err)
        };  // TODO: return error instead
        
        // sort the functions to make sure we can inline calls to intrinsics
        not_done_count := 0;
        for func.callees { f |  
            if !funcs_done&.get(f.to_index().zext()) && !work_stack.items().contains(f&) {
                not_done_count += 1;
                work_stack&.push(f);
            };
        };
        if not_done_count > 0 {
            // no pop
            continue();
        };
        
        res := emit_ir(comp, shared, fid, when, shared.bouba_idx&, pending&, false);
        if res&.err() { err | 
            comp.report_error(err[]);
            panic("emir_ir failed!");
        };
        
        {comp.vtable.report_aot_progress}(comp.data, fid, false, 1);
        current := work_stack&.pop().unwrap();
        @assert_eq(current, fid, "order messed up");
        for pending { c |  // HACK
            if !funcs_done&.get(c.to_index().zext()) && !work_stack.items().contains(c&) {  // :SLOW
                work_stack&.push(c);
            };
        };
        pending&.clear();
        funcs_done&.set(fid.to_index().zext(), a);
        for func.mutual_callees { c |
            if !funcs_done&.get(c.to_index().zext()) && !work_stack.items().contains(c&)  {
                work_stack&.push(c);
            };
        };
        if pending.len != 0 {
            for pending& { c | 
                if !funcs_done&.get(c.to_index().zext()) && !work_stack.items().contains(c&) {
                    work_stack&.push(c);
                };
            };
            pending&.clear();
        };
    };
    
    if when == .Aot && fns.len == 1 && !dynamiclib {
        wrap_with_runtime_init(comp, shared, fns[0], shared.bouba_idx&);
    };
    
    if dynamiclib {
        for fns { f |
            func := comp.get_function(f);
            real_name := comp.get_string(func.name);
            lnk := temp().box(Qbe.Lnk);
            lnk.id = shared.m.intern(real_name);
            lnk.export = true;
            entry := shared.bouba_acquire(shared.bouba_idx&);
            entry.task = (Bounce = (lnk = lnk, target = shared.m.intern(comp.fmt_fn_name(f))));
            shared.enqueue_task(entry);
        };
    };
    
    shared.join_codegen_thread();
}

// TODO: factor out this so the other one can call it.  
//
// On macos, we want to save the arguments to the exe entry point. 
// On linux, franca_runtime_init does some extra stuff to grab them from the stack. 
fn wrap_with_runtime_init(comp: CompCtx, shared: *CodegenShared, user_main: FuncId, idx: *i64) void = {
    env := comp.get_comptime_env();
    runtime_init := env.runtime_init.expect("declaration of franca_runtime_init (forgot to include lib/core.fr?)");
    entry := shared.bouba_acquire(idx);
    
    push_dynamic_context {
        context(DefaultContext)[].temporary_allocator = entry.arena&;
        f := temp().box(Qbe.Fn);
        f.default_init(shared.m);
        f.lnk.export = true;
        f.lnk.id = shared.m.intern("main");  // macho/emit looks for this specifically
        name := comp.fmt_fn_name(user_main);
        f.start = newblk();
        f.nblk = 1;
        argc := f.newtmp("argc", .Kl);
        argv := f.newtmp("argv", .Kl);
        envp := f.newtmp("envp", .Kl);
        // IMPORTANT: you can't use f.emit because threads. 
        N :: 8;
        ins: QList(Qbe.Ins) = new(N);
        ins[0] = make_ins(.par, .Kl, argc, QbeNull, QbeNull);
        ins[1] = make_ins(.par, .Kl, argv, QbeNull, QbeNull);
        ins[2] = make_ins(.par, .Kl, envp, QbeNull, QbeNull);
        runtime_init := f.symcon(comp.fmt_fn_name(runtime_init));
        ins[3] = make_ins(.arg, .Kl, QbeNull, argc, QbeNull);
        ins[4] = make_ins(.arg, .Kl, QbeNull, argv, QbeNull);
        ins[5] = make_ins(.arg, .Kl, QbeNull, f.symcon(name), QbeNull);
        ins[6] = make_ins(.arg, .Kl, QbeNull, envp, QbeNull);
        ins[7] = make_ins(.call, .Kw, QbeNull, runtime_init, QbeNull);
        f.start.jmp.type = .ret0;
        f.start.nins = N;
        f.start.ins = ins;
        entry.task = (Func = f);
    };
    enqueue_task(shared, entry);
}

codegen_queue_size :: if(use_threads, => 128, => 1);  // (this is not the number of threads! just the amount of backlog we allow). 

codegen_thread_main :: fn(shared: *CodegenShared) void = {
    @debug_assert(use_threads && shared.threaded && !shared.m.need_write_protect);
    @if(shared.m.goal.type == .JitOnly) apple_thread_jit_write_protect(false);  // :JitMemProtect this thread wants to write
    
    idx := 0;
    loop {
        @debug_assert(shared.m.initialized, "destroyed module before joining codegen thread.");
        if acquire(shared, false, idx&) { entry |
            do_codegen(shared.m, entry);
            release(shared, entry, false);
        } else {
            @assert(shared.no_more_functions, "expected no_more_functions");
            emit_suspended_inlinables(shared.m); // needs to happen on codegen thread for apple's jit shit.
        
            // pthread_getcpuclockid doesn't exist? so we have to do this here
            shared.codegen_time = clock_ms(MacosLibc.CLOCK_THREAD_CPUTIME_ID);  // // :TodoLinux
            shared.no_more_codegen = 1;
            Futex'wake(shared.no_more_codegen&, 1);
            return();
        };
    };
};

// TODO: put this somewhere else
fn add_ns(t: *TimeSpec, nanoseconds: i64) void = {
    nanoseconds += t.nanoseconds;
    s, n := nanoseconds.div_mod(NS_PER_S);
    t.nanoseconds = n;
    t.seconds += s;
}

fn bouba_acquire(shared: *CodegenShared, idx: *i64) *CodegenEntry = {
    entry := acquire(shared, true, idx).unwrap();
    entry.arena&.reset_retaining_capacity();
    entry
}

fn enqueue_task(shared: *CodegenShared, old_entry: *CodegenEntry) void = {
    @debug_assert(!old_entry.task&.is(.Dead), "tried to enqueue dead task");
    release(shared, old_entry, true);
    @if(!shared.threaded) {
        push_dynamic_context {
            do_codegen(shared.m, old_entry);
        };
    };
}

fn do_codegen(m: *QbeModule, entry: *CodegenEntry) void = {
    zone := @if(ENABLE_ENABLE_TRACY, zone_begin(.EmitAot), ());
    logging := entry.logging;
    entry.logging = "";
    context(DefaultContext)[].temporary_allocator = entry.arena&;
    @match(entry.task) {
        fn Dead() => @panic("dead codegen task %", m.initialized);
        fn Func(f) => {
            @if(ENABLE_ENABLE_TRACY) @if(ENABLE_TRACY) ___tracy_emit_zone_name(zone, f.globals.str(f.lnk.id));
            //@if(TRACE_SHIMS)
            //use_symbol(f.globals, f.lnk.id) { s | 
            //    @println("codegen %", s.name);
            //};
            f.globals.set_debug_types(logging, true);
            run_qbe_passes(f);
            f.globals.set_debug_types(logging, false);
        }
        fn Shim(it) => {
            m := it.f.globals;
            //@if(TRACE_SHIMS)
            //use_symbol(m, it.f.lnk.id) { s | 
            //    @println("codegen(S) %", s.name);
            //};
            
            m.set_debug_types(logging, true);
            run_qbe_passes(it.f);
            m.set_debug_types(logging, false);
            
            // The other guy's got slot points to us until it's ready. 
            jit_addr := rawptr.zeroed();
            use_symbol(m, it.f.lnk.id) { s | 
                jit_addr = s.jit_addr;
            };
            @debug_assert(!jit_addr.is_null(), "we just compiled this");
            use_symbol(m, it.shim_for) { s | 
                //@debug_assert(s.jit_addr.is_null(), "making a shim but it already has a jit_addr slot. %", s.name);
                s.jit_addr = jit_addr;
                s.shim_addr = jit_addr;
                if ensure_got_slot(m, s, jit_addr) { fix |
                    push_fixup(m, s, fix);
                };
                @debug_assert(s.got_lookup_offset != -1);
                //@println("shim -> % slot=%", s.name, s.got_lookup_offset);
            };
        }
        fn Asm(it) => {
            // This is trivial but we want to do it without threads fighting. 
            // TODO: support it being exported, etc. 
            m.add_code_bytes(it.lnk.id, it.bytes);  
        }
        fn JitImport(it) => {
            m.put_jit_addr(it.lnk.id, it.addr);
        }
        // TODO: is this still right if some args are passed on the stack? 
        //       i feel like we'll be off by one to look over saved rbp + return address. :FUCKED
        fn Bounce(it) => {
            // TODO: set SymbolInfo.inline if we've already compile the target. 
            f := temp().box_zeroed(Qbe.Fn);
            f.leaf = false;  // need a bit of a stack frame to save lr. TODO: be able to tailret to use b/jmp instead of bl/call.
            f.nblk = 1;
            f.globals = m;
            f.con = new(FIXED_CONST_COUNT);
            f.getcon(0xdeaddead);
            f.getcon(0);
            f.lnk = it.lnk[];
            f.retty = -1;
            f.start = newblk();
            con: Qbe.Con = (sym = (id = it.target), type = .CAddr, bits = (i = 0));
            callee := f.newcon(con&);
            f.reset_scratch();
            f.emit(.call, .Kw, QbeNull, callee, QbeNull);
            f.copy_instructions_from_scratch_reversed_which_means_forwards(f.start);
            f.start.jmp.type = .ret0;
           
            //if m.goal.arch == .wasm32 {
            //    type: i32 = -1;  // TODO
            //    use_symbol(f.globals, it.target) { s | 
            //        s.wasm_type_index = type;
            //    };
            //    use_symbol(f.globals, f.lnk.id) { s | 
            //        s.wasm_type_index = type;
            //    };
            //};
            
            emit_fn(f);
            use_symbol(f.globals, it.target) { s | 
                mark_referenced(f.globals, it.target, s);
            };
            
            // TODO: interaction with shims is confusing
            
        }
        fn AotVar2(it) => each it { d |
            m.emit_data(d[]);
        };
    };
    entry.task = .Dead; 
    @if(ENABLE_ENABLE_TRACY) zone_end(zone);
}

CodegenShared :: @struct(
    queue: []CodegenEntry,
    no_more_functions := false,
    no_more_codegen: u32,
    m: *QbeModule,
    codegen_time := 0,
    thread: Thread,
    constants_used: import("@/lib/collections/bit_set.fr").DynamicBitSet,
    type_indices: HashMap(Type, i64),
    bouba_idx := 0,
    waiting_for_bouba: u32,
    waiting_for_symbol: u32,
    threaded: bool,
);

CodegenState :: @enum(i64) (WaitingForBouba, UsedByBouba, WaitingForKiki, UsedByKiki);

::tagged(CodegenTask);
CodegenTask :: @tagged(
    Dead: void,
    Func: *Qbe.Fn,
    Asm: @struct(lnk: *Qbe.Lnk, bytes: []u8),
    JitImport: @struct(lnk: *Qbe.Lnk, addr: rawptr),
    Bounce: @struct(lnk: *Qbe.Lnk, target: u32),
    Shim: @struct(f: *Qbe.Fn, shim_for: u32),
    AotVar2: []Dat2,
);

CodegenEntry :: @struct(
    arena: ArenaAlloc, 
    task: CodegenTask,
    state: CodegenState,  // :ThreadSafety use cas or whatever
    logging := "",
);

CodegenWorker :: @FnPtr(s: *CodegenShared) void;
fn init(m: *QbeModule, arena: Alloc, worker: CodegenWorker, threaded: bool) *CodegenShared = {
    s := arena.box_zeroed(CodegenShared); 
    s.threaded = threaded && use_threads;
    m.need_write_protect = !threaded && m.use_map_jit_on_apple_silicon;
    //@println("threaded=% need_write_protect=% use_map_jit_on_apple_silicon=%", s.threaded, m.need_write_protect, m.use_map_jit_on_apple_silicon);
    s.queue = arena.alloc_zeroed(CodegenEntry, if(s.threaded, => codegen_queue_size, => 1));
    s.m = m;
    s.constants_used = empty(arena);
    // TODO: one allocation for all the initial slices.
    other_thread_a := general_allocator(); // :leak
    enumerate s.queue { i, entry |
        entry.arena = init(other_thread_a, 16000);
    };
    s.waiting_for_bouba = s.queue.len.trunc();
    @if(s.threaded) {
        s.thread = start_thread(CodegenShared, worker, s);
    };
    s.type_indices = init(arena); 
    
    s
}

fn acquire(shared: *CodegenShared, $i_am_bouba: bool, idx: *i64) ?*CodegenEntry = {
    queue := shared.queue;
    @if(!shared.threaded) return(Some = queue.index(0));
    fence();
    none_ready: u32 = @if(i_am_bouba, 0, codegen_queue_size);
    while => shared.waiting_for_bouba == none_ready {
        if shared.no_more_functions {
            @debug_assert(!i_am_bouba);
            return(.None);
        };
        @if(use_threads) Futex'wait(shared.waiting_for_bouba&, none_ready);
    };
    ::enum(CodegenState);
    waiting: CodegenState = @if(i_am_bouba, .WaitingForBouba, .WaitingForKiki);
    used: CodegenState = @if(i_am_bouba, .UsedByBouba, .UsedByKiki);
    idx[] = idx[].add(1).mod(codegen_queue_size);
    entry := queue.index(idx[]);
    if CodegenState.cas(entry.state&, waiting, used) == waiting {
        // don't reset the arena here, the other guy might want it.
        return(Some = entry);
    };
    @panic("failed acquire % % %", shared.waiting_for_bouba, i_am_bouba, entry.state)
}

fn release(shared: *CodegenShared, entry: *CodegenEntry, $i_am_bouba: bool) void = {
    @if(!shared.threaded) return();
    fence();
    ::enum(CodegenState);
    waiting_inv: CodegenState = @if(i_am_bouba, .WaitingForKiki, .WaitingForBouba);
    used: CodegenState = @if(i_am_bouba, .UsedByBouba, .UsedByKiki);
    prev := CodegenState.cas(entry.state&, used, waiting_inv);
    @assert_eq(prev, used, "failed cas on release CodegenEntry");
    // don't reset the arena here, the other guy might want it.
    
    prev := u32.atomic_add(shared.waiting_for_bouba&, @if(i_am_bouba, MAX_u32, 1));
    none_ready: u32 = @if(i_am_bouba, codegen_queue_size, 0);
    // TODO: if !none_ready, only wake if this was the symbol they wanted
    need_wake := prev == none_ready || shared.waiting_for_symbol == 1 || shared.no_more_functions;
    @if(use_threads && need_wake) Futex'wake(shared.waiting_for_bouba&, 1);
}

fn get_log_types(comp: CompCtx, fid: FuncId) Str = {
    func := comp.get_function(fid);
    if(!func.get_flag(.LogIr), => return(""));
    each func.annotations& { n | 
        if n.name == Flag.log_ir.ident() {
            if n.non_void_arg() { arg |
                return(@match(arg.expr&) {
                    fn String(arg) => comp.get_string(arg[]);
                    @default => {
                        @eprintln("TODO: non string literal #log_ir arg for %", comp.get_string(func.name));
                        "P"
                    };
                });
            };
            return("P");
        };
    };
    panic("ICE: #log_ir was set but did not find tag on the function")
    //"P"  // HACK for @if(TRACE_SHIMS)
}

fn join_codegen_thread(shared: *CodegenShared) void = {
    @if(!shared.threaded) return();
    shared.no_more_functions = true;
    while => shared.no_more_codegen == 0 {
        Futex'wake(shared.waiting_for_bouba&, 1);
        Futex'wait(shared.no_more_codegen&, 0);
    };
    
    result := rawptr.zeroed();
    @if(is_linking_libc()) {
        pthread_join(shared.thread, result&);
    };
}

// this puts a bunch of stuff in temp(), it's expected to be used in the context of a CodegenEntry. 
// TODO: this is so annoying. the data structures are so similar because the two sides need to know the same information. 
//       but i can't quite make them the same because you need to allow multiple modules on one frontend context. 
fn emit_constant(comp: CompCtx, m: *QbeModule, id: BakedVarId) Dat2 = {
    value := comp.get_baked(id);
    (
        id = m.intern(@tfmt("g%", id.id)),  
        align = value.align,
        export = false,  // TODO: allow exporting vars 
        template = @match(value.template) {  // this is ass
            fn Zeroes(it) => (Zeroes = it);
            fn Bytes(it) => (Bytes = it);
        },
        relocations = {
            r := temp().alloc(Dat2.Reloc, value.relocations.len);
            enumerate r { i, r |
                it := value.relocations.index(i);
                // TODO: you can't be doing string formatting in here common man
                r[] = (
                    off = it.off,
                    id = @match(it.target) {
                        fn FuncId(f) => {
                            func := comp.get_function(f);
                            @if_let(func.body&) fn Redirect(inner) => {
                                f = inner[];
                            };
                            m.intern(comp.fmt_fn_name(f))
                        }
                        fn BakedVarId(id) => m.intern(@tfmt("g%", id.id));
                    },
                );
            };
            r
        }
    )
}
