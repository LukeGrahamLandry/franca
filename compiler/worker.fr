// TODO: this file is so fucking annoying to edit. break it up more


#use("@/compiler/profile.fr");

Futex :: import("@/lib/sys/sync/futex.fr");
ENABLE_ENABLE_TRACY :: get_environment_variable("FRANCA_TRACY").is_some();
#use("@/lib/collections/bit_set.fr");

// this will always emit everything callees reachable from `fns` (so no jit-shims will remain at the end). 
// so it's suitable for AOT compilation, but you can still use it for JIT if you want. 
// since there will be no shims, it's safe to use this when you want to set comptime=null 
// before calling the function (like for drivers in `run_franca_file`). 
fn main_thread_pump(comp: CompCtx, shared: *CodegenShared, fns: []FuncId, wrap_main: bool) BitSet = {
    a      := comp.get_alloc();
    env    := comp.get_comptime_env();
    opts   := comp.get_build_options();
    
    ::enum(@type shared.m.goal.type);
    when := @if(shared.m.goal.type == .JitOnly, ExecStyle.Jit, .Aot);
    // TODO: really you want to mark them export
    for fns { f |
        id := shared.m.intern(comp.fmt_fn_name(f));
        use_symbol(shared.m, id) { s |
            s.referenced = true;
        };
        // TODO
        //comp.get_function(f).set_flag(.Export);
    };
    
    funcs_done: BitSet = empty();
    funcs_seen: BitSet = empty();
    work_stack := FuncId.list(a);
    // TODO: dynamiclib is kinda broken because i rely on OS being set by runtime_init
    dynamiclib := shared.m.goal.type == .Dynamic;
    wrap_main := wrap_main && when == .Aot && !dynamiclib;
    if wrap_main {
        work_stack&.push(env.runtime_init.expect("declaration of franca_runtime_init (forgot to include lib/core.fr?)"));
    };
    work_stack&.push_all(fns);
    pending := FuncId.list(a);
    enable_tracy :: @if(ENABLE_ENABLE_TRACY, ENABLE_TRACY, false);
    
    while => work_stack.len != 0 {
        continue :: local_return;
        fid := work_stack&.last().unwrap()[];
        if funcs_done&.get(fid.to_index().zext()) {
            work_stack&.pop();
            continue();
        }; // might have been added multiple times
        
        first_time := !funcs_seen&.get(fid.to_index().zext());
        funcs_seen&.set(fid.to_index().zext(), a);
        {comp.vtable.report_aot_progress}(comp.data, fid, true, 1 /*AotPump*/);
        func := comp.get_function(fid);
        // Note: compile before checking callees! // TODO: return error instead
        xx := {comp.vtable.compile_func}(comp.data, fid, .Aot);  // TODO: fix parsing to allow this as a quick expr
        or xx { err | 
            @println("failed compile %", comp.get_string(func.name));
            comp.report_error(err)
        };  // TODO: return error instead
        
        // sort the functions to make sure we can inline calls to intrinsics
        not_done_count := 0;
        for func.callees { f |  
            if !funcs_done&.get(f.to_index().zext()) {
                if work_stack.items().index_of(f&) { i |
                    // :CompileIntrinsicsFirst
                    // TODO: also it's super not ok to distable this when using tracy 
                    //       (it will cause miscompilation of small programs)
                    //       but otherwise the stack of zones gets messed up and you don't see anything
                    intrinsic := comp.get_function(f).get_flag(.Intrinsic);
                    xxxxx := (first_time || intrinsic);
                    if xxxxx && !enable_tracy {
                        // another function has had the same callee before, still pull it forward, we want to let both inline it. 
                        // only do this the first time processing the caller to avoid cycles. 
                        work_stack&.unordered_remove(i);
                        work_stack&.push(f);
                        not_done_count += 1;
                    }
                } else {
                    // fresh callee, always do it before the caller 
                    work_stack&.push(f);
                    not_done_count += 1;
                };
            };
        };
        if not_done_count > 0 {
            // no pop
            continue();
        };
        
        res := emit_ir(comp, shared, fid, when, pending&, false);
        if res&.err() { err | 
            comp.report_error(err[]);
            panic("emir_ir failed!");
        };
        
        {comp.vtable.report_aot_progress}(comp.data, fid, false, 1 /*AotPump*/);
        current := work_stack&.pop().unwrap();
        @assert_eq(current, fid, "order messed up");
        for pending { c |  // HACK
            if !funcs_done&.get(c.to_index().zext()) && (!enable_tracy || !work_stack.items().contains(c&)) {
                work_stack&.push(c);
            };
        };
        pending&.clear();
        funcs_done&.set(fid.to_index().zext(), a);
        for func.mutual_callees { c |
            if !funcs_done&.get(c.to_index().zext()) && (!enable_tracy || !work_stack.items().contains(c&)) {
                work_stack&.push(c);
            };
        };
    };
    
    if wrap_main {
        wrap_with_runtime_init(comp, shared, fns[0]);
    };
    
    if dynamiclib {
        for fns { f |
            enter_task shared { entry |
                func := comp.get_function(f);
                real_name := comp.get_string(func.name);
                lnk := temp().box(Qbe.Lnk);
                lnk.id = shared.m.intern(real_name);
                lnk.export = true;
                entry.task = (Bounce = (lnk = lnk, target = shared.m.intern(comp.fmt_fn_name(f))));
            };
        };
    };
    
    shared.join_codegen_thread();
    funcs_done
}

// TODO: factor out this so the other one can call it.  
//
// On macos, we want to save the arguments to the exe entry point. 
// On linux, franca_runtime_init does some extra stuff to grab them from the stack. 
fn wrap_with_runtime_init(comp: CompCtx, shared: *CodegenShared, user_main: FuncId) void = {
    env := comp.get_comptime_env();
    runtime_init := env.runtime_init.expect("declaration of franca_runtime_init (forgot to include lib/core.fr?)");
    enter_task shared { entry |
        f := temp().box(Qbe.Fn);
        f.default_init(shared.m);
        f.lnk.export = true;
        f.lnk.id = shared.m.intern("main");  // macho/emit looks for this specifically
        name := comp.fmt_fn_name(user_main);
        f.start = newblk();
        f.nblk = 1;
        argc := f.newtmp("argc", .Kl);
        argv := f.newtmp("argv", .Kl);
        envp := f.newtmp("envp", .Kl);
        sp := f.newtmp("sp", .Kl);
        // IMPORTANT: you can't use f.emit because threads. 
        b := f.start;
        push(b, .par, .Kl, argc, QbeNull, QbeNull);
        push(b, .par, .Kl, argv, QbeNull, QbeNull);
        push(b, .par, .Kl, envp, QbeNull, QbeNull);
        push(b, .alloc4, .Kl, sp, f.getcon(48), QbeNull);
        runtime_init := f.symcon(comp.fmt_fn_name(runtime_init));
        push(b, .arg, .Kl, QbeNull, argc, QbeNull);
        push(b, .arg, .Kl, QbeNull, argv, QbeNull);
        push(b, .arg, .Kl, QbeNull, f.symcon(name), QbeNull);
        push(b, .arg, .Kl, QbeNull, envp, QbeNull);
        push(b, .arg, .Kl, QbeNull, sp, QbeNull);
        push(b, .call, .Kw, QbeNull, runtime_init, QbeNull);
        f.start.jmp.type = .ret0;
        entry.task = (Func = f);
    };
}

fn enter_task(shared: *CodegenShared, $body: @Fn(it: *CodegenEntry) void) void = {
    old := context(DefaultContext)[].temporary_allocator;
    marker := zeroed Alloc.Mark;
    entry := acquire(shared, true).unwrap();
    if shared.threaded {
        context(DefaultContext)[].temporary_allocator = entry.arena&;
        entry.arena&.reset_retaining_capacity();
    } else {
        marker = temp().mark();
    };
    @must_return body(entry);
    enqueue_task(shared, entry);
    if shared.threaded {
        context(DefaultContext)[].temporary_allocator = old;
    } else {
        temp().reset(marker);
    };
}

fn enqueue_task(shared: *CodegenShared, old_entry: *CodegenEntry) void = {
    ::tagged(@type old_entry.task);
    @debug_assert(!old_entry.task&.is(.Dead), "tried to enqueue dead task");
    if !shared.threaded {
        do_codegen(shared.m, old_entry);
        shared.waiting_for_bouba&.push_back(old_entry, panicking_allocator);
    } else {
        release(shared, old_entry, true);
    };
}

// (this is not the number of threads! just the amount of backlog we allow). 
codegen_queue_size :: 128;

codegen_thread_main :: fn(shared: *CodegenShared) void = {
    @debug_assert(use_threads && shared.threaded && !shared.m.need_write_protect);
    @if(shared.m.use_map_jit_on_apple_silicon) apple_thread_jit_write_protect(false);  // :JitMemProtect this thread wants to write
    
    idx := 0;
    loop {
        @debug_assert(shared.m.initialized, "destroyed module before joining codegen thread.");
        if acquire(shared, false) { entry |
            context(DefaultContext)[].temporary_allocator = entry.arena&;
            do_codegen(shared.m, entry);
            release(shared, entry, false);
        } else {
            @assert(shared.no_more_functions, "expected no_more_functions");
            emit_suspended_inlinables(shared.m); // needs to happen on codegen thread for apple's jit shit.
        
            // pthread_getcpuclockid doesn't exist? so we have to do this here
            shared.codegen_time = clock_ms(MacosLibc.CLOCK_THREAD_CPUTIME_ID);  // // :TodoLinux
            shared.no_more_codegen = 1;
            Futex'wake(shared.no_more_codegen&, 1);
            return();
        };
    };
};

fn do_codegen(m: *QbeModule, entry: *CodegenEntry) void = {
    zone := @if(ENABLE_ENABLE_TRACY, zone_begin(.Backend), ());
    logging := entry.logging;
    entry.logging = "";
    prev_debug := m.debug;
    m.set_debug_types(logging, true);
    @match(entry.task) {
        fn Dead() => @panic("dead codegen task %", m.initialized);
        fn Func(f) => {
            @if(ENABLE_ENABLE_TRACY) @if(ENABLE_TRACY) ___tracy_emit_zone_name(zone, f.globals.str(f.lnk.id));
            run_qbe_passes(f);
        }
        // TODO: this is more confusing than it needs to be
        fn Shim(it) => {
            m := it.f.globals;
            run_qbe_passes(it.f);
            
            // The other guy's got slot points to us until it's ready. 
            jit_addr := rawptr.zeroed();
            use_symbol(m, it.f.lnk.id) { s | 
                jit_addr = s.jit_addr;
            };
            @debug_assert(!jit_addr.is_null(), "we just compiled this");
            use_symbol(m, it.shim_for) { s | 
                @debug_assert(s.jit_addr.is_null(), "making a shim but it already has a jit_addr slot. %", s.name);
                s.jit_addr = jit_addr;
                s.shim_addr = jit_addr;
                if ensure_got_slot(m, s, jit_addr) { fix |
                    push_fixup(m, s, fix);
                };
                @debug_assert(s.got_lookup_offset != -1);
                
                // for normal franca code this doesn't matter because you can only create a data fixup by already having a jit shim, 
                // but FrcImport changes that and this matters for symbols only referenced through a vtable. without this, the patch 
                // will only be filled when the real function gets compiled and it will only get compiled the first time you try to 
                // call through the shim. only matters for the comptime module or if FRANCA_NO_CACHE=true.   -- Jun 9, 2025
                each s.fixups { fix |
                    @if_let(fix.type) fn DataAbsolute(it) => {
                        rawptr.ptr_from_raw(fix.patch_at)[] = jit_addr.offset(it.increment);
                    };
                };
            };
        }
        fn Asm(it) => {
            // This is trivial but we want to do it without threads fighting. 
            // TODO: support it being exported, etc. 
            m.add_code_bytes(it.lnk.id, it.code);  
        }
        fn JitImport(it) => {
            m.put_jit_addr(it.lnk.id, it.addr);
        }
        // Note: this does not work on wasm because they care about signatures
        fn Bounce(it) => {
            declare_alias(m = m, target = it.target, alias = it.lnk);
        }
        fn AotVar2(it) => each it { d |
            m.emit_data(d[]);
        };
        fn SetLibrary(it) => for it { id, lib, weak |
            // This is trivial but we want to do it without threads fighting. 
            m.set_library(id, lib, weak);
        };
        fn FromCache(it) => {  
            f := it.f;
            @if(ENABLE_ENABLE_TRACY) @if(ENABLE_TRACY) ___tracy_emit_zone_name(zone, f.globals.str(f.lnk.id));
            
            // TODO: factor out this and from incremental.fr/compile_all_symbols() so i don't have to remember to keep them in sync
            if it.did_regalloc {
                emit_fn(f);
            } else {
                // TODO: still inlsave(), that's kinda the whole point of this operation
                {f.globals.target.finish_passes}(f);
            };
        }
    };
    entry.task = .Dead; 
    m.debug = prev_debug;
    @if(ENABLE_ENABLE_TRACY) zone_end(zone);
}

#use("@/lib/sys/threads.fr");
#use("@/lib/collections/deque.fr");
CodegenShared :: @struct(
    entries: []CodegenEntry,
    waiting_for_bouba: RawDeque(*CodegenEntry),
    // It's important that these are processed in the order they're created so it's not a race to get a reproducible build. 
    waiting_for_kiki: RawDeque(*CodegenEntry),
    mutex: import("@/lib/sys/sync/mutex.fr").Mutex,
    waiting_for_bouba_futex: u32,
    waiting_for_kiki_futex: u32,

    no_more_functions: bool,
    no_more_codegen: u32,
    m: *QbeModule,
    codegen_time: i64,
    thread: *Thread,
    constants_used: import("@/lib/collections/bit_set.fr").DynamicBitSet,
    type_indices: HashMap(Type, i64),
    waiting_for_symbol: u32,
    threaded: bool,
    frc_imports: RawList(import("@/compiler/incremental.fr").FrcModuleInstance),
);

#use("@/backend/lib.fr");
CodegenTask :: @tagged(
    Dead: void,
    Func: *Qbe.Fn,
    Asm: @struct(lnk: *Qbe.Lnk, code: *MultiArchAsm),
    JitImport: @struct(lnk: *Qbe.Lnk, addr: rawptr),
    Bounce: @struct(lnk: *Qbe.Lnk, target: Qbe.Sym),
    Shim: @struct(f: *Qbe.Fn, shim_for: Qbe.Sym),
    AotVar2: []Dat2,
    // :UpdateBoot
    SetLibrary: []Ty(@slice(Qbe.Sym, Str, bool)), // id, lib, weak
    FromCache: @struct(f: *Qbe.Fn, did_regalloc: bool),
);

CodegenEntry :: @struct(
    arena: ArenaAlloc, 
    task: CodegenTask,
    logging := "",
);

CodegenWorker :: @FnPtr(s: *CodegenShared) void;
fn init_codegen_worker(m: *QbeModule, arena: Alloc, worker: CodegenWorker, threaded: bool) *CodegenShared = {
    s := arena.box_zeroed(CodegenShared); 
    s.mutex&.lock();
    s.threaded = threaded && use_threads;
    m.need_write_protect = !threaded && m.use_map_jit_on_apple_silicon;
    s.m = m;
    s.constants_used = empty(arena);
    n := codegen_queue_size;
    s.entries = arena.alloc_zeroed(CodegenEntry, n);
    s.waiting_for_bouba = init(arena, n);
    s.waiting_for_kiki = init(arena, n);
    each s.entries { it |
        if s.threaded {
            it.arena = init(general_allocator(), 16000);  // these are freed in join_codegen_thread
        };
        s.waiting_for_bouba&.push_back(it, arena);
    };
    s.waiting_for_bouba_futex = n.trunc();
    @if(s.threaded) {
        thread_stack := page_allocator.alloc(u8, 1.shift_left(25));
        s.thread = start_thread(thread_stack, CodegenShared, worker, s);
    };
    s.type_indices = init(arena); 
    s.frc_imports = init(arena, 64);  // TODO: don't have a fixed size. need to use BucketArray or something tho
    s.mutex&.unlock();
    s
}

// don't reset the arena here, the other guy might want it.
fn acquire(shared: *CodegenShared, $i_am_bouba: bool) ?*CodegenEntry = {
    futex := @if(i_am_bouba, shared.waiting_for_bouba_futex&, shared.waiting_for_kiki_futex&);
    if shared.threaded {
        zone := @if(ENABLE_ENABLE_TRACY, zone_begin(.Wait), ());
        fence();
        while => futex[] == 0 {
            fence();
            if shared.no_more_functions {
                @debug_assert(!i_am_bouba);
                return(.None);
            };
            Futex'wait(futex, 0);
        };
        zone_end(zone);
        fence();
    };
    
    shared.mutex&.lock();
    source := @if(i_am_bouba, shared.waiting_for_bouba&, shared.waiting_for_kiki&);
    it := source.pop_front().expect("acquire CodegenEntry");
    if shared.threaded {
        futex[] -= 1;
    };
    shared.mutex&.unlock();
    (Some = it)
}

// don't reset the arena here, the other guy might want it.
fn release(shared: *CodegenShared, entry: *CodegenEntry, $i_am_bouba: bool) void = {
    @debug_assert(shared.threaded);
    shared.mutex&.lock();
    dest := @if(i_am_bouba, shared.waiting_for_kiki&, shared.waiting_for_bouba&);
    dest.push_back(entry, panicking_allocator);
    futex := @if(!i_am_bouba, shared.waiting_for_bouba_futex&, shared.waiting_for_kiki_futex&);
    
    prev := u32.atomic_add(futex, 1);
    // TODO: if !none_ready, only wake if this was the symbol they wanted
    need_wake := prev == 0 || shared.waiting_for_symbol == 1 || shared.no_more_functions;
    @if(need_wake) Futex'wake(futex, 1);
    shared.mutex&.unlock();
}

fn get_log_types(comp: CompCtx, fid: FuncId) Str = {
    #use("@/compiler/ast_external.fr");
    func := comp.get_function(fid);
    if(!func.get_flag(.LogIr), => return(""));
    each func.annotations& { n | 
        if n.name == Flag.log_ir.ident() {
            if n.non_void_arg() { arg |
                return(@match(arg.expr&) {
                    fn String(arg) => comp.get_string(arg[]);
                    @default => {
                        @eprintln("TODO: non string literal #log_ir arg for %", comp.get_string(func.name));
                        "P"
                    };
                });
            };
            return("P");
        };
    };
    panic("ICE: #log_ir was set but did not find tag on the function")
}

fn join_codegen_thread(shared: *CodegenShared) void = {
    @assert(!shared.no_more_functions);
    shared.no_more_functions = true;
    fence();
    if shared.threaded {
        while => shared.no_more_codegen == 0 {
            Futex'wake(shared.waiting_for_bouba_futex&, 1);
            Futex'wake(shared.waiting_for_kiki_futex&, 1);
            Futex'wait(shared.no_more_codegen&, 0);
        };
        shared.thread.join();
        shared.thread = zeroed(@type shared.thread);
    };
    shared.mutex&.lock();
    
    @debug_assert(shared.waiting_for_bouba&.len() == shared.entries.len && shared.waiting_for_bouba_futex == shared.entries.len.trunc());
    @debug_assert(shared.waiting_for_kiki&.len() == 0);
    @if(shared.threaded) each shared.entries { q |
        q.arena&.deinit();
    };
    arena := shared.type_indices.alloc;
    arena.dealloc(@type shared.entries[0], shared.entries);
    shared.frc_imports&.drop(arena);
    shared.type_indices&.drop();
    shared.waiting_for_bouba&.drop(arena);
    shared.waiting_for_kiki&.drop(arena);
    
    if !shared.threaded {
        shared.m.emit_suspended_inlinables();
    } else {
        @debug_assert_eq(shared.m.inlinable_but_referenced_later.len, 0, "this happens on the other thread so it works with apple's MAP_JIT");
    };
    arena.dealloc_one(@type shared[], shared);
}
