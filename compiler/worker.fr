
fn main_thread_pump(comp: CompCtx, shared: *CodegenShared, fns: []FuncId, when: ExecStyle) void = {
    idx := 0;
    a      := comp.get_alloc();
    env    := comp.get_comptime_env();
    @assert(comp.get_build_options()[].implicit_context_runtime == env.static_context_var.is_none(), "should have baked the static context location already iff no implicit context");
    
    // TODO: really you want to mark them export
    for fns { f |
        shared.m.get_symbol_info(shared.m.intern(comp.fmt_fn_name(f)))[].referenced = true;
    };
    
    funcs_done: BitSet = empty();
    work_stack := FuncId.list(a);
    work_stack&.push_all(fns);
    pending := FuncId.list(a);
    
    while => work_stack.len != 0 {
        continue :: local_return;
        fid := work_stack&.last().unwrap()[];
        if funcs_done&.get(fid.to_index().zext()) {
            work_stack&.pop();
            continue();
        }; // might have been added multiple times
        
        {comp.vtable.report_aot_progress}(comp.data, fid, true);
        func := comp.get_function(fid);
        // Note: compile before checking callees! // TODO: return error instead
        xx := {comp.vtable.compile_func}(comp.data, fid, .Aot);  // TODO: fix parsing to allow this as a quick expr
        or xx { err | 
            @println("failed compile %", comp.get_string(func.name));
            comp.report_error(err)
        };  // TODO: return error instead
        
        // sort the functions to make sure we can inline calls to intrinsics
        not_done_count := 0;
        for func.callees { f |  
            if !funcs_done&.get(f.to_index().zext()) && !work_stack.items().contains(f&) {
                not_done_count += 1;
                work_stack&.push(f);
            };
        };
        if not_done_count > 0 {
            // no pop
            continue();
        };
        
        res := emit_ir(comp, shared, fid, when, idx&);
        if res&.err() { err | 
            comp.report_error(err[]);
            panic("emir_ir failed!");
        };
        
        {comp.vtable.report_aot_progress}(comp.data, fid, false);
        current := work_stack&.pop().unwrap();
        @assert_eq(current, fid, "order messed up");
        if res.Ok { target | 
            work_stack&.push(target);
        };
        funcs_done&.set(fid.to_index().zext(), a);
        for func.mutual_callees { c |
            if !funcs_done&.get(c.to_index().zext()) && !work_stack.items().contains(c&)  {
                work_stack&.push(c);
            };
        };
        if pending.len != 0 {
            for pending& { c | 
                if !funcs_done&.get(c.to_index().zext()) && !work_stack.items().contains(c&) {
                    work_stack&.push(c);
                };
            };
            pending&.clear();
        };
    };
    
    // TODO: not for dynamic
    if when == .Aot && fns.len == 1 {
        wrap_with_runtime_init(comp, shared, fns[0]);
    };
    
    shared.join_codegen_thread();
    //for fns { f | 
    //    shared.m.get_symbol_info().
    //};
    shared.m.emit_suspended_inlinables();
    if when == .Aot {
        if env.static_context_var { context | 
            todo()
        };
    };
}

// TODO: factor out this so the other one can call it.  
fn wrap_with_runtime_init(comp: CompCtx, shared: *CodegenShared, user_main: FuncId) void = {
    i := 0;
    env := comp.get_comptime_env();
    runtime_init := env.runtime_init.expect("declaration of franca_runtime_init");
    entry := shared.bouba_acquire(i&);
    
    push_dynamic_context {
        context(DefaultContext)[].temporary_allocator = entry.arena&;
        f := temp().box_zeroed(Qbe.Fn);
        f.default_init(shared.m);
        f.lnk.export = true;
        f.lnk.id = shared.m.intern("main");  // macho/emit looks for this specifically
        name := comp.fmt_fn_name(user_main);
        f.start = newblk();
        f.nblk = 1;
        argc := f.newtmp("argc", .Kl);
        argv := f.newtmp("argv", .Kl);
        f.reset_scratch();
        f.emit(.par, .Kl, argc, QbeNull, QbeNull);
        f.emit(.par, .Kl, argv, QbeNull, QbeNull);
        runtime_init := f.symcon(comp.fmt_fn_name(runtime_init));
        f.emit(.arg, .Kl, QbeNull, argc, QbeNull);
        f.emit(.arg, .Kl, QbeNull, argv, QbeNull);
        f.emit(.arg, .Kl, QbeNull, f.symcon(name), QbeNull);
        f.emit(.call, .Kw, QbeNull, runtime_init, QbeNull);
        f.start.jmp.type = .ret0;
        f.copy_instructions_from_scratch_reversed_which_means_forwards(f.start);
        entry.task = (Func = f);
    };
    enqueue_task(shared, entry);
}

use_threads :: {
    env := BuildOptions.ptr_from_raw(get_comptime_environment()[].build_options);
    env.implicit_context_runtime && true
};

// TODO: single threaded needing 2 because i of when i call clear is silly. 
codegen_queue_size :: if(use_threads, => 128, => 2);  // (this is not the number of threads! just the amount of backlog we allow). 

codegen_thread_main :: fn(shared: *CodegenShared) void = {
    idx := 0;
    @debug_assert(use_threads);
    loop {
        if acquire(shared.queue, false, idx&) { entry |
            do_codegen(shared.m, entry);
        } else {
            if shared.no_more_functions {
                // pthread_getcpuclockid doesn't exist? so we have to do this here
                shared.codegen_time = clock_ms(CLOCK_THREAD_CPUTIME_ID);
                shared.no_more_codegen = true;
                return();
            };
            pthread_mutex_lock(shared.mutex&).unwrap();
            pthread_cond_wait(shared.cond&, shared.mutex&).unwrap();
            pthread_mutex_unlock(shared.mutex&).unwrap();
        };
    };
};

fn bouba_acquire(shared: *CodegenShared, idx: *i64) *CodegenEntry = {
    loop {
        if shared.queue.acquire(true, idx) { entry |
            return(entry);
        };
        usleep(1000);  // most of the time the backend is not the bottle neck (because my frontend is so dumb). 
                       // currently it falls behind ~11 times during self compile. -- Nov 26
    };
}

fn enqueue_task(shared: *CodegenShared, old_entry: *CodegenEntry) void = {
    old_entry.release(true);
    @if(use_threads, {
        pthread_cond_signal(shared.cond&);
    }, {
        ::ptr_utils(*CodegenEntry);
        idx := 0;
        entry := shared.queue.acquire(false, idx&).unwrap();
        @debug_assert(old_entry.identical(entry));
        push_dynamic_context {
            do_codegen(shared.m, entry);
        };
    });
}

fn do_codegen(m: *QbeModule, entry: *CodegenEntry) void = {
    context(DefaultContext)[].temporary_allocator = entry.arena&;
    @match(entry.task) {
        fn Dead() => unreachable();
        fn Func(f) => {
            //use_symbol(f.globals, f.lnk.id) { s | 
                //@println("codegen %", s.name);
            //};
            f.globals.set_debug_types(entry.logging, true);
            run_qbe_passes(f);
            f.globals.set_debug_types(entry.logging, false);
        }
        fn Asm(it) => {
            // This is trivial but we want to do it without threads fighting. 
            // TODO: support it being exported, etc. 
            m.add_code_bytes(it.lnk.id, it.bytes);  
        }
        fn JitImport(it) => {
            m.put_jit_addr(it.lnk.id, it.addr);
        }
        fn Bounce(it) => {
            // TODO: set SymbolInfo.inline if we've already compile the target. 
            f := temp().box_zeroed(Qbe.Fn);
            f.leaf = false;  // need a bit of a stack frame to save lr. TODO: be able to tailret to use b/jmp instead of bl/call.
            f.nblk = 1;
            f.globals = m;
            f.con = new(FIXED_CONST_COUNT);
            f.getcon(0xdeaddead);
            f.getcon(0);
            f.lnk = it.lnk[];
            f.start = newblk();
            con: Qbe.Con = (sym = (id = it.target, type = .SGlo), type = .CAddr, bits = (i = 0));
            callee := f.newcon(con&);
            f.reset_scratch();
            f.emit(.call, .Kw, QbeNull, callee, QbeNull);
            f.copy_instructions_from_scratch_reversed_which_means_forwards(f.start);
            f.start.jmp.type = .ret0;
            use_symbol(f.globals, it.target) { s | 
                mark_referenced(f.globals, it.target, s);
            };
            {m.target.emitfn}(m, f, m[].outf);
        }
        fn AotVar(it) => {
            for it.ids { id |
                emit_constant(it.c, m, id);
            };
        }
    };
    entry.task = .Dead; 
    entry.release(false);
}

CodegenShared :: @struct(
    queue: []CodegenEntry,
    no_more_functions := false,
    no_more_codegen := false,
    cond: PCond,
    mutex: PMutex,
    m: *QbeModule,
    codegen_time := 0,
    thread: Thread,
    constants_used: DynamicBitSet,
);

CodegenState :: @enum(i64) (WaitingForBouba, UsedByBouba, WaitingForKiki, UsedByKiki);

::tagged(CodegenTask);
CodegenTask :: @tagged(
    Dead: void,
    Func: *Qbe.Fn,
    Asm: @struct(lnk: *Qbe.Lnk, bytes: []u8),
    JitImport: @struct(lnk: *Qbe.Lnk, addr: rawptr),
    Bounce: @struct(lnk: *Qbe.Lnk, target: u32),
    // TODO: exposing the CompCtx here is really not what you want. this is trash. 
    //       but it's also trash to wait until the end to do any of these.
    AotVar: @struct(c: CompCtx, ids: []BakedVarId),
);

CodegenEntry :: @struct(
    arena: ArenaAlloc, 
    task: CodegenTask,
    state: CodegenState,  // :ThreadSafety use cas or whatever
    logging := "",
    id: i64,
);

QbeTerminator :: @struct(
    arg := QbeNull,
    target1 := BbId.zeroed(),
    target2 := BbId.zeroed(),
    type: Qbe.J,
);

WipBlock :: @struct(
    insts: List(Qbe.Ins),
    jmp: QbeTerminator,
);

CodegenWorker :: @FnPtr(s: *CodegenShared) void;
fn init(m: *QbeModule, worker: CodegenWorker) *CodegenShared = {
    a := libc_allocator;
    q := a.alloc(CodegenEntry, codegen_queue_size); // :Leak
    shared := a.box(CodegenShared);  // :leak
    shared.queue = q;
    shared.m = m;
    shared.constants_used = empty(a);
    @if(use_threads) {
        pthread_mutex_init(shared.mutex&, 0).unwrap();
        pthread_cond_init(shared.cond&, 0).unwrap();
    };
    // TODO: one allocation for all the initial slices.
    enumerate shared.queue { i, entry |
        entry.arena = init(a, macos_page_size);
        entry.id = i;
    };
    @if(use_threads) {
        shared.thread = start_thread(CodegenShared, worker, shared);
    };
    
    shared
}

fn acquire(queue: []CodegenEntry, i_am_bouba: bool, idx: *i64) ?*CodegenEntry = {
    ::enum(CodegenState);
    waiting: CodegenState = @if(i_am_bouba, .WaitingForBouba, .WaitingForKiki);
    used: CodegenState = @if(i_am_bouba, .UsedByBouba, .UsedByKiki);
    range(0, codegen_queue_size) { _ |
        idx[] = idx[].add(1).mod(codegen_queue_size);
        entry := queue.index(idx[]);
        if entry.state == waiting {
            entry.state = used;
            // don't reset the arena here, the other guy might want it.
            return(Some = entry);
        };
    };
    .None
}

fn release(entry: *CodegenEntry, i_am_bouba: bool) void = {
    waiting_inv: CodegenState = @if(i_am_bouba, .WaitingForKiki, .WaitingForBouba);
    entry.state = waiting_inv;
    // don't reset the arena here, the other guy might want it.
}

fn get_log_types(comp: CompCtx, fid: FuncId) Str = {
    func := comp.get_function(fid);
    if(!func.get_flag(.LogIr), => return(""));
    each func.annotations& { n | 
        if n.name == Flag.log_ir.ident() {
            if n.args& { arg |
                return(@match(arg.expr&) {
                    fn String(arg) => comp.get_string(arg[]);
                    @default => {
                        @eprintln("TODO: non string literal #log_ir arg for %", comp.get_string(func.name));
                        "P"
                    };
                });
            };
            return("P");
        };
    };
    panic("ICE: #log_ir was set but did not find tag on the function")
}

fn join_codegen_thread(shared: *CodegenShared) void = {
    shared.no_more_functions = true;
    while => !shared.no_more_codegen {
        usleep(100);
        pthread_cond_signal(shared.cond&);
    };
}

fn emit_constant(comp: CompCtx, m: *QbeModule, id: BakedVarId) void = {
    // Baked.values is a BucketArray so its almost fine to do this on another thread, 
    // TODO: but you could get super unlucky and hit it during a resize of the list of buckets. :ThreadSafety :FUCKED
    _, value := {comp.vtable.get_baked}(comp.data, id)[];
    idx: i64 = id.id.zext();
    
    dat := Qbe.Dat.zeroed();
    lnk: Qbe.Lnk = (id = m.intern(@tfmt("g%", idx)));
    dat.lnk = lnk&;
    
    emit_data :: fn(d) => m.new_emit_data(d);
    
    dat.type = .DStart;
    emit_data(dat&);
    @match(value&) {
        (fn Zeros(len) => {
            dat.type = .DZ;
            dat.u.num = len[];
            emit_data(dat&);
        });
        (fn Bytes(bytes) => {
            dat.type = .DB;
            dat.is_str = true;
            dat.u.str = bytes[].items();
            emit_data(dat&);
            dat.is_str = false;
        });
        (fn VoidPtrArray(parts) => {
            for(parts[].items()){inner|
                @match(inner) {
                    (fn FnPtr(f) => {
                        dat.type = .DL;
                        // TODO: hack because of new deduplication
                        func := comp.get_function(f);
                        @if_let(func.body&) fn Redirect(inner) => {
                            f = inner[];
                        };
                        dat.is_ref = true;
                        fuck := @tfmt("%\0", comp.fmt_fn_name(f));
                        dat.u.ref = (name = (ptr = fuck.ptr), off = 0);
                        emit_data(dat&);
                        dat.is_ref = false;
                        // TODO: make sure we emitted the function. 
                    });
                    (fn AddrOf(id) => {
                        dat.type = .DL;
                        dat.is_ref = true;
                        fuck := @format("g%\0", @as(i64) id.id.zext()) temp();
                        dat.u.ref = (name = (ptr = fuck.maybe_uninit.ptr), off = 0);
                        emit_data(dat&);
                        dat.is_ref = false;
                    });
                    (fn Num(v) => {
                        dat.type = .DL; // TODO: small prims
                        dat.u.num = v.value;
                        emit_data(dat&);
                    });
                };
            };
        });
    };
    dat.type = .DEnd;
    emit_data(dat&);
}

fn temp_env_flag_enabled($s: Str) bool = {
    var := getenv("FRANCA_NEW".sym().c_str());
    !var.ptr.is_null() && var.str() == "true"
}
