#include_std("lib/core.fr"); 
#include_std("compiler/lib.fr"); 

DISABLE_IMPORT_FRC :: IS_BOOTSTRAPPING;
DEBUG_SPAM_LOG :: false;

//
// env vars (value doesn't matter): 
// FRANCA_BACKTRACE 
// FRANCA_LOG_STATS 
// FRANCA_TRACY
//

want_backtrace :: @static(bool);

fn main() void = {
    Incr'set_self_hash();
    vtable := init_driver_vtable();
    if ENABLE_TRACY {
        eprintln(">>> Compiler includes tracy instrumentation.");
    };
    if !ENABLE_CONST_FOLD || !ENABLE_INLINING || !ENABLE_ELIDE_SLOTS || !ENABLE_PROMOTE {
        @eprintln(">>> (SLOW) Compiler optimisations: F=% I=% E=% M=%", ENABLE_CONST_FOLD, ENABLE_INLINING, ENABLE_ELIDE_SLOTS, ENABLE_PROMOTE);
    };
    args := cli_args();
    
    update_global_stdlib_path();
    
    if args.len <= 1 {
        panic("Expected cli argument: a path to a franca file."); // or driver shared library
    };
    
    want_backtrace[] = get_environment_variable("FRANCA_BACKTRACE").is_some() || ALWAYS_BE_SIGNALLING;
    
    do_signals();
    Crash'push_resolver(@import_symbol "__franca_aot_debug_info", find_in_debug_info);
    if want_backtrace[] {
        Crash'request_backtrace_on_panic();
    };
   
    ::?Arch;
    filename := args[1].str();
    @match(run_franca_file(vtable, filename)) {
        (fn Ok(_) => ());
        (fn Err(e) => {
            // TODO: better error message logging but its a pain becuase you don't have the compiler instance here. -- Sep 19
            ::tagged(CompileError);
            @match(e) {
                fn Msg(it) => eprintln(it.msg);
                fn Parse(it) => eprintln(it.msg);
                @default => @eprintln("%", e.tag());
            };
            panic("Error loading driver")
        });
    };
    
    if STDLIB_PATH.take() { it |
        it&.drop(general_allocator());
    };
}

fn do_signals() void = {
    Crash'catch_signals(handle_signal);
    handle_signal :: fn(s: i64, info: *Posix.SysSigInfo, ctx: *Posix.SysUContext) void = {
        signal_handler_body(info, ctx) { info, ctx |
            if is_wrongly_illegal_instruction(info, ctx) {
                return();
            };
            if want_backtrace[] {
                Crash'show_trace_and_exit(s, info, ctx);
            } else {
                // TODO: this is so fucking annoying when you have nested programs running (like my tests...)
                @if(Crash.LOOPING[] == 0) scary_log("note: run with `FRANCA_BACKTRACE=1` environment variable to display a backtrace\n");
            };
            if Crash.LOOPING[] <= 1 {
                if info.si_signo == Posix.SIG.TRAP {
                    msg :: "trace trap: compiler inserted break instruction\nthis can happen because of an unfilled or unflushed Fixup (ICE)";
                    @println(msg);
                };
                // TODO: show readable name
                //if n.raw() < C.SignalNum.enum_count() {
                //    scary_log(n.name_str());
                //};
            };
            Syscall'exit(1);
        }
    };
    
    // 
    // See the comment on clear_instruction_cache. 
    // 
    // If you mess that up it manifests as getting an "illegal instruction" fault 
    // where looking at the instruction shows it's actually a valid instruction 
    // (and it will always be bti because when you jump into fresh code that's 
    // always the first instruction executed) so if that happens, just bail from the 
    // signal handler and try again. The stress of the context switching will probably 
    // have flushed the cache so it will work the second time. 
    // 
    // This codepath is taken very rarely, because i try to clearcache as 
    // needed, so the performace impact is negligible but doing this means the compiler 
    // can be 100% reliable even if i only clearcache 99.9% correctly. 
    // It was more of a problem when jit codegen happened on another thread. 
    // 
    is_wrongly_illegal_instruction :: fn(info: *Posix.SigInfo, ctx: *Posix.UContext) bool #inline = true 
        && current_arch() == .aarch64
        && info.si_signo == Posix.SIG.ILL 
        && u32.ptr_from_raw(ctx.ip)[] == Arm.branch_target_marker;
};
