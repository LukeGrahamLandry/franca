#include_std("core.fr"); // TODO: handle adding this in new driver. 

#include_std("codemap.fr");
#include_std("lex.fr");
#include_std("pool.fr");
#include_std("parse.fr");
#include_std("backend/walk_bc.fr");
#include_std("backend/qbe.fr");
#include_std("backend/llvm.fr");
#include_std("error_reporting.fr");

// TODO: aot backends can't do this. 
// TODO: check which backend you're on!!! i forget every fucking time. 
//:: print_stacktrace_on_panic();

SelfHosted :: @struct(
    pool: *StringPool,
    codemap: *CodeMap,
    parser: *Parser,
);

// TODO: pass requested type through generic args so this isn't so clunky. -- Jun 23
fn init_self_hosted() SelfHosted #compiler = {
    a := libc_allocator;
    pool: StringPool = init(a);
    pool := a.boxed(StringPool, pool);
    codemap: CodeMap = init(a);
    codemap := a.boxed(CodeMap, codemap);
    t: List(ParseTask) = list(a);
    parser: Parser = (pool = pool, lex = Lexer.zeroed(), tasks = libc_allocator.boxed(List(ParseTask), t), alloc = a, last = Token.zeroed());
    (
        pool = pool,
        codemap = codemap,
        parser = a.boxed(Parser, parser),
    )
}

boxed :: fn(a: Alloc, const T: Type, t: T) *T #generic = {
    out := a.alloc(T, 1);
    out.ptr[] = t;
    out.ptr
};
