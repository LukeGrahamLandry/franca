#include_std("lib/core.fr"); 
#include_std("compiler/lib.fr"); 

BOOTSTRAP_ONLY_MODE :: false;
DEBUG_SPAM_LOG :: false;
ENABLE_TRACY :: get_environment_variable("FRANCA_TRACY").is_some();
ENABLE_LOGGING_CALLBACKS :: false;

//
// env vars (value doesn't matter): 
// FRANCA_BACKTRACE 
// FRANCA_LOG_STATS 
// FRANCA_DEBUG_THREADS 
// FRANCA_COMPILER_DEBUG_LOG_SCOPES
// FRANCA_QUINE 
// FRANCA_TRACY
//

want_backtrace :: @static(bool);

fn main() void = {
    set_self_hash();
    vtable := init_driver_vtable();
    if ENABLE_TRACY {
        println(">>> Compiler includes tracy instrumentation.");
    };
    args := cli_args();
    
    update_global_stdlib_path();
    
    if args.len <= 1 {
        panic("Expected cli argument: a path to a franca file."); // or driver shared library
    };
    
    want_backtrace[] = get_environment_variable("FRANCA_BACKTRACE").is_some() || ALWAYS_BE_SIGNALLING;
    
    @if(is_linking_libc()) do_signals();
    if want_backtrace[] {
        Crash'push_resolver(@import_symbol "__franca_aot_debug_info", find_in_debug_info);
        Crash'request_backtrace_on_panic();
    };
    
    if get_environment_variable("FRANCA_QUINE").is_some() {
        debug := Crash'AotDebugInfo.ptr_from_raw(@import_symbol "__franca_aot_debug_info");
        @assert_ne(debug.source.len, 0, "sorry, this copy of franca does not have embedded source code");
        print(debug.source);
        exit(0);
    };

    ::?Arch;
    filename := args[1].str();
    @match(run_franca_file(vtable, filename)) {
        (fn Ok(_) => ());
        (fn Err(e) => {
            // TODO: better error message logging but its a pain becuase you don't have the compiler instance here. -- Sep 19
            eprintln("Error loading driver");
            ::tagged(CompileError);
            @match(e) {
                fn Msg(it) => eprintln(it.msg);
                fn Parse(it) => eprintln(it.msg);
                @default => @eprintln("%", e.tag());
            };
            exit(1)
        });
    };
}

fn do_signals() void #target_os = (fn($os) => {
    @if(::(os != .macos)) return();  // :TodoLinux :HardcodeOs
    C :: LibcType(os);
    Crash'catch_signals(handle_signal);
    handle_signal :: fn(s: i64, info: *C.SigInfo, ctx: *C.UContext) void = {
        n := info.signal_number;
        ::enum(@type n);
        if ctx.mc_size == size_of(C.Arm64MachineContext) 
        && n == .IllegalInstruction 
        && u32.ptr_from_raw(ctx.mc.arm64.thread.pc)[] == Arm.branch_target_marker 
        {
            return();
        };
        if want_backtrace[] {
            Crash'show_trace_and_exit(s, info, ctx);
        };
        if n.raw() < C.SignalNum.enum_count() {
            scary_log(n.name_str());
        };
        exit(1);
    };
});