#include_std("lib/core.fr"); 
#include_std("compiler/lib.fr"); 

fn main(argc: i64, argv: *CStr) void = {
//fn main() void = {
    :: by_the_way_you_are_compiling_the_compiler_right_now_just_a_helpful_hint();
    vtable := init_driver_vtable();
    if ENABLE_TRACY {
        println(">>> Compiler includes tracy instrumentation.");
    };
    args: []CStr = (ptr = argv, len = argc);
    //args := cli_args();  // this doesnt work on blink because i want to use /proc/self/cmdline
    
    update_global_stdlib_path();
    
    if args.len <= 1 {
        panic("Expected cli argument: a path to a franca file."); // or driver shared library
    };
    
    // TODO: allow loading driver function from shared library 
  
    filename := args[1].str();
    
    //if filename == "-lsp" {
    //    @if(ENABLE_LSP, {
    //        lsp_main(vtable);
    //        exit(0);
    //    }, panic("argument '-lsp' not supported by this build of the compiler"));
    //};
    
    if filename == "-go-build-yo-self" {
        go_build_yo_self(vtable, args);
        exit(0);
    };
    
    @match(run_franca_file(vtable, filename)) {
        (fn Ok(_) => exit(0));
        (fn Err(e) => {
            // TODO: better error message logging but its a pain becuase you don't have the compiler instance here. -- Sep 19
            eprintln("Error loading driver");
            ::tagged(CompileError);
            @match(e) {
                fn Msg(it) => eprintln(it.msg);
                fn Parse(it) => eprintln(it.msg);
                @default => @eprintln("%", e.tag());
            };
            exit(1)
        });
    };
}

// This is a simplified copy-paste of first.fr/driver. 
// It exists so we have a precompiled version of the compiler's build script, 
// which allows making breaking abi changes to the driver program system (like the allocator vtable change). 
// note: passing args instead of calling cli_args becuase i want it to work on blink emulator without /proc/self/cmdline
fn go_build_yo_self(vtable: *ImportVTable, args: [] CStr) void = {
    fn load_src(vtable: *ImportVTable,  args: [] CStr) CompCtx = {
        src := temp().read_to_string("compiler/main.fr");
        @fmt(src&, """;ENABLE_TRACY :: false; ENABLE_LSP :: false; 
        ENABLE_LOGGING_CALLBACKS :: false; 
        DO_TERMINAL_COLOURS :: true; 
        DEBUG_SPAM_LOG :: false; BOOTSTRAP_ONLY_MODE :: false;
        """);
        opts := vtable.default_build_options();
        opts.deduplicate_bytecode = true;
        opts.retain_function_names = false;
        opts.debug_info = false;
        for args { extra |
            if extra.str() == "-no-deduplication" {
                opts.deduplicate_bytecode = false;
            };
            if extra.str() == "-keep-names" {
                opts.retain_function_names = true;
            };
            if extra.str() == "-debug-info" {
                opts.debug_info = true;
            };
        };
        
        comp := vtable.new_with_src(src.items(), opts);
        c := vtable.with(comp);
        c
    }

    if !file_exists("compiler/main.fr") {
        panic("Working directory must be top level of the franca repository");
    };
    start := timestamp();
    c := load_src(vtable, args);
    
    new_main := c.get_unique_named("main").unwrap();
    exports := (@list(new_main) temp()).items();
    aa := query_current_arch();
    os := query_current_os();
    arch := aa.unwrap();
    ir := c.emit_llvm(temp(), exports, .ExportWithNames, arch, os);
    
    for(ir&){bucket|
        print(bucket);
    };
    @eprintln("Generated llvm ir for native target (%, %).", arch, os);   
    eprintln("Good luck. May your pointers be relocated and your redundancies elided.");
}

