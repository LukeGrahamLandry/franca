#include_std("lib/core.fr"); 
#include_std("compiler/lib.fr"); 

fn main(argc: i64, argv: *CStr) void = {
//fn main() void = {
    :: by_the_way_you_are_compiling_the_compiler_right_now_just_a_helpful_hint();
    vtable := init_driver_vtable();
    if ENABLE_TRACY {
        println(">>> Compiler includes tracy instrumentation.");
    };
    args: []CStr = (ptr = argv, len = argc);
    args := cli_args();  // this doesnt work on blink because i want to use /proc/self/cmdline
    
    update_global_stdlib_path();
    
    if args.len <= 1 {
        panic("Expected cli argument: a path to a franca file."); // or driver shared library
    };
    
    // TODO: allow loading driver function from shared library 

    filename := args[1].str();
    
    //if filename == "-lsp" {
    //    @if(ENABLE_LSP, {
    //        lsp_main(vtable);
    //        exit(0);
    //    }, panic("argument '-lsp' not supported by this build of the compiler"));
    //};
    ::?Arch;
    
    @match(run_franca_file(vtable, filename)) {
        (fn Ok(_) => exit(0));
        (fn Err(e) => {
            // TODO: better error message logging but its a pain becuase you don't have the compiler instance here. -- Sep 19
            eprintln("Error loading driver");
            ::tagged(CompileError);
            @match(e) {
                fn Msg(it) => eprintln(it.msg);
                fn Parse(it) => eprintln(it.msg);
                @default => @eprintln("%", e.tag());
            };
            exit(1)
        });
    };
}
