// Note: this needs to be in the compiler and injected into the program, not just part of the standard library,
// because it's important that it match the interface the compiler is actually exposing to the driver program. 
// The utilities that use this interface can be part of the library because they're really just normal user code. 
//
// TOOD: readme: the line is blurry but the idea is anything that needs to be precompiled to bootstrap is in compiler/ and the rest is in lib/

// TODO: rename this exports.fr

Compiler :: @struct(_: rawptr);
ArcFile :: @struct(_: rawptr);
fn CRes(const T: Type) Type = Result(T, rawptr);
 
Backend :: @enum(i64) (Aarch64 = 1, Cranelift = 3);
Arch :: @enum(i64) (Aarch64 = 1, X86_64 = 2);
ExecStyle :: @enum(i64) (Jit = 0, Aot = 1);
Os :: @enum(i64) (Macos = 0, Linux = 1, Windows = 2);

TargetEnv :: @struct(
    arch: Arch,
    backend: Backend,
    style: ExecStyle, 
    os: Os,
);

ExportVTable :: @struct(
    resolve_comptime_import: ?@FnPtr(userdata: rawptr, c: Compiler, f: FuncId, lib_name: Symbol, fn_name: Symbol) ?rawptr = .None,
);

// TODO: HACK they don't agree on layout! 
//       now they do agree but it can't find the type??
FatStmtHack :: @struct(opaque: Array(u8, 232));

ImportVTable :: @struct(
    intern_string: @FnPtr(c: Compiler, s: Str) Symbol,
    get_string: @FnPtr(c: Compiler, s: Symbol) Str,
    get_stats: @FnPtr() *Stats!builtin,
    init_compiler: @FnPtr(comptime_arch: Backend) Compiler,
    find_unique_func: @FnPtr(c: Compiler, name: Symbol) ?FuncId,
    // TODO: i want the meta program to be tracking these instead. 
    get_fns_with_tag: @FnPtr(c: Compiler, tag: Symbol) Slice(FuncId),
    // TODO: you can't just give it the slice from get_exports/tests because that will alias the vec that might grow, but the idea is this will go away soon anyway. 
    emit_c: @FnPtr(c: Compiler, fns: Slice(FuncId), add_test_runner: bool) CRes(Str),
    compile_func: @FnPtr(c: Compiler, f: FuncId, when: ExecStyle) CRes(Unit),
    get_jitted_ptr: @FnPtr(c: Compiler, f: FuncId) CRes(rawptr),
    get_function: @FnPtr(c: Compiler, f: FuncId) *Func!builtin,
    lookup_filename: @FnPtr(c: Compiler, span: *Span!builtin) Str, // span is a pointer because the calling convention doesn't match otherwise????
    add_file: @FnPtr(c: Compiler, name: Str, content: Str) ArcFile, 
    parse_stmts: @FnPtr(c: Compiler, f: ArcFile) CRes(Slice(FatStmtHack)),
    make_and_resolve_and_compile_top_level: @FnPtr(c: Compiler, body: Slice(FatStmtHack)) CRes(Unit),
    make_jitted_exec: @FnPtr(c: Compiler) Unit,
    give_vtable: @FnPtr(c: Compiler, vtable: *ExportVTable, userdata: rawptr) Unit,
    get_function_name: @FnPtr(c: Compiler, f: FuncId) Symbol,
    comptime_arch: @FnPtr() Ty(Arch, Os),
);

Ast :: @namespace => {
    fn RsVec(const T: Type) Type = @struct(cap: i64, ptr: *T, len: i64);
    
    LabelId :: @struct(id: u32);
    ScopeId :: @struct(id: u32);
    FatExpr :: (@struct(
        expr: Expr,
        loc: Span,
        ty: Type,
        done: bool,
    ))!rec;
    Expr :: @tagged(
        Poison: Unit,
        Value: @struct(value: Values),
        WipFunc: FuncId,
        Call: Ty(*FatExpr, *FatExpr),
        Block: @struct(body: RsVec(FatStmt), result: *FatExpr, ret_label: ?LabelId, hoisted_constants: bool),
        Tuple: RsVec(FatExpr),
        Closure: *Func,
        AddToOverloadSet: RsVec(Func),
        SuffixMacro: Ty(Symbol, *FatExpr),
        FieldAccess: Ty(*FatExpr, Symbol),
        StructLiteralP: Pattern,
        PrefixMacro: @struct(handler: *FatExpr, arg: *FatExpr, target: *FatExpr),
        GetVar: Var,
        GetNamed: Symbol,
        String: Symbol,
        PtrOffset: @struct(ptr: *FatExpr, bytes: usize, name: Symbol),
        GetParsed: usize,
        Cast: *FatExpr,
    );
    Values :: @tagged(
        Big: RsVec(u8),
        Small: Ty(i64, u8),
    );
    FuncId :: @struct(id: u32);
    FatStmt :: (@struct(
        stmt: Stmt,
        annotations: RsVec(Annotation),
        loc: Span,
    ))!rec;
    Stmt :: @tagged(
        Noop: Unit,
        Eval: FatExpr,
        DeclFunc: *Func,
        DeclVar: @struct(value: FatExpr, ty: LazyType, name: Var),
        DeclVarPattern: @struct(binding: Pattern, value: FatExpr),
        DeclNamed: @struct(kind: VarType, value: FatExpr, ty: LazyType, name: Symbol),
        Set: @struct(place: FatExpr, value: FatExpr),
        ExpandParsedStmts: usize,
    );
    Func :: @struct(
        annotations: RsVec(Annotation),
        capture_vars: RsVec(Var),
        callees: RsVec(FuncId),
        mutual_callees: RsVec(FuncId),
        var_name: ?Var,
        finished_arg: ?Type,
        finished_ret: ?Type,
        cc: ?CallConv,
        return_var: ?Var,
        scope: ?ScopeId,
        body: FuncImpl,
        arg: Pattern,
        ret: LazyType,
        name: Symbol,
        loc: Span,
        flags: u32,
    );
    Annotation :: @struct(
        name: Symbol,
        args: ?FatExpr,
    );
    Var :: @struct(
        kind: VarType,
        name: Symbol,
        id: u32,
        scope: ScopeId,
        block: u16,
    );
    VarType :: @tagged(
        Let: Unit,
        Var: Unit,
        Const: Unit,
    );
    CallConv :: @tagged(
        CCallReg: Unit,
        CCallRegCt: Unit,
        Flat: Unit,
        FlatCt: Unit,
        OneRetPic: Unit,
        Inline: Unit,
    );
    FuncImpl :: (@tagged(
        Normal: FatExpr,
        DynamicImport: Symbol,
        ComptimeAddr: usize,
        JittedAarch64: RsVec(u32),
        LlvmIr: Symbol,
        CSource: Symbol,
        EmitCranelift: usize,
        PendingRedirect: @struct(arg: Type, ret: Type, os: OverloadSet),
        Redirect: FuncId,
        Merged: RsVec(FuncImpl),
        Empty: Unit,
    ))!rec;
    Pattern :: @struct(
        bindings: RsVec(Binding),
        loc: Span,
    );
    Binding :: @struct(
        name: Name,
        ty: LazyType,
        default: ?FatExpr,
        kind: VarType,
    );
    Name :: @tagged(
        Ident: Symbol,
        Var: Var,
        None: Unit,
    );
    LazyType :: (@tagged(
        EvilUnit: Unit,
        Infer: Unit,
        PendingEval: FatExpr, 
        Finished: Type, 
        Different: RsVec(LazyType), 
    ))!rec;
    Span :: @struct(low: u32, high: u32);
};
