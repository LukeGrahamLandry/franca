// THIS FILE IS BAKED INTO THE COMPILER'S EXECUTABLE, IT DOESN'T HOT-LOAD LIKE STUFF IN THE LIB FOLDER DOES!
//
// Note: this needs to be in the compiler and injected into the program, not just part of the standard library,
// because it's important that it match the interface the compiler is actually exposing to the driver program. 
// The utilities that use this interface can be part of the library because they're really just normal user code. 
//
// TOOD: readme: the line is blurry but the idea is anything that needs to be precompiled to bootstrap is in compiler/ and the rest is in lib/

// TODO: rename this exports.fr

Compiler :: *@struct(pointer_to_pointer_to_selfhosted: rawptr, vtable: rawptr);
CompCtx :: @struct(data: Compiler, vtable: *ImportVTable);
fn CRes(const T: Type) Type = Result(T, rawptr);
 
Backend :: @enum(i64) (Aarch64 = 1, Cranelift = 3);
Arch :: @enum(i64) (Aarch64 = 1, X86_64 = 2);
ExecStyle :: @enum(i64) (Jit = 0, Aot = 1);
Os :: @enum(i64) (Macos = 0, Linux = 1, Windows = 2);

TargetEnv :: @struct(
    arch: Arch,
    backend: Backend,
    style: ExecStyle, 
    os: Os,
);

ExportVTable :: @struct(
    resolve_comptime_import: ?@FnPtr(userdata: rawptr, c: Compiler, f: FuncId, lib_name: Symbol, fn_name: Symbol) ?rawptr = .None,
);

// TODO: HACK they don't agree on layout! 
//       now they do agree but it can't find the type??
FatStmtHack :: @struct(opaque: Array(u8, 232));

ImportVTable :: (@struct(
    intern_string: @FnPtr(c: Compiler, s: Str) Symbol,
    get_string: @FnPtr(c: Compiler, s: Symbol) Str,
    _get_stats: usize, // TODO: remove
    init_compiler: @FnPtr(comptime_arch: Backend) Compiler,
    find_unique_func: @FnPtr(c: Compiler, name: Symbol) ?FuncId,
    // TODO: i want the meta program to be tracking these instead. 
    get_fns_with_tag: @FnPtr(c: Compiler, tag: Symbol) Slice(FuncId),
    // TODO: you can't just give it the slice from get_exports/tests because that will alias the vec that might grow, but the idea is this will go away soon anyway. 
    _not_implemented_emit_c: @FnPtr(c: Compiler, fns: Slice(FuncId), add_test_runner: bool) CRes(Str),
    compile_func: @FnPtr(c: Compiler, f: FuncId, when: ExecStyle) CRes(void),
    get_jitted_ptr: @FnPtr(c: Compiler, f: FuncId) CRes(rawptr),
    get_function: @FnPtr(c: Compiler, f: FuncId) *Func,
    lookup_filename: @FnPtr(c: Compiler, span: *Span) Str, // span is a pointer because the calling convention doesn't match otherwise????
    add_file: @FnPtr(c: Compiler, name: Str, content: Str) Span, 
    parse_stmts: @FnPtr(c: Compiler, f: *Span) CRes(Slice(FatStmtHack)),
    make_and_resolve_and_compile_top_level: @FnPtr(c: Compiler, body: Slice(FatStmtHack)) CRes(void),
    make_jitted_exec: @FnPtr(c: Compiler) void,
    give_vtable: @FnPtr(c: Compiler, vtable: *ExportVTable, userdata: rawptr) void,
    get_function_name: @FnPtr(c: Compiler, f: FuncId) Symbol, // TODO: remove now that you can just access the field. 
    comptime_arch: @FnPtr() Ty(Arch, Os),
    _get_mem_mark: usize, // TODO: remove
    emit_bc: @FnPtr(c: Compiler, f: FuncId, when: ExecStyle) CRes(FnBody),
    get_type_meta: @FnPtr(c: Compiler, ty: Type) TypeMeta,
    debug_log_baked_constant: @FnPtr(c: Compiler, id: BakedVarId) void,
    get_baked: @FnPtr(c: Compiler, id: BakedVarId) BakedVar,  // TODO: should do without the copy,
    debug_log_bc: @FnPtr(c: Compiler, body: *FnBody) void,
    prim_sig: @FnPtr(c: Compiler, f_ty: FnType, cc: CallConv) CRes(PrimSig),
    get_compiler_builtins_source: @FnPtr() Str,
    get_cranelift_builtins_source: @FnPtr() Str,
    emit_llvm: @FnPtr(comp: CompCtx, alloc: Alloc, fns: Slice(FuncId), entry: ProgramEntry2) BucketArray(u8),
    number_of_functions: @FnPtr(comp: Compiler) i64,
    bake_var: @FnPtr(comp: Compiler, v: BakedVar) BakedVarId,
))!rec;
// TODO: better error for @FnPtr if you forget return type. 

// because you don't want people to depend on llvm.fr
// TODO: don't be a header file!
ProgramEntry2 :: @enum(i64) (
    GiveMeTheCodeAndGiveItToMeRaw,  
    TestRunnerMain,  
    ExportWithNames, 
);

// TODO: depending on layout is jail. Vec isn't repr(C)
// TODO: make totally sure which cap/len order.
fn rs(); 
fn assume_owned();
fn RsVec(const T: Type) Type = {
    Self :: @struct(cap: i64, ptr: *T, len: i64);
    fn items(self: Self) Slice(T) = (ptr = self.ptr, len = self.len);
    fn items(self: *Self) Slice(T) = (ptr = self.ptr, len = self.len);
    // TODO: UNSAFE. needs to be allocated by rust if rust is going to free it. needs to follow rust aliasing rules. 
    fn rs(self: List(T)) Self = (cap = self.maybe_uninit.len, ptr = self.maybe_uninit.ptr, len = self.len);
    fn empty() Self = {
        // "unsafe precondition(s) violated: slice::from_raw_parts requires the pointer to be aligned and non-null, and the total size of the slice not to exceed `isize::MAX`"
        nonnull := T.ptr_from_int(T.size_of());
        (cap = 0, ptr = nonnull, len = 0)
    }
    fn assume_owned(self: Self, by: Alloc) List(T) = (maybe_uninit = (ptr = self.ptr, len = self.cap), len = self.len, gpa = by);
    Self
}

// TODO: expose id
fn symbol_from_id(id: u32) Symbol #unsafe_noop_cast;
fn id(self: Symbol) u32 #unsafe_noop_cast;

//LabelId :: @struct(id: u32);
//ScopeId :: @struct(id: u32);
//FuncId :: @struct(id: u32);
//Symbol :: @struct(id: u32);
ScopeId :: @builtin ScopeId;
LabelId :: @builtin LabelId;
FuncId  :: @builtin FuncId;
Symbol  :: @builtin Symbol;  // TODO: why does making this a struct here and then giving it to the compiler cause tag_value to get called with two types. -- Jun 13

FatExpr :: (@struct(
    expr: Expr,
    loc: Span,
    ty: Type,
    done: bool,
))!rec;
Expr :: @tagged(
    Poison: void,
    Value: @struct(bytes: Values, coerced: bool),
    WipFunc: FuncId,
    Call: @struct(f: *FatExpr, arg: *FatExpr),
    Block: @struct(body: RsVec(FatStmt), result: *FatExpr, ret_label: ?LabelId, hoisted_constants: bool),
    Tuple: RsVec(FatExpr),
    Closure: *Func,
    AddToOverloadSet: RsVec(Func),
    SuffixMacro: @struct(name: Symbol, arg: *FatExpr),
    FieldAccess: @struct(container: *FatExpr, name: Symbol),
    StructLiteralP: Pattern,
    PrefixMacro: @struct(handler: *FatExpr, arg: *FatExpr, target: *FatExpr),
    GetVar: Var,
    GetNamed: Symbol,
    String: Symbol,
    PtrOffset: @struct(ptr: *FatExpr, bytes: i64, name: Symbol),
    GetParsed: WaitingParse,
    Cast: *FatExpr,
);
WaitingParse :: @struct(id: i64);
Values :: @tagged(
    Big: RsVec(u8),
    Small: Ty(i64, u8),
);
FatStmt :: (@struct(
    stmt: Stmt,
    annotations: RsVec(Annotation),
    loc: Span,
))!rec;
Stmt :: @tagged(
    Noop: void,
    Eval: FatExpr,
    DeclFunc: *Func,
    DeclVar: @struct(value: FatExpr, ty: LazyType, name: Var),
    DeclVarPattern: @struct(binding: Pattern, value: FatExpr),
    DeclNamed: @struct(kind: VarType, value: FatExpr, ty: LazyType, name: Symbol),
    Set: @struct(place: FatExpr, value: FatExpr),
    ExpandParsedStmts: usize,
);
Func :: @struct(
    annotations: RsVec(Annotation),
    capture_vars: RsVec(Var),
    callees: RsVec(FuncId),
    mutual_callees: RsVec(FuncId),
    var_name: ?Var,
    finished_arg: ?Type,
    finished_ret: ?Type,
    cc: ?CallConv,
    return_var: ?Var,
    scope: ?ScopeId,
    body: FuncImpl,
    arg: Pattern,
    ret: LazyType,
    name: Symbol,
    loc: Span,
    flags: u32 = 0,
);

FnFlag :: @enum(i64) (
    NotEvilUninit,
    ResolvedBody,
    ResolvedSign,
    AllowRtCapture,
    EnsuredCompiled,
    AsmDone,
    TryConstantFold,
    CalleesAsmDone,
    Generic,
    UnsafeNoopCast,
    NoStackTrace,
);

Annotation :: @struct(
    name: Symbol,
    args: ?FatExpr,
);
Var :: @struct(
    kind: VarType,
    name: Symbol,
    id: u32,
    scope: ScopeId,
    block: u16,
);
VarType :: @enum(i64) (
    Let, 
    Var,
    Const,
);
CallConv :: @enum(i64) (
    CCallReg,
    CCallRegCt,
    OneRetPic,
    Inline,
);
FuncImpl :: (@tagged(
    Normal: FatExpr,
    DynamicImport: Symbol,
    ComptimeAddr: usize,
    JittedAarch64: RsVec(u32),
    LlvmIr: Symbol,
    CSource: Symbol,
    EmitCranelift: usize,
    PendingRedirect: @struct(arg: Type, ret: Type, os: OverloadSet),
    Redirect: FuncId,
    Merged: RsVec(FuncImpl),
    Empty: void,
))!rec;
Pattern :: @struct(
    bindings: RsVec(Binding),
    loc: Span,
);
Binding :: @struct(
    name: Name,
    ty: LazyType,
    default: ?FatExpr,
    kind: VarType,
);
Name :: @tagged(
    Ident: Symbol,
    Var: Var,
    None,
);
LazyType :: (@tagged(
    EvilUninit: void,
    Infer,
    PendingEval: FatExpr, 
    Finished: Type, 
    Different: RsVec(LazyType), 
))!rec;
Span :: @struct(low: u32, high: u32);

TypeInfo :: @tagged(
    Int: IntTypeInfo,
    Never,
    F64,
    F32,
    Bool,
    Fn: FnType,
    FnPtr: @struct(
        ty: FnType,
        cc: CallConv,
    ),
    Ptr: Type, // One element
    Array: @struct(
        inner: Type,
        len: u32, // note: not usize!! that confusing the padding cause i pass by reference now without going through InterpSend -- May 27
    ),
    Struct: @struct(
        // You probably always have few enough that this is faster than a hash map. // TODO: check that
        fields: RsVec(Field),
        layout_done: bool,
        is_tuple: bool,
    ),
    // What rust calls an enum
    Tagged: @struct(
        cases: RsVec(Ty(Symbol, Type)),
    ),
    // TODO: on assignment, check that it's a valid value. (at the very least do it for constants)
    Enum: @struct(
        raw: Type,
        fields: RsVec(Ty(Symbol, Values)),
    ),
    Placeholder,
    Named: Ty(Type, Symbol),
    void, // TODO: same as empty tuple but easier to type
    VoidPtr,
    Label: Type,
);

IntTypeInfo :: @struct(
    bit_count: i64,
    signed: bool,
);

FnType :: @struct(
    // Functions with multiple arguments are treated as a tuple.
    arg: Type,
    ret: Type,
    arity: u16,
);

Field :: @struct(
    name: Symbol,
    ty: Type,
    default: ?Values,
    byte_offset: usize,
    kind: VarType,
);

Stats :: @struct(
    ast_expr_nodes_all: usize,
    fn_body_resolve: usize,
    make_lit_fn: usize,
    parser_queue: usize,
    parser_did: usize,
    jit_mprotect: usize,
    ast_expr_nodes_parser_only: usize,
    compile_expr_calls_all: usize,
    compile_expr_calls_with_done_set: usize,
    expr_fmt: usize,
    const_eval_node: usize,
    jit_call: usize,
    bytecodes: usize,
);

fn ast_alloc() Alloc = libc_allocator;

:: __compiler_save_fatexpr_type(FatExpr);

///////////////
/// Backend ///
///////////////

Bc :: @tagged(
    CallDirect: @struct(sig: PrimSig, f: FuncId, tail: bool),     // <args:m> -> <ret:n>
    CallFnPtr: @struct(sig: PrimSig),                             // <ptr:1> <args:m> -> <ret:n>   |OR| <ptr:1> <ret_ptr:1> <arg_ptr:1> -> _
    PushConstant: @struct(value: i64, ty: Prim),                  // _ -> <v:1>
    JumpIf: @struct(true_ip: BbId, false_ip: BbId, slots: u16),   // <args:slots> <cond:1> -> !
    Goto: @struct(ip: BbId, slots: u16),                          // <args:slots> -> !
    GetNativeFnPtr: FuncId,                                       // _ -> <ptr:1>
    Load: Prim,                                      // <ptr:1> -> <?:n>
    StorePost: Prim,                                 // <?:n> <ptr:1> -> _
    StorePre: Prim,                                  // <ptr:1> <?:n> -> _
    AddrVar: @struct(id: u16),                                    // _ -> <ptr:1>
    SaveSsa: @struct(id: u16, ty: Prim),                          // <p:1> -> _
    LoadSsa: @struct(id: u16),                                    // _ -> <p:1>
    IncPtrBytes: u16,                             // <ptr:1> -> <ptr:1>
    PeekDup: u16,                                                 // <x:1> <skip:n> -> <x:1> <skip:n> <x:1>,
    CopyBytesToFrom: u16,                         // <to_ptr:1> <from_ptr:1> -> _
    LastUse: @struct(id: u16),                                    // _ -> _
    Unreachable,                                                  // _ -> !
    GetCompCtx,                                                   // _ -> <ptr:1>
    NoCompile,
    PushGlobalAddr: BakedVarId,
    Snipe: u16,
    Ret0, // big return uses this too because code has already written to indirect return address.
    Ret1: Prim,
    Ret2: Ty(Prim, Prim),
    Nop,
);

PrimSig :: @struct(
    args: Slice(Prim),
    ret1: ?Prim,
    ret2: ?Prim,
    arg_float_mask: u32,
    ret_float_mask: u32,
    arg_slots: u16,
    ret_slots: u16,
    return_value_bytes: u16,
    first_arg_is_indirect_return: bool,
    no_return: bool,
);

// TODO: make the other enum varient builtin so you can use it and still override eq. because my order independence doesn't really work. 
Prim :: @enum(i64) (I8, I16, I32, I64, F64, F32, P64);

BasicBlock :: @struct(
    insts: RsVec(Bc),
    arg_prims: Slice(Prim),
    arg_float_mask: u32,
    incoming_jumps: u16,
    arg_slots: u16,
    clock: u16,
    height: u16,
);

OpaqueRsMap :: Array(i64, 4);

BbId :: @struct(id: u16);

FnBody :: @struct(
    blocks: RsVec(BasicBlock),
    vars: RsVec(Type),
    var_names: RsVec(?Var),
    when: ExecStyle,
    func: FuncId,
    current_block: BbId,
    clock: u16,
    name: Symbol,
    want_log: bool,
    is_ssa_var: RsBitSet, // only used for debugging. bc has enough info for this.
    signeture: PrimSig,
);

RsBitSet :: @tagged(
    Small: Array(usize, 2),
    Big: RsVec(usize),
);

BakedVarId :: @struct(id: u32);

BakedVar :: @tagged(
    Zeros: i64, // length
    Bytes: RsVec(u8),
    VoidPtrArray: RsVec(BakedEntry),
);

BakedEntry :: @tagged(
    Num: @struct(value: i64, ty: Prim),
    FnPtr: FuncId,
    AddrOf: BakedVarId,
);

TypeMeta :: @struct(
    _pad: i64,
    float_mask: u32,
    size_slots: u16,
    stride_bytes: u16,
    align_bytes: u16,
    contains_pointers: bool,
    pass_by_ref: bool,
);

Flag :: @enum(
    _reserved_null_,
    aarch64,
    llvm,
    cranelift,
    _reserved_end_arch_, // It's important which are above and below this point.
    generic,
    as,
    inline,
    noinline,
    asm,
    c_call,
    macro,
    placeholder,
    comptime_addr,
    init,
    slice,
    unquote_macro_apply_placeholders,
    from_bit_literal,
    rec,
    quote,
    unquote,
    deref,
    patch,
    ct,
    any_reg,
    Impl,
    main,
    builtin_if,
    builtin_while,
    if,
    loop,
    addr,
    tag,
    reflect_print,
    fn_ptr,
    toplevel,
    include_std,
    unreachable,
    rt,
    test,
    operator_star_prefix,
    operator_question_prefix,
    operator_up_arrow_prefix,
    operator_ampersand_prefix,
    operator_plus_equal,
    operator_minus_equal,
    operator_star_equal,
    operator_slash_equal,
    operator_index,
    builtin,
    no_memo,
    uninitialized,
    const_eval,
    contextual_field,
    outputs,
    when,
    one_ret_pic,
    Anon,
    log_bc,
    log_asm,
    log_ir,
    log_ast,
    skip_cranelift,
    log_asm_bc,
    return,
    cranelift_emit,
    Force_Cranelift,
    Force_Aarch64,
    tail,
    redirect,
    libc,
    __shift_or_slice,
    no_tail, // TOOD: HACK. stack ptr/slice arg is UB so have to manually use this! not acceptable!
    __return,
    __get_assertions_passed,
    __string_escapes,
    test_broken,
    Load,
    Store,
    fold,
    ptr,
    len,
    export,
    __tag_check,
    c,
    unsafe_noop_cast,
    import,
    type,
    struct,
    tagged,
    enum,
    bake_relocatable_value,
    local_return,
    no_trace,
    _reserved_count_,
    // TODO: add these to the rust version and move _Reserved_Count_ down!
    add,
    sub,
    mul,
    div,
    lt,
    gt,
    ge,
    le,
    eq,
    ne,
    neg,
    not,
);

fn to_index(f: FuncId) u32 = {
    i := ptr_cast_unchecked(From = FuncId, To = u32, ptr = f&)[];
    magic_offset :: 30;  // must match ast.rs
    mask: u32 : 1.shift_left(magic_offset).bit_not().trunc();
    i.bit_and(mask)
}

fn funcid_from_index(f: u32) FuncId = {
    magic_offset :: 30;  // must match ast.rs
    mask: u32 : 1.shift_left(magic_offset).trunc();
    f := f.bit_or(mask)
    ptr_cast_unchecked(From = u32, To = FuncId, ptr = f&)[]
}

    
#fold fn int(s: Symbol) i64 = {
    i := ptr_cast_unchecked(From = Symbol, To = u32, ptr = s&)[];
    i.zext()
}

#redirect(Ty(i64, i64), bool) fn eq(a: Prim, b: Prim) bool;
