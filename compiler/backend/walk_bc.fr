// I'm not super thrilled about writing it this way but its really annoying to do the boring stack manipulation every time. 

// TODO: traits
/*
Backend :: @trait fn(const B: Type) = {
    // B.Val needs to be Copy.
    :: assert_eq(@type :: B.Val, Type); // TODO: better syntax for associated types? 
    
    fn inst_call(self: *B, args: Slice(B.Val), sig: PrimSig, f: FuncId, tail: bool) Slice(B.Val);
    fn inst_trap(self: *B) Unit;
    fn inst_call_ptr(self: *B, args: Slice(B.Val), sig: PrimSig, ptr: B.Val) Slice(B.Val);
    fn inst_offset(self: *B, ptr: B.Val, bytes: u16) B.Val;
    fn inst_literal(self: *B, value: i64, ty: Prim) B.Val;
    fn inst_load(self: *B, addr: B.Val, ty: Prim) B.Val;
    fn inst_store(self: *B, addr: B.Val, value: B.Val, ty: Prim) Unit;
    fn inst_copy(self: *B, from: B.Val, to: B.Val, bytes: u16) Unit;
    fn inst_func_ref(self: *B, fid: FuncId) B.Val;
    fn inst_global(self: *B, id: BakedVarId) B.Val;
    fn inst_jump_if(self: *B, cond: B.Val, true: BbId, false: BbId, args: Slice(B.Val)) Unit;
    fn inst_jump(self: *B, always: BbId, args: Slice(B.Val)) Unit;
    fn inst_return(self: *B, args: Slice(B.Val)) Unit;
    fn move_to_block(self: *B, block: *BasicBlock, ip: BbId) Slice(B.Val);
    // - declare basic blocks
    // - declare stack slots for local variables
    fn setup(self: *B, body: *FnBody, vars_out: *List(B.Val)) Unit;
};
*/

fn walk_block();
fn emit_current_function();


fn CodeGen(const B: Type) Type = {
    MAX_BLOCKS :: 512;
    Self :: @struct(
        comp: CompCtx,
        backend: B,
        body: *FnBody,
        vars: List(B.Val),
        stack: List(B.Val),
        blocks_done: BitSet = empty(),
        funcs_done: BitSet = empty(),
        constants_needed: BitSet = empty(),
        max_const_id: i64 = 0,
        pending: List(FuncId),
    );
    
    fn emit_current_function(self: *Self) Unit = {
        s := self.body.blocks.items();
        assert(s.len.lt(MAX_BLOCKS), "TODO: dynamic bitset");
        self.backend&.setup(self.body, self.vars&);
        self.walk_block((id = 0.trunc()));
        self.vars&.clear();
        self.stack&.clear();
        self.blocks_done&.clear();
    }
    
    fn walk_block(self: *Self, b: BbId) Unit = {
        // TODO: you cant call pop unless its been instantiated but it cant be instantiated if the type doesn't exist.
        :: ?B.Val; ::?Slice(B.Val);
        index: i64 = b.id.zext();
        break :: @return;
        if(self.blocks_done&.get(index), => break());
        self.blocks_done&.set(index, temp());
        
        block := self.body.blocks.items()[index]&;
        args := self.backend&.move_to_block(block, b);
        assert(args.len.ge(block.arg_prims.len), "missing block args");
        self.stack&.push_all(args);
        for(block.insts.items()){ inst |
            @match(inst){
                (fn Nop() => ());
                (fn SaveSsa(slot) => {
                    v := self.stack&.pop().unwrap();
                    self.vars[slot.id.zext()] = v;
                });
                (fn LoadSsa(slot) => {
                    v := self.vars[slot.id.zext()];
                    self.stack&.push(v);
                });
                (fn GetCompCtx() => {
                    panic("AOT bytecode should not use GetCompCtx");
                });
                (fn CallDirect(call) => { //  f, tail, sig
                    self.pending&.push(call.f); // TODO: callees list from compiler should make this redundant but im afraid.
                    
                    arg_count: i64 = call.sig.arg_slots.zext();
                    args := self.stack.items().slice_last(arg_count).unwrap();
                    ret := self.backend&.inst_call(args, call.sig, call.f, call.tail);
                    self.stack.len -= arg_count;
                    if(call.sig.no_return){|
                        self.backend&.inst_trap();
                        break();
                    };
                    if(call.tail){|
                        // TODO: do this properly
                        self.backend&.inst_return(ret);
                        break();
                    };
                    self.stack&.push_all(ret);
                });
                (fn CallFnPtr(call) => {
                    // TODO: better error message if you don't put the type annotation here. 
                    arg_count: i64 = call.sig.arg_slots.zext();
                    ptr := self.stack.items()[self.stack.len.sub(arg_count).sub(1)];
                    args := self.stack.items().slice_last(arg_count).unwrap();
                    ret := self.backend&.inst_call_ptr(args, call.sig, ptr);
                    self.stack.len -= arg_count;
                    self.stack.len -= 1;
                    self.stack&.push_all(ret);
                });
                (fn PushConstant(c) => {
                    v := self.backend&.inst_literal(c.value, c.ty);
                    self.stack&.push(v);
                });
                (fn PushGlobalAddr(id) => {
                    self.add_constant(id);
                    v := self.backend&.inst_global(id);
                    self.stack&.push(v);
                });
                (fn JumpIf(jump) => { //  { true_ip, false_ip, slots }
                    cond := self.stack&.pop().unwrap();
                    args := self.stack.items().slice_last(jump.slots.zext()).unwrap();
                    self.backend&.inst_jump_if(cond, jump.true_ip, jump.false_ip, args);
                    self.stack.len -= jump.slots.zext();
                    stack := self.stack.items().clone(temp());
                    self.walk_block(jump.true_ip);
                    self.stack = stack;
                    self.walk_block(jump.false_ip);
                    break();
                });
                (fn Goto(jump) => { // { ip, slots }
                    args := self.stack.items().slice_last(jump.slots.zext()).unwrap();
                    self.backend&.inst_jump(jump.ip, args);
                    self.stack.len -= jump.slots.zext();
                    self.walk_block(jump.ip);
                    break();
                });
                (fn Ret0() => {
                    self.backend&.inst_return(empty());
                    break();
                });
                (fn Ret1(_) => {
                    args := self.stack.items().slice_last(1).unwrap();
                    self.backend&.inst_return(args);
                    self.stack.len -= 1;
                    break();
                });
                (fn Ret2(_) => {
                    args := self.stack.items().slice_last(2).unwrap();
                    self.backend&.inst_return(args);
                    self.stack.len -= 2;
                    break();
                });
                (fn GetNativeFnPtr(f) => {
                    self.pending&.push(f); // TODO: callees list from compiler should make this redundant but im afraid
                    v := self.backend&.inst_func_ref(f);
                    self.stack&.push(v);
                });
                (fn Load(ty) => {
                    addr := self.stack&.pop().unwrap();
                    v    := self.backend&.inst_load(addr, ty);
                    self.stack&.push(v);
                });
                (fn StorePost(ty) => {
                    assert(self.stack.len.ge(2), "StorePost: not enough args");
                    addr := self.stack&.pop().unwrap();
                    v    := self.stack&.pop().unwrap();
                    self.backend&.inst_store(addr, v, ty);
                });
                (fn StorePre(ty) => {
                    assert(self.stack.len.ge(2), "StorePre: not enough args");
                    v    := self.stack&.pop().unwrap();
                    addr := self.stack&.pop().unwrap();
                    self.backend&.inst_store(addr, v, ty);
                });
                (fn AddrVar(slot) => {
                    ptr := self.vars[slot.id.zext()];
                    self.stack&.push(ptr);
                });
                (fn IncPtrBytes(bytes) => {
                    ptr := self.stack&.pop().unwrap();
                    res := self.backend&.inst_offset(ptr, bytes);
                    self.stack&.push(res);
                }); // TODO: better error message if you forget this semi-colon
                (fn Unreachable() => {
                    self.backend&.inst_trap();
                    break();
                });
                (fn NoCompile() => {
                    panic("ICE: NoCompile");
                });
                (fn LastUse(_) => ());
                (fn PeekDup(skip) => {
                    i := self.stack.len().sub(skip.zext()).sub(1);
                    v := self.stack[i];
                    self.stack&.push(v);
                });
                (fn Snipe(skip) => {
                    index := self.stack.len().sub(skip.zext()).sub(1);
                    self.stack&.ordered_remove(index);
                });
                (fn CopyBytesToFrom(bytes) => {
                    from := self.stack&.pop().unwrap();
                    to := self.stack&.pop().unwrap();
                    self.backend&.inst_copy(from, to, bytes);
                });
            };
        };
    }
    
    // TODO: super dumb that i have to walk twice. 
    fn add_constant(self: *Self, id: BakedVarId) Unit = {
        return :: @return;
        index: i64 = id.id.zext();
        if(self.constants_needed&.get(index), => return());
        
        self.constants_needed&.set(index, temp());
        self.max_const_id = self.max_const_id.max(index);
        value := {self.comp.vtable.get_baked}(self.comp.data, id);
        
        @match(value&) {
            (fn FnPtr(f) => self.pending&.push(f[]));
            (fn AddrOf(v) => self.add_constant(v[]));
            (fn VoidPtrArray(parts) => {
                for(parts[].items()){id|
                    inner := {self.comp.vtable.get_baked}(self.comp.data, id);
                    inner_i: i64 = id.id.zext();
                    @match(inner&) {
                        (fn Bytes(bytes) => self.add_constant(id));
                        (fn FnPtr(f) => self.pending&.push(f[]));
                        (fn AddrOf(v) => self.add_constant(v[]));
                        @default => ();
                    };
                };
            });
            @default => ();
        }
    }


    Self
}
