

fn emit_qbe(comp: CompCtx, alloc: Alloc, fns: Slice(FuncId)) BucketArray(u8) = {
    
}

//EmitQbe :: @struct(

//);

//fn inst_call(self: *B, sig: PrimSig, f: FuncId, tail: bool) Slice(B.Val);
//fn inst_trap(self: *B) Unit;
//fn inst_call_ptr(self: *B, sig: PrimSig, ptr: B.Val) Slice(B.Val);
//fn inst_offset(self: *B, ptr: B.Val, bytes: u16) B.Val;
//fn inst_literal(self: *B, value: i64, ty: Prim) B.Val;
//fn inst_load(self: *B, addr: B.Val, ty: Prim) B.Val;
//fn inst_store(self: *B, addr: B.Val, value: B.Val, ty: Prim) B.Val;
//fn inst_copy(self: *B, from: B.Val, to: B.Val, bytes: u16) B.Val;
//fn inst_func_ref(self: *B, fid: FuncId) B.Val;
//fn inst_global(self: *B, id: BakedVarId) B.Val;
//fn inst_jump_if(self: *B, cond: B.Val, true: BbId, false: BbId, args: Slice(B.Val)) Unit;
//fn inst_jump(self: *B, always: BbId, args: Slice(B.Val)) Unit;
//fn inst_return(self: *B, args: Slice(B.Val)) Unit;
//fn move_to_block(self: *B, block: BbId) Unit;
//- declare basic blocks
//- declare stack slots for local variables
//fn setup(self: *B, body: *FnBody, vars_out: *List(B.Val)) Unit;