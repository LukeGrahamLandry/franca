//! - TODO: destructuring vars get declared before the value is resolved so shadowing doesn't work properly. 

/// Query interface /// 

fn put_constant(self: *Scopes, name: Var, value: FatExpr, ty: LazyType) void = {
    // TODO: this cant be the whole expression because then it looks for an overload returning unit. -- Jun 28
    ptr := self.constants&.nested_index(name.id.zext());
    ptr[] = (value, ty);
}

fn get_var_type(self: *Scopes, v: Var) ?*VarInfo = {
    t := self.types&.nested_index(v.id.zext());
    if t.type == UnknownType {
        return(.None)
    };
    (Some = t)
}

fn put_var_type(self: *Scopes, v: Var, ty: Type) bool = {
    slot := self.types&.nested_index(@as(i64) v.id.zext());
    is_new := slot.type == UnknownType;
    slot.type = ty;
    is_new
}

fn get_constant(self: *Scopes, name: Var) ?*Ty(FatExpr, LazyType) #inline = {
    ::as_ref(Ty(FatExpr, LazyType));
    c := self.constants&.nested_index(name.id.zext());
    if c._1&.is(.EvilUninit) {
        return(.None)
    };
    (Some = c)
}

/// Resolver Interface. Called lazily by the compiler when it first works on a new function. /// 

fn resolve_root(compiler: *SelfHosted, func: *Func, scope: ScopeId) PRes #once = {
    r: ResolveScope = new(compiler, scope, func.loc);
    
    zone := zone_begin(.Scope); // TODO: defer
    res := r&.resolve_func(func);
    zone_end(zone);
    res
}

fn resolve_sign(compiler: *SelfHosted, func: *Func) PRes #once = {
    s := @unwrap(func.scope, "function to have scope! %", compiler.comp().log(func)) return;
    r: ResolveScope = new(compiler, s, func.loc);
    
    zone := zone_begin(.Scope); // TODO: defer
    res := r&.resolve_func_args(func);
    zone_end(zone);
    res
}

fn resolve_body(compiler: *SelfHosted, func: *Func) PRes #once = {
    r: ResolveScope = new(compiler, func.scope.expect("function to have scope!!"), func.loc);
    
    zone := zone_begin(.Scope); // TODO: defer
    res := r&.resolve_func_body(func);
    zone_end(zone);
    res
}

/// Renumbering interface ///

fn dup_var(self: *Scopes, old: Var) Var = {
    new := old;
    new.id = self.types.len.trunc();
    self.types&.push(type = UnknownType, took_address = self.types&.nested_index(old.id.zext())[].took_address);
    // EvilUninit
    self.constants&.push(Ty(FatExpr, LazyType).zeroed());  // TODO: bit odd that i dont have to clone if the old thing had a constant expr. 
    new
}

// For unquoting, initial will be None, but for inlining closures, it will be the return variable. 
fn renumber_expr(self: *SelfHosted, expr: *FatExpr, initial: ?Ty(Var, Var)) void = {
    mapping: HashMap(Var, Var) = init(temp());
    if initial& { i |
        mapping&.insert(i._0, i._1);
    };
    renumber: RenumberVars = (scope = self.scopes, mapping = mapping&);
    renumber&.walk_expr(expr).unwrap();
}

/// Implementation /// 

Scopes :: @struct(
    scopes: List(Scope),
    // Indexed by var id.
    // Invarient: all but last bucket are full. Never push_all since that might allocate a non full bucket and then indexes will be wrong. 
    // :push_type_when_create_new_var when i start creating new vars elsewhere, need to remember to push a none here! didn't have to in the old version because it was a hashmap.
    // now its hard to forget cause i use that len instead of self.next_var too.
    types: BucketArray(VarInfo), // TODO: remove? and use constants._1 = (Finished = type)
    constants: BucketArray(Ty(FatExpr, LazyType)),
    // Used for not redundantly #include_std-ing. 
    // TODO: This will become a HashMap(Symbol, ScopeId) when I want to allow @import-ing a namespace. 
    //       so currently Lib :: @namespace { #include_std("name"); }; doesn't work unless its the only time which is kinda dumb. 
    //       but it didn't work in the rust version and i don't want to change too much at once. 
    already_loaded: HashSet(Symbol),
);

VarInfo :: @struct(
    type: Type,
    took_address: bool
);

// TODO: use unmanaged List/HashMap so not storing the allocator a billon times. 
Scope :: @struct(
    parent: ScopeId,
    vars: List(BlockScope),
    block_in_parent: i64,
);

BlockScope :: @struct(
    vars: List(Var),
    const_lookup: HashMap(Symbol, Var),
    parent: i64,
);

fn hash(i: *Var) i64 = {
    i := (@as(i64) i.id.zext());
    i&.hash()
}
fn eq(a: Var, b: Var) bool = a.id == b.id;
fn eq(a: *Var, b: *Var) bool = a[] == b[]; // TODO: this should be automatic, or == should always look for the ref version? or i should commit to rls like zig so it doesn't matter. 
fn hash(i: *Symbol) i64 = {
    i := (@as(i64) i[].id().zext());
    i&.hash()
}

fn index(self: *Scopes, i: ScopeId) *Scope = {
    i := i.as_index();
    self.scopes.index(i)
}
// TODO: expose id like normal struct
fn scope_from_index(i: u32) ScopeId = {
    s := ptr_cast_unchecked(u32, ScopeId, i&)[]; 
    s
}

fn as_index(i: ScopeId) i64 = {
    a := ptr_cast_unchecked(ScopeId, u32, i&)[];
    a.zext()
}

fn new_scope(self: *Scopes, parent: ScopeId, block_in_parent: i64) ScopeId = {
    s: Scope = (
        parent = parent,
        vars = list(self.scopes.gpa),
        block_in_parent = block_in_parent,
    );
    self.scopes&.push(s);
    scope_from_index(self.scopes.len.sub(1).trunc())
}

ResolveScope :: @struct(
    captures: List(Var),
    compiler: *SelfHosted,
    scope: ScopeId,
    block: i64,
);

fn new(compiler: *SelfHosted, scope: ScopeId, last_loc: Span) ResolveScope = (
    captures = list(temp()),
    compiler = compiler,
    scope = scope,
    block = 0,
);

fn resolve_func(self: *ResolveScope, func: *Func) PRes = {
    if(func.get_flag(.ResolvedBody).and(func.get_flag(.ResolvedSign)), => return(.Ok)); 
    // TODO: need to remember to update from this if we get one from the user (like they added it in a macro)?
    // TODO: could remove from func.annotations but it doesn't actually matter. 
    if(func.has_tag(.generic), => func.set_flag(.Generic));

    self.push_scope((Some = func.name));
    func.scope = (Some = self.scope);

    if func.get_flag(.AllowRtCapture) {
        @try(self.resolve_func_args(func)) return;
        @try(self.resolve_func_body(func)) return;
    } else {
        self.pop_scope();
    };

    .Ok
}

fn resolve_func_args(self: *ResolveScope, func: *Func) PRes = {
    if(func.get_flag(.ResolvedSign), => return(.Ok));
    
    self.scope = func.scope.expect("function to have scope!!!");
    self.block = 0;
    generic := func.get_flag(.Generic); // ret is allowed to depend on previous args.
    func.set_flag(.ResolvedSign);

    if generic {
        each func.arg.bindings { b |
            @try(self.declare_binding(b, func.loc, true)) return;
        };
    };
    each func.arg.bindings { b |
        @try(self.resolve_binding(b)) return;
    };
    @try(self.walk_type(func.ret&)) return;
    self.pop_block();
    // TODO: allow block exprs with consts in arg types but for now i dont use it and this is easier to think about. -- Apr 24
    .Ok
}

fn resolve_func_body(self: *ResolveScope, func: *Func) PRes = {
    if(func.get_flag(.ResolvedBody), => return(.Ok));
    self.scope = func.scope.expect("function to have scope!!!!");
    generic := func.get_flag(.Generic); // args and ret are allowed to depend on previous args.

    self.push_scope(.None);

    if generic {
    } else {
        each func.arg.bindings { b |
            @try(self.declare_binding(b, func.loc, true)) return;
        };
    };
    self.push_scope(.None);
    func.set_flag(.ResolvedBody);
    
    @if_let(func.body&) fn Normal(expr) => {
        ::if(Flag);
        name := if(func.get_flag(.AllowRtCapture), => Flag.local_return, => Flag.return);
        var := @try(self.decl_var(name.ident(), .Const, func.loc, .Label_DidYouReturnOutsideABlockLikeInAnExprFunction)) return;
        func.return_var = (Some = var);
        @try(self.walk_expr(expr)) return;
    };
    
    self.pop_block();
    self.pop_block();
    self.pop_scope();

    capures := self.captures;

    if func.get_flag(.AllowRtCapture) {
        // TODO: this is only needed for the error reporting below but involves a slow iteration (in find_var). 
        //       Track which scope you're capturing from the first time we get the var so don't have to look it up again? -- Jun 26
        // Now check which things we captured from *our* parent.
        // Remember this is in temp allocator! 
        for self.captures { c |
            self.find_var(c.name); // This adds it back to self.captures if needed
        };
    } else {
        // TODO: show the captured var use site and declaration site.
        // TODO: add a test that this error is reported
        @err_assert(capures.is_empty(), "Must use '=>' for closure '%' with captures", self.compiler.pool.get(func.name)) return;
    };
    self.captures&.clear();

    .Ok
}

fn scan_const_decls(self: *ResolveScope, stmt: *FatStmt) PRes = {
    loc := stmt.loc;
    @match(stmt.stmt&) {
        (fn DeclNamed(f) => {
            // kinda hack. just makes it easier to read logs when you do 'name :: fn() ...'
            @if_let(f.value.expr&) fn Closure(func) => {
                if func.name == Flag.Anon.ident() {
                    func.name = f.name;
                };
            };
            
            if (f.kind == .Const) {
                new := @try(self.decl_var(f.name, f.kind, loc, .Unknown)) return;
                decl: Stmt = (DeclVar = (
                    value = f.value,
                    ty = f.ty,
                    name = new,
                ));
                stmt.stmt = decl;
            };
        });
        (fn DeclFunc(func) => {
            // Functions don't shadow, they just add to an overload group.
            // TOOD: @vs @private
            v := self.find_var(func.name).or(=> {
                // TODO: we just tried to look it up so (sometimes) don't need to do the extra check if we're sillegally hadowing a const. :SLOW
                @try(self.decl_var(func.name, .Const, func.loc, .OverloadSet)) return
            });
            func.var_name = (Some = v);
        });
        @default => ();
    };
    .Ok
}

// most blocks aren't using #include_std.
// doing it this way means you scan_const_decls twice anything in a block before a #include_std, but that doesn't matter.
fn slow_body(self: *ResolveScope, body: *List(FatStmt)) PRes #once = {
    new_body: List(FatStmt) = list(body.len, body.gpa);
    dirty := true;
    while (=> dirty) {
        dirty = false;
        each body { stmt | 
            continue :: local_return;
            @if_let(stmt.stmt&) fn Annotations(annotations) => {
                if annotations.len == 1 && annotations.items()[0].name == Flag.include_std.ident() {
                    msg :: "#include_std requires string argument";
                    arg_expr := annotations.items()[0].args.or() {
                        return(@err(msg))
                    };
                    name := @match(arg_expr.expr) {
                        fn String(name) => name;
                        @default => return(@err(msg));
                    };
                    
                    if !self.compiler.scopes.already_loaded&.insert(name) {
                        name := self.compiler.pool.get(name);
                        :: ?WaitingParse;
                        file := self.compiler.get_include_std(name).or() {
                            return(@err("unknown path for #include_std %", name))
                        };
                        dirty = true;
                        stmts := @try(self.compiler.parser.finish_pending_stmts(file)) return;
                        new_body&.push_all(stmts.items());
                    };
                    continue();
                };
            };
            new_body&.push(stmt[]);
        };
        temp := body[];
        body[] = new_body;
        new_body = temp;
        new_body&.clear();
    };
    each body { stmt |
        @try(self.scan_const_decls(stmt)) return;
    };
    .Ok
}

//! This (find_var/decl_var) is done in a dumb and slow way with a bunch of linear scans through all the variables in a scope,
//! but its only really a problem at the top level where i import everything in the universe,
//! and i dont have enough code written in this language to convincingly benchmark it.

fn find_var(self: *ResolveScope, name: Symbol) ?Var = {
    s := self.scope;
    block := self.block;
    first := true;

    loop {
        scope := self.compiler.scopes[s]&;
        found := find(scope, block, name);
        if found& { v | // TODO: it gets the arity wrong if not by pointer. 
            // TODO: derive ne from eq so you can use != more often. 
            // TODO: better error message for *T vs **T, should say dereference not unsafe cast. 
            if first.not().and(=> !v.kind.eq(.Const)).and(=> !self.captures.contains(v)) {
                // We got it from our parent function.
                self.captures&.push(v[]);
            };
            return(Some = v[]);
        };
        if scope.parent == s {
            return(.None);
        };
        s = scope.parent;
        block = scope.block_in_parent;
    };
    
    find :: fn(scope: *Scope, block: i64, name: Symbol) ?Var = {
        if scope.vars.is_empty() {
            //assert_eq(block, 0); // TODO: debug
            return(.None);
        };
        vars := scope.vars[block]&;
        loop {
            const := vars.const_lookup&.get(name);
            if const& { v |  // TODO: needs to be by reference because arity is broken
                return(Some = v[]);
            };
        
            // Reverse so you get the shadowing first.
            each_rev vars.vars& { v |
                if(v.name == name, => {
                    return(Some = v[])
                });
            };

            if vars.parent == block {
                //assert_eq(block, 0); // TODO: debug
                return(.None);
            };
            //@assert_ne(block, 0); // TODO: debug
            block = vars.parent;
            stupid := scope.vars[block]&; // TODO
            vars = stupid;
        };
        unreachable()
    };

    unreachable()
}

fn decl_var(self: *ResolveScope, name: Symbol, kind: VarType, loc: Span, placeholder: PlaceholderValue) Result(Var, *CompileError) = {
    s := self.scope;
    // Note: you can't shadow a let with a const either but that already works because consts are done first.

    scopes := self.compiler.scopes;
    scope := scopes[s]&;
    
    prev := scope.vars[self.block].const_lookup&.get(name);
    if prev.is_some() {
        return(@err("Cannot shadow constant in the same scope: %", self.compiler.pool.get(name)));
    };
    //@println("Declare % in scope % block %", self.compiler.pool.get(name), self.scope.as_index(), self.block);
    
    var: Var = (kind = kind, name = name, id = scopes.types.len.trunc(), scope = self.scope, block = self.block.trunc());
    if kind == .Const {
        empty: Ty(FatExpr, LazyType) = ((expr = (Poison = placeholder), loc = loc, ty = UnknownType, done = false), .Infer);
        scopes.constants&.push(empty);
        prev := scope.vars[self.block].const_lookup&.insert(name, var);
    } else {
        scopes.constants&.push(Ty(FatExpr, LazyType).zeroed());  // EvilUninit
    };
    
    scope.vars[self.block].vars&.push(var); // includes constants!
    scopes.types&.push(type = UnknownType, took_address = false);
    self.compiler.record_var_declare(var, loc);
    (Ok = var)
}

// TODO: pass bool instead of ?Symbol
fn push_scope(self: *ResolveScope, name: ?Symbol) void = {
    :: if_opt(Symbol, i64);
    parent: i64 = if name { _ |
        self.scope = self.compiler.scopes.new_scope(self.scope, self.block);
        0
    } else {
        self.block
    };
    scope := self.compiler.scopes[self.scope]&;
    scope.vars&.push(@as(BlockScope) (
        vars = list(scope.vars.gpa), 
        const_lookup = init(scope.vars.gpa),
        parent = parent
    ));
    self.block = scope.vars.len - 1;
}

fn pop_scope(self: *ResolveScope) void = {
    scope := self.compiler.scopes[self.scope]&;
    self.scope = scope.parent;
    self.block = scope.block_in_parent;
}

fn pop_block(self: *ResolveScope) void = {
    scope := self.compiler.scopes[self.scope]&;
    self.block = scope.vars[self.block].parent;
}

fn resolve_binding(self: *ResolveScope, binding: *Binding) PRes #once = {
    @try(self.walk_type(binding.ty&)) return;
    if binding.default& { expr |
        @try(self.walk_expr(expr)) return;
    };
    .Ok
}

fn declare_binding(self: *ResolveScope, binding: *Binding, loc: Span, is_args: bool) PRes = {
    @match(binding.name) {
        (fn Ident(name) => {
            ::if(PlaceholderValue);
            placeholder: PlaceholderValue = if(is_args, => .Argument, => .Unknown);
            var := @try(self.decl_var(name, binding.kind, loc, placeholder)) return;
            b: Binding = (
                name = (Var = var),
                ty = binding.ty,
                default = binding.default,
                kind = binding.kind,
            );
            binding[] = b;
        });
        (fn Var(_) => {
            return(@err("ICE: resolved args twice."));
        });
        (fn None() => ());
    };
    .Ok
}

:: WalkAst(ResolveScope, *CompileError);

fn handle_expr(self: *ResolveScope, expr: *FatExpr) Result(DoMore, *CompileError) #once = {
    loc := expr.loc;

    @match(expr.expr&) {
        (fn GetParsed(index) => {
            e := @try(self.compiler.parser.finish_pending(index[])) return;
            expr[] = self.compiler.clone(e&); // clone is important! you end up with multiple copies of the same pending parse. 
            @try(self.walk_expr(expr)) return;
            return(Ok = DoMore.Break);
        });
        (fn Block(f) => {
            self.push_scope(.None);

            (=> {
                break :: local_return;
                each f.body { stmt |
                    @if_let(stmt.stmt&) fn Annotations(annotations) => {
                        if annotations.len == 1 {
                            if annotations.items()[0].name == Flag.include_std.ident() {
                                stmts := f.body.assume_owned(self.compiler.get_alloc());
                                @try(self.slow_body(stmts&)) return;
                                f.body = stmts.rs();
                                break();
                            };
                        };
                    };
                    @try(self.scan_const_decls(stmt)) return;
                };
            })();
            
            each f.body { stmt |
                @try(self.walk_stmt(stmt)) return;
            };
            @try(self.walk_expr(f.result)) return;
            
            self.pop_block();
            
            // Needed to do that in the block, so took control of the walk order and now we're done.
            return(Ok = .Break);
        });
        // TODO: wastefully resolving on things like `.None` and `@symbol whatever`, that's why we have to allow missing vars here, they might just be used as symbols. 
        (fn GetNamed(name) => {
            v := self.find_var(name[]);
            if v& { var |
                self.compiler.record_var_usage(var[], expr.loc);
                expr.expr = (GetVar = var[]);
            };
        });
        @default => ();
    };
    (Ok = DoMore.Continue)
}

fn handle_stmt(self: *ResolveScope, stmt: *FatStmt) Result(DoMore, *CompileError) #once = {
    @match(stmt.stmt&) {
        (fn DeclNamed(f) => {
            @try(self.walk_type(f.ty&)) return;
            @try(self.walk_expr(f.value&)) return;
            
            new := @try(self.decl_var(f.name, f.kind, stmt.loc, .Unknown)) return;
            s: Stmt = (DeclVar = (
                value = f.value,
                ty = f.ty,
                name = new,
            ));
            stmt.stmt = s;
            
            // We had to take control so exprs wouldn't be able to bind the name. 
            // Which is what you want for local variables, but not constant functions since they should be able to recurse, 
            // but that works out because constants were already handled in scan_const_decls.  -- Jun 27
            return(Ok = .Break);
        });
        (fn DeclVarPattern(f) => {
            // TODO: this declares the new variables before resolving the types/values. which is wrong! -- Jul 1
            each f.binding.bindings { b |
                @try(self.declare_binding(b, stmt.loc, false)) return;
            };
        });
        @default => ();
    };
    (Ok = .Continue)
}

fn handle_func(self: *ResolveScope, func: *Func) Result(DoMore, *CompileError) #once = {
    each func.annotations { a | 
        if a.args& { a | 
            @try(self.walk_expr(a)) return;
        };
    };
    
    @try(self.resolve_func(func)) return;
    @if(!LAZY_SCOPE) {
        @try(self.resolve_func_args(func)) return;
        @try(self.resolve_func_body(func)) return;
    };
    (Ok = .Break)
}

fn handle_type(self: *ResolveScope, ty: *LazyType) Result(DoMore, *CompileError) #once = (Ok = .Continue);
fn handle_pattern(self: *ResolveScope, p: *Pattern) Result(DoMore, *CompileError) #once = (Ok = .Continue);

///////////////////
/// Renumbering ///

RenumberVars :: @struct(scope: *Scopes, mapping: *HashMap(Var, Var));

fn decl(self: *RenumberVars, name: *Var) void = {
    new := self.scope.dup_var(name[]);
    self.mapping.insert(name[], new);
    name[] = new;
}

fn update(self: *RenumberVars, name: *Var) void = {
    if self.mapping.get_ptr(name[]) { new |
        name[] = new[];
    };
}

:: WalkAst(RenumberVars, void);

fn handle_expr(self: *RenumberVars, expr: *FatExpr) Result(DoMore, void) #once = {
    @match(expr.expr&) {
        fn GetVar(name) => self.update(name);
        fn Block(f) => {
            each f.body { stmt |
              @if_let(stmt.stmt&) 
                fn DeclVar(f) => {
                    if f.name.kind == .Const {
                        self.decl(f.name&);
                    };
                };
            }; 
        };
        @default => ();
    };
    (Ok = DoMore.Continue)
}

fn handle_stmt(self: *RenumberVars, stmt: *FatStmt) Result(DoMore, void) #once = {
    @if_let(stmt.stmt&) 
        fn DeclVar(f) => {
            if f.name.kind != .Const {
                self.decl(f.name&);
            };
        };

    (Ok = .Continue)
}

fn handle_func(self: *RenumberVars, func: *Func) Result(DoMore, void) #once = {
    if func.var_name& { old |
        self.update(old);
        // TODO: maybe you sometimes want `self.decl(func.var_name&);` if not in mapping.
        //       but most of the time you're just adding to an overload set.
        //       really the func should track which case it is so we can be sure to do the right thing  -- Jun 27
    };
    if func.return_var& { old |
        self.update(old);
    };
    (Ok = .Continue)
}

fn handle_type(self: *RenumberVars, ty: *LazyType) Result(DoMore, void) #once = (Ok = .Continue);
fn handle_pattern(self: *RenumberVars, p: *Pattern) Result(DoMore, void) #once = {
    each p.bindings { b |
        @if_let(b.name&) 
            fn Var(v) => self.decl(v);
    };
    
    (Ok = .Continue)
}

fn log(s: *SelfHosted, e: *FatExpr) void = {
    out: List(u8) = list(temp());
    e.log(s.pool, out&, 0);
    println(out.items());
}
