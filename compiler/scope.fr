//! - TODO: destructuring vars get declared before the value is resolved so shadowing doesn't work properly. 

/// Query interface /// 

fn put_constant(self: *Scopes, name: Var, value: FatExpr, ty: LazyType) void #compiler = {
    // TODO: this cant be the whole expression because then it looks for an overload returning unit. -- Jun 28
    ptr := self.constants&.nested_index(name.id.zext());
    ptr[] = (Some = (value, ty));
}

fn get_var_type(self: *Scopes, v: Var) ?Type #compiler = 
    self.types&.nested_index(v.id.zext())[];

fn put_var_type(self: *Scopes, v: Var, ty: Type) bool #compiler = {
    slot := self.types&.nested_index(@as(i64) v.id.zext());
    is_new := slot.is_none();
    slot[] = (Some = ty);
    is_new
}

fn get_constant(self: *Scopes, name: Var) ?*Ty(FatExpr, LazyType) #compiler = {
    ::as_ref(Ty(FatExpr, LazyType));
    self.constants&.nested_index(name.id.zext()).as_ref()
}

fn find_constant_in_scope(self: *Scopes, s: ScopeId, name: Symbol) ?Var #compiler = {
    each self[s].vars { block | 
        v := block.const_lookup&.get(name);
        if v& { v |
            return(Some = v[]);
        };
    };
    .None
}

/// Resolver Interface. Called lazily by the compiler when it first works on a new function. /// 

fn resolve_root(compiler: *SelfHosted, func: *Func, scope: ScopeId) Result(void, ParseErr) #compiler = {
    r: ResolveScope = new(compiler, scope, func.loc);
    
    zone := zone_begin(.Scope); // TODO: defer
    @try_deref_err(r&.resolve_func(func)) return;
    zone_end(zone);
    .Ok
}

fn resolve_sign(compiler: *SelfHosted, func: *Func) Result(void, ParseErr) #compiler = {
    r: ResolveScope = new(compiler, func.scope.expect("function to have scope"), func.loc);
    
    zone := zone_begin(.Scope); // TODO: defer
    @try_deref_err(r&.resolve_func_args(func)) return;
    zone_end(zone);
    .Ok
}

fn resolve_body(compiler: *SelfHosted, func: *Func) Result(void, ParseErr) #compiler = {
    r: ResolveScope = new(compiler, func.scope.expect("function to have scope"), func.loc);
    
    zone := zone_begin(.Scope); // TODO: defer
    @try_deref_err(r&.resolve_func_body(func)) return;
    zone_end(zone);
    .Ok
}

/// Renumbering interface ///

fn dup_var(self: *Scopes, old: Var) Var #compiler = {
    new := old;
    new.id = self.types.len.trunc();
    self.types&.push(.None);
    self.constants&.push(.None);  // TODO: bit odd that i dont have to clone if the old thing had a constant expr. 
    new
}

// For unquoting, initial will be None, but for inlining closures, it will be the return variable. 
fn renumber_expr(self: *SelfHosted, expr: *FatExpr, initial: ?Ty(Var, Var)) void #compiler = {
    mapping: HashMap(Var, Var) = init(temp());
    if initial& { i |
        mapping&.insert(i._0, i._1);
    };
    renumber: RenumberVars = (scope = self.scopes, mapping = mapping&);
    renumber&.walk_expr(expr);
}

// TODO: this doesn't belong in this file -- Jun 28
fn maybe_renumber_and_dup_scope(self: *SelfHosted, new_func: *Func) Result(void, ParseErr) #compiler = {

    // Closures always resolve up front, so they need to renumber the clone.
    // TODO: HACK but closures get renumbered when inlined anyway, so its just the const args that matter. im just being lazy and doing the whole thing redundantly -- May 9
    // normal functions with const args havent had their body resolved yet so don't have to deal with it, we only resolve on the clone.
    // the special case for generics is when args can reference previous ones so they have to resolve sign earlier.
    
    needs_renumber := new_func.get_flag(.AllowRtCapture).or(new_func.get_flag(.Generic));
    if needs_renumber {|
        mapping: HashMap(Var, Var) = init(temp());
        renumber: RenumberVars = (scope = self.scopes, mapping = mapping&);
        renumber&.walk_func(new_func);
        if new_func.get_flag(.Generic) && !new_func.get_flag(.ResolvedBody) {|
            // the sign has already been resolved so we need to renumber before binding arguments.
            // however, the body hasn't been resolved yet, so we can't just renumber in place.
            // instead, remap the sign as normal and then, insert a new scope containing the remapped variables,
            // and use that as the starting point when we resolve the body of new new function.
            // that way when it iterates up the scopes to resolve names, it will see our remapped shadows instead of the original.
            // this allows #generic argument types that reference the values of other argument.
            // but doing this is a bit creepy because the Var.scope isn't updated to the new one,
            // so they get inserted back in the old one's constants/rt_types again later.
            // that's why its fine when we can't find a remap for something in constants or vars.      -- May 29
            assert(new_func.get_flag(.ResolvedSign), "expected resolved sign");  // TODO: debug
            assert(!new_func.get_flag(.AllowRtCapture), "expected no runtime capture"); // TODO: debug
            prev := new_func.scope.unwrap();
            old_scope := self.scopes[prev]&;
            id := self.scopes.new_scope(old_scope.parent, old_scope.block_in_parent);
            old_scope := self.scopes[prev]&;
            
            // Note: it has to iterate and check more and more each time (but it only copies what's needed). -- Jun 29
            each old_scope.vars { block | 
                new_vars: List(Var) = list(self.get_alloc());
                for block.vars { old | 
                    if mapping&.get_ptr(old) { new |
                        new_vars&.push(new[]);
                    };
                };
                new_constants: HashMap(Symbol, Var) = init(self.get_alloc());
                each block.const_lookup& { (k, v) |
                    if mapping&.get_ptr(v[]) { new |
                        v := self.scopes.get_constant(v[]);
                        v := v.unwrap(); // TODO: destructure through a pointer? 
                        expr := self.clone(v._0&);
                        ty := self.clone(v._1&);
                        self.scopes.put_constant(new[], expr, ty);
                        new_constants&.insert(new.name, new[]);
                    };
                };
                b: BlockScope = (vars = new_vars, const_lookup = new_constants, parent = block.parent);
                self.scopes[id].vars&.push(b);
            };
        
            new_func.scope = (Some = id);
        };
    } else {|
        assert(!new_func.get_flag(.ResolvedBody), "resolved body");
    };
    
    .Ok
}


/// Implementation /// 

Scopes :: @struct(
    scopes: List(Scope),
    // Indexed by var id.
    // Invarient: all but last bucket are full. Never push_all since that might allocate a non full bucket and then indexes will be wrong. 
    // :push_type_when_create_new_var when i start creating new vars elsewhere, need to remember to push a none here! didn't have to in the old version because it was a hashmap.
    // now its hard to forget cause i use that len instead of self.next_var too.
    types: BucketArray(?Type),
    constants: BucketArray(?Ty(FatExpr, LazyType)),
    // Used for not redundantly #include_std-ing. 
    // TODO: This will become a HashMap(Symbol, ScopeId) when I want to allow @import-ing a namespace. 
    //       so currently Lib :: @namespace { #include_std("name"); }; doesn't work unless its the only time which is kinda dumb. 
    //       but it didn't work in the rust version and i don't want to change too much at once. 
    already_loaded: HashSet(Symbol),
);

// TODO: use unmanaged List/HashMap so not storing the allocator a billon times. 
Scope :: @struct(
    parent: ScopeId,
    vars: List(BlockScope),
    block_in_parent: i64,
);

BlockScope :: @struct(
    vars: List(Var),
    const_lookup: HashMap(Symbol, Var),
    parent: i64,
);

fn hash(i: *Var) i64 = {
    i := (@as(i64) i.id.zext());
    i&.hash()
}
fn eq(a: Var, b: Var) bool = a.id == b.id;
fn eq(a: *Var, b: *Var) bool = a[] == b[]; // TODO: this should be automatic, or == should always look for the ref version? or i should commit to rls like zig so it doesn't matter. 
fn hash(i: *Symbol) i64 = {
    i := (@as(i64) i[].id().zext());
    i&.hash()
}

fn index(self: *Scopes, i: ScopeId) *Scope = {
    index := ptr_cast_unchecked(ScopeId, u32, i&)[]; // TODO: expose id like normal struct
    s := self.scopes[@as(i64) index.zext()]&; // TODO: shouldn't need extra binding
    s
}

fn scope_from_index(i: u32) ScopeId = {
    s := ptr_cast_unchecked(u32, ScopeId, i&)[]; // TODO: expose id like normal struct
    s
}

fn new_scope(self: *Scopes, parent: ScopeId, block_in_parent: i64) ScopeId = {
    s: Scope = (
        parent = parent,
        vars = list(self.scopes.gpa),
        block_in_parent = block_in_parent,
    );
    self.scopes&.push(s);
    scope_from_index(self.scopes.len.sub(1).trunc())
}

ResolveScope :: @struct(
    captures: List(Var),
    compiler: *SelfHosted,
    scope: ScopeId,
    block: i64,
);

fn new(compiler: *SelfHosted, scope: ScopeId, last_loc: Span) ResolveScope = (
    captures = list(temp()),
    compiler = compiler,
    scope = scope,
    block = 0,
);

fn resolve_func(self: *ResolveScope, func: *Func) PRes = {
    if(func.get_flag(.ResolvedBody).and(func.get_flag(.ResolvedSign)), => return(.Ok)); 

    // TODO: need to remember to update from this if we get one from the user (like they added it in a macro)?
    // TODO: could remove from func.annotations but it doesn't actually matter. 
    if(func.has_tag(.generic), => func.set_flag(.Generic));
    if(func.has_tag(.unsafe_noop_cast), => func.set_flag(.UnsafeNoopCast));
    if(func.has_tag(.cold), => func.set_flag(.Cold));

    self.push_scope((Some = func.name));
    func.scope = (Some = self.scope);

    if func.get_flag(.AllowRtCapture) {|
        @try(self.resolve_func_args(func)) return;
        @try(self.resolve_func_body(func)) return;
    } else {|
        self.pop_scope();
    };

    .Ok
}

fn resolve_func_args(self: *ResolveScope, func: *Func) PRes = {
    if(func.get_flag(.ResolvedSign), => return(.Ok));
    
    self.scope = func.scope.expect("function to have scope");
    self.block = 0;
    generic := func.get_flag(.Generic); // ret is allowed to depend on previous args.
    func.set_flag(.ResolvedSign);

    if generic {|
        each func.arg.bindings { b |
            @try(self.declare_binding(b, func.loc, true)) return;
        };
    };
    each func.arg.bindings { b |
        @try(self.resolve_binding(b)) return;
    };
    self.walk_type(func.ret&);
    self.pop_block();
    // TODO: allow block exprs with consts in arg types but for now i dont use it and this is easier to think about. -- Apr 24
    .Ok
}

fn resolve_func_body(self: *ResolveScope, func: *Func) PRes = {
    if(func.get_flag(.ResolvedBody), => return(.Ok));
    self.scope = func.scope.expect("function to have scope");
    generic := func.get_flag(.Generic); // args and ret are allowed to depend on previous args.

    self.push_scope(.None);

    if generic {|
    } else {|
        each func.arg.bindings { b |
            @try(self.declare_binding(b, func.loc, true)) return;
        };
    };
    self.push_scope(.None);
    func.set_flag(.ResolvedBody);
    
    @if_let(func.body&) fn Normal(expr) => {
        ::if(Flag);
        name := if(func.get_flag(.AllowRtCapture), => Flag.local_return, => Flag.return);
        var := @try(self.decl_var(name.ident(), .Const, func.loc, .Label)) return;
        func.return_var = (Some = var);
        @try(self.walk_expr(expr)) return;
    };
    
    self.pop_block();
    self.pop_block();
    self.pop_scope();

    capures := self.captures;

    if func.get_flag(.AllowRtCapture) {|
        // TODO: this is only needed for the error reporting below but involves a slow iteration (in find_var). 
        //       Track which scope you're capturing from the first time we get the var so don't have to look it up again? -- Jun 26
        // Now check which things we captured from *our* parent.
        // Remember this is in temp allocator! 
        for self.captures { c |
            self.find_var(c.name); // This adds it back to self.captures if needed
        };
    } else {|
        // TODO: show the captured var use site and declaration site.
        // TODO: add a test that this error is reported
        @assert_eq(true, capures.is_empty(), "Must use '=>' for closure '%' with captures", self.compiler.pool.get(func.name));
    };
    self.captures&.clear();

    .Ok
}

fn scan_const_decls(self: *ResolveScope, stmt: *FatStmt) PRes = {
    loc := stmt.loc;
    @match(stmt.stmt&) {
        (fn DeclNamed(f) => {
            // kinda hack. just makes it easier to read logs when you do 'name :: fn() ...'
            @if_let(f.value.expr&) fn Closure(func) => {
                if func.name == Flag.Anon.ident() {|
                    func.name = f.name;
                };
            };
            
            if (f.kind == .Const) {|
                new := @try(self.decl_var(f.name, f.kind, loc, .Unknown)) return;
                decl: Stmt = (DeclVar = (
                    value = f.value,
                    ty = f.ty,
                    name = new,
                ));
                stmt.stmt = decl;
            };
        });
        (fn DeclFunc(func) => {
            // Functions don't shadow, they just add to an overload group.
            // TOOD: @vs @private
            v := self.find_var(func.name).or(=> {
                // TODO: we just tried to look it up so (sometimes) don't need to do the extra check if we're sillegally hadowing a const. :SLOW
                @try(self.decl_var(func.name, .Const, func.loc, .OverloadSet)) return
            });
            func.var_name = (Some = v);
        });
        @default => ();
    };
    .Ok
}

// most blocks aren't using #include_std.
// doing it this way means you scan_const_decls twice anything in a block before a #include_std, but that doesn't matter.
fn slow_body(self: *ResolveScope, body: *List(FatStmt)) PRes #once = {
    new_body: List(FatStmt) = list(body.len, body.gpa);
    dirty := true;
    while (=> dirty) {|
        dirty = false;
        each body { stmt | 
            continue :: local_return;
            if stmt.annotations.len == 1 && stmt.annotations.items()[0].name == Flag.include_std.ident() {|
                msg :: "#include_std requires string argument";
                arg_expr := stmt.annotations.items()[0].args.or() {|
                    return(@error(msg))
                };
                name := @match(arg_expr.expr) {
                    (fn String(name) Symbol => { name });
                    @default => return(@error(msg));
                };
                
                if !self.compiler.scopes.already_loaded&.insert(name) {|
                    name := self.compiler.pool.get(name);
                    :: ?WaitingParse;
                    file := self.compiler.get_include_std(name).or() {|
                        return(@error("unknown path for #include_std %", name));
                        unreachable()
                    };
                    dirty = true;
                    stmts := @try(self.compiler.parser.finish_pending_stmts(file)) return;
                    new_body&.push_all(stmts.items());
                };
                continue();
            };

            new_body&.push(stmt[]);
        };
        temp := body[];
        body[] = new_body;
        new_body = temp;
        new_body&.clear();
    };
    each body { stmt |
        @try(self.scan_const_decls(stmt)) return;
    };
    .Ok
}

//! This (find_var/decl_var) is done in a dumb and slow way with a bunch of linear scans through all the variables in a scope,
//! but its only really a problem at the top level where i import everything in the universe,
//! and i dont have enough code written in this language to convincingly benchmark it.

fn find_var(self: *ResolveScope, name: Symbol) ?Var = {
    s := self.scope;
    block := self.block;
    first := true;

    loop {|
        scope := self.compiler.scopes[s]&;
        found := find(scope, block, name);
        if found& { v | // TODO: it gets the arity wrong if not by pointer. 
            // TODO: derive ne from eq so you can use != more often. 
            // TODO: better error message for *T vs **T, should say dereference not unsafe cast. 
            if first.not().and(=> !v.kind.eq(.Const)).and(=> !self.captures.contains(v)) {|
                // We got it from our parent function.
                self.captures&.push(v[]);
            };
            return(Some = v[]);
        };
        if scope.parent == s {|
            return(.None);
        };
        s = scope.parent;
        block = scope.block_in_parent;
    };
    
    find :: fn(scope: *Scope, block: i64, name: Symbol) ?Var = {
        if scope.vars.is_empty() {|
            //assert_eq(block, 0); // TODO: debug
            return(.None);
        };
        vars := scope.vars[block]&;
        loop {|
            const := vars.const_lookup&.get(name);
            if const& { v |  // TODO: needs to be by reference because arity is broken
                return(Some = v[]);
            };
        
            // Reverse so you get the shadowing first.
            each_rev vars.vars& { v |
                if(v.name == name, => {
                    return(Some = v[])
                });
            };

            if vars.parent == block {|
                //assert_eq(block, 0); // TODO: debug
                return(.None);
            };
            //@assert_ne(block, 0); // TODO: debug
            block = vars.parent;
            stupid := scope.vars[block]&; // TODO
            vars = stupid;
        };
        unreachable()
    };

    unreachable()
}

fn decl_var(self: *ResolveScope, name: Symbol, kind: VarType, loc: Span, placeholder: PlaceholderValue) Result(Var, *ParseErr) = {
    s := self.scope;
    // Note: you can't shadow a let with a const either but that already works because consts are done first.

    scopes := self.compiler.scopes;
    scope := scopes[s]&;
    
    prev := scope.vars[self.block].const_lookup&.get(name);
    if prev.is_some() {|
        return(@error("Cannot shadow constant in the same scope: %", self.compiler.pool.get(name)));
    };
    
    var: Var = (kind = kind, name = name, id = scopes.types.len.trunc(), scope = self.scope, block = self.block.trunc());
    if kind == .Const {|
        empty: Ty(FatExpr, LazyType) = ((expr = (Poison = placeholder), loc = loc, ty = UnknownType, done = false), .Infer);
        scopes.constants&.push((Some = empty));
        prev := scope.vars[self.block].const_lookup&.insert(name, var);
    } else {|
        scopes.constants&.push(.None);
    };
    
    scope.vars[self.block].vars&.push(var); // includes constants!
    scopes.types&.push(.None);
    self.compiler.record_var_declare(var, loc);
    (Ok = var)
}

// TODO: pass bool instead of ?Symbol
fn push_scope(self: *ResolveScope, name: ?Symbol) void = {
    :: if_opt(Symbol, i64);
    parent: i64 = if name { _ |
        self.scope = self.compiler.scopes.new_scope(self.scope, self.block);
        0
    } else {|
        self.block
    };
    scope := self.compiler.scopes[self.scope]&;
    scope.vars&.push(@as(BlockScope) (
        vars = list(scope.vars.gpa), 
        const_lookup = init(scope.vars.gpa),
        parent = parent
    ));
    self.block = scope.vars.len - 1;
}

fn pop_scope(self: *ResolveScope) void = {
    scope := self.compiler.scopes[self.scope]&;
    self.scope = scope.parent;
    self.block = scope.block_in_parent;
}

fn pop_block(self: *ResolveScope) void = {
    scope := self.compiler.scopes[self.scope]&;
    self.block = scope.vars[self.block].parent;
}

fn resolve_binding(self: *ResolveScope, binding: *Binding) PRes #once = {
    @try(self.walk_type(binding.ty&)) return;
    if binding.default& { expr |
        @try(self.walk_expr(expr)) return;
    };
    .Ok
}

fn declare_binding(self: *ResolveScope, binding: *Binding, loc: Span, is_args: bool) PRes = {
    @match(binding.name) {
        (fn Ident(name) => {
            ::if(PlaceholderValue);
            placeholder: PlaceholderValue = if(is_args, => .Argument, => .Unknown);
            var := @try(self.decl_var(name, binding.kind, loc, placeholder)) return;
            b: Binding = (
                name = (Var = var),
                ty = binding.ty,
                default = binding.default,
                kind = binding.kind,
            );
            binding[] = b;
        });
        (fn Var(_) => {
            return(@error("ICE: resolved args twice."));
        });
        (fn None() => ());
    };
    .Ok
}

:: WalkAst(ResolveScope, *ParseErr);

fn handle_expr(self: *ResolveScope, expr: *FatExpr) Result(DoMore, *ParseErr) #once = {
    loc := expr.loc;

    @match(expr.expr&) {
        (fn GetParsed(index) => {
            e := @try(self.compiler.parser.finish_pending(index[])) return;
            expr[] = self.compiler.clone(e&); // clone is important! you end up with multiple copies of the same pending parse. 
            self.walk_expr(expr);
            return(Ok = DoMore.Break);
        });
        (fn Block(f) => {
            self.push_scope(.None);

            (=> {
                break :: local_return;
                each f.body { stmt |
                    if stmt.annotations.len == 1 {|
                        if stmt.annotations.items()[0].name == Flag.include_std.ident() {|
                            stmts := f.body.assume_owned(self.compiler.get_alloc());
                            @try(self.slow_body(stmts&)) return;
                            f.body = stmts.rs();
                            break();
                        };
                    };
                    @try(self.scan_const_decls(stmt)) return;
                };
            })();
            
            each f.body { stmt |
                @try(self.walk_stmt(stmt)) return;
            };
            @try(self.walk_expr(f.result)) return;
            
            self.pop_block();
            
            // Needed to do that in the block, so took control of the walk order and now we're done.
            return(Ok = .Break);
        });
        // TODO: wastefully resolving on things like `.None` and `@symbol whatever`, that's why we have to allow missing vars here, they might just be used as symbols. 
        (fn GetNamed(name) => {
            v := self.find_var(name[]);
            if v& { var |
                self.compiler.record_var_usage(var[], expr.loc);
                expr.expr = (GetVar = var[]);
            };
        });
        @default => ();
    };
    (Ok = DoMore.Continue)
}

fn handle_stmt(self: *ResolveScope, stmt: *FatStmt) Result(DoMore, *ParseErr) #once = {
    @match(stmt.stmt&) {
        (fn DeclNamed(f) => {
            @try(self.walk_type(f.ty&)) return;
            @try(self.walk_expr(f.value&)) return;
            
            new := @try(self.decl_var(f.name, f.kind, stmt.loc, .Unknown)) return;
            s: Stmt = (DeclVar = (
                value = f.value,
                ty = f.ty,
                name = new,
            ));
            stmt.stmt = s;
            
            // We had to take control so exprs wouldn't be able to bind the name. 
            // Which is what you want for local variables, but not constant functions since they should be able to recurse, 
            // but that works out because constants were already handled in scan_const_decls.  -- Jun 27
            return(Ok = .Break);
        });
        (fn DeclFunc(func) => {
            func.annotations&.push_all(stmt.annotations.items(), self.compiler.get_alloc());
            stmt.annotations&.clear();
        });
        (fn DeclVarPattern(f) => {
            // TODO: this declares the new variables before resolving the types/values. which is wrong! -- Jul 1
            each f.binding.bindings { b |
                @try(self.declare_binding(b, stmt.loc, false)) return;
            };
        });
        @default => ();
    };
    (Ok = .Continue)
}

fn handle_func(self: *ResolveScope, func: *Func) Result(DoMore, *ParseErr) #once = {
    each func.annotations { a | 
        if a.args& { a | 
            @try(self.walk_expr(a)) return;
        };
    };
    
    @try(self.resolve_func(func)) return;
    (Ok = .Break)
}

fn handle_type(self: *ResolveScope, ty: *LazyType) Result(DoMore, *ParseErr) #once = (Ok = .Continue);
fn handle_pattern(self: *ResolveScope, p: *Pattern) Result(DoMore, *ParseErr) #once = (Ok = .Continue);

///////////////////
/// Renumbering ///

RenumberVars :: @struct(scope: *Scopes, mapping: *HashMap(Var, Var));

fn decl(self: *RenumberVars, name: *Var) void = {
    new := self.scope.dup_var(name[]);
    self.mapping.insert(name[], new);
    name[] = new;
}

fn update(self: *RenumberVars, name: *Var) void = {
    if self.mapping.get_ptr(name[]) { new |
        name[] = new[];
    };
}

:: WalkAst(RenumberVars, void);

fn handle_expr(self: *RenumberVars, expr: *FatExpr) Result(DoMore, void) #once = {
    @if_let(expr.expr&) 
        fn GetVar(name) => self.update(name);
    (Ok = DoMore.Continue)
}

fn handle_stmt(self: *RenumberVars, stmt: *FatStmt) Result(DoMore, void) #once = {
    @if_let(stmt.stmt&) 
        fn DeclVar(f) => self.decl(f.name&);

    (Ok = .Continue)
}

fn handle_func(self: *RenumberVars, func: *Func) Result(DoMore, void) #once = {
    if func.var_name& { old |
        self.update(old);
        // TODO: maybe you sometimes want `self.decl(func.var_name&);` if not in mapping.
        //       but most of the time you're just adding to an overload set.
        //       really the func should track which case it is so we can be sure to do the right thing  -- Jun 27
    };
    if func.return_var& { old |
        self.update(old);
    };
    (Ok = .Continue)
}

fn handle_type(self: *RenumberVars, ty: *LazyType) Result(DoMore, void) #once = (Ok = .Continue);
fn handle_pattern(self: *RenumberVars, p: *Pattern) Result(DoMore, void) #once = {
    each p.bindings { b |
        @if_let(b.name&) 
            fn Var(v) => self.decl(v);
    };
    
    (Ok = .Continue)
}

fn log(s: *SelfHosted, e: *FatExpr) void = {
    out: List(u8) = list(temp());
    e.log(s.pool, out&, 0);
    println(out.items());
}
