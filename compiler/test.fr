AstExternal :: import("@/compiler/ast_external.fr");
#use("@/backend/lib.fr");
#use("@/lib/sys/process.fr");
#use("@/lib/sys/fs.fr");

// These all run a few times (.Exe + .Cached + .CachedEarly) and assert the output is the same
run_and_check :: @S(@as(Case)
    //("tests/exe/aot_only.fr",      empty()                    , fn(_, __) = true), // TODO: amd64
    ("examples/toy/hello2.fr",     empty()                    , EqHelloWorld),
    ("examples/sudoku.fr",         @S(sudoku[0])              , fn(out, _) = out.contains(sudoku[1])),
    ("examples/bf/interpreter.fr", empty()                    , EqHelloWorld),
    ("examples/bf/code_string.fr", empty()                    , EqHelloWorld),
    ("examples/bf/bf2ir.fr",       empty()                    , EqHelloWorld),
    ("examples/bf/c_string.fr",    empty()                    , EqHelloWorld),
    ("examples/bf/via_wasm.fr",    empty()                    , EqHelloWorld),
    ("examples/prospero.fr",       @S("-width", "64", "-hush"), fn(_, err) = err.contains("22/253:3578")),
    ("examples/kaleidoscope.fr",   empty()                    , fn(out, _) = out.ends_with("[ok]\n") && chars(out, "*") == 2055),
    ("backend/meta/qbe_frontend.fr", @S("backend/test/mandel.ssa", "-r"), fn(out, _) = chars(out, "*") == 1483),
    ("examples/import_c/cc.fr", @S("examples/import_c/test/hello.c", "-r"), fn(out, _) = out == "Hello World!\nOK\n"),
    ("compiler/main.fr",           @S("examples/toy/hello2.fr"), EqHelloWorld),
    ("tests/exe/arm_bit_mask.fr",  empty()                     , fn(_, __) = true),
    ("examples/repl.fr", @S("-testrepl"), fn(out, _) = out == "Goodbye!\n"),
);

S :: const_slice;
EqHelloWorld :: fn(out, _) = out == "Hello World!\n";
sudoku :: @S("003020600900305001001806400008102900700000008006708200002609500800203009005010300", 
    "483921657967345821251876493548132976729564138136798245372689514814253769695417382");
Case :: Ty(Str, []Str, @FnPtr(o: Str, e: Str) bool);
#use("@/examples/testing.fr");

// TODO: exec every time so you can run tests after the first compile error
fn driver(vtable: *ImportVTable) void = {
    // :FUCKED you can't move this variable declaration down
    franca_path := get_executable_path(temp());  // TODO: cli arg to set this 
    passed := 0;
    failed := 0;
    ::FmtPad(Str);
    tests := collect_tests(vtable);
    ::import("@/examples/testing.fr");
    full, expect_dot_count := gen_full_test_program(tests&);
    ok, out, err := compile_and_run(vtable, full, empty(), "./target/c.out");
    if ok {
        println(out.items());
        print(err.items());
        passed = tests.raw.len_including_tombstones;
        
        // make sure it didn't cheat by calling exit(0) or something
        @assert_eq(expect_dot_count, count_end_of_line_dots(out.items()), "status=0 but didn't print enough dots");
    } else {
        "./target/c.out".three_trillion_dollars_does_not_buy_an_operating_system_that_works(); 
        
        print(out.items());
        print(err.items());
        println("^^^ FAILED GROUP TEST ^^^ running one at a time...");
        each tests& { file, functions | 
            @print("%", f_pad(file, 40, .After));
            src := gen_test_program(file, functions[].items());
            ok, out, err := compile_and_run(vtable, src, empty(), "./target/c.out");
            (@if(ok, passed&, failed&))[] += 1;
            @print("[%]", if(ok, => "ok", => "failed run"));
            print(out.items());
            if !ok {
                print(err.items());
                "./target/c.out".three_trillion_dollars_does_not_buy_an_operating_system_that_works(); 
            };
            println("");
        };
        @assert_ne(failed, 0, "full test failed but all individual tests passed. \n%%", out.items(), err.items());
    };
    if failed == 0 {
        @println("\nAll is fine! (passed % tests)\n", passed);
    } else {
        @panic("% of % tests failed.", failed, failed + passed);
    };
    
    run_tests_main_threaded(*ImportVTable, Case, vtable, run_and_check, fn(_, a) = a._0, fn(vtable, it) = { 
        filename, args, check := it[];
        exe_name := @tfmt("./target/test_%.out", chop_file_name(filename));  // these happen to be unique currently 
        ok, out, err := compile_and_run(vtable, @tfmt("#include_std(\"lib/core.fr\");#include_std(\"%\");", filename), args, exe_name);
        (ok && check(out.items(), err.items()), out, err, "")
    });
    
    println("\nCOMPILE ONLY:");
    run_tests_main_threaded(*ImportVTable, Str, vtable, compile_only, fn(_, a) = a[], fn(vtable, file) = {
        start := timestamp();
        src := @tfmt("""#include_std("lib/core.fr");#include_std("%");""", file[]);
        compile_and_discard(vtable, src);
        (true, list(u8, temp()), list(u8, temp()), "")
    });
}

compile_only :: @S(
    "examples/raw_terminal.fr",  // interactive
    "examples/turing_art.fr", 
    // TODO: test it
    "examples/count.fr", 
    "examples/c_bindgen.fr", 
    "examples/dump_macho.fr", 
    "examples/macho_loader.fr", 
    "examples/elf_loader.fr", 
    "examples/dump_elf.fr",
    "examples/dump_wasm.fr",
    "backend/meta/dump_bin.fr",
    // has deps (llvm-mc)
    "tests/exe/x64_encoding.fr", 
    // is driver
    // "examples/default_driver.fr" "examples/60fps.fr"
    // interactive at comptime
    // "examples/soft_draw.fr" 
    
    "examples/toy/rot_cypher.fr",
    "examples/toy/pi.fr",
    // "examples/toy/where_am_i.fr", "examples/toy/hello.fr", irritating comptime print
    "examples/toy/predict.fr",
    
    // this are interactive so we just compile them. TODO: run one frame and show screen shot as a sanity check? 
    "examples/farm_game.fr",
    "examples/terminal.fr", // dep:stb  // TODO: doesn't work on x64 !!!
    "examples/app_events.fr",
    "examples/geo/main.fr",
    "examples/hello_triangle.fr",
    "examples/depth_test.fr",
    "examples/epicycles.fr",
    "examples/lambda.fr",
    
    // these we could run and just discard the output but it would be nice if i had a good way to actually test them
   
    // running jitted is clearly a bit fragile so this should be tested but it's really annoying spam. 
    "examples/view_image.fr",  // dep:wuffs
    
    "examples/ascii_table.fr",  // dep:stb
    "examples/do.fr",
    
    "examples/toy/reloc.fr",  // prints aslr bytes
    
    "examples/bloat.fr",
    "examples/bloat2.fr",
    "examples/check_source.fr",
    "examples/amalgamate.fr",
    "examples/toy/curse_macho.fr",
);

fn compile_and_discard(vtable: *ImportVTable, src: Str) void = {
    chunks := compile_to_bytes(vtable, src, @slice(QbeOutputPurpose.Exe));
    @assert(chunks[0].len != 0);
    general_allocator().dealloc(u8, chunks[0]);
}

// returns one blob of bytes for each `goal` compiled in the same CompCtx but different QbeModule-s. 
// the bytes are always .Exe, just direct or via frc.
fn compile_to_bytes(vtable: *ImportVTable, src: Str, goal: []QbeOutputPurpose) [][]u8 = {
    results := list([]u8, goal.len, temp());
    mark := mark_temporary_storage();
    push_dynamic_context {
        opts := vtable.default_build_options();
        opts.no_cache = get_environment_variable("FRANCA_NO_CACHE").is_some() || !is_linking_libc();
        c := new_with_src(vtable, src, opts);
        c := vtable.with(c);
        
        for goal { goal |
            ::enum(@type goal);
            @assert(@is(goal, .Exe, .Cached, .CachedEarly), "compile_to_bytes: only exe/cached");
            // TODO: don't use pointer identity for FrcModule. that's why this is allocated. feels creepy to be reusing the compiler with the same memory location
            m := c'vtable'get_alloc(c.data).box(QbeModule);
            
            a, os := (query_current_arch(), query_current_os());
            init_default_module_dyn(m, c.vtable, (arch = a, os = os, type = goal));
            fid := or c.get_unique_named("main") {
                panic("expected exactly one function called 'main'")
            };
            chunks := {c.vtable.emit_qbe_included}(QbeModule.raw_from_ptr(m), c&, @slice(fid), .WrapMain);
            bytes := concat(chunks&, general_allocator());
            c'vtable'drop_qbe_module(QbeModule.raw_from_ptr(m));

            if @is(goal, .Cached, .CachedEarly) {
                m := c'vtable'get_alloc(c.data).box(QbeModule);  // for good luck; see comment above
                
                init_default_module_dyn(m, c.vtable, (arch = a, os = os, type = .Exe));
                
                ::Result(*Incremental.Header, Str);
                header: *Incremental.Header = or check(bytes) { e |
                    @panic("generated an invalid frc file: %", e)
                };
                compile_all_symbols(header, m);
                chunks := {vtable.finish_qbe_module}(QbeModule.raw_from_ptr(m));
                
                general_allocator().dealloc(u8, bytes);
                bytes = concat(chunks&, general_allocator());
                c'vtable'drop_qbe_module(QbeModule.raw_from_ptr(m));
            };
            
            results&.push_assume_capacity(bytes);
        };
        
        // TODO: i would like this to be true but it's not
        //if goal.len >= 2 && goal[0] == .Exe && goal[1] == .Cached {
        //    @assert_eq(results[0], results[1]);
        //};
        
        {c.vtable.destroy_compiler}(c.data);
    };
    reset_temporary_storage(mark);
    results.items()
}

// runs it multiple times with different compilation strategies and returns the result of the first fail or different output. 
// TODO: JitOnly and Relocatable as well?
fn compile_and_run(vtable: *ImportVTable, src: Str, args: []Str, exe_name: Str) Ty(bool, List(u8), List(u8)) = {
    cases := @slice(QbeOutputPurpose.Exe, .Cached, .CachedEarly);
    chunks := compile_to_bytes(vtable, src, cases);
    
    write_entire_file_or_crash(exe_name, chunks[0]);
    ok0, out0, err0 := exec_and_catch(exe_name, args, temp());
    general_allocator().dealloc(u8, chunks[0]);
    if ok0 {
        enumerate chunks.rest(1) { i, exe | 
            write_entire_file_or_crash(exe_name, exe[]);
            general_allocator().dealloc(u8, exe[]);
            ok1, out1, err1 := exec_and_catch(exe_name, args, temp());
            
            out_ok, err_ok := (out0.items() == out1.items(), err0.items() == err1.items());
            pass := ok1 && out_ok && err_ok;
            if !pass {
                ::enum(@type cases[0]);
                @fmt(err1&, "\n>>> [compiler/test.fr] failed %; % % %", cases[i+1], ok1, out_ok, err_ok);
                if !out_ok {
                    @fmt(err1&, "\n>>>Expected STDOUT:\n%", out0.items());
                };
                if !err_ok {
                    @fmt(err1&, "\n>>>Expected STDERR:\n%", err0.items());
                };
                
                return(pass, out1, err1);
            }
        };
        remove(exe_name.as_cstr());
    } else {
        @fmt(err0&, "\n>>> [compiler/test.fr] failed %;", cases[0]);
    };
    
    (ok0, out0, err0)
}

fn gen_test_program(file: Str, functions: []Str) Str = {
    src := u8.list(temp());
    @fmt(src&, """
        #include_std("lib/core.fr");
        ::import("@/%");
        fn main() void = {
    """, file);
    gen_test_program_body(src&, functions);
    push_all(src&, "\n}");
    src.items()
}

fn gen_full_test_program(tests: *Tests) Ty(Str, i64) = {
    src := u8.list(temp());
    @fmt(src&, """#include_std("lib/core.fr");::FmtPad(Str);%""", "\n");
    for_keys tests { k |
        @fmt(src&, "::import(\"@/%\");\n", k);
    };
    @fmt(src&, "fn main() void = {\n");
    count := 0;
    each tests { k, v |
        @fmt(src&, "  @print(\"\\n%[ok]\", f_pad(\"%\", 40, .After));\n", "%", k);
        gen_test_program_body(src&, v[].items());
        count += v.len;
    };
    push_all(src&, "\n}");
    (src.items(), count)
}

fn gen_test_program_body(src: *List(u8), functions: []Str) void = {
    for functions { name | 
        @fmt(src, "    %(@uninitialized); print(\".\"); \n", name);
    };
}

#use("@/lib/collections/map.fr");
Tests :: HashMap(Str, *List(Str));
fn collect_tests(vtable: *ImportVTable) Tests = {
    out: Tests = init(temp());
    push_dynamic_context {
        path: CStr = "tests";
        ::List(FatStmt);
        src := u8.list(temp());
        
        src&.push_all("#include_std(\"lib/core.fr\");\n");
        files := collect_directory_ordered(path.str(), temp(), temp()) 
            || @panic("failed to collect test files from %", path);
        for files { entry |
            // TODO: recurse with another list if .Directory
            if entry.is(.File) && entry.name.ends_with(".fr") {
                @fmt(src&, "#include_std(\"%/%\");\n", path, entry.name);
            };
        };
        
        src1 := src.items().clone(temp()).items();
        opts := vtable.default_build_options();
        c := new_with_src(vtable, src1, opts);
        c := vtable.with(c);
        tests := c.get_tagged("test");
        sort :: quicksort(FuncId, fn(a, b) => a[].as_index() <= b[].as_index());
        sort(tests);
        
        for tests { f | 
            func  := c.get_function(f);
            // carefully copying these names into temp() so they don't go away when destroy_compiler
            name  := c.get_string(func.name).shallow_copy(temp());
            loc   := c.AstExternal'get_whole_line(func.loc);
            files := out&.get(loc&.nice_filename()) || {
                l := temp().box(List(Str));
                l[] = list(temp());
                out&.insert(loc&.nice_filename().shallow_copy(temp()), l);
                l
            };
            files.push(name);
        };
        c'vtable'destroy_compiler(c.data);
    };
    out
}

count_end_of_line_dots :: fn(out: Str) i64 = {
    found_dot_count := 0;
    i := 0;
    while => i < out.len {
        if out[i] == "]".ascii() {
            i += 1;
            while => i < out.len && out[i] != 10 {
                @assert(out[i] == ".".ascii());
                i += 1;
                found_dot_count += 1;
            }
        }
        i += 1;
    };
    found_dot_count
}

fn chars(haystack: Str, $needle: Str) i64 = {
    n := 0;
    for haystack { c |
        n += int(c == needle.ascii());
    };
    n
}

#use("@/lib/sys/subprocess.fr");
