AstExternal :: import("@/compiler/ast_external.fr");
#include_std("backend/lib.fr");
#include_std("compiler/worker.fr");
#use("@/lib/sys/process.fr");
#use("@/lib/sys/fs.fr");

// TODO: exec every time so you can run tests after the first compile error
fn driver(vtable: *ImportVTable) void = {
    // :FUCKED you can't move this variable declaration down
    franca_path := get_executable_path(temp());  // TODO: cli arg to set this 
    passed := 0;
    failed := 0;
    ::FmtPad(Str);
    tests := collect_tests(vtable);
    
    full := gen_full_test_program(tests&);
    ok, out, err := compile_and_run(vtable, full);
    if ok {
        passed = tests.raw.len_including_tombstones;
        println(out.items());
    } else {
        #use("@/examples/testing.fr");
        "./c.out".three_trillion_dollars_does_not_buy_an_operating_system_that_works(); 
        
        each tests& { file, functions | 
            @print("%", f_pad(file, 40, .After));
            src := gen_test_program(file, functions[].items());
            ok, out, err := compile_and_run(vtable, src);
            (@if(ok, passed&, failed&))[] += 1;
            @print("[%]", if(ok, => "ok", => "failed run"));
            print(out.items());
            if !ok {
                print(err.items());
                "./c.out".three_trillion_dollars_does_not_buy_an_operating_system_that_works(); 
            };
            println("");
        };
        @assert_ne(failed, 0, "full test failed but all individual tests passed. \n%%", out.items(), err.items());
    };
    if failed == 0 {
        @println("\nAll is fine! (passed % tests)\n", passed);
    } else {
        @println("\n% of % tests failed.", failed, failed + passed);
        exit((failed != 0).int());
    };
    
    ::import("@/examples/testing.fr");
    
    run_tests_main(Str, compile_only, fn(a) => a[]) { file | 
        src := general_allocator().read_to_string_or_crash(file[]);
        src&.slowly_prepend_all("\n#include_std(\"lib/core.fr\");\n");
        compile(vtable, src.items());
        (true, list(u8, temp()), list(u8, temp()), "")
    };
    println("");

    // TODO: it fails an assertion if you dont put this above the compile_only tests 
    //       if run_tests_main calls exit() which was infact a mistake but it's still a crippling compiler bug 
    //       -- Mar 24, 2025.  :FUCKED asdklasjd;ljas;ldja
    hello :: "examples/bf";
    files := collect_with_extension(hello, ".fr").unwrap();
    files&.unordered_retain(fn(it) => it[] != "README.fr");
    run_tests_main(Str, files.items(), fn(a) => a[]) { file | 
        ok, out, err := exec_and_catch(franca_path, @slice(@tfmt("%/%", hello, file[])), todo_allocator);
        (ok && out.items() == "Hello World!\n", out, err, "")
    };
    
    {
        src := read_entire_file(temp(), "examples/kaleidoscope.fr").unwrap();
        ok, _, _ := compile_and_run(vtable, @tfmt("#include_std(\"lib/core.fr\");%", src));
        @assert(ok, "failed kaleidoscope");
        println("examples/kaleidoscope.fr [ok]");
    };
}

compile_only :: @const_slice(
    "examples/sudoku.fr",  // runs tests at comptime 
    "examples/raw_terminal.fr",  // interactive
    "examples/turing_art.fr", 
    // TODO: test it
    "examples/count.fr", 
    "examples/c_bindgen.fr", 
    "examples/dump_macho.fr", 
    "examples/macho_loader.fr", 
    "examples/dump_elf.fr",
    "examples/dump_wasm.fr",
    // has deps
    "tests/need_llvm/x64_encoding.fr", 
    // is driver
    // "examples/terminal.fr" "examples/farm_game.fr" "examples/default_driver.fr" "examples/60fps.fr"
    // interactive at comptime
    // "examples/soft_draw.fr" 
    
    "examples/toy/rot_cypher.fr",
    "examples/toy/pi.fr",
    // "examples/toy/where_am_i.fr", "examples/toy/hello.fr", irritating comptime print
    "examples/toy/predict.fr",
    
    "examples/repl.fr",
    
    // this are interactive so we just compile them. TODO: run one frame and show screen shot as a sanity check? 
    "examples/farm_game.fr",
    "examples/terminal.fr", // dep:stb  // TODO: doesn't work on x64 !!!
    "examples/app_events.fr",
    "examples/geo/main.fr",
    "examples/hello_triangle.fr",
    "examples/depth_test.fr",
    "examples/epicycles.fr",
    "examples/lambda.fr",
    
    // these we could run and just discard the output but it would be nice if i had a good way to actually test them
    
    // TODO: make this a bit faster so it's not annoying to run it as well. 
    //       but output is visual anyway so it's annoying to check. could check that counts of each pixel are right. 
    "examples/prospero.fr",  // dep:fidget
    
    // running jitted is clearly a bit fragile so this should be tested but it's really annoying spam. 
    "examples/view_image.fr",  // dep:wuffs
    
    "examples/ascii_table.fr",  // dep:stb
);

fn compile(vtable: *ImportVTable, src: Str) void = {
    push_dynamic_context {
        opts := vtable.default_build_options();
        c := new_with_src(vtable, src, opts);
        c := vtable.with(c);
        
        m := zeroed QbeModule;
        a := query_current_arch();
        
        // TODO: this isn't in AstExternal anymore. 
        //       this only works because we paste with #include_std which goes into the root scope 
        //       so every name lookup recurses to the right place. 
        //       actually same would apply to overload set anyway perhaps
        //       -- Apr 9, 2025
        AstExternal'init_default_module_dyn(m&, c.vtable, (arch = a, os = query_current_os(), type = .Exe));
        fid := or c.get_unique_named("main") {
            panic("expected exactly one function called 'main'")
        };
        chunks := {c.vtable.emit_qbe_included}(QbeModule.raw_from_ptr(m&), c&, @slice(fid), .WrapMain);
        
        outpath := "./c.out"; // TODO: don't hardcode this
        outfile := open_trunc(outpath.maybe_borrow_cstr(temp())).unwrap();
        chunks := {m.target.finish_module}(m&);
        for chunks { chunk | 
            write(outfile&, chunk);
        };
        close(outfile);
        drop(m&);
        {c.vtable.destroy_compiler}(c.data);
    };
}

fn compile_and_run(vtable: *ImportVTable, src: Str) Ty(bool, List(u8), List(u8)) = {
    compile(vtable, src);
    exec_and_catch("./c.out", empty(), todo_allocator)
}

fn gen_test_program(file: Str, functions: []Str) Str = {
    src := u8.list(temp());
    @fmt(src&, """
        #include_std("lib/core.fr");
        #include_std("%");
        fn main() void = {
    """, file);
    gen_test_program_body(src&, functions);
    push_all(src&, "\n}");
    src.items()
}

fn gen_full_test_program(tests: *Tests) Str = {
    src := u8.list(temp());
    @fmt(src&, """#include_std("lib/core.fr");::FmtPad(Str);""");
    for_keys tests { k |
        @fmt(src&, "#include_std(\"%\");\n", k);
    };
    @fmt(src&, "fn main() void = {\n");
    each tests { k, v |
        @fmt(src&, "  @print(\"\\n%[ok]\", f_pad(\"%\", 40, .After));\n", "%", k);
        gen_test_program_body(src&, v[].items());
    };
    push_all(src&, "\n}");
    src.items()
}

fn gen_test_program_body(src: *List(u8), functions: []Str) void = {
    for functions { name | 
        @fmt(src, "    %(@uninitialized); print(\".\"); \n", name);
    };
}

#use("@/lib/collections/map.fr");
Tests :: HashMap(Str, *List(Str));
fn collect_tests(vtable: *ImportVTable) Tests = {
    out: Tests = init(temp());
    push_dynamic_context {
        path := "tests".maybe_borrow_cstr(temp());
        ::List(FatStmt);
        src := u8.list(temp());
        
        src&.push_all("#include_std(\"lib/core.fr\");\n");
        walk_directory(path) {entry|
            // TODO: recurse with another list if .Directory
            if entry.is(.File) && entry.name.ends_with(".fr") {
                @fmt(src&, "#include_std(\"%/%\");\n", path, entry.name);
            };
        };
        
        src1 := src.items().clone(temp()).items();
        opts := vtable.default_build_options();
        c := new_with_src(vtable, src1, opts);
        c := vtable.with(c);
        tests := c.get_tagged("test");
        sort :: quicksort(FuncId, fn(a, b) => a[].as_index() <= b[].as_index());
        sort(tests);
        
        for tests { f | 
            func  := c.get_function(f);
            name  := c.get_string(func.name);
            loc   := c.AstExternal'get_whole_line(func.loc);
            files := out&.get(loc.filename) || {
                l := temp().box(List(Str));
                l[] = list(temp());
                out&.insert(loc.filename, l);
                l
            };
            files.push(name);
        };
    };
    out
}

#use("@/lib/sys/subprocess.fr");