#include_std("core.fr"); // TODO: handle adding these here. 
#include_std("main.fr");

DO_TESTS :: true;

// TODO: less ass field lookup and call syntax
// TODO: compiler needs to check type / find right overload of this function. 
fn driver(vtable: *ImportVTable) void #export = {
    s :: @symbol("Hello World").c_str();
    println("Hello World");
    println(s);
    
    args := cli_args();
    for(args){ arg |
        @println("- %", arg);
    };
    
    src := temp().read_to_string("main.fr");
    comp := vtable.new_with_src(src.items(), .Aarch64);
    
    c := vtable.with(comp);
    tests := c.get_tagged("test");

    if DO_TESTS {|
        for tests { fid |
            ptr := c.get_jitted(fid);
            f := assume_types_fn(Arg = void, Ret = void, ptr = ptr);
            f();
        };
        println(tests.len);
        
        // recall: you can always use emit_llvm directly instead of through the vtable to jit the newest version instead of using the old one if you broke something
        ir_text := {c.vtable.emit_llvm}(c, temp(), tests, .TestRunnerMain);
        test_exe := "target/tests.exe";
        build_llvm(ir_text, @slice ("-o", test_exe));
        success := run_cmd_blocking(test_exe, empty());
        assert(success, "tests failed");
    };
    
    exports := c.get_tagged("compiler");
    
    start := timestamp();
    ir_text := {c.vtable.emit_llvm}(c, temp(), exports, .ExportWithNames);
    end := timestamp();
    if !DO_TESTS {|
        @println("Front end time: % milliseconds.", end.sub(start)); 
    };
    test_exe := "target/tests.exe";
    build_llvm(ir_text, @slice ("-o", "target/libfranca.o", "-c", "-O2", "-g")); // "-O2"
    success := run_cmd_blocking("/usr/bin/ar", @slice ("rc", "target/aarch64-apple-darwin/libfranca.a", "target/libfranca.o"));
    assert(success, "link failed");
    
    //build_llvm(ir_text, @slice ("-o", "target/libfranca.o", "-c", "-target", "x86_64-apple-darwin")); // "-O2"
    //success := run_cmd_blocking("/usr/bin/ar", @slice ("rc", "target/x86_64-apple-darwin/libfranca.a", "target/libfranca.o"));
    //assert(success, "link failed");
}

// TODO: return result
fn build_llvm(ir: BucketArray(u8), args: Slice(Str)) void = {
    out := open_temp_file();
    for(ir&){bucket|
        out.fd&.write(bucket);
    };
    @println("Write llvm ir to %", out&.s_name());   
    args: List(Str) = args.clone(temp());
    args&.push("-x"); // don't check the file extension of source files that follow. 
    args&.push("ir"); 
    args&.push(out&.s_name());
    @println("%", args.items());
    success := run_cmd_blocking(CLANG_PATH, args.items());
    assert(success, "ICE: generated invalid llvm ir");
    out.remove();
}

::display_slice(Str);
