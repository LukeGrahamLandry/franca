#include_std("core.fr"); // TODO: handle adding these here. 
#include_std("main.fr");

// TODO: this whole thing where you have to write your program inside out is really annoying. 
//       I want the user program to be in charge and call into the compiler as a library. 
UserData :: @struct(
    vtable: *ImportVTable,
);

resolve_comptime_import :: fn(userdata: rawptr, c: Compiler, f: FuncId, lib_name: Symbol, fn_name: Symbol) ?rawptr = {
    userdata := UserData.ptr_from_raw(userdata);
    // TODO: can't call @println here??
    println("Asked for a function");
    .None
};

// TODO: less ass field lookup and call syntax
// TODO: compiler needs to check type / find right overload of this function. 
fn driver(vtable: *ImportVTable) Unit #export = {
    println("Hello World");
    args := cli_args();
    for(args){ arg |
        @println("- %", arg);
    };
    
    src := temp().read_to_string("main.fr");
    comp := vtable.new_with_src(src.items(), .Aarch64);
    my_vtable: ExportVTable = (
        resolve_comptime_import = (Some = resolve_comptime_import!fn_ptr),
    );
    data: UserData = (vtable = vtable);

    {vtable.give_vtable}(comp, my_vtable&, UserData.raw_from_ptr(data&));
    
    sym_test := {vtable.intern_string}(comp, "test");
    tests := {vtable.get_fns_with_tag}(comp, sym_test);

    for(tests) {fid|
        res := {vtable.compile_func}(comp, fid, .Jit).unwrap();
        ptr := {vtable.get_jitted_ptr}(comp, fid).unwrap();
        {vtable.make_jitted_exec}(comp);
        f := assume_types_fn(Arg = Unit, Ret = Unit, ptr = ptr);
        f();
    };
    println(tests.len);
    
    // TODO: this needs to work!
    //ir_text := emit_llvm((data = comp, vtable = vtable), temp(), tests, .TestRunnerMain);
    //out := open_temp_file();
    //for(ir_text&){bucket|
    //    out.fd&.write(bucket);
    //};
    //@println("Write llvm ir to %", out&.s_name());
    //exit(0);
    
    save_exports_as_dylib(vtable);
}

fn save_exports_as_dylib(vtable: *ImportVTable) Unit = {
    driver_src := temp().read_to_string("first.fr");
    comp := vtable.new_with_src(driver_src.items(), .Aarch64);
    export_sym := {vtable.intern_string}(comp, "export");
    exports := {vtable.get_fns_with_tag}(comp, export_sym);
    
    ir := emit_llvm((data = comp, vtable = vtable), temp(), exports, .ExportWithNames);
    
    // Note: remember to truncate if you stop using a temp file!
    file := open_temp_file();
    for (ir&) { bucket |
        file.fd&.write(bucket);
        //println(bucket);
    };
    
    args: List(Str) = list(temp());
    args&.push("-dynamiclib");
    args&.push("-o");
    args&.push("target/libfranca.dylib");
    args&.push("-Os");
    
    // don't check the file extension of source files that follow. 
    args&.push("-x"); 
    args&.push("ir"); 
    args&.push(file&.s_name());
    @println("%", args.items());
    success := run_cmd_blocking(CLANG_PATH, args.items()); // TODO: wait for it to be dones
    assert(success, "ICE: generated invalid llvm ir");
    file.remove();
}

::display_slice(Str);