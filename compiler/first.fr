DO_TESTS :: false;

ENABLE_TRACY :: false;
ENABLE_LSP   :: false;
REPLACE_COMPILER :: false;

fn load_src(vtable: *ImportVTable) Ty(CompCtx, *ComptimeLibs) = {
    src := temp().read_to_string("compiler/main.fr");
    @fmt(src&, ";ENABLE_TRACY :: %;\n", ENABLE_TRACY);
    @fmt(src&, ";ENABLE_LSP   :: %;\n", ENABLE_LSP);
    
    comp := vtable.new_with_src(src.items(), .Aarch64);
    c := vtable.with(comp);
    
    libs := c.empty_libs();
    libs := temp().boxed(ComptimeLibs, libs);
    libs.intercept_imports();
    if(ENABLE_TRACY, => libs.add_lib(tracy_lib));
    // TODO: fix relative paths. just decide everything is built from the top level. so `franca compiler/first.fr`
    if(ENABLE_LSP, => libs.add_lib(wuffs_lib));
    
    // TODO: but we're not there yet as a society 
    //exports := c.get_tagged("export_builtin_ct");

    (c, libs)
}

// TODO: less ass field lookup and call syntax
// TODO: compiler needs to check type / find right overload of this function. 
// TODO: allow runtime #import without building the dylib if not needed at comptime. 
fn driver(vtable: *ImportVTable) void = {
    //driver_lsp_entry(vtable);
    
    if !file_exists("compiler/main.fr") {|
        panic("Working directory must be top level of the franca repository");
    };
    start := timestamp();
    (c, libs) := load_src(vtable);
    
    do_build := true;
    args := cli_args();
    for args { arg |
        if arg.str() == "-no-build" {|
            do_build = false;
        };
    };
    
    if DO_TESTS {|
        tests := c.get_tagged("test");
        for tests { fid |
            ptr := c.get_jitted(fid);
            f := assume_types_fn(Arg = void, Ret = void, ptr = ptr);
            f();
        };
        println(tests.len);
        
        // recall: you can always use emit_llvm directly instead of through the vtable to jit the newest version instead of using the old one if you broke something
        ir_text := {c.vtable.emit_llvm}(c, temp(), tests, .TestRunnerMain);
        test_exe := "target/tests.exe";
        build_llvm(ir_text, @slice ("-o", test_exe));
        success := run_cmd_blocking(test_exe, empty());
        assert(success, "tests failed");
    };
    
    exports := c.get_tagged("compiler");
    
    ir_text := {c.vtable.emit_llvm}(c, temp(), exports, .ExportWithNames);
    @println("Emitted % bytes of llvm ir.", ir_text.len);  // useful to see when i start trying to deduplicate bytecode. 
    end := timestamp();
    if !DO_TESTS {|
        // TODO: don't print it if we didn't have cached dependencies. 
        @println("Frontend time: % ms.", end.sub(start)); 
    };
    if do_build {|
        start := timestamp();
        build_llvm(ir_text, @slice ("-o", "target/franca/libfranca.o", "-c", "-Os", "-g"));
        end := timestamp();
        @println("LLVM time: % ms.", end.sub(start)); 
        
        // build.rs needs this if it wants to build the binary (it won't take a .o file)
        run_cmd_blocking("/usr/bin/ar", @slice (
            "rc", "target/franca/libfranca.a", "target/franca/libfranca.o"
        )).assert("link failed");
        
        // to use tracy, we need to use clang to build the binary so it can find libc++,
        // so we need to have the rust code as a .a file. 
        // TODO: is my fucking with the target dir confusing its incremental?
        //run_cmd_blocking("/Users/luke/.cargo/bin/cargo", @slice (
        //    "build", "--release", "--lib",
        //)).assert("cargo failed");
        // node: this makes a much much larger binary than if cargo does it. 
        //       i suspect im linking in the whole rust std or something? 
        args := libs.get_aot_objects();
        // TODO: should output then move cause i think it deletes if it fails. and save the old one for a bit cause its scary. 
        if REPLACE_COMPILER {|
            args&.push_all(@slice("target/release/libfranca.a", "target/franca/libfranca.o", "-o", "target/release/franca", "-g"));
            run_cmd_blocking(CLANG_PATH, args.items()).assert("link failed");
        } else {|
            println("SKIPPED REPLACING COMPILER");
        };
    } else {|
        println("SKIPPED RUNNING LLVM");
    };
    
    //render_dependencies(c, exports);
    
    //build_llvm(ir_text, @slice ("-o", "target/libfranca.o", "-c", "-target", "x86_64-apple-darwin")); // "-O2"
    //success := run_cmd_blocking("/usr/bin/ar", @slice ("rc", "target/x86_64-apple-darwin/libfranca.a", "target/libfranca.o"));
    //assert(success, "link failed");
}

fn render_dependencies(c: CompCtx, fns: []FuncId) void = {
    out: List(u8) = list(temp());
    out&.push_all("digraph {\n");
    pending: List(FuncId) = list(temp());
    pending&.push_all(fns);
    done: BitSet = empty();
    
    while => !pending.is_empty() {|
        continue :: local_return;
        f := pending&.pop().unwrap();
        if done&.get(f.to_index().zext()) {|
            continue();
        };
        done&.set(f.to_index().zext(), temp());
        
        func := {c.vtable.get_function}(c.data, f);
        real_name := {c.vtable.get_string}(c.data, func.name);
        @fmt(out&, "% [label = \"%\"]\n", f.to_index(), real_name);
        @println("[%: %]", f.to_index(), real_name);
        for func.mutual_callees { cc |
            pending&.push(cc);
            @fmt(out&, "% -> %\n", f.to_index(), cc.to_index());
            func := {c.vtable.get_function}(c.data, cc);
            @println("  - %: %", cc.to_index(), {c.vtable.get_string}(c.data, func.name));
        };
        for func.callees { cc |
            pending&.push(cc);
            @fmt(out&, "% -> %\n", f.to_index(), cc.to_index());
            func := {c.vtable.get_function}(c.data, cc);
            @println("  - %: %", cc.to_index(), {c.vtable.get_string}(c.data, func.name));
        };
    };
    out&.push_all("}");
    
    path := "callgraph.dot".maybe_borrow_cstr(temp());
    remove(path);
    s := out.items();
    flag := (@as(i64) OpenFlag.Write).bit_or(@as(i64) OpenFlag.Create);
    fd := open(path, flag).unwrap();
    write(fd, s.ptr, s.len).unwrap();
    fd.close();
}

// TODO: return result
fn build_llvm(ir: BucketArray(u8), args: Slice(Str)) void = {
    out := open_temp_file();
    for(ir&){bucket|
        out.fd&.write(bucket);
    };
    @println("Write llvm ir to %", out&.s_name());   
    args: List(Str) = args.clone(temp());
    args&.push("-x"); // don't check the file extension of source files that follow. 
    args&.push("ir"); 
    args&.push(out&.s_name());
    @println("%", args.items());
    success := run_cmd_blocking(CLANG_PATH, args.items());
    assert(success, "ICE: generated invalid llvm ir");
    out.remove();
}

::display_slice(Str);

fn driver_lsp_entry(vtable: *ImportVTable) Compiler = {
    (c, libs) := load_src(vtable);
    // TODO: dumb that im actually generating bc+asm for them
    exports := c.get_tagged("compiler");
    
    for exports { fid |
        ptr := c.get_jitted(fid);
    };
    
    c.data
}
