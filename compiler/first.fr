#include_std("compiler/backend/llvm.fr");

fn load_src(vtable: *ImportVTable) Ty(CompCtx, *ComptimeLibs) = {
    src := temp().read_to_string("compiler/main.fr");
    cfg: CompilerBuildOptions = ();
    opts := vtable.default_build_options();
    opts.deduplicate_bytecode = true;
    opts.retain_function_names = false;
    opts.debug_info = false;
    args := cli_args();
    for args { extra |
        if extra.str() == "-no-deduplication" {
            opts.deduplicate_bytecode = false;
        };
        if extra.str() == "-keep-names" {
            opts.retain_function_names = true;
        };
        if extra.str() == "-debug-info" {
            opts.debug_info = true;
        };
        if extra.str() == "-spam" {
            cfg.spam_debug = true;
        };
        if extra.str() == "-x86" {
            panic("use -x64 instead of -x86 (sorry)");
        };
        if extra.str() == "-unsafe" {
            opts.safety_checks&.insert(SafetyCheck.Bounds, false);
            opts.safety_checks&.insert(SafetyCheck.DebugAssertions, false);
            opts.safety_checks&.insert(SafetyCheck.InvalidTag, false);
        };
        if extra.str() == "-boot-only" {
            cfg.boot_only = true;
            opts.safety_checks&.insert(SafetyCheck.KeepPanicMessages, false);
        };
        if extra.str() == "-trace" {
            cfg.profile = true;
        };
    };
    
    cfg.get_compiler_source(src&);
    comp := vtable.new_with_src(src.items(), opts);
    c := vtable.with(comp);
    
    libs := c.empty_libs();
    libs := temp().boxed(ComptimeLibs, libs);
    //libs.intercept_imports();
    if(cfg.profile, => libs.add_lib(tracy_lib));
    
    // TODO: but we're not there yet as a society 
    //exports := c.get_tagged("export_builtin_ct");

    (c, libs)
}

// TODO: less ass field lookup and call syntax
// TODO: compiler needs to check type / find right overload of this function. 
// TODO: allow runtime #import without building the dylib if not needed at comptime. 
fn driver(vtable: *ImportVTable) void = {
    //driver_lsp_entry(vtable);
    
    if !file_exists("compiler/main.fr") {
        panic("Working directory must be top level of the franca repository");
    };
    start := timestamp();
    
    do_build := true;
    do_replace := false;
    args := cli_args();
    x86 := false;
    arch := Arch.aarch64;
    os := Os.macos;
    slow := false;
    keep_ir := false;
    trace := false;
    linux := false;
    static := false;
    asan := false;
    for args { arg |
        if arg.str() == "-no-build" {
            do_build = false;
        };
        if arg.str() == "-replace-compiler" {
            do_replace = true;
        };
        if arg.str() == "-x64" {
            x86 = true;
            arch = .x86_64;
        };
        if arg.str() == "-static" {
            static = true;
        };
        if arg.str() == "-linux" {
            linux = true;
            os = .linux;
        };
        if arg.str() == "-opt=none" {
            slow = true;
        };
        if arg.str() == "-S" {
            keep_ir = true;
        };
        if arg.str() == "-trace" {
            trace = true;
        };
        if arg.str() == "-asan" {
            asan = true;
        };
    };
    c, libs := load_src(vtable);
    
    new_main := c.get_unique_named("main").unwrap();
    exports := (@list(new_main) temp()).items();
    ir_text := c.emit_llvm(temp(), exports, .WrapMain, arch, os);
    @println("Emitted % bytes of llvm ir.", ir_text.len);  // useful to see when i start trying to deduplicate bytecode. 
    end := timestamp();

    // TODO: don't print it if we didn't have cached dependencies. 
    @println("Frontend time: % ms.", end.sub(start)); 

    fn fmt_str(fmt_args: FatExpr) FatExpr #macro = @{
        (@format(@[fmt_args]) temp()).items()
    };
    
    arch_path := if(x86, => "x86_64-apple-darwin", => "aarch64-apple-darwin");
    if linux {
        arch_path = if(x86, => "x86_64-linux", => "aarch64-linux");
    };
    out_dir := @fmt_str("target/franca/%", arch_path);
    
    if keep_ir { 
        out := open_temp_file();
        for(ir_text&){bucket|
            out.fd&.write(bucket);
        };
        @println("Write llvm ir to %", out&.s_name());   
        println("SKIPPED RUNNING LLVM");
        exit(0);
    };
    
    if do_build {
        start := timestamp();
        args := libs.get_aot_objects();
        if slow {
            // TODO: #cold are still optsize
            args&.push("-O0");
        } else {
            args&.push("-Os");
        };
        // if not linkin tracy could just not `-c` and do it in one step but meh. 
        args&.push_all(@slice ("-o", @fmt_str("%/franca2.o", out_dir), "-c", "-g"));
        target_triple := "aarch64-apple-darwin";
        if static {
            assert(linux, "only linux supports -static");
        };
        if x86 {
            if linux {
                // :WhichLibc
                if static {
                    target_triple = "x86_64-linux-musl";
                } else {
                    target_triple = "x86_64-linux-gnu";
                };
            } else {
                target_triple = "x86_64-apple-darwin";
            };
        } else {
            if linux {
                // :WhichLibc
                if static {
                    target_triple = "aarch64-linux-musl";
                } else {
                    target_triple = "aarch64-linux-gnu";
                };
            };
        };
        args&.push_all(@slice("-target", target_triple));
        if asan {
            args&.push("-fsanitize=address");
        };
        build_llvm(ir_text, args.items());  // "-mllvm", "-hot-cold-split=true",
        end := timestamp();
        @println("LLVM time: % ms.", end.sub(start));
        
        if do_replace {
            save_temp_file := open_temp_file();
            compiler_exe_path := @fmt_str("%/franca2", out_dir);
            rename(compiler_exe_path.maybe_borrow_cstr(temp()), save_temp_file&.c_name());
            @println("Replacing your compiler at '%' with the new one. \nThe old one was saved at '%' (NOTE: THATS A TEMP FILE!)", compiler_exe_path, save_temp_file&.s_name());
            
            if linux {
                args: List(Str) = list(temp());
                comptime_os := query_current_os();
                cmd := if comptime_os == .linux {
                    args&.push("-ldl");
                    "clang"
                } else {
                    args&.push("cc");
                    "zig"
                };
                args&.push_all(@slice(
                    "-o", compiler_exe_path, @fmt_str("%/franca2.o", out_dir), 
                    "-target", target_triple));
                if static {
                    args&.push("-Wl,-z,common-page-size=65536,-z,max-page-size=65536"); // TODO: dont have this? its for blink
                    args&.push("-static");
                };
                if asan {
                    args&.push("-fsanitize=address");
                };
                success := run_cmd_blocking(cmd, args.items());
                assert(success, "link failed");
                return();
            };
        
            args := libs.get_aot_objects();
            args&.push_all(@slice ("-o", compiler_exe_path, @fmt_str("%/franca2.o", out_dir)));
            if asan {
                args&.push("-fsanitize=address");
            };
            if x86 {
                args&.push_all(@slice("-target", target_triple));
            };
            clang := if(trace, => "clang++", => "clang");
            start := timestamp();
            run_cmd_blocking(clang, args.items()).assert("link failed");
            end := timestamp();
            @println("Link time: % ms.", end.sub(start));
        } else {
            println("SKIPPED REPLACING COMPILER");
        };
        exit(0);
    } else {
        println("SKIPPED RUNNING LLVM");
    };
}

// TODO: return result
fn build_llvm(ir: BucketArray(u8), args: Slice(Str)) void = {
    out := open_temp_file();
    for(ir&){bucket|
        out.fd&.write(bucket);
    };
    @println("Write llvm ir to %", out&.s_name());   
    args: List(Str) = args.clone(temp());
    args&.push("-x"); // don't check the file extension of source files that follow. 
    args&.push("ir"); 
    args&.push("-g"); 
    args&.push(out&.s_name());
    @println("%", args.items());
    success := run_cmd_blocking("clang", args.items());
    assert(success, "ICE: generated invalid llvm ir");
    
    // i really hope this changes every time just because i iterate over rust hashtables somewhere. 
    //s := out&.s_name();
    //run_cmd_blocking("shasum", (ptr = s&, len = 1));
    out.remove();
}

::display_slice(Str);

fn driver_lsp_entry(vtable: *ImportVTable) Compiler = {
    c, libs := load_src(vtable);
    // TODO: dumb that im actually generating bc+asm for them
    exports := c.get_tagged("compiler");
    
    for exports { fid |
        ptr := c.get_jitted(fid);
    };
    
    c.data
}

CompilerBuildOptions :: @struct(
    terminal_colours := true,
    logging_callbacks := false,
    spam_debug := false,
    boot_only := false,
    profile := false,
);

fn get_compiler_source(cfg: CompilerBuildOptions, src: *List(u8)) void = {
    @fmt(src, ";BOOTSTRAP_ONLY_MODE :: %;\n", cfg.boot_only);
    @fmt(src, ";DEBUG_SPAM_LOG :: %;\n", cfg.spam_debug);
    @fmt(src, ";ENABLE_TRACY :: %;\n", cfg.profile);
    @fmt(src, ";ENABLE_LOGGING_CALLBACKS :: %;\n", cfg.logging_callbacks);
    @fmt(src, ";DO_TERMINAL_COLOURS :: %;\n", cfg.terminal_colours);
}
