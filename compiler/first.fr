#include_std("core.fr"); // TODO: handle adding these here. 

// TODO: this whole thing where you have to write your program inside out is really annoying. 
//       I want the user program to be in charge and call into the compiler as a library. 
UserData :: @struct(
    vtable: *ImportVTable,
);

resolve_comptime_import :: fn(userdata: rawptr, c: Compiler, f: FuncId, lib_name: Symbol, fn_name: Symbol) ?rawptr = {
    userdata := UserData.ptr_from_raw(userdata);
    // TODO: can't call @println here??
    println("Asked for a function");
    .None
};

// TODO: less ass field lookup and call syntax
// TODO: compiler needs to check type / find right overload of this function. 
fn driver(vtable: *ImportVTable) Unit #export = {
    println("Hello World");
    args := cli_args();
    for(args){ arg |
        @println("- %", arg);
    };
    
    src := libc_allocator.read_to_string("main.fr");
    comp := vtable.new_with_src(src.items());
    my_vtable: ExportVTable = (
        resolve_comptime_import = (Some = resolve_comptime_import!fn_ptr),
    );
    data: UserData = (vtable = vtable);
    {vtable.give_vtable}(comp, my_vtable&, UserData.raw_from_ptr(data&));
    
    sym_test := {vtable.intern_string}(comp, "test");
    tests := {vtable.get_fns_with_tag}(comp, sym_test);
    for(tests) {fid|
        res := {vtable.compile_func}(comp, fid, .Jit).unwrap();
        ptr := {vtable.get_jitted_ptr}(comp, fid).unwrap();
        {vtable.make_jitted_exec}(comp);
        f := assume_types_fn(Arg = Unit, Ret = Unit, ptr = ptr);
        f();
    };
    println(tests.len);
    // exit(0);
    
    driver_src := libc_allocator.read_to_string("first.fr");
    comp := vtable.new_with_src(driver_src.items());
    driver_sym := {vtable.intern_string}(comp, "driver");
    f := {vtable.find_unique_func}(comp, driver_sym).unwrap();
    c_src := {vtable.emit_c}(comp, (f)!slice, false).unwrap();
    
    c_file := open_temp_file();
    c_file.fd&.write(c_src);
    
    args: List(Str) = list(libc_allocator);
    // TODO: this can't be a real constant because then you can't take its address. should be able to do `some_constant&`. 
    hack_ignore_warning_args := @array(
        "-Wno-int-to-void-pointer-cast",
        "-Wno-void-pointer-to-int-cast",
        "-Wno-return-type", // TODO: this one would be helpful! but need to emit _Noreturn for functions returning Never
        "-Wno-incompatible-library-redeclaration",
        "-Wno-int-conversion",
        "-Wno-pointer-sign",
        "-Wno-return-type", // TODO: this one would be helpful! but need to emit _Noreturn for functions returning Never
        "-Wno-incompatible-function-pointer-types", // TODO: this ones probably often helpful, should fix it in the generated code. also UB san complains.
    );
    
    args&.push_all(hack_ignore_warning_args&.slice());
    args&.push("-dynamiclib");
    args&.push("-o");
    args&.push("target/a.o");
    
    // don't check the file extension of source files that follow. 
    args&.push("-x"); 
    args&.push("c"); 
    args&.push(c_file&.s_name());
    ::display_slice(Str);
    @println("%", args.items());
    run_cmd_blocking(CLANG_PATH, args.items()); // TODO: wait for it to be dones
    c_file.remove();
}

