
fn log(self: *FatExpr, pool: *StringPool, out: *List(u8), depth: i64) void = {
    @match(self.expr&) {
        (fn Call(f) => {
            f.f.log(pool, out, depth);
            out.push_all("(");
            f.arg.log(pool, out, depth);
            out.push_all(")");
        });
        (fn GetNamed(i) => {
            out.push_all(pool.get(i[]));
        });
        (fn String(i) => {
            @fmt(out, "\"%\"", pool.get(i[]));
        });
        (fn Block(f) => {
            out.push_all("{\n");
            each (f.body.items()) {s|
                s.log(pool, out, depth.add(1));
            };
            out.indent_by(depth.add(1));
            f.result.log(pool, out, depth.add(1));
            out.indent_by(depth);
            out.push_all("\n}");
        });
        (fn Tuple(args) => {
            out.push_all("(");
            each (args.items()) {arg|
                arg.log(pool, out, depth);
                out.push_all(",");
            };
            out.push_all(")");
        });
        (fn Value(value) => out.push_all("<<value>>"));
        (fn GetVar(v) => out.push_all(pool.get(v.name)));
        (fn Closure(f) => {
            f[].log(pool, out, depth);
        });
        (fn SuffixMacro(f) => {
            f.arg.log(pool, out, depth);
            @fmt(out, "!%", pool.get(f.name));
        });
        (fn StructLiteralP(pattern) => {
            pattern.log(pool, out, depth);
        });
        (fn FieldAccess(f) => {
            f.container.log(pool, out, depth);
            @fmt(out, ".%", pool.get(f.name));
        });
        (fn PrefixMacro(f) => {
            out.push_all("(@(");
            f.handler.log(pool, out, depth);
            out.push_all(")(");
            f.arg.log(pool, out, depth);
            out.push_all(") ");
            f.target.log(pool, out, depth);
            out.push_all(")");
        });
        (fn PtrOffset(f) => {
            @fmt(out, "<<offset %>> ", f.bytes);
            f.ptr.log(pool, out, depth);
        });
        (fn Cast(inner) => {
            out.push_all("<<cast>> ");
            inner[].log(pool, out, depth);  
        });
        @default => out.push_all("ICE:???");
    };
} 

fn log(self: *Func, pool: *StringPool, out: *List(u8), depth: i64) void = {
    out.push_all("fn ");
    out.push_all(pool.get(self.name));
    self.arg&.log(pool, out, depth);
    out.push_all(" ");
    self.ret&.log(pool, out, depth);
    each self.annotations.items() {a|
        out.push_all(" ");
        a.log(pool, out, depth);
    };
}

fn log(self: *Annotation, pool: *StringPool, out: *List(u8), depth: i64) void = {
    out.push_all("#");
    out.push_all(pool.get(self.name));
    if(self.args&.as_ref()){expr|
        out.push_all("(");
        expr.log(pool, out, depth);
        out.push_all(")");
    };
}

fn log(self: *Pattern, pool: *StringPool, out: *List(u8), depth: i64) void = {
    out.push_all("(");
    each (self.bindings.items()) {b|
        b.log(pool, out, depth);
        out.push_all(",");
    };
    out.push_all(")");
}

fn log(self: *Binding, pool: *StringPool, out: *List(u8), depth: i64) void = {
    @match(self.name) {
        (fn Ident(name) => out.push_all(pool.get(name)));
        (fn Var(v) => out.push_all(pool.get(v.name)));
        (fn None() => out.push_all("_"));
    };
    out.push_all(": "); // TODO
    self.ty&.log(pool, out, depth);
    ::as_ref(FatExpr); // TODO: cant do by value because it gets the wrong arity for the lambda???
    ::if_opt(*FatExpr, void);
    if self.default&.as_ref() {e: *FatExpr|
        out.push_all(" = ");
        e.log(pool, out, depth);
    };
}

fn log(self: *LazyType, pool: *StringPool, out: *List(u8), depth: i64) void = {
    @match(self) {
        (fn PendingEval(e) => { e.log(pool, out, depth); });
        (fn Infer() => out.push_all("_"));
        @default => out.push_all("<TODO>");
    };
}


fn indent_by(out: *List(u8), depth: i64) void = {
    range(0, depth) {i|
        out.push_all("  "); 
    };
}

fn log(self: *FatStmt, pool: *StringPool, out: *List(u8), depth: i64) void = {
    out.indent_by(depth);
    @match(self.stmt&) {
        (fn Noop() => {
            out.push_all(";\n");
        });
        (fn Eval(expr) => {
            expr.log(pool, out, depth);
            out.push_all(";\n");
        });
        (fn DeclNamed(f) => {
            // TODO: kind and ty
            out.push_all(pool.get(f.name));
            out.push_all(": ");
            f.ty&.log(pool, out, depth);
            if eq(@as(i64) f.kind, @as(i64) VarType.Const) {|
                out.push_all(" : ");
            }{|
                out.push_all(" = ");
            };
            f.value&.log(pool, out, depth);
            out.push_all(";\n");
        });
        (fn Set(f) => {
            f.place&.log(pool, out, depth);
            out.push_all(" = ");
            f.value&.log(pool, out, depth);
            out.push_all(";\n");
        });
        (fn DeclFunc(f) => {
            f[].log(pool, out, depth);
        });
        @default => out.push_all("ICE:???");
    }
} 
