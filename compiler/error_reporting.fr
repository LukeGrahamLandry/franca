:: enum(PlaceholderValue);
fn log(self: *FatExpr, pool: *StringPool, out: *List(u8), depth: i64) void = {
    @if(DO_TERMINAL_COLOURS) {
        if self.done {
            set_colour(out, 0, 250, 0);
        } else {
            set_colour(out, 250, 0, 0);
        };
        out.push_all("[");
        unset_colour(out);
    };
    
    @match(self.expr&) {
        fn Call(f) => {
            f.f.log(pool, out, depth);
            out.push_all("(");
            f.arg.log(pool, out, depth);
            out.push_all(")");
        }
        fn GetNamed(i) => {
            out.push_all(pool.get(i[]));
        }
        fn String(i) => {
            @fmt(out, "\"%\"", pool.get(i[]));
        }
        fn Block(f) => {
            out.push_all("{\n");
            each (f.body.items()) {s|
                s.log(pool, out, depth.add(1));
            };
            out.indent_by(depth.add(1));
            f.result.log(pool, out, depth.add(1));
            out.indent_by(depth);
            out.push_all("\n}");
        }
        fn Tuple(args) => {
            out.push_all("(");
            each (args.items()) {arg|
                arg.log(pool, out, depth);
                out.push_all(",");
            };
            out.push_all(")");
        }
        fn Value(value) => {
            // TODO: if we had access to the compiler here we could do fancy printing
            @fmt(out, "%", value.bytes&);
        }
        fn GetVar(v) => {
            out.push_all(pool.get(v.name));
            out.push_all("%");
            @fmt(out, "%", v.id);
        }
        fn Closure(f) => {
            f[].log(pool, out, depth);
        }
        fn StructLiteralP(pattern) => {
            pattern.log(pool, out, depth);
        }
        fn FieldAccess(f) => {
            f.container.log(pool, out, depth);
            @fmt(out, ".%", pool.get(f.name));
        }
        fn PrefixMacro(f) => {
            out.push_all("(@(");
            f.handler.log(pool, out, depth);
            out.push_all(")(");
            f.arg.log(pool, out, depth);
            out.push_all(") ");
            f.target.log(pool, out, depth);
            out.push_all(")");
        }
        fn PtrOffset(f) => {
            f.ptr.log(pool, out, depth);
            @fmt(out, ".ptr_offset(%)", f.bytes);
        }
        fn Cast(inner) => {
            out.push_all("<<cast>> ");
            inner[].log(pool, out, depth);  
        }
        fn GetParsed(f) => {
            @fmt(out, "<<GetParsed %>> ", f.id);
        }
        fn ConstEval(inner) => {
            out.push_all("<<const>> ");
            inner[].log(pool, out, depth);  
        }
        fn Addr(inner) => {
            inner[].log(pool, out, depth);  
            out.push_all("&");
        }
        fn Deref(inner) => {
            inner[].log(pool, out, depth);  
            out.push_all("[]");
        }
        fn Poison(placeholder) => {
            @fmt(out, "%", placeholder);
        }
        fn ContextualField(name) => {
            @fmt(out, ".%", pool.get(name[]));
        }
        fn If(f) => {
            out.push_all("@if(");
            f.cond.log(pool, out, depth);  
            out.push_all(", ");
            f.if_true.log(pool, out, depth);  
            out.push_all(", ");
            f.if_false.log(pool, out, depth);  
            out.push_all(")");
        }
        fn Slice(inner) => {
            out.push_all("@slice(");
            inner[].log(pool, out, depth);  
            out.push_all(")");
        }
        fn Switch(f) => {
            @fmt(out, "(switch(");
            f.value.log(pool, out, depth);  
            @fmt(out, ")\n");
            each f.cases { f | 
                @fmt(out, "% => ", f._0);
                f._1&.log(pool, out, depth);  
                @fmt(out, "\n");
            };
            @fmt(out, "@default => ");
            f.default.log(pool, out, depth);  
            @fmt(out, ")\n");
        }
        @default => {
            @fmt(out, "TODO:print:%", self.expr&.tag());
        };
    };
    @if(DO_TERMINAL_COLOURS) {
        if self.done {
            set_colour(out, 0, 250, 0);
        } else {
            set_colour(out, 250, 0, 0);
        };
        out.push_all("]");
        unset_colour(out);
    };
} 

fn display(value: *Values, out: *List(u8)) void = {
    @match(value) {
        fn Small(f) => {@fmt(out, "<<value:%>>", f._0); };
        fn Big(f)   => {@fmt(out, "<<value, % bytes>>", f.len); };
    };
}

fn log(self: *Func, pool: *StringPool, out: *List(u8), depth: i64) void = {
    out.push_all("(fn ");
    out.push_all(pool.get(self.name));
    self.arg&.log(pool, out, 0);
    out.push_all(" ");
    self.ret&.log(pool, out, 0);
    each self.annotations {a|
        out.push_all(" ");
        a.log(pool, out, 0);
    };
    out.push_all(" = ");
    self.body&.log(pool, out, depth);
    out.push_all(")");
}

fn log(self: *FuncImpl, pool: *StringPool, out: *List(u8), depth: i64) void = {
    @match(self) {
        fn Normal(body) => body.log(pool, out, depth);
        fn Intrinsic(op) => {
            @fmt(out, "Intrinsic:%", op);
        }
        fn ComptimeAddr(addr) => {
            @fmt(out, "ComptimeAddr:%", addr);
        }
        fn Redirect(target) => {
            @fmt(out, "Redirect:%", target);
        }
        fn DynamicImport(target) => {
            @fmt(out, "DynamicImport:%", pool.get(target[]));
        }
        fn Merged(parts) => {
            each parts { part | 
                @fmt(out, "[ ");
                part.log(pool, out, depth);
                @fmt(out, "] ");
            };
        }
        @default => ();
    }
    
}
fn log(self: *Annotation, pool: *StringPool, out: *List(u8), depth: i64) void = {
    out.push_all("#");
    out.push_all(pool.get(self.name));
    ::?*FatExpr; ::as_ref(FatExpr);
    if(self.args&.as_ref()){expr|
        out.push_all("(");
        expr.log(pool, out, depth);
        out.push_all(")");
    };
}

fn log(self: *Pattern, pool: *StringPool, out: *List(u8), depth: i64) void = {
    out.push_all("(");
    each (self.bindings.items()) {b|
        b.log(pool, out, depth);
        out.push_all(",");
    };
    out.push_all(")");
}

fn log(self: *Binding, pool: *StringPool, out: *List(u8), depth: i64) void = {
    @match(self.name) {
        (fn Ident(name) => out.push_all(pool.get(name)));
        (fn Var(v) => out.push_all(pool.get(v.name)));
        (fn None() => out.push_all("_"));
    };
    out.push_all(": "); // TODO
    self.ty&.log(pool, out, depth);
    ::as_ref(FatExpr); // TODO: cant do by value because it gets the wrong arity for the lambda???
    c := self.default&.as_ref();
    if c {e: *FatExpr|
        out.push_all(" = ");
        e.log(pool, out, depth);
    };
}

fn log(v: *Var, pool: *StringPool, out: *List(u8), depth: i64) void = {
    @fmt(out, "%%%", pool.get(v.name), "%", v.id);
}

fn log(self: *LazyType, pool: *StringPool, out: *List(u8), depth: i64) void = {
    @match(self) {
        (fn PendingEval(e) => { e.log(pool, out, depth); });
        (fn Infer() => out.push_all("_"));
        (fn Finished(ty) => {
            @fmt(out, "Ty%", ty[].to_index());
        });
        @default => out.push_all("<TODO>");
    };
}

fn indent_by(out: *List(u8), depth: i64) void = {
    range(0, depth) {i|
        out.push_all("  "); 
    };
}

fn log(self: *FatStmt, pool: *StringPool, out: *List(u8), depth: i64) void = {
    out.indent_by(depth);
    
    each self.annotations {a|
        out.push_all(" ");
        a.log(pool, out, depth);
    };
    
    @match(self.stmt&) {
        (fn Noop() => {
            out.push_all(";\n");
        });
        (fn Eval(expr) => {
            expr.log(pool, out, depth);
            out.push_all(";\n");
        });
        (fn DeclNamed(f) => {
            // TODO: kind and ty
            out.push_all(pool.get(f.name));
            out.push_all(": ");
            f.ty&.log(pool, out, depth);
            if eq(@as(i64) f.kind, @as(i64) VarType.Const) {
                out.push_all(" : ");
            }{
                out.push_all(" = ");
            };
            f.value&.log(pool, out, depth);
            out.push_all(";\n");
        });
        (fn Set(f) => {
            f.place&.log(pool, out, depth);
            out.push_all(" = ");
            f.value&.log(pool, out, depth);
            out.push_all(";\n");
        });
        (fn DeclFunc(f) => {
            f[].log(pool, out, depth);
        });
        (fn DeclVar(f) => {
            // TODO: kind and ty
            out.push_all(pool.get(f.name.name));
            out.push_all("%");
            @fmt(out, "%", f.name.id);
            out.push_all(": ");
            f.ty&.log(pool, out, depth);
            if eq(@as(i64) f.name.kind, @as(i64) VarType.Const) {
                out.push_all(" : ");
            }{
                out.push_all(" = ");
            };
            f.value&.log(pool, out, depth);
            out.push_all(";\n");
        });
        (fn DeclVarPattern(f) => {
            @fmt(out, "TODO:DeclVarPattern := ");
            f.value&.log(pool, out, depth);
            @fmt(out, ";\n");
        });
        @default => {
            @fmt(out, "TODO:print:%\n", self.stmt&.tag());
        };
    }
}

fn HasLog($T: Type) void = {
    fn log(self: *T, pool: *StringPool) Str = {
        out: List(u8) = list(temp());
        self.log(pool, out&, 0);
        out.items()
    }
}

:: {
    HasLog(FatStmt);
    HasLog(FatExpr);
    HasLog(LazyType);
    HasLog(Var);
    HasLog(Func);
};

///////////////////////////
// TODO: should try to clean these up.


// TODO: allow taking span as arg? take compiler as arg to put last loc? 
fn error(arg: FatExpr) FatExpr #macro = {
    if !arg.expr&.is(.Tuple) {
        return(@{ 
            mem := libc_allocator.alloc(ParseErr, 1);
            e := mem.ptr;
            e[] = (span = Span.zeroed(), msg = @[arg]);
            (Err = e) 
        });
    };
    @{
        mem := libc_allocator.alloc(ParseErr, 1);
        e := mem.ptr;
        out: List(u8) = list(temp());
        @[ format_into(@{ out& }, arg.expr.Tuple.items(), arg.loc) ];
        e[] = (span = Span.zeroed(), msg = out.items());
        (Err = e)
    }
}

// @err_assert(cond, "msg %", 123) return;
fn err_assert(arg: FatExpr, ret: FatExpr) FatExpr #macro = {
    loc := arg.loc;
    arg := compile_ast(arg);
    arg_err :: "@assert expected '(cond, fmt_string, args)'";
    if arg.ty == bool {
        arg = compile_ast(@{ (@[arg], "Assertion Failed") });
    };
    @ct_assert(arg.expr&.is(.Tuple), loc, arg_err);
    parts := arg.expr.Tuple.items();
    @ct_assert(parts.len >= 2, loc, arg_err);
    @ct_assert(parts[1].ty == Str, loc, arg_err);
    
    if parts.len == 2 {
        @{ 
            if !@[parts[0]] {
                @[ret](@error(@[parts[1]]));
            };
        }
    } {
        cond := parts[0];
        @{
            if(!@[cond]){
                out: List(u8) = list(temp());
                out&.push_all("Assertion Failed: ");
                @[format_into(@{ out& }, parts.rest(1), arg.loc)];
                @[ret](@error(out.items()));
            };
        }
    }
}

fn unwrap(arg: FatExpr, ret: FatExpr) FatExpr #macro = {
    loc := arg.loc;
    arg := compile_ast(arg);
    if arg.ty == bool {
        arg = compile_ast(@{ (@[arg], "Assertion Failed") });
    };
    arg_err :: "@assert expected '(nullable, fmt_string, args)'";
    @ct_assert(arg.expr&.is(.Tuple), loc, arg_err);
    parts := arg.expr.Tuple.items();
    @ct_assert(parts.len >= 2, loc, arg_err);
    @ct_assert(parts[1].ty == Str, loc, arg_err);
    
    @{
        cond := @[parts[0]];
        if cond&.is_none() {
            out: List(u8) = list(temp());
            out&.push_all("Missing Value: ");
            // TODO: format_into should cope with length 1 just printing the string (and assert no % signs).
            @[if parts.len == 2 {
                @{ out&.push_all(@[parts[1]]) }
            } else {
                format_into(@{ out& }, parts.rest(1), arg.loc)
            }];
            @[ret](@error(out.items()));
        };
        cond.unwrap()
    }
}

fn try_deref_err(maybe: FatExpr, ret: FatExpr) FatExpr #macro= @{
    m := @[maybe];
    if(m&.is_err(), => @[ret](Err = m.unwrap_err()[]));
    m.unwrap()
};

fn log_type(self: *SelfHosted, ty: Type) Str = {
    safe_rec: DynamicBitSet = empty(temp());
    out: List(u8) = list(temp()); 
    self.log_type_inner(safe_rec&, out&, ty);
    out.items()
}

fn log_type_inner(self: *SelfHosted, safe_rec: *DynamicBitSet, out: *List(u8), ty: Type) void = {
    if safe_rec.get(ty.as_index()) {
        @fmt(out, "TY%", ty.as_index());
        return();
    };
    safe_rec.set(ty.as_index());
    
    // TODO
    //if let Some(&Some(name)) = self.inferred_type_names.get(t.as_index()) {
    //    let name = self.pool.get(name);
    //    // HACK: need to be smarter about when to infer an assignment as a type name.
    //    if name != "Self" && name.len() != 1 {
    //        return name.to_string();
    //    }
    //}

    @match(self.get_type(ty)) {
        fn Placeholder() => {
            @fmt(out, "UnfinishedPlaceHolder%", ty.as_index());
        }
        fn Never() => out.push_all("Never");
        fn F64()   => out.push_all("f64");
        fn F32()   => out.push_all("f32");
        fn Bool()  => out.push_all("bool");
        fn void()  => out.push_all("void");
        fn VoidPtr() => out.push_all("rawptr");
        fn Ptr(inner)  => {
            out.push_all("*");
            self.log_type_inner(safe_rec, out, inner[]);
        }
        fn Struct(f) => {
            out.push_all("@struct(");
            each f.fields { f | 
                @fmt(out, "%: ", self.pool.get(f.name));
                self.log_type_inner(safe_rec, out, f.ty);
                out.push_all(",");
            };
            out.push_all(")");
        }
        fn Tagged(f) => {
            out.push_all("@tagged(");
            each f.cases { f | 
                @fmt(out, "%: ", self.pool.get(f._0));
                self.log_type_inner(safe_rec, out, f._1);
                out.push_all(",");
            };
            out.push_all(")");
        }
        fn Enum(f) => {
            self.log_type_inner(safe_rec, out, f.raw);
            out.push_all(":");
            each f.fields { f | 
                @fmt(out, "%,", self.pool.get(f._0));
            };
        }
        fn Named(f) => out.push_all(self.pool.get(f._1));
        fn Fn(f) => {
            out.push_all("(fn(");
            self.log_type_inner(safe_rec, out, f.arg);
            out.push_all(")");
            self.log_type_inner(safe_rec, out, f.ret);
            @fmt(out, "#arity(%))", f.arity);
        }
        fn FnPtr(f) => {
            out.push_all("(&fn(");
            self.log_type_inner(safe_rec, out, f.ty.arg);
            out.push_all(")");
            self.log_type_inner(safe_rec, out, f.ty.ret);
            @fmt(out, "#arity(%))", f.ty.arity);
        }
        fn Label(f) => {
            out.push_all("Label(");
            self.log_type_inner(safe_rec, out, f[]);
            out.push_all(")");
        }
        fn Int(int) => {
            @fmt(out, "%%", if(int.signed, => "i", => "u"), int.bit_count);
        }
        fn Array(f) => {
            out.push_all("Array(");
            self.log_type_inner(safe_rec, out, f.inner);
            @fmt(out, ", %)", f.len);
        }
    };
    safe_rec.unset(ty.as_index());
}

fn log_name(self: *SelfHosted, fid: FuncId) Str = {
    func := self.get_function(fid);
    self.pool.get(func.name)
}

fn display(self: *FuncId, out: *List(u8)) void = {
    @fmt(out, "F%", self[].as_index());
}
fn display(self: FuncId, out: *List(u8)) void = {
    @fmt(out, "F%", self.as_index());
}
fn display(self: *BbId, out: *List(u8)) void = {
    @fmt(out, "B%", self.id);
}
fn display(self: *OverloadSet, out: *List(u8)) void = {
    @fmt(out, "OS%", self[].as_index());
}
fn display(self: OverloadSet, out: *List(u8)) void = {
    @fmt(out, "OS%", self.as_index());
}
fn display(self: *u16, out: *List(u8)) void = {
    @fmt(out, "%", @as(i64)self[].zext());
}