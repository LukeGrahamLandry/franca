
fn log(self: *FatExpr, pool: *StringPool, out: *List(u8), depth: i64) void = {
    @match(self.expr&) {
        (fn Call(f) => {
            f.f.log(pool, out, depth);
            out.push_all("(");
            f.arg.log(pool, out, depth);
            out.push_all(")");
        });
        (fn GetNamed(i) => {
            out.push_all(pool.get(i[]));
        });
        (fn String(i) => {
            @fmt(out, "\"%\"", pool.get(i[]));
        });
        (fn Block(f) => {
            out.push_all("{\n");
            each (f.body.items()) {s|
                s.log(pool, out, depth.add(1));
            };
            out.indent_by(depth.add(1));
            f.result.log(pool, out, depth.add(1));
            out.indent_by(depth);
            out.push_all("\n}");
        });
        (fn Tuple(args) => {
            out.push_all("(");
            each (args.items()) {arg|
                arg.log(pool, out, depth);
                out.push_all(",");
            };
            out.push_all(")");
        });
        (fn Value(value) => {
            // TODO: if we had access to the compiler here we could do fancy printing
            @match(value.bytes) {
                fn Small(f) => {@fmt(out, "<<value:%>>", f._0); };
                fn Big(f)   => {@fmt(out, "<<value, % bytes>>", f.len); };
            };
        });
        (fn GetVar(v) => {
            out.push_all(pool.get(v.name));
            out.push_all("%");
            @fmt(out, "%", v.id);
        });
        (fn Closure(f) => {
            f[].log(pool, out, depth);
        });
        (fn SuffixMacro(f) => {
            f.arg.log(pool, out, depth);
            @fmt(out, "!%", pool.get(f.name));
        });
        (fn StructLiteralP(pattern) => {
            pattern.log(pool, out, depth);
        });
        (fn FieldAccess(f) => {
            f.container.log(pool, out, depth);
            @fmt(out, ".%", pool.get(f.name));
        });
        (fn PrefixMacro(f) => {
            out.push_all("(@(");
            f.handler.log(pool, out, depth);
            out.push_all(")(");
            f.arg.log(pool, out, depth);
            out.push_all(") ");
            f.target.log(pool, out, depth);
            out.push_all(")");
        });
        (fn PtrOffset(f) => {
            @fmt(out, "<<offset %>> ", f.bytes);
            f.ptr.log(pool, out, depth);
        });
        (fn Cast(inner) => {
            out.push_all("<<cast>> ");
            inner[].log(pool, out, depth);  
        });
        (fn GetParsed(f) => {
            @fmt(out, "<<GetParsed %>> ", f.id);
        });
        @default => out.push_all("ICE:???");
    };
} 

fn log(self: *Func, pool: *StringPool, out: *List(u8), depth: i64) void = {
    out.push_all("(fn ");
    out.push_all(pool.get(self.name));
    self.arg&.log(pool, out, 0);
    out.push_all(" ");
    self.ret&.log(pool, out, 0);
    each self.annotations {a|
        out.push_all(" ");
        a.log(pool, out, 0);
    };
    out.push_all(" = ");
    
    @if_let(self.body&)
        fn Normal(body) => {
            body.log(pool, out, depth);
        };
    
    out.push_all(")");
    
}

fn log(self: *Annotation, pool: *StringPool, out: *List(u8), depth: i64) void = {
    out.push_all("#");
    out.push_all(pool.get(self.name));
    ::?*FatExpr; ::as_ref(FatExpr);
    if(self.args&.as_ref()){expr|
        out.push_all("(");
        expr.log(pool, out, depth);
        out.push_all(")");
    };
}

fn log(self: *Pattern, pool: *StringPool, out: *List(u8), depth: i64) void = {
    out.push_all("(");
    each (self.bindings.items()) {b|
        b.log(pool, out, depth);
        out.push_all(",");
    };
    out.push_all(")");
}

fn log(self: *Binding, pool: *StringPool, out: *List(u8), depth: i64) void = {
    @match(self.name) {
        (fn Ident(name) => out.push_all(pool.get(name)));
        (fn Var(v) => out.push_all(pool.get(v.name)));
        (fn None() => out.push_all("_"));
    };
    out.push_all(": "); // TODO
    self.ty&.log(pool, out, depth);
    ::as_ref(FatExpr); // TODO: cant do by value because it gets the wrong arity for the lambda???
    if self.default&.as_ref() {e: *FatExpr|
        out.push_all(" = ");
        e.log(pool, out, depth);
    };
}

fn log(v: *Var, pool: *StringPool, out: *List(u8), depth: i64) void = {
    out.push_all(pool.get(v.name));
}

fn log(self: *LazyType, pool: *StringPool, out: *List(u8), depth: i64) void = {
    @match(self) {
        (fn PendingEval(e) => { e.log(pool, out, depth); });
        (fn Infer() => out.push_all("_"));
        (fn Finished(ty) => {
            @fmt(out, "Ty%", ty[].to_index());
        });
        @default => out.push_all("<TODO>");
    };
}

fn indent_by(out: *List(u8), depth: i64) void = {
    range(0, depth) {i|
        out.push_all("  "); 
    };
}

fn log(self: *FatStmt, pool: *StringPool, out: *List(u8), depth: i64) void = {
    out.indent_by(depth);
    
    each self.annotations {a|
        out.push_all(" ");
        a.log(pool, out, depth);
    };
    
    @match(self.stmt&) {
        (fn Noop() => {
            out.push_all(";\n");
        });
        (fn Eval(expr) => {
            expr.log(pool, out, depth);
            out.push_all(";\n");
        });
        (fn DeclNamed(f) => {
            // TODO: kind and ty
            out.push_all(pool.get(f.name));
            out.push_all(": ");
            f.ty&.log(pool, out, depth);
            if eq(@as(i64) f.kind, @as(i64) VarType.Const) {|
                out.push_all(" : ");
            }{|
                out.push_all(" = ");
            };
            f.value&.log(pool, out, depth);
            out.push_all(";\n");
        });
        (fn Set(f) => {
            f.place&.log(pool, out, depth);
            out.push_all(" = ");
            f.value&.log(pool, out, depth);
            out.push_all(";\n");
        });
        (fn DeclFunc(f) => {
            f[].log(pool, out, depth);
        });
        (fn DeclVar(f) => {
            // TODO: kind and ty
            out.push_all(pool.get(f.name.name));
            out.push_all("%");
            @fmt(out, "%", f.name.id);
            out.push_all(": ");
            f.ty&.log(pool, out, depth);
            if eq(@as(i64) f.name.kind, @as(i64) VarType.Const) {|
                out.push_all(" : ");
            }{|
                out.push_all(" = ");
            };
            f.value&.log(pool, out, depth);
            out.push_all(";\n");
        });
        @default => out.push_all("ICE:???");
    }
}

fn HasLog($T: Type) void = {
    fn log(self: *T, pool: *StringPool) Str = {
        out: List(u8) = list(temp());
        self.log(pool, out&, 0);
        out.items()
    }
}

:: {
    HasLog(FatStmt);
    HasLog(FatExpr);
    HasLog(LazyType);
    HasLog(Var);
};

///////////////////////////
// TODO: should try to clean these up.


// TODO: allow taking span as arg? take compiler as arg to put last loc? 
fn error(arg: FatExpr) FatExpr #macro = {
    if !arg.expr&.is(.Tuple) {|
        return(@{ (Err = (span = Span.zeroed(), msg = @[arg])) });
    };
    @{
        out: List(u8) = list(temp());
        @[ format_into('out&', arg.expr.Tuple.items(), arg.loc) ];
        (Err = (span = Span.zeroed(), msg = out.items()))
    }
}

// @err_assert(cond, "msg %", 123) return;
fn err_assert(arg: FatExpr, ret: FatExpr) FatExpr #macro = {
    loc := arg.loc;
    arg := compile_ast(arg);
    arg_err :: "@assert expected '(cond, fmt_string, args)'";
    if arg.ty == bool {|
        arg = compile_ast(@{ (@[arg], "Assertion Failed") });
    };
    @ct_assert(arg.expr&.is(.Tuple), loc, arg_err);
    parts := arg.expr.Tuple.items();
    @ct_assert(parts.len >= 2, loc, arg_err);
    @ct_assert(parts[1].ty == Str, loc, arg_err);
    
    if parts.len == 2 {|
        @{ 
            if !@[parts[0]] {|
                @[ret](@error(@[parts[1]]));
            };
        }
    } {|
        cond := parts[0];
        @{
            if(!@[cond]){|
                out: List(u8) = list(temp());
                out&.push_all("Assertion Failed: ");
                @[format_into('out&', parts.rest(1), arg.loc)];
                @[ret](@error(out.items()));
            };
        }
    }
}


fn unwrap(arg: FatExpr, ret: FatExpr) FatExpr #macro = {
    loc := arg.loc;
    arg := compile_ast(arg);
    arg_err :: "@assert expected '(nullable, fmt_string, args)'";
    @ct_assert(arg.expr&.is(.Tuple), loc, arg_err);
    parts := arg.expr.Tuple.items();
    @ct_assert(parts.len >= 2, loc, arg_err);
    @ct_assert(parts[1].ty == Str, loc, arg_err);
    
    @{
        cond := @[parts[0]];
        if cond&.is_none() {|
            out: List(u8) = list(temp());
            out&.push_all("Missing Value: ");
            // TODO: format_into should cope with length 1 just printing the string (and assert no % signs).
            @[if parts.len == 2 {|
                @{ out&.push_all(@[parts[1]]) }
            } else {|
                format_into('out&', parts.rest(1), arg.loc)
            }];
            @[ret](@error(out.items()));
        };
        cond.unwrap()
    }
}
