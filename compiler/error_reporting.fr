:: enum(PlaceholderValue);
fn log(self: *FatExpr, pool: *SelfHosted, out: *List(u8), depth: i64) void = {
    @if(BOOTSTRAP_ONLY_MODE) return();
    
    @if(ENABLE_ASK_OWNERSHIP) {
        stack_base := 0;
        bad := pool.get_alloc().owns_memory(FatExpr, self) == .No;
        bad = bad && temp().owns_memory(FatExpr, self) == .No;
        top := i64.int_from_ptr(stack_base&);
        // TODO: stack shouldn't be accepted really. could allow the first call to be stack but inner pointers really can't be.      
        on_stack := false;
        bad = bad && !{ // not
            ptr := FatExpr.int_from_ptr(self);
            on_stack = ptr >= top && ptr <= pool.stack_base; // stack grows down!
            on_stack
        };
        if bad { 
            @fmt(out, "[bad expr ptr %]", FatExpr.int_from_ptr(self));
            return(); 
        };
        if on_stack {
            out.push_all("[stack expr ptr]:");
        };
    };
    
    if out.len > 2048 {
        out.push_all("<...>");
        return();
    };
    
    @if(DO_TERMINAL_COLOURS) {
        if self.done {
            set_colour(out, 0, 250, 0);
        } else {
            if self.ty.is_unknown() {
                set_colour(out, 250, 0, 0);
            } else {
                set_colour(out, 250, 250, 0);
            }
        };
        out.push_all("[");
        unset_colour(out);
    };
    @match(self.expr&) {
        fn Call(f) => {
            f.f.log(pool, out, depth);
            out.push_all("(");
            f.arg.log(pool, out, depth);
            out.push_all(")");
        }
        fn GetNamed(i) => {
            out.push_all(pool.pool.get(i[]));
        }
        fn String(i) => {
            @fmt(out, "\"%\"", pool.pool.get(i[]));
        }
        fn Block(f) => {
            out.push_all("{\n");
            each (f.body.items()) {s|
                s.log(pool, out, depth.add(1));
            };
            out.indent_by(depth.add(1));
            f.result.log(pool, out, depth.add(1));
            out.indent_by(depth);
            out.push_all("\n}");
        }
        fn Tuple(args) => {
            out.push_all("(");
            each (args.items()) {arg|
                arg.log(pool, out, depth);
                out.push_all(",");
            };
            out.push_all(")");
        }
        fn Value(value) => {
            value.bytes&.log(pool, out, self.ty);
        }
        fn GetVar(v) => {
            out.push_all(pool.pool.get(v.name));
            out.push_all("%");
            @fmt(out, "%", v.id);
        }
        fn Closure(f) => {
            f[].log(pool, out, depth);
        }
        fn StructLiteralP(pattern) => {
            pattern.log(pool, out, depth);
        }
        fn FieldAccess(f) => {
            f.container.log(pool, out, depth);
            @fmt(out, ".%", pool.pool.get(f.name));
        }
        fn PrefixMacro(f) => {
            out.push_all("(@(");
            f.handler.log(pool, out, depth);
            out.push_all(")(");
            f.arg.log(pool, out, depth);
            out.push_all(") ");
            f.target.log(pool, out, depth);
            out.push_all(")");
        }
        fn PtrOffset(f) => {
            f.ptr.log(pool, out, depth);
            @fmt(out, ".ptr_offset(%, %)", f.bytes, pool.pool.get(f.name));
        }
        fn Cast(inner) => {
            @fmt(out, "<<cast (%) <- (%)>>", pool.log_type(self.ty), pool.log_type(inner.ty));
            //out.push_all("<<cast>> ");
            inner[].log(pool, out, depth);  
        }
        fn GetParsed(f) => {
            @fmt(out, "<<GetParsed %>> ", f.id);
        }
        fn ConstEval(inner) => {
            out.push_all("<<const>> ");
            inner[].log(pool, out, depth);  
        }
        fn Addr(inner) => {
            inner[].log(pool, out, depth);  
            out.push_all("&");
        }
        fn Deref(inner) => {
            inner[].log(pool, out, depth);  
            out.push_all("[]");
        }
        fn Poison(placeholder) => {
            @fmt(out, "%", placeholder);
        }
        fn ContextualField(name) => {
            @fmt(out, ".%", pool.pool.get(name[]));
        }
        fn If(f) => {
            out.push_all("@if(");
            f.cond.log(pool, out, depth);  
            out.push_all(", ");
            f.if_true.log(pool, out, depth);  
            out.push_all(", ");
            f.if_false.log(pool, out, depth);  
            out.push_all(")");
        }
        fn Slice(inner) => {
            out.push_all("@slice(");
            inner[].log(pool, out, depth);  
            out.push_all(")");
        }
        fn Switch(f) => {
            @fmt(out, "(@switch(");
            f.value.log(pool, out, depth);  
            @fmt(out, ")\n");
            each f.cases { f | 
                @fmt(out, "% => ", f._0);
                f._1&.log(pool, out, depth);  
                @fmt(out, "\n");
            };
            @fmt(out, "@default => ");
            f.default.log(pool, out, depth);  
            @fmt(out, ")\n");
        }
        fn Loop(body) => {
            @fmt(out, "(@loop(");
            body[].log(pool, out, depth);  
            @fmt(out, ")\n");
        }
        fn FnPtr(inner) => {
            out.push_all("<<fnptr>> ");
            inner[].log(pool, out, depth);  
        }
        fn Quote(inner) => {
            out.push_all("@{\n");
            inner[].log(pool, out, depth + 1);  
            out.push_all("\n}");
        }
        fn Unquote(inner) => {
            out.push_all("@[\n");
            inner[].log(pool, out, depth + 1);  
            out.push_all("\n]");
        }
        fn UndeclaredVar(it) => {
            @fmt(out, "Undeclared Variable '%' in S%", pool.pool.get(it.name), it.scope.id());
        }
        @default => {
            @fmt(out, "TODO:print:%", self.expr&.tag());
        };
    };
    @if(DO_TERMINAL_COLOURS) {
        if self.done {
            set_colour(out, 0, 250, 0);
        } else {
            if self.ty.is_unknown() {
                set_colour(out, 250, 0, 0);
            } else {
                set_colour(out, 250, 250, 0);
            }
        };
        out.push_all("]");
        unset_colour(out);
    };
} 

fn log(values: *Values, self: *SelfHosted, ty: Type) Str = {
    out: List(u8) = list(temp());
    log(values, self, out&, ty);
    out.items()
}

// :get_or_create_type
fn log(values: *Values, self: *SelfHosted, out: *List(u8), ty: Type) void = {
    @if(BOOTSTRAP_ONLY_MODE) return();
    @fmt(out, "V:");
    if ty == UnknownType {
        @fmt(out, "[UnknownType]%", values);
        return();
    };
    info := self.get_type(ty);
    meta := self.get_info(ty);
    if meta.is_sized && values.len() != meta.stride_bytes.zext() {
        @fmt(out, "[SIZE MISMATCH FOR %]%", self.log_type(ty), values);
        return();
    };
    
    show_func :: fn() => {
        f_id := FuncId.assume_cast(values)[];
        func := self.get_function(f_id);
        msg := @fmt(out, "F%_%", f_id.as_index(), self.pool.get(func.name));
        return();
    };
    show_label :: fn() => {
        l := LabelId.assume_cast(values)[];
        @fmt(out, "L%", l.as_index());
        return();
    };
    @match(info) {
        fn Fn(f) => show_func();
        fn Int(int) => {
            @if_let(int_value(values, int[])) fn Ok(i) => {
                msg := @fmt(out, "%", i);
                return();
            };
        }
        fn Label() => show_label();
        @default => ();
    };
    if ty == FuncId {
        show_func();
    };
    if ty == LabelId {
        show_label();
    };
    if ty == void {
        msg := @fmt(out, "()");
        return();
    };
    
    if ty == OverloadSet {
        os := OverloadSet.assume_cast(values)[];
        idx := os.as_index();
        overloads := self.dispatch.overloads&;
        name := if idx < overloads.len {
            data := overloads.nested_index(idx);
            self.pool.get(data.name)
        } else {
            "INVALID"
        };
        @fmt(out, "OS%_%", os.as_index(), name);
        return();
    };
    
    if ty == bool {
        b := bool.assume_cast(values)[];
        @fmt(out, "%", b);
        return();
    };
    
    if ty == Type {
        type := Type.assume_cast(values)[];
        @fmt(out, "%", self.log_type(type));
        return();
    };
    
    if ty == f64 {
        b := f64.assume_cast(values)[];
        @fmt(out, "%f", b);
        return();
    };
    
    if ty == f32 {
        b := f32.assume_cast(values)[];
        @fmt(out, "%f", b);
        return();
    };
    
    if self.env.fat_expr_type { fat_expr | 
        if ty == fat_expr {
            expr := FatExpr.assume_cast(values);
            @fmt(out, "%", expr.log(self));
            return();
        };
    };
    
    // if we don't know how to draw this type, just fall back to something useless
    @fmt(out, "%", values);
}

fn display(value: *Values, out: *List(u8)) void = {
    @if(BOOTSTRAP_ONLY_MODE) return();
    @match(value) {
        fn Small(f) => {@fmt(out, "<<%>>", f._0); };
        fn Big(f)   => {
            @fmt(out, "<<% bytes: [ ", f.len);
            for f { b | 
                @fmt(out, "% ", b);
            };
            @fmt(out, "]>>");
        };
    };
}

fn log(self: *Func, pool: *SelfHosted, out: *List(u8), depth: i64) void = {
    @if(BOOTSTRAP_ONLY_MODE) return();
    out.push_all("(fn ");
    out.push_all(pool.pool.get(self.name));
    self.arg&.log(pool, out, 0);
    out.push_all(" ");
    self.ret&.log(pool, out, 0);
    each self.annotations {a|
        out.push_all(" ");
        a.log(pool, out, 0);
    };
    out.push_all(" = ");
    self.body&.log(pool, out, depth);
    out.push_all(")");
}

fn log(self: *FuncImpl, pool: *SelfHosted, out: *List(u8), depth: i64) void = {
    @if(BOOTSTRAP_ONLY_MODE) return();
    @match(self) {
        fn Normal(body) => body.log(pool, out, depth);
        fn Intrinsic(op) => {
            ::enum(Intrinsic);
            @fmt(out, "Intrinsic:%", op.bc);
        }
        fn ComptimeAddr(addr) => {
            @fmt(out, "ComptimeAddr:%", addr);
        }
        fn Redirect(target) => {
            @fmt(out, "Redirect:%", target);
        }
        fn DynamicImport(target) => {
            @fmt(out, "DynamicImport:%", pool.pool.get(target[]));
        }
        fn Merged(parts) => {
            each parts { part | 
                @fmt(out, "[ ");
                part.log(pool, out, depth);
                @fmt(out, "] ");
            };
        }
        @default => {
            @fmt(out, "%", self.tag());
        };
    }
    
}
fn log(self: *Annotation, pool: *SelfHosted, out: *List(u8), depth: i64) void = {
    @if(BOOTSTRAP_ONLY_MODE) return();
    out.push_all("#");
    out.push_all(pool.pool.get(self.name));
    ::?*FatExpr; ::as_ref(FatExpr);
    if(self.non_void_arg()){expr|
        out.push_all("(");
        expr.log(pool, out, depth);
        out.push_all(")");
    };
}

fn log(self: *Pattern, pool: *SelfHosted, out: *List(u8), depth: i64) void = {
    @if(BOOTSTRAP_ONLY_MODE) return();
    out.push_all("(");
    each (self.bindings.items()) {b|
        b.log(pool, out, depth);
        out.push_all(",");
    };
    out.push_all(")");
}

fn log(self: *Binding, pool: *SelfHosted, out: *List(u8), depth: i64) void = {
    @if(BOOTSTRAP_ONLY_MODE) return();
    @match(self.name) {
        fn Ident(name) => out.push_all(pool.pool.get(name));
        fn Var(v) => v&.log(pool, out, depth);
        fn None() => out.push_all("_");
    };
    out.push_all(": "); // TODO
    self.ty&.log(pool, out, depth);
    ::as_ref(FatExpr); // TODO: cant do by value because it gets the wrong arity for the lambda???
    c := self.get_default();
    if c {e: *FatExpr|
        out.push_all(" = ");
        e.log(pool, out, depth);
    };
}

fn log(self: *SelfHosted, v: Var) Str = {
    out := u8.list(temp());
    log(v&, self, out&, 0);
    out.items()
}

fn log(v: *Var, pool: *SelfHosted, out: *List(u8), depth: i64) void = {
    @if(BOOTSTRAP_ONLY_MODE) return();
    @fmt(out, "%%%%%", pool.pool.get(v.name), "%", v.id, "%", v.scope.id());
}

fn log(self: *LazyType, pool: *SelfHosted, out: *List(u8), depth: i64) void = {
    @if(BOOTSTRAP_ONLY_MODE) return();
    @match(self) {
        (fn PendingEval(e) => { e.log(pool, out, depth); });
        (fn Infer() => out.push_all("_"));
        (fn Finished(ty) => {
            @fmt(out, "Ty%", ty[].to_index());
        });
        (fn Generic(v) => {
            @fmt(out, "~");
            v.log(pool, out, depth);
        });
        @default => out.push_all("<TODO>");
    };
}

fn indent_by(out: *List(u8), depth: i64) void = {
    range(0, depth) {i|
        out.push_all("  "); 
    };
}

fn log(self: *FatStmt, pool: *SelfHosted, out: *List(u8), depth: i64) void = {
    @if(BOOTSTRAP_ONLY_MODE) return();
    out.indent_by(depth);
    
    @match(self.stmt&) {
        (fn Noop() => {
            out.push_all(";\n");
        });
        (fn Eval(expr) => {
            expr.log(pool, out, depth);
            out.push_all(";\n");
        });
        (fn Set(f) => {
            f.place&.log(pool, out, depth);
            out.push_all(" = ");
            f.value&.log(pool, out, depth);
            out.push_all(";\n");
        });
        (fn DeclFunc(f) => {
            f[].log(pool, out, depth);
        });
        (fn Decl(f) => {
            f[].log(pool, out, depth);
            out.push_all(";\n");
        });
        (fn DeclVarPattern(f) => {
            @fmt(out, "TODO:DeclVarPattern := ");
            f.value&.log(pool, out, depth);
            @fmt(out, ";\n");
        });
        @default => {
            @fmt(out, "TODO:print:%\n", self.stmt&.tag());
        };
    }
}

fn HasLog($T: Type) void = {
    fn log(self: *T, pool: *SelfHosted) Str = {
        out: List(u8) = list(temp());
        self.log(pool, out&, 0);
        out.items()
    }
}

:: {
    HasLog(FatStmt);
    HasLog(FatExpr);
    HasLog(LazyType);
    HasLog(Var);
    HasLog(Func);
};

fn log_type(self: *SelfHosted, ty: Type) Str = {
    safe_rec: DynamicBitSet = empty(temp());
    out: List(u8) = list(temp()); 
    self.log_type_inner(safe_rec&, out&, ty);
    out.items()
}

// TODO: allow people to ask for the giant description instead of just name in debug_log_type
fn log_type_inner(self: *SelfHosted, safe_rec: *DynamicBitSet, out: *List(u8), ty: Type) void = {
    @if(BOOTSTRAP_ONLY_MODE) return();
    
    // TODO: this needs to not do it when it has generic parameters because it hides information. 
    if self.get_info_is_ready(ty) {
        info := self.get_info(ty);
        n := info.inferred_name.id();
        min := Flag.first_dumb_type_name.ident().id();
        max := Flag.last_dumb_type_name.ident().id();
        // TODO: probably better is to not stomp the name if its a dumb one? 
        if info.inferred_name != Flag.SYMBOL_ZERO.ident() && (n < min || n > max) {
            s := self.pool.get(info.inferred_name);
            if s.len > 1 { // HACK, unhelpful generics are often T. TODO: track more information about where stuff came from.
                @fmt(out, "%", s);
                return();
            };
        };
    };
    if safe_rec.get(ty.as_index()) {
        @fmt(out, "TY%", ty.as_index());
        return();
    };
    safe_rec.set(ty.as_index());

    @match(self.get_type(ty)) {
        fn Placeholder() => {
            if ty == UnknownType {
                @fmt(out, "-?-");
                
            } else {
                @fmt(out, "UnfinishedPlaceHolder%", ty.as_index());
            };
        }
        fn Never() => out.push_all("Never");
        fn F64()   => out.push_all("f64");
        fn F32()   => out.push_all("f32");
        fn Bool()  => out.push_all("bool");
        fn void()  => out.push_all("void");
        fn VoidPtr() => out.push_all("rawptr");
        fn Ptr(inner)  => {
            out.push_all("*");
            self.log_type_inner(safe_rec, out, inner[]);
        }
        fn Struct(f) => {
            out.push_all(if(f.is_union, => "@union(", => "@struct("));
            each f.fields { f | 
                @fmt(out, "%: ", self.pool.get(f.name));
                self.log_type_inner(safe_rec, out, f.ty);
                out.push_all(",");
            };
            out.push_all(")");
        }
        fn Tagged(f) => {
            out.push_all("@tagged(");
            each f.cases { f | 
                @fmt(out, "%: ", self.pool.get(f._0));
                self.log_type_inner(safe_rec, out, f._1);
                out.push_all(",");
            };
            out.push_all(")");
        }
        fn Enum(f) => {
            self.log_type_inner(safe_rec, out, f.raw);
            out.push_all(":");
            each f.fields { f | 
                @fmt(out, "%,", self.pool.get(f._0));
            };
        }
        fn Named(f) => out.push_all(self.pool.get(f._1));
        fn Fn(f) => {
            out.push_all("(fn(");
            self.log_type_inner(safe_rec, out, f.arg);
            out.push_all(")");
            self.log_type_inner(safe_rec, out, f.ret);
            @fmt(out, "#arity(%))", f.arity);
        }
        fn FnPtr(f) => {
            out.push_all("(&fn(");
            self.log_type_inner(safe_rec, out, f.ty.arg);
            out.push_all(")");
            self.log_type_inner(safe_rec, out, f.ty.ret);
            @fmt(out, "#arity(%))", f.ty.arity);
        }
        fn Label(f) => {
            out.push_all("Label(");
            self.log_type_inner(safe_rec, out, f[]);
            out.push_all(")");
        }
        fn Int(int) => {
            @fmt(out, "%%", if(int.signed, => "i", => "u"), int.bit_count);
        }
        fn Array(f) => {
            out.push_all("Array(");
            self.log_type_inner(safe_rec, out, f.inner);
            @fmt(out, ", %)", f.len);
        }
    };
    safe_rec.unset(ty.as_index());
}

fn log_name(self: *SelfHosted, fid: FuncId) Str = {
    @if(BOOTSTRAP_ONLY_MODE) return("");
    func := self.get_function(fid);
    self.pool.get(func.name)
}

fn display(self: *OverloadSet, out: *List(u8)) void = {
    @fmt(out, "OS%", self[].as_index());
}
fn display(self: OverloadSet, out: *List(u8)) void = {
    @fmt(out, "OS%", self.as_index());
}


fn log(action: *Action, self: *SelfHosted) Str = {
    out: List(u8) = list(100, temp());
    action.log(self, out&);
    out.items()
}

fn log(action: *Action, self: *SelfHosted, out: *List(u8)) void = {
    @if(BOOTSTRAP_ONLY_MODE) return();
    @match(action) {
        fn EvalConstant(v) => {
            @fmt(out, "EvalConstant:");
            v.name&.log(self, out, 0);
        };
        fn CompileBody(f_id)   => {
            func := self.get_function(f_id[]);
            @fmt(out, "CompileBody:F%_%", f_id[].as_index(), self.pool.get(func.name));
        }
        fn Jit(f_id) => {
            func := self.get_function(f_id[]);
            @fmt(out, "Jit:F%_%", f_id[].as_index(), self.pool.get(func.name));
        }
        fn FinishRecType(it)  => {
            @fmt(out, "FinishRecType:%", it.hole.as_index());
        }
        fn ResolveOverload(it)  => {
            data := self.dispatch.overloads&.nested_index(it.os.as_index());
            @fmt(out, "ResolveOverload:OS%_%", it.os.as_index(), self.pool.get(data.name));
        }
        fn All(tasks) => {
            @fmt(out, "All:[len=%]", tasks.len);
        }
    };
}

// TODO: tell you if if forgot return type
fn report_missing_overload(self: *SelfHosted, parts: []FatExpr, overloads: *OverloadSetData, requested: ResultType) Maybe(FuncId) #cold = {
    buf: List(u8) = list(temp());
    @fmt(buf&, "(");
    each parts { part |
        if part.ty.is_unknown() {
            @fmt(buf&, "???, ");
        } else {
            @fmt(buf&, "%, ", self.log_type(part.ty));
        };
    };
    @fmt(buf&, ") -> ");
    @match(requested) {
        fn Specific(type) => {
            @fmt(buf&, "%, ", self.log_type(type));
        }
        @default => {   
            @fmt(buf&, "???, ");
        };
    };
    return(@err("overload not found in '%'\nwanted: %", self.pool.get(overloads.name), buf.items()))
}

unwrap_report_error :: fn(self: *SelfHosted, $T: Type, value: Res(T)) T #generic = {
    @match(value&) {
        fn Ok(it) => it[];
        fn Err(it) => self.report_error(it[]);
    }
};

fn fmt_error(self: *SelfHosted, err: *CompileError, out: *List(u8)) void = {
    @if(BOOTSTRAP_ONLY_MODE) return();
    
    err.update_main_span(self.last_loc);
    @match(err) {
        fn Msg(it) => {
            self.codemap.fmt_error_line(it.span, out);
            @fmt(out, "Compile Error: %", it.msg);
        };
        fn ExpectedCompileError(loc) => {
            self.codemap.fmt_error_line(loc[], out);
            @fmt(out, "Compile Error: @assert_compile_error did not find compile error");
        }
        fn Parse(it) => {
            self.codemap.fmt_error_line(it.span, out);
            @fmt(out, "Parse Error: %", it.msg);
        }
        fn TypeMismatch(it) => {
            // TODO: if it was in matching arguments, just report the problem fields. 
            //       for all tuples i guess since we know they're structural. 
            //       bring back the nicer detailed printing i had for a bit in rust. 
            self.codemap.fmt_error_line(it.span, out);
            want := self.get_type(it.wanted);
            found := self.get_type(it.found);
            if want.is(.Struct) && found.is(.Struct) {
                want := want.Struct&;
                found := found.Struct&;
                if want.fields.len == found.fields.len && want.is_tuple && found.is_tuple {
                    @fmt(out, "Type Error:\n");
                    range(0, want.fields.len) { i | 
                        w, f := (want.fields[i].ty, found.fields[i].ty);
                        if w == f {
                            @fmt(out, "[%] identical: %\n", i, self.log_type(w));
                        } else {
                            @fmt(out, "[%] % vs %\n", i, self.log_type(w), self.log_type(f));
                        };
                    };
                    @fmt(out, "Or we selected totally the wrong overload.\n");
                    return();
                };
                // fallthrough
            };
            @fmt(out, "Type Error: expected % but found %", self.log_type(it.wanted), self.log_type(it.found));
        }
        fn CoerceConst(it) => {
            self.codemap.fmt_error_line(it.span, out);
            @fmt(out, 
                "Type Error: expected % but found %\nWhile coercing constant: %", 
                self.log_type(it.wanted), self.log_type(it.found), it.expr.log(self)
            );
        }
        fn InvalidField(it) => {
            self.codemap.fmt_error_line(it.span, out);
            extra := if(self.has_fields(it.container), => "", => "\nbut only structs/enums support field access");
            @fmt(out, 
                "Type Error: expected field % on type % %", 
                self.pool.get(it.name), self.log_type(it.container), extra,
            );
        }
    };
}

fn report_error2(self: *SelfHosted, err: CompileError) Never = self.report_error(err&);

fn report_error(self: *SelfHosted, err: *CompileError) Never = {
    @if(BOOTSTRAP_ONLY_MODE) panic("error");
    maybe_log_scopes(self);
    out: List(u8) = list(temp());
    self.fmt_error(err, out&);
    panic(out.items())
}

fn has_fields(self: *SelfHosted, ty: Type) bool = {
    raw_container_ty := self.raw_type(ty);
    @is(self.get_type(raw_container_ty), .Struct, .Tagged)
}

fn show_error_line(self: *CodeMap, span: Span) void = {
    out: List(u8) = list(temp());
    self.fmt_error_line(span, out&);
    println(out.items());
}

fn maybe_log_scopes(self: *SelfHosted) void = {
    n := "FRANCA_COMPILER_DEBUG_LOG_SCOPES";
    n := n.maybe_borrow_cstr(temp());
    path := getenv(n);
    if !path.ptr.is_null() {
        eprintln("logging scopes...");
        out := u8.list(temp());
        out&.push_all("SCOPES:\n\n");
        each self.scopes.scopes& { scope | 
            scope.visit = 0;
        };
        enumerate self.scopes.scopes& { i, scope | 
            scope.visit = self.scopes[scope.parent].visit + 1;
            line := self.codemap.get_whole_line(scope.loc);
            @fmt(out&, "%- [S%] %:%:% ", f_rep("  ", scope.visit), i, line.filename, line.line, line.col);
            @fmt(out&, " parent = (S%) ", scope.parent.id());
            use := get_use(self, scope_from_index(i.trunc()));
            if use.parents.len > 0 {
                @fmt(out&, ", #use[");
                each use.parents { use |
                    @match(use.who&) {
                        fn Scope(it) => @fmt(out&, "(S%), ", it[].id());
                        fn PendingEval(it) => @fmt(out&, "%%%, ", self.pool.get(it.name), "%", it.id);
                    };
                };
                @fmt(out&, "]",);
            };
            @fmt(out&, "\n%  %\n", f_rep("  ", scope.visit), self.codemap.source_slice(line.line_text));
            if scope.const_lookup.raw.len_including_tombstones > 0 {
                @fmt(out&, "%   - CONSTANTS: \n%    [", f_rep("  ", scope.visit), f_rep("  ", scope.visit));
                each scope.const_lookup& { k, v |
                    @fmt(out&, "%, ", self.log(v[]));
                };
                @fmt(out&, "]\n");
            };
            if scope.vars.len > 0 {
                @fmt(out&, "%   - VARIABLES: \n%    [", f_rep("  ", scope.visit), f_rep("  ", scope.visit));
                each scope.vars& { v |
                    if v.kind != .Const {
                        @fmt(out&, "%, ", self.log(v[]));
                    };
                };
                @fmt(out&, "]\n");
            };
            @fmt(out&, "\n");
        };
        @fmt(out&, "\n\n\n\n!!!!PART2:\n\n\n");
        i := 0;
        each self.scopes.types& { t |
            @fmt(out&, "- (%%%): %\n", self.pool.get(t.debug_name), "%", i, self.log_type(t.type));
            i += 1;
        };
        
        write_entire_file(path.str(), out.items());
    };
};
