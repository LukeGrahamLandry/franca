

fn log(self: *FatExpr, pool: *StringPool, out: *List(u8), depth: i64) void = {
    @match(self.expr&) {
        (fn Call(f) => {
            f.f.log(pool, out, depth);
            out.push_all("(");
            f.arg.log(pool, out, depth);
            out.push_all(")");
        });
        (fn GetNamed(i) => {
            out.push_all(pool.get(i[]));
        });
        (fn String(i) => {
            @fmt(out, "\"%\"", pool.get(i[]));
        });
        (fn Block(f) => {
            out.push_all("{\n");
            each (f.body.items()) {s|
                s.log(pool, out, depth.add(1));
                out.push_all(",");
            };
            // TODO: Indent
            f.result.log(pool, out, depth);
            // TODO: Indent
            out.push_all("\n}");
        });
        (fn Tuple(args) => {
            out.push_all("(");
            each (args.items()) {arg|
                arg.log(pool, out, depth);
                out.push_all(",");
            };
            out.push_all(")");
        });
        (fn Value(value) => out.push_all("<<value>>"));
        (fn GetVar(v) => out.push_all(pool.get(v.name)));
        (fn Closure(f) => {
            @fmt(out, "closure(fn %)", pool.get(f.name));
        });
        (fn SuffixMacro(f) => {
            f.arg.log(pool, out, depth);
            @fmt(out, "!%", pool.get(f.name));
        });
        (fn StructLiteralP(pattern) => {
            out.push_all("(");
            each (pattern.bindings.items()) {b|
                b.log(pool, out, depth);
                out.push_all(",");
            };
            out.push_all(")");
        });
        (fn FieldAccess(f) => {
            f.container.log(pool, out, depth);
            @fmt(out, ".%", pool.get(f.name));
        });
        (fn PrefixMacro(f) => {
            out.push_all("(@(");
            f.handler.log(pool, out, depth);
            out.push_all(")(");
            f.arg.log(pool, out, depth);
            out.push_all(") ");
            f.target.log(pool, out, depth);
            out.push_all(")");
        });
        (fn PtrOffset(f) => {
            @fmt(out, "<<offset %>> ", f.bytes);
            f.ptr.log(pool, out, depth);
        });
        (fn Cast(inner) => {
            out.push_all("<<cast>> ");
            inner[].log(pool, out, depth);  
        });
        @default => out.push_all("ICE:???");
    };
} 

fn log(self: *Binding, pool: *StringPool, out: *List(u8), depth: i64) void = {
    // format!(
    //    "{}: ({}) = {}, ",
    //    b.name().map_or("_", |n| pool.get(n)),
    //    b.lazy().log(pool),
    //    b.default.as_ref().map(|e| e.log(pool)).unwrap_or_else(|| String::from("---"))
    //)
}

fn log(self: *FatStmt, pool: *StringPool, out: *List(u8), depth: i64) void = {
    
} 
