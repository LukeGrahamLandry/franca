#include_std("compiler/codemap.fr");
#include_std("compiler/lex.fr");
#include_std("compiler/pool.fr");
#include_std("compiler/parse.fr");
#include_std("compiler/backend/walk_bc.fr");
#include_std("compiler/backend/qbe.fr");
#include_std("compiler/backend/llvm.fr");
#include_std("compiler/error_reporting.fr");
#include_std("compiler/scope.fr");
#include_std("compiler/walk_ast.fr");
#include_std("compiler/comptime.fr");
#include_std("compiler/values.fr");
#include_std("compiler/emit_bc.fr");
#include_std("compiler/profile.fr");
#include_std("compiler/lsp/lsp.fr"); 
#include_std("compiler/lsp/hooks.fr"); 

// TODO: use this instead of static linking 
//       so its less of a pain to link against as a library 
//       (where you want the franca code to own main).

// This is what we export to the rust code.
FrancaVTable :: @rec @struct(
    intern_string: @FnPtr(c: *StringPool, s: Str) Symbol,
    get_string: @FnPtr(c: *StringPool, s: Symbol) Str,
    add_file: @FnPtr(c: Compiler, name: Str, content: Str) Span, 
    parse_stmts: @FnPtr(c: Compiler, f: *Span) Result(Slice(FatStmt), ParseErr),
    emit_bc: @FnPtr(c: Compiler, f: FuncId, when: ExecStyle) Res(FnBody),
);

// This is what we import from the rust code.
RustVTable :: @rec @struct(
    init_compiler: @FnPtr(comptime_arch: Backend) Compiler,
    compile_func: @FnPtr(c: Compiler, f: FuncId, when: ExecStyle) CRes(void),
    // SAFETY: you must call created_jit_fn_ptr_value if you create a Values and then compile for AOT
    get_jitted_ptr: @FnPtr(c: Compiler, f: FuncId) CRes(rawptr),
    get_function: @FnPtr(c: Compiler, f: FuncId) *Func,
    make_and_resolve_and_compile_top_level: @FnPtr(c: Compiler, body: Slice(FatStmt)) CRes(void),
    make_jitted_exec: @FnPtr(c: Compiler) void,
    give_vtable: @FnPtr(c: Compiler, vtable: *ExportVTable, userdata: rawptr) void,
    comptime_arch: @FnPtr() Ty(Arch, Os),
    get_type_meta: @FnPtr(c: Compiler, ty: Type) TypeMeta,
    debug_log_baked_constant: @FnPtr(c: Compiler, id: BakedVarId) void,
    debug_log_bc: @FnPtr(c: Compiler, body: *FnBody) void,
    get_compiler_builtins_source: @FnPtr() Str,
    number_of_functions: @FnPtr(comp: Compiler) i64,
    clone_expr: @FnPtr(e: *FatExpr) FatExpr,
    clone_type: @FnPtr(e: *LazyType) LazyType,
    intern_type: @FnPtr(c: Compiler, e: TypeInfo) Type,
    get_type: @FnPtr(c: Compiler, e: Type) *TypeInfo,
    log_type: @FnPtr(c: Compiler, e: Type) Str,
    check_for_new_aot_bake_overloads: @FnPtr(comp: Compiler) CRes(void),
    clone_func: @FnPtr(e: *Func) Func,
);
