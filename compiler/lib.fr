#include_std("compiler/codemap.fr");
#include_std("compiler/lex.fr");
#include_std("compiler/pool.fr");
#include_std("compiler/parse.fr");
#include_std("compiler/backend/walk_bc.fr");
#include_std("compiler/backend/llvm.fr");
#include_std("compiler/backend/aarch64.fr");
#include_std("compiler/error_reporting.fr");
#include_std("compiler/scope.fr");
#include_std("compiler/walk_ast.fr");
#include_std("compiler/comptime.fr");
#include_std("compiler/values.fr");
#include_std("compiler/emit_bc.fr");
#include_std("compiler/profile.fr");
#include_std("compiler/v2/dispatch.fr"); 
#include_std("compiler/v2/sema.fr"); 
#include_std("compiler/v2/ast_boring.fr");
#include_std("compiler/backend/cranelift.fr");
#include_std("compiler/backend/x64.fr");  
#include_std("compiler/backend/jit.fr");  
#include_std("compiler/driver_io.fr");  

::?[]Prim; // TODO: why do i need this extra when lsp????? order of exports changed maybe??

// TODO: don't individually allocate all these. it just makes it easier to do rust ffi while not fully self hosted. 
SelfHosted :: @rec @struct(
    pool: *StringPool,
    codemap: *CodeMap,
    parser: *Parser,
    ast_alloc: *ArenaAlloc,
    scopes: *Scopes,
    vtable: *ImportVTable,
    baked: *Baked,
    last_loc: Span,
    env: *ComptimeEnvironment,
    // NOTE: don't reorder the fields above this! Rust knows about them!
    // TODO: they should just be slices since they have to last forever anyway
    primitives: HashMap(PrimKey, RsVec(Prim)),
    index: ProgramIndex,
    functions: BucketArray(Func),  // TODO: have a version of this type that doesn't add gaps if you push_all because that will break the indexing
    jitted: Jitted,
    bytecodes: BucketArray(FnBody),
    // TODO: just always use .Aot and make this a set?
    saved_bytecodes: HashMap(*FnBody, ExecStyle),
    free_bytecodes: List(*FnBody),
    types: BucketArray(TypeInfo),
    // TODO: decide if these are generally accessed at the same time so should be stored together.
    // TODO: have a OptionalBucketArray that stores a bit set at the beginning of each bucket? 
    type_extra: BucketArray(TypeMeta), 
    type_lookup: HashMap(*TypeInfo, Type),
    // TODO: its dumb that deep is here and shallow is in typeinfo struct?  -- Jul 21
    finished_layout_deep: DynamicBitSet,
    dispatch: CompilerDispatch,
    cranelift: ?JittedCranelift = .None,
    legacy_indirection: Compiler = Compiler.zeroed(),
);

OverloadKey :: @struct(arg: Type, req: Type);

:: AutoHash(Ty(Type, u16, bool, bool), TrivialHasher);
:: AutoEq(Ty(Type, u16, bool, bool));
:: AutoHash(OverloadKey, TrivialHasher);
:: AutoEq(OverloadKey);

PRes :: Result(void, *CompileError);

make_top_level :: fn(c: *SelfHosted, body: Slice(FatStmt)) Res(FuncId) = {
    name := c.pool.insert_owned("@toplevel@");
    loc := body[0].loc;
    result := c.box(synthetic_ty((Value = (bytes = unit_value, coerced = false)), loc, void));
    result := synthetic_ty((Block = (body = body.rs(), result = result, ret_label = .None, hoisted_constants = false)), loc, void);
    bindings: List(Binding) = list(c.get_alloc());
    bindings&.if_empty_add_unit();
    arg: Pattern = (bindings = bindings.rs(), loc = loc);
    def: FnDef = (name = (Some = name), arg = arg, ret = (Finished = void), tags = list(temp()), loc = loc);
    func := make_func(def, (Some = result), false);
    r := @try(c.resolve_root(func&, scope_from_index(0))) return;  
    f := c.add_function(func);
    return(Ok = f)
};

fn update_global_stdlib_path() void = {
    :: ?Str; 
    if STDLIB_PATH.is_none() {
        // :io_driver
        a := find_std_lib(libc_allocator);
        if a& { (lst: *Str) |  // TODO: why the fuck does this need the type annotation1!!@##@!
            STDLIB_PATH[] = (Some = lst[]);
        } else {
            panic("Could not find franca standard library."); // TODO: return error
        };
    };
}

// TODO: store this in SelfHosted instead of in a global -- Jul 5
STDLIB_PATH :: @static(?Str) (None = unit);

fn load_file_in_compiler(vtable: *ImportVTable, path: Str, opts: *BuildOptions) CRes(CompCtx) = {
    // :io_driver
    prelude := "#include_std(\"lib/core.fr\");";
    source: List(u8) = prelude.clone(libc_allocator);  // TODO: column number on error on first line will be wrong but i dont care. 
    source&.read_and_push(path);  // TODO: error handling
    
    comp := {vtable.init_compiler}(opts.comptime_jit, opts);
    c := vtable.with(comp);
    file := {c.vtable.add_file}(c.data, path, source.items());
    self := c.data.cast();
    
    id := self.parser.push_parse(source.items(), file);
    // TODO: handle error
    stmts := self.parser.finish_pending_stmts(id);
    stmts := self[][].unwrap_report_error(RsVec(FatStmt), stmts); // TODO: don't return RsVec -- Jun 29
    @try({c.vtable.make_and_resolve_and_compile_top_level}(c.data, stmts.items())) return;
    (Ok = c)
}

// TODO: print the error message!!! since this doesn't go through the rust side anymore. -- Jun 30
fn run_franca_file(vtable: *ImportVTable, path: Str) CRes(void) = {
    opts := vtable.default_build_options(); 
    c := @try(vtable.load_file_in_compiler(path, opts)) return;
    
    mem_stats :: fn() => {
        bytes_per_mb :: 1024 * 1024;
        cc := c.data.cast()[][];
        @println("Compiler Memory Usage: %MB + %MB", cc.ast_alloc.current_allocated_size() / bytes_per_mb, __temp_alloc.current_allocated_size() / bytes_per_mb);
    };
    
    if c.get_unique_named("driver") {f|
        callee := c.get_jitted(f);
        callee := assume_types_fn(Arg = *ImportVTable, Ret = void, ptr = callee);
        callee(vtable);
        //mem_stats();
        exit(0);
    };
    
    if c.get_unique_named("main") {f|
        callee := c.get_jitted(f);
        callee := assume_types_fn(Arg = void, Ret = void, ptr = callee);
        callee();
        //mem_stats();
        exit(0);
    };
    
    sym_test := c.intern_string("test");
    tests := c.data.get_fns_with_tag(sym_test);
    for tests { f |
        @println("===== [%] =====", c.get_string(c.get_function_name(f)));
        callee := c.get_jitted(f);
        callee := assume_types_fn(Arg = void, Ret = void, ptr = callee);
        callee();
    };
    
    yield_count := c.data.cast()[][].dispatch.yield_count;
    if yield_count != 0 {
        @println("[yield_count = %]", yield_count);
    };
    
    .Ok
}

fn dump_tasks(self: *SelfHosted) void = {
    @println("[% active tasks]", self.dispatch.active_tasks.len);
    out: List(u8) = list(temp());
    enumerate self.dispatch.active_tasks { i, task | 
        @fmt(out&, "- [%] ", i);
        task.action&.log(self, out&);
        out&.push_all("\n");
    };
    println(out.items());
}

// TODO: the vtable ones leak every time!
// TODO: this should be a driver program export instead
fn get_include_std(c: *SelfHosted, name: Str) ?WaitingParse = {
    // :io_driver
    zone := zone_begin(.LoadFile); // TODO: defer
    
    //@println("TODO: tried to import %", name);
    src := if name == "compiler" {() Str |
        code: List(u8) = list(c.get_alloc());
        fill_export_ffi(code&);
        code.items()
    }{
        lib := STDLIB_PATH[].unwrap();
        check := @format("%/%", lib, name) temp();
        // TODO: do this as one operation (error handling on read)
        if file_exists(check.items()) {
            c.get_alloc().read_to_string(check.items()).items()
        } {
            if file_exists(name) {
                c.get_alloc().read_to_string(name).items()
            } {
                zone_end(zone);
                return(.None);
                "unreahcable"
            }
        }
    };
    
    file := c.codemap.add_file(name, src);
    id := push_parse(c.parser, src, file);
    zone_end(zone);
    (Some = id)
}

// I'd rather include it in the binary but I do this so I don't have to wait for the compiler to recompile every time I change the lib
// (maybe include_bytes in a seperate crate would make it better)
// I also like that users can put the lib somewhere an edit it for thier program. I dont want the compiler to just force its blessed version.
// But I also don't want it to be like c where you just get whatever the system happens to have.
fn find_std_lib(a: Alloc) ?Str = {
    // :io_driver
    check :: fn(p: *List(u8)) bool = {
        p.push_path_segment("lib");
        p.push_path_segment("franca_stdlib_1.fr");
        good := p.items().file_exists();
        p.pop_path_segment();
        p.pop_path_segment();
        good
    };

    // if a project wants to supply its own version, that should take priority.
    // check current directory first? 
    p := get_working_directory(a);
    p := p&;
    if(check(p), => return(Some = p.items()));
    
    // TODO: also check like ./vendor/franca
    range(0, 3) { _ |
        p.pop_path_segment();
        if(check(p), => return(Some = p.items()));
    };

    // TODO: this doesn't work if its a symlink to the exe. need to follow that? 
    p := get_executable_path(a).assume_owned(a);
    p := p&;
    assert(p.pop_until_endswith("/"), "path should have slashes"); // we want our folder, not our exe. 
    
    p.push_path_segment("franca");
    if(check(p), => return(Some = p.items()));
    // exe might be in franca/target/release/franca or franca/target/debug/deps/compiler-21be1aa281dbe5d6, so go up
    range(0, 5) { _ |
        p.pop_path_segment();
        if(check(p), => return(Some = p.items()));
    };
    .None
}

fn pop_until_endswith(self: *List(u8), suffix: []u8) bool = {
    while (=> !self.is_empty() && !self.items().ends_with(suffix)) {
        self.pop();
    };
    !self.is_empty()
}

// TODO: pass requested type through generic args so this isn't so clunky. -- Jun 23
fn init_self_hosted(build_options: *BuildOptions) *SelfHosted = {
    a: ArenaAlloc = init(page_allocator, 1.shift_left(23));
    arena := a&.borrow().boxed(ArenaAlloc, a);
    a := arena.borrow();
    pool: StringPool = init(a);
    pool := a.boxed(StringPool, pool);
    codemap: CodeMap = init(a);
    codemap := a.boxed(CodeMap, codemap);
    t: List(ParseTask) = list(a);
    parser: Parser = (pool = pool, lex = Lexer.zeroed(), tasks = a.boxed(List(ParseTask), t), alloc = a, last = Token.zeroed());
    
    s: Scopes = (
        scopes = list(a),
        types = init(10, a),
        constants = init(10, a),
        already_loaded = init(a),
    );
    s := a.boxed(Scopes, s);
    s.new_scope(scope_from_index(0), 0);
    
    b: Baked = (
        values = init(10, a),
        lookup = init(a),
        functions = init(a),
        custom_bake_constant = init(a),
    );
    b := a.boxed(Baked, b);
    
    // Sadly this can't use default fields, I think because it loads too early. 
    env: ComptimeEnvironment = (
        make_slice_t = .None,
        bake_os = .None,
        fat_expr_type = .None,
        intrinsic_type = .None,
        build_options = BuildOptions.raw_from_ptr(build_options),
        unquote_placeholders = .None,
        link_rename_arg = .None,
        push_x86_func = .None,
        compile_error_pointer = .None,
    );
    env := a.boxed(ComptimeEnvironment, env);
    self: SelfHosted = (
        pool = pool,
        codemap = codemap,
        parser = a.boxed(Parser, parser),
        ast_alloc = arena,
        scopes = s,
        vtable = ImportVTable.ptr_from_int(0), // this gets filled in by the rust side.
        baked = b,
        last_loc = (low = 0, high = 0),
        env = env,
        primitives = init(a),
        index = init(a),
        functions = init(10, a),
        jitted = new(1.shift_left(28)), // Its just virtual memory right? I really don't want to ever run out of space and need to change the address.
        bytecodes = init(10, a),
        saved_bytecodes = init(a),
        free_bytecodes = list(a),
        types = init(10, a),
        type_extra = init(10, a), 
        type_lookup = init(a),
        finished_layout_deep = empty(a),
        dispatch = init(a),
    );
    self&.init_fixed_types();
    
    enumerate (::get_enum_names(Flag)) {i, name|
        s := self.pool.insert_owned(name[]);
        assert_eq(i, @as(i64) s.id().zext());
    };
    
    self := a.boxed(SelfHosted, self);
    
    stable_compiler_context :: fn(self: *SelfHosted) Compiler = {
        mem1 := libc_allocator.alloc(*SelfHosted, 1);
        mem1.ptr[] = self;
        erased := (*SelfHosted).raw_from_ptr(mem1.ptr);
        compiler := libc_allocator.alloc(CompilerValue, 1);
        compiler.ptr[] = (pointer_to_pointer_to_selfhosted = erased);
        compiler.ptr
    };
    self.legacy_indirection = self.stable_compiler_context();
    
    x := query_current_arch();
    if x { arch | 
        if arch != .Aarch64 {
            @if(INCLUDE_COMPTIME_CRANELIFT) {
                build_options.comptime_jit = .Cranelift;
            };
            assert(build_options.comptime_jit != .Aarch64, "Aarch64 backend does not support this archtecture.");
        };
    };
    
    @if(INCLUDE_COMPTIME_CRANELIFT, {
        if build_options.comptime_jit == .Cranelift {
            dispatch_ptr := self.jitted&.get_dispatch();
            data := franca_comptime_cranelift_init(self, get_backend_vtable(), dispatch_ptr);
            self.cranelift = (Some = data);
        };
    }, {
        @assert(build_options.comptime_jit != .Cranelift, "cranelift backend is not enabled in this build of the compiler");
    });
    
    self
}

fn get_function(self: *SelfHosted, fid: FuncId) *Func #inline = {
    self.functions&.nested_index(fid.to_index().zext())
}

fn add_function(self: *SelfHosted, f: Func) FuncId = {
    self.functions&.push(f);
    i := self.functions.len - 1;
    funcid_from_index(i)
}

fn get_alloc(self: *SelfHosted) Alloc = self.ast_alloc.borrow();
fn get_alloc(self: CompilerRs) Alloc = self[][].get_alloc();

fn clone(self: *SelfHosted, e: *FatExpr) FatExpr = {
    e.deep_clone(self.get_alloc())
}

fn clone(self: *SelfHosted, e: *LazyType) LazyType = {
    e.deep_clone(self.get_alloc())
}

::tagged(BakedEntry);
::DeriveFmt(get_variant_type(BakedEntry, BakedEntry.Tag().Num));
::DeriveFmt(BakedEntry);
::DeriveFmt(BakedVarId);
::display_slice(BakedEntry);
::enum(Prim);

VariableInfo :: @struct(
    declaration: Span,
    usages: RsVec(Span),
    var: Var,
);

// TODO: really you want to be storing things as file+line because that's what the lsp gives you. 
ProgramIndex :: @struct(
    a: Alloc,
    variables: BucketArray(?VariableInfo),
    callers: BucketArray(RsVec(FuncId)), // [FuncId]
);

fn init(a: Alloc) ProgramIndex = {
    (a = a, variables = init(10, a), callers = init(10, a))
}
