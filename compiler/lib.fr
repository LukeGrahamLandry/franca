#include_std("compiler/codemap.fr");
#include_std("compiler/lex.fr");
#include_std("compiler/pool.fr");
#include_std("compiler/parse.fr");
#include_std("compiler/error_reporting.fr");
#include_std("compiler/scope.fr");
#include_std("compiler/walk_ast.fr");
#include_std("compiler/comptime.fr");
#include_std("compiler/values.fr");
#include_std("compiler/profile.fr");
#include_std("compiler/v2/dispatch.fr"); 
#include_std("compiler/v2/sema.fr"); 
#include_std("compiler/v2/ast_boring.fr");
#include_std("compiler/driver_io.fr");  
#include_std("compiler/ast_external.fr");  
#include_std("compiler/emit_ir.fr");  
#include_std("compiler/worker.fr");
#include_std("compiler/jit.fr");

#use("@/lib/collections/bit_set.fr");
#use("@/lib/collections/map.fr");
#use("@/lib/sys/process.fr");
#use("@/lib/sys/fs.fr");
#include_std("backend/lib.fr");

Crash :: import("@/lib/crash_report.fr");

// TODO: don't individually allocate all these. 
SelfHosted :: @rec @struct(
    env: *ComptimeEnvironment,
    pool: *StringPool,
    codemap: *CodeMap,
    parser: *Parser,
    ast_alloc: *ArenaAlloc,
    scopes: *Scopes,
    baked: *Baked,
    last_loc: Span,
    index: ProgramIndex,
    functions: BucketArray(Func),  // TODO: have a version of this type that doesn't add gaps if you push_all because that will break the indexing
    types: BucketArray(TypeInfo),
    // TODO: decide if these are generally accessed at the same time so should be stored together.
    // TODO: have a OptionalBucketArray that stores a bit set at the beginning of each bucket? 
    type_extra: BucketArray(TypeMeta), 
    type_lookup: HashMap(*TypeInfo, Type),
    // TODO: its dumb that deep is here and shallow is in typeinfo struct?  -- Jul 21
    finished_layout_deep: DynamicBitSet,
    dispatch: CompilerDispatch,
    legacy_indirection: Compiler = Compiler.zeroed(),
    vtable: *ImportVTable,
    stack_base: i64,
    comptime_libraries: HashMap(Symbol, Dyn.Handle),
    comptime_codegen: *CodegenShared,
    dyncalls: HashMap(FnType, DynCallShim),
    pending_took_pointer: List(Ty(FuncId, u32)),  // (_, symbol)
    call_depth := 0,
    shim_callback_alloc: ArenaAlloc,
    where_memo: HashMap(WhereKey, FuncId),
    imports: *HashMap(Symbol, ScopeId),  // TODO: very very bad if this struct gets too big?? :FUCKED
    scopes_generation := 0,
    other_module: ?*QbeModule,
    stack_trace_last_callee: ?FuncId, // bleh
    backtrace_node: *Crash.LocationResolverNode,
    recycle_funcid: List([]FuncId),
);

OverloadKey :: @struct(arg: Type, req: Type);
WhereKey :: @struct(template: FuncId, arg: Values);

:: AutoHash(OverloadKey, TrivialHasher);
:: AutoEq(OverloadKey);
:: AutoEq(WhereKey);
:: AutoHash(WhereKey, TrivialHasher);

PRes :: Result(void, *CompileError);

make_top_level :: fn(c: *SelfHosted, body: Slice(FatStmt)) Res(FuncId) = {
    @assert(body.len != 0, "tried to make_top_level with no statements");
    name := c.pool.insert_owned("@toplevel@");
    make_function_scope(c, body, name, scope_from_index(0))
};

fn make_function_scope(c: *SelfHosted, body: Slice(FatStmt), name: Symbol, scope: ScopeId) Res(FuncId) = {
    loc := body[0].loc;
    result := c.box(synthetic_ty((Value = (bytes = unit_value, coerced = false)), loc, void));
    result := synthetic_ty(new_block(body.as_raw_list(), result), loc, void);
    def: FnDef = (name = (Some = name), arg = empty_pattern(c.get_alloc(), loc), ret = (Finished = void), tags = list(temp()), loc = loc);
    func := make_func(def, (Some = result), false);
    r := @try(c.resolve_root(func&, scope)) return;  
    f := c.add_function(func);
    (Ok = f)
}

fn update_global_stdlib_path() void = {
    :: ?Str; 
    if STDLIB_PATH.is_none() {
        // :io_driver
        a := find_std_lib(general_allocator());
        if a& { (lst: *Str) |  // TODO: why the fuck does this need the type annotation1!!@##@!
            STDLIB_PATH[] = (Some = lst[]);
        } else {
            panic("Could not find franca standard library."); // TODO: return error
        };
    };
}

// TODO: store this in SelfHosted instead of in a global -- Jul 5
STDLIB_PATH :: @static(?Str) (.None);

fn load_file_in_compiler(vtable: *ImportVTable, path: Str, opts: *BuildOptions) CRes(CompCtx) = {
    // :io_driver
    prelude := "#include_std(\"lib/core.fr\");";
    source: List(u8) = prelude.clone(general_allocator());  // TODO: column number on error on first line will be wrong but i dont care. 
    source&.read_and_push_or_crash(path);  // TODO: error handling
    if source.len > prelude.len + 4 {
        maybe_magic := source.items().subslice(prelude.len, 4);
        check_magic :: fn(M: u32) => 
            maybe_magic.starts_with(ptr = ptr_cast_unchecked(u32, u8, M&), len = 4);
        // TODO: comment on architecture 
        @err_assert(!check_magic(import("@/backend/macho/bits.fr").macho_magic), "load_file_in_compiler: the bytes in '%' look like a Mach-O file, not source code.", path) return;
    };
    
    comp := {vtable.init_compiler}(opts);
    c := vtable.with(comp);
    file := c.add_file(path, source.items());
    self := c.data.cast();
    stmts := c.data.parse_stmts(file&);
    // TODO: handle error
    stmts := self[][].unwrap_report_error([]FatStmt, stmts); 
    // TODO: you want to be able to return an error but they can't do anything with a CompileError because they don't have the compiler instance. 
    self[][].unwrap_report_error(void, {c.vtable.make_and_resolve_and_compile_top_level}(c.data, stmts));
    (Ok = c)
}

Dyn :: import("@/lib/dynamic_lib.fr");

fn run_franca_file(vtable: *ImportVTable, path: Str) CRes(void) = {
    F :: @FnPtr(*ImportVTable) void;
    callee: ?F = .None;
    
    if !path.ends_with(".fr") {
        if Dyn'open(path) { handle |
            ref := handle.get("driver") || @panic("opened '%' as shared library but failed to get symbol 'driver'", path);
            @println("Loaded precompiled driver '%'", path);
            callee = (Some = ptr_cast_unchecked(rawptr, F, ref&)[]);
        };
    };

    if callee.is_none() {
        safe :: safety_check_enabled(.DebugAssertions);
        start := timestamp();
        opts := vtable.default_build_options(); 
        opts.retain_function_names = true;
        opts.implicit_context_runtime = query_context_is_implicit();
        // this needs to be set based on the host. 
        // ie. if you build the compiler targetting an environment without a libc, 
        // we can't just produce a libc when loading a driver program. 
        opts.use_raw_syscalls = :: !is_linking_libc();
        c := @try(vtable.load_file_in_compiler(path, opts)) return;
        env := c.get_comptime_env();
        @if(show_backend_stats())
        @eprintln(">>> compiler configuration: context=%, threads=%, debug_assertions=%, host = (%, %)", if(query_context_is_implicit(), => "implicit", => "static"), use_threads, safe, env.comptime_arch, env.comptime_os);
        
        self := c.data.cast()[][];
        
        // not doing this is faster because then codegen for the driver and its comptime execution can happen on different threads, 
        // but means when you call a function pointer value it might be in the other module which is creepy, 
        // and we end up compiling many things an extra time. 
        // ie. if you put #log_ir on general_allocator()_fn, you'll see it 3 times. 
        USE_SAME_MODULE :: true;
        
        shared := @if(USE_SAME_MODULE, self.comptime_codegen, {
            m := @uninitialized QbeModule;
            init_default_module(m&, (arch = query_current_arch(), os = query_current_os(), type = .JitOnly), true);
            self.other_module = (Some = m&);
            shared: *CodegenShared = init(m&, self.get_alloc(), @as(CodegenWorker) codegen_thread_main, true);
            shared
        });
        
        m := shared.m;
        
        apple_thread_jit_write_protect(true);  // :JitMemProtect this thread wants to execute
        
        f := c.get_unique_named("driver") || c.get_unique_named("main") || panic("expected a function called main or driver.");
        
        name := c.fmt_fn_name(f);
        @if(USE_SAME_MODULE, {
            c.get_jitted(f);
        }, {
            main_thread_pump(self.comp(), shared, @slice(f));
            shared.join_codegen_thread();
            @if(!shared.threaded) shared.m.emit_suspended_inlinables();  // when using apple's jit bullshit this has to happen on the other thread!
        });
        
        { // :TodoLinux
            frontend := clock_ms(MacosLibc.CLOCK_THREAD_CPUTIME_ID);
            code_count := m.segments&[.Code]&.len() - COMMANDS_SIZE_GUESS - SIZE_OF_STUBS;
            @if(show_backend_stats())
            @eprintln(">>> jitted % bytes of code.", code_count);
            @if(show_backend_stats())
            @eprintln(">>> compiled % in %ms", name, frontend);  // :WrongClockTime
        };
        cc := or m.get_addr(name) {
            @panic("ICE: lost %", name)
        };
        
        maybe_log_scopes(self);
        
        callee = (Some = assume_types_fn(Arg = *ImportVTable, Ret = void, ptr = cc));
    };
    
    callee := callee.unwrap();
    push_dynamic_context {
        context(DefaultContext)[].comptime = rawptr_from_int(0);
        callee(vtable);
    };
    .Ok
}

fn dump_tasks(self: *SelfHosted) void = {
    @println("[% active tasks]", self.dispatch.active_tasks.len);
    out: List(u8) = list(temp());
    enumerate self.dispatch.active_tasks { i, task | 
        @fmt(out&, "- [%] ", i);
        task.action&.log(self, out&);
        out&.push_all("\n");
    };
    println(out.items());
}

// I'd rather include it in the binary but I do this so I don't have to wait for the compiler to recompile every time I change the lib
// (maybe include_bytes in a seperate crate would make it better)
// I also like that users can put the lib somewhere an edit it for thier program. I dont want the compiler to just force its blessed version.
// But I also don't want it to be like c where you just get whatever the system happens to have.
fn find_std_lib(a: Alloc) ?Str = {
    // :io_driver
    check :: fn(p: *List(u8)) bool = {
        p.push_path_segment("lib");
        p.push_path_segment("franca_stdlib_1.fr");
        good := p.items().file_exists();
        p.pop_path_segment();
        p.pop_path_segment();
        good
    };

    // if a project wants to supply its own version, that should take priority.
    p := u8.list(a); p&.push_all("."); // get_working_directory(a);
    p := p&;
    if(check(p), => return(Some = p.items()));
    
    // TODO: also check like ./vendor/franca
    range(0, 3) { _ |
        p.pop_path_segment();
        if(check(p), => return(Some = p.items()));
    };

    @if(is_linking_libc()) {
        // TODO: this doesn't work if its a symlink to the exe. need to follow that? 
        p := get_executable_path(a).assume_owned(a);
        p := p&;
        assert(p.pop_until_endswith("/"), "path should have slashes"); // we want our folder, not our exe. 
        
        p.push_path_segment("franca");
        if(check(p), => return(Some = p.items()));
        // exe might be in franca/target/release/franca or franca/target/debug/deps/compiler-21be1aa281dbe5d6, so go up
        range(0, 5) { _ |
            p.pop_path_segment();
            if(check(p), => return(Some = p.items()));
        };
    };
    
    .None
}

// TODO: pass requested type through generic args so this isn't so clunky. -- Jun 23
fn init_self_hosted(opts: *BuildOptions) *SelfHosted = {
    opts.implicit_context_comptime = query_context_is_implicit();
    stack_base := 0;
    a: ArenaAlloc = init(page_allocator, 1.shift_left(23));
    arena := a&.borrow().boxed(ArenaAlloc, a);
    a := arena.borrow();
    pool: StringPool = init(a);
    pool := a.boxed(StringPool, pool);
    codemap: CodeMap = init(a);
    codemap := a.boxed(CodeMap, codemap);
    t: List(ParseTask) = list(a);
    parser: Parser = (pool = pool, lex = Lexer.zeroed(), tasks = a.boxed(List(ParseTask), t), alloc = a, last = Token.zeroed());
    
    s: Scopes = (
        scopes = init(10, a),
        types = init(10, a),
        constants = init(10, a),
        already_loaded = init(a),
    );
    s := a.boxed(Scopes, s);
    s.new_scope(scope_from_index(0), a, Span.zeroed());
    
    b: Baked = (
        values = init(10, a),
        lookup = init(a),
        functions = init(a),
        custom_bake_constant = init(a),
    );
    b := a.boxed(Baked, b);
    
    // TODO: this annoys me, generally this could just be compiled into the binary, 
    //       but i want to experiment with ape/comsmolibc eventually where you don't know where you're going to run up front,
    //       tho they still need to compile the x86 and arm parts seperatly so i guess there should be somewhere to stick this information? 
    arch := query_current_arch();
    os := query_current_os();
    ::assert(enum_count(Os) <= 32 && enum_count(Arch) <= 32, "not enough bits for arch/os");
    opts.target_os_bitset = opts.target_os_bitset.bit_or(1.shift_left(os.raw()));
    opts.target_arch_bitset = opts.target_arch_bitset.bit_or(1.shift_left(arch.raw()));
    
    if ptr_cast_unchecked(@type opts.handle_message, i64, opts.handle_message&)[] == 0 {
        opts.handle_message = builtin_driver_callback;
    };
    
    // Sadly this can't use default fields, I think because it loads too early. 
    env: ComptimeEnvironment = (
        _ = .None,
        make_slice_t = .None,
        bake_os = .None,
        fat_expr_type = .None,
        intrinsic_type = .None,
        build_options = BuildOptions.raw_from_ptr(opts),
        unquote_placeholders = .None,
        comptime_os = query_current_os(),
        os_type = .None,
        link_rename_arg = .None,
        push_x86_func = .None,
        compile_error_pointer = .None,
        comptime_arch = arch,
        runtime_init = .None,
        static_context_var = .None, 
    );
    env := a.boxed(ComptimeEnvironment, env);
    opts.env = ComptimeEnvironment.raw_from_ptr(env);
    
    m := a.box(QbeModule);
    init_default_module(m, (arch = arch, os = os, type = .JitOnly), true);
    m.got_indirection_instead_of_patches = true;  // comptime needs to be more flexible with late bound references.
    
    self := a.box(SelfHosted);
    self[] = (
        pool = pool,
        codemap = codemap,
        parser = a.boxed(Parser, parser),
        ast_alloc = arena,
        scopes = s,
        baked = b,
        last_loc = (low = 0, high = 0),
        env = env,
        index = init(a),
        functions = init(10, a),
        types = init(10, a),
        type_extra = init(10, a), 
        type_lookup = init(a),
        finished_layout_deep = empty(a),
        dispatch = init(a),
        stack_base = i64.int_from_ptr(stack_base&),
        comptime_libraries = init(a),
        vtable = init_driver_vtable(),
        comptime_codegen = init(m, a, @as(CodegenWorker) codegen_thread_main, false),
        dyncalls = init(a),
        pending_took_pointer = list(a),
        shim_callback_alloc = init(page_allocator, 1.shift_left(14)),
        where_memo = init(a),
        imports = a.boxed(HashMap(Symbol, ScopeId), init(a)),
        other_module = .None,
        stack_trace_last_callee = .None,
        backtrace_node = push_resolver(SelfHosted, self, find_function_aa),
        recycle_funcid = list(a),
    );
    
    if get_dynamic_context().is_null() {
        scary_log("compiler had null context!");
        exit(1);
    };
    self.init_fixed_types();
    self.pool.fill_fixed_flags();
    
    // Only needed if targetting AOT but its so cheap so who cares. 
    if !opts.implicit_context_runtime {
        // Reserve a global slot to store the context pointer. 
        // The program can only access this with GetContext and SetContext. 
        out: List(BakedEntry) = list(a);
        out&.push((Num = (value = 0)));
        id := self.bake_legacy((VoidPtrArray = out.as_raw()), .None);
        env.static_context_var = (Some = id); 
    };

    // :MultiDylibLibc HACK  TODO: need a first class way to talk about one logical library that's split into multiple files. 
    enumerate find_os_libc_dylib() { i, libc_path |
        if Dyn'open(libc_path[]) { libc |
            name := u8.list(self.get_alloc());
            name&.push_all("libc");
            range(0, i) { _ |
                name&.push_all("*");
            };
            libc_name := self.pool.insert_owned(name.items());
            self.comptime_libraries&.insert(libc_name, libc);
        };
    };
    
    c := context(DefaultContext)[].comptime&;
    @assert(c[].is_null(), "Cannot call init_self_hosted inside another compiler. push_context with comptime=null first.");
    c[] = SelfHosted.raw_from_ptr(self);
    
    stable_compiler_context :: fn(self: *SelfHosted) Compiler = {
        mem1 := general_allocator().alloc(*SelfHosted, 1);
        mem1.ptr[] = self;
        erased := (*SelfHosted).raw_from_ptr(mem1.ptr);
        compiler := general_allocator().alloc(CompilerValue, 1);
        compiler.ptr[] = (pointer_to_pointer_to_selfhosted = erased);
        compiler.ptr
    };
    self.legacy_indirection = self.stable_compiler_context();
    
    self
}

fn get_function(self: *SelfHosted, fid: FuncId) *Func #inline = {
    self.functions&.nested_index(fid.to_index().zext())
}

fn add_function(self: *SelfHosted, f: Func) FuncId = {
    i := self.functions.len;
    self.functions&.push(f);
    from_index(i)
}

// For now you can't change this to an allocator that actually frees, 
// because user code is allowed to just copy Ast nodes around and give us back aliased trees.
// This might be something to address when i rework the macro system.  
fn get_alloc(self: *SelfHosted) Alloc = self.ast_alloc.borrow();

fn clone(self: *SelfHosted, e: *FatExpr) FatExpr = {
    e.deep_clone(self.get_alloc())
}

fn clone(self: *SelfHosted, e: *LazyType) LazyType = {
    e.deep_clone(self.get_alloc())
}

::tagged(BakedEntry);
::DeriveFmt(get_variant_type(BakedEntry, BakedEntry.Tag().Num));
::DeriveFmt(BakedEntry);
::DeriveFmt(BakedVarId);
::display_slice(BakedEntry);

VariableInfo :: @struct(
    declaration: Span,
    usages: RawList(Span),
    var: Var,
);

// TODO: really you want to be storing things as file+line because that's what the lsp gives you. 
ProgramIndex :: @struct(
    a: Alloc,
    variables: BucketArray(?VariableInfo),
    callers: BucketArray(RawList(FuncId)), // [FuncId]
);

fn init(a: Alloc) ProgramIndex = {
    (a = a, variables = init(10, a), callers = init(10, a))
}
