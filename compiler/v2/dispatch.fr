CompilerDispatch :: @struct(    
    const_var_in_progress: DynamicBitSet, // TODO: just store this with the expression?
    function_in_progress: DynamicBitSet, // TODO: just store this with the expression?
    overloads: BucketArray(OverloadSetData),
    enclosing_function: ?FuncId,  // for adding runtime callees. 
    const_bound_memo: HashMap(MemoKey, FuncId),
    yield_count: i64 = 0,
    return_labels: BucketArray(FuncId), // [LabelId]
    next_task_id: i64 = 0,
    root_tasks: List(*Task),
);

Task :: @rec @struct(
    action: Action,
    waiting_for: ?*Task,
    parent: ?*Task,
    id: i64, // TODO: remove
    done: bool = false,
);

TaskId :: @struct(id: i64);

ExprAttempt :: @struct(expr: *FatExpr, requested: ResultType);
VarAttempt :: @struct(name: Var, requested: ResultType);
Action :: @rec @tagged(
    CompileBody: FuncId,  // After this, we can generate bytecode.
    Jit: FuncId, // After this, it's safe to call a function pointer. 
    EvalConstant: VarAttempt,  // find_const. 
    ResolveOverload: OverloadAttempt,
    FinishRecType: @struct(hole: Type, name: Var, value: *FatExpr),
    // Used for function callees, you can't call a function until ~all~ are ready.
    All: List(*Task),
);

CountedTask :: @struct(task: *Task, steps: i64);

OverloadAttempt :: @struct(
    os: OverloadSet, 
    call: ExprAttempt, 
    callsite: ?FuncId,
    last_ready_count: i64,
    options: List(WipOverload),
);
WipOverload :: @struct(opt: OverloadOption, possible: bool);

fn init(a: Alloc) CompilerDispatch = {
    temp := a.alloc(List(ExprAttempt), 1);
    temp.ptr[] = list(a);
    (
        const_var_in_progress = empty(a), 
        function_in_progress = empty(a), 
        overloads = init(10, a),
        enclosing_function = .None,
        const_bound_memo = init(a),
        return_labels = init(10, a),
        root_tasks = list(10, a),
    )
}

poll_in_place :: fn(self: *SelfHosted, $T: Type, $f: @Fn() Maybe(T)) Res(T) #generic = {
    loop {
        value := f();
        @match(value&) {
            fn Ok(it)  => return(Ok = it[]);
            fn Err(it) => return(Err = it[]);
            fn Suspend(new_dep) => {
                new_task := self.get_alloc().alloc(Task, 1);
                new_task := new_task.ptr;
                new_task[] = (action = new_dep[][], waiting_for = .None, parent = .None, id = self.dispatch.next_task_id);
                self.dispatch.next_task_id += 1;
                @try(self.poll_until_finished(new_task)) return;
            };
        };
    }
};

fn poll_until_finished(self: *SelfHosted, task: *Task) Result(void, *ParseErr) = {
    root_len := self.dispatch.root_tasks.len;
    self.dispatch.root_tasks&.push(task);
    top_task := task;
    the_mark := __temp_alloc.mark();
    @debug_assert(task.parent.is_none(), "cannot poll a task with a parent. recursion bad.");
    loop {
        continue :: local_return;
        if task.waiting_for { next | 
            task = next;
            continue();
        };
        __temp_alloc.reset_retaining_capacity(the_mark);
        
        finished :: fn() void => {
            @debug_assert(task.waiting_for.is_none(), "made itself wait??");
            task.done = true;
            if task.parent { next | 
                task = next;
                continue();
            };
            
            @debug_assert(top_task.done, "we think we're done but no");
            self.dispatch.root_tasks&.pop();
            @debug_assert_eq(root_len, self.dispatch.root_tasks.len, "book keeping?");
            
            return(.Ok);
        };
        
        if task.done {
            finished();
        };
        
        @match(task.action&) {
            fn All(tasks) => {
                while => tasks.len != 0 {
                    xx := tasks.items().last();
                    next := xx.unwrap()[];
                    if next.done {
                        tasks.pop().unwrap();
                    } else {
                        next.parent = (Some = task); // TODO: make this already be done 
                        task = next;
                        continue();
                    };
                };
                finished();
            }
            @default => ();
        };
        
        @match(self.exec_task(task)) {
            fn Err(e) => {
                self.dispatch.root_tasks&.pop();
                @debug_assert_eq(root_len, self.dispatch.root_tasks.len, "book keeping?");
                return(Err = e);
            }
            fn Ok() => finished();
            fn Suspend(next) => {
                @debug_assert(task.waiting_for.is_none(), "already waiting??");
                new_task := self.get_alloc().alloc(Task, 1);
                new_task := new_task.ptr;
                new_task[] = (action = next[], waiting_for = .None, parent = (Some = task), id = self.dispatch.next_task_id);
                self.dispatch.next_task_id += 1;
                task = new_task;
                continue();
            }
        };
    }
}

::tagged(Action);
fn exec_task(self: *SelfHosted, task: *Task) Maybe(void) = {
    if task.waiting_for { dep |  
        // TODO: this should be unreachable now. 
        @debug_assert(!task.done, "task done but still has dependencies");
        return(Suspend = dep.action&);
    };
    if task.done {
        return(.Ok);
    };
    self.dispatch.enclosing_function = .None;
    
    @match(task.action&) {
        fn EvalConstant(v) => {
            @log_event("[TRY TASK] %: %", task.action&.tag(), self.pool.get(v.name.name)) self;
            self.new_expression_stack();
            name := v.name;
            var  := self.scopes.get_constant(name);
            var  := var.expect("var should always be known");
            @check(self.handle_declare_constant(name, var._1&, var._0&)) return;
            self.dispatch.const_var_in_progress&.unset(name.id.zext());
        }
        fn CompileBody(fid) => {
            fid := fid[];
            @log_event("[TRY TASK] %: % %", task.action&.tag(), fid, self.log_name(fid)) self;
            if !self.get_function(fid).get_flag(.EnsuredCompiled) {
                self.new_expression_stack();
                @check(self.handle_compile_func_body(fid)) return;
            };
            self.dispatch.function_in_progress&.unset(fid.as_index());
        }
        fn Jit(fid) => {
            fid := fid[];
            @log_event("[TRY TASK] %: % %", task.action&.tag(), fid, self.log_name(fid)) self;
            func := self.get_function(fid);
            //self.codemap.show_error_line(func.loc);
            //@log_event("%", func.log(self)) self;
            
            if !func.get_flag(.EnsuredCompiled) {
                self.dispatch.function_in_progress&.set(fid.as_index());
                return(Suspend = self.wait_for(CompileBody = fid));
            };
            
            // when possible, you want to emit_bc for callees first because they might get deduplicated. 
            waiting: List(*Task) = list(self.get_alloc());
            for func.callees { callee |
                @log_event("% calls %", fid.as_index(), callee.as_index()) self;
                if self.aarch64&.get_fn(callee).is_none() {
                    if is_mutually_recursive(task, callee) {
                        //@println("mutual recursion %", callee);
                        // TODO: add to mutual_callees and remove from callees. 
                        // TODO: make sure all mutual_callees are compiled somewhere. but rn this only decides mutual if we see that we're already working on it.
                        //       (easy direct cases are added in sema tho)
                    } else {
                        new_task := self.get_alloc().alloc(Task, 1);
                        new_task := new_task.ptr;
                        new_task[] = (action = (Jit = callee), waiting_for = .None, parent = .None, id = self.dispatch.next_task_id);
                        self.dispatch.next_task_id += 1;
                        waiting&.push(new_task);
                    };
                } else {
                    func := self.get_function(callee);
                    @debug_assert(func.get_flag(.EnsuredCompiled));
                };
            };
            if waiting.len != 0 {
                @log_event("sleep on %/% callees", waiting.len, func.callees.len) self;
                return(Suspend = self.wait_for(All = waiting));
            };
            
            arg_ty := @check(self.infer_arguments(fid)) return;
            ret_ty := @check(self.infer_return(fid)) return;
            
            // TODO: assert found? 
            found := @check(self.fill_in_jit_pointer(fid, func.body&)) return;
            fn fill_in_jit_pointer(self: *SelfHosted, fid: FuncId, body: *FuncImpl) Maybe(bool) = {
                if(self.aarch64&.get_fn(fid).is_some(), => return(Ok = true));
                func := self.get_function(fid);
                arg_ty := func.finished_arg.unwrap();
                ret_ty := func.finished_ret.unwrap();
                if body.is(.Normal).or(body.is(.Intrinsic)) {
                    @log_event("codegen % %", fid, self.log_name(fid)) self;
                    @err_assert(!arg_ty.is_unknown() && !ret_ty.is_unknown(), "unknown fn types!!") return;
                    hack := self.stable_compiler_context().cast(); // because Bc::CompCtx stores a ***SelfHosted in the assembly
                    //addr := (**SelfHosted).int_from_ptr(hack);
                    //@println("hack; %", addr); 
                    body := hack.emit_bc_and_aarch64(fid, .Jit);
                    if(body&.is_err(), => return(Err = self.box(body.Err)));
                    return(Ok = true);
                };
                @match(body) {
                    fn Redirect(target) => {
                        ptr := or self.aarch64&.get_fn(target[]) {
                            return(Suspend = self.wait_for(Jit = target[]))
                        };
                        // TODO: save in constants lookup too if take address 
                        self.aarch64&.extend_blanks(fid);
                        self.aarch64.dispatch[fid.as_index()] = ptr;
                    };
                    fn ComptimeAddr(_) => unreachable("ICE: comptime addr is done before.");
                    // TODO: do this before too? 
                    fn JittedAarch64(insts) => self.aarch64&.copy_inline_asm(fid, insts.items());
                    fn Merged(parts) => {
                        each parts { option |
                            if @check(self.fill_in_jit_pointer(fid, option)) return {
                                return(Ok = true);
                            };
                        };
                    }
                    @default => return(Ok = false);
                };
                (Ok = true)
            };
            
            if func.get_flag(.TookPointerValue) {
                ptr := self.aarch64&.get_fn(fid).expect("have jit addr");
                self.created_jit_fn_ptr_value(fid, ptr.int_from_rawptr());
            };
            
            // created function pointers are always added as mutual_callees to be more chill about loops. 
            waiting: List(*Task) = list(self.get_alloc());
            for func.mutual_callees { callee |
                @log_event("% mutual calls %", fid.as_index(), callee.as_index()) self;
                if self.aarch64&.get_fn(callee).is_none() {
                    new_task := self.get_alloc().alloc(Task, 1);
                    new_task := new_task.ptr;
                    new_task[] = (action = (Jit = callee), waiting_for = .None, parent = .None, id = self.dispatch.next_task_id);
                    self.dispatch.next_task_id += 1;
                    waiting&.push(new_task);
                } else {
                    func := self.get_function(callee);
                    @debug_assert(func.get_flag(.EnsuredCompiled));
                };
            };
            if waiting.len != 0 {
                @log_event("sleep on %/% mutual callees", waiting.len, func.callees.len) self;
                return(Suspend = self.wait_for(All = waiting));
            };
        }
        fn ResolveOverload(f) => {
            self.new_expression_stack();
            self.dispatch.enclosing_function = f.callsite;  // TODO: make test that fails without this.
            overloads := self.dispatch.overloads&.nested_index(f.os.as_index());
            @log_event("[TRY TASK] %: % %", task.action&.tag(), f.os, self.pool.get(overloads.name)) self;
            @debug_assert(f.call.expr.expr&.is(.Call), "overload resolve must be call");
            call := f.call.expr.expr.Call;
            fid := @check(self.resolve_in_overload_set_new(call.arg, f)) return;
            f_value := self.to_values(FuncId, fid);
            //call.f.set(f_value, fid); // THIS TYPE CHECKS! :FUCKED
            call.f.set(f_value, FuncId);
        }
        fn FinishRecType(it) => {
            @check(self.handle_finish_rec_type(it.hole, it.name, it.value)) return;
        }
        fn All(tasks) => {
            panic("exec all");
        } 
    };
    .Ok
}

fn is_mutually_recursive(task: *Task, callee: FuncId) bool = {
    while => task.waiting_for.is_some() {
        task = task.waiting_for.unwrap();
        @if_let(task.action) fn Jit(other) => {
            if other == callee {
                return(true);
            };
        };
    };
    while => task.parent.is_some() {
        task = task.parent.unwrap();
        @if_let(task.action) fn Jit(other) => {
            if other == callee {
                return(true);
            };
        };
    };
    false
}

fn would_block(self: *SelfHosted, action: Action) bool = {
    @match(action) {
        fn EvalConstant(v) => {
            var  := self.scopes.get_constant(v.name);
            var  := var.expect("var should always be known");
            !var._0.expr&.is(.Value)
        };
        fn CompileBody(fid)   => !self.get_function(fid).get_flag(.EnsuredCompiled);
        fn Jit(fid)           => self.aarch64&.get_fn(fid).is_none();
        fn FinishRecType(it)  => self.get_type(it.hole).is(.Placeholder);
        fn ResolveOverload(_)  => true;
    }
}

fn new_expression_stack(self: *SelfHosted) void = {
    // TODO: reuse these when finished?
    //       store them in the Action like compile_expr so can skip to theend if yielded? -- Jul 29
    ::CBox(List(ExprAttempt));
}

fn Maybe($T: Type) Type = {
    Self :: @tagged(
        Ok: T,
        Err: *ParseErr,
        Suspend: *Action,
    );
    
    fn is_err(self: Self) bool = self&.is(.Err);
    fn unwrap(self: Self) T = {
        if self&.is(.Err) {
            @panic("Unwrapped Maybe Err %", self.Err.msg);
        };
        ::tagged(Action);
        @assert(self&.is(.Ok), "unwrapped suspending Maybe %", self.Suspend.tag());
        self.Ok
    }
    
    fn unwrap_err(self: Self) *ParseErr = {
        if self&.is(.Err) {
            return(self.Err);
        };
        panic("unwrap_err not err")
    }
    
    ::tagged(Self);
    Self
}

fn wait_for(s: *SelfHosted, t: Action) *Action = {
    @log_event("[YIELD] %", t&.tag()) s;
    s.dispatch.yield_count += 1;
    mem := s.get_alloc().alloc(Action, 1);
    mem.ptr[] = t;
    mem.ptr
}
