fn index(comp: *SelfHosted, f: FuncId) *Func = {
    comp.functions&.nested_index(f.as_index())
}

fn unptr_ty(c: *SelfHosted, ty: Type) ?Type = {
    @match(c.get_type(ty)) {
        fn Ptr(inner) => (Some = inner[]);
        @default => .None; // TODO: do i need to raw_type? 
    }
}

// TODO: skip through named and unique as well.
fn ptr_depth(self: *SelfHosted, ptr_ty: Type) i64 = {
    ptr_ty = self.raw_type(ptr_ty);
    d := 0;
    while => self.unptr_ty(ptr_ty) { inner |
        d += 1;
        ptr_ty = self.raw_type(inner);
    };
    d
}

fn finished_ty(self: *Func) ?FnType = {
    if self.finished_arg { arg |
        if self.finished_ret { ret |
            return(Some = (arg = arg, ret = ret, arity = @as(u16) self.arg.bindings.len().max(1).trunc()));
        };
    };
    .None
}

:: tagged(FuncImpl);
fn jitted_aarch64(self: *FuncImpl) ?[]u32 = {
    @match(self) {
        fn JittedAarch64(code) => {
            return(Some = code.items());
        }
        fn Merged(parts) => {
            each parts { p |
                @if_let(p) fn JittedAarch64(code) => {
                    return(Some = code.items());
                };
            };
        }
        @default => ();
    };
    
    .None
}

fn ptr_type(self: *SelfHosted, inner: Type) Type = {
    self.intern_type(Ptr = inner)
}

// This converts a const type in the compiler's binary to a type id in the target program.
// It can only be done for some core interned types (not unique ones like structs and enums).
// :get_or_create_type @builtin doesn't call this but maybe should if I ever want to be able to change the numbers. 
fn get_or_create_type(self: *SelfHosted, $T: Type) Type = {
    info :: T.get_type_info_ref();
    @inline_match(info) {
        fn Int(_) => self.intern_type(info[]);
        // Some types have hardcoded ids. 
        // they can also be used directly but doing it through this function might make it less painful to decouple them later.
        fn Bool() => bool;
        fn void() => void;
        fn VoidPtr() => rawptr;
        @default => panic("Tried to convert unsupported type from const to runtime");
    }
}

fn specific(self: ResultType) ?Type = {
    ::if(?Type);
    @match(self) {
        fn Specific(t) => if(t == UnknownType, => .None, => (Some = t));
        @default => .None;
    }
}

fn set(self: *FatExpr, value: Values, ty: Type) void = {
    @debug_assert(!ty.is_unknown());
    self.expr = (Value = (bytes = value, coerced = false));
    self.ty = ty;
    self.done = true;
}

fn synthetic_ty(expr: Expr, loc: Span, ty: Type) FatExpr = {
    (expr = expr, loc = loc, ty = ty, done = false)
}

fn clone(self: *Values, a: Alloc) Values = {
    @match(self) {
        fn Small(_) => self[];
        fn Big(f) => (Big = f.items().clone(a).rs());
    }
}

fn tuple_of(self: *SelfHosted, types: []Type) Type #compiler = {
    @switch(types.len()) {
        @case(0) => void;
        @case(1) => types[0];
        @default => {
            // TODO: always. would need to change how you go arg_ty -> prim_sig.
            if types.len > 50 {|
                first := types[0];
                cond :: fn(t: *Type) bool => t[] != first;
                if !types.contains(cond) {|
                    return(self.intern_type(Array = (
                        inner = first,
                        len = types.len.trunc(),
                    )));
                };
            };
            // TODO: dont allocate the string a billion times
            fields: List(Field) = list(types.len, self.get_alloc());
            ::from_raw(Flag);
            ::enum(Flag);
            ::?Flag;
            ::if(Symbol);
            enumerate types { (i: i64, ty: *Type) void |
                // TODO: why the fuck doesnt this work. i dont want to allocate the string every time!!!
                //       it also doesnt work if you factor out the i->Symbol as a seperate function, even if you use the allocating verion that owrks hgere]
                //       -- Jul 29 :FUCKED
                //       also doesn't work if the loop is a range instead of enumerate. 
                //       this has to be a compiler bug. 
                //name := if i <= 20 {|
                //    idx := Flag._0.raw().add(i);
                //    (@as(?Flag) idx.from_raw()).unwrap().ident()
                //} else {|
                //    s := @format("_%", i) libc_allocator;
                //    self.pool.insert_owned(s.items())
                //};
                s := @format("_%", i) libc_allocator;
                name := self.pool.insert_owned(s.items());
                fields&.push(
                    name = name,
                    ty = ty[],
                    default = .None,
                    byte_offset = 99999999999,
                    kind = .Var,
                );
            };
            self.intern_type(Struct = (
                fields = fields.rs(),
                layout_done = false,
                is_tuple = true,
                const_field_count = 0,
            ))
        };
    }
}

fn err(arg: FatExpr) FatExpr #macro = {
    if !arg.expr&.is(.Tuple) {|
        return(@{ (Err = make_error(@[arg])) });
    };
    @{
        out: List(u8) = list(temp());
        @[ format_into(@{ out& }, arg.expr.Tuple.items(), arg.loc) ];
        (Err = make_error(out.items()))
    }
}

fn make_error(msg: Str) *ParseErr = {
    mem := libc_allocator.alloc(ParseErr, 1);
    mem.ptr[] = (span = Span.zeroed(), msg = msg);
    mem.ptr
}

:: CBox(FatExpr);
:: CBox(List(FatExpr));
:: CBox(ParseErr);
fn CBox($T: Type) void = {
    fn box(self: *SelfHosted, e: T) *T = {
        out := self.get_alloc().alloc(T, 1);
        out.ptr[] = e;
        out.ptr
    }
}

fn check(v: FatExpr, ret: FatExpr) FatExpr #macro = @{
    v := @[v];
    if(!v&.is(.Ok)) {|
        if(v&.is(.Err), => { @[ret](Err = v.Err); }, => { @[ret](Suspend = v.Suspend); });
    };
    v.Ok
}

fn want(self: *LazyType) ResultType = {
    @match(self) {
        fn Finished(t) => (Specific = t[]);
        fn Returning(t) => (Returning = t[]);
        @default => .None;
    }
}

fn want(self: ?Type) ResultType = {
    @match(self) {
        fn Some(t) => (Specific = t);
        fn None() => .None;
    }
}

fn want(self: Type) ResultType = {
    if(self.is_unknown(), => return(.None));
    (Specific = self)
}

fn as_index(f: OverloadSet) i64 = f.to_index().zext();

fn to_index(f: OverloadSet) u32 = {
    i := ptr_cast_unchecked(From = OverloadSet, To = u32, ptr = f&)[];
    magic_offset :: 28;  // must match ast.rs
    mask: u32 : 1.shift_left(magic_offset).bit_not().trunc();
    i.bit_and(mask)
}

fn overloadset_from_index(idx: i64) OverloadSet = {
    magic_offset :: 28;  // must match ast.rs
    val: u32 = 1.shift_left(magic_offset).bit_or(idx).trunc();
    ptr_cast_unchecked(From = u32, To = OverloadSet, ptr = val&)[]
}

:: {
    AutoClone(get_variant_type(Expr, Expr.Tag().Value));
    AutoClone(get_variant_type(Expr, Expr.Tag().Switch));
    AutoClone(get_variant_type(Expr, Expr.Tag().Call));
    AutoClone(get_variant_type(Expr, Expr.Tag().Block));
    AutoClone(get_variant_type(Expr, Expr.Tag().FieldAccess));
    AutoClone(get_variant_type(Expr, Expr.Tag().PrefixMacro));
    AutoClone(get_variant_type(Expr, Expr.Tag().PtrOffset));
    AutoClone(get_variant_type(Expr, Expr.Tag().If));
    AutoClone(get_variant_type(Expr, Expr.Tag().As));
    AutoClone(Expr);
    AutoClone(FatExpr);
    AutoClone(Stmt);
    AutoClone(FatStmt);
    AutoClone(Binding);
    AutoClone(LazyType);
    AutoClone(Values);
    AutoClone(Func);
    AutoClone(Annotation);
    AutoClone(FuncImpl);
    AutoClone(*FatExpr);
    AutoClone(*Func);
    AutoClone(?FatExpr);
    AutoClone(Ty(i64, FatExpr));
    AutoClone(Pattern);
    AutoClone(get_variant_type(Stmt, Stmt.Tag().DeclVar));
    AutoClone(get_variant_type(Stmt, Stmt.Tag().DeclVarPattern));
    AutoClone(get_variant_type(Stmt, Stmt.Tag().DeclNamed));
    AutoClone(get_variant_type(Stmt, Stmt.Tag().Set));
};
