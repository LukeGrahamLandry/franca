
::assert_eq(Symbol);

#use("@/lib/collections/map.fr");
StringPool :: @struct(
    lookup: HashMap(Str, Symbol),
    values: List(Str),
    null_terminated: import("@/lib/collections/bit_set.fr").BitSet,
);

// note: the compiler manually fills in all of get_enum_names(Flag) so it can produce constants of those strings without a hash lookup. 
fn init(alloc: Alloc) StringPool = {
    lookup: HashMap(Str, Symbol) = init(alloc);
    l: List(Str) = list(alloc);
    self: StringPool = (lookup = lookup, values = l, null_terminated = empty());
    self
}

// SAFETY: 'i' must be the result of inserting into 'self'
fn get(self: *StringPool, i: Symbol) Str = 
    self[].values[i.id().zext()];

fn get_c_str(self: *StringPool, i: Symbol) CStr = {
    index: i64 = i.id().zext();
    s := self.get(i);
    ::if(CStr);
    if self.null_terminated&.get(index) {
        (ptr = s.ptr)
    } {
        self.null_terminated&.set(index, self.values.gpa);
        owned := s.clone(self.values.gpa);
        owned&.push(0);
        owned.len -= 1; // next time we lookup the string, don't include the zero.
        self.values[index] = owned.items(); // TODO: free on drop()
        (ptr = owned.maybe_uninit.ptr)
    }
}
    
// SAFETY: 's' must not be deallocated during the lifetime of 'self' 
fn insert_owned(self: *StringPool, s: Str) Symbol = {
    ::if_opt(Symbol, Symbol);
    // TODO: better closure type inference
    if(self[].lookup&.get(s)) {i|
        i
    }{
        i: Symbol = symbol_from_id(self[].values.len.trunc());
        self[].lookup&.insert(s, i);
        self[].values&.push(s);
        i
    }
}

fn insert_borrowed(self: *StringPool, s: Str, a: Alloc) Symbol = {
    if self.lookup&.get(s) { i |
        return i;
    };
    s2 := s.shallow_copy(a);
    self.insert_owned(s2)
}

// TODO: derive drop impls
// TODO: should I drop the strings? should take lists so ownership is clear. but then you're forced to make copies. what if you know the strings will outlive the pool? 
fn drop(self: *StringPool) void = {
    self[].lookup&.drop();
    self[].values&.drop();
}

fn fill_fixed_flags(pool: *StringPool) void = {
    range(0, Flag.enum_count()) { i |
        name := Flag.enum_name_from_ordinal(i);
        s := pool.insert_owned(name);
        assert_eq(i, @as(i64) s.id().zext());
    };
}
