const Ident = @struct(id: i64);
fn eq(a: Ident, b: Ident) bool = eq(a.id, b.id);

const StringPool = @struct(
    lookup: HashMap(Str, Ident),
    values: List(Str),
);

// TODO: don't hardcode allocator if this becomes a lib thing. 
fn init() StringPool = {
    let lookup: HashMap(Str, Ident) = init(libc_allocator);
    let l: List(Str) = list(libc_allocator);
    let self: StringPool = (lookup = lookup, values = l);
    self
}

// SAFETY: 'i' must be the result of inserting into 'self'
fn get(self: *StringPool, i: Ident) Str = {
    self[].values&.get(i.id)
}

// SAFETY: 's' must not be deallocated during the lifetime of 'self' 
fn insert_owned(self: *StringPool, s: Str) Ident = {
    // TODO: better closure type inference
    if(self[].lookup&.get(s)) {i|
        i
    }{|
        let i: Ident = (id = self[].values.len);
        self[].lookup&.insert(s, i);
        self[].values&.push(s);
        i
    }
}

// TODO: derive drop impls
// TODO: should I drop the strings? should take lists so ownership is clear. but then you're forced to make copies. what if you know the strings will outlive the pool? 
fn drop(self: *StringPool) Unit = {
    self[].lookup&.drop();
    self[].values&.drop();
}

#test fn test_string_pool() Unit = {
    m: StringPool = init();
    let s: Str = "hello";
    let b: Str = "goodbye";
    let hello = m&.insert_owned(s);
    let hello2 = m&.insert_owned(s);
    let bye = m&.insert_owned(b);
    assert_eq(true, eq(hello, hello2));
    assert_eq(false, eq(hello, bye));
    let s2 = m&.get(hello);
    assert_eq(true, eq(s, s2));
    let b2 = m&.get(bye);
    assert_eq(false, eq(b2, s2));
    assert_eq(true, eq(b, b2));
    m&.drop();
}
