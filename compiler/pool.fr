
::assert_eq(Symbol);

StringPool :: @struct(
    lookup: HashMap(Str, Symbol),
    values: List(Str),
);

fn init(alloc: Alloc) StringPool = {
    lookup: HashMap(Str, Symbol) = init(alloc);
    l: List(Str) = list(alloc);
    self: StringPool = (lookup = lookup, values = l);
    self
}

// SAFETY: 'i' must be the result of inserting into 'self'
fn get(self: *StringPool, i: Symbol) Str #compiler = 
    self[].values[i.id().zext()];

// SAFETY: 's' must not be deallocated during the lifetime of 'self' 
fn insert_owned(self: *StringPool, s: Str) Symbol #compiler = {
    // TODO: better closure type inference
    if(self[].lookup&.get(s)) {i|
        i
    }{|
        i: Symbol = symbol_from_id(self[].values.len.trunc());
        self[].lookup&.insert(s, i);
        self[].values&.push(s);
        i
    }
}

// TODO: derive drop impls
// TODO: should I drop the strings? should take lists so ownership is clear. but then you're forced to make copies. what if you know the strings will outlive the pool? 
fn drop(self: *StringPool) void = {
    self[].lookup&.drop();
    self[].values&.drop();
}

#test fn test_string_pool() void = {
    m: StringPool = init(temp());
    s: Str = "hello";
    b: Str = "goodbye";
    hello := m&.insert_owned(s);
    hello2 := m&.insert_owned(s);
    bye := m&.insert_owned(b);
    assert_eq(true, eq(hello, hello2));
    assert_eq(false, eq(hello, bye));
    s2 := m&.get(hello);
    assert_eq(true, eq(s, s2));
    b2 := m&.get(bye);
    assert_eq(false, eq(b2, s2));
    assert_eq(true, eq(b, b2));
    m&.drop();
}
