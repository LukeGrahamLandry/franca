
::assert_eq(Symbol);

StringPool :: @struct(
    lookup: HashMap(Str, Symbol),
    values: List(Str),
    null_terminated: BitSet,
);

// note: the compiler manually fills in all of get_enum_names(Flag) so it can produce constants of those strings without a hash lookup. 
fn init(alloc: Alloc) StringPool = {
    lookup: HashMap(Str, Symbol) = init(alloc);
    l: List(Str) = list(alloc);
    self: StringPool = (lookup = lookup, values = l, null_terminated = empty());
    self
}

// SAFETY: 'i' must be the result of inserting into 'self'
fn get(self: *StringPool, i: Symbol) Str = 
    self[].values[i.id().zext()];

fn get_c_str(self: *StringPool, i: Symbol) CStr = {
    index: i64 = i.id().zext();
    s := self.get(i);
    ::if(CStr);
    if self.null_terminated&.get(index) {
        (ptr = s.ptr)
    } {
        self.null_terminated&.set(index, self.values.gpa);
        owned := s.clone(self.values.gpa);
        owned&.push(0);
        owned.len -= 1; // next time we lookup the string, don't include the zero.
        self.values[index] = owned.items(); // TODO: free on drop()
        (ptr = owned.maybe_uninit.ptr)
    }
}
    
// SAFETY: 's' must not be deallocated during the lifetime of 'self' 
fn insert_owned(self: *StringPool, s: Str) Symbol = {
    ::if_opt(Symbol, Symbol);
    // TODO: better closure type inference
    if(self[].lookup&.get(s)) {i|
        i
    }{
        i: Symbol = symbol_from_id(self[].values.len.trunc());
        self[].lookup&.insert(s, i);
        self[].values&.push(s);
        i
    }
}

// TODO: derive drop impls
// TODO: should I drop the strings? should take lists so ownership is clear. but then you're forced to make copies. what if you know the strings will outlive the pool? 
fn drop(self: *StringPool) void = {
    self[].lookup&.drop();
    self[].values&.drop();
}

fn fill_fixed_flags(pool: *StringPool) void = {
    enumerate (::get_enum_names(Flag)) {i, name|
        s := pool.insert_owned(name[]);
        assert_eq(i, @as(i64) s.id().zext());
    };
}

Flag :: @enum(i64) (
    SYMBOL_ZERO,
    toplevel,
    include_std,
    Anon,
    if,
    UN_NAMED,
    
    // TODO: HACK
    // TODO: use this
    first_dumb_type_name, T, Self, RAW, last_dumb_type_name,
    
    // These are function #tags that the compiler knows about. 
    log_bc, log_asm, log_ir, log_ast, log_asm_bc,
    cold, inline, noinline, asm, c_call, unsafe_noop_cast, 
    import, intrinsic, libc, redirect, comptime_addr,
    once, fold, no_trace, ct, outputs, macro, 
    link_rename, generic, target_os, 
    llvm, aarch64, x86, qbe, c, x86_bytes,
    no_tail, // TOOD: HACK. stack ptr/slice arg is UB so have to manually use this! not acceptable!
    
    // These are variables that are automatically shadowed in new scopes. 
    return, local_return,
    
    // These are macros that need to be called before we've compiled enough to evaluate the type FatExpr.
    builtin, type, struct, tagged, enum, late,
    
    // This is a magic blessed macro with no implementation but recognised by name. 
    rec, 
    
    // These are operators that have syntax desugaring. 
    add, sub, mul, div, lt, gt, ge, le, eq, ne, neg, not, and, or,  
    operator_squares_prefix, operator_star_prefix, operator_question_prefix, operator_index,
    operator_plus_equal, operator_minus_equal, operator_star_equal, operator_slash_equal,
    __string_escapes,
    
    // These can be used with @builtin.
    OverloadSet, ScopeId, FuncId, LabelId, Symbol, i64, bool, true, false, void, Type, rawptr, Never, f64, f32, UnknownType,
    compiler_debug_assert_eq_i64,  // this is maybe helpful for debugging the compiler when nothing works at all. 
    
    // These must be in order because tuple field names use them and compute by offsetting Flag._0.raw().
     _0,  _1,  _2,  _3,  _4,  _5,  _6,  _7,  _8,  _9, 
    _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20,
    
    // These are libc functions the compiler can provide for comptime code even when it can't dlopen a libc. 
    // These are chosen arbitrarily based on what tests i want to run in blink emulator. 
    mmap, abort, write, read, munmap, open, close, mprotect, __clear_cache, uname, clock_gettime, malloc, free, 
);

fn ident(name: Flag) Symbol = {
    symbol_from_id((@as(i64) name).trunc())
}
