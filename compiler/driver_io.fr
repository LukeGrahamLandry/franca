//! All communication between the compiler and the outside world should go through the driver program. 
//! This file has defaults used to load drivers (but they can be skipped entirely by precompiling to a dynamic library,
//! and passing that to the compiler, just be careful about ABI breakage).
//! The ExportVTable will be prepopulated with these functions and you can replace them as needed. 
//! For sanity's sake, the compiler itself should be buildable with these defaults so its not super painful to change the ABI. 

// TODO: bring back dylib drivers
// TODO: add to import vtable but provide default implementations. 
//       disassembler, find_std_lib, comptime libc, get_include_std, comptime jit
// TODO: remove comptime jit switching on Backend and just use opaque pointer. 
// TODO: std lib Nullable(*T) with the same api as ?*T but a niche. 
// find_std_lib: @FnPtr(userdata: rawptr, c: Compiler) ?Str,
// get_include_std: @FnPtr(userdata: rawptr, c: Compiler, name: Str) ?WaitingParse,
// comptime_jit_init: @FnPtr(data: *SelfHosted, vtable: *BackendImportVTable, dispatch_ptr: i64) Result(rawptr, Str); 
// comptime_jit_emit: @FnPtr(jit_userdata: rawptr, f: FuncId, body: *FnBody, compile_ctx_ptr: CompilerRs) Result(void, Str); 
// comptime_jit_free: @FnPtr(jit_userdata: rawptr, f: FuncId, body: *FnBody, compile_ctx_ptr: CompilerRs) Result(void, Str); 
// disassemble: @FnPtr(userdata: rawptr, bytes: []u8, out: *List(u8)) Result(void, Str),

fn default_driver_exports() ExportVTable = {
    vtable: ExportVTable = (
        resolve_comptime_import = .None,
        log_event = .None,
    );
    vtable
}


////////////////////
/// Defaults

// get_include_std: @FnPtr(userdata: rawptr, c: Compiler, name: Str) ?Str = .None,
// fn driver_get_include_std(_userdata: rawptr, c: Compiler, name: Str) ?Str = {}

//////////////////////////////////
/// Entry points from the compiler

fn resolve_comptime_import(self: *SelfHosted, fid: FuncId, func: *Func, lib_name: Symbol) void = {
    // TODO: allow it to tell us no that doesn't exist
    opts := self.get_build_options();
    if opts.driver_vtable_ptr.resolve_comptime_import { callback | 
        legacy := self.legacy_indirection;
        // TODO: whose job is it to deal with :link_rename?
        @match(callback(opts.driver_vtable_user_data, legacy, fid, lib_name, func.name)) {
            fn Some(addr) => {
                impls := self.get_alloc().alloc(FuncImpl, 2);
                impls[0] = (ComptimeAddr = addr.int_from_rawptr());
                impls[1] = (DynamicImport = func.name);
                func.body = (Merged = impls.as_raw_list());
                self.put_jitted_import(fid, addr);;
            }
            fn None() => {
                // TODO: warn? have different #import that means we expect not at comptime?
                func.body = (DynamicImport = func.name);
            }
        };
    };
}

// Boring. used for the compiler_gui
fn log_event(fmt_args: FatExpr, compiler: FatExpr) FatExpr #macro = {
    if DEBUG_SPAM_LOG {
        return(println(fmt_args));
    };
    @if(ENABLE_LOGGING_CALLBACKS, @{
        c := @[compiler];
        opts := c.get_build_options();
        if opts.driver_vtable_ptr.log_event { callback | 
            legacy := c.legacy_indirection;
            msg := (@format(@[fmt_args]) temp()).items();
            event: CompilerLogEvent = (Msg = msg);
            callback(opts.driver_vtable_user_data, legacy, event&);
        };
    }, @{ 1 + 1; })
}

// These record_* things store information for lsp and compiler_gui. 

fn record_var_declare(c: *SelfHosted, var: Var, loc: Span) void = {
    @if(ENABLE_LOGGING_CALLBACKS) {
        while => var.id != c.index.variables.len.trunc() {
            c.index.variables&.push(.None);
        };
        c.index.variables&.push(Some = (declaration = loc, usages = empty(), var = var));
    };
}

fn record_var_usage(c: *SelfHosted, var: Var, loc: Span) void = {
    @if(ENABLE_LOGGING_CALLBACKS) {
        if c.index.variables&.nested_index(var.id.zext()) { info | 
            info.usages&.push(loc, c.index.a);
        };
    };
}

fn record_function_call(c: *SelfHosted, caller: FuncId, callee: FuncId) void = {
    @if(ENABLE_LOGGING_CALLBACKS) {
        idx := callee.as_index();
        while => idx >= c.index.callers.len {
            c.index.callers&.push(empty());
        };
        callers := c.index.callers&.nested_index(idx);
        callers.add_unique(caller, c.get_alloc());
    };
}
