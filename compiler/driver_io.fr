//! All communication between the compiler and the outside world should go through the driver program. 
//! This file has defaults used to load drivers (but they can be skipped entirely by precompiling to a dynamic library,
//! and passing that to the compiler, just be careful about ABI breakage).
//! For sanity's sake, the compiler itself should be buildable with these defaults so its not super painful to change the ABI. 

fn sync_driver_message(self: *SelfHosted, in: DriverMessage) DriverResult = {
    in: []DriverMessage = (ptr = in&, len = 1);
    out: DriverResult = .Continue;
    out: []DriverResult = (ptr = out&, len = 1);
    f := self.get_build_options()[].handle_message;
    f(in, out);
    if out.index(0).is(.Continue) {
        builtin_driver_callback(in, out);
    };
    out[0]
}

// TODO: put this in the vtable as well so they can super()? 
fn builtin_driver_callback(in: []DriverMessage, out: []DriverResult) void = {
    self := current_comptime();
    enumerate in { i, msg |
        out[i] = @match(msg) {
            fn ReadSourceCode(it) => {
                name := self.pool.get(it.path);
                ::if(?Str);
                a := self.get_alloc();
                src: ?Str = if name == "compiler" {
                    code: List(u8) = list(self.get_alloc());
                    fill_export_ffi(code&);
                    (Some = code.items())
                } else {
                    lib := STDLIB_PATH[].unwrap();
                    check := @tfmt("%/%", lib, name);
                    out := u8.list(a);
                    if read_and_push(out&, check) {
                        (Some = out.items())
                    } else {
                        if read_and_push(out&, name) {
                            (Some = out.items())
                        } else {
                            .None
                        }
                    }
                };
                (String = src)
            }
            fn Log(it) => {
                eprintln(it.message);
                .Continue
            }
            @default => .Continue;
        };
    };
}


// TODO: remove ExportVTable. i think the message @tagged is less painful
fn default_driver_exports() ExportVTable = {
    vtable: ExportVTable = (
        resolve_comptime_import = .None,
        log_event = .None,
    );
    vtable
}

//////////////////////////////////
/// Entry points from the compiler

fn get_include_std(c: *SelfHosted, name: Str) ?WaitingParse = {
    zone := zone_begin(.LoadFile); // TODO: defer
    result := c.sync_driver_message(ReadSourceCode = (path = c.pool.insert_owned(name)));
    ::tagged(@type result);
    @assert(result&.is(.String), "bad ReadSourceCode impl");
    src := result.String || return(.None);
    file := c.codemap.add_file(name, src);
    id := push_parse(c.parser, src, file);
    zone_end(zone);
    (Some = id)
}

fn resolve_comptime_import(self: *SelfHosted, fid: FuncId, func: *Func, lib_name: Symbol) void = {
    // TODO: allow it to tell us no that doesn't exist
    opts := self.get_build_options();
    if opts.driver_vtable_ptr.resolve_comptime_import { callback | 
        legacy := self.legacy_indirection;
        // TODO: whose job is it to deal with :link_rename?
        @match(callback(opts.driver_vtable_user_data, legacy, fid, lib_name, func.name)) {
            fn Some(addr) => {
                func.body = (DynamicImport = (name = func.name, lib = lib_name, comptime = addr.int_from_rawptr()));
                self.put_jitted_import(fid, addr);;
            }
            fn None() => {
                // TODO: warn? have different #import that means we expect not at comptime?
                func.body = (DynamicImport = (name = func.name, lib = lib_name, comptime = 0));
            }
        };
    };
}

// Boring. used for the compiler_gui
fn log_event(fmt_args: FatExpr, compiler: FatExpr) FatExpr #macro = {
    if DEBUG_SPAM_LOG {
        return(println(fmt_args));
    };
    @if(ENABLE_LOGGING_CALLBACKS, @{
        c := @[compiler];
        opts := c.get_build_options();
        if opts.driver_vtable_ptr.log_event { callback | 
            legacy := c.legacy_indirection;
            msg := @tfmt(@[fmt_args]);
            event: CompilerLogEvent = (Msg = msg);
            callback(opts.driver_vtable_user_data, legacy, event&);
        };
    }, @{ 1 + 1; })
}

// These record_* things store information for lsp and compiler_gui. 

fn record_var_declare(c: *SelfHosted, var: Var, loc: Span) void = {
    @if(ENABLE_LOGGING_CALLBACKS) {
        while => var.id != c.index.variables.len.trunc() {
            c.index.variables&.push(.None);
        };
        c.index.variables&.push(Some = (declaration = loc, usages = empty(), var = var));
    };
}

fn record_var_usage(c: *SelfHosted, var: Var, loc: Span) void = {
    @if(ENABLE_LOGGING_CALLBACKS) {
        if c.index.variables&.nested_index(var.id.zext()) { info | 
            info.usages&.push(loc, c.index.a);
        };
    };
}

fn record_function_call(c: *SelfHosted, caller: FuncId, callee: FuncId) void = {
    @if(ENABLE_LOGGING_CALLBACKS) {
        idx := callee.as_index();
        while => idx >= c.index.callers.len {
            c.index.callers&.push(empty());
        };
        callers := c.index.callers&.nested_index(idx);
        callers.add_unique(caller, c.get_alloc());
    };
}
