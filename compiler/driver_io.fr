fn get_include_std(a: Alloc, name: Str) ?Str = {
    ::if(?Str);
    if name == "compiler" {
        code: List(u8) = list(a);
        fill_export_ffi(code&);
        (Some = code.items())
    } else {
        lib := STDLIB_PATH[].unwrap();
        check := @tfmt("%/%", lib, name);
        out := u8.list(a);
        if read_and_push(out&, check) {
            (Some = out.items())
        } else {
            if read_and_push(out&, name) {
                (Some = out.items())
            } else {
                .None
            }
        }
    }
}

fn get_include_std(c: *SelfHosted, name: Str) ?WaitingParse = {
    zone := zone_begin(.LoadFile); // TODO: defer
    src := get_include_std(c.get_alloc(), name) || return(.None);
    file := c.codemap.add_file(name, src);
    id := push_parse(c.parser, src, file);
    zone_end(zone);
    (Some = id)
}

// These record_* things store information for lsp and compiler_gui. 

fn record_var_declare(c: *SelfHosted, var: Var, loc: Span) void = {
    @if(ENABLE_LOGGING_CALLBACKS) {
        while => var.id != c.index.variables.len.trunc() {
            c.index.variables&.push(.None);
        };
        c.index.variables&.push(Some = (declaration = loc, usages = empty(), var = var));
    };
}

fn record_var_usage(c: *SelfHosted, var: Var, loc: Span) void = {
    @if(ENABLE_LOGGING_CALLBACKS) {
        if c.index.variables&.nested_index(var.id.zext()) { info | 
            info.usages&.push(loc, c.index.a);
        };
    };
}

fn record_function_call(c: *SelfHosted, caller: FuncId, callee: FuncId) void = {
    @if(ENABLE_LOGGING_CALLBACKS) {
        idx := callee.as_index();
        while => idx >= c.index.callers.len {
            c.index.callers&.push(empty());
        };
        callers := c.index.callers&.nested_index(idx);
        callers.add_unique(caller, c.get_alloc());
    };
}
