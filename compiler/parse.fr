ParseTask :: @tagged(
    Pending: @struct(src: Str, span: Span),
    Expr: Ast.FatExpr,
    Stmt: Ast.FatStmt,
    Err: ParseErr, 
);
Parser :: @struct(lex: Lexer, tasks: *List(ParseTask), alloc: Alloc);
ParseErr :: @struct(span: Ast.Span, msg: Str);

// TODO: non-existant field name for @tagged is a panic because its in a mut_replace. 
fn parse_expr(self: *Parser, id: i64) Result(Ast.FatExpr, ParseErr) = {
    // TODO: can't access field on rvalue. 
    where := self.lex&.pop();
    // TODO: you can't return a pair at comptime if its not a pair of ints. (u32, u32) gives back 16 bytes from ffi::c and then compiler::jit crashes on it for being the wrong size. 
    fuck: Ast.Span = ()!uninitialized;
    (Ok = (expr = (GetNamed = @symbol hello), loc = fuck, ty = UnknownType, done = true))
}

#test fn parser_doesnt_crash() = {
    codemap: CodeMap = init(libc_allocator);
    src := "a + 1";
    span := codemap&.add_file("name", src);
    tasks: List(ParseTask) = list(libc_allocator);
    ctx: Parser = (lex = init(span, src), tasks = tasks&, alloc = libc_allocator);
    tasks&.push((Pending = (src = src, span = span)));
    res := ctx&.parse_expr(0);
    @match(res) {
        (fn Ok(t) => println("parsed!"));
        (fn Err(e) => println("err!"));
    };
}
