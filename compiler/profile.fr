#include_std("bindings/tracy.fr");

TraceCtx :: @if(ENABLE_TRACY, TracyZoneContext, void);

TraceZone :: @enum(i64) (EmitIr, AotPump, Backend, Scope, LoadFile, Parse, SemaFunction, SemaOverloads, Task, CallDynamic, BakeConstArgs, Wait, CloneExpr);
::enum(TraceZone);
// TODO: can't index by pointer a const array
ZONE_COLOURS :: @static(Array(u32, enum_count(TraceZone))) @array(0x00FF0066, 0x00FF0000, 0x00FF6600, 0x0000FF00, 0x000000FF, 0x000000FF, 
    0x00FF00FF, 0x00EE00AA, 0x00AAFFAA, 0x00888800, 0x00AA0099, 0x00000001, 0x0000FF44);

// TODO: caller location
// :sema_regression this used to work as an overload set and pass the hint
zone_begin :: fn(zone: TraceZone) TraceCtx = {
    @if(ENABLE_TRACY) {
        src :: {
            n := ast_alloc().alloc(TracySourceLocation, enum_count(TraceZone));
            for_enum TraceZone { e |
                n[@as(i64) e] = (
                    name = e.name_str().sym().c_str(),
                    function = "",
                    file = "",
                    line_u32_color32 = ZONE_COLOURS.items()[e.raw()].zext().shift_left(32),
                );
            };
            n
        };
        ZONE_COLOURS;
        s := src.index(@as(i64) zone);
        ___tracy_emit_zone_begin(s, 1)
    }
};

fn zone_end(c: TraceCtx) void = {
    @if(ENABLE_TRACY, ___tracy_emit_zone_end(c), ());
}

// /Users/luke/Downloads/tracy-master/profiler/cmake-build-release/tracy-profiler
// FRANCA_TRACY=true franca examples/default_driver.fr build compiler/main.fr -o trace.out
