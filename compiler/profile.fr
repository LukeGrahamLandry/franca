#include_std("bindings/tracy.fr");

TraceCtx :: @if(ENABLE_TRACY, TracyZoneContext, void);

TraceZone :: @enum(i64) (EmitAarch64, EmitBc, EmitLlvm, EmitQbe, Scope, LoadFile, Parse);
::enum(TraceZone);
// TODO: can't index by pointer a const array
ZONE_COLOURS :: @static(Array(u32, 7)) @array(0x00FF0066, 0x00FF0000, 0x00FF6600, 0x00FF6600, 0x0000FF00, 0x000000FF, 0x000000FF);

// TODO: caller location
// :sema_regression this used to work as an overload set and pass the hint
zone_begin :: fn($zone: TraceZone) TraceCtx = {
    @if(ENABLE_TRACY) {
        ZONE_COLOURS;  // TODO: this is dumb. makes it create the type so you can call the overloads below. 
        forever :: @static(TracySourceLocation);  // Test that this gets a unique memory address for each const value
        src: TracySourceLocation = (
            name = @run zone.name().c_str(),
            function = "".sym().c_str(),
            file = "".sym().c_str(),
            line = 1,
            color = ZONE_COLOURS.items()[zone.ordinal()],
        );
        forever[] = src;
        ___tracy_emit_zone_begin(forever, 1)
    }
};

fn zone_end(c: TraceCtx) void = {
    @if(ENABLE_TRACY, ___tracy_emit_zone_end(c), ());
}

// TODO: do this in first.fr
// RUSTFLAGS="-Zlocation-detail=none --remap-path-prefix $HOME=~" cargo +nightly build -Z build-std=std,panic_abort -Z build-std-features=panic_immediate_abort --target aarch64-apple-darwin --release
// ar rc libtracy.a tracy.o
// clang /Users/luke/Documents/mods/infered/target/aarch64-apple-darwin/release/deps/libfranca.a compiler/target/libfranca.o compiler/target/franca/aarch64-macos/libtracy.a
// /Users/luke/Downloads/tracy-master/profiler/cmake-build-release/tracy-profiler
