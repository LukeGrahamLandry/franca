// Adapted from Qbe. MIT License. Â© 2015-2024 Quentin Carbonneaux <quentin@c9x.me>

//! Various computations about a function's control flow graph.
// :Explain

fn edgedel(source: *Qbe.Blk, dest_p: **Qbe.Blk) void = {
    dest := dest_p[];
    multiplicity := 1 + if(source.s1.identical(source.s2), => 1, => 0);
    dest_p[] = Qbe.Blk.ptr_from_int(0);
    if dest.is_null() || multiplicity > 1 {
        return();
    };
    
    // remove the phis along this edge.
    // this would happen for free if we used block arguments instead of phis, but phis are more convient in other passes. 
    for_phi dest { p |
        // find the phi's value in dest when coming from source.
        a := 0;
        while => !p.blk[a].identical(source) {
            @debug_assert(a + 1 < p.narg.zext(), "tried to remove nonexistant edge (a phi has no value in % when coming from %)", dest.name(), source.name());
            a += 1;
        };
        
        // and remove that option from the array
        p.narg -= 1;
        memmove(raw_from_ptr(*Qbe.Blk, p.blk.first.offset(a)), raw_from_ptr(*Qbe.Blk, p.blk.first.offset(a + 1)), size_of(*Qbe.Blk) * (p.narg.zext() - a));
        memmove(raw_from_ptr(Qbe.Ref, p.arg.first.offset(a)), raw_from_ptr(Qbe.Ref, p.arg.first.offset(a + 1)), size_of(Qbe.Ref) * (p.narg.zext() - a));
    };
    
    if dest.npred != 0 {
        // record that source is no longer a predecessor of dest. 
        a := 0;
        while => !dest.pred.offset(a)[].identical(source) {
            @debug_assert(a + 1 < dest.npred.zext(), "tried to remove nonexistant edge (% not a predecessor of %)", source.name(), dest.name());
            a += 1;
        };
        dest.npred -= 1;
        memmove(raw_from_ptr(*Qbe.Blk, dest.pred.offset(a)), raw_from_ptr(*Qbe.Blk, dest.pred.offset(a + 1)), size_of(*Qbe.Blk) * (dest.npred.zext() - a));
    };
}

fn addpred(bp: *Qbe.Blk, bc: *Qbe.Blk) void = {
    if bc.pred.is_null() {
        mem := libc_allocator.alloc(@type bc.pred[], bc.npred.zext()); // :HardcodeAlloc :Leak have an arena like qbe's pool
        bc.pred = mem.ptr;
        bc.visit = 0;
    };
    bc.pred.offset(bc.visit.zext())[] = bp;
    bc.visit += 1;
}

/* fill predecessors information in blocks */
fn fillpreds(f: *Qbe.Fn) void = {
    for_blocks f { b |
        b.npred = 0;
        b.pred = ptr_from_int(*Qbe.Blk, 0);
    };
    // count first so we don't have to resize the array
    for_blocks f { b |
        for_jump_targets b { s | 
            s.npred += 1;
        };
    };
    for_blocks f { b |
        for_jump_targets b { s | 
            addpred(b, s);
        };
    }
}

fn rporec(b: *Qbe.Blk, x: i32) i32 = {
    if b.is_null() || b.id != -1 {
        return(x);
    };
    b.id = 1;
    s1 := b.s1;
    s2 := b.s2;
    if !s1.is_null() && !s2.is_null() && s1.loop > s2.loop {
        s1 = b.s2;
        s2 = b.s1;
    };
    x = rporec(s1, x);
    x = rporec(s2, x);
    b.id = x;
    @debug_assert(x != -1);
    x - 1
}

/* fill the rpo information */
fn fillrpo(f: *Qbe.Fn) void = {
    for_blocks f { b | 
        b.id = bitcast(@as(i32) -1);
    };
    xxx: i32 = f.nblk.bitcast() - 1;
    n := rporec(f.start, xxx) + 1;
    f.nblk = f.nblk - n;
    mem := libc_allocator.alloc(*Qbe.Blk, f.nblk.zext()); // :HardcodeAlloc
    f.rpo = mem.ptr;
    p := f.start&;
    while => !p[].is_null() {
        b := p[];
        if b.id == -1 {
            edgedel(b, b.s1&);
            edgedel(b, b.s2&);
            p[] = b.link;
        } else {
            b.id -= n;
            f.rpo.offset(b.id.zext())[] = b;
            p = b.link&;
        }
    }
}

/* for dominators computation, read
 * "A Simple, Fast Dominance Algorithm"
 * by K. Cooper, T. Harvey, and K. Kennedy.
 */

fn inter(b1: *Qbe.Blk, b2: *Qbe.Blk) *Qbe.Blk = {
    if(b1.is_null(), => return(b2));
    while => !b1.identical(b2) {
        if b1.id < b2.id {
            bt := b1;
            b1 = b2;
            b2 = bt;
        };
        while => b1.id > b2.id {
            b1 = b1.idom;
            @debug_assert(!b1.is_null(), "null idom");
        }
    };
    b1
}

fn filldom(f: *Qbe.Fn) void = {
    for_blocks f { b |
        b.idom = Qbe.Blk.ptr_from_int(0);
        b.dom = Qbe.Blk.ptr_from_int(0);
        b.dlink = Qbe.Blk.ptr_from_int(0);
    };
    dowhile {
        changed := false;
        range(1, f.nblk.zext()) { n |
            b := f.rpo.offset(n)[];
            d := Qbe.Blk.ptr_from_int(0);
            for_pred b { p |
                if !p.idom.is_null() || p.identical(f.start) {
                    d = inter(d, p);
                }
            };
            if !d.identical(b.idom) {
                changed = true;
                b.idom = d;
            }
        };
        changed
    };
    
    for_blocks f { b | 
        d := b.idom;
        if !d.is_null() {
            @debug_assert(!d.identical(b), "can't idom youself");
            b.dlink = d.dom;
            d.dom = b;
        };
    };
}

fn sdom(b1: *Qbe.Blk, b2: *Qbe.Blk) bool = {
    @debug_assert(!b1.is_null() && !b2.is_null(), "sdom null");
    if(b1.identical(b2), => return(false));
    while => b2.id > b1.id {
        b2 = b2.idom;
    };
    b1.identical(b2)
}

fn dom(b1: *Qbe.Blk, b2: *Qbe.Blk) bool #inline = 
    b1.identical(b2) || sdom(b1, b2);

fn addfron(a: *Qbe.Blk, b: *Qbe.Blk) void = {
    range(0, a.nfron.zext()) { n | 
        if a.fron[n].identical(b) {
            return();
        }
    };
    if a.nfron == 0 {
        a.nfron += 1;
        a.fron = new(1, .PFn);
    } else {
        a.nfron += 1;
        a.fron&.grow(a.nfron.zext());
    };
    a.fron[a.nfron.zext() - 1] = b;
}

/* fill the dominance frontier */
fn fillfron(f: *Qbe.Fn) void = {
    for_blocks f { b | 
        b.nfron = 0;
    };
    for_blocks f { b |
        for_jump_targets b { s | 
            a := b;
            while => !sdom(a, s) {
                addfron(a, s);
                a = a.idom;
            };
        };
    }
}

LoopMark :: @FnPtr(hd: *Qbe.Blk, b: *Qbe.Blk) void;

fn loopmark(hd: *Qbe.Blk, b: *Qbe.Blk, func: LoopMark) void = {
    if b.id < hd.id || b.visit == hd.id {
        return();
    };
    b.visit = hd.id;
    func(hd, b);
    for_pred(b, fn(p) => loopmark(hd, p, func));
}

fn loopiter(f: *Qbe.Fn, func: LoopMark) void = {
    for_blocks f { b | 
        b.visit = bitcast(@as(i32) -1);
    };
    range(0, f.nblk.zext()) { n | 
        b := f.rpo.offset(n)[];
        for_pred b { pred | 
            if pred.id.zext() >= n {
                loopmark(b, pred, func);
            }
        };
    };
}

// :Explain (used for spilling huristic)
fn fillloop(f: *Qbe.Fn) void = {
    for_blocks f { b | 
        b.loop = 1;
    };

    // TODO: should allow infering type for non '=>' functions when used like this. 
    //       tho this syntax is suposed to be the same as a '=>' so maybe this is sketchy. 
    //       but its so obvious that this does what you expect its probably not a big deal. 
    loopiter f { _: *Qbe.Blk, b: *Qbe.Blk | 
        b.loop = intcast(b.loop.zext() * 10);
    };
}

/* requires rpo and no phis, breaks cfg */
// - Replaces returns with jumps to a single new block so the codegen only needs to emit one epilogue. 
// - Replaces chains of unconditional jumps through empty blocks with just jumping directly to the end.  
// - Replaces conditional jumps that go to the same place (perhaps created by the above) with unconditional jumps.
fn simplify_jump_chains(f: *Qbe.Fn) void = {
    epilogue := newblk();
    epilogue.id = f.nblk;
    f.nblk += 1;
    epilogue.jmp.type = .Jret0;
    direct_jumps := temp().alloc_zeroed(*Qbe.Blk, f.nblk.zext());
    for_blocks f { b | 
        @debug_assert(b.phi.is_null(), "simpljmp requires no phis");
        if b.jmp.type == .Jret0 {
            b.jmp.type = .Jjmp;
            b.s1 = epilogue;
        };
        if b.nins == 0 && b.jmp.type == .Jjmp {
            update_target(b.s1&, direct_jumps);
            if !b.s1.identical(b) { // avoids infinite loop while processing single block infinite loop
                direct_jumps[b.id.zext()] = b.s1;
            }
        }
    };
    last_link := ptr_from_int(*Qbe.Blk, 0);
    for_blocks f { b |
        last_link = b.link&;
        if(!b.s1.is_null(), => update_target(b.s1&, direct_jumps));
        if(!b.s2.is_null(), => update_target(b.s2&, direct_jumps));
        if !b.s1.is_null() && b.s1.identical(b.s2) {
            b.jmp.type = .Jjmp;
            b.s2 = Qbe.Blk.ptr_from_int(0);
        }
    };
    @debug_assert(!last_link.is_null() && last_link[].is_null(), "invarient: f->start exists and b->link doesn't loop");
    last_link[] = epilogue; // append our new block to the linked list. 
}

fn update_target(pb: **Qbe.Blk, uf: []*Qbe.Blk) void = {
    old_entry := uf[pb[].id.zext()]&;
    if !old_entry[].is_null() {
        update_target(old_entry, uf);
        pb[] = old_entry[];
    }
}

fn newblk() *Qbe.Blk = {
    b := libc_allocator.box(Qbe.Blk); // :HardcodeAlloc
    b[] = Qbe.Blk.zeroed();
    b
}
