#!/usr/bin/env franca
// 
// it got a bit painful how long everything is to type, so i `alias r=./examples/do.fr` and it sucks a bit less. 
// this program mostly just dispatches to my other programs based on file type of the argument.
// 

main :: fn() void = {
    args := cli_args();
    range(0, args.len) { i |
        a := args[i].str();
        if a == "dump" {
            dump(args.rest(i+1));
            return();
        };
        if a == "run" || a == "zed" {
            run_cmd(args.rest(i+1));
            return();
        };
    };
    
    @panic("nothing to do");
}

dump :: fn(args: []CStr) void = {
    @assert_gt(args.len, 0, "USAGE: [do.fr] dump <file>");
    path := args[0].str();
    bytes := temp().read_entire_file_or_crash(path);
    @assert_ge(bytes.len, 8, "that's too small to be an executable");
    magic4, magic8 := (bytes.peek_type(u32)[], bytes.peek_type(u64)[]);
    out := u8.list(1024*1024*50, temp());
    
    @match(what_is_this(path)) {
        fn MachO() => DumpMachO'dump(bytes);
        fn Elf() => {
            DumpElf'dump(out&, bytes);
            print(out.items());
        };
        fn Frc() => {
            DumpFrc'dump(out&, bytes);
            print(out.items());
        };
        fn Wasm() => DumpWasm'dump(bytes);
        @default() => print(bytes);
    }
};

run_cmd :: fn(args: []CStr) void = {
    @assert_gt(args.len, 0, "USAGE: [do.fr] run <file> -- <args>");
    path := args[0].str();
    
    if !file_exists(path) {
        if path.ends_with(".ssa") {
            new_path := @tfmt("backend/test/%", path);
            @eprintln(">>> autocorrect: % -> %", path, new_path);
            path = new_path;
        }
        if path.ends_with(".c") {
            new_path := @tfmt("examples/import_c/test/%", path);
            @eprintln(">>> autocorrect: % -> %", path, new_path);
            path = new_path;
        }
        if path.ends_with(".fr") {
            new_path := @tfmt("examples/%", path);
            @eprintln(">>> autocorrect: % -> %", path, new_path);
            path = new_path;
        }
    };
    
    magic8 := read_8_bytes_or_crash(path);
    magic4: u32 = magic8.trunc();
    
    while => args.len > 0 && args[0].str() != "--" {
        args = args.rest(1);
    };
    if args.len > 0 {
        args = args.rest(1);
    };
    
    ::enum(FileType);
    @match(what_is_this(path)) {
        // TODO: check arch
        fn MachO() => exec_cmd(path, args);
        // TODO: check arch
        fn Elf() => {
            if !path.contains("/") {
                @eprintln(">>> autocorrect: % -> ./%", path, path);
                path = @tfmt("./%", path);
            }
            // TODO: check arch
            exec_cmd("orb", @slice(path), args)
        };
        // todo: this isn't quite right it will see our args too
        fn Franca() => exec_cmd("franca", @slice(path), args);
        fn Frc() => exec_cmd("franca", @slice(path), args);
        fn C() => exec_cmd("franca", @slice("examples/import_c/cc.fr", path, "-r", "--"), args);
        fn Ssa() => exec_cmd("franca", @slice("backend/meta/qbe_frontend.fr", path, "-r", "--"), args);
        fn Wasm() => exec_cmd("franca", @slice("examples/import_wasm/run.fr", path, "--"), args);
    }
};

FileType :: @enum(MachO, Elf, Wasm, Frc, Franca, C, Ssa);

what_is_this :: fn(path: Str) FileType = {
    magic8 := read_8_bytes_or_crash(path);
    magic4: u32 = magic8.trunc();
    @if(magic4 == MachO.macho_magic) return(.MachO);
    @if(magic4 == Elf.MAGIC) return(.Elf);
    @if(magic8 == Frc.MAGIC) return(.Frc);
    @if(magic8 == Wasm.MAGIC) return(.Wasm);
    @if(path.ends_with(".fr")) return(.Franca);
    @if(path.ends_with(".c")) return(.C);
    @if(path.ends_with(".ssa")) return(.Ssa);
    @panic("unknown executable format for %", path)
}

#use("@/lib/sys/fs.fr");
#use("@/lib/sys/subprocess.fr");

MachO :: import("@/backend/macho/bits.fr");
DumpMachO :: import("@/examples/dump_macho.fr");
Elf :: import("@/backend/elf/bits.fr");
DumpElf :: import("@/examples/dump_elf.fr");
Frc :: import("@/backend/incremental.fr");
DumpFrc :: import("@/backend/meta/dump_bin.fr");
Wasm :: import("@/backend/wasm/bits.fr");
DumpWasm :: import("@/examples/dump_wasm.fr");

read_8_bytes_or_crash :: fn(path: Str) u64 = {
    path := as_cstr path;
    mem: u64 = 0;
    f := open_read(path) || @panic("failed to open: %", path);
    // TODO: do i have to loop? does that mean i have to check length of the file first to know when to stop? 
    _ := Syscall'read(f, ptr_cast_unchecked(u64, u8, mem&), 8) || {
        Syscall'close(f); // TODO: defer
        @panic("failed to read: %", path);
    };
    _ := Syscall'close(f); // TODO: defer
    mem
}

fn exec_cmd(path: Str, pre_args: []Str, args: []CStr) Never = {
    cargs: List(CStr) = list(temp());
    for pre_args { it |
        cargs&.push(as_cstr it);
    };
    cargs&.push_all(args);
    exec_cmd(path, cargs.items())
}

fn exec_cmd(path: Str, args: []CStr) Never = {
    path := as_cstr path;
    cargs: List(CStr) = list(args.len.add(2), temp());
    cargs&.push(path);
    cargs&.push_all(args);
    cargs&.push((ptr = u8.ptr_from_int(0))); // libc wants a null terminated array.
    execvp(path, cargs.maybe_uninit.ptr);
    
    // ERROR
    @println("Failed to exec path=%", path);
    cargs.len -= 1; // don't try to print the null terminator
    for(cargs) {s|
        @println("- %", s);
    };
    panic("failed to exec!")
}
