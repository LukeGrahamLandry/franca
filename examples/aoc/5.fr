// ugh, the rules are allowed to have cycles because not all updates have all pages. 

fn main() = {
    input := read_file_from_last_arg();
    lines := input.split("\n", temp());
    
    rules := temp().alloc_zeroed(RawList(i64), 100);
    
    n := 0;
    while => n < lines.len && lines[n] != "" {
        x := parse_int(lines[n].slice(0, 2));
        y := parse_int(lines[n].slice(3, 5));
        rules[x]&.push(y, temp());
        n += 1;
    };
    
    total1 := 0;
    total2 := 0;
    for lines.items().rest(n) { line | 
        correct :: local_return;
        nums := line.split(",", temp()).items();
        if true {
            incorrect :: local_return;
            enumerate nums { i, s |
                for nums.slice(0, i) { prev |
                    before := parse_int(prev);
                    if rules[parse_int(s[])].contains(before&) {
                        incorrect();
                    };
                };
            };
            total1 += parse_int(nums[nums.len / 2]);
            correct()
        };
        
        dowhile {
            bad := false;
            enumerate nums { i, s |
                for nums.slice(0, i) { prev |
                    before := parse_int(prev);
                    if rules[parse_int(s[])].contains(before&) {
                        nums.swap(i, i-1);
                        bad = true;
                    };  
                };
            };
            bad
        };
        total2 += parse_int(nums[nums.len / 2]);
    };
    
    println(total1);
    println(total2);
}
