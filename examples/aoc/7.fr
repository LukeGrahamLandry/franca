// https://adventofcode.com/2024/day/7
// read a text file. each line is a result and a list of inputs. 
// part1: sum the results that can be made by combining the inputs with + and *.
// part2: add || which concatenates as though the numbers were strings. 

fn main() = {
    input := read_file_from_last_arg();
    lines := input.split("\n", temp()).items();
    part1 := 0;
    part2 := 0;
    for lines { line |
        i     := line.index_of(":".ascii()).unwrap();
        total := parse_int(line.slice(0, i));
        nums  := line.rest(i + 1).split(" ", temp()).items().parse_ints();
        makes :: backwards;
        if makes(total, 0, nums, false) {
            part1 += total;
        };
        if makes(total, 0, nums, true) {
            part2 += total;
        };
    }; 
    println(part1);
    println(part2);
}

fn forwards(goal: i64, acc: i64, nums: []i64, $part2: bool) bool = {  // 165ms
    nums.len != 0 || return(acc == goal);
    goal >= acc   || return(false); 
       forwards(goal, acc + nums[0], nums.rest(1), part2) 
    || forwards(goal, acc * nums[0], nums.rest(1), part2)
    || (part2 && forwards(goal, acc.concat(nums[0]), nums.rest(1), part2))
}

fn backwards(goal: i64, acc: i64, nums: []i64, $part2: bool) bool = {  // 5ms
    if(nums.len == 0, => return(goal == 0));
    
    i := nums.len - 1;
    n := nums[i];
    
    check :: fn(cond, goal2, acc2) => (cond && backwards(goal2, acc2, nums.slice(0, i), part2));
    check(goal - n >= 0,    goal - n, acc + n) ||
    check(goal.mod(n) == 0, goal / n, acc * n) ||
    check(part2, goal.unconcat(n) || return(false), n.concat(acc))
}

fn concat(a: i64, b: i64) i64 = 
    a * pow10_of_log10_of(b) + b;

fn unconcat(a: i64, b: i64) ?i64 #inline = {
    n := pow10_of_log10_of(b);
    if(a.mod(n) != b, => return(.None));
    (Some = a.div(n))
}

// round up to a multiple of 10
fn pow10_of_log10_of(b: i64) i64 #inline = {
    n := 10;
    while => n <= b {
        n *= 10;
    };
    n
}

fn parse_ints(s: []Str) []i64 = {
    out := temp().alloc(i64, s.len);
    range(0, s.len) { i |
        out[i] = parse_int(s[i]);
    };
    out
}

#use("@/lib/sys/fs.fr");
