
fn main() void = {
    input := read_file_from_last_arg();
    
    solve :: fn(N) => {
        stones := i64.list(temp());
        cache := temp().alloc(HashMap(i64, i64), N);
        ::List(Str);
        for input.split(" ", temp()) { s |
            stones&.push(parse_int(s));
        };
        each cache& { c |
            c[] = init(temp());
        };
        eval(stones&, 0, stones.len, cache, N)
    };
    
    fn eval(stones: *List(i64), age: i64, count: i64, cache: []HashMap(i64, i64), N: i64) i64 = {
        if age == N {
            stones.len -= count;  // pop!
            return(count);
        };
        total := 0;
        range(0, count) { _ |
            i := stones.len - 1;
            n := stones[i];
            stones.len -= 1;
            total += cache[age]&.get(n) || {
                stones.len += 1;
                if n == 0 {
                    stones[i] = 1;
                } else {
                    d := log10(n);
                    if d.bit_and(1) == 0 {
                        a, b := n.div_mod(pow(10, d / 2)); 
                        stones[i] = a;
                        stones.push(b);
                    } else {
                        stones[i] = n * 2024;
                    };
                };
                d := eval(stones, age + 1, stones.len - i, cache, N);
                cache[age]&.insert(n, d);
                d
            }
        };
        total
    }
    
    println(solve(25));
    println(solve(75));
}

fn log10(i: i64) i64 = log(i, 10);

#use("@/lib/collections/map.fr"); 
#use("@/lib/sys/fs.fr");
