
fn main() = {
    input := read_file_from_last_arg();
    lines := input.split("\n", temp()).items();
    y, x := input.index_of("^".ascii()).unwrap().div_mod(lines[0].len + 1);
    lines[y][x] = ".".ascii();
    history: DynamicBitSet = empty(temp()); 
    history&.reserve(input.len * 4);
    eval(lines, x, y, true, history&, 0);
    println(A[]);
    println(B[]);
}

A :: @static(i64) 0;
B :: @static(i64) 0;

fn eval(lines: []Str, x: i64, y: i64, $mut: bool, history: *DynamicBitSet, d: i64) bool #inline = {
    w, h := (lines[0].len, lines.len);
    DIR :: @const_slice((0, -1), (1, 0), (0, 1), (-1, 0));
    ok :: fn(x, y) => x >= 0 && y >= 0 && x < w && y < h;
    loop {
        dx, dy := DIR[d];
        @if(mut) {
            if lines[y][x] == ".".ascii() {
                // if there were an obstruction here so we had to turn on the last step, 
                // would we go out of bounds before hitting another wall?
                break :: local_return;
                lines[y][x] = "X".ascii();
                A[] += 1;
                x2, y2 := (x-dx, y-dy);
                dx2, dy2 := DIR[mod(d+1, 4)];
                loop {
                    x2 += dx2;
                    y2 += dy2;
                    ok(x2, y2) || break();
                    if lines[y2][x2] == "#".ascii() {
                        // hit a wall so we might have created a loop.
                        history.unset_all();
                        lines[y][x] = "#".ascii();
                        loops := !eval(lines, x-dx, y-dy, false, history, d);
                        B[] += int(loops);
                        lines[y][x] = "X".ascii();
                        break();
                    };
                };
            };
        };
        x += dx;
        y += dy;
        more := ok(x, y);
        more || return(true);
        if lines[y][x] == "#".ascii() {
            // take it back now yall
            x -= dx;
            y -= dy;
            d = mod(d + 1, 4);
            @if(!mut) {
                // if we've been in this square going the same direction before, we must be looping. 
                i := y*h + x + w*h*d;
                !history.get_set(i) || return(false);
            };
        };
    }
}
