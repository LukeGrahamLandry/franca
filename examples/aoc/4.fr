
fn main() = {
    input := read_file_from_last_arg();
    lines := input.split("\n", temp());
    w := lines[0].len;
    h := lines.len;
    
    get :: fn(x, y) => lines[y][x];
    ok  :: fn(x, y) => x >= 0 && y >= 0 && x < w && y < h;
    
    DIR :: @const_slice(  // diagonals first
        (-1, 1),
        (1, -1),
        (-1, -1),
        (1, 1),
        (0, 1),
        (0, -1),
        (1, 0),
        (-1, 0),
    );
    
    xmas := 0;
    range(0, h) { y |
        range(0, w) { x |
            if get(x, y) == "X".ascii() {
                for DIR { dir | 
                    continue :: local_return;
                    x2, y2 := (x, y);
                    dx, dy := dir;
                    for "MAS" { c | 
                        x2 += dx;
                        y2 += dy;
                        if !ok(x2, y2) || get(x2, y2) != c {
                            continue();
                        };
                    };
                    xmas += 1;
                };
            };
        };
    };
    
    x_mas := 0;
    check :: fn(x, y) => {
        check :: fn(dirs) => {
            check :: fn(dir) => {
                dx, dy := dir;
                   ok(x + dx, y + dy)
                && ok(x - dx, y - dy) 
                && get(x + dx, y + dy) == "M".ascii() 
                && get(x - dx, y - dy) == "S".ascii()
            };
            // either MAS or SAM
            check(dirs[0]) || check(dirs[1])  
        }; 
        // both \ and /
        get(x, y) == "A".ascii() && check(DIR.slice(0, 2)) && check(DIR.slice(2, 4))
    };
    range(0, h, fn(y) => range(0, w, fn(x) => { x_mas += int(check(x, y)); }));
    
    println(xmas);
    println(x_mas);
}
