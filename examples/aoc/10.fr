fn main() void = {
    DIR :: @const_slice(
        (0, 1),
        (0, -1),
        (1, 0),
        (-1, 0),
    );
    
    fn walk(lines: [][]u8, c: u8, x: i64, y: i64, s1: *i64, s2: *i64, hit: *DynamicBitSet) void = {
        w, h := (lines[0].len, lines.len);
        for DIR { dir |
            dx, dy := dir;
            x := x + dx;
            y := y + dy;
            if x >= 0 && y >= 0 && x < w && y < h {
                c2 := lines[y][x];
                if c2 == c + 1 {
                    if c2 == "9".ascii() {
                        s1[] += int(!hit.get_set(y*w + x));
                        s2[] += 1;
                    } else {
                        walk(lines, c2, x, y, s1, s2, hit);
                    };
                };
            };
        };
    }
    
    input := read_file_from_last_arg();
    lines := input.split("\n", temp()).items();
    w, h := (lines[0].len, lines.len);
        
    hit: DynamicBitSet = empty(temp());
    hit&.reserve(w*h);
    
    part1 := 0;
    part2 := 0;
    range(0, h, fn(y) => range(0, w) { x | 
        c := lines[y][x];
        if c == "0".ascii() {
            walk(lines, c, x, y, part1&, part2&, hit&);
            hit&.unset_all();
        };
    });
    println(part1);
    println(part2);
}

#use("@/lib/collections/bit_set.fr");
#use("@/lib/sys/fs.fr");
