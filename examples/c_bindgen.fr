CDecl :: @tagged(
    Struct: @struct(name: Str, fields: List(CField)),
    Enum: @struct(name: ?Str, items: List(CEnumItem)),
    Func: @struct(name: Str, type: Str, args: List(CField)),
);

CField :: @struct(name: Str, type: Str);
CEnumItem :: @struct(name: Str, value: Str);

#include_std("vendor/wuffs.fr");
#include_std("lib/core.fr");

fn main() void = {
    println("Hello World");
    ast := temp().read_to_string("target/ast.json");  
    //ast := temp().read_to_string("target/sokol.json");  
    json: JsonParser = new(ast.items(), temp());
    :: Result(JsonPart, Str);
    :: tagged(JsonPart);
    
    // Get to the good bit
    (fn() => {
        break :: local_return;
        loop {|
            part := json&.next().unwrap();
            if part&.is(.Key) && (part.Key == "inner") {|
                break();
            };
        };
    })();
    
    loop {|
        continue :: local_return;
        part := json&.next().unwrap();
        //@println("%", part&.tag());
        //println(json.cursor);
        @match(part) {
            (fn Eof() => exit(0)); //return());
            (fn Key(name) => {
                if name.eq("range").or(=> name == "loc").or(=> name == "id") {|
                    res := json&.skip_next_value();
                    res.unwrap();
                    continue();
                };
                if name == "kind" {|
                    value := json&.next().unwrap();
                    assert(value&.is(.StringValue), "expected tag");
                    @switch(value.StringValue) {
                        @case("RecordDecl") => {
                        
                        };
                        @case("EnumDecl") => {
                        
                        };
                        @case("FunctionDecl") => {
                        
                        };
                        @default fn(_: Str) => {
                            json&.skip_current_value().unwrap();
                            continue();
                        };
                    };
                    //@println("=== % ===", value.StringValue);
                } else {|
                    //@println("%: ", name);
                };
            });
            (fn StringValue(value) => {
                //println(value);
            });
            @default => ();  
        };
    };
}

JsonParser :: @struct(
    decoder: WuffsJsonDecoder,
    input: WuffsIoBuffer,
    output: WuffsTokenBuffer,
    depth: i64 = 0,
    cursor: i64 = 0,
    is_dict: BitSet = empty(),
    last_thing_was_key: bool = false,
);

// TODO: if the first thing doesn't have a payload, you get an unwrap in export_ffi. -- Jul 4
JsonPart :: @tagged(
    Key: Str, 
    StringValue: Str,
    BoolValue: bool,
    // TODO: null, numbers.
    StartDict,
    StartList,
    End,
    Eof,
);

// TODO: you can't call this init because the overload set is needed too early.
fn new(input: Str, mem: Alloc) JsonParser = {
    self: JsonParser = (
        decoder = WuffsJsonDecoder.zeroed(),
        input = WuffsIoBuffer.zeroed(),
        output = WuffsTokenBuffer.zeroed(),
    );
    self.input.data = input;
    self.input.meta.wi = self.input.data.len;
    self.output.data = mem.alloc(WuffsToken, 256);
    // TODO: idk if this is allowed to be moved or if it has internal pointers. 
    self.decoder&.wuffs_json__decoder__initialize(WuffsJsonDecoder.size_of(), WUFFS_VERSION, 0).unwrap();
    self
}

fn next(self: *JsonParser) Result(JsonPart, Str) = { 
    (token: WuffsToken, src: Str) := @match(self.next_token()) {
        (fn Ok(v) Ty(WuffsToken, Str) => v);
        (fn Err(status) => {
            if status == "@base: end of data" {|
                return(Ok = .Eof);
            };
            return(Err = status)
        });
    };
    
    if token.category() == .String {|
        ::tagged(Result(Str, Str));
        s := @try(self.parse_str(token)) return;
        if self.expecting_key() && !self.last_thing_was_key {|
            self.last_thing_was_key = true;
            return(Ok = (Key = s));
        } else {|
            self.last_thing_was_key = false;
            return(Ok = (StringValue = s));
        };
    };
    self.last_thing_was_key = false;
    
    if token.is(.Structure, .Push) {|
        self.last_thing_was_key = false;
        self.depth += 1;
        if token.is(.Structure, .ToList) {|
            self.is_dict&.unset(self.depth);
            return(Ok = .StartList);
        };
        if token.is(.Structure, .ToDict) {|
            self.is_dict&.set(self.depth, temp());
            return(Ok = .StartDict);
        };
        return(Err = "wuffs bad push?");
    };
    if token.is(.Structure, .Pop) {|
        self.depth -= 1;
        return(Ok = .End);
    };
    
    if token.is(.Literal, .False) {|
        return(Ok = (BoolValue = false));
    };
    if token.is(.Literal, .True) {|
        return(Ok = (BoolValue = true));
    };
    
    println("bad token category");
    (Err = "wuffs bad json")
}

fn expecting_key(self: *JsonParser) bool = 
    self.is_dict&.get(self.depth);

fn parse_str(self: *JsonParser, prev: WuffsToken) Result(Str, Str) = {
    msg :: "TODO: non-basic quotes";
    assert(prev.is(.String, .Convert0DstFrom1SrcDrop), msg);
    (token, data) := @try(self.next_token()) return;
    if token.is(.String, .Convert0DstFrom1SrcDrop) {| // assuming this is the only empty string for now. 
        assert(data == "\"", "expected empty string"); 
        return (Ok = "");
    };
    assert(token.is(.String, .Convert1DstFrom1SrcCopy), msg); // TODO: someone has to do the copy if i end up compacting the input buffer so don't have to hold the whole file in memory.
    (token, _) := @try(self.next_token()) return;
    assert(token.is(.String, .Convert0DstFrom1SrcDrop), msg);
    (Ok = data)
}

fn next_token(self: *JsonParser) Result(Ty(WuffsToken, Str), Str) = {
    loop {|
        continue :: local_return;
        
        if self.output.meta.ri >= self.output.meta.wi {|
            // Can't call wuffs_base__token_buffer__compact (its static?)
            // but also I guess I don't even need that, cause I know I ready all the tokens. 
            self.output.meta.ri = 0;
            self.output.meta.wi = 0;
            status := self.decoder&.wuffs_json__decoder__decode_tokens(self.output&, self.input&, empty());
            // TODO: use status
            if self.output.meta.ri >= self.output.meta.wi {|
                assert(!status.repr.ptr.is_null(), "didn't decode but claimed 'ok'");
                status := status.repr.str();
                return(Err = status);
            };
        };
        token := self.output.data[self.output.meta.ri];
        self.output.meta.ri += 1;
        
        if token.category() == .Filler {|
            self.cursor += token.len();
            continue();
        };
        
        source := self.input.data.subslice(self.cursor, token.len());
        self.cursor += token.len();
        //@println("%: %; %; %", token.repr.bitcast(), token.category(), token.len(), source);
        return(Ok = (token, source))
    }; // TODO: have emit_bc allow non-discard result of loop. its a never so doesn't matter. 
    panic("unreachable end of loop")
}

// Call when you just got a key you don't care about and want to skip the whole subtree of its value. 
fn skip_next_value(self: *JsonParser) Result(void, Str) = {
    // TODO: debug assert in list or last was key. 
    depth := self.depth;
    part := @try(self.next()) return;
    @match(part) {
        (fn StartDict() => return(self.skip_until_depth(depth)));
        (fn StartList() => return(self.skip_until_depth(depth)));
        (fn StringValue() => ()); // Strings are a single Part, so we're done. 
        @default => return(Err = "Expected start of json value.");
    }; // TODO: the compiler segfaults if you forget this semicolon. :FUCKED -- Jul 4
    .Ok
}

// This skips the rest of the current dist/list. 
// So you can see a key, and its value, and then decide to discard the whole thing. 
fn skip_current_value(self: *JsonParser) Result(void, Str) = {
    self.skip_until_depth(self.depth - 1)
}

// Fast path where we don't bother decoding string escapes into memory. 
fn skip_until_depth(self: *JsonParser, end_depth: i64) Result(void, Str) = {
    //println("start skip");
    while => end_depth < self.depth {|
        (token, _) := @try(self.next_token()) return; // TODO: don't even bother returning the source slice. 
    
        if token.is(.Structure, .Push) {|
            self.depth += 1;
        } else {|
            if token.is(.Structure, .Pop) {|
                self.depth -= 1;
            };
        };
    };
    //println("end skip");
    .Ok
}

fn unwrap(s: WuffsStatus) void = {
    @assert(s.repr.ptr.is_null(), "Wuffs: %", s.repr);
}

// TODO: This is a copy paste from the one farm_game uses for sokol. 
//       I need a more declaritive way of describing how to build a c library. 
fn driver(vtable: *ImportVTable) void = {
    arch_os := {vtable.comptime_arch}(); // TODO: pattern match multiple returns. 
    // TODO: this whole thing where you have to write your program inside out is really annoying. 
    //       I want the user program to be in charge and call into the compiler as a library. 
    UserData :: @struct(
        vtable: *ImportVTable,
        lib: DlHandle,
    );
    
    is_x86 := (@as(i64)arch_os._0).eq(@as(i64) Arch.X86_64);
    //if(not(is_x86), => print_stacktrace_on_panic()); // TODO: this doesn't work! the function doesn't exist when trying to compile driver even if we don't call it
    
    resolve_comptime_import :: fn(userdata: rawptr, comp: Compiler, f: FuncId, lib_name: Symbol, fn_name: Symbol) ?rawptr = {
        userdata := UserData.ptr_from_raw(userdata);
        expected_lib_name := {userdata.vtable.intern_string}(comp, "wuffs");
        fn_name := {userdata.vtable.get_string}(comp, fn_name);
        if(expected_lib_name.eq(lib_name)){|
            fn_name := fn_name.maybe_borrow_cstr(temp());
            f := dlsym(userdata.lib, fn_name);
            assert(f.is_null().not(), "bad function name");
            return((Some = f));
        };
        .None
    };

    // Note: you still need the dylib even if aot. for one thing i call a function at comptime to get the size of an opaque struct.
    dylib_path := build_wuffs_cached(arch_os, .Dynamic);  // TODO: should be able to unwrap in the same expression like you can later but it hasn't been instantated yet. 
    dylib_path := dylib_path.unwrap(); 

    dylib_path_c := dylib_path.maybe_borrow_cstr(temp());
    lib := dlopen(dylib_path_c, DlFlag.Lazy);
    assert(lib.lib.is_null().not(), "failed to open dylib for comptime");
    @println("Opened %", dylib_path);
    
    my_vtable: ExportVTable = (
        resolve_comptime_import = (Some = resolve_comptime_import),
    );
    data: UserData = (vtable = vtable, lib = lib);
    
    src := temp().read_to_string("examples/c_bindgen.fr");  // TODO: don't depend on cwd.
    
    ::if(Backend);
    comp := vtable.new_with_src(src.items(), if(is_x86, => .Cranelift, => .Aarch64));
    {vtable.give_vtable}(comp, my_vtable&, UserData.raw_from_ptr(data&));
    
    main_sym := {vtable.intern_string}(comp, "main");
    main_f := {vtable.find_unique_func}(comp, main_sym).unwrap();
    {vtable.compile_func}(comp, main_f, .Jit).unwrap();

    v := should_jit();
    if v {|
        ptr := {vtable.get_jitted_ptr}(comp, main_f).unwrap();
        {vtable.make_jitted_exec}(comp);
        f := assume_types_fn(Arg = void, Ret = void, ptr = ptr);
        f();
        exit(0);
    };
    
    static_path := build_wuffs_cached(arch_os, .Static).unwrap();
    
    ir_text := {vtable.emit_llvm}((data = comp, vtable = vtable), temp(), @slice (main_f), .ExportWithNames);
    out := open_temp_file();
    for(ir_text&){bucket|
        out.fd&.write(bucket);
    };
    @println("Write llvm ir to %", out&.s_name());
    // TODO: this includes all the wuffs functions (like png, etc that i don't use) figure out how to make -flto work. :BLOAT
    args := @slice (static_path, "-x", "ir", out&.s_name(), "-o", "bind.out", "-Os");  
    @println("building aot exe: %", args);
    success := run_cmd_blocking(CLANG_PATH, args);
    assert(success, "clang failed");
    out.remove(); // TODO: defer 
}

fn build_wuffs_cached(env: Ty(Arch, Os), linking: LinkTime) Result(Str, void) = {
    path := save_path_for_lib(env, linking, "wuffs");
    if(path.file_exists(), => return((Ok = path)));
    
    args: List(Str) = list(10, temp());
    
    args&.push("-DWUFFS_IMPLEMENTATION");
    args&.push("vendor/wuffs/release/c/wuffs-v0.4.c");
    
    @switch(linking) {
        @case(.Static) => args&.push("-c");
        @case(.Dynamic) => args&.push("-dynamiclib");
    };
    args&.push_all(@slice ("-o", path));
    
    args&.push("-Os");
    
    @println("building wuffs: %", args.items());
    success := run_cmd_blocking(CLANG_PATH, args.items());
    if(not(success), => return(.Err));
    
    (Ok = path)
}

::display_slice(Str);

// TODO: compiler bug! if you try to just return(true/false) in those branches, 
//       it always returns the first branch. same if you use two ifs instead of switch. same either if you have blocks or just => return.
//        -- Jul 4 :FUCKED
fn should_jit() bool = {
    args := cli_args();
    for args { arg |
        s := arg.str();
        a: ?bool = .None;
        @switch(s) {
            @case("-aot") => {
                a = (Some = false);
            };
            @case("-jit") => {
                a = (Some = true);
            };
            @default fn(_: Str) => ();
        };
        if a {a|
            return(a);
        };
    };
    panic("Please pass -jit or -aot as an argument. (aot runs ~10x faster, dont forget to run the exe tho")
}
