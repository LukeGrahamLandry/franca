#!/usr/bin/env franca
//! This uses clang to parse a C header file and output the ast as json. 
//! Then we translate that into function/struct/enum definitions in Franca syntax.
//! Inspired by https://github.com/floooh/sokol/tree/master/bindgen (zlib/libpng license. Copyright (c) 2018 Andre Weissflog)
//!    I originally just made gen_franca.py in there but it seems dumb to be making a new language and not even use it. 
//!    For reference, when this file replaced ~530 lines of python (gen_ir+gen_franca), it was 500 lines. 
//!    But mine is also much uglier and less robust. ie. I depend on the order of fields in clang's output. 
//!    Alas, now my version has grown longer and more convoluted because I want to handle Dear Imgui as well. 
//!    So at this point it probably needs to be rewritten if you want to use it for anything serious. 
//!    I'm fine with it perpetually being in an exploration phase for now as I slowly throw more shapes of program at it. 
// TODO: unnamed enum constants 
// TODO: bitfields
// TODO: sad that im generating my bindings off the generated cimgui. 
//       handle c++ and be able to generate c wrappers too so i don't rely on some guy's giant blob of lua!
// TODO: clean up the handling of prefixes, pass in a data structure instead of switching over specific libraries. 
//       it would be nice if people could just call this from thier driver program if they want a new library. 
// TODO: losing function arguments for wuffs
// TODO: only include declarations from the files we care about. ignore the giant libc includes. 
// TODO: named inline struct declaration inside other struct. (type has name).
// TODO: fix it getting bored after embedded struct field with a name. (field has name). 

CDecl :: @rec @tagged(
    Record: @struct(name: ?Str, fields: []CRecordField, tag: CRecordTag),
    Enum: @struct(name: ?Str, items: []CEnumItem),
    Func: @struct(name: Str, type: Str, args: []CRecordField), // TODO: is never anon? 
    TypeDef: @struct(name: Str, type: Str),
);

CRecordTag :: @enum(i64) (struct, union); ::enum(CRecordTag); // note: these names are stringified. 
CField :: @struct(name: Str, type: Str);
CRecordField :: @tagged(Named: CField, Anon: *CDecl);
CEnumItem :: @struct(name: Str, value: ?Str);

// TODO: need to be able to #use(import("@/lib/json.fr")); here
Json :: import("@/lib/json.fr");
JsonParser :: Json.JsonParser;
JsonPart   :: Json.JsonPart;

// TODO: it needs to work without these
fn next();
fn skip_current_value();

fn main() void = {
    #use(Json);  // TODO: shouldn't need to do this here if the types are declared outside 
    
    path := cli_args();
    path := path.last();
    path := path.unwrap()[].str();
    
    start := timestamp();
    ast, prefixes, called_clang := load_ast(path);
    loaded := timestamp();
    json: JsonParser = new_json(ast, temp());
    println("parsing...");
    decls := json&.extract_c_decls(prefixes);
    out: List(u8) = list(temp());
    println("generating...");
    generate_franca_bindings(out&, decls, path);
    done := timestamp();
    println(out.items());
    if called_clang {
        @eprintln("Clang: %ms. Processing: %ms.", loaded - start, done - loaded);
    };
    exit(0);
}

HackPrefixes :: @enum(None, Sokol, DearImgui, Wuffs); ::enum(HackPrefixes);

fn load_ast(path: Str) Ty(Str, HackPrefixes, bool) = {
    fn do_clang(path: Str, extra: *List(Str)) Str = {
        clang_path := "clang"; // Note: you get different output from clang++ (CompoundStmt)
        extra.push_all(@slice("-Xclang", "-ast-dump=json", "-c", path));
        @eprintln("%: %", clang_path, extra.items());
        ok, out, err := exec_and_catch(clang_path, extra.items(), temp());
        @assert(ok, "Clang failed. %", err.items());
        out.items()
    }
    
    ::if(Ty(Str, HackPrefixes, bool));
    if path.ends_with(".h") || path.ends_with(".c") {
        args: List(Str) = list(temp());
        (do_clang(path, args&), HackPrefixes.None, true)
    } else {
        if path.ends_with(".json") {
            (temp().read_to_string(path).items(), HackPrefixes.None, false)
        } else {
            @switch(path) {
                @case("sokol") => {
                    args := @list("-c", "-x", "c", "-Ibindings/sokol", "-Ibindings/cimgui", "-DCIMGUI_DEFINE_ENUMS_AND_STRUCTS") temp();
                    src_file := open_temp_file();
                    src_file.fd&.write(SOKOL_AND_IMGUI_ALL_SOURCE);
                    ast := do_clang(src_file&.s_name(), args&);
                    src_file.remove();
                    (ast, HackPrefixes.Sokol, true)
                };
                @case("dearimgui") => {
                    args: List(Str) = list(1, temp());
                    args&.push("-DCIMGUI_DEFINE_ENUMS_AND_STRUCTS");
                    (do_clang("bindings/cimgui/cimgui.h", args&), HackPrefixes.DearImgui, true)
                };
                @case("wuffs") => {
                    args: List(Str) = list(1, temp());
                    args&.push("-DWUFFS_IMPLEMENTATION"); // you need this to get struct body declarations. 
                    (do_clang("bindings/wuffs/release/c/wuffs-v0.4.c", args&), HackPrefixes.Wuffs, true)
                };
                @default => @panic("expected .c/.h/.json file (or preset lib ['sokol', 'dearimgui', 'wuffs']) as last argument, found '%'", path);
            }
        }
    }
}

Record :: get_variant_type(CDecl, CDecl.Tag().Record);
CRecord :: get_variant_type(CDecl, CDecl.Tag().Enum);
fn generate_franca_bindings(out: *List(u8), decls: []CDecl, import_name: Str) void = {
    is_sokol := import_name == "sokol";
    each decls { decl |
        continue :: local_return;
        
        fn output_record_body(it: *Record, out: *List(u8), depth: i64) void = {
            for it.fields { it |
                range(0, depth) {_|
                    out.push_all("    ");
                };
                @match(it) {
                    fn Named(it) => {
                        @fmt(out, "%: %,\n", it.name, it.type.translate_type());
                    }
                    fn Anon(it) => {
                        @match(it) {
                            fn Record(it) => {
                                @fmt(out, "_embed: @%(\n", it.tag);
                                it.output_record_body(out, depth + 1);
                                range(0, depth) {_|
                                    out.push_all("    ");
                                };
                                @fmt(out, "),\n");
                            }
                            fn Enum(it) => {
                                @fmt(out, "_embed: @enum(i32) (\n");
                                it.output_enum_body(out, depth + 1, false); // sokol doesnt get here
                                range(0, depth) {_|
                                    out.push_all("    ");
                                };
                                @fmt(out, "),\n");
                            }
                            @default => panic("unhandled anon field");
                        }
                    }
                }
            };
        }
        
        fn output_enum_body(it: *CRecord, out: *List(u8), depth: i64, is_sokol: bool) void = {
            at_the_end := false;
            last_value := -1;
            each it.items { item |
                range(0, depth) {_|
                    out.push_all("    ");
                };
                continue :: local_return;
                name := item.name;
                if is_sokol {
                    name = name.demangle_sokol_enum();
                };
                if(name == "FORCE_U32", => continue());
                @fmt(out, "%", name);
                if item.value { value |
                    @fmt(out, " = %", value);
                };
                @fmt(out, ",\n");
            };
        }
        
        @match(decl) {
            fn Record(it) => {
                name := it.name.expect("record name");
                // TODO: could be smart about deciding when it needs @rec
                @fmt(out, "% :: @rec @%(\n", name.unsnake_case(), it.tag);
                it.output_record_body(out, 1);
                @fmt(out, ");\n");
            }
            fn Enum(it) => {
                @match(it.name) {
                    fn Some(name) => {
                        @fmt(out, "% :: @enum(i32) (\n", name.unsnake_case());
                        it.output_enum_body(out, 1, is_sokol);
                        @fmt(out, ");\n");
                    }
                    fn None() => {
                        @fmt(out, "/* (c_bindgen) TODO: unnamed enum as constants\n");
                        it.output_enum_body(out, 1, is_sokol);
                        @fmt(out, "*/\n");
                    }
                }
            }
            fn Func(it) => {
                @fmt(out, "fn %(", it.name);
                prefix := "";
                i := 0;
                for it.args { it |
                    it: CField = @match(it) {
                        fn Named(it) => {it};
                        fn Anon(_) => panic("unreachable. anon for arg");
                    };
                    if it.name == "" {
                        it.name = items(@format("_%", i) temp());
                    };
                    @fmt(out, "%%: %", prefix, it.name, it.type.translate_type());
                    prefix = ", ";
                    i += 1;
                };
                
                // TODO: handle returning a function pointer. 
                idx := it.type.position(fn(b) => b[] == "(".ascii());
                idx := idx.expect("confusing function");
                ret := it.type.slice(0, idx).trim();
                
                @fmt(out, ") % #import(\"%\");\n", ret.translate_type(), import_name);
            }
            fn TypeDef(it) => {
                prefixes := @slice("struct ", "enum ");
                for prefixes { pre |
                    if it.type.starts_with(pre) && it.type.slice(pre.len(), it.type.len) == it.name {
                        // my language doesnt need `Foo :: struct Foo;`
                        continue();
                    };
                };
                
                @fmt(out, "% :: %;\n", it.name.translate_type(), it.type.translate_type());
            }
        };
    };
}

fn demangle_sokol_enum(s: Str) Str = {
    underscores := 0;
    if s[0] == "_".ascii() {
        underscores = -1;
    };
    while => s.len > 0 {
        under := s[0] == "_".ascii();
        s.ptr = s.ptr.offset(1);
        s.len -= 1;
        if under {
            underscores += 1;
            if underscores == 2 {
                if s[0].is_ascii_digit() {
                    s = (@format("_%", s) temp()).items();
                };
                return(s);
            };
        };
    };
    s
}

fn ascii_to_upper(c: u8) u8 = {
    diff :: "a".ascii() - "A".ascii();
    ::if(u8);
    if(c.lt("a".ascii()).or(c > "z".ascii()), => c, => c - diff)
}

fn translate_type(c_type: Str) Str = {
    c_type = c_type.trim();
    // before optimising this into a hashmap consider having the implementation for @switch on strings do that. 
    @switch(c_type) { /* TODO: segfault if you paste an identifier where this comment is */
        @case("int")           => "i32";
        @case("long")          => "i64";
        @case("uint8_t")       => "u8";
        @case("uint16_t")      => "u16";
        @case("uint32_t")      => "u32";
        @case("uint64_t")      => "u64";
        @case("float")         => "f32";
        @case("double")        => "f64";
        @case("uintptr_t")     => "usize";
        @case("size_t")        => "usize";
        @case("void *")        => "rawptr";
        @case("const char *")  => "CStr";
        @case("char *")        => "CStr";
        @case("bool")          => "bool";
        @case("void")          => "void";
        @case("unsigned short") => "u16";
        @case("unsigned int") => "u32";
        @case("long long") => "i64";
        @case("unsigned long long") => "u64";
        @case("short") => "i16";
        @case("char") => "i8"; // TODO: ?
        @case("signed char") => "i8"; 
        @case("unsigned char") => "u8"; 
        @default => {
            prefixes := @slice("const ", "struct ", "enum ");
            for prefixes { pre |
                if c_type.starts_with(pre)  {
                    c_type = c_type.slice(pre.len, c_type.len);
                };
            };
            
            if c_type.ends_with(")") {|  // its a function pointer
                out: List(u8) = list(c_type.len, temp());
                parts := c_type.split("(*)", temp());
                //@assert(parts.len == 2, "confusing function pointer %", c_type);
                if parts.len != 2 {
                    @fmt(out&, "@run @panic(\"c_bindgen: confusing function pointer %\")", c_type);
                    return(out.items());
                };
                ret := parts[0];
                // TODO: support function pointer argument!
                args := parts[1].trim();
                assert(args.ends_with(")") && args.starts_with("("), "confusing fnptr args");
                args.ptr = args.ptr.offset(1);
                args.len -= 2;
                args := args.split(",", temp());
                @fmt(out&, "@FnPtr(");
                prefix := "";
                for args { arg | 
                    arg := arg.translate_type();
                    if arg != "..." {
                        @fmt(out&, "%%", prefix, arg);
                        prefix = ", ";
                    };
                };
                @fmt(out&, ") %", ret.translate_type());
                
                return(out.items());
            };
            // TODO: this does 2d arrays in the wrong order
            if c_type.ends_with("]") {|  // its an array
                fn last_index_of(haystack: Str, needle: u8) ?i64 = {
                    i := haystack.len - 1;
                    while => i >= 0 {
                        if(haystack[i] == needle, => return(Some = i));
                        i -= 1;
                    };
                    .None
                }
                
                fn split_array(s: Str) Ty(Str, Str) /* (T, len) */ = {
                    idx := s.last_index_of("[".ascii());
                    idx := idx.expect("confusing array");
                    element_type := s.slice(0, idx);
                    count := s.slice(idx + 1, s.len - 1);
                    (element_type, count)
                }
                
                // note: c 2d array types are backwards (because declaration mirrors use)
                //       the inner most count is on the far right because you index the outer array first. 
                element_type, count := c_type.split_array();
                if element_type.ends_with("]") {
                    inner_type, outer_count := element_type.split_array();
                    @assert(!inner_type.ends_with("]"), "im lazy and don't support 3d arrays: %", c_type);
                    return((@format("Array(Array(%, %), %)", inner_type.translate_type(), count, outer_count) temp()).items());
                } else {
                    return((@format("Array(%, %)", element_type.translate_type(), count) temp()).items());
                };
            };
            if c_type.ends_with("*") {|  // its a pointer
                pointee := c_type.slice(0, c_type.len - 1);
                if pointee.starts_with("const ") {
                    pointee = pointee.slice("const ".len(), pointee.len);
                };
                if pointee.ends_with(" ") {
                    pointee = pointee.slice(0, pointee.len - 1);
                };
                if pointee == "void" {
                    return("rawptr");
                };
                return((@format("*%", pointee.translate_type()) temp()).items());
            };
            
            // TODO: move this up and remove the redundant handling in * case
            if c_type.starts_with("const") {
                // i feel like that does nothing when its not a pointer but cimgui does it and who am i to judge. 
                return(c_type.slice("const".len(), c_type.len).translate_type())
            };
            
            out: List(u8) = list(c_type.len, temp());
            out&.push(c_type[0].ascii_to_upper());
            enumerate c_type.slice(1, c_type.len) { i, c | 
                if c[] == "_".ascii() {
                    // not +1 because skipped first
                    c_type[i + 2] = c_type[i + 2].ascii_to_upper();
                } else {
                    out&.push(c[]);
                };
            };
            c_type.unsnake_case()
        };
    }
}

fn unsnake_case(c_type: Str) Str = {
    out: List(u8) = list(c_type.len, temp());
    out&.push(c_type[0].ascii_to_upper());
    enumerate c_type.slice(1, c_type.len) { i, c | 
        if c[] == "_".ascii() {
            // not +1 because skipped first
            c_type[i + 2] = c_type[i + 2].ascii_to_upper();
        } else {
            out&.push(c[]);
        };
    };
    if out.items().ends_with("T") {| // _t
        out.len -= 1;
    };
    out.items()
}


// It's a massive pain to be dealing with the json format while doing useful work... so don't. 
fn extract_c_decls(json: *JsonParser, prefixes: HackPrefixes) []CDecl = {
    :: Result(JsonPart, Str);
    :: tagged(JsonPart);
    
    decls: List(CDecl) = list(temp());
    
    fn skip_to_inner(json: *JsonParser) void = {
        loop {
            part := json.next().unwrap();
            if part&.is(.Key) && (part.Key == "inner") {
                return();
            };
            if part&.is(.Eof) {
                panic("eof before key 'inner'");  
            };
        };
    }
    
    // Get to the good bit
    json.skip_to_inner();
    loop {
        continue :: local_return;
        part := json.next().unwrap();
        @match(part) {
            fn Eof() => return(decls.items());
            fn Key(name) => {
                if name == "kind" {
                    value := json.next().unwrap();
                    assert(value&.is(.StringValue), "expected tag");
                    //println(value.StringValue);
                    @switch(value.StringValue) {
                        @case("RecordDecl") => {
                            xx := json.record_decl();
                            if xx { decl |
                                if decl.Record.name { name |
                                    skip := @match(prefixes) {
                                        fn Sokol() => name.starts_with("Im").or(=> name.starts_with("Stb")).or(=> name.starts_with("STB"));
                                        fn DearImgui() => false;
                                        fn Wuffs() => !name.starts_with("wuffs_");
                                        fn None() => false;
                                    };
                                    if !skip {
                                        decls&.push(decl);
                                    };
                                };
                            };
                        };
                        @case("EnumDecl") => {
                            name := json.skip_to_tag_opt("name", .StringValue).or(=> continue());
                            name := name.StringValue;
                            json.skip_to_tag("inner", .StartList);
                            fields := json.read_enum_fields();
                            decls&.push(Enum = (name = (Some = name), items = fields));
                        };
                        @case("FunctionDecl") => {
                            name := json.skip_to_string("name");
                            skip := @match(prefixes) {
                                fn Sokol() => 
                                    !name.starts_with("sgl_") && !name.starts_with("sapp_") 
                                    && !name.starts_with("sg_") && !name.starts_with("saudio_")
                                    && !name.starts_with("sdtx_") && !name.starts_with("sshape_")
                                    && !name.starts_with("simgui_") && !name.starts_with("sglue_")
                                    && !name.starts_with("sfetch_") && !name.starts_with("slog_")
                                    && !name.starts_with("stm_");
                                fn DearImgui() => !name.starts_with("ig");
                                fn Wuffs() => !name.starts_with("wuffs_");
                                fn None() => false;
                            };
                            if skip {| 
                                json.skip_current_value();
                                continue();
                            };
                            json.skip_to_tag("type", .StartDict);
                            type := json.skip_to_string("qualType");
                            json.skip_current_value();
                            
                            //@println("Function named '%' with type '%'", name, type);
                           
                            ::tagged(Result(Str, Str)); 
                            found := json.skip_until_key_switch(@slice("storageClass", "inner"));
                            if found&.is(.Err) {
                                // a function decl like `ret name(void);` doesn't have an `inner` listing arguments,
                                // and it might not have a storageClass
                                // TODO: clearly thats wrong tho... 
                                
                                decls&.push(Func = (name = name, type = type, args = empty()));
                                continue();
                            };
                            found := found.unwrap();
                            if found == "storageClass" {
                                storage := json.not_called_get_string().unwrap();
                                if storage == "static" {|  // can't be called accross compilation units
                                    json.skip_current_value();
                                    continue();
                                };
                            };
                            
                            // no args is fine. 
                            args: []CRecordField = empty();
                            have_args := false;
                            if found == "inner" {
                                have_args = true;
                                json.next();
                            } else {
                                have_args = json.skip_to_tag_opt("inner", .StartList).is_some();
                            };
                            
                            if have_args {
                                args = json.read_fields(false);   // yeah... not spelled like "param"
                            };
                            decls&.push(Func = (name = name, type = type, args = args));
                        };
                        @case("TypedefDecl") => {
                            name := json.skip_to_string("name");
                            
                            skip := @match(prefixes) {
                                fn Sokol() => true;
                                fn DearImgui() => !name.starts_with("Im");
                                fn None() => false;
                                fn Wuffs() => false;
                            };
                            if skip {
                                json.skip_current_value();
                                continue();
                            };
                            json.skip_to_tag("type", .StartDict);
                            type := json.skip_to_string("qualType");
                            json.skip_current_value();
                            decls&.push(TypeDef = (name = name, type = type));
                        };
                        @default => {
                            json.skip_current_value().unwrap();
                            continue();
                        };
                    };
                };
            }
            @default => ();  
        };
    }
}

// :FucKED compiler bugakljlasjdklkasl;md;lasm
fn not_called_get_string(json: *JsonParser) Result(Str, Str) = {
    value := json.next().unwrap();
    if value&.is(.StringValue) {
        return(Ok = value.StringValue);
    } else {
        return(Err = "expected string");
    };
    unreachable()
}

fn record_decl(json: *JsonParser) ?CDecl = {
    found := json.skip_until_key_switch(@slice("name", "tagUsed")).unwrap();
    name: ?Str = .None;  ::DeriveFmt(?Str);
    tag_used := "";
    if found == "name" {
        xx := json.not_called_get_string().unwrap();
        // TODO: pass in which ones to skip
        if xx.starts_with("_") {
            return(.None);
        };
        
        name = (Some = xx);
        tag_used = json.skip_to_string("tagUsed");
    } else {
        tag_used = json.not_called_get_string().unwrap();
    };
    xx := json.skip_to_tag_opt("inner", .StartList);
    if xx.is_none() {
        // TODO: collect these in a map and warn if we don't find them? 
        @eprintln("I sure hope struct % is a forward declaration", name&);
        return(.None);
    };
    //@println("Struct named %", name&); 
    fields := json.read_fields(true);
    tag: CRecordTag = @switch(tag_used) {
        @case("struct") => .struct;
        @case("union") => .union;
        @default => {
            @panic("expected struct/union found %", tag_used)
        };
    };
    (Some = (Record = (name = name, fields = fields, tag = tag)))
}
                            
fn skip_to_tag(json: *JsonParser, key: Str, tag: JsonPart.Tag()) JsonPart = {
    res := json.skip_until_key(key);
    if(res&.is_err(), => @panic("expected % '%'; %", tag, key, res.Err));
    value := json.next().unwrap();
    @assert(value&.is(tag), "expected % '%'", tag, key);
    value
}

fn skip_to_string(json: *JsonParser, key: Str) Str = {
    value := json.skip_to_tag(key, .StringValue);
    value.StringValue
}

fn pop_string(json: *JsonParser) Str = {
    value := json.next().unwrap();
    @assert(value&.is(.StringValue), "expected % StringValue", value&.tag());
    value.StringValue
}

fn skip_until_key_switch(self: *JsonParser, keys: []Str) Result(Str, Str) = {
    loop() {
        token := @try(self.next()) return;
        if token&.is(.Key) {
            for keys { name |
                if token.Key == name {
                    return(Ok = name);
                };
            };
            @try(self.skip_next_value()) return;
        } else {
            // if its End, we got to the end of the object. otherwise malformed input. 
            return(Err = "key not found")
        };
    };
    unreachable()
}

fn skip_to_tag_opt(json: *JsonParser, key: Str, tag: JsonPart.Tag()) ?JsonPart = {
    res := json.skip_until_key(key);
    ::if(?JsonPart);
    if(res&.is_err(), => .None) {
        value := json.next().unwrap();
        @assert(value&.is(tag), "expected % '%'", tag, key);
        (Some = value)
    }
}

fn read_fields(json: *JsonParser, is_struct: bool) []CRecordField = {
    fields: List(CRecordField) = list(temp());
    dowhile {
        continue :: local_return;
        value := json.next().unwrap();
        if value&.is(.StartDict) {
            kind := json.skip_to_string("kind");
            if kind == "FormatAttr" || kind == "BuiltinAttr" {
                json.skip_current_value();
                continue(true);
            };
            
            if is_struct {
                if kind == "RecordDecl" {
                    // you're allowed to have an annonymus union as a field in C11
                    xx := json.record_decl();
                    //println("anon union");
                    if xx { decl |
                        mem := temp().alloc(CDecl, 1);
                        mem.ptr[] = decl;
                        fields&.push(Anon = mem.ptr);
                    };
                    continue(true);
                };
                if kind == "EnumDecl" {
                    json.skip_to_tag("inner", .StartList);
                    f := json.read_enum_fields();
                    mem := temp().alloc(CDecl, 1);
                    mem.ptr[] = (Enum = (name = .None, items = f));
                    fields&.push(Anon = mem.ptr);
                    continue(true);
                };
                @assert_eq(kind, "FieldDecl");
            } else {
                if kind != "ParmVarDecl" {
                    // no clue wtf this means...
                    res := json.skip_current_value();
                    res.unwrap();
                    continue(true);
                };
            };
            
            found := or json.skip_until_key_switch(@slice("name", "type")) { _ |
                panic("should have 'name' or 'type'")
            };
            name := "";
            type := "";
            if found == "name" {
                name = json.pop_string();
                json.skip_to_tag("type", .StartDict);
                type = json.skip_to_string("qualType");
            } else {
                json.next().unwrap();
                type = json.skip_to_string("qualType");
            };
            
            res := json.skip_current_value();
            res.unwrap();
            //@println("- field %: %", name, type);
            value := json.next().unwrap();
            if !value&.is(.End) {
                // You get here (by luck) if its a bitfield
                res := json.skip_current_value();
            };
            fields&.push(Named = (name = name, type = type));
            true
        } else {
            false
        }
    };
    fields.items()
}

fn read_enum_fields(json: *JsonParser) []CEnumItem => {
    fields: List(CEnumItem) = list(temp());
    dowhile {
        continue :: local_return;
        value := json.next().unwrap();
        if value&.is(.StartDict) {
            kind := json.skip_to_string("kind");
            @assert_eq(kind, "EnumConstantDecl");
            name := json.skip_to_string("name");
            value: ?Str = .None;
            if json.skip_to_tag_opt("inner", .StartList) {_|
                res := json.next().unwrap();
                assert(res&.is(.StartDict), "enum inner->[]->{}");
                if json.skip_to_tag_opt("value", .StringValue) { v | 
                    value = (Some = v.StringValue);
                };
                json.skip_current_value().unwrap();
                res := json.next().unwrap();
                assert(res&.is(.End), "// TODO: skip_current_value should probably eat the End too?");
                json.skip_current_value().unwrap();
            };
            fields&.push(name = name, value = value);
            true
        } else {
            false
        }
    };
    fields.items()
}
