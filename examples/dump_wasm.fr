//! For debugging codegen. Parses a binary wasm module and outputs an arbitrary text format. 
//! For my current purposes it only needs to support the subset of the format that my backend actually outputs. 

#use("@/backend/lib.fr");
#use("@/examples/import_wasm/parse.fr");

LoadWasm :: void;  // TODO: bleh

main :: fn() void = dump(read_file_from_last_arg());

dump :: fn(input: []u8) void = {
    w: WasmModule = empty(temp()); w := w&;
    @println("--- read % bytes ---", input.len);
    p: ParseWasm = (w = w, src = input);
    or parse_wasm(p&) { e |
        @panic("% (at byte index %)", e, p.cursor);
    };
    println("--- initial parse successful ---");
    
    out := u8.list(temp()); out := out&;
    
    import_types := temp().alloc_uninit(Wasm.TypeIdx, w.imported_function_count);
    f_count := min(w.functions.len, w.code.len);
    function_names := temp().alloc_zeroed(Str, f_count + w.imported_function_count);
    
    ::enum(Wasm.ValType);
    if w.imports.len > 0 {
        @fmt(out, "=== BEGIN IMPORT SECTION ===\n");
        n := 0;
        each w.imports { it |
            ::tagged(@type it.desc);
            @fmt(out, "- '%' from '%' is a %", it.name.items(), it.module.items(), it.desc&.tag());
            @if_let(it.desc) fn Function(type) => {
                @fmt(out, "\n    - ");
                show_type(out, w, type);  
                function_names[n] = @tfmt("%$%", it.name.items(), it.module.items());
                import_types[n] = type; n += 1;
            };
            @fmt(out, "\n");
        };
        @fmt(out, "=== END IMPORT SECTION ===\n\n");
        @debug_assert_eq(n, w.imported_function_count);
    } else {
        @fmt(out, "=== NO IMPORTS ===\n\n");
    };
    
    if w.exports.len > 0 {
        @fmt(out, "=== BEGIN EXPORT SECTION ===\n");
        enumerate w.exports { i, it |
            ::enum(Wasm.ImportType);
            @fmt(out, "- '%' % %\n", it.name.items(), it.type, it.id);
            @if_let(it.type) fn Func() => {
                function_names[it.id.zext()] = it.name.items();
            };
        };
        @fmt(out, "=== END EXPORT SECTION ===\n\n");
    } else {
        @fmt(out, "=== NO EXPORTS ===\n\n");
    };
    
    if w.data.len > 0 {
        @fmt(out, "=== BEGIN DATA SECTION ===\n");
        each w.data { it |
            start := ptr_diff(input.ptr, it.bytes.ptr);
            @fmt(out, "- % bytes // [%..<%]\n  ", it.bytes.len, start, start + it.bytes.len);
            if it.active_offset_expr.len == 0 {
                @fmt(out, "(passive)\n");
            } else {
                @fmt(out, "active at offset ");
                dump_wasm_expr(w, input, it.active_offset_expr.items(), out, import_types);
            };
        };
        @fmt(out, "=== END DATA SECTION ===\n\n");
    } else {
        @fmt(out, "=== NO DATAS ===\n\n");
    };
    
    if w.tables.len > 0 {
        @fmt(out, "=== BEGIN TABLE SECTION ===\n");
        each w.tables { it |
            @fmt(out, "- % (min = %, max = %)\n", it.type, it.limits.min, it.limits.max);
        };
        @fmt(out, "=== END TABLE SECTION ===\n\n");
    } else {
        @fmt(out, "=== NO TABLES ===\n\n");
    };

    if w.elements.len > 0 {
        @fmt(out, "=== BEGIN ELEMENT SECTION ===\n");
        each w.elements { it |
            @fmt(out, "- table=%\n  ", it.table.id);
            if it.active_offset_expr.len == 0 {
                @fmt(out, "(passive)\n");
            } else {
                @fmt(out, "active at offset ");
                dump_wasm_expr(w, input, it.active_offset_expr.items(), out, import_types);
            };
            @fmt(out, "  Functions: [");
            for it.funcs { id |
                @fmt(out, "%, ", id.id);
            };
            @fmt(out, "]\n");
        };
        @fmt(out, "=== END ELEMENT SECTION ===\n\n");
    } else {
        @fmt(out, "=== NO ELEMENTS ===\n\n");
    };
    
    if w.globals.len > 0 {
        @fmt(out, "=== BEGIN GLOBAL SECTION ===\n");
        each w.globals { it |
            @fmt(out, "- % %\n  init ", if(it.mutable, => "mutable", => "constant"), it.type);
            dump_wasm_expr(w, input, it.init_expr.items(), out, import_types);
        };
        @fmt(out, "=== END GLOBAL SECTION ===\n\n");
    } else {
        @fmt(out, "=== NO GLOBALS ===\n\n");
    };
    
    @fmt(out, "=== BEGIN TYPE SECTION ===\n");
    range(0, w.types.len) { i |
        @fmt(out, "- ");
        show_type(out, w, (id = i.trunc()));  
        @fmt(out, "\n");
    };
    @fmt(out, "=== END TYPE SECTION ===\n\n");
    print(out.items()); out.clear();
    
    @fmt(out, "=== BEGIN FUNCTION/CODE SECTION ===\n");
    if w.functions.len != w.code.len {
        @fmt(out, "(ERROR: % function types and % function bodies)\n", w.functions.len, w.code.len);
        print(out.items()); out.clear();
    };
    
    locals := Wasm.ValType.list(temp());
    enumerate w.code { i, code | 
        continue :: local_return;
        abs_index := i + w.imported_function_count;
        name := function_names[abs_index];
        @fmt(out, "[F%]: %\n- signeture ", abs_index, name);
        if i < w.functions.len {
            ty := w.functions[i];
            if !show_type(out, w, ty) {
                print(out.items()); out.clear();
                continue();
            };
            locals&.push_all(w.types[ty.id.zext()].arg.items());
        } else {
            @fmt(out, "(ERROR: missing. only % entries signeture section)", w.functions.len);
            print(out.items()); out.clear();
        };
        @fmt(out, "\n");
        if code.locals.len == 0 {
            @fmt(out, "- only argument locals\n");
        } else {
            @fmt(out, "- (non-argument) locals: ");
            each code.locals { it |
                @fmt(out, "(% x %), ", it.type, it.count);
                locals&.push_repeated(it.count, it.type);
            };
            @fmt(out, "\n");
        };
        
        @fmt(out, "- code ");
        dump_wasm_expr(w, input, code.insts.items(), out, import_types, locals.items());
        locals&.clear();
    };
    @fmt(out, "=== END FUNCTION/CODE SECTION ===\n");
    
    print(out.items());
}

// TODO: this sucks. should allow default parameter values. :Compiler
fn dump_wasm_expr(w: *WasmModule, i: []u8, is: []u8, o: *List(u8), it: []Wasm.TypeIdx) void = 
    dump_wasm_expr(w, i, is, o, it, empty());

fn dump_wasm_expr(w: *WasmModule, full_input: []u8, insts: []u8, out: *List(u8), import_types: []Wasm.TypeIdx, local_types: []Wasm.ValType) void = {
    ::enum(Qbe.O);
    ::enum(Qbe.Cls);
    
    start := ptr_diff(full_input.ptr, insts.ptr);
    @fmt(out, "{  // [%..<%]", start, start + insts.len);
    if start < 0 || insts.len < 0 { 
        @fmt(out, "\n // (ERROR: negative sizes??)\n");
        print(out.items()); out.clear();
    };
    c := 0;
    indent := 1;
    next_label := 0;
    BlockItem :: @struct(n: i64, loop: bool);
    stack := BlockItem.list(temp());
    while => c < insts.len {
        continue :: local_return;
        
        ::enum(Wasm.Inst);
        byte := insts[c]; c += 1;
        encoding := lookup_wasm_encoding(byte);
        inst := @as(Wasm.Inst) byte;
        
        if @is(inst, .End) {
            indent -= 1;
            if indent < 0 {
                @fmt(out, "         (ERROR: closed too many blocks)");
            } else {
                if indent == 0 && c != insts.len {
                    @fmt(out, "        (ERROR: closed all blocks but there is still code)");
                };
            };
            indent = max(indent, 0);
        };
        
        @fmt(out, "\n  %", f_rep("    ", indent));
        if indent == 0 && c != insts.len {
            @fmt(out, "?");
        };
        
        if @is(inst, .End) {
            @fmt(out, "}; ");
            if stack&.pop() { it |
                if !it.loop {
                    @fmt(out, "// %:", it.n);
                };
            };
            continue();
        };
        
        ::enum(@type encoding.kind);
        if encoding.kind != .other {
            k_name := @const_slice("I32", "I64", "F32", "F64", "???");
            k := min(k_name.len - 1, zext(@as(i32)encoding.cls));
            @fmt(out, "%_%(", k_name[k], encoding.op);
            if @is(encoding.kind, .load, .store) {
                @fmt(out, "a = ");
                push_leb(false);
                @fmt(out, ", o = ");
                push_leb(false);
            };
            @fmt(out, ");");
            continue();
        };
        
        push_leb :: fn($signed) => {
            value, r, ok := read_leb128(insts.rest(c), signed);
            if ok {
                c += ptr_diff(insts.ptr.offset(c), r.ptr);
                @fmt(out, "%", value);
                value
            } else {
                @fmt(out, " (ERROR: invalid leb encoding)");
                continue()
            }
        };
        
        read_leb_s :: fn() => {
            value, r, ok := read_leb128_signed(insts.rest(c));
            if ok {
                c += ptr_diff(insts.ptr.offset(c), r.ptr);
                value
            } else {
                @fmt(out, " (ERROR: invalid leb encoding)");
                continue()
            }
        };
        
        if @is(inst, .Block, .Loop, .If) {
            indent += 1;
            @fmt(out, "% \"", inst);
            first_type_byte := insts[c];
            type_index := read_leb_s();
            if type_index >= 0 {
                show_type(out, w, (id = type_index.trunc()));  
            } else {
                type := @as(Wasm.ValType) first_type_byte;
                if type != .EmptyBlock {
                    @fmt(out, "() -> (%)", type);
                };
            };
            @fmt(out, "\" { ");
            if inst == .Loop {
                @fmt(out, "// %: ", next_label);
            };
            stack&.push(n = next_label, loop = inst == .Loop);
            next_label += 1;
            
            continue();
        };
        
        @fmt(out, "%(", inst);
        if @is(inst, .LocalGet, .LocalSet, .LocalTee, .GlobalGet, .GlobalSet, .Br, .BrIf) {
            arg := push_leb(false);
            @fmt(out, ");");
            
            if @is(inst, .LocalGet, .LocalSet) {
                @fmt(out, " //; %", local_types[arg]);
            };
            
            if @is(inst, .Br, .BrIf) {
                if arg < stack.len {
                    it := stack[stack.len - arg - 1];
                    @fmt(out, " // :%", it.n);
                };
            };
            continue()
        };
        if inst == .Select {
            count := push_leb(false);
            range(0, count) { _ |
                t := @as(Wasm.ValType) @as(u8) insts[c];
                c += 1;
                @fmt(out, ", .%", t);
            };
        }
        if @is(inst, .I32_Const, .I64_Const) {
            push_leb(true);
            @fmt(out, ");");
            continue()
        };
        
        if inst == .F32_Const {
            @fmt(out, "%);", f32.cast_front_unaligned(insts.rest(c)));
            c += 4;
            continue()
        };
        
        if inst == .F64_Const {
            @fmt(out, "%);", f64.cast_front_unaligned(insts.rest(c)));
            c += 8;
            continue()
        };
        
        if inst == .Call {
            v := push_leb(false);
            @fmt(out, "); ");
            if v < w.imported_function_count {
                @fmt(out, "  // import; ");
                show_type(out, w, import_types[v]);
            } else {
                @fmt(out, "  // F%; ", v);
                id := v - w.imported_function_count;
                show_type(out, w, w.functions[id]);
            };
            continue()
        };
        if inst == .CallIndirect {
            @fmt(out, "type = ");
            type_index := push_leb(false);
            @fmt(out, ", table = ");
            table_index := push_leb(false);
            @fmt(out, "); // ");
            show_type(out, w, (id = type_index.trunc()));
        };
        
        @fmt(out, ");");
        
    };
    @fmt(out, "\n");
}

fn show_type(out: *List(u8), w: *WasmModule, i: Wasm.TypeIdx) bool = {
    i: i64 = i.id.zext();
    @fmt(out, "[T%]: (", i);
    if i >= w.types.len {
        @fmt(out, "ERROR: not enough entries in `type` section)");
        return(false);
    };
    type := w.types.index(i);
    for(type.arg, fn(t) => @fmt(out, "%,", t));
    @fmt(out, ") -> (");
    for(type.ret, fn(t) => @fmt(out, "%,", t));
    @fmt(out, ")");
    true
}

#use("@/lib/sys/fs.fr");