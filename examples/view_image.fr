// This prints an image to your terminal (with colours!). 
// You may notice the image data I use is a jpeg but I haven't written a jpeg decompressor in franca. 
// However, I do have a c compiler so I can grab a jpeg library written in c, 
// compile it and use that to load the image. Helpfully there's no need to write 
// bindings to the library. The c compiler talks to the franca compiler. 

main :: fn() void #use(Wuffs) = {
    p, w, h := {
        data := g_src_ptr__mona_lisa_21_32_q50_jpeg;
        src_w :i32= 0;
        src_h :i32= 0;
        bytes_per_pixel :i32= 3; 
        pixels := stbi_load_from_memory(data.ptr, data.len.intcast(), src_w&, src_h&, zeroed(*i32), bytes_per_pixel);
        (pixels.slice(intcast(src_w*src_h*3)), src_w, src_h)
    };
    i := 0;
    out := u8.list(temp());
    Term :: import("@/lib/sys/terminal.fr");
    range(0, h.intcast()) { y |
        range(0, w.intcast()) { x |
            @fmt(out&, Term.set_colour, p[i], p[i + 1], p[i + 2]);
            @fmt(out&, "â–ˆ");
            i += 3;
        };
        @fmt(out&, "\n");
    };
    @println("%", out.items());
    print(Term.unset_colour);
}

Wuffs :: {
    get  :: import("@/examples/testing.fr").fetch_or_crash;
    root := get("https://github.com/google/wuffs/archive/b1174882799a6d39796a14c9b28fb4977144a480.zip", 16126015, "2725c410cd083fbd76740936a3310fe9dd1c022ce701655e3819123e6fa8339c", "wuffs-b1174882799a6d39796a14c9b28fb4977144a480");
    Ffi  :: import("@/examples/import_c/ffi.fr");
    data := @tfmt("%/test/data/mona-lisa.21x32.q50.jpeg", root);
    data := ast_alloc().read_to_string_or_crash(data).items();
    c_source := @tfmt("""
        #define WUFFS_IMPLEMENTATION
        #define WUFFS_CONFIG__MODULES
        #define WUFFS_CONFIG__MODULE__JPEG
        #define WUFFS_CONFIG__MODULE__BASE
        #define WUFFS_CONFIG__ENABLE_DROP_IN_REPLACEMENT__STB
        #define STBI_NO_STDIO
        #include "%/release/c/wuffs-unsupported-snapshot.c"
    """, root);
    fr := current_compiler_context();
    namespace := Ffi'include(fr, c_source);
    
    // TODO: doing it by value doesn't work. you get ptr=0, len=6090728512; im pretty sure i checked it's using the version of to_values that makes a copy. -- Jun 9, 2025
    //value := data;
    //(fr.vtable.add_to_scope)(fr.data, namespace, @symbol g_src_ptr__mona_lisa_21_32_q50_jpeg, []u8, ([]u8).raw_from_ptr(value&));
    
    value := @static([]u8);
    value[] = data;
    (fr.vtable.add_to_scope)(fr.data, namespace, @symbol g_src_ptr__mona_lisa_21_32_q50_jpeg, *[]u8, (*[]u8).raw_from_ptr(value&));
    
    namespace
}

#include_std("backend/lib.fr");
