// - a rectangle without using a buffer
// - fragment shader to draw mandelbrot set
// - controls: scroll to zoom, click and drag to pan

// TODO: float-float for more zoom
// TODO: real loops for dynamic step limit

#include_std("graphics/lib.fr");

driver :: fn(vtable: *ImportVTable) void = 
    Easy'build_for_graphics(vtable, "examples/mandelbrot_ui.fr");

Shaders :: @struct {
    OutV :: @struct(pos: Vec4 #position);
    vs   :: fn(i: u32 #vertex_id) OutV = {
        xy := @if(i == 0, @vec(-1.0, 1.0),
              @if(i == 1, @vec(-1.0, -1.0),
              @if(i == 2, @vec(1.0, -1.0),
              @if(i == 3, @vec(1.0, 1.0),
              @if(i == 4, @vec(1.0, -1.0),
              @if(i == 5, @vec(-1.0, 1.0),
              @vec(0.0, 0.0)))))));
        (pos = @vec(xy, 0.0, 1.0))
    }
    OutF :: @struct(frag_color: Vec4 #colour);
    // TODO: float2 has 8 byte alignment in msl but not for me
    UniF :: @struct(scale: f32, _msl_pad: f32 = 0.0, offset: Vec2);
    // FIXME PLEASE. it works tho :)
    fs   :: fn(in: OutV #input, uni: UniF #uniform(0)) Shaders.OutF = {
        c := @swizzle in.pos.xy;
        c = c * vec2(uni.scale);
        c += uni.offset;
        z := vec2(0.0);
        
        zSq := z * z;
        i :f32= 0.0;
        zy :f32= 0.0;
        zx :f32= 0.0;
        one :f32= 1.0;
        inline_range(0, 100) { _ |
            z.y = z.x * 2.0 * z.y;
            z.x = zSq.x - zSq.y;
            z = z + c;
            zSq = z * z;
            
            i = i + @if(zSq.x + zSq.y < 4.0, 0.0, one / 10.0);
        };
        
        cc := @vec(i, 1.0, 1.0, 1.0); 
        K := @vec(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
        six := vec3(6.0);
        p := abs(fract((@swizzle cc.xxx) + (@swizzle K.xyz)) * six - (@swizzle K.www));
        out := mix(@swizzle K.xxx, clamp(p - (@swizzle K.xxx), vec3(0.0), vec3(1.0)), cc.y) * (@swizzle cc.zzz);
        out2 := @if(zSq.x + zSq.y < 4.0, vec3(0.0), out);
        (frag_color = @vec(out2, 1.0))
        //(frag_color = @vec(uni.scale, uni.offset, 1.0))
        //(frag_color = @vec((@swizzle in.pos.xy) / vec2(10.0), 0.0, 1.0))
    }
};

main :: fn() void = 
    Easy'start(State);

State :: @struct {
    pipe: Sg.Pipeline;
    params: Shaders.UniF;
    dirty: bool;
};

fn on_init(state: *State, sapp: *Sapp.Self, sg: *Sg.Self) void = {
    state.params = (scale = 1.0 / 300.0, offset = (v = (-3.0, -1.0)));
    shd_desc := Sg.ShaderDesc.zeroed();
    choose_shader_impl(SOKOL_BACKEND, shd_desc&, Shaders);
    shd_desc.uniform_blocks&[0] = (
        stage = .FRAGMENT,
        size = size_of(Shaders.UniF),
        msl_buffer_n = 0,
    );
    state.pipe = sg.make(
        shader = sg.make(shd_desc),
    );
    state.dirty = true;
}

fn on_event(state: *State, sapp: *Sapp.Self, event: *Sapp.Event) void = {
    @match(event.type) {
        fn MOUSE_SCROLL() => {
            if(state.params.scale < 0.00000001 && event.scroll_y > 0, => return());
            // center the zoom on the mouse pointer instead of at (0, 0)
            // by calculating how much the offset at the mouse position would change between the zoom levels, 
            // and counteract that by applying translation 
            delta := event.scroll_y * state.params.scale / -100.0;
            pos: Vec2 = (v = (event.mouse_x, event.mouse_y));
            pos0 := pos * vec2(state.params.scale);
            pos1 := pos * vec2(state.params.scale + delta);
            state.params.offset -= (pos1 - pos0);
            state.params.scale += delta;
            state.dirty = true;
        }
        fn MOUSE_MOVE() => if event.modifiers.get(.left_mouse) != 0 {
            speed := -state.params.scale;
            delta := vec2(event.mouse_dx, event.mouse_dy);
            state.params.offset += delta * vec2(speed);
            state.dirty = true;
        }
        fn RESIZED() => {
            state.dirty = true;
        }
        @default => ();
    }
}

fn on_render(state: *State, sapp: *Sapp.Self, sg: *Sg.Self) void = {
    if !state.dirty {
        sapp.webgpu.noframe = true;
        return()
    }
    sapp.webgpu.noframe = false;
    state.dirty = false;
    
    // going to redraw on the whole screen so don't care about clearing it to anything at the beginning. 
    Easy'glue_begin_pass(sapp, sg, zeroed Sg.PassAction);
    ::[]Shaders.UniF;

    sg.apply_pipeline(state.pipe);
    sg.apply_uniforms(0, state.params&.slice(1).interpret_as_bytes());
    draw(sg = sg, base = 0, elements = 6, instances = 1);
    sg.end_pass();
    sg.commit();
};

