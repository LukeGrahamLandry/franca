//! Log the contents of an Executable and Linkable Format file. 

Elf :: import("@/backend/elf/bits.fr");

fn main() void = {
    input := read_file_from_last_arg();
    out := u8.list(temp()); out := out&;
    
    @fmt(out, "Read % bytes.\n", input.len);
    start := input;
    header := start&.pop_type(Elf.Header);
    @fmt(out, "[Elf Header] %\n\n", header);
    
    if header.program_header_entsize != size_of(Elf.ProgramHeader) {
        @fmt(out, "Unexpected phentsize (wanted %)\n", ::size_of(Elf.ProgramHeader));
    } else {
        @fmt(out, "=== Begin Program Headers ===\n");
        mem := input.rest(header.program_header_off);
        range(0, header.program_header_num.zext()) { i |
            header := mem&.pop_type(Elf.ProgramHeader);
            @fmt(out, "[PH %]: %\n", i, header);
            if header.type == .Interp {
                s: CStr = (ptr = input.index(header.offset));
                @fmt(out, "                %\n", s);
            };
            if header.type == .Dynamic {
                dump_elf_dynamic(out, input.subslice(header.offset, header.file_size));
            };
        };
        @fmt(out, "=== End Program Headers ===\n\n");
    };
    //println(out.items()); out.clear();
    
    if header.section_header_entsize != size_of(Elf.SectionHeader) {
        @fmt(out, "Unexpected phentsize (wanted %)\n", ::size_of(Elf.SectionHeader));
    } else {
        @fmt(out, "=== Begin Section Headers ===\n");
        n: i64 = header.section_header_num.zext();
        @assert_le(header.section_header_off + n * size_of(Elf.SectionHeader), input.len);
        sections: []Elf.SectionHeader = (ptr = ptr_cast_unchecked(u8, Elf.SectionHeader, input.ptr.offset(header.section_header_off)), len = n);
        enumerate sections { section_i, section |
            @fmt(out, "[SH %]: %\n", section_i, section);
            
            if section.flags != 0 {
                @fmt(out, "  [Flags] ");
                for_enum Elf.SectionFlag { e | 
                    if section.flags.bit_and(1.shift_left(@as(i64) e)) != 0 {
                        @fmt(out, "%, ", e);
                    };
                };
                @fmt(out, "\n");
            };
            
            section_bytes :: fn(i) => {
                s := sections.index(i.int());
                input.subslice(s.offset, s.size)
            };
            
            if @is(section.type, .SymbolTable, .DynSymbolTable) {
                @fmt(out, "  [Symbols]\n");
                if section.ent_size != size_of(Elf.Symbol) {
                    @fmt(out, "Unexpected entsize (wanted %)\n", ::size_of(Elf.Symbol));
                } else {
                    mem := section_bytes(section_i);
                    str_bytes := section_bytes(section.link);
                    i := 0;
                    dowhile {
                        symbol := mem&.pop_type(Elf.Symbol);
                        n: i64 = symbol.name.zext();
                        name: CStr = @if(n < str_bytes.len, (ptr = str_bytes.index(n)), "ERROR: symbol name OOB");
                        @fmt(out, "    [%] % %\n", i, symbol, name);
                        //s_i: i64 = symbol.section_header_index.zext();
                        //@if(s_i != 65521)
                        //if s_i >= sections.len || symbol.value > sections[s_i].addr + sections[s_i].size || symbol.value < sections[s_i].addr {
                        //    @fmt(out, "ERROR: symbol offset doesn't fit in section_header_index!\n");
                        //};
                        i += 1;
                        mem.len >= size_of(Elf.Symbol)
                    };
                    if mem.len != 0 {
                        @fmt(out, "ERROR: Section size was not a multiple of entsize\n");
                    };
                };
            };
            
            if section.type == .Dynamic {
                dump_elf_dynamic(out, input.subslice(section.offset, section.size));
            };
            
            //println(out.items()); out.clear();
            show_relocs :: fn($Record, name) => {
                @fmt(out, "=== Relocations (%) === \n", name);
                mem := input.subslice(section.offset, section.size);
                symbols_section := sections.index(section.link.zext());
                symbols_bytes := section_bytes(section.link);
                symbols: []Elf.Symbol = (ptr = ptr_cast_unchecked(u8, Elf.Symbol, symbols_bytes.ptr), len = symbols_bytes.len / Elf.Symbol.size_of());
                str_bytes := section_bytes(symbols_section.link);
                
                while => mem.len > 0 {
                    dyn := mem&.pop_type(Record);
                    s := "????";
                    if dyn.sym < symbols.len.trunc() {
                        n: i64 = symbols[dyn.sym.zext()].name.zext();
                        name: CStr = @if(n < str_bytes.len, (ptr = str_bytes.index(n)), "ERROR: symbol name OOB");
                        s = name.str();
                    };
                    @fmt(out, "    - % %\n", dyn, s);
                };
                @fmt(out, "===\n");
            };
            
            if section.type == .RelocAddend {
                show_relocs(Elf.RelA, "w/ Addend");
            };
            if section.type == .RelocNoAddend {
                show_relocs(Elf.Rel, "NO Addend");
            };
            if section.type == .VerSym {
                @fmt(out, "  [Symbol Versions]\n    ");
                mem := input.subslice(section.offset, section.size);
                symbols: []u16 = (ptr = ptr_cast_unchecked(u8, u16, mem.ptr), len = mem.len / u16.size_of());
                enumerate symbols { i, v | 
                    @fmt(out, "(%. %), ", i, v[]);
                };
                @fmt(out, "\n===\n");
            };
            
            if section.type == .VerNeed {
                @fmt(out, "  [Symbol Versions Need]\n");
                mem := input.subslice(section.offset, section.size);
                if mem.len > size_of(Elf.VersionNeed) {
                    break :: local_return;
                    p := 0;
                    loop {
                        it := ptr_cast_unchecked(u8, Elf.VersionNeed, mem.ptr.offset(p));
                        @fmt(out, "      - %\n", it);
                        off := p + it.aux.zext();
                        range(0, it.count.zext()) { _ |
                            it := ptr_cast_unchecked(u8, Elf.VersionAux, mem.ptr.offset(off));
                            @fmt(out, "        - %\n", it);
                            off += it.next.zext();
                        };
                        if it.next == 0 {
                            break();
                        };
                        p += it.next.zext();
                    };
                };
                @fmt(out, "===\n");
            };
            
            if section_i == header.section_header_names_index.zext() {
                @fmt(out, "  [Section Header Names]\n");
            };
            
            has_strings := section.flags.bit_and(1.shift_left(@as(i64) Elf.SectionFlag.Strings)) != 0 || section.type == .StringTable;
            if section.size > 0 && has_strings {
                @fmt(out, "  [Strings]\n");
                c := 0;
                i := 0;
                dowhile {
                    s: CStr = (ptr = input.index(section.offset + c));
                    s := s.str();
                    if s.len > 0 {
                        @fmt(out, "    %. [%..<%] %\n", i, c, c + s.len + 1, s);
                    };
                    i += 1;
                    c += s.len + 1;
                    c < section.size
                };
            };
        };
        @fmt(out, "=== End Section Headers ===\n\n");
    };
    
    print(out.items());
}


fn dump_elf_dynamic(out: *List(u8), mem: []u8) void = {
    @fmt(out, "=== Dynamic === \n");
    while => mem.len > 0 {
        dyn := mem&.pop_type(Elf.Dyn);
        @fmt(out, "    - %\n", dyn);
    };
    @fmt(out, "===\n");
}

::DeriveFmt(Elf.Header);
::DeriveFmt(Elf.ProgramHeader);
::DeriveFmt(Elf.SectionHeader);
::DeriveFmt(Elf.Symbol);
::DeriveFmt(Elf.Dyn);
::DeriveFmt(Elf.RelA);
::DeriveFmt(Elf.Rel);
::DeriveFmt(Elf.VersionNeed);
::DeriveFmt(Elf.VersionAux);
::enum(Elf.Type);
::enum(Elf.Machine);
::enum(Elf.SegmentType);
::enum(Elf.SectionType);
::enum(Elf.SectionFlag);
::enum(Elf.DynTag);

fn display(i: *u16, out: *List(u8)) void = 
    display(@as(i64) i[].zext(), out);

fn display(i: *u8, out: *List(u8)) void = 
    display(@as(i64) i[].zext(), out);

#use("@/lib/sys/fs.fr");
