//! http://mazesforprogrammers.com/ is cool.
/*
@struct fn Cell(north: bool, south: bool, east: bool, west: bool);
@struct fn Grid(rows: i64, cols: i64, cells: List(Cell));

fn gen_binary_tree(grid: *Grid) Unit = 
    range(0, grid.rows[], fn(row: i64) Unit = {
        range(0, grid.cols[], fn(col: i64) Unit = {
            let i = row.mul(grid.cols[]).add(col);
            let n = grid.cells.index(i)[].north;
            let e = grid.cells.index(i)[].east;
            
            (n.or(e), fn= {
                (n, fn= {
                    
                }, fn={
                    
                })!if;
            }, fn=())!if;
            
            ()
        })
    });
*/
/*
pub 
    let mut near: Vec<Pos> = Vec::with_capacity(2);
    for row in 0..grid.rows {
        for col in 0..grid.cols {
            let pos = Pos::of(row, col);

            let check = grid.north(pos);
            if grid.has(check) {
                near.push(check);
            }

            let check = grid.east(pos);
            if grid.has(check) {
                near.push(check);
            }

            if near.is_empty() {
                continue;
            }

            let other = near[rand_below(near.len())];
            grid.mut_cell(pos).links.push(other);
            grid.mut_cell(other).links.push(pos);
            near.clear();
        }
    }
}

    pub fn to_string(&self) -> String {
        let chars_per_row = 2 + (4 * self.cols) as usize;
        let total_chars = chars_per_row * self.rows as usize;
        let mut result = String::with_capacity(total_chars);

        // The top row
        result.push('+');
        for _ in 0..self.cols {
            result.push_str("---+");
        }
        result.push('\n');

        for row in 0..self.rows {
            let mut top = String::with_capacity(chars_per_row);
            top.push('+');
            let mut bottom = String::with_capacity(chars_per_row);
            bottom.push('|');
            for col in 0..self.cols {
                let pos = Pos::of(row, col);
                if self.get_cell(pos).links.contains(&self.east(pos)) {
                    top.push_str("    ");
                } else {
                    top.push_str("   |");
                }
                if self.get_cell(pos).links.contains(&self.south(pos)) {
                    bottom.push_str("   +");
                } else {
                    bottom.push_str("---+");
                }
            }
            result.push_str(&*top);
            result.push('\n');
            result.push_str(&*bottom);
            result.push('\n');
        }
        result
    }
*/

fn main(canary: i64) = {
    println("hello");
    canary
}

// TODO: be able to reference new libc functions without rebuilding the compiler. 
// TODO: seed random with the time
