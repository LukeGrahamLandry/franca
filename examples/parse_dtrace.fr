//! This doesn't make nice flame graphs yet.
//! Can't decide if I care enough to fix it or would rather render them myself. 

#include_std("compiler/pool.fr");

fn main() void = {
    path := "out.stacks";
    p: ParseDTrace = (
        input = read_to_string_or_crash(temp(), path).items(),
        pool = init(libc_allocator),
        node = (name = Symbol.zeroed(), children = init(libc_allocator))
    );
    while => p&.ok() {
        p&.do_stack();
    };
    p.node&.fill_weight();
    
    out := u8.list(temp());
    out2 := u8.list(temp());
    //print(p.node&, p.pool&, out&, 0);
    start :: """
    <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="1000" height="1000" viewBox="0 0 1000 1000">
    """;
    @fmt(out&, start);
    draw(p.node&, p.pool&, out2&, out&, 0.0, 0.0, 1000.0, 10.0);
    @fmt(out2&, "</svg>\n");
    println(out.items());
    println(out2.items());
}

ParseDTrace :: @struct(
    input: []u8, 
    current := 0, 
    pool: StringPool,
    node: TraceNode,
);

TraceNode :: @rec @struct(
    name: Symbol,
    children: HashMap(Symbol, *TraceNode),
    weight := 0,
    height := 0,
);

fn draw(self: *TraceNode, pool: *StringPool, top: *List(u8), bottom: *List(u8), x: f64, y: f64, width: f64, height: f64) void = {
    t :: """
    <rect x="%" y="%" width="%" height="%" fill="rgb(255,0,255)"/>
    <text x="%" y="%" font-size="8" fill="rgb(0,0,0)"> % </text>
    """;
    name := pool.get(self.name);
    if name.len > width.int() {
        name = "";
    };
    @fmt(top, t, x, y, width, height, x + (width / 2), y + (height / 2), name);
    each self.children& { _, c | 
        w := c.weight.float() / self.weight.float() * width;
        draw(c[], pool, top, bottom, x, y + height, w, height);
        x += w;
    };
}

fn print(self: *TraceNode, pool: *StringPool, out: *List(u8), depth: i64) void = {
    range(0, depth) { _ |
        out.push_all(" ");
    };
    @fmt(out, "- (%) % % %\n", depth, pool.get(self.name), self.weight, self.height);
    each self.children& { _, c | 
        c[].print(pool, out, depth + 1);
    };
}

fn fill_weight(self: *TraceNode) i64 = {
    each self.children& { _, c | 
        self.weight += c[].fill_weight();
        self.height = max(self.height, c.height);
    };
    self.height += 1;
    self.weight = self.weight.max(1);
    self.weight
}

fn do_stack(p: *ParseDTrace) *TraceNode = {
    name, count, offset := p.do_line();
    if count != -1 {
        return(p.node&);
    };
    node := p.do_stack();
    name := p.pool&.insert_owned(name);
    if node.children&.get(name) { child | 
        return(child);
    };
    a := node.children.alloc;
    c := a.box(TraceNode);
    c[] = (name = name, children = init(a));
    node.children&.insert(name, c);
    c
}

// TODO: stop being lazy. use versions of dec_digit and hex_digit that don't panic on invalid input. 
fn do_line(p: *ParseDTrace) Ty(Str, i64, i64) = {
    while => p.ok() && p.peek().is_ascii_whitespace() {
        p.current += 1;
    };
    if p.peek() == "0".ascii() && p.input[p.current + 1] == "x".ascii() { // :OOB
        // its an address like 0xABCDE
        p.current += 2;
        start := p.current;
        addr := p.read_int(16, hex_digit);
        end := p.current;
        return(p.input.slice(start, end), -1, -1);
    };
    if p.peek().is_ascii_digit() {
        // its the end of the stack.
        count := p.read_int(10, dec_digit);
        return("", count, -1);
    };
    // its a function name
    // Note: names of c++ shit can have spaces because they're signetures (like functions in dyld).
    start := p.current;
    while => p.ok() && p.peek() != "\n".ascii() && p.peek() != "+".ascii() {
        p.current += 1;
    };
    end := p.current;
    offset := if(p.peek() != "+".ascii(), => -1) {
        p.current += 3; // +0x
        p.read_int(16, hex_digit)
    };
    return(p.input.slice(start, end), -1, offset)
}

// TODO: `convert: @Fn(c: u8) i64` should work. 
fn read_int(p: *ParseDTrace, $base: i64, $convert: OverloadSet) i64 = {
    v := 0;
    while => p.ok() && !p.peek().is_ascii_whitespace() {
        v *= base;
        v += p.peek().convert();
        p.current += 1;
    };
    v
}

fn ok(p: *ParseDTrace) bool = 
    p.current < p.input.len - 1;

fn peek(p: *ParseDTrace) u8 = 
    p.input[p.current];
