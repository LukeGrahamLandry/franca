//! Renders a 1-bit ascii art mandelbrot set. 
//! If you like fractals, check out: https://github.com/LukeGrahamLandry/FractalViewer

@struct fn Pos(x: f64, y: f64);

fun add(a: Pos, b: Pos) Pos = (x: add(a&.x[], b&.x[]), y: add(a&.y[], b&.y[]));
fun sub(a: Pos, b: Pos) Pos = (x: sub(a&.x[], b&.x[]), y: sub(a&.y[], b&.y[]));
fun div(a: Pos, b: Pos) Pos = (x: div(a&.x[], b&.x[]), y: div(a&.y[], b&.y[]));
fun mul(a: Pos, b: Pos) Pos = (x: mul(a&.x[], b&.x[]), y: mul(a&.y[], b&.y[]));

fn mandelbrot(c: Pos, z: Pos, steps: i64) i64 = {
    var i = 0;
    var zSq = z.mul(z);
    while(fn= and(i.lt(steps), zSq&.x[].add(zSq&.y[]).lt(4.0))) {|
        z&.y[] = z&.x[].mul(2.0).mul(z&.y[]);
        z&.x[] = zSq&.x[].sub(zSq&.y[]);
        z = z.add(c);
        zSq = z.mul(z);
        i = i.add(1);
    };
    i
}

fn main() Unit = {
    let start = timestamp();
    let max_steps = 45;
    let width = 70;
    let height = 35;
    let x_speed = 0.03;
    let y_speed = 0.06;
    let x_start = 0.0.sub(1.5);
    let y_start = 0.0.sub(1.0);
    
    var out: List$i64 = list(width.mul(height));
    var pos: Pos = init(x: x_start, y: y_start);
    range(0, height) {(_: i64)|
        range(0, width) {(_: i64)|
            let steps = mandelbrot(pos, init(x: 0.0, y: 0.0), max_steps);
            if(steps.eq(max_steps)) {|
                out&.push_all("@");
            }{|
                out&.push_all(" ");
            };
            pos&.x[] = pos&.x[].add(x_speed);
        };
        
        out&.push_all("|");
        out&.push(10);  // TODO: "\n"
        pos&.x[] = x_start;
        pos&.y[] = pos&.y[].add(y_speed);
    };
    // TODO: this prints 7 nulls per byte because I don't have u8. my terminal just doesn't render them so it looks fine for me :)
    println(out&.items());
    let end = timestamp();
    
    out&.clear();
    let ms = end.sub(start).str();
    (@fmt(out&, "Finished running main() in % milliseconds.", ms));
    println(out&.items());
}

// TODO: add 'fn int_to_float' so i can return answer in seconds like other lang versions
fn timestamp() i64 = {
    const TimeSpec = (seconds: i64, nanoseconds: i64)!struct;
    const NS_TO_MS = 1000.mul(1000);
    const CLOCK_REALTIME = 0;
    
    var time_spec: TimeSpec = (seconds: 0, nanoseconds: 0);
    let out: VoidPtr = time_spec&;
    clock_gettime(CLOCK_REALTIME, out);
    time_spec&.seconds[].mul(1000).add(time_spec&.nanoseconds[].div(NS_TO_MS))
}
