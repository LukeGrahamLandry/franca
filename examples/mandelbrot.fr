//! Renders a 1-bit ascii art mandelbrot set. 

Pos :: @struct(x: f64, y: f64);
fn add(a: Pos, b: Pos) Pos = (x = a.x + b.x, y = a.y + b.y);
fn mul(a: Pos, b: Pos) Pos = (x = a.x * b.x, y = a.y * b.y);

fn mandelbrot(c: Pos, z: Pos, steps: i64) i64 = {
    i := 0;
    zSq := z * z;
    while => i < steps && zSq.x + zSq.y < 4 {
        z.y = z.x * 2 * z.y;
        z.x = zSq.x - zSq.y;
        z += c;
        zSq = z * z;
        i += 1;
    };
    i
}

fn render() List(u8) = {
    max_steps := 45;
    width := 70;
    height := 35;
    x_speed := 0.03;
    y_speed := 0.06;
    x_start := -1.5;
    y_start := -1.0;
    
    // Do Not Remove. This gets replaced by examples/60fps.fr
    // @InsertConfig
    out: List(u8) = list(width * height, temp());
    pos: Pos = (x = x_start, y = y_start);
    
    range(0, height) { _ |
        range(0, width) { _ |
            steps := mandelbrot(pos, (x = 0, y = 0), max_steps);
            c := @if(steps == max_steps, "@".ascii(), " ".ascii());
            out&.push(c);
            pos.x += x_speed;
        };
        
        out&.push("|".ascii());
        // I'm cheating to not compile __string_escapes so 60fps.fr looks better. 
        out&.push(10);  // \n
        pos.x = x_start;
        pos.y += y_speed;
    };
    out&.push(10);  // \n
    out
}

fn main() void = {
    out := render();
    print(out&.items());
}
