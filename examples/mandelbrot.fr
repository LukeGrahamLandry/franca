Pos :: @struct(x: f64, y: f64);

#inline fn init(x: f64, y: f64) Pos = (x = x, y = y);
#inline fn add(a: Pos, b: Pos) Pos = (x = add(a.x, b.x), y = add(a.y, b.y));
// :sema_regression this should be able to be #inline and still get its type hint. 
fn mul(a: Pos, b: Pos) Pos = (x = mul(a.x, b.x), y = mul(a.y, b.y));

fn mandelbrot(c: Pos, z: Pos, steps: i64) i64 = {
    i := 0;
    zSq := z.mul(z);
    while(=> and(i.lt(steps), zSq.x.add(zSq.y).lt(4.0))) {
        z.y = z.x.mul(2.0).mul(z.y);
        z.x = zSq.x.sub(zSq.y);
        z += c;
        zSq = z.mul(z);
        i += 1;
    };
    i
}

fn render() List(u8) = {
    max_steps := 45;
    width := 70;
    height := 35;
    x_speed := 0.03;
    y_speed := 0.06;
    x_start := 0.0.sub(1.5);
    y_start := 0.0.sub(1.0);
    
    out: List(u8) = list(width.mul(height), temp());
    pos: Pos = init(x = x_start, y = y_start);
    
    range(0, height) {_|
        range(0, width) {_|
            steps := mandelbrot(pos, init(x = 0.0, y = 0.0), max_steps);
            if(steps.eq(max_steps)) {
                out&.push("@".ascii());
            }{
                out&.push(" ".ascii());
            };
            pos.x = pos.x.add(x_speed);
        };
        
        out&.push_all("|\n");
        pos.x = x_start;
        pos.y = pos.y.add(y_speed); // TODO: fix += with new place expressions. 
    };
    out&.push_all("\n");
    out
}

fn main() void = {
    start := timestamp();
    out := render();
    print(out&.items());
    end := timestamp();
    @println("Finished running main() in % milliseconds.", end.sub(start)); 
}
