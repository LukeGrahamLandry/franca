// TODO: only llvm supports floats rn

@struct fn Pos(x: f64, y: f64);

fn both(a: Pos, b: Pos, f: Fn(Ty(f64, f64), f64)) Pos = init(both(a&.x[], b&.x[]), both(a&.y[], b&.y[]));
/* // TODO: infer fn type for overload
@pub fn add(a: Pos, b: Pos) Pos = both(a, b, add);
@pub fn sub(a: Pos, b: Pos) Pos = both(a, b, sub);
@pub fn div(a: Pos, b: Pos) Pos = both(a, b, diz);
@pub fn mul(a: Pos, b: Pos) Pos = both(a, b, mul);
*/

@pub fn add(a: Pos, b: Pos) Pos = (x: add(a&.x[], b&.x[]), y: add(a&.y[], b&.y[]));
@pub fn sub(a: Pos, b: Pos) Pos = (x: sub(a&.x[], b&.x[]), y: sub(a&.y[], b&.y[]));
@pub fn div(a: Pos, b: Pos) Pos = (x: div(a&.x[], b&.x[]), y: div(a&.y[], b&.y[]));
@pub fn mul(a: Pos, b: Pos) Pos = (x: mul(a&.x[], b&.x[]), y: mul(a&.y[], b&.y[]));

fn mandelbrot(c: Pos, z: Pos, steps: i64) i64 = {
    var i = 0;
    var zSq = z.mul(z);
    (fn() = and(i.lt(steps), zSq&.x[].add(zSq&.y[]).lt(4.0)), fn() = {
        z&.y[] = z&.x[].mul(2.0).mul(z&.y[]);
        z&.x[] = zSq&.x[].sub(zSq&.y[]);
        z = z.add(c);
        zSq = z.mul(z);
        i = i.add(1);
    })!while;
    i
}

// TODO: zero float literal
fn main(canary: i64) i64 = {
    // TODO: print as characters
    let steps = mandelbrot(init(x: 1.0, y: 1.0), init(x: 1.0, y: 1.0), 40);
    print_int(steps);
    
    canary
}
