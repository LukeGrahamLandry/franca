// TODO: this works on x86 jit and qbe/llvm aot. 
//       - i bet the arm problem is IncPtrBytes cant be negative 
// TODO: the signeture you can make should be []u8 and wrap around / do bounds checks. 

// - needing the loads/stores for phis is annoying
// - to work on llvm i needed the entry block to have the right arg types
// - llvm cares about i64 vs i8
// - llvm doesnt jsut compare to 0 it wants 0 or 1 exactly. 

fn print_hello_world(mem: *u8) void #asm #bc = (fn(body) = inline_bf(body, 
    "++++++++[>++++[>++>+++>+++>+<<<<-]>+>+>->>+[<]<-]>>.>---.+++++++..+++.>>.<-.<.+++.------.--------.>>+.>++."
));

fn main() = {
    mem: List(u8) = repeated(0, 30000, temp());
    print_hello_world(mem.maybe_uninit.ptr);
    exit(0);
}

::enable_inline_bc(); // TODO: this is a pain

fn inline_bf(body: *FnBody, bf: Str) void = {
    a := libc_allocator; // ast_alloc(); 
    
    getchar : FuncId : fn() u8 #libc;
    //putchar : FuncId : fn(c: u8) void #libc;
    putchar : FuncId : fn(c: u8) void = {
        out := @slice(c);
        print(out);
    };
    _live := @as(rawptr) putchar; // TODO: HACK 

    ::List(Prim);
    one_pointer := Prim.P64.repeated(1, a).items();
    sig: PrimSig = (
        args = Prim.I8.repeated(1, a).items(),
        ret1 = .None,
        ret2 = .None,
    );
    putchar_sig: u32 = body.sig_payloads.len.trunc();
    body.sig_payloads&.push(sig, a);
    
    body.push_block(a);
    current: BbId = (id = 0);
    block := body.blocks[current.id.zext()]&;
    block.arg_prims = one_pointer;
    pointer: get_variant_type(Bc, Bc.Tag().AddrVar) = (id = body.vars.len.trunc());
    body.vars&.push((size = 8, align = 8), a);
    loop_stack: List(BbId) = list(temp());
    
    cell_acc := 0;
	for bf { c |    
        continue :: local_return;
        block := body.blocks[current.id.zext()]&; 
        code := block.insts&;
       	@switch(c) {
            @case(Bf.Inc) => {
                cell_acc += 1;
                continue();
            };
            @case(Bf.Dec) => {
                cell_acc -= 1;
                continue();
            };
            @default => ();
        };
        
        if cell_acc != 0 {
            code.push((PeekDup = 0), a);
            code.push((PeekDup = 0), a);
            code.push((Load = .I8), a);
            code.push((Intrinsic = .ZeroExtend8To64), a); // ugh llvm
            code.push((PushConstant = (value = cell_acc, ty = .I64)), a);
            code.push((Intrinsic = .Add), a);
            code.push((Intrinsic = .Trunc64To8), a); // ugh llvm
            code.push((StorePre = .I8), a);
            cell_acc = 0;
        };
        
        prev_inc :: fn(delta: i64) => {
            ret :: local_return;
            if code.last() { inst |
                @if_let(inst) fn IncPtrBytes(offset) => {
                    offset[] += delta;
                    ret();
                };
            };
            code.push((IncPtrBytes = delta), a);
        };
        
    	@switch(c) {
            @case(Bf.Right)  => prev_inc(1);
            @case(Bf.Left)   => prev_inc(-1);
            @case(Bf.Open)  => {
                loop_opening: BbId = (id = body.blocks.len.trunc());
                
                code.push((AddrVar = pointer), a);
                code.push((StorePost = .P64), a);  // Phi
                code.push((Goto = (ip = loop_opening, slots = 0)), a);
                
                body.push_block(a);  // loop_opening
                block := body.blocks[loop_opening.id.zext()]&; 
                loop_opening_code := block.insts&;
                loop_opening_code.push((AddrVar = pointer), a);
                loop_opening_code.push((Load = .P64), a);  // Phi
                
                // cmp
                // on llvm it needs to be exactly 1 or 0. otherwise when i trunc i8->i1 you're just checking parity. 
                loop_opening_code.push((Load = .I8), a);
                loop_opening_code.push((Intrinsic = .ZeroExtend8To64), a); // ugh llvm
                loop_opening_code.push((PushConstant = (value = 0, ty = .I64)), a);
                loop_opening_code.push((Intrinsic = .Ne), a);
                
                loop_body: BbId = (id = body.blocks.len.trunc());
                body.push_block(a); // loop_body
                
                block := body.blocks[loop_opening.id.zext()]&; 
                loop_opening_code := block.insts&;  // memory safety!
                // TODO: do i require strictly 0 or 1 or is it always jump-if-zero?
                // When we see the closing ']' we'll patch this (we know its at the end of `insts`).
                loop_opening_code.push((JumpIf = (true_ip = loop_body, false_ip = loop_body, slots = 0)), a);
                loop_stack&.push(loop_opening);
                
                block := body.blocks[loop_body.id.zext()]&; 
                loop_body_code := block.insts&;
                loop_body_code.push((AddrVar = pointer), a);
                loop_body_code.push((Load = .P64), a);  // Phi
                current = loop_body;
            };
            @case(Bf.Close) => {
                loop_tail := current;
                loop_opening := loop_stack&.pop().expect("matching loop brackets in bf");
                loop_exit: BbId = (id = body.blocks.len.trunc());
                body.push_block(a);  // loop_exit
                block := body.blocks[loop_tail.id.zext()]&; 
                loop_tail_code := block.insts&;
                
                loop_tail_code.push((AddrVar = pointer), a);
                loop_tail_code.push((StorePost = .P64), a);  // Phi
                loop_tail_code.push((Goto = (ip = loop_opening, slots = 0)), a);
                patch_block := body.blocks[loop_opening.id.zext()].insts&;
                patch := patch_block.last().expect("non empty block"); ::tagged(Bc);
                assert(patch.is(.JumpIf), "expected block to end in jumpif");
                patch.JumpIf.false_ip = loop_exit;
                
                block := body.blocks[loop_exit.id.zext()]&; 
                loop_exit_code := block.insts&;
                loop_exit_code.push((AddrVar = pointer), a);
                loop_exit_code.push((Load = .P64), a);  // Phi
                
                current = loop_exit;
            };
            @case(Bf.Output) => {
                code.push((PeekDup = 0), a);
                code.push((Load = .I8), a);
                code.push((CallDirect = (sig = putchar_sig, f = putchar, tail = false)), a);
            };
            @case(Bf.Input) => panic("TODO: we don't support taking input yet");
            @default()      => ();
        };
    };

    code := body.blocks[current.id.zext()].insts&; 
    code.push(.Ret0, a);
}
