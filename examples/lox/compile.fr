Parser :: @struct(
    vm: *Vm, // because we want to own strings so need to allocate. 
    scanner: Scanner, 
    current: Token, 
    previous: Token, 
    had_error: bool, 
    panic_mode: bool,
    chunk: *Chunk,
    scope_depth: i64 = 0,
);

Local :: @struct(name: Str, depth: i64);

Prec      :: @enum(None, Assignment, Or, And, Equality, Comparison, Term, Factor, Unary, Call, Primary);
ParseFn   :: @FnPtr(self: *Parser, can_assign: bool) void;
ParseRule :: @struct(
    prefix : ParseFn,
    infix  : ParseFn,
    prec   : Prec,
);

// TODO: array literal syntax for constants would be nice. 
// TODO: square bracket index syntax doesn't work??
// TODO: should be able to assign to a fn ptr with an overload set. 
// TODO: show find_const on the debug_trace.
// TODO: better mutual recursion. to construct the table you need the fn ptr values, 
//       so it thinks you might want to call them in that expression, so it needs to compile them first,
//       but those functions need to reference the rules array.  
//       the get_rule indirection is enough to fix it for c but not for me :\
rules :: @static(Slice(ParseRule));
null_rule : ParseFn : {
    crash :: fn(self: *Parser, can_assign: bool) void = unreachable(); // TODO: be able to coerce_const inline 
    crash
};

::{ // HACK -- May 19
    ::enum(TokenType);
    len := @as(i64) TokenType._Count;
    table := libc_allocator.alloc(ParseRule, len);
    range(0, table.len) {i|
        table.set(i, (prefix = null_rule, infix = null_rule, prec = .None));
    };
    
    table.set(@as(i64) TokenType.LeftParen, @as(ParseRule) (prefix = grouping, infix = null_rule,        prec = .None));
    table.set(@as(i64) TokenType.Plus,      @as(ParseRule) (prefix = null_rule,       infix = binary,    prec = .Term));
    table.set(@as(i64) TokenType.Minus,     @as(ParseRule) (prefix = unary,    infix = binary,    prec = .Term));
    table.set(@as(i64) TokenType.Star,      @as(ParseRule) (prefix = null_rule,       infix = binary,    prec = .Factor));
    table.set(@as(i64) TokenType.Slash,     @as(ParseRule) (prefix = null_rule,       infix = binary,    prec = .Factor));
    table.set(@as(i64) TokenType.Number,    @as(ParseRule) (prefix = number,   infix = null_rule,        prec = .None));
    table.set(@as(i64) TokenType.True,      @as(ParseRule) (prefix = parse_literal,  infix = null_rule,  prec = .None));
    table.set(@as(i64) TokenType.False,     @as(ParseRule) (prefix = parse_literal,  infix = null_rule,  prec = .None));
    table.set(@as(i64) TokenType.Nil,       @as(ParseRule) (prefix = parse_literal,  infix = null_rule,  prec = .None));
    table.set(@as(i64) TokenType.Bang,      @as(ParseRule) (prefix = unary,    infix = null_rule,        prec = .None));
    table.set(@as(i64) TokenType.EqualEqual,@as(ParseRule) (prefix = null_rule,       infix = binary,    prec = .Equality));
    table.set(@as(i64) TokenType.BangEqual, @as(ParseRule) (prefix = null_rule,       infix = binary,    prec = .Equality));
    table.set(@as(i64) TokenType.Less,      @as(ParseRule) (prefix = null_rule,       infix = binary,    prec = .Comparison));
    table.set(@as(i64) TokenType.Greater,      @as(ParseRule) (prefix = null_rule,       infix = binary,    prec = .Comparison));
    table.set(@as(i64) TokenType.LessEqual,    @as(ParseRule) (prefix = null_rule,       infix = binary,    prec = .Comparison));
    table.set(@as(i64) TokenType.GreaterEqual, @as(ParseRule) (prefix = null_rule,       infix = binary,    prec = .Comparison));
    table.set(@as(i64) TokenType.String,       @as(ParseRule) (prefix = parse_string,    infix = null_rule, prec = .None));
    table.set(@as(i64) TokenType.Ident,        @as(ParseRule) (prefix = parse_ident,    infix = null_rule, prec = .None));
    rules[] = table;
};

fn compile(vm: *Vm, source: Str, chunk: *Chunk) bool = {
    self: Parser = (
        vm = vm,
        scanner = init(source), 
        current = Token.zeroed(), 
        previous = Token.zeroed(), 
        had_error = false, 
        panic_mode = false,
        chunk = chunk, // TODO: be like rust where you can leave off the name if it matches the expr var name. 
    );
    self&.advance();
    while => self.current.type != .Eof {
        self&.statement(true);
        if(self.panic_mode, => self&.syncronize());
    };
    self&.consume(.Eof, "Expect end of expression.");
    
    if(debug_print_code.and(not(self.had_error))) {
        self&.current_chunk().disassemble("just parsed");
    };
    self.had_error.not()
}

fn statement(self: *Parser, may_declare: bool) void = {
    keyword_expr :: fn(op: OpCode) void => {
        self.advance();
        self.expression();
        self.emit(op);
    };
    @match(self.current.type) {
        fn Print()  => keyword_expr(.Print);
        fn Return() => keyword_expr(.Return);
        fn Var() => {
            if !may_declare {
                self.error_at(self.current, "declaration not allowed here.");
            };
            self.declare_var();
        }
        fn LeftBrace() => {
            self.advance();
            self.scope_depth += 1;
            while => self.current.type != .Eof && self.current.type != .RightBrace {
                self.statement(true);
                if(self.panic_mode, => self.syncronize());
            };
            self.end_scope();
            self.consume(.RightBrace, "Expected '}' to close block");
            return(); // no semicolon required after a block. 
        }
        @default => {
            self.expression();
            self.emit(OpCode.Pop);
        };
    };
    self.consume(.Semicolon, "Expected ';' after statement");
}

fn end_scope(self: *Parser) void = {
    self.scope_depth -= 1;
    cond :: => !self.vm.compiler_locals.is_empty()
               && self.vm.compiler_locals[self.vm.compiler_locals.len - 1].depth > self.scope_depth;
    while cond {
        self.vm.compiler_locals.len -= 1;
        self.emit(OpCode.Pop); // TODO: EXTRA: PopN
    };
}

fn parse(self: *Parser, prec: Prec) void = {
    self.advance();
    // TODO: generate fn ordinal for int enums so its more obvious what's going on. 
    rule := get_rule(self.previous.type);
    null_rule_addr := erase_types_fn(Ty(*Parser, bool), void, null_rule).int_from_rawptr();
    my_rule_addr := erase_types_fn(Ty(*Parser, bool), void, rule.prefix).int_from_rawptr();
    if(my_rule_addr.eq(null_rule_addr)) {
        self.error_at(self.previous, "Expect expression.");
    };
    prefix := rule.prefix;
    can_assign := (@as(i64) prec).le(@as(i64) Prec.Assignment);
    prefix(self, can_assign);
    
    r := get_rule(self.current.type);
    while(=> (@as(i64) prec).le(@as(i64) r.prec)) {
        self.advance();
        infix := r.infix;
        r = get_rule(self.current.type);
        infix(self, can_assign);
    };
    
    if can_assign && self.current.type == .Equal {
        self.advance();
        self.error_at(self.current, "invalid place expression");
    };
}

#inline fn expression(self: *Parser) void = self.parse(.Assignment);

number :: fn(self: *Parser, _can_assign: bool) void = {
    value := self.previous.lexeme.float();
    self.emit(value.to_value());
};

unary :: fn(self: *Parser, _can_assign: bool) void = {
    type := self.previous.type;
    self.parse(.Unary);
    @match(type) {
        fn Minus() => self.emit(OpCode.Negate);
        fn Bang()  => self.emit(OpCode.Not);
        @default   => unreachable();
    }
};

// TODO: a similar identifiers check so it can give better error message when you typo Opcode vs OpCode. 
binary :: fn(self: *Parser, _can_assign: bool) void = {
    type := self.previous.type;
    rule := get_rule(type);
    self.parse(@as(Prec) @as(i64) (@as(i64) rule.prec).add(1));
    op: OpCode = @match(type) {
        fn Plus()       => .Add; 
        fn Minus()      => .Subtract; 
        fn Star()       => .Multiply; 
        fn Slash()      => .Divide; 
        fn Less()       => .Less; 
        fn Greater()    => .Greater; 
        fn EqualEqual() => .Equal; 
        fn BangEqual() => {
            self.emit(OpCode.Equal);
            .Not
        }
        fn LessEqual() => {
            self.emit(OpCode.Greater);
            .Not
        }
        fn GreaterEqual() => {
            self.emit(OpCode.Less);
            .Not
        }
        @default => unreachable();
    };
    self.emit(op);
};

grouping :: fn(self: *Parser, _can_assign: bool) void = {
    self.expression();
    self.consume(.RightParen, "Expect ')' after expression.");
};

parse_literal :: fn(self: *Parser, _can_assign: bool) void = {
    type := self.previous.type;
    rule := get_rule(type);
    value: OpCode = @match(type) {
        fn True()  => .True; 
        fn False() => .False; 
        fn Nil()   => .Nil; 
        @default   => unreachable();
    };
    self.emit(value);
};

parse_string :: fn(self: *Parser, _can_assign: bool) void = {
    str_tok := self.previous;
    s := str_tok.lexeme.slice(1, str_tok.lexeme.len - 1);
    s := self.vm.copy_string(s);
    self.emit(s.to_value())
};

fn declare_var(self: *Parser) void = {
    self.advance();
    self.consume(TokenType.Ident, "expected variable name after 'var'");
    name := self.previous;
    if self.current.type == .Equal {
        self.advance();
        self.expression();
    } else {
        self.emit(OpCode.Nil);
    };
    if self.scope_depth > 0 {
        // TODO: make it an error to shadow in the same scope. "Already a variable with this name in this scope." :lazy
        // TODO: deny the initilizer accessing something in an upper scope that its shadowing. Can't read local variable in its own initializer."
        //       currently i just declare later so the error message would be that its undeclared. 
        // locals just fall through and keep thier stack slot, so no opcode here.
        self.vm.compiler_locals&.push(name = name.lexeme, depth = self.scope_depth);
        if self.vm.compiler_locals.len > 255 {
            // TODO: EXTRA: GetLocal16 and SetLocal16
            self.error_at(name, "Too many locals in chunk (>255)");
        };
    } else {
        var := self.ident_const(name);
        self.emit(OpCode.DefineGlobal, var);
    };
}

// Globals store their name in the chunk's constants and become a table lookup at runtime. 
// Locals store thier index into the stack in the bytecode and become an array index at runtime. 
// = fast locals + late bound globals. 
parse_ident :: fn(self: *Parser, can_assign: bool) void = {
    name := self.previous;
    if can_assign && self.current.type == .Equal {
        self.advance();
        self.expression();
        @match(self.find_local_index(name.lexeme)) {
            fn Some(var) => self.emit(OpCode.SetLocal, var);
            fn None() => {
                var := self.ident_const(name);
                self.emit(OpCode.SetGlobal, var);
            }
        };
    } else {
        @match(self.find_local_index(name.lexeme)) {
            fn Some(var) => self.emit(OpCode.GetLocal, var);
            fn None() => {
                var := self.ident_const(name);
                self.emit(OpCode.GetGlobal, var);
            }
        };
    };
};

fn find_local_index(self: *Parser, name: Str) ?i64 = {
    enumerate_rev self.vm.compiler_locals& { i, local |
        if local.name == name {
            return(Some = i);
        };
    };
    .None  // it must be a global
}

fn ident_const(self: *Parser, token: Token) i64 = {
    // TODO: EXTRA: reuse constants (ie. we access the same variable many times and waste indices).
    s := self.vm.copy_string(token.lexeme);
    self.make_constant(s.to_value())
}

fn get_rule(type: TokenType) *ParseRule = rules[].index(@as(i64) type);

fn advance(self: *Parser) void = {
    self.previous = self.current;
    loop {
        self.current = self.scanner&.next();
        if(self.current.type != .Error, => return());
        self.error_at(self.current, "");
    };
}

fn consume(self: *Parser, type: TokenType, msg: Str) void = {
    if(self.current.type == type,
        => self.advance(),
        => self.error_at(self.current, msg),
    )
}

fn error(self: *Parser, msg: Str) void = self.error_at(self.previous, msg);
fn error_at(self: *Parser, token: Token, msg: Str) void = {
    if !self.panic_mode {
        self.panic_mode = true;
        self.had_error = true;
        // TODO: render lex err vs eof vs normal token differently
        @println("[line %] Error: % at %", token.line, msg, token.lexeme);
    }
}

#redirect(Ty(*Parser, i64), void) fn emit(self: *Parser, b: OpCode) void;
fn emit(self: *Parser, b: i64) void = {
    self.current_chunk().push(b, self.previous.line);
}
fn emit(self: *Parser, a: i64, b: i64) void = {
    self.emit(a);
    self.emit(b);
}
fn emit(self: *Parser, a: OpCode, b: i64) void = {
    self.emit(@as(i64) (@as(u8) a).zext());
    self.emit(b);
}

// TODO: EXTRA: OpCode.Constant16
fn emit(self: *Parser, value: Value) void = self.emit(OpCode.Constant, self.make_constant(value));

fn make_constant(self: *Parser, value: Value) i64 = {
    c := self.current_chunk().push(value);
    if(c.gt(255), => self.error("Too many constants in one chunk."));
    c
}

fn current_chunk(self: *Parser) *Chunk = self.chunk;

// Skip until a statement boundary: last token ends one or current token starts one. 
fn syncronize(self: *Parser) void = {
    self.panic_mode = false;
    while => self.current.type != .Eof {
        if(self.previous.type == .Semicolon, => return());
        @match(self.current.type) {
            fn Fun()    => return();
            fn Class()  => return();
            fn Var()    => return();
            fn Print()  => return();
            fn While()  => return();
            fn Return() => return();
            fn For()    => return();
            fn If()     => return();
            @default    => ();
        };
        self.advance();
    };
}
