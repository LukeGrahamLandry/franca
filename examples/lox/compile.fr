Parser :: @struct(
    vm: *Vm, // because we want to own strings so need to allocate. 
    scanner: Scanner, 
    current: Token, 
    previous: Token, 
    had_error := false, 
    panic_mode := false,
    chunk := zeroed(*Chunk),
    scope_depth: i64 = 0,
    function: *ObjFunction,
    function_type := FunctionType.Script, 
    locals: List(Local),
);

FunctionType :: @enum(Function, Script);

Local :: @struct(name: Str, depth: i64);

Prec      :: @enum(None, Assignment, Or, And, Equality, Comparison, Term, Factor, Unary, Call, Primary);
ParseFn   :: @FnPtr(self: *Parser, can_assign: bool) void;
ParseRule :: @struct(
    prefix : ParseFn,
    infix  : ParseFn,
    prec   : Prec,
);

// TODO: array literal syntax for constants would be nice. 
// TODO: square bracket index syntax doesn't work??
// TODO: should be able to assign to a fn ptr with an overload set. 
// TODO: show find_const on the debug_trace.
// TODO: better mutual recursion. to construct the table you need the fn ptr values, 
//       so it thinks you might want to call them in that expression, so it needs to compile them first,
//       but those functions need to reference the rules array.  
//       the get_rule indirection is enough to fix it for c but not for me :\
rules :: @static(Slice(ParseRule));
null_rule : ParseFn : fn(self: *Parser, can_assign: bool) void = {
    self.error_at(self.current, "expected expression");
};

::{ // HACK -- May 19
    ::enum(TokenType);
    table := ast_alloc().alloc_init(ParseRule, TokenType.enum_count(), fn(_) => 
        (prefix = null_rule, infix = null_rule, prec = .None));
    
    T(.LeftParen,     grouping,        call,       .Call);
    T(.Plus,          null_rule,       binary,     .Term);
    T(.Minus,         unary,           binary,     .Term);
    T(.Star,          null_rule,       binary,     .Factor);
    T(.Slash,         null_rule,       binary,     .Factor);
    T(.Number,        number,          null_rule,  .None);
    T(.True,          parse_literal,   null_rule,  .None);
    T(.False,         parse_literal,   null_rule,  .None);
    T(.Nil,           parse_literal,   null_rule,  .None);
    T(.Bang,          unary,           null_rule,  .None);
    T(.EqualEqual,    null_rule,       binary,     .Equality);
    T(.BangEqual,     null_rule,       binary,     .Equality);
    T(.Less,          null_rule,       binary,     .Comparison);
    T(.Greater,       null_rule,       binary,     .Comparison);
    T(.LessEqual,     null_rule,       binary,     .Comparison);
    T(.GreaterEqual,  null_rule,       binary,     .Comparison);
    T(.String,        parse_string,    null_rule,  .None);
    T(.Ident,         parse_ident,     null_rule,  .None);
    T(.And,           null_rule,       parse_and,  .And);
    T(.Or,            null_rule,       parse_or,   .Or);
    
    T :: fn(t: TokenType, prefix: ParseFn, infix: ParseFn, prec: Prec) => 
        table.set(@as(i64) t, (prefix = prefix, infix = infix, prec = prec));
    rules[] = table;
};

fn compile(vm: *Vm, source: Str) ?*ObjFunction = {
    self: Parser = (
        vm = vm,
        scanner = init(source), 
        current = Token.zeroed(), 
        previous = Token.zeroed(), 
        function = vm.allocate_obj(ObjFunction),
        locals = list(temp()),
    );
    self.function.chunk = init();
    self.function.name = "<script>";
    self.chunk = self.function.chunk&;
    self.locals&.push(name = "", depth = 0);
    
    self&.advance();
    while => self.current.type != .Eof {
        self&.statement(true);
        if(self.panic_mode, => self&.syncronize());
    };
    self&.consume(.Eof, "Expect end of expression.");
    
    if debug_print_code && !self.had_error {
        self.chunk.disassemble(self.function.name);
    };
    
    if self.had_error {
        return(.None);
    };
    (Some = self.function)
}

fn statement(self: *Parser, may_declare: bool) void = {
    keyword_expr :: fn(op: OpCode) void => {
        self.advance();
        if self.current.type == .Semicolon && op != .Print {
            self.emit(OpCode.Nil);
        } else {
            self.expression();
        }
        self.emit(op);
    };
    @match(self.current.type) {
        fn Print()  => keyword_expr(.Print);
        fn Return() => keyword_expr(.Return);
        fn Var() => {
            if !may_declare {
                self.error_at(self.current, "declaration not allowed here.");
            };
            self.declare_var();
        }
        fn LeftBrace() => {
            self.advance();
            self.parse_block();
            return(); // no semicolon required after a block. 
        }
        fn If() => {
            self.advance();
            self.consume(.LeftParen, "Expected '(' before condition");
            self.expression();
            self.consume(.RightParen, "Expected ')' after condition");
            skip_then := self.emit_jump(.JumpIfFalse);
            self.emit(OpCode.Pop);  // then
            self.statement(false);  // then
            
            if self.current.type == .Else {
                self.advance();
                // the jump from if start has to skip this landing pad. 
                skip_else := self.emit_jump(.Jump);  // then
                self.patch_jump(skip_then);
                self.emit(OpCode.Pop);  // else
                self.statement(false);  // else
                self.patch_jump(skip_else);
            } else {
                self.patch_jump(skip_then); 
            }
            
            return(); // no need for extra ; after if
        };
        // TODO: EXTRA: break + continue
        fn While() => {
            self.advance();
            to_cond := self.chunk.code.len;
            
            self.consume(.LeftParen, "Expected '(' before condition");
            self.expression();
            self.consume(.RightParen, "Expected ')' after condition");
            
            skip_body := self.emit_jump(.JumpIfFalse);
            
            self.emit(OpCode.Pop);
            self.statement(false);
            self.patch_jump(self.emit_jump(.Loop), to_cond);
            
            self.patch_jump(skip_body);
            self.emit(OpCode.Pop);
            
            return(); // no need for extra ; 
        }
        fn For() => {  // for(init;cond;inc)body; 
            self.advance();
            self.consume(.LeftParen, "Expected '(' before condition");
            self.scope_depth += 1;
            
            @match(self.current.type) {  // init
                fn Semicolon() => ();
                fn Var() => self.declare_var();
                @default => {
                    self.expression();
                    self.emit(OpCode.Pop);
                };
            };
            self.consume(.Semicolon, "Expected ';' after for::init");
            
            to_cond := self.chunk.code.len;
            if self.current.type != .Semicolon { // cond
                self.expression();
            } else {
                self.emit(OpCode.True);
            };
            self.consume(.Semicolon, "Expected ';' after for::cond");
            skip_loop := self.emit_jump(.JumpIfFalse);
            self.emit(OpCode.Pop);
            
            skip_inc := self.emit_jump(.Jump);
            to_inc := self.chunk.code.len;
            if self.current.type != .RightParen { // inc
                self.expression();
                self.emit(OpCode.Pop);
            };
            self.patch_jump(self.emit_jump(.Loop), to_cond);
            self.patch_jump(skip_inc);
            
            self.consume(.RightParen, "Expected ')' after for::inc");
            
            self.statement(false);  // body
            self.patch_jump(self.emit_jump(.Loop), to_inc);
            
            self.patch_jump(skip_loop);
            self.emit(OpCode.Pop);
            self.end_scope();
            return();
        }
        fn Fun() => {
            self.advance();
            self.consume(TokenType.Ident, "expected function name after 'fun'");
            name := self.previous;
            function := self.vm.allocate_obj(ObjFunction);
            function.name = name.lexeme;
            self.emit(function.to_value());
            self.define_var_from_stack(name);
            self.start_function_body(function, .Function);
            return();
        }
        @default => {
            self.expression();
            self.emit(OpCode.Pop);
        };
    };
    self.consume(.Semicolon, "Expected ';' after statement");
}

fn parse_block(self: *Parser) void = {
    self.scope_depth += 1;
    while => self.current.type != .Eof && self.current.type != .RightBrace {
        self.statement(true);
        if(self.panic_mode, => self.syncronize());
    };
    // TODO: this will emit extra pops if the block ended with a return. (don't just check last op becuase of jumps)
    self.end_scope();
    self.consume(.RightBrace, "Expected '}' to close block");
}

fn start_function_body(self: *Parser, function: *ObjFunction, t: FunctionType) void = {
    inner: Parser = (
        vm = self.vm,
        scanner = self.scanner,
        current = self.current, 
        previous = self.previous,
        function = function,
        locals = list(temp()),
    );
    inner.function.chunk = init();
    inner.chunk = inner.function.chunk&;
    inner.locals&.push(name = "", depth = 0);
    
    inner&.parse_function_body();
    
    if debug_print_code && !inner.had_error {
        inner.chunk.disassemble(inner.function.name);
    };
    self.had_error = self.had_error || inner.had_error;
    self.previous = inner.previous;
    self.current = inner.current;
    self.scanner = inner.scanner;
}

fn parse_function_body(self: *Parser) void = {
    self.scope_depth += 1;
    
    self.consume(.LeftParen, "before arguments");
    if self.current.type != .RightParen {
        dowhile {            
            self.consume(TokenType.Ident, "expected parameter name");
            name := self.previous;
            self.define_var_from_stack(name);
            
            self.function.arity += 1;
            self.maybe(.Comma)
        }
    }
    
    self.consume(.RightParen, "after arguments");
    self.consume(.LeftBrace, "before body");
    self.parse_block();
    self.emit(OpCode.Nil);
    self.emit(OpCode.Return);
}

fn emit_jump(self: *Parser, op: OpCode) i64 = {
    self.emit(op);
    self.emit(0, 0); // patch
    self.chunk.code.len
}

fn patch_jump(self: *Parser, start: i64) void = 
    self.patch_jump(start, self.chunk.code.len);

fn patch_jump(self: *Parser, start: i64, end: i64) void = {
    distance := abs(end - start);
    if !distance.ule(0xFFFF) {
        self.error_at(self.current, "statement too large: cannot jump more than 0xFFFF");
    };
    self.chunk.code[start - 2] = distance.bit_and(0xFF).trunc();
    self.chunk.code[start - 1] = distance.shift_right_logical(8).bit_and(0xFF).trunc();
}

parse_and :: fn(self: *Parser, _can_assign: bool) void = {
    skip_rhs := self.emit_jump(OpCode.JumpIfFalse);
    // if lhs=true, discard it and use rhs as the result
    self.emit(OpCode.Pop);
    self.parse(.And);
    // if lhs=false, it stays on the stack and becomes the result
    self.patch_jump(skip_rhs);
}

parse_or :: fn(self: *Parser, _can_assign: bool) void = {
    // not the same as OpCode.Not on the condition because the output of `or` should not be coerced to a bool
    take_rhs := self.emit_jump(OpCode.JumpIfFalse);
    skip_rhs := self.emit_jump(OpCode.Jump);
    self.patch_jump(take_rhs);
    self.emit(OpCode.Pop);
    self.parse(.Or);
    self.patch_jump(skip_rhs);
}

fn end_scope(self: *Parser) void = {
    self.scope_depth -= 1;
    locals := self.locals&;
    cond   :: => !locals.is_empty() && locals[locals.len - 1].depth > self.scope_depth;
    while cond {
        locals.len -= 1;
        self.emit(OpCode.Pop); // TODO: EXTRA: PopN
    };
}

fn parse(self: *Parser, prec: Prec) void = {
    self.advance();
    // TODO: generate fn ordinal for int enums so its more obvious what's going on. 
    rule := get_rule(self.previous.type);
    null_rule_addr := erase_types_fn(Ty(*Parser, bool), void, null_rule).int_from_rawptr();
    my_rule_addr := erase_types_fn(Ty(*Parser, bool), void, rule.prefix).int_from_rawptr();
    if(my_rule_addr.eq(null_rule_addr)) {
        self.error_at(self.previous, "Expect expression.");
    };
    prefix := rule.prefix;
    can_assign := (@as(i64) prec).le(@as(i64) Prec.Assignment);
    prefix(self, can_assign);
    
    r := get_rule(self.current.type);
    while(=> (@as(i64) prec).le(@as(i64) r.prec)) {
        self.advance();
        infix := r.infix;
        r = get_rule(self.current.type);
        infix(self, can_assign);
        r = get_rule(self.current.type);
    };
    
    if can_assign && self.current.type == .Equal {
        self.advance();
        self.error_at(self.current, "invalid place expression");
    };
}

#inline fn expression(self: *Parser) void = self.parse(.Assignment);

number :: fn(self: *Parser, _can_assign: bool) void = {
    value := self.previous.lexeme.float();
    self.emit(value.to_value());
};

unary :: fn(self: *Parser, _can_assign: bool) void = {
    type := self.previous.type;
    self.parse(.Unary);
    @match(type) {
        fn Minus() => self.emit(OpCode.Negate);
        fn Bang()  => self.emit(OpCode.Not);
        @default   => unreachable();
    }
};

// TODO: a similar identifiers check so it can give better error message when you typo Opcode vs OpCode. 
binary :: fn(self: *Parser, _can_assign: bool) void = {
    type := self.previous.type;
    rule := get_rule(type);
    self.parse(@as(Prec) @as(i64) (@as(i64) rule.prec).add(1));
    op: OpCode = @match(type) {
        fn Plus()       => .Add; 
        fn Minus()      => .Subtract; 
        fn Star()       => .Multiply; 
        fn Slash()      => .Divide; 
        fn Less()       => .Less; 
        fn Greater()    => .Greater; 
        fn EqualEqual() => .Equal; 
        fn BangEqual() => {
            self.emit(OpCode.Equal);
            .Not
        }
        fn LessEqual() => {
            self.emit(OpCode.Greater);
            .Not
        }
        fn GreaterEqual() => {
            self.emit(OpCode.Less);
            .Not
        }
        @default => unreachable();
    };
    self.emit(op);
};

grouping :: fn(self: *Parser, _can_assign: bool) void = {
    self.expression();
    self.consume(.RightParen, "Expect ')' after expression.");
};

parse_literal :: fn(self: *Parser, _can_assign: bool) void = {
    type := self.previous.type;
    rule := get_rule(type);
    value: OpCode = @match(type) {
        fn True()  => .True; 
        fn False() => .False; 
        fn Nil()   => .Nil; 
        @default   => unreachable();
    };
    self.emit(value);
};

parse_string :: fn(self: *Parser, _can_assign: bool) void = {
    str_tok := self.previous;
    s := str_tok.lexeme.slice(1, str_tok.lexeme.len - 1);
    s := self.vm.copy_string(s);
    self.emit(s.to_value())
};

call :: fn(self: *Parser, _can_assign: bool) void = {
    arg_count := self.arg_list();
    self.emit(OpCode.Call, arg_count);
    self.consume(.RightParen, "Expect ')' after call arguments.");
};

fn arg_list(self: *Parser) i64 = {
    if self.current.type == .RightParen {
        return 0;
    };
    count := 0;
    dowhile {
        count += 1;
        self.expression();
        self.maybe(.Comma)
    };
    if count > 255 {
        self.error_at(self.previous, "Too many arguments in call (>255)");
    }
    count
}

fn maybe(self: *Parser, t: TokenType) bool = {
    more := self.current.type == t;
    @if(more) self.advance();
    more
}

fn declare_var(self: *Parser) void = {
    self.advance();
    self.consume(TokenType.Ident, "expected variable name after 'var'");
    name := self.previous;
    if self.current.type == .Equal {
        self.advance();
        self.expression();
    } else {
        self.emit(OpCode.Nil);
    };
    self.define_var_from_stack(name);
}

fn define_var_from_stack(self: *Parser, name: Token) void = {
    if self.scope_depth > 0 {
        // TODO: make it an error to shadow in the same scope. "Already a variable with this name in this scope." :lazy
        // TODO: deny the initilizer accessing something in an upper scope that its shadowing. Can't read local variable in its own initializer."
        //       currently i just declare later so the error message would be that its undeclared. 
        // locals just fall through and keep thier stack slot, so no opcode here.
        self.locals&.push(name = name.lexeme, depth = self.scope_depth);
        if self.locals.len > 255 {
            // TODO: EXTRA: GetLocal16 and SetLocal16
            self.error_at(name, "Too many locals in chunk (>255)");
        };
    } else {
        var := self.ident_const(name);
        self.emit(OpCode.DefineGlobal, var);
    };
}

// Globals store their name in the chunk's constants and become a table lookup at runtime. 
// Locals store thier index into the stack in the bytecode and become an array index at runtime. 
// = fast locals + late bound globals. 
parse_ident :: fn(self: *Parser, can_assign: bool) void = {
    name := self.previous;
    if can_assign && self.current.type == .Equal {
        self.advance();
        self.expression();
        @match(self.find_local_index(name.lexeme)) {
            fn Some(var) => self.emit(OpCode.SetLocal, var);
            fn None() => {
                var := self.ident_const(name);
                self.emit(OpCode.SetGlobal, var);
            }
        };
    } else {
        @match(self.find_local_index(name.lexeme)) {
            fn Some(var) => self.emit(OpCode.GetLocal, var);
            fn None() => {
                var := self.ident_const(name);
                self.emit(OpCode.GetGlobal, var);
            }
        };
    };
};

fn find_local_index(self: *Parser, name: Str) ?i64 = {
    enumerate_rev self.locals& { i, local |
        if local.name == name {
            return(Some = i);
        };
    };
    .None  // it must be a global
}

fn ident_const(self: *Parser, token: Token) i64 = {
    // TODO: EXTRA: reuse constants (ie. we access the same variable many times and waste indices).
    s := self.vm.copy_string(token.lexeme);
    self.make_constant(s.to_value())
}

fn get_rule(type: TokenType) *ParseRule = rules[].index(@as(i64) type);

fn advance(self: *Parser) void = {
    self.previous = self.current;
    loop {
        self.current = self.scanner&.next();
        if(self.current.type != .Error, => return());
        self.error_at(self.current, "");
    };
}

fn consume(self: *Parser, type: TokenType, msg: Str) void = {
    if(self.current.type == type,
        => self.advance(),
        => self.error_at(self.current, msg),
    )
}

fn error(self: *Parser, msg: Str) void = self.error_at(self.previous, msg);
fn error_at(self: *Parser, token: Token, msg: Str) void = {
    if !self.panic_mode {
        self.panic_mode = true;
        self.had_error = true;
        // TODO: render lex err vs eof vs normal token differently
        @fmt(self.vm.errors&, "[line %] Error: % at %\n", token.line, msg, token.lexeme);
    }
}

#redirect(Ty(*Parser, i64), void) fn emit(self: *Parser, b: OpCode) void;
fn emit(self: *Parser, b: i64) void = {
    self.chunk.push(b, self.previous.line);
}
fn emit(self: *Parser, a: i64, b: i64) void = {
    self.emit(a);
    self.emit(b);
}
fn emit(self: *Parser, a: OpCode, b: i64) void = {
    self.emit(@as(i64) (@as(u8) a).zext());
    self.emit(b);
}

// TODO: EXTRA: OpCode.Constant16
fn emit(self: *Parser, value: Value) void = self.emit(OpCode.Constant, self.make_constant(value));

fn make_constant(self: *Parser, value: Value) i64 = {
    c := self.chunk.push(value);
    if(c > 255, => self.error("Too many constants in one chunk."));
    c
}

// Skip until a statement boundary: last token ends one or current token starts one. 
fn syncronize(self: *Parser) void = {
    self.panic_mode = false;
    while => self.current.type != .Eof {
        if(self.previous.type == .Semicolon, => return());
        @match(self.current.type) {
            fn Fun()    => return();
            fn Class()  => return();
            fn Var()    => return();
            fn Print()  => return();
            fn While()  => return();
            fn Return() => return();
            fn For()    => return();
            fn If()     => return();
            @default    => ();
        };
        self.advance();
    };
}
