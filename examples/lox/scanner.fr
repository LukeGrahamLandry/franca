Scanner :: @struct(
    source: Str,
    start: i64,
    current: i64,
    line: i64,
);

Token :: @struct(type: TokenType, lexeme: Str, line: i64);
TokenType :: @enum(
    Error, Eof, 
    Number, Ident, String, 
    Plus, LeftParen, RightParen, Dot, Star, Slash, Plus, Minus, Dot, Comma, Semicolon, LeftBrace, RightBrace,
    Equal, EqualEqual, Less, LessEqual, Greater, GreaterEqual, Bang, BangEqual,
    Var, While, If, Nil, Return, Or, Print, Super, And, Class, Else, False, For, Fun, True, This,
    _Count, // TODO: there should be a function for this. 
);

fn init(source: Str) Scanner = (source = source, start = 0, current = 0, line = 1);

// TODO: early return from flat_call but also indirect return addr for c_call
fn next(self: *Scanner) Token = {
    self.skip_whitespace();
    self[].start = self[].current;
    ::if(Token); // TODO: auto instantiate 
    if(self.at_end()){|
        self.make_token(.Eof)
    }{|
        // TODO: it would be nice if @switch expanded macros so you could write this as loop. 
        @switch(self.pop()) {
            @case("+".ascii()) => self.make_token(.Plus);
            @case("-".ascii()) => self.make_token(.Minus);
            @case(",".ascii()) => self.make_token(.Comma);
            @case(".".ascii()) => self.make_token(.Dot);
            @case("(".ascii()) => self.make_token(.LeftParen);
            @case(")".ascii()) => self.make_token(.RightParen);
            @case("{".ascii()) => self.make_token(.LeftBrace);
            @case("}".ascii()) => self.make_token(.RightBrace);
            @case("*".ascii()) => self.make_token(.Star);
            @case("/".ascii()) => self.make_token(.Slash);
            @case(";".ascii()) => self.make_token(.Semicolon);
            @case("=".ascii()) => self.pair_token("=".ascii(), .Equal, .EqualEqual);
            @case("!".ascii()) => self.pair_token("=".ascii(), .Bang, .BangEqual);
            @case("<".ascii()) => self.pair_token("=".ascii(), .Less, .LessEqual);
            @case(">".ascii()) => self.pair_token("=".ascii(), .Greater, .GreaterEqual);
            @case("\"".ascii()) => self.string();
            @default() fn(c: u8) Token => {
                // TODO: nicer else-if
                if(c.is_digit()){|
                    self.scan_number()
                }{|
                    if(c.is_alpha(), => self.ident()){|
                        self.error_token("Unexpected Character")
                    }
                }
            };
        }
    }
}

fn ident(self: *Scanner) Token = {
    while {|
        c := self.peek();
        c.is_alpha().or(=> self.peek().is_digit())
    }{|
        self.pop();
    };
    
    fn keyword(self: *Scanner, i: i64, var rest: Str, type: TokenType) Token = {
        type := if(rest.len.add(i).le(self.current.sub(self.start)).and {|
            s := self.source.subslice(self.start.add(i), rest.len);
            rest.eq(s)
        }, => type, => .Ident);
        self.make_token(type)
    }
    
    // TODO: this would be more efficient if the switch returned TokenType and then it got made at the end. 
    // TODO: would be cool to have a generic comptiem thing that generated this 
    @switch(self.source[self.start]) {
        @case("p".ascii()) => self.keyword(1, "rint", .Print);
        @case("e".ascii()) => self.keyword(1, "lse", .Else);
        @case("o".ascii()) => self.keyword(1, "r", .Or);
        @case("r".ascii()) => self.keyword(1, "eturn", .Return);
        @case("w".ascii()) => self.keyword(1, "hile", .While);
        @case("a".ascii()) => self.keyword(1, "nd", .And);
        @case("s".ascii()) => self.keyword(1, "uper", .Super);
        @case("v".ascii()) => self.keyword(1, "ar", .Var);
        @case("i".ascii()) => self.keyword(1, "f", .If);
        @case("n".ascii()) => self.keyword(1, "il", .Nil);
        @case("c".ascii()) => self.keyword(1, "lass", .Class);
        @case("t".ascii()) => {
            if(self.current.sub(self.start).gt(1)){|
                @switch(self.source[self.start.add(1)]) {
                    @case("r".ascii()) => self.keyword(2, "ue", .True);
                    @case("h".ascii()) => self.keyword(2, "is", .This);
                    @default fn(_: u8) => self.make_token(.Ident);
                } // TODO: it trace_traps if you have the else block here instead. probably just the macro tag check. should really make that an assertion so you get a message. 
            } {| self.make_token(.Ident) }
        };
        @case("f".ascii()) => {
            if(self.current.sub(self.start).gt(1)){|
                @switch(self.source[self.start.add(1)]) {
                    @case("o".ascii()) => self.keyword(2, "r", .For);
                    @case("u".ascii()) => self.keyword(2, "n", .Fun);
                    @case("a".ascii()) => self.keyword(2, "lse", .False);
                    @default fn(_: u8) => self.make_token(.Ident);
                }
            } {| self.make_token(.Ident)}
        };
        @default fn(_: u8) => self.make_token(.Ident);
    }
}

// TODO: private constants. fn number can't be an overload set because !fn_ptr is a pain. 
fn scan_number(self: *Scanner) Token = {
    while(=> self.peek().is_digit()) {|
        self.pop();
    };
    if(self.peek().eq(".".ascii()).and(=> self.peek_next().is_digit())) {|
        while(=> self.peek().is_digit()) {|
            self.pop();
        };
    };
    self.make_token(.Number)
}

fn string(self: *Scanner) Token = {
    ::if(Token);
    dowhile {|
        self.at_end().not().and {()bool|
            c := self.pop();
            if(c.eq("\n".ascii())) {|
                self.line = self.line.add(1);
            };
            c.ne("\"".ascii())
        }
    };
    if(self.at_end()) {|
        self.error_token("Unterminated String")
    }{|
        self.make_token(.String)
    }
}

fn skip_whitespace(self: *Scanner) Unit = {
    done :: !return;
    loop {|
        // TODO: multi case
        @switch(self.peek()) {
            @case(" ".ascii()) => { self.pop(); };
            @case("\t".ascii()) => { self.pop(); }; 
            @case("\r".ascii()) => { self.pop(); }; 
            @case("\n".ascii()) => { 
                self.line = self.line.add(1);
                self.pop();
            }; 
            @case("/".ascii()) => {
                if(self.peek_next().eq("/".ascii())){|
                    dowhile {|
                        self.at_end().not().and(=> self.pop().ne("\n".ascii()))
                    };
                };
            };
            @default fn(_: u8) => {
                done();
            };
        }
    };
}

fn at_end(self: *Scanner) bool = self[].current.ge(self[].source.len);

fn pair_token(self: *Scanner, maybe: u8, single: TokenType, double: TokenType) Token = {
    ::if(TokenType); // TODO: auto instantiate. until then, should at least give better error when you forget. 
    
    type := if(self.at_end(), => single) {|
        if(self.peek().eq(maybe)) {|
            self.pop();
            double
        }{| single }
    };
    self.make_token(type)
}

fn peek(self: *Scanner) u8 = if(self.at_end(), => @as(u8) 0, => self.source[self.current]);
fn peek_next(self: *Scanner) u8 = if(self.at_end(), => @as(u8) 0, => self.source[self.current.add(1)]);

fn pop(self: *Scanner) u8 = {
    self.current += 1;
    self.source[self.current.sub(1)]
}

fn make_token(self: *Scanner, type: TokenType) Token = {
    s := self[].source.slice(self[].start, self[].current);
    (type = type, lexeme = s, line = self[].line)
}

fn error_token(self: *Scanner, msg: Str) Token = 
    (type = .Error, lexeme = msg, line = self[].line);

fn is_digit(c: u8) bool = c.ge("0".ascii()).and(c.le("9".ascii()));
fn is_alpha(c: u8) bool = 
    c.ge("a".ascii()).and(c.le("z".ascii()))
        .or(=> c.ge("A".ascii()).and(c.le("Z".ascii())))
        .or(=> c.eq("_".ascii()));

fn eqq(lhs: TokenType, rhs: TokenType) bool = eq(@as(i64) lhs, @as(i64) rhs); // TODO: this is ass. 
