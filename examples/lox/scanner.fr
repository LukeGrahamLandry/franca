

Scanner :: @struct(
    source: Str,
    start: i64,
    current: i64,
    line: i64,
);

Token :: @struct(type: TokenType, lexeme: Str, line: i64);
TokenType :: @enum(Error, Eof, Number, Ident, String, Plus);

fun init(source: Str) Scanner = (source = source, start = 0, current = 0, line = 1);

// TODO: early return from flat_call but also indirect return addr for c_call
fun next(self: *Scanner) Token = {
    self[].start = self[].current;
    ::if(Token); // TODO: auto instantiate 
    if(self[].current.lt(self[].source.len)){|
        self.make_token(TokenType.Eof)
    }{|
        self.error_token("Unexpected Character")
    }
}

fn make_token(self: *Scanner, type: TokenType) Token = 
    (type = type, lexeme = self[].source.slice(self[].start, self[].current), line = self[].line);

fn error_token(self: *Scanner, msg: Str) Token = 
    (type = TokenType.Error, lexeme = msg, line = self[].line);

fun eqq(lhs: TokenType, rhs: TokenType) bool = eq(@as(i64) lhs, @as(i64) rhs); // TODO: this is ass. 