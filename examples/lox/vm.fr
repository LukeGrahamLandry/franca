Vm :: @struct(
    chunk: *Chunk,
    ip: *u8,
    stack: List$Value, // TODO: inline fixed size array
    stack_top: *Value,
);

fun init() Vm = {
    var self: Vm = ()!uninitialized; // TODO: no uninit
    self&.stack[] = list(stack_max);  // EXTRA: grow stack
    self&.reset_stack();
    self
}

fun drop(self: *Vm) Unit = {
    self.chunk[].drop();
    self.stack.drop();
}

InterpretResult :: @enum(Ok, CompileError, RuntimeError);

fun interpret(self: *Vm, source: Str) InterpretResult = {
    scanner : Scanner = init(source);
    
    .Ok
}

fun interpret(self: *Vm, chunk: *Chunk) InterpretResult = {
    self.chunk[] = chunk;
    self.ip[] = chunk.code.as_ptr();
    self.run()
}

fn run(self: *Vm) InterpretResult = {
    var out = InterpretResult.RuntimeError;
    var debug: List$i64 = list();
    
    // TODO: this is awkward without early returns
    dowhile {|
        if(::debug_trace_execution){|
            debug&.clear();
            @fmt(debug&, "         ");
            for(self.stack.as_ptr(), self.stack_top[]) {(slot: *Value)|
                @fmt(debug&, "[ % ]", slot);
            };
            println(debug&.items());
        
            p := self.chunk[].code.as_ptr();
            i := p.ptr_diff(self.ip[]);
            println(i);  // TODO: do these into the buffer as well 
            self.chunk[].dis_inst(i);
        };
        
        instruction := self.read_byte();
        
        // TODO: switch over incomplete enum like is is awkward because you can't use contextual field. 
        @as(bool) @switch(instruction) {
            @case(OpCode.Constant) => {
                constant := self.read_constant();
                self.push(constant);
                true
            };
            @case(OpCode.Return) => {
                value := self.pop();
                @println("RET: %", value);
                out = .Ok;
                false
            };
            @case(OpCode.Negate) => {
                self.push(self.pop().neg());
                true
            };
            // TODO: without the ret type annotation you get err walkwip, but only when it couldn't find the function to call? so just need better error message. 
            @case(OpCode.Add) => self.binary_op(add); 
            @case(OpCode.Subtract) => self.binary_op(sub); 
            @case(OpCode.Multiply) => self.binary_op(mul); 
            @case(OpCode.Divide) => self.binary_op(div);  
            @default() fn(_: u8) => {
                out = .RuntimeError;
                false
            };
        }
    };
        
    out
}

// TODO: closures with const arguments. I'd rather just have this in the main loop function. but they rely on resolving working in different ways currently. 
#inline fn binary_op(self: *Vm, const op: OverloadSet) bool = {
    // TODO: you can't put this in the argument type because it wont find the overload because it thinks the arg is a OverloadSet. 
    // TODO: you cant name this var and the arg the same thing. shadowing doesn't work. 
    // TODO: you can't do this because it doesn't filter arch? but not a big deal because you can just call the overload set directly. 
    // f : Fn(Ty(f64, f64), f64) : op;  
    rhs := self.pop();
    lhs := self.pop();
    self.push(op(lhs, rhs));
    true
}

// TODO: I could expose the dereference and increment instruction but presumably if you want it to be fast you'd just use llvm anyway. 
#inline fn read_byte(self: *Vm) u8 = {
    let b = self.ip[][];
    self.ip[] = self.ip[].offset(1);
    b
}

#inline fn read_constant(self: *Vm) Value = {
    // TODO: you can't put the type annotation that does the cast on the var or the call because then it changes the overload resolution. 
    let index = self.read_byte();
    self.chunk[].constants.get(@as(i64) index)
}

fun push(self: *Vm, value: Value) Unit = {
    self.stack_top[][] = value;
    self.stack_top[] = self.stack_top[].offset(1);
}

fun pop(self: *Vm) Value = {
    self.stack_top[] = self.stack_top[].offset(1.neg());
    self.stack_top[][]
}

fn reset_stack(self: *Vm) Unit = {
    self.stack_top[] = self.stack.as_ptr();
}

::ptr_utils(u8);
::ptr_utils(Value);
