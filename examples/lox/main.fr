/// An implementation of the lox language from CraftingIntepreters.com.
/// It's a pretty direct port of clox (the second implementation in the book). 
/// Following that book was how I wrote my first compiler so it seems cool to use that as a test project for my new language. 

fn main() Unit = {
    var chunk: Chunk = init();
    
    chunk&.push(OpCode.Constant, 0);
    chunk&.push(chunk&.push(1.2), 0);
    chunk&.push(OpCode.Return, 1);
    chunk&.disassemble("Test Chunk".str());
    chunk&.drop();
}

#include_std("chunk.fr");  // TODO: rename this macro
#include_std("value.fr");

//////////////////////
/* List of grievances. 
- write f64 to string. 
- new line escape code.
- derive eq/display for unique types. 
- derive recursive drop/default.
- closured values dont work as macro params????? 
- pass custom allocator to list (will want for gc eventually).

*/
