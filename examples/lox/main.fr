/// An implementation of the lox language from CraftingIntepreters.com.
/// It's a pretty direct port of clox (the second implementation in the book). 
/// Following that book was how I wrote my first compiler so it seems cool to use that as a test project for my new language. 

debug_trace_execution :: true;
stack_max :: 256;

fn main() Unit = {
    var vm: Vm = init();
    var chunk: Chunk = init();
    
    chunk&.push(OpCode.Constant, 0);
    chunk&.push(chunk&.push(3.0), 0);
    chunk&.push(OpCode.Constant, 0);
    chunk&.push(chunk&.push(1.0), 0);
    chunk&.push(OpCode.Subtract, 1);
    chunk&.push(OpCode.Return, 1);
    chunk&.disassemble("Test Chunk".str());
    vm&.interpret(chunk&);
    
    vm&.drop();
}

#include_std("chunk.fr");  // TODO: rename this macro
#include_std("value.fr");
#include_std("vm.fr");

//////////////////////
/* List of grievances. 
- write f64 to string (better)
- new line escape code.
- derive eq/display for unique types. 
- derive recursive drop/default.
- closured values dont work as macro params????? 
- pass custom allocator to list (will want for gc eventually).
- single field structs become trivial tuples and disappear so you can't access the field. 
- nicer switch over incomplete enum. 
- jump table switch, mine is gonna be so slow. 
- closures with const args
- passing arch overload set to typed Fn 
- int to str leaks (EASY)
- no stack trace on panic


*/
