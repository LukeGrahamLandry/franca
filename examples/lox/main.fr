/// An implementation of the lox language from CraftingIntepreters.com.
/// It's a pretty direct port of clox (the second implementation in the book). 
/// Following that book was how I wrote my first compiler so it seems cool to use that as a test project for my new language. 

debug_trace_execution :: true;
stack_max :: 256;

// TODO: read from file/repl. 
fn main() Unit = {
    var vm: Vm = init();
        
    vm&.interpret("-(1 + 2)");
    assert_eq(vm.last_return, 3.0.neg());
    
    vm&.interpret("3 - 1");
    assert_eq(vm.last_return, 2.0);
    
    vm&.drop();
}

#include_std("chunk.fr");  // TODO: rename this macro
#include_std("value.fr");
#include_std("vm.fr");
#include_std("scanner.fr");
#include_std("compile.fr");

//////////////////////
/* List of grievances. 
- write f64 to string (better)
- new line escape code.
- derive eq/display for unique types. 
- derive recursive drop/default.
- closured values dont work as macro params????? 
- pass custom allocator to list (will want for gc eventually).
- single field structs become trivial tuples and disappear so you can't access the field. 
- nicer switch over incomplete enum. 
- jump table switch, mine is gonna be so slow. 
- closures with const args
- passing arch overload set to typed Fn 
- int to str leaks (EASY)
- no stack trace on panic. need more relyable mutual recursion, or don't use something that can panic during that process which is probably a good idea anyway. 
- need smarter overload resolution so you can use enum contextual fields more often. I hate typing the name a bunch. 
- early return from flat_call but also indirect return addr for c_call
- trivial tuple thing means you can't @fmt with no args
- can't define fn eq overload for an @enum type because then it needs to get typechecked before fn enum macro can be because that calls enum and its afraid of ODR
  and the error message for that is really unhelpful. 
- debug state stack should include eval const ident. 
- multiple cases with one handler in switch. 
- expand macros in switch
- function to get enum count so you don't have to do the last one being _count trick

*/
