/// An implementation of the lox language from CraftingIntepreters.com.
/// It's a pretty direct port of clox (the second implementation in the book). 
/// Following that book was how I wrote my first compiler so it seems cool to use that as a test project for my new language. 

// TODO: read from file/repl. 
fn main() void = lox_stmts();

#test fn lox_stmts() = {
    vm: Vm = init_vm();
    
    vm&.interpret("return -(1 + 2);");
    assert_eq(vm.last_return.to_number(), 3.0.neg());
    
    vm&.interpret("return 3 - 1;");
    assert_eq(vm.last_return.to_number(), 2.0);
    
    vm&.interpret("return !true;");
    assert_eq(vm.last_return.to_bool(), false);
    
    vm&.interpret("return !(3 > 5) == 3 <= 5;");
    assert_eq(vm.last_return.to_bool(), true);
    
    vm&.interpret("return \"hello\" == \"world\";");
    assert_eq(vm.last_return.to_bool(), false);
    
    vm&.interpret("return \"hello world\" == \"hello\" + \" world\";");
    assert_eq(vm.last_return.to_bool(), true);
    
    vm&.interpret("print \"hello world\"; return nil;");
    
    vm&.interpret("var a = 123; return a;");
    assert_eq(vm.last_return.to_number(), 123.0);
    
    vm&.interpret("var a = 123; a = 456; return a;");
    assert_eq(vm.last_return.to_number(), 456.0);
    vm&.interpret("{ var b = 123; b = 456; return b; }");
    assert_eq(vm.last_return.to_number(), 456.0);
 
    // TODO: commit "support linux" made this more consistantly `matched on invalid tag???` when run as part of examples (even on macos). :FUCKED.
    //vm&.drop();
}

#include_std("examples/lox/chunk.fr");  // TODO: rename this macro
#include_std("examples/lox/value.fr");
#include_std("examples/lox/vm.fr");
#include_std("examples/lox/scanner.fr");
#include_std("examples/lox/compile.fr");

//////////////////////
/* List of grievances. 
- write f64 to string (better)
- derive eq/display for unique types. 
- derive recursive drop/default.
- closured values dont work as macro params????? 
- nicer switch over incomplete enum. 
- jump table switch, mine is gonna be so slow. 
- passing arch overload set to typed Fn 
- need smarter overload resolution so you can use enum contextual fields more often. I hate typing the name a bunch. 
- can't define fn eq overload for an @enum type because then it needs to get typechecked before fn enum macro can be because that calls enum and its afraid of ODR
  and the error message for that is really unhelpful. 
- debug state stack should include eval const ident. 
- multiple cases with one handler in switch. 
- expand macros in switch
- function to get enum count so you don't have to do the last one being _count trick
    (this was fixed. TODO: update code)

*/
