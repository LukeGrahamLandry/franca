/// An implementation of the lox language from CraftingIntepreters.com.
/// It's a pretty direct port of clox (the second implementation in the book). 
/// Following that book was how I wrote my first compiler so it seems cool to use that as a test project for my new language. 

// TODO: read from file/repl. 
main :: fn() void = lox_stmts();
#use("@/lib/collections/map.fr");

fn lox_stmts() = {
    vm: Vm = init_vm();
    vm&.interpret("return -(1 + 2);");
    assert_eq(vm.last_return.to_number(), 3.0.neg());
    
    vm&.interpret("return 3 - 1;");
    assert_eq(vm.last_return.to_number(), 2.0);
    
    vm&.interpret("return !true;");
    assert_eq(vm.last_return.to_bool(), false);
    
    vm&.interpret("return !(3 > 5) == 3 <= 5;");
    assert_eq(vm.last_return.to_bool(), true);
    
    vm&.interpret("return \"hello\" == \"world\";");
    assert_eq(vm.last_return.to_bool(), false);
    
    vm&.interpret("return \"hello world\" == \"hello\" + \" world\";");
    assert_eq(vm.last_return.to_bool(), true);
   
    // TODO: capture so it's not spammy in the test
    //vm&.interpret("print \"hello world\"; return nil;");
    
    vm&.interpret("var a = 123; // comment!\n return a;");
    assert_eq(vm.last_return.to_number(), 123.0);
    
    vm&.interpret("var a = 123; a = 456; return a;");
    assert_eq(vm.last_return.to_number(), 456.0);
    vm&.interpret("{ var b = 123; b = 456; return b; }");
    assert_eq(vm.last_return.to_number(), 456.0);
    
    vm&.interpret("{ var b = 1; if (b == 1) { b = 2.5; } return b; }");
    assert_eq(vm.last_return.to_number(), 2.5);
    
    vm&.interpret("{ var b = 1; if (b == 1) { b = 5; } else { b = 4; } return b; }");
    assert_eq(vm.last_return.to_number(), 5.0);
    
    vm&.interpret("{ var b = 2; if (b == 1) { b = 4; } else { b = 3; } return b; }");
    assert_eq(vm.last_return.to_number(), 3.0);
    
    vm&.interpret("{ var c = 0; var a = 0; while (c < 3) a = a + (c = c + 1.0); return a; }");
    assert_eq(vm.last_return.to_number(), 6.0);
    vm&.interpret("{ var a = 0; for (var c = 0; c < 3; c = c + 1) a = a + c + 1.0; return a; }");
    assert_eq(vm.last_return.to_number(), 6.0);
    
    vm&.drop();
}

#include_std("examples/lox/chunk.fr");  // TODO: rename this macro
#include_std("examples/lox/value.fr");
#include_std("examples/lox/vm.fr");
#include_std("examples/lox/scanner.fr");
#include_std("examples/lox/compile.fr");

//////////////////////
/* List of grievances. 
- write f64 to string (better)
- derive eq/display for unique types. 
- derive recursive drop/default.
- nicer switch over incomplete enum. 
- jump table switch, mine is gonna be so slow. 
- passing arch overload set to typed Fn 
- need smarter overload resolution so you can use enum contextual fields more often. I hate typing the name a bunch. 
- debug state stack should include eval const ident. 
- multiple cases with one handler in switch. 
- expand macros in switch
*/
