Value :: @struct(bits: i64);  // TODO: the world is probably a better place if this is u64 since I just care about the bits. 

// TODO: better error message if you forget the format string in @fmt
// TODO: higher prevision float rendering 
fn display(self: *Value, out: *List(u8)) void = self[].display(out);
fn display(self: Value, out: *List(u8)) void = {
    if self.is_nil() {
        out.push_all("nil");
        return();
    };
    if self.is_bool() {
        self.to_bool().display(out);
        return();
    };
    if self.is_number() {
        self.to_number().display(out);
        return();
    };
    if self.is_obj() {
        @match(self.obj_type()) {
            fn String() => {
                o := self.to_string();
                o.data.display(out);
                return();
            }
            fn _temp() => unreachable();
        };
    };
    
    "~~BAD_VALUE~~".display(out)
}

qnan        : i64   : 0x7ffc000000000000.bitcast();
sign_bit    : i64   : 0x8000000000000000.bitcast();

nil_value   : Value : (bits = 1.bit_or(qnan));
false_value : Value : (bits = 2.bit_or(qnan));
true_value  : Value : (bits = 3.bit_or(qnan));

#inline fn to_value(self: f64) Value = (bits = self.bitcast());
#inline fn to_value(self: bool) Value = if(self, => true_value, => false_value);
#inline fn to_value(self: *Obj) Value = Obj.from_obj_subtype(self);
#inline fn to_value(self: *ObjString) Value = ObjString.from_obj_subtype(self);

null_object :: sign_bit.bit_or(qnan);

from_obj_subtype :: fn($T: Type, self: *T) Value #generic = {
    addr := T.int_from_ptr(self);
    (bits = null_object.bit_or(addr))
};

#inline fn is_number(self: Value) bool = self.bits.bit_and(qnan).ne(qnan);
#inline fn is_bool(self: Value) bool = self.eq(true_value).or(self.eq(false_value));
#inline fn is_nil(self: Value) bool = self.eq(nil_value);
#inline fn is_obj(self: Value) bool = {
    self.bits.bit_and(null_object) == null_object
}
fn is_obj(self: Value, type: ObjType) bool = {
    if(!self.is_obj(), => return(false));
    self.obj_type() == type 
}

#inline fn to_bool(self: Value) bool = self.eq(true_value);
#inline fn to_number(self: Value) f64 = self.bits.bitcast();

to_obj_subtype :: fn($T: Type, self: Value) *T #generic = {
    addr := self.bits.bit_and(null_object.bit_not());
    T.ptr_from_int(addr)
};

fn to_obj(self: Value) *Obj #inline  = Obj.to_obj_subtype(self);
fn to_string(self: Value) *ObjString #inline = ObjString.to_obj_subtype(self);

fn eq(lhs: Value, rhs: Value) bool = {
    // strings are interned so this is good enough for them too. 
    lhs.bits == rhs.bits // TODO: IEEE NaN
}

ObjType :: @enum(i64) (String, _temp); :: enum(ObjType);
Obj :: @rec @struct(
    type: ObjType,
    next: *Obj,
);

ObjString :: @struct(
    obj: Obj,
    data: Str,
    hash: i64 = 0,
);

fn obj_type(self: Value) ObjType #inline = {
    o := self.to_obj();
    o.type
}

allocate_obj :: fn(self: *Vm, $T: Type, tag: ObjType) *T #generic = {
    mem := self.gc.alloc(T, 1);
    mem.ptr.obj.type = tag;
    mem.ptr.obj.next = self.objects;
    self.objects = mem.ptr.obj&;
    mem.ptr
};

// TODO: EXTRA: store the data contiguously with the ObjString header
// TODO: EXTRA: track which strings are constant-ish so don't free them
fn copy_string(self: *Vm, s: Str) *ObjString = {
    new := self.gc.alloc(u8, s.len);
    new.copy_from(s);
    self.take_string(new)
}

fn take_string(self: *Vm, s: Str) *ObjString = {
    o := self.allocate_obj(ObjString, ObjType.String);
    o.data = s;
    o.update_hash();
    
    // This is a copy paste of collections/map.fr/insert but using slow_eq instead to do the interning. 
    // TODO: its dumb that my hash table stores the hashes because the strings store them too (i don't want to rehash for each new table)
    
    full := self.strings.len_including_tombstones.add(1).gt(self.strings.capacity);
    if(full, => self.strings&.resize(self.gc)); // does it sooner than necessary (if replacing a slot) but thats fine. 
    slot := self.strings&.slow_find_slot(o);
    
    @switch(slot.hash) {
        @case(0) => {
            slot[] = (hash = o.hash, key = o, value = nil_value);
            self.strings.len_including_tombstones += 1;
        };
        @case(1) => {
            slot[] = (hash = o.hash, key = o, value = nil_value);
        };
        @default => {
            // It was interned!
            // TODO: don't allocate and then immediately free the objheader.
            //       we should just be freeing the bytes here. 
            self.objects = o.obj.next; // we know we just made this so its the most recent
            self.free_obj(o.obj&);
            return(slot.key);
        };
    };
        
    fn slow_find_slot(self: *Table, key: *ObjString) *Table.Entry = {
        i := key.hash.mod(self.arr.len); // TODO: power of two trick
        
        range(0, self.arr.len) {_|
            check := self.arr[i]&;
            if check.hash == key.hash && check.key.slow_eq(key) {
                return(check);
            } else {
                if(check.hash == 0, => return(check)); // empty, not in map
                // 1 => placeholder for a removed value
                //      TODO: if you're inserting, you could use it? 
                // othewise, continue, might have been bumped
            };
            i = i.add(1).mod(self.arr.len);
        };
        
        panic("Unreachable unless you set the load factor to 100%")
    }
    
    fn slow_eq(lhs: *ObjString, rhs: *ObjString) bool = 
        lhs.data == rhs.data;

    o
}

fn hash(h: *TrivialHasher, obj: **ObjString) void = {
    h.hash(obj.hash&);
}

// this assumes the strings are already interned ,
// so you can't use the normal hashmap insert functions to check if a string is unique when first creating it.
fn eq(lhs: **ObjString, rhs: **ObjString) bool = {
    lhs := ObjString.int_from_ptr(lhs[]);
    rhs := ObjString.int_from_ptr(rhs[]);
    lhs == rhs
}

fn update_hash(obj: *ObjString) void = {
    h: TrivialHasher = init();
    h&.hash(obj.data&);
    obj.hash = h&.end().bitcast();
}

fn free_objects(self: *Vm) void = {
    while => !self.objects.is_null() {
        obj := self.objects;
        self.objects = obj.next;
        self.free_obj(obj);
    };
}

fn free_obj(self: *Vm, obj: *Obj) void = {
    //@println("[FREE] [%]", v);
    @match(obj.type) {
        fn String() => {
            obj := obj.to_value().to_string();
            self.gc.dealloc(u8, obj.data);
            self.gc.dealloc(ObjString, @as([]ObjString) (ptr = obj, len = 1));
        }
        fn _temp() => unreachable();
    };
}

::ptr_utils(Obj);
::if(Value);
