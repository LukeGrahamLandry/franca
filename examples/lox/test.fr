//! This parses the format used by https://github.com/munificent/craftinginterpreters/tree/master/test
//! Currently checks exact output for programs that are not supposed to error but otherwise just expects 
//! runtime vs compile error to be correct (my error messages don't match). 

#use("@/examples/testing.fr");
fn main() void = {
    args := cli_args();
    
    get  :: fetch_or_crash;
    root := get("https://github.com/munificent/craftinginterpreters/archive/4a840f70f69c6ddd17cfef4f6964f8e1bcd8c3d4.zip", 10662749, "c4c8a07244f778c4946358ffad0c047adad9819d15524568a07d98c1a6d73af1", "craftinginterpreters-4a840f70f69c6ddd17cfef4f6964f8e1bcd8c3d4");
    
    go := false;
    total, pass := (0, 0);
    for args { s |
        continue :: local_return;
        s := s.str();
        if !go {
            if s == "--" {
                go = true;
            };
            continue();
        };
        mark := mark_temporary_storage();
        yes, no := run_test_at_path(s);
        reset_temporary_storage(mark);
        total += yes + no;
        pass += yes;
    };
    if total == 0 {
        // TODO: limit the default run ones to what i pass so far and then add this to the auto test
        yes, no := run_test_at_path(@tfmt("%/test", root));
        total += yes + no;
        pass += yes;
    };
    
    @println("Passed %/% tests.", pass, total);
    exit(if(pass == total, => 0, => 1));
}

::if(Ty(i64, i64));
fn run_test_at_path(s: Str) Ty(i64, i64) = {
    if s.ends_with(".lox") {
        src := temp().read_to_string_or_crash(s);
        @println("Run %", s);
        if run_test(src) {
            (1, 0)
        } else {
            (0, 1)
        }
    } else {
        children := Str.list(temp());
        (walk_directory(as_cstr s) { e |
            continue :: local_return;
            interesting := e.name.ends_with(".lox") || e.is(.Directory);
            if interesting && e.name != "." && e.name != ".." {
                children&.push(@tfmt("%/%", s, e.name));
            };
        }) || @panic("walk dir '%' failed", s);
        sort :: import("@/lib/sort.fr")'quicksort(Str, order_strings);
        sort(children.items());
        
        a, b := (0, 0);
        for children { it |
            c, d := run_test_at_path(it);
            a += c; b += d;
        };
        (a, b)
    }
}

fn run_test(src: List(u8)) bool = {
    want := expected_output(src.items());
    src&.push_all("\nreturn nil;"); // todo: remove
        
    found: List(Str) = list(temp());
    vm: Vm = init_vm();
    result := vm&.interpret(src.items()) { value | 
        found&.push(@tfmt("%", value));
    };
    vm&.drop();  // test a forced full collection
    
    @match(want) {
        fn Ok(want) => {
            if(result != .Ok, => return(false));
            if want.len != found.len {
                @println("Expected % outputs but found %", want.len, found.len);
                return(false);
            };
            
            range(0, want.len) { i |
                if want[i] != found[i] {
                    @println("[%] Expected '%' but found '%'", i, want[i], found[i]);
                    return(false);
                };
            };
            true
        }
        fn RuntimeError() => result == .RuntimeError;
        fn CompileError() => result == .CompileError;
    }
}

TestResult :: @tagged(Ok: List(Str), CompileError, RuntimeError);
fn expected_output(src: Str) TestResult = {
    want: List(Str) = list(temp());
    cursor := 0;
    tag := "// expect: ";
    runtime_tag := "expect runtime error: ";
    comptime_tag := "[line ";
    while => cursor < src.len - tag.len {
        if cursor < src.len - runtime_tag.len {
            if src.subslice(cursor, runtime_tag.len) == runtime_tag {
                return(.RuntimeError)
            };
        };
        if src.subslice(cursor, comptime_tag.len) == comptime_tag {
            return(.CompileError)
        };
        if src.subslice(cursor, tag.len) == tag {
            cursor += tag.len;
            start := cursor;
            while => cursor < src.len && src[cursor] != "\n".ascii() {
                cursor += 1;
            };
            want&.push(src.slice(start, cursor));
            cursor -= 1;
        };
        cursor += 1;
    };
    (Ok = want)
}

#use("@/lib/collections/map.fr");
#use("@/lib/sys/fs.fr");
#include_std("examples/lox/chunk.fr");  // TODO: rename this macro
#include_std("examples/lox/value.fr");
#include_std("examples/lox/vm.fr");
#include_std("examples/lox/scanner.fr");
#include_std("examples/lox/compile.fr");
