//! This parses the format used by https://github.com/munificent/craftinginterpreters/tree/master/test
//! Currently checks exact output for programs that are not supposed to error but otherwise just expects 
//! runtime vs compile error to be correct (my error messages don't match). 

// note: since i don't check exact error messages it will look like i pass tests that are supposed to error just because they use features i don't support yet

#use("@/examples/testing.fr");
fn main() void = {
    args := cli_args();
    
    get  :: fetch_or_crash;
    root := get("https://github.com/munificent/craftinginterpreters/archive/4a840f70f69c6ddd17cfef4f6964f8e1bcd8c3d4.zip", 10662749, "c4c8a07244f778c4946358ffad0c047adad9819d15524568a07d98c1a6d73af1", "craftinginterpreters-4a840f70f69c6ddd17cfef4f6964f8e1bcd8c3d4");
    
    go := false;
    total, pass := (0, 0);
    for args { s |
        continue :: local_return;
        s := s.str();
        if !go {
            if s == "--" {
                go = true;
            };
            if s == "-pass" {
                do_skips[] = true;
            };
            if s == "-hush" {
                HUSH[] = true;
            }
            continue();
        };
        @assert(!do_skips[], "only skip failing tests when running all");
        mark := mark_temporary_storage();
        yes, no := run_test_at_path("", @tfmt("%/test/%", root, s));
        reset_temporary_storage(mark);
        total += yes + no;
        pass += yes;
    };
    if total == 0 {
        yes, no := run_test_at_path("", @tfmt("%/test", root));
        total += yes + no;
        pass += yes;
    };
    
    @println("\npassed %/% tests.", pass, total);
    if pass != total {
        panic("tests failed");
    }
    Syscall'exit(if(pass == total, => 0, => 1));
}

do_skips :: @static(bool) false;
HUSH :: @static(bool) false;

skip :: @const_slice(
    "string/multiline.lox",   // TODO: my test runner is dumb about multiline prints
    "number/literals.lox",  // i don't print -0
    "operator/multiply.lox",  // i don't print decimals
    "operator/not.lox", // requires `fun`
    "regression", 
    "variable/early_bound.lox", 
    "variable/duplicate_local.lox", 
    "variable/local_from_method.lox", 
    "variable/use_local_in_initializer.lox", 
    "closure", 
    "function", 
    "call", 
    "return", 
    "while/closure_in_body.lox", "while/return_closure.lox", "while/return_inside.lox",
    "for/return_inside.lox", "for/return_closure.lox", "for/closure_in_body.lox", 
    "for/syntax.lox", // needs fun
    "assignment/to_this.lox", "operator/not_class.lox", "operator/equals_class.lox", "operator/equals_method.lox", 
    "constructor", "field", "class", "inheritance", "method", "super", "this",
    "benchmark", "limit/stack_overflow.lox", "limit/too_many_upvalues.lox",
    
    // these are for chapters before the vm
    "expressions", "expressions", "scanning",
);

::if(Ty(i64, i64));
fn run_test_at_path(prefix: Str, s: Str) Ty(i64, i64) = {
    if do_skips[] && skip.contains(fn(check) => s.ends_with(@tfmt("/%", check[]))) {
        return(0, 0);
    };
    if s.ends_with(".lox") {
        src := temp().read_to_string_or_crash(s);
        ::FmtPad(Str);
        @if(!HUSH[]) @print("%", f_pad(s.rest(prefix.len), 40, .After));
        ok := run_test(src);
        @if(!HUSH[]) @println("[%]", @if(ok, "ok", "fail"));
        (int(ok), int(!ok))
    } else {
        children := Str.list(temp());
        (walk_directory(as_cstr s) { e |
            continue :: local_return;
            interesting := e.name.ends_with(".lox") || e.is(.Directory);
            if interesting && e.name != "." && e.name != ".." {
                children&.push(@tfmt("%/%", s, e.name));
            };
        }) || @panic("walk dir '%' failed", s);
        Sort :: import("@/lib/sort.fr");
        sort :: Sort'quicksort(Str, Sort.order_strings);
        sort(children.items());
        
        
        @if(!HUSH[]) @println("=== % ===", s.rest(prefix.len));
        a, b := (0, 0);
        for children { it |
            c, d := run_test_at_path(s, it);
            a += c; b += d;
        };
        @if(!HUSH[]) @println("===");
        (a, b)
    }
}

fn run_test(src: List(u8)) bool = {
    want := expected_output(src.items());
    src&.push_all("\nreturn nil;"); // todo: remove
        
    found: List(Str) = list(temp());
    vm: Vm = init_vm();
    result := vm&.interpret(src.items(), true) { value | 
        found&.push(@tfmt("%", value));
    };
    
    pass := @match(want) {
        fn Ok(want) => {
            print(vm.errors.items());
            if(result != .Ok || vm.errors.len != 0, => return(false));
            if want.len != found.len {
                @println("Expected % outputs but found %", want.len, found.len);
                return(false);
            };
            
            range(0, want.len) { i |
                if want[i] != found[i] {
                    @println("[%] Expected '%' but found '%'", i, want[i], found[i]);
                    return(false);
                };
            };
            
            vm&.drop();  // test a forced full collection
            
            true
        }
        fn RuntimeError() => result == .RuntimeError;
        fn CompileError() => result == .CompileError;
    };
    if pass {
        s := want&.tag();
        s := s.name_str();
        @print("%", s.slice(0, 1));
    }

    if !want&.is(.Ok) && !pass {
        print(vm.errors.items());
        print("(expected an error)");
    };
    
    pass
}

// TODO: do any of the tests require some prints and then an error later? rn i only return one or the other. 
TestResult :: @tagged(Ok: List(Str), CompileError, RuntimeError);
fn expected_output(src: Str) TestResult = {
    want: List(Str) = list(temp());
    cursor := 0;
    tag := "// expect: ";
    runtime_tag := "expect runtime error: ";
    comptime_tag := "[line ";
    other_comptime_tag := "// Error at ";
    while => cursor < src.len - tag.len {
        if cursor < src.len - runtime_tag.len {
            if src.subslice(cursor, runtime_tag.len) == runtime_tag {
                return(.RuntimeError)
            };
        };
        if src.subslice(cursor, comptime_tag.len) == comptime_tag {
            return(.CompileError)
        };
        if src.subslice(cursor, other_comptime_tag.len) == other_comptime_tag {
            return(.CompileError)
        };
        if src.subslice(cursor, tag.len) == tag {
            cursor += tag.len;
            start := cursor;
            while => cursor < src.len && src[cursor] != "\n".ascii() {
                cursor += 1;
            };
            want&.push(src.slice(start, cursor));
            cursor -= 1;
        };
        cursor += 1;
    };
    (Ok = want)
}

#use("@/lib/collections/map.fr");
#use("@/lib/sys/fs.fr");
#include_std("examples/lox/chunk.fr");  // TODO: rename this macro
#include_std("examples/lox/value.fr");
#include_std("examples/lox/vm.fr");
#include_std("examples/lox/scanner.fr");
#include_std("examples/lox/compile.fr");
