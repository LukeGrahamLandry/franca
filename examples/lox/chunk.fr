Chunk  :: @struct(
    code: List(u8),
    constants: List(Value),
    lines: List(i64),
);

OpCode :: @enum(u8) (
    Return = 0,
    Constant = 1,
    Negate = 2,
    Add = 3,
    Subtract = 4,
    Multiply = 5,
    Divide = 6,
);

fun init() Chunk = (code: list(), constants: list(), lines: list());
fun push(self: *Chunk, b: OpCode, line: i64) Unit = self.push(@as(i64) b, line);
fun push(self: *Chunk, b: i64, line: i64) Unit = {
    self.code.push(@as(u8) b); // TODO: real u8 type and auto convert literals
    self.lines.push(line);
}

fun push(self: *Chunk, b: Value) i64 = {
    self.constants.push(b);
    // EXTRA(1): add OP_CONSTANT_LONG that uses two byte index when len > 256. 
    self.constants.len[].sub(1)
}

fun drop(self: *Chunk) Unit = {
    self.code.drop(); 
    self.constants.drop(); 
    self.lines.drop();
}

fun disassemble(self: *Chunk, name: Str) Unit = {
    var offset = 0;
    dowhile{()bool|
        offset = offset.add(self.dis_inst(offset));
        offset.lt(self.code.len[])
    };   
}

// TODO: buffer this. need to make it easier to @fmt new line. do escape codes. 
fun dis_inst(self: *Chunk, i: i64) i64 = {
    // TODO: why doesn't this work as a closure that captures 'i'
    simple :: fn(i: i64, n: Str) i64 = {
        @println("  - %: %", i, n);  // TODO: format with align like printf can. 
        1
    };
    
    line := self.lines.get(i); // TODO: print line info and leave blank if it didn't change from the last time. 
    changed := i.gt(0).and(fn() bool = self.lines.get(i.sub(1)).ne(line));
    
    @switch(self.code.get(i)) {
        @case(@as(i64) OpCode.Return)   fn = simple(i, "Return");
        @case(@as(i64) OpCode.Negate)   fn = simple(i, "Negate");
        @case(@as(i64) OpCode.Add)      fn = simple(i, "Add");
        @case(@as(i64) OpCode.Subtract) fn = simple(i, "Subtract");
        @case(@as(i64) OpCode.Multiply) fn = simple(i, "Multiply");
        @case(@as(i64) OpCode.Divide)   fn = simple(i, "Divide");
        @case(@as(i64) OpCode.Constant) fn = {
            val_i := self.code.get(i.add(1));
            var val = self.constants.get(@as(i64) val_i);
            @println("  - %: % %         %", i, "Constant", val_i, val&);
            2
        };
        @default fn(_: i64) = simple(i, "???");
    }
}

fun display(self: u8, out: *List$i64) Unit = display(@as(i64) self, out);  // TODO: hack. 
