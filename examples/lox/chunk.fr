Chunk  :: @struct(
    code: List(u8),
    constants: List(Value),
    lines: List(i64),
);

// TODO: EXTRA: seperate ne/le/ge opcodes. 
OpCode :: @enum(u8) (
    Return,
    Constant,
    Negate,
    Add,
    Subtract,
    Multiply,
    Divide,
    True,
    False, 
    Nil,
    Not,
    Equal,
    Less,
    Greater,
    Print,
    Pop,
    DefineGlobal,
    GetGlobal,
    SetGlobal,
    GetLocal,
    SetLocal,
    // followed by 2 byte offset. applied to the ip after decoding this instruction.
    Jump, // forwards
    JumpIfFalse, // forwards; leaves the condition on the stack
    Loop, // backwards
);

fn init() Chunk = (code = list(general_allocator()), constants = list(general_allocator()), lines = list(general_allocator()));
fn push(self: *Chunk, b: OpCode, line: i64) void = self.push((@as(u8) b).zext(), line); // TODO: .as_raw() on enums
fn push(self: *Chunk, b: i64, line: i64) void = {
    self.code&.push(@as(u8) b.trunc()); // TODO: real u8 type and auto convert literals
    self.lines&.push(line);
}

fn push(self: *Chunk, b: Value) i64 = {
    self.constants&.push(b);
    // EXTRA(1): add OP_CONSTANT_LONG that uses two byte index when len > 256. 
    self.constants.len.sub(1)
}

fn drop(self: *Chunk) void = {
    self.code&.drop(); 
    self.constants&.drop(); 
    self.lines&.drop();
}

fn disassemble(self: *Chunk, name: Str) void = {
    out := u8.list(temp());
    @fmt(out&, "=== % ===\n", name);
    offset := 0;
    dowhile {
        offset = offset.add(self.dis_inst(out&, offset));
        offset.lt(self[].code.len)
    };   
    @fmt(out&, "===\n");
    print(out.items());
}

fn dis_inst(self: *Chunk, out: *List(u8), i: i64) i64 = {
    offset16 :: fn(direction: i64) i64 => {
        a: i64 = self.code[i + 1].zext();
        b: i64 = self.code[i + 2].zext();
        distance := a.bit_or(b.shift_left(8));
        op := @as(OpCode) @as(u8) self.code.get(i);
        @fmt(out, "  - %: % % (to %)\n", i, op, distance, 3 + i + distance * direction);
        3
    };
    
    line := self.lines[i]; // TODO: print line info and leave blank if it didn't change from the last time. 
    changed := i > 0 && self[].lines.get(i - 1) != line;
    
    if self.code[i] >= OpCode.enum_count() {
        @fmt(out, "  - %: ???\n", i);  // TODO: format with align like printf can. 
        return(1)
    };
    ::enum(OpCode);
    op := @as(OpCode) @as(u8) self.code[i];
    
    if @is(op, .SetGlobal, .GetGlobal, .DefineGlobal) {
        val_i := self.code[i + 1];
        val := self.constants.get(val_i.zext());
        @fmt(out, "  - %: % %         %\n", i, op, val_i, val&);
        return(2)
    };
    
    if @is(op, .SetLocal, .GetLocal) {
        val_i := self.code[i + 1];
        @fmt(out, "  - %: % %\n", i, op, val_i);
        return(2)
    };
    
    @match(op) {
        fn Constant() => {
            val_i := self.code[i + 1];
            val := self.constants.get(val_i.zext());
            @fmt(out, "  - %: % %         %\n", i, "Constant", val_i, val&);
            2
        };
        fn Jump()        => offset16(1);
        fn JumpIfFalse() => offset16(1);
        fn Loop()        => offset16(-1);
        @default => {
            @fmt(out, "  - %: %\n", i, op);  // TODO: format with align like printf can. 
            1
        };
    }
}
