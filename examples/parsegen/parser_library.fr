// Based on Wilf Lalonde's compiler construction course. 

ENABLE_DEBUG_SPAM :: true; 
fn debug_log(arg: FatExpr) FatExpr #macro = 
    if(ENABLE_DEBUG_SPAM, => println(arg), => @{});

VirtualTree :: @rec @tagged(
    Tree: @struct(label: Str, children: RawList(VirtualTree)),
    Token: Token,
);
Token :: @struct(label: Str, symbol: Str);

fn display(self: *VirtualTree, out: *List(u8)) void = {
    inner :: fn(self: *VirtualTree, out: *List(u8), depth: i64) void = {
        push_rep(out, "    ", depth);    ::DeriveFmt(Token);
        @match(self) {
            fn Token(it) => @fmt(out, "%(%);\n", it.label, it.symbol);
            fn Tree(it) => {
                @fmt(out, "% {\n", it.label);
                each(it.children&, fn(it) => inner(it, out, depth + 1));
                push_rep(out, "    ", depth); 
                @fmt(out, "}\n");
            }
        };
    };
    inner(self, out, 0);
}

Table :: @tagged(
    ScannerReadaheadTable: ScannerReadaheadTable,
    SemanticTable: SemanticTable,
    ShiftbackTable: ShiftbackTable,  // i don't generate these yet
    ReadaheadTable: ReadaheadTable,
    ReadbackTable: ReadbackTable,
    AcceptTable: AcceptTable,
    ReduceTable: ReduceTable,
);

fn run(self: *Table, transducer: DynTransducer) Result(i64, TransducerError) = 
    @generic_match(self, fn(it) => run(it, transducer));

ScannerReadaheadTable :: @struct(transitions: RawHashMap(i64, Ty(ParserAttributeList, i64)));

TransducerError :: @tagged(
    DesignError:  Str,
    LexicalError: Str,
    SyntaxError:  Str,
    InvalidAction: Str,
);

TransducerVTable :: @struct(
    perform_action: @FnPtr(self: rawptr, action: Str, parameters: []Str) Result(void, TransducerError), 
);
DynTransducer :: @rec @struct {
    parent: ?*DynTransducer;
    data: rawptr;
    vtable: *TransducerVTable;
};

fn run(self: *ScannerReadaheadTable, transducer: DynTransducer) Result(i64, TransducerError) = {
    scanner := Scanner.ptr_from_raw(transducer.data);
    c := scanner.peek_input(); 
    @debug_log("\t peeked at %", c);
    attributes, goto := self.transitions&.get(c) || {
        return(Err = (LexicalError = @tfmt("ScannerReadAhead could not find transition for char %", c)))
    }; 
    @debug_log("\t\t transition for % -> % %", c, attributes&, goto);
    if(!attributes.is_read, => return(Ok = goto));
    if attributes.is_keep {
        @debug_assert_lt(c, 256, "invalid ascii char");
        scanner.kept_characters&.push(c.trunc()); 
    };
    scanner.discard_input();
    (Ok = goto)
}

SemanticTable :: @struct(action: Str, parameters: []Str, goto: i64);

fn run(self: *SemanticTable, transducer: DynTransducer) Result(i64, TransducerError) = {
    @debug_log("\t semantic table has to run %(%)", self.action, self.parameters);
    result := (transducer.vtable.perform_action)(transducer.data, self.action, self.parameters);
    if result&.is_err() {
        if !result.Err&.is(.InvalidAction) {
            return(Err = result.Err);
        };
        if transducer.parent { it |
            @try(run(self, it[])) return;
        } else {
            return(Err = result.Err);
        };
    };
    (Ok = self.goto) 
}

ReadaheadTable :: @struct(transitions: RawHashMap(Str, Ty(ParserAttributeList, i64)));

fn run(self: *ReadaheadTable, transducer: DynTransducer) Result(i64, TransducerError) = {
    p := Parser.ptr_from_raw(transducer.data);
    token := p.peek_scanner_token();
    attributes, goto := self.transitions&.get(token.label) || {
        return(Err = (SyntaxError = @tfmt("% not allowed", token.label)))
    };
    if(!attributes.is_read, => return(Ok = goto));
    @try(p.discard_scanner_token()) return;
    if attributes.is_stack {
        p.token_stack&.push(token);
        p.table_number_stack&.push(goto);
        p.tree_stack&.push(if(attributes.is_node, => (Some = (Token = token)), => .None));
        p.right = p.token_stack.len - 1;
        p.left = p.right + 1;
    };
    @debug_log("\tleft: %, right: %", p.left, p.right);
    @debug_log("\t\ttransition for % to %", token.label, goto);
    (Ok = goto)
}

ReadbackTable :: @struct(transitions: RawHashMap(Ty(Str, i64), Ty(ParserAttributeList, i64)));

fn run(self: *ReadbackTable, transducer: DynTransducer) Result(i64, TransducerError) = {
    p     := Parser.ptr_from_raw(transducer.data);
    label := p.token_stack[p.left - 1].label;
    state := p.table_number_stack[p.left - 1];
    key   := (label, state);
    attributes, goto := self.transitions&.get(key) || {
        return(Err = (DesignError = @tfmt("Incorrect readback tables. Missing transition for % RA % from (TODO)", label, state)))
    };
    if attributes.is_read {
        p.left -= 1;
    };
    @debug_log("\tleft: %, right: %", p.left, p.right);
    (Ok = goto)
}

ShiftbackTable :: @struct(shift: i64, goto: i64);

fn run(self: *ShiftbackTable, transducer: DynTransducer) Result(i64, TransducerError) = {
    parser := Parser.ptr_from_raw(transducer.data);
    // TODO: free the lists (and token.symbol, but heck, it's not always owned)
    parser.left = parser.left - self.shift;
    @debug_log("\tleft: %, right: %", parser.left, parser.right);
    (Ok = self.goto) 
}

ReduceTable :: @struct(nonterminal: Str, transitions: RawHashMap(i64, Ty(ParserAttributeList, i64)));

fn run(self: *ReduceTable, transducer: DynTransducer) Result(i64, TransducerError) = {
    p := Parser.ptr_from_raw(transducer.data);
    @debug_log("Reduce to %", self.nonterminal);
    
    /* pick up the new tree */
    ::if_opt(DeferredTree, ?VirtualTree);
    tree: ?VirtualTree = if p.tree_builder { action | 
        // We've already queued a tree to build from a semantic action. 
        ::DeriveFmt(@type action);
        @debug_log("Reduce deferred %", action&);
        @debug_assert(p.new_tree&.is_none(), "ReduceTable stomped an existing tree");
        t := @match(action) {
            fn Tree(label)    => p.build_tree(label);
            fn TreeIndex(idx) => p.build_tree_from_index(idx);
        };
        p.tree_builder = .None;
        (Some = t)
    } else {
        // We expect 0 or 1 trees to exist in the range. 
        @debug_log("\tArray of size % - [% ~ %]", p.tree_stack.len, p.left, p.right);
        t: ?VirtualTree = .None;
        stack := p.tree_stack.items().slice(p.left, p.right + 1);
        each stack { it |
            continue :: local_return;
            it.is_some() || continue();
            t&.is_none() || return(Err = (DesignError = "incorrect reduce table; more than one child in tree"));
            t = it[];
        };
        t
    };
    ::DeriveFmt(@type tree);
    @debug_log("Reduce to % building tree %", self.nonterminal&, tree&);
    
    /* clear the stacks */
    remove_count := p.right - p.left + 1;
    p.token_stack.len        -= remove_count;
    p.table_number_stack.len -= remove_count;
    p.tree_stack.len         -= remove_count;
    
    table_number := p.table_number_stack.last().unwrap()[];
    attributes, goto := self.transitions&.get(table_number)
        || return(Err = (DesignError = "Missing reduce table entry"));
        
    /* simulate a readahead of A as a token */
    @debug_log("Found % -> %", attributes&, goto);
    if attributes.is_stack {
        p.token_stack&.push(label = self.nonterminal, symbol = self.nonterminal);
        p.table_number_stack&.push(goto);
        ::if(?VirtualTree);
        p.tree_stack&.push(if(attributes.is_node, => tree, => .None));
        @debug_log("\ttoken added to the stack is <%: %>", self.nonterminal, self.nonterminal);
    };
    p.right = p.tree_stack.len - 1;
    p.left = p.right + 1;
    @debug_log("\tleft: %, right: %", p.left, p.right);
    (Ok = goto)
}

AcceptTable :: @struct(_hack := 0);  // TODO: fixme (AcceptTable = ()) when this is empty, also .AcceptTable should work

// tables are 1-indexed like in smalltalk. This special value represents reaching the end.
fn run(self: *AcceptTable, transducer: DynTransducer) Result(i64, TransducerError) = 
    (Ok = 0);

//A proper screener would replace the symbol part by a unique string
//so that future tests for equality could be done via identity instead
fn screen(keywords: []Str, token: Token) Token = @if_else {
    //Older name is #Identifier and newer name is #walkIdentifier
    @if(!(token.label == "Identifier" || token.label == "walkIdentifier")) => token;
    //An identifer in the list of keywords is converted to that keyword.
    @if(!keywords.contains(token.symbol)) => token;
    @else => (label = token.symbol, symbol = token.symbol);
};

Scanner :: @struct(
    input: Str = "", 
    token: ?Token = .None, 
    kept_characters: List(u8),
    start := 0, 
    current := 0,
    tables: []Table,
    sponsor: DynTransducer,
);

fn perform_action(self: *Scanner, action: Str, parameters: []Str) Result(void, TransducerError) = @switch(action) {
    @case("buildToken") => {
        self.build_token(parameters[0]);
        .Ok
    };
    @case("syntaxError") => {  // TODO: this needs to return a result clearly 
        @println("Syntax error: %", parameters[0]);
        .Ok
    };
    @default => (Err = (InvalidAction = action));
}

fn is_at_end(self: *Scanner) bool =
    self.current == self.input.len;

fn scan_tokens(self: *Scanner, text: Str) void = {
    self.input = text;
    self.token = .None;
    self.kept_characters&.clear();
    self.start = 0;
    self.current = 0;
    self.discard_token().unwrap();
}

fn build_token(self: *Scanner, label: Str) void = {
    s := self.kept_characters.items().shallow_copy(self.kept_characters.gpa);
    self.token = (Some = (label = label, symbol = s));
    @debug_log("\tbuildToken %: %", label, self.kept_characters.items());
    self.kept_characters&.clear(); // prep for the next one
}

fn discard_input(self: *Scanner) void = {
    self.current += 1;
}

/* Set token to nil
 * Execute tables in a loop starting with table1 until token is no longer nil
 * Somewhere during this execution, the semantic action buildToken
 * will execute putting something into variable 'token' */
fn discard_token(self: *Scanner) Result(void, TransducerError) = {
    @debug_log("----> Running discardToken");
    idx := 1;
    self.token = .None;
    t := self.transducer(Some = self.sponsor&);
    while => self.token&.is_none() {
        table := self.tables.index(idx - 1);
        @debug_log("Scanner % % is running...\n", table.tag(), idx);
        idx = @try(run(table, t)) return;
        if(idx == 0, => return(Err = (DesignError = "discardToken reached AcceptTable")));
    };
    @debug_log("----> Token % has been created... exiting discardToken", self.token.Some&);
    .Ok
}

fn peek_input(self: *Scanner) i64 =
    if(self.current == self.input.len, => 256, => self.input[self.current].zext()); 

fn peek_token(self: *Scanner) Token = 
    self.token.expect("a token to be present");

DeferredTree :: @tagged(Tree: Str, TreeIndex: i64);

Parser :: @struct(
    sponsor: DynTransducer,
    scanner: Scanner,
    tables: []Table,
    keywords: []Str,
    token_stack: List(Token),
    table_number_stack: List(i64),
    tree_stack: List(?VirtualTree),
    left: i64,
    right: i64,
    new_tree: ?VirtualTree,
    tree_builder: ?DeferredTree,
    gpa: Alloc,
);

fn reset(self: *Parser) void = {
    self.token_stack&.clear();
    self.token_stack&.push(label = "|-", symbol = "|-");
    self.table_number_stack&.clear();
    self.table_number_stack&.push(1);
    self.tree_stack&.clear();
    self.tree_stack&.push(.None);
    self.left = 0;
    self.right = 0;
    self.new_tree = .None;
    self.tree_builder = .None;
}
    
fn perform_action(self: *Parser, action: Str, parameters: [] Str) Result(void, TransducerError) = @switch(action) {
    @case("buildTree") => {
        @debug_assert(self.tree_builder&.is(.None), "mistake? discarded tree_builder");
        self.tree_builder = (Some = (Tree = parameters[0]));
        .Ok
    };
    @case("buildTreeFromIndex") => {
        //Index is (+1,+2,+3... => label is in the token relative to the leftend; i.e., to the right of left end.
        //Index is (-1,-2,-3... => label is in the token relative to the rightend; i.e., to the left of right end.
        @debug_assert(self.tree_builder&.is(.None), "mistake? discarded tree_builder");
        self.tree_builder = (Some = (TreeIndex = parameters[0].parse_int()));
        .Ok
    };
    @default => (Err = (InvalidAction = action));
};

Tables :: @struct(
    parser: []Table,
    scanner: []Table,
    keywords: []Str,
);

fn init(self: *Parser, sponsor: DynTransducer, tables: Tables, a: Alloc) void = {
    self.tables = tables.parser;
    self.scanner = (tables = tables.scanner, kept_characters = list(a), sponsor = sponsor);
    self.sponsor = sponsor;
    self.keywords = tables.keywords;
    self.token_stack = list(a);
    self.table_number_stack = list(a);
    self.tree_stack = list(a);
    self.gpa = a;
    self.reset();
}

fn parse(self: *Parser, text: Str) Result(VirtualTree, TransducerError) = {
    self.scanner&.scan_tokens(text);
    idx         := 1;
    table_count := 0;
    t := self.transducer(Some = self.sponsor&);
    while => idx != 0 {  // AcceptTable is the only one that returns 0
        table_count += 1;
        table := self.tables.index(idx - 1);
        @debug_log("Parser % % is running...\n", table.tag(), idx);
        idx = @try(run(table, t)) return;
    };
    @debug_log("Ran % tables.", table_count);
    (Ok = self.tree_stack[self.tree_stack.len - 1].unwrap())
}

// TODO: have a more generic thing for generating interfaces like this. i do it for Alloc as well. 
fn transducer(self: ~T, parent: ?*DynTransducer) DynTransducer #where = (
    parent = parent,
    data = T.Deref().raw_from_ptr(self), 
    vtable = @static(TransducerVTable) (perform_action = {
        f: @FnPtr(T, Str, []Str) Result(void, TransducerError) : perform_action;
        bit_cast_unchecked(@type f, @FnPtr(rawptr, Str, []Str) Result(void, TransducerError), f)
    }),
);

/* Pick up the children from the tree stack between left and right inclusively
 * (provided they are not nil) and build a tree with the given label
 * Store it in instance newTree so a reduce table can use it */
fn build_tree(self: *Parser, root_label: Str) VirtualTree = {
    ::if(RawList(VirtualTree));
    (Tree = (label = root_label, children = if self.left > self.right {
        empty()
    } else {
        self.take_children(self.left, self.right + 1)
    }))
}
    
/* Index is (+1,+2,+3... => label is in the token relative to the left-end; i.e., to the right of left end.
 * Index is (-1,-2,-3... => label is in the token relative to the right-end; i.e., to the left of right end.
 * Pick up the children from the tree stack between left and right inclusively
 * (provided they are not nil) and build a tree with the label in the token specified by index.
 * Store it in instance newTree so a reduce table can use it */
fn build_tree_from_index(self: *Parser, i: i64) VirtualTree = {
    children := self.take_children(self.left, self.right + 1);
    i := if(i > 0, => self.left + i - 1, => self.right + i + 1);
    label := self.token_stack[i].symbol;
    (Tree = (label = label, children = children))
}

fn take_children(self: *Parser, left: i64, right: i64) RawList(VirtualTree) = {
    children_opt := self.tree_stack.items().slice(left, right);
    children := list(VirtualTree, self.gpa);
    each children_opt { it |
        if it { it |
            children&.push(it[]);
        };
    };
    children.as_raw()
}

fn discard_scanner_token(self: *Parser) Result(void, TransducerError) = 
    self.scanner&.discard_token();

fn peek_scanner_token(self: *Parser) Token = {
    token := screen(self.keywords, self.scanner&.peek_token());
    @debug_log("\t\tpeekScannerToken for %", token&);
    token
}

ParserAttributeList :: @struct(is_read: bool, is_stack: bool, is_keep: bool, is_node: bool);

fn display(self: *ParserAttributeList, out: *List(u8)) void = {
    if !self.is_read {
        out.push_all("L");
        return();
    };
    out.push_all("R");
    if(self.is_stack, => out.push_all("S"));
    if(self.is_keep,  => out.push_all("K"));
    if(self.is_node,  => out.push_all("N"));
}

fn from_string(s: Str) ParserAttributeList = {
    self := ParserAttributeList.zeroed();
    for s { s |
        @switch(s) {
            @case("L".ascii()) => { self.is_read = false; };
            @case("R".ascii()) => { self.is_read = true; };
            @case("N".ascii()) => { self.is_node = true; };
            @case("S".ascii()) => { self.is_stack = true; };
            @case("K".ascii()) => { self.is_keep = true; };
            @default => @panic("invalid character % for attribute list", s);
        };
    };
    self
}

#use("@/lib/collections/map.fr");
