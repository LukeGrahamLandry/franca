C :: import("@/examples/import_c/lib.fr");

#use("@/backend/lib.fr");

Args :: @struct {
    target: QbeTargetEnv;
    input_path: []Str;
    output_path: Str;
    defines: []Ty(Str, Str) = empty();
    includes: []Str = empty();
    debug: Str = "";
};

main :: fn() void = {
    ::?Arch;
    cfg: Args = (
        target = (arch = query_current_arch(), os = query_current_os(), type = .Exe, exe_debug_symbol_table = true), 
        output_path = "./a.out",
        input_path = empty(),
    );
    defines := list(@type cfg.defines[0], temp());
    includes := list(Str, temp());
    args := cli_args();
    i := 0;
    while => i < args.len - 1 {
        continue :: local_return;
        i += 1;
        arg := args[i].str();
        if arg == "-o" {
            i += 1;
            @assert_lt(i, args.len, "expected path after -o");
            cfg.output_path = args[i].str();
            continue();
        };
        if arg == "-c" {  // TODO: this doesn't work because we only emit functions reachable from main()
            cfg.target.type = .Relocatable;
            continue();
        };
        if arg == "-r" {
            cfg.target.type = .JitOnly;
            continue();
        };
        if arg == "-frc_inlinable" {
            cfg.target.type = .CachedEarly;
            continue();
        };
        
        add_define :: fn(arg: Str) void => {
            key, value := @match(index_of(arg, "=".ascii())) {
                fn Some(sep) => (arg.slice(0, sep), arg.rest(sep + 1));
                fn None()    => (arg, "");
            };
            push(defines&, (key, value));
        };
        if arg == "-D" {
            i += 1;
            add_define(args[i].str());
            continue();
        };
        if arg.starts_with("-D") {
            add_define(arg.rest(2));
            continue();
        };
        
        if arg == "-I" {
            i += 1;
            includes&.push(args[i].str());
            continue();
        };
        if arg.starts_with("-I") {
            includes&.push(arg.rest(2));
            continue();
        };
        
        if arg.ends_with(".c") || arg.ends_with(".h") {
            @assert_eq(cfg.input_path.len, 0, "multiple inputs are not supported");
            cfg.input_path = @slice(arg);
            continue();
        };
        if arg.ends_with(".o") {
            @panic("je ne parle pas 'object file' (% as input) parce que je ne pas un fucking linker", arg);
        };
        if arg.ends_with(".fr") || arg == "franca" {
            continue();  // for running jitted
        };
        
        if arg == "-arch" {
            i += 1;
            b := args[i].str();
            ::?Arch;
            cfg.target.arch = or Arch.from_name(b) {
                @panic("Invalid value for -arch: %", b)
            };
            continue();
        };
        if arg == "-os" {
            i += 1;
            b := args[i].str();
            ::?Os;
            cfg.target.os = or Os.from_name(b) {
                @panic("Invalid value for -os: %", b)
            };
            continue();
        };
        if arg == "-d" {
            i += 1;
            cfg.debug = args[i].str();
            continue();
        };
        if arg == "--" {
            i = args.len;
            ::enum(@type cfg.target.type);
            @assert(cfg.target.type == .JitOnly, "found '--' to start callee parameters so expected '-r' to run a program");
            continue();
        }
        
        @panic("unknown argument '%'", arg);
    };
    if cfg.input_path.len == 0 {
        panic("no input specified");
    };
    cfg.defines = defines.items();
    cfg.includes = includes.items();
    or compile(cfg) { err |
        panic(err);
    };
}

fn compile(args: Args) Result(void, Str) = {
    // Instead of calling using c.define_macro, push(c.include_paths) directly, 
    // it's nicer to just generate a string and pass it in, so it can just be treated as an opaque blob in FrcModule.dep 
    // when deciding if a cache file can be reused. 
    src := create_single_source(args&);
    compile(src, args.target, args.debug, args.output_path)
}

fn compile(src: Str, target: QbeTargetEnv, debug: Str, output_path: Str) Result(void, Str) = {
    m := @uninitialized QbeModule;
    
    backend'init_module(m&, target);
    m&.set_debug_types(debug, true);
    
    // TODO: this should work single threaded as well but i think it doesn't -- Jun 7, 2025
    ctx: *C.Compile.CodegenShared = backend'worker_start(m&, general_allocator(), backend.worker_thread, true);
    
    c := C'Compile.Ctx.zeroed();
    import_c'init_c(c&, m&);
    c.emitter = (Some = ctx);
    c.enqueue_task = backend.worker_enqueue; 
    
    prog := @try(c&.import_c'compile_c("-", src)) return;
    ctx.backend'worker_join();
    c.arena_storage&.deinit();

    ::enum(@type m.goal.type);
    if m.goal.type == .JitOnly {
        // TODO: :paste from qbe_frontend.fr
        @if(is_linking_libc()) import("@/backend/meta/qbe_frontend.fr")'fill_from_libc(m&);
        m&.make_exec();
        f, _ := m&.get_addr(m&.intern("main")) 
            || @panic("missing function main()");
        f := assume_types_fn(Arg = Ty(i64, *CStr), Ret = i64, ptr = f);
        args := CStr.list(temp());
        args&.push(@as(CStr) "thisisjittedcodegoodluckwiththat.exe");
        args&.push(zeroed CStr);
        status := f(args.len - 1, args.maybe_uninit.ptr);
        @if(status != 0) @panic("Returned status %", status);
    } else {
        chunks := {m.target.finish_module}(m&);
        write_chunks_or_crash(output_path, chunks);
    }

    drop(m&);
    .Ok
}

create_single_source :: fn(args: *Args) Str = {
    src := u8.list(temp());
    each args.defines { it |
        @fmt(src&, "#define % %\n", it._0, it._1);
    };
    each args.includes { it |
        @fmt(src&, "#add_include_path \"%\"\n", it);
    };
    @fmt(src&, "#define __BASE_FILE__ \"%\"\n", args.input_path[0]);
    each args.input_path { it |
        @fmt(src&, "#include \"%\"\n", it);
    };
    src&.items()
}

#use("@/examples/import_c/ffi.fr");
