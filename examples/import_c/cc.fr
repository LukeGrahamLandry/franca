C :: import("@/examples/import_c/lib.fr");

#include_std("backend/lib.fr");
#include_std("compiler/worker.fr");
ENABLE_TRACY :: false;  // TODO: make worker something you can import nicely

// TODO: -r to just run jitted
Args :: @struct {
    target: QbeTargetEnv;
    input_path: Str;
    output_path: Str;
    defines: []Ty(Str, Str);
    debug: Str;
};

fn main() void = {
    import("@/lib/crash_report.fr")'hook_backtrace();
    
    ::?Arch;
    cfg: Args = (
        target = (arch = query_current_arch(), os = query_current_os(), type = .Exe), 
        input_path = "", 
        output_path = "./a.out",
        defines = empty(),
        debug = "",
    );
    defines := list(@type cfg.defines[0], temp());
    args := cli_args();
    i := 0;
    while => i < args.len - 1 {
        continue :: local_return;
        i += 1;
        arg := args[i].str();
        if arg == "-o" {
            i += 1;
            @assert_lt(i, args.len, "expected path after -o");
            cfg.output_path = args[i].str();
            continue();
        };
        if arg == "-c" {  // TODO: this doesn't work because we only emit functions reachable from main()
            cfg.target.type = .Relocatable;
            continue();
        };
        if arg == "-r" {
            cfg.target.type = .JitOnly;
            continue();
        };
        
        add_define :: fn(arg: Str) void => {
            key, value := @match(index_of(arg, "=".ascii())) {
                fn Some(sep) => (arg.slice(0, sep), arg.rest(sep + 1));
                fn None()    => (arg, "");
            };
            push(defines&, (key, value));
        };
        if arg == "-D" {
            i += 1;
            add_define(args[i].str());
            continue();
        };
        if arg.starts_with("-D") {
            add_define(arg.rest(2));
            continue();
        };
        if arg.ends_with(".c") || arg.ends_with(".h") {
            @assert_eq(cfg.input_path, "", "multiple inputs are not supported");
            cfg.input_path = arg;
            continue();
        };
        if arg.ends_with(".o") {
            @panic("je ne parle pas 'object file' (% as input) parce que je ne pas un fucking linker", arg);
        };
        if arg.ends_with(".fr") || arg == "franca" {
            continue();  // for running jitted
        };
        
        if arg == "-arch" {
            i += 1;
            b := args[i].str();
            ::?Arch;
            cfg.target.arch = or Arch.from_name(b) {
                @panic("Invalid value for -arch: %", b)
            };
            continue();
        };
        if arg == "-os" {
            i += 1;
            b := args[i].str();
            ::?Os;
            cfg.target.os = or Os.from_name(b) {
                @panic("Invalid value for -os: %", b)
            };
            continue();
        };
        if arg == "-d" {
            i += 1;
            cfg.debug = args[i].str();
            continue();
        };
        @panic("unknown argument '%'", arg);
    };
    if cfg.input_path == "" {
        panic("no input specified");
    };
    cfg.defines = defines.items();
    or compile(cfg) { err |
        panic(err);
    };
}

fn compile(args: Args) Result(void, Str) = {
    m := @uninitialized QbeModule;
    
    init(m&, 1.shift_left(25), libc_allocator, args.target, false, llvm_mc_dis);
    for args.debug { c |
        m.debug[c.zext()] = true;
    };
    m.libraries&.push("libc", general_allocator());  // :DefaultToLibc
    
    ctx: *CodegenShared = init(m&, libc_allocator, codegen_thread_main, true);
    
    c := C'Compile.Ctx.zeroed();
    C'init_ctx(c&, m&);
    each args.defines { it |
        c&.define_macro(it._0, it._1);
    };
    prog := @try(c&.compile_file(args.input_path)) return;
    emit_the_code(c&, ctx, prog);
    join_codegen_thread(ctx);
    
    if m.goal.type == .JitOnly {
        // TODO: :paste from qbe_frontend.fr
        @if(is_linking_libc()) import("@/backend/meta/qbe_frontend.fr")'fill_from_libc(m&);
        m&.make_exec();
        f, _ := m&.get_addr(m&.intern("main")) 
            || @panic("missing function main()");
        f := assume_types_fn(Arg = Ty(i64, *CStr), Ret = i64, ptr = f);
        args := CStr.list(temp());
        args&.push(@as(CStr) "thisisjittedcodegoodluckwiththat.exe");
        args&.push(zeroed CStr);
        status := f(args.len - 1, args.maybe_uninit.ptr);
        exit(status);
        
    }

    chunks := {m.target.finish_module}(m&);
    write_chunks_or_crash(args.output_path.maybe_borrow_cstr(temp()), chunks);
    drop(m&);
    .Ok
}
