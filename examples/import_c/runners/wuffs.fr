::import("@/examples/testing.fr");

fn main() void = {
    // TODO: compile the c compiler
    start := get_working_directory(temp()).items();
    cc_path := @tfmt("%/cc.out", start);
    root := fetch_or_crash("https://github.com/google/wuffs/archive/b1174882799a6d39796a14c9b28fb4977144a480.zip", 16126015, "2725c410cd083fbd76740936a3310fe9dd1c022ce701655e3819123e6fa8339c", "wuffs-b1174882799a6d39796a14c9b28fb4977144a480");
    root := @fmt_cstr("%/%", start, root);
    chdir(root) || @panic("failed to set cwd to %", root);
    ok, out, err := exec_and_catch("mkdir", @slice("bin"), todo_allocator); // ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡
    // TODO: without the `found :=` theres no error message for forgetting the `;` after `skip`
    skip :: @const_slice(
        "gzip.c", // test_wuffs_gzip_decode_infrequent_compaction: i=60: have "#deflate: bad distance", want "$base: short read"
    );
    // TODO: preload the wuffs lib file
    files := collect_with_extension("test/c/std", ".c") 
            || panic("didn't find tests. run from franca root dir and clone wuffs to target/wuffs");
    files&.unordered_retain(fn(it) => !skip.contains(it));
    run_tests_main(Str, files.items(), fn(a) => a[]) { file | 
        yield :: local_return;
        path := @tfmt("test/c/std/%", file[]);
        s := file[];
        s.len -= 2; // .c
        dest := @tfmt("bin/%.out", s);
        a := timestamp();
        {
            ok, out, err := exec_and_catch(cc_path, @slice(path, "-o", dest), todo_allocator);
            if !ok {
                yield(ok, out, err, "");
            };
        };
        b := timestamp();
        o, _, _ := exec_and_catch("chmod", @slice("+x", dest), todo_allocator);  // ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡
        @assert(o);
        ok, out, err := exec_and_catch(dest, empty(), todo_allocator);
        ok := ok && out.items().contains("cc      PASS (");
        (ok, out, err, @tfmt("%ms", b - a))
    };
}
