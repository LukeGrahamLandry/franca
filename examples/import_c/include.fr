// https://www.sigbus.info/n1570#7.1.2
// https://pubs.opengroup.org/onlinepubs/9699919799.2018edition/idx/head.html

// TODO: replace this with a common way of representing declarations that can be shared with franca. 
//       and then just write them in franca. do i care enough to make a serialized form so you don't 
//       need to bundle the franca compiler? or just generate c headers. but that's so ass. 

float :: """
    #pragma once
    
    #define DECIMAL_DIG 21
    #define FLT_EVAL_METHOD 0 // C11 5.2.4.2.2p9
    #define FLT_RADIX 2
    #define FLT_ROUNDS 1      // C11 5.2.4.2.2p8: to nearest
    
    #define FLT_DIG 6
    #define FLT_EPSILON 0x1p-23
    #define FLT_MANT_DIG 24
    #define FLT_MAX 0x1.fffffep+127
    #define FLT_MAX_10_EXP 38
    #define FLT_MAX_EXP 128
    #define FLT_MIN 0x1p-126
    #define FLT_MIN_10_EXP -37
    #define FLT_MIN_EXP -125
    #define FLT_TRUE_MIN 0x1p-149
    
    #define DBL_DIG 15
    #define DBL_EPSILON 0x1p-52
    #define DBL_MANT_DIG 53
    #define DBL_MAX 0x1.fffffffffffffp+1023
    #define DBL_MAX_10_EXP 308
    #define DBL_MAX_EXP 1024
    #define DBL_MIN 0x1p-1022
    #define DBL_MIN_10_EXP -307
    #define DBL_MIN_EXP -1021
    #define DBL_TRUE_MIN 0x0.0000000000001p-1022
    
    #define LDBL_DIG 15
    #define LDBL_EPSILON 0x1p-52
    #define LDBL_MANT_DIG 53
    #define LDBL_MAX 0x1.fffffffffffffp+1023
    #define LDBL_MAX_10_EXP 308
    #define LDBL_MAX_EXP 1024
    #define LDBL_MIN 0x1p-1022
    #define LDBL_MIN_10_EXP -307
    #define LDBL_MIN_EXP -1021
    #define LDBL_TRUE_MIN 0x0.0000000000001p-1022
""";

stdalign :: """
    #pragma once
    #define alignas _Alignas
    #define alignof _Alignof
    #define __alignas_is_defined 1
    #define __alignof_is_defined 1
""";

stdarg :: """
    #pragma once
    
    #if (__aarch64 && __macos) || __wasm32
        typedef struct { long __opaque[1]; } va_list;
        #define va_copy(dest, src) ((dest) = (src))
    #elif __x86_64
        typedef long va_list[3];
        #define va_copy(dest, src) ({ long *d = (dest); long *s = (src); d[0] = s[0]; d[1] = s[1]; d[2] = s[2]; 0; })
    #else
        typedef struct { long __opaque[3]; } va_list;
    #endif
    #define va_start(ap, ...) __builtin_va_start(&ap)
    #define va_end(ap)
    #define va_arg(ap, ty)  __builtin_va_arg(&ap, ty)
""";

stdbool :: """
    #pragma once
    #define bool _Bool
    #define true 1
    #define false 0
    #define __bool_true_false_are_defined 1
""";

stddef :: """
    #pragma once
    
    #define NULL ((void *)0)
    
    typedef unsigned long size_t;
    typedef long ptrdiff_t;
    typedef unsigned int wchar_t;
    typedef long max_align_t;
    
    #define offsetof(type, member) ((size_t)&(((type *)0)->member))
""";

stdnoreturn :: """
    #pragma once
    #define noreturn _Noreturn
""";

limits :: """
    #pragma once
    
    #define __2sMIN(max) ((-max)-1)
    
    #define INT8_MAX   127
    #define INT16_MAX  32767
    #define INT32_MAX  2147483647L
    #define INT64_MAX  9223372036854775807LL
    
    #define UINT8_MAX  255
    #define UINT16_MAX 65535
    #define UINT32_MAX 4294967295U
    #define UINT64_MAX 18446744073709551615ULL
    
    #define INT8_MIN   __2sMIN(INT8_MAX)
    #define INT16_MIN  __2sMIN(INT16_MAX)
    #define INT32_MIN  __2sMIN(INT32_MAX)
    #define INT64_MIN  __2sMIN(INT64_MAX)
    
    #define SCHAR_MIN  INT8_MIN
    #define SCHAR_MAX  INT8_MAX
    #define UCHAR_MAX  UINT8_MAX
    #define CHAR_MIN   INT8_MIN
    #define CHAR_MAX   INT8_MAX
    #define SHRT_MIN   INT16_MIN
    #define SHRT_MAX   INT16_MAX
    #define USHRT_MAX  UINT16_MAX
    #define INT_MIN    INT32_MIN
    #define INT_MAX    INT32_MAX
    #define UINT_MAX   UINT32_MAX
    #define LONG_MIN   INT64_MIN
    #define LONG_MAX   INT64_MAX
    #define ULONG_MAX  UINT64_MAX
    #define LLONG_MIN  INT64_MIN
    #define LLONG_MAX  INT64_MAX
    #define ULLONG_MAX UINT64_MAX
    #define SIZE_MAX   UINT64_MAX
    
    #define CHAR_BIT   8
    #define MB_LEN_MAX 4 /* TODO? */
""";

stdint :: """
    #pragma once
    typedef char  int8_t;
    typedef short int16_t;
    typedef int   int32_t;
    typedef long  int64_t;
    typedef unsigned char  uint8_t;
    typedef unsigned short uint16_t;
    typedef unsigned int   uint32_t;
    typedef unsigned long  uint64_t;
    typedef int64_t  intptr_t;
    typedef uint64_t uintptr_t;
    
    typedef uint64_t uintmax_t;
    // TODO: there are more

""";

string :: """
    #pragma once
    
    void *memmove(void *dest, void *src, size_t n);
    void *memset(void *s, int c, size_t n);
    void *memcpy(void *dest, void *src, size_t n);
    int   memcmp(void *s1, void *s2, size_t n);
    void *memchr(void *s, int c, size_t n);
    
    int    strcmp(char *s1, char *s2);
    int    strncmp(char *s1, char *s2, size_t n);
    size_t strlen(char *s);
    char  *strcpy(char *dest, char *src);
    char *strchr(char *s, int c);
    char *strpbrk(char *s1, char *s2);
    long strspn(char *s1, char *s2);
    int strcoll(char *s1, char *s2);
    char *strstr(char *s1, char *s2);
    
    char *strerror(int e);
// TOOD
""";

signal :: """
    #pragma once
    typedef int sig_atomic_t;
    
#if __macos
    typedef struct siginfo_t {
        int si_signo;
        int si_errno;
        int si_code;
        int si_pid;
        int si_uid;
        int si_status;
        void *si_addr;
        void *si_value;
        long si_band;
        long pad[7];
    } siginfo_t;

    void (*signal(int sig, void (*func)(int)))(int);
    typedef unsigned int sigset_t;
    struct sigaction {
        union {
            void (*sa_handler)(int);
            void (*sa_sigaction)(int, siginfo_t *, void *);
        };
        sigset_t sa_mask;
        int     sa_flags;
    };
    
    int	sigaction(int, struct sigaction *, struct sigaction *);
    
    #define	sigemptyset(set)	(*(set) = 0, 0)
    
    // TODO
    #define SA_SIGINFO 0x0040  
    
    // TODO
    #define SIG_DFL         (void (*)())0
    #define SIG_IGN         (void (*)())1
    #define SIG_HOLD        (void (*)())5
    #define SIG_ERR         ((void (*)())-1)
    
    // TODO
    #define SIGHUP  1 
    #define SIGINT  2
    #define SIGQUIT 3
    #define SIGILL  4
    #define SIGTRAP 5
    #define SIGABRT 6
    #define SIGPOLL 7
    #define SIGFPE  8
    #define SIGKILL 9
    #define SIGBUS  10
    #define SIGSEGV 11
    #define SIGSYS  12 
    #define SIGPIPE 13
    #define SIGALRM 14
    #define SIGTERM 15
    #define SIGURG  16
    #define SIGSTOP 17
    #define SIGTSTP 18
    #define SIGCONT 19
    #define SIGCHLD 20
    #define SIGTTIN 21
    #define SIGTTOU 22
    #define SIGIO   23
    #define SIGXCPU 24
    #define SIGXFSZ 25
    #define SIGVTALRM 26
    #define SIGPROF 27
    #define SIGWINCH 28
    #define SIGINFO 29
    #define SIGUSR1 30
    #define SIGUSR2 31
#endif
""";

stdlib :: """
    #pragma once
    #include <stddef.h>
    #include <limits.h>
    
    void *calloc(size_t nmemb, size_t size);
    void free(void *ptr);
    void *malloc(size_t size);
    void *realloc(void *ptr, size_t size);
    
    long strtol(const char *nptr, char **endptr, int base);
    int atoi(char *nptr);
    double strtod(char *nptr, char **endptr);
    
    int abs(int j);
    
    void abort();
    _Noreturn void exit(int status);
    
    char *getenv(char *name);
    int system(char *string);
    int mkstemp(char *template);
    
    #define    EXIT_FAILURE 1
    #define    EXIT_SUCCESS 0
// TOOD
""";

errno :: """
    #pragma once
    
    #if __macos
        #define __GET_ERRNO __error
    #elif __linux
        #define __GET_ERRNO __errno_location
    #endif
    
    extern int *__GET_ERRNO();
    #define errno (*__GET_ERRNO())
    
    // TODO: macos specific?
    #define EINTR 4 
    // TODO
""";

inttypes :: """
    #pragma once
    #include <stdint.h>
    
    #define PRId32 "d"
    #define PRIdLEAST32 "d"
    #define PRIdFAST32 "d"
    #define PRIi32 "i"
    #define PRIiLEAST32 "i"
    #define PRIiFAST32 "i"
    #define PRIo32 "o"
    #define PRIoLEAST32 "o"
    #define PRIoFAST32 "o"
    #define PRIu32 "u"
    #define PRIuLEAST32 "u"
    #define PRIuFAST32 "u"
    #define PRIx32 "x"
    #define PRIxLEAST32 "x"
    #define PRIxFAST32 "x"
    #define PRIX32 "X"
    #define PRIXLEAST32 "X"
    #define PRIXFAST32 "X"
    
    #define SCNd32 "d"
    #define SCNdLEAST32 "d"
    #define SCNdFAST32 "d"
    #define SCNi32 "i"
    #define SCNiLEAST32 "i"
    #define SCNiFAST32 "i"
    #define SCNo32 "o"
    #define SCNoLEAST32 "o"
    #define SCNoFAST32 "o"
    #define SCNu32 "u"
    #define SCNuLEAST32 "u"
    #define SCNuFAST32 "u"
    #define SCNx32 "x"
    #define SCNxLEAST32 "x"
    #define SCNxFAST32 "x"
    
    #define PRId64 "lld"
    #define PRIi64 "lli"
    #define PRIo64 "llo"
    #define PRIu64 "llu"
    #define PRIx64 "llx"
    #define PRIX64 "llX"
    
    #define PRId16 "hd"
    #define PRIo16 "ho"
    #define PRIu16 "hu"
    #define PRIx16 "hx"
    #define PRIX16 "hX"
    
    #define PRId8 "hhd"
    #define PRIo8 "hho"
    #define PRIu8 "hhu"
    #define PRIx8 "hhx"
    #define PRIX8 "hhX"

""";

stdio :: """
    #pragma once
    #include <stddef.h>
    #include <sys/types.h>
    #include <stdarg.h>
    
    typedef struct{} FILE;
    #define EOF (-1)
    int printf(char *format, ...); 
    
    int sprintf(char *s, const char *format, ...); 
    typedef struct {} FILE;
    int fflush(FILE *stream);
    int    fprintf(FILE *stream, char *fmt, ...);
    int snprintf(char *buf, long len, char *fmt, ...);
    int puts(char *s);
    int vprintf(char* fmt, va_list args);
    FILE *fopen(char *path, char* mode);
    long fread(void *ptr, long size, long nmemb, FILE *stream);
    int fclose(FILE *stream);
    int feof(FILE *stream);
    int ferror(FILE *stream);
    void clearerr(FILE *stream);
    #if __macos
        // TODO
        #define SEEK_SET 0 
        #define SEEK_CUR 1
        #define SEEK_END 2
    #endif
    int fseek(FILE *stream, long offset, int whence);
    int fseeko(FILE *stream, off_t offset, int whence); 
    long fwrite(void *ptr, long size, long nmemb, FILE *stream);
    int getc(FILE *stream);
    FILE *freopen(char *filename, char *mode, FILE *stream);
    char *fgets(char *s, int n, FILE *stream);
    
    FILE *tmpfile();
    int getc_unlocked(FILE *stream);
    int ungetc(int c, FILE *stream);
    
    FILE *popen(char *command, char *mode);
    int pclose(FILE *stream);
    void flockfile(FILE *file);
    void funlockfile(FILE *file);
    
    long ftell(FILE *stream);
    off_t ftello(FILE *stream);
    
    int fputs(char *s, FILE *stream);
    #if __macos
        extern FILE *__stdinp;
        extern FILE *__stdoutp;
        extern FILE *__stderrp;
        #define    stdin __stdinp
        #define    stdout __stdoutp
        #define    stderr __stderrp
    #elif __linux
        extern FILE *stdin;
        extern FILE *stdout;
        extern FILE *stderr;
    #endif
    
    #define    BUFSIZ    1024
    
    // TODO: macos specific?
    #define    _IOFBF    0
    #define    _IOLBF    1
    #define    _IONBF    2
    int setvbuf(FILE *stream, char *buf, int mode, size_t size);
    
    int remove(const char *filename);
    int rename(const char *old, const char *new);
""";

time :: """
    #pragma once
    #include <sys/types.h>
    
    struct timespec {
        time_t tv_sec;
        long tv_nsec;
    };
    
    typedef int clockid_t;
    #define CLOCK_MONOTONIC 6
    int clock_gettime(clockid_t clk_id, struct timespec *tp);
    
    #define CLOCKS_PER_SEC ((clock_t)1000000)
    clock_t clock();
    
    time_t time(time_t *out);
    double difftime(time_t time1, time_t time0);
    
    struct tm {
        int        tm_sec;
        int        tm_min;
        int       tm_hour;
        int       tm_mday;
        int        tm_mon;
        int       tm_year;
        int       tm_wday;
        int       tm_yday;
        int      tm_isdst;
        long    tm_gmtoff;
        char     *tm_zone;
    };
    
    struct tm *gmtime_r(time_t *timer, struct tm *result);
    struct tm *localtime_r(const time_t *timer, struct tm *result);
    size_t strftime(char *s, size_t maxsize, char *format, struct tm *timeptr);
    time_t mktime(struct tm *timeptr);
""";

locale :: """
#pragma once 

#define    LC_ALL        0
#define    LC_COLLATE    1
#define    LC_CTYPE    2
#define    LC_MONETARY    3
#define    LC_NUMERIC    4
#define    LC_TIME        5
#define    LC_MESSAGES    6
char *setlocale(int, char *);

struct lconv {
    char    *decimal_point;
    char    *thousands_sep;
    char    *grouping;
    char    *int_curr_symbol;
    char    *currency_symbol;
    char    *mon_decimal_point;
    char    *mon_thousands_sep;
    char    *mon_grouping;
    char    *positive_sign;
    char    *negative_sign;
    char    int_frac_digits;
    char    frac_digits;
    char    p_cs_precedes;
    char    p_sep_by_space;
    char    n_cs_precedes;
    char    n_sep_by_space;
    char    p_sign_posn;
    char    n_sign_posn;
    char    int_p_cs_precedes;
    char    int_n_cs_precedes;
    char    int_p_sep_by_space;
    char    int_n_sep_by_space;
    char    int_p_sign_posn;
    char    int_n_sign_posn;
};

struct lconv *localeconv();

""";
math :: """
    #pragma once 
    
    double ldexp(double x, int exp);
    double pow(double x, double y);
    double floor(double x);
    double frexp(double value, int *exp);
    double fmod(double x, double y);
    double fabs(double x);
    double sin(double x);
    double cos(double x);
    double tan(double x);
    double asin(double x);
    double acos(double x);
    double atan2(double x, double y);
    double ceil(double x);
    double sqrt(double x);
    double log(double x);
    double log2(double x);
    double log10(double x);
    double exp(double x);
    
    #define NAN (0.0/0.0)

    # define HUGE_VAL 1e500
""";
setjmp :: """
    #pragma once 
    
    // note: this is an array not an array inside a struct so it is always passed by reference. 
    typedef int jmp_buf[((14 + 8 + 2) * 2)];   // TODO: arm specific
    
    int setjmp(jmp_buf env);
    _Noreturn void longjmp(jmp_buf env, int val);
    int _setjmp(jmp_buf env);
    _Noreturn void _longjmp(jmp_buf env, int val);
""";

ctype :: """
    #pragma once
    
    int isalnum(int c);
    int isdigit(int c);
    int toupper(int c);
    int isxdigit(int c);
    int isspace(int c);
    int tolower(int c);
    int isalpha(int c);
    int iscntrl(int c);
    int isgraph(int c);
    int islower(int c);
    int ispunct(int c);
    int isupper(int c);
""";
dlfcn :: """
    #pragma once
    
    // TODO: macos specific?
    #define RTLD_LAZY    0x1
    #define RTLD_NOW    0x2
    #define RTLD_LOCAL    0x4
    #define RTLD_GLOBAL    0x8
    
    void *dlopen(char *file, int mode);
    int dlclose(void *handle);
    char *dlerror();
    void *dlsym(void *handle, char *name); 
    
    
""";
assert :: """
    #pragma once
    
    #ifdef NDEBUG
        #define assert(ignore) ((void)0)
    #else
        #define assert(cond) ({\
            int puts(char*); void exit(int);\
            if (!(cond)) { puts(#cond "\n"); exit(1); }\
            0;\
        })
    #endif
""";
sys :: @struct {
time :: """
    #pragma once
    #include <sys/types.h>

    struct timeval {
        time_t      tv_sec;
        suseconds_t tv_usec;
    };
    
    int gettimeofday(struct timeval *, void *);
""";

types :: """
    #pragma once

    typedef long   time_t;
    typedef int suseconds_t;
    typedef long off_t;
    typedef unsigned long clock_t;
""";
wait :: """
    #pragma once
    
    // TODO: macos specific
    #define _WSTOPPED       0177          
    #define _WSTATUS(x)     ((x) & _WSTOPPED)
    #define WSTOPSIG(x)     ((x) >> 8)
    #define WIFCONTINUED(x) (_WSTATUS(x) == _WSTOPPED && WSTOPSIG(x) == 0x13)
    #define WIFSTOPPED(x)   (_WSTATUS(x) == _WSTOPPED && WSTOPSIG(x) != 0x13)
    #define WIFEXITED(x)    (_WSTATUS(x) == 0)
    #define WIFSIGNALED(x)  (_WSTATUS(x) != _WSTOPPED && _WSTATUS(x) != 0)
    #define WTERMSIG(x)     (_WSTATUS(x))
    #define WEXITSTATUS(x)  ((x) >> 8)

""";
};

unistd :: """
    #pragma once
    
    // TODO: macos specific?
    #define F_OK 0
    #define X_OK (1<<0)
    #define W_OK (1<<1)
    #define R_OK (1<<2)
    int access(char *path, int mode);
    int close(int fildes);
    
    char *getcwd(char *buf, size_t len);
    int chdir(char* path);
    
    typedef int useconds_t;
    int usleep(useconds_t usec);
    
    int isatty(int fildes);
    // TODO
""";
