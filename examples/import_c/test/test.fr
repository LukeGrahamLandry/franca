C :: import("@/examples/import_c/lib.fr");

#use("@/backend/lib.fr");


fn main() void = {
    vtable := ImportVTable.zeroed();
    C'AstExternal'fill_backend_vtable(vtable&);
    import("@/lib/crash_report.fr")'hook_backtrace();
    run_tests(vtable&);
}

fn driver(vtable: *ImportVTable) void = {
    USE_HOST_BACKEND :: true;
    @if(USE_HOST_BACKEND) @eprintln(">>> USING HOST BACKEND");
    @if(USE_HOST_BACKEND, run_tests(vtable), main());
}

// TODO
// "alignof.c" needs backend support for _Alignas on globals
// "atomic.c" needs backend support for CAS
// "tls.c" implement _Thread_Local with env (higher level that uses franca's context?)
// "asm.c" not doing inline asm for now
// "builtin.c" __builtin_types_compatible_p (easy)
// extern.c
fn run_tests(vtable: *ImportVTable) void = {
    tests_folder :: "examples/import_c/test";
    
    // me when we live at the ugly factory
    // TODO: the obvious clean up here is i want a higher level thing that 
    //       lets you choose a host and target environment and run whatever 
    //       tests in that context. cause there's lots of ways to run things:  
    //       normal, rosetta, orb, blink, import_wasm, wasmtime 
    a := query_current_arch();
    i := 0;
    args := cli_args();
    Ctx :: @struct(vtable: *ImportVTable, a: Arch, runner := "");
    ctx: Ctx = (vtable = vtable, a = query_current_arch());
    while => i < args.len {
        if args[i] == "-w" {
            i += 1;
            ctx.a = .wasm32;
            ctx.runner = args[i].str();
        }
        i += 1
    }
    
    files := collect_with_extension(tests_folder, ".c") || panic("didn't find tests. run from franca root dir");
    run_tests_main_threaded(Ctx, Str, ctx, files.items(), fn(_, a) = a[], fn(ctx, file) = {
        yield :: return;
        path := @tfmt("%/%", tests_folder, file);
        child_args: []Str = empty();
        w := ctx.a == .wasm32;
        outpath := @tfmt("./target/ctest_%.%", chop_file_name(file[]), @if(!w, "out", "wasm"));
        exe_path := outpath;
        if w {
            exe_path = ctx.runner;
            child_args = @slice(outpath);
        };
        or compile_one_file(ctx.vtable, path, ctx.a, outpath) { err |
            yield(false, fixed_list(empty()), err.assume_owned(temp()), "");
        };
        ok, out, err := exec_and_catch(exe_path, child_args, temp());
        ok := ok && out.items().ends_with("OK\n");
        if ok {
            remove(outpath.as_cstr());
        };
        (ok, out, err, "")
    });
}

fn compile_one_file(vtable: *ImportVTable, path: Str, a: Arch, outpath: Str) Result(void, Str) = {
    m := @uninitialized QbeModule;
    
    m&.C'AstExternal'init_default_module_dyn(vtable, (arch = a, os = query_current_os(), type = .Exe));

    // TODO: this is ugly
    codegen_thread_main := ptr_cast_unchecked(@type vtable.codegen_thread_main, C'Compile'CodegenWorker, vtable.codegen_thread_main&)[];
    ctx: *C'Compile'CodegenShared = init_codegen_worker(m&, general_allocator(), codegen_thread_main, true);

    c := C'Compile.Ctx.zeroed();
    C'init_ctx(c&, m&);
    c.emitter = (Some = ctx);
    c.enqueue_task = bit_cast_unchecked(@type vtable.enqueue_task, @type c.enqueue_task, vtable.enqueue_task);
    c.include_paths&.push("examples/import_c/test"); // for the macro.c test (chibicc's 'make test' does this). 
    
    prog := @try(c&.compile_file(path)) return;
    join_codegen_thread(ctx);

    chunks := {m.target.finish_module}(m&);
    write_chunks_or_crash(outpath, chunks);
    drop(m&);
    c.arena_storage&.deinit();
    .Ok
}

#use("@/lib/sys/subprocess.fr");
#use("@/examples/testing.fr");
