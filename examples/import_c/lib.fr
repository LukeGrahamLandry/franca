ENABLE_TRACY :: false;

AstExternal :: import("@/compiler/ast_external.fr");
Tokens      :: import("@/examples/import_c/tokenize.fr");
Types       :: import("@/examples/import_c/type.fr");
Preprocess  :: import("@/examples/import_c/preprocess.fr");
#use("@/lib/jump.fr");
Compile :: import("@/examples/import_c/compile.fr");

SPAM :: false;

:: Compile'comptime_init_rules_table();

fn init_ctx(c: *Compile.Ctx, m: *QbeModule) void = {
    c.arena = temp();  // TODO
    c.current_fn = .None;
    c.brk_label = .None;
    c.cont_label = .None;
    c.scope = c.arena.box_zeroed(Compile.Scope);
    c.scope.vars = init(c.arena);
    c.scope.tags = init(c.arena);
    c.error_buf = list(temp());
    c.cond_incl = .None;
    c.macros = init(c.arena);
    c.pragma_once = init(c.arena);
    c.include_guards = init(c.arena);
    c.filename_cache = init(c.arena);
    c.include_paths = list(c.arena);
    c.hide_stack = list(c.arena);
    c.m = m;
    
    // you need this before calling parse() in compile because the preprocessor calls into const_expr
    {
        // :TopLevelFunction
        // :SLOW it's silly that top level constants need to be in a function context and we linearly scan it every time you have a numeric literal
        // this needs to be fixed so i don't have to cry when someone generates an array of binary data. 
        c.f = c.arena.box(Qbe.Fn);
        c.f.default_init(c.m);
        
        // HACK: need to be able to generate instructions because when you parse `&some_global`, 
        //       thats a valid constant expression but we issue a load for the bare identifier before
        //       recursing back up and just taking the lvalue. 
        c.f.rpo = new(0); // HACK
        c.f.start = c.new_block();// HACK
        c.f.start.ins = new(0); // HACK
        c.b = c.f.start; // HACK
        c.globals = Compile.Obj.ptr_from_int(0);
    };
    
    catch_call(c, void, => Preprocess'init_macros(c)).or(fn(e) => panic(e));
}

fn catch_call(c: *Compile.Ctx, $T: Type, $body: @Fn() T) Result(T, Str) #generic = {
    ::enum(WhichJump);
    return(@match(try(c.a_little_hidden_control_flow&)) {
        fn Try()   => (Ok = body());
        fn Catch() => (Err = c.error_buf.items());
    });
}

fn compile_file(c: *Compile.Ctx, path: Str) Result(*Compile.Obj, Str) = {
    catch_call(c, *Compile.Obj) {
        c.macro_base_file = path;
        tok := c.tokenize_file(path);
        tok  = c.Preprocess'preprocess(tok);
        c.parse(tok)
    }
}

fn emit_the_code(c: *Compile.Ctx, ctx: *CodegenShared, obj: *Compile.Obj) void = {
    :: ptr_utils(Compile.Obj);
    work := list(*Compile.Obj, temp());
    while => !obj.next.is_null() {
        @assert(!obj.is_tls, "Thread Local Storage is not supported");
        // TODO: support comiling to a lib
        is_root := /*@match(c.m.goal.type) {
            fn Exe() => */obj.name == "main";/*
            @default => !obj.is_static;
        };*/
        if obj.is_definition && is_root && !obj.sent_to_backend {
            obj.sent_to_backend = true;
            work&.push(obj);
            //@println("root %", obj.name);
        };
        obj = obj.next;
    };
    // TODO: don't add __FUNC__ as ref 
    // TODO: more depth first like franca does so you get better inlining
    // TODO: almost all the time is wuffs_testlib__initialize_global_xxx_slices
    while => work&.pop() { obj |
        work&.reserve(obj.refs.len);
        for obj.refs { ref |
            // TODO: instead of this you could just say the forward refs the definition. 
            while => !ref.def.is_null() {
                ref = ref.def;
            };
            if ref.is_definition && !ref.sent_to_backend {
                ref.sent_to_backend = true;
                work&.push(ref);
                //@println("add % (from %)", ref.name, obj.name);
            } else {
                //@println("skip % (from %)", ref.name, obj.name);
            };
        };
        
        entry := bouba_acquire(ctx, ctx.bouba_idx&);
        push_dynamic_context {
            context(DefaultContext)[].temporary_allocator = entry.arena&;
            id := obj.global_symbol.unwrap();
            if obj.is_function {
                f := obj.f;
                fill_lnk(f.lnk&, obj, ctx.m);
                entry.task = (Func = f);
            } else {
                entry.task = (AotVar = translate_data(ctx.m, obj));
            };
        };
        enqueue_task(ctx, entry);
    };
}

// TODO: do i need a way of asking for a certain alignment?
fn translate_data(m: *QbeModule, obj: *Compile.Obj) []Qbe.Dat = {
    out := Qbe.Dat.list(3, temp());
    lnk := temp().box(Qbe.Lnk);
    fill_lnk(lnk, obj, m);
    
    next_dat :: fn() => {
        out&.push(Qbe.Dat.zeroed());
        dat := out.index(out.len - 1);
        dat.lnk = lnk;
        dat
    };
    
    { dat := next_dat(); dat.type = .DStart; };
    
    if true {
        break :: local_return;
        
        ::ptr_utils(@type obj.rel[]);
        if obj.rel.is_null() {
            dat := next_dat(); 
            
            // TODO: stupid that it's slower to do `int a[9999] = {0}` than `int a[9999];`
            if obj.init_data.ptr.is_null() || is_all_zeroes(obj.init_data) {
                dat = dat.offset(-1); out.len -= 1;  // HACK
                dat.type = .DZeroInit; 
                dat.u.num = obj.ty.size.intcast();
                break();
            };
            @debug_assert_eq(obj.init_data.len, obj.ty.size.intcast(), "init_data wrong size for type.\n%", obj.init_data);
            dat.type = .DB; 
            dat.is_str = true;
            dat.u.str = obj.init_data;
            if obj.init_data_needs_null_terminator {
                dat := next_dat(); 
                dat.type = .DB; 
                dat.u.num = 0;
            };
            break();
        };
        @debug_assert_eq(obj.init_data.len, obj.ty.size.intcast(), "init_data wrong size for type.\n%", obj.init_data);
        pos := 0;
        rel := obj.rel;
        for_linked rel { rel |
            @assert_eq(rel.offset.mod(8), 0, "pointer in constant storage must be 8-byte aligned");
            before := obj.init_data.slice(pos, rel.offset.intcast());
            if before.len > 0 {
                dat := next_dat(); 
                dat.type = .DB; 
                dat.is_str = true;
                dat.u.str = before;
            };
            pos = rel.offset.intcast() + 8;
            dat := next_dat(); 
            dat.type = .DL; 
            dat.is_ref = true;
            dat.u.ref = (id = m.intern(rel.label.str()), off = rel.addend);
        };
        if pos < obj.ty.size.intcast() {
            dat := next_dat(); 
            dat.type = .DB; 
            dat.is_str = true;
            dat.u.str = obj.init_data.rest(pos);
        };
    };
    
    { dat := next_dat(); dat.type = .DEnd; };
    out.items()
}

#where(fn(T) => is_ptr(T) && has_field(Deref(T), @symbol next))
fn for_linked(head: ~T, $body: @Fn(it: T) void) void = {
    ::ptr_utils(Deref(T));
    while => !head.is_null() {
        body(head);
        head = head.next;
    };
}

fn fill_lnk(lnk: *Qbe.Lnk, obj: *Compile.Obj, m: *QbeModule) void = {
    lnk.export = !obj.is_static;
    lnk.id = obj.global_symbol || m.mangle(obj);
}

fn mangle(m: *QbeModule, obj: *Compile.Obj) u32 = {
    ::ptr_utils(@type obj.tok[]);
    name := obj.name.str();
    if obj.is_static && !obj.tok.is_null() {
        name = @tfmt("%@%", name, obj.tok.file.name); // not very rigorous
    };
    m.intern(name)
}

::enum(Compile.NodeKind);

::ptr_utils(Tokens.Token); ::enum(Tokens.TokenKind);

// TODO: move this and call it from elsewhere
fn new_phi(f: *Qbe.Fn, b: *Qbe.Blk, k: Qbe.Cls) *Qbe.Phi = {
    prev := b.phi;
    b.phi = temp().box(Qbe.Phi); 
    b.phi[] = (
        cls = k, 
        to = f.newtmp("c", k),
        narg = 0,
        blk = new(0),
        arg = new(0),
        link = prev,
    );
    b.phi
}

#use("@/lib/collections/map.fr");
