ENABLE_TRACY :: false;

AstExternal :: import("@/compiler/ast_external.fr");
Tokens      :: import("@/examples/import_c/tokenize.fr");
Types       :: import("@/examples/import_c/type.fr");
Preprocess  :: import("@/examples/import_c/preprocess.fr");
#use("@/lib/jump.fr");
Compile :: import("@/examples/import_c/compile.fr");

SPAM :: false;

:: Compile'comptime_init_rules_table();

fn init_ctx(c: *Compile.Ctx, m: *QbeModule) void = {
    c.arena = temp();  // TODO
    c.current_fn = .None;
    c.emitter = .None;
    c.brk_label = .None;
    c.cont_label = .None;
    c.scope = c.arena.box_zeroed(Compile.Scope);
    c.scope.vars = init(c.arena);
    c.scope.tags = init(c.arena);
    c.error_buf = list(temp());
    c.cond_incl = .None;
    c.macros = init(c.arena);
    c.pragma_once = init(c.arena);
    c.include_guards = init(c.arena);
    c.filename_cache = init(c.arena);
    c.include_paths = list(c.arena);
    c.hide_stack = list(c.arena);
    c.tentative = init(c.arena);
    c.m = m;
    c.franca = .None;
    c.franca_namespace = NOSCOPE;
    
    // you need this before calling parse() in compile because the preprocessor calls into const_expr
    {
        // :TopLevelFunction
        // :SLOW it's silly that top level constants need to be in a function context and we linearly scan it every time you have a numeric literal
        // this needs to be fixed so i don't have to cry when someone generates an array of binary data. 
        c.f = c.arena.box(Qbe.Fn);
        c.f.default_init(c.m);
        
        // HACK: need to be able to generate instructions because when you parse `&some_global`, 
        //       thats a valid constant expression but we issue a load for the bare identifier before
        //       recursing back up and just taking the lvalue. 
        c.f.rpo = new(0); // HACK
        c.f.start = c.new_block();// HACK
        c.b = c.f.start; // HACK
        c.globals = Compile.Obj.ptr_from_int(0);
    };
    
    catch_call(c, void, => Preprocess'init_macros(c)).or(fn(e) => panic(e));
}

fn catch_call(c: *Compile.Ctx, $T: Type, $body: @Fn() T) Result(T, Str) #generic = {
    ::enum(WhichJump);
    return(@match(try(c.a_little_hidden_control_flow&)) {
        fn Try()   => (Ok = body());
        fn Catch() => (Err = c.error_buf.items());
    });
}

fn compile_file(c: *Compile.Ctx, path: Str) Result(*Compile.Obj, Str) = {
    catch_call(c, *Compile.Obj) {
        c.macro_base_file = path;
        tok := c.tokenize_file(path);
        tok  = c.Preprocess'preprocess(tok);
        c.parse(tok)
    }
}

fn yield(c: *Compile.Ctx, obj: *Compile.Obj) void = {
    @assert(!obj.yielded);
    obj.yielded = true;
    if c.save_type_info {
        import("@/examples/import_c/ffi.fr")'export(c, obj);
    };
    if c.emitter { _ |
        // TODO: "this makes ffi take 180ms longer to compile because it doesn't go through a vtable"
        emit_one(c, obj);
    };
}

fn emit_the_code(c: *Compile.Ctx, ctx: *Compile.CodegenShared, obj: *Compile.Obj) void = {
    if c.emitter { it |
        it.join_codegen_thread();
    };
}

fn emit_one(c: *Compile.Ctx, obj: *Compile.Obj) void = {
    ctx := c.emitter.unwrap();
    @assert(obj.yielded);
    entry := bouba_acquire(ctx, ctx.bouba_idx&);
    push_dynamic_context {
        context(DefaultContext)[].temporary_allocator = entry.arena&;
        id := obj.global_symbol.unwrap();
        if obj.is_function {
            f := obj.f;
            fill_lnk(f.lnk&, obj, ctx.m);
            entry.task = (Func = f);
        } else {
            entry.task = (AotVar2 = translate_data(ctx.m, obj));
        };
    };
    enqueue_task(ctx, entry);
}

// TODO: implement _Alignas
fn translate_data(m: *QbeModule, obj: *Compile.Obj) []Dat2 = {
    ::ptr_utils(@type obj.rel[]);
    no_init_data := obj.init_data.ptr.is_null();
    // can't just be obj.ty.size because it might have a flexible array member
    total_size   := if(no_init_data, => obj.ty.size.intcast(), => obj.init_data.len);
    is_zeroed    := no_init_data || is_all_zeroes(obj.init_data);
    
    out := Dat2.list(1, temp());
    out&.push(
        export = !obj.is_static,
        id = obj.global_symbol || m.mangle(obj),
        template = @if(is_zeroed, (Zeroes = total_size), (Bytes = obj.init_data)),
        relocations = ({
            relocs := Dat2.Reloc.list(temp());
            for_linked obj.rel { rel |
                relocs&.push(
                    off = rel.offset.bitcast(),
                    id = rel.obj.global_symbol.unwrap(),
                    addend = rel.addend,
                );
            };
            relocs.items()
        }),
    );    
    out.items()
}

#where(fn(T) => is_ptr(T) && has_field(Deref(T), @symbol next))
fn for_linked(head: ~T, $body: @Fn(it: T) void) void = {
    ::ptr_utils(Deref(T));
    while => !head.is_null() {
        body(head);
        head = head.next;
    };
}

fn fill_lnk(lnk: *Qbe.Lnk, obj: *Compile.Obj, m: *QbeModule) void = {
    lnk.export = !obj.is_static;
    lnk.id = obj.global_symbol || m.mangle(obj);
}

fn mangle(m: *QbeModule, obj: *Compile.Obj) Qbe.Sym = {
    ::ptr_utils(@type obj.tok[]);
    name := obj.name;
    if obj.is_static && !obj.tok.is_null() {
        // also doesn't work because we call before deciding if it's static sometimes
        //name = @tfmt("%@%", name, obj.tok.file.name); // not very rigorous
    };
    m.intern(name)
}

::enum(Compile.NodeKind);

::ptr_utils(Tokens.Token); ::enum(Tokens.TokenKind);

#use("@/lib/collections/map.fr");
