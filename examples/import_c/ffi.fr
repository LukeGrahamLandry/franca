/// Here we translate the c compiler's representation to the franca compiler's representation. 
/// This allows franca programs to use our types/functions/variables. 

//
// This mostly works: you can seamlessly use a library written in c without writing function/struct 
// signetures and call that code at comptime or runtime just like it were written in franca. 
// TODO: However, there are still some glaring problems: 
// - you can only import #libc things
// - should allow the c code to call franca without retyping signatures but that's hard
//   because the franca compiler wants to do everything out of order and the c compiler 
//   wants everything forward declared. you can't even parse until you know the type names. 
// - need more control over imports. should be able to redirect malloc to your own allocator, 
//   but you don't want to require typing out all the names. 
// - translate bit fields to @bit_fields (and make sure their abi matches). 
// - cross compilation doesn't work because my whole compilation model relies on being strict 
//   about only having target splits on a function call boundary, but c programs just 
//   use the preprocessor to change things at random. so i'm forced to compile everything twice. 
// - copying between modules in emit_ir is much less confusing than what i was trying to do before,
//   but feels wasteful. especially if i end up recompiling the thing anyway for cross compile. 
// - either way, re-copying the Typ-s every function is slow, so fix that.  
// - need to let you access data variables
// - rename materialize_in_jit_address_space but also nobody calls it now. until i fix ^ 
// - you can't access preprocessor stuff. if constants are #define instead of enum, we don't export them. 
//   or something like tracy that defines the public nice names as macros, you can't call that from franca. 
// - need to keep enum names and translate enum types to @enum
// - it would save a lot of effort if the c compiler used the franca data structures 
//   for everything. but then there's an awkward coupling. I like that this also works 
//   as a stand alone c compiler so it feels like a more impressive demo of "hey this is
//   just a normal program that we happen to run at comptime to generate some code sometimes". 
// - put `static` functions in an inner namespace for each file so we can mimic seperate compilation units
// - have a thing for removing prefixes since we have a higher level idea of scopes
// - franca can't have a function pointer to a #c_variadic function so you can only have 
//   (...) as a direct export or used internally. can't have a * to one in struct, param, etc.
// - currently i only export typedefs. need to be able to use things without like `struct Foo` or whatever
// - things from other header files are exported too too which might not be what you want. 
//   like what if you want to use a library that typedef-ed u32 for themselves? now you can't #use it. that sucks. 
// 

// TODO: don't make src be comptime (need to be able make a new scope)  :FfiNamespaceHacks
fn include($src: Str) ScopeId = {
    namespace := scope_of(Type, @struct(___HACK :: 123));
    fr := current_compiler_context();
    include(fr, namespace, src);
    namespace
}

fn enable_franca_ffi(c: *Ctx, fr: CompCtx, namespace: ScopeId) void = {
    c.franca = (Some = fr);
    c.preserve_franca_env = true;
    c.franca_namespace = namespace;
}

// GARBAGE: for now all the import_c stuff is very experimental. the api will eventually get less painful. 
fn include(fr: CompCtx, namespace: ScopeId, c_source: Str) void = {
    m := fr.get_alloc().box(QbeModule);
    c := C'Compile.Ctx.zeroed();
    // :HardcodeOs
    init_default_module_dyn(m, fr.vtable, (arch = .aarch64, os = .macos, type = .JitOnly));
    C'init_ctx(c&, m);
    c&.enable_franca_ffi(fr, namespace);
    
    push_dynamic_context { // TODO: why am i doing this. just mark temp, oh but it's confusing how long it needs to live because the fns go in temp
        a: ArenaAlloc = init(page_allocator, 10000);  // :Leak
        context(DefaultContext)[].temporary_allocator = a&;
        objs := catch_call(c&, *C.Compile.Obj) {
            src: List(u8) = assume_owned(c_source, temp());
            tok := c&.tokenize_string("import_cTODO", src&);
            tok  = c&.C'Preprocess'preprocess(tok);
            c&.parse(tok)
        }
        objs := or objs { err | 
            panic(err)
        }
        
        for_linked objs { obj |
            if obj.is_function && obj.is_definition {
                _ := export_func(c&, obj);
            }
        }
        
        // add all the typedefs to the scope
        for_linked c.scope { sc |
            each sc.vars& { name, value |
                if !value.type_def.is_null() {
                    type := export_type(c&, value.type_def, false);
                    fr.add_to_scope(namespace, fr.intern_string(name), Type, type);
                }
                obj := value.var;
                // TODO: should make this work
                //if !obj.is_null() && !obj.is_function && obj.is_definition {
                //    id       := export_data(c&, obj);
                //    type     := export_type(c&, c&.pointer_to(obj.ty), false);
                //    jit_addr := fr'vtable'materialize_in_jit_address_space(fr.data, QbeModule.raw_from_ptr(m), id);
                //    fr.add_to_scope(namespace, fr.intern_string(name), type, jit_addr);
                //};
            }
        }
    }
}

fn export_type(c: *Ctx, type: *CType, decay_arrays: bool) Type = {
    fr := c.franca.unwrap();
    use_cache := !(decay_arrays && type.kind == .TY_ARRAY);
    if(type.franca != UnknownType && use_cache, => return(type.franca));
    nominal := @is(type.kind, .TY_STRUCT, .TY_UNION, .TY_ENUM);
    
    ::if(Type);
    id := if !nominal {
        info := c.export_type_info(type, decay_arrays);
        id := fr.intern_type(info);
        if use_cache {
            type.franca = id;
        }
        id
    } else {
        id := fr.intern_type(.Placeholder);  // avoid cycles
        if use_cache {
            type.franca = id;
        }
        info := c.export_type_info(type, decay_arrays);
        fr.get_type(id)[] = info;  // go directly to jail do not pass go do not collect two hundred dollars 
        id
    }
    
    // TODO: give it the name as well? 
    // TODO: give it the TypeMeta
    id
}

fn export_type_info(c: *Ctx, type: *CType, decay_arrays: bool) TypeInfo = {
    fr := c.franca.unwrap();
    is_int := @is(type.kind, .TY_CHAR, .TY_SHORT, .TY_INT, .TY_LONG);
    if(is_int, => return(Int = (bit_count = type.size.zext() * 8, signed = !type.is_unsigned)));
    
    @match(type.kind) {
        fn TY_VOID()    => .void;
        fn TY_BOOL()    => .Bool;
        fn TY_FLOAT()   => .F32;
        fn TY_DOUBLE()  => .F64;
        fn TY_LDOUBLE() => .F64;
        // TODO: don't throw away the names 
        fn TY_ENUM() => (Int = (bit_count = 32, signed = false));
        fn TY_PTR() => @match(type.base.kind) {
            fn TY_VOID() => .VoidPtr;
            fn TY_FUNC() => {
                fn_type := c.export_type(type.base, false);
                fn_type := fr.get_type(fn_type)[].Fn;
                (FnPtr = (ty = fn_type, cc = .CCallReg))
            }
            @default => (Ptr = c.export_type(type.base, false));
        };
        // C arrays decay to pointers when passed to functions, so this needs to be 
        // treated differently depending if it's inside a struct body. 
        fn TY_ARRAY() => {
            base := c.export_type(type.base, decay_arrays);
            ::if(TypeInfo);
            if(decay_arrays, => (Ptr = base)) {
                (Array = (inner = base, len = type.array_len.bitcast()))
            }
        }
        fn TY_VLA()    => (Ptr = c.export_type(type.base, false));
        fn TY_STRUCT() => c.export_members(type, false);
        fn TY_UNION()  => c.export_members(type, true);
        fn TY_FUNC() => {
            // TODO: track no_return
            
            args := Type.list(fr.get_alloc());  // TODO: cap
            for type.params { par | 
                args&.push(c.export_type(par, true));
            };
            
            (Fn = (
                arg = fr.tuple_of(args.items()), 
                ret = c.export_type(type.return_ty, false), 
                arity = @if(type.params.len == 0, 1, args.len.trunc()),
            ))
        }
        @default => panic("TODO: import_c export missing type");
    }
}

fn export_members(c: *Ctx, type: *CType, is_union: bool) TypeInfo = {
    fr := c.franca.unwrap();
    fields := Field.list(fr.get_alloc());  // TODO: cap
    for_linked type.members { mem |
        fields&.push(
            name = fr.intern_string(mem.name.str()),
            ty = c.export_type(mem.ty, false),
            byte_offset = mem.offset.zext(), 
            default = Var.zeroed(), 
            nullable_tag = Annotations.ptr_from_int(0),
        );
    };
    (Struct = (fields = fields.as_raw(), layout_done = true, is_tuple = false, is_union = is_union, scope = NOSCOPE))
}

// TODO: allow passing in a namespace to lookup external functions in (and don't auto recurse upward) 
// so you can tell if you update a library and it starts calling weird shit suddenly or you can give it your
// own versions that limit its access to the file system or whatever.  
fn export_func(c: *Ctx, obj: *Obj) FuncId = {
    @debug_assert(obj.is_function, "expected func");
    if(obj.franca_f != FuncId.zeroed(), => return(obj.franca_f));
    fr := c.franca.unwrap();
    f_ty := c.export_type(obj.ty, false);
    fn_type := fr.get_type(f_ty)[].Fn;
    f := obj.f;
    
    id := obj.global_symbol.unwrap();
    n := if obj.is_definition {
        obj.f.lnk.id = id;
        obj.f.ncon.intcast()
    } else {
        0
    };
    data  := temp().alloc_zeroed(BakedVarId, n);
    funcs := temp().alloc_zeroed(FuncId, n);
    
    // TODO: this confuses it?  `tried to emit function with $const parameter`  -- Apr 14, 2025
    //if obj.name.str() == "wuffs_base__image_decoder__set_quirk" {
    //    printfn(f, f.globals.debug_out);
    //}
    
    name := fr.intern_string(obj.name.str());
    loc := Span.zeroed();  // TODO: translate this too!
    func := empty_fn(fn_type, name, loc);
    
    // TODO: Later i think it would be nice to preserve the argument names. 
    // For now i need this anyway for emit_par_instructions so you can inline through bounce_body when it's an import. 
    args := fr.arg_types(fn_type.arg);
    fill_bindings(func&, fr, args);
    func&.set_flag(.ResolvedSign);
    func&.set_flag(.ResolvedBody);
    
    if obj.ty.is_variadic {
        func&.set_flag(.CVariadic);
    };
    
    if obj.is_definition {
        func.body = (Ir = (fn_internal = Qbe.Fn.int_from_ptr(obj.f), data = data, funcs = funcs));
        func&.set_flag(.EnsuredCompiled);
    } else {
        func&.set_flag(.BodyIsSpecial);
        a := list(Annotation, fr.get_alloc());
        xxx: FatExpr = (expr = (Value = (bytes = (Small = (0, 0)), coerced = false)), loc = loc, done = true, ty = void);  // :get_or_create_type
        a&.push(name = fr.intern_string("libc"), args = xxx);  // TODO: don't assume libc
        func.annotations = a.as_raw();
    };
    fid := fr.intern_func(func&);
    func := fr.get_function(fid);
    if obj.is_definition && !(c.franca_namespace == NOSCOPE) {
        fr.add_to_scope(c.franca_namespace, name, f_ty, fid);
    }
    obj.franca_f = fid;  // save this before translating the callgraph so we don't get stuck in cycles
    
    if obj.is_definition {
        enumerate f.con.slice(0, f.ncon.intcast()) { i, con |
            if con.type == .CAddr {
                ref := find_ref(obj, con.sym.id);
                if ref.is_function {
                    funcs[i] = c.export_func(ref);
                    // TODO: decide callee vs mutual callee more intelligently? 
                    func.callees&.push(funcs[i], fr.get_alloc());
                } else {
                    data[i] = c.export_data(ref);
                }
            }
        };
    }
    fid
}

find_ref :: fn(obj: *Obj, id: u32) *Obj = {
    for obj.refs { ref |
        if !ref.is_local && ref.global_symbol.unwrap() == id {
            while => !ref.def.is_null() {
                ref = ref.def;
            }
            return ref;
        }
    }
    @panic("couldn't find ref for id=%", id)
}

// TODO: need to return BakedVarId to support aot instead of specifically poking it into the backend module we have
// TODO: want to have it work like callees where you only actually emit it to the module when you know it's reachable
fn export_data(c: *Ctx, obj: *Obj) BakedVarId = {
    @debug_assert(!obj.is_function && obj.is_definition, "want data def %", obj.name.str());
    fr := c.franca.unwrap();
    ::AutoEq(BakedVarId); ::RefEq(BakedVarId);
    if(obj.franca_v != BakedVarId.zeroed(), => return(obj.franca_v));
    obj.franca_v = fr'vtable'reserve_baked(fr.data, .None);
    dest := fr.get_baked(obj.franca_v);
    
    ::ptr_utils(@type obj.rel[]);
    no_init_data := obj.init_data.ptr.is_null();
    // can't just be obj.ty.size because it might have a flexible array member
    total_size   := if(no_init_data, => obj.ty.size.intcast(), => obj.init_data.len) + int(obj.init_data_needs_null_terminator);
    is_zeroed    := no_init_data || is_all_zeroes(obj.init_data);
    dest[] = (
        template = @if(is_zeroed, (Zeroes = total_size), (Bytes = {
            if obj.init_data_needs_null_terminator {
                d := fr.get_alloc().alloc(u8, obj.init_data.len + 1);
                d.slice(0, d.len - 1).copy_from(obj.init_data);
                d
            } else {
                obj.init_data
            }
        })),
        relocations = ({
            relocs := BakedReloc.list(fr.get_alloc());
            for_linked obj.rel { rel |
                @assert_eq(rel.addend, 0, "TODO: import_c: support addend");
                relocs&.push(
                    off = rel.offset.bitcast(),
                    target = @if(rel.obj.is_function, (FuncId = c.export_func(rel.obj)), (BakedVarId = c.export_data(rel.obj))),
                );
            };
            relocs.items()
        }),
        loc = zeroed Span, // TODO
    );
    obj.franca_v
}

#use("@/compiler/ast_external.fr");
C :: import("@/examples/import_c/lib.fr");
Ctx :: C.Compile.Ctx;
Obj :: C.Compile.Obj;
CType :: C.Types.CType;
