// https://www.mattkeeter.com/projects/prospero
// They've got some ssa programs that represent pretty pictures. 
// "Assembly language for shapes" is such a cool idea.
// - at comptime, fetch thier examples and parse them into a simple Program struct to embed in the exe
// - at runtime, generate ir and use my jit to compile the functions
// - call the function for each pixel and write out a ppm image
// note: only the 2d examples work 
// TODO: i want to make this a self contained example that doesn't need to fetch thier program. 
//       so i guess i need to figure out how to make sdf fonts and convert those to ssa? 

AstExternal :: import("@/compiler/ast_external.fr");
#include_std("backend/lib.fr");
#include_std("compiler/worker.fr");

fn main() void = {
    vtable := ImportVTable.zeroed();
    AstExternal'fill_backend_vtable(vtable&);
    import("@/lib/crash_report.fr")'hook_backtrace();
    impl(vtable&);
}

fn driver(vtable: *ImportVTable) void = 
    impl(vtable);

fn impl(v: *ImportVTable) void = {
    programs := :: collect_examples(ast_alloc());
    m := zeroed QbeModule;
    init_default_module_dyn(m&, v, (type = .JitOnly, os = query_current_os(), arch = query_current_arch()));
    do_imports(m&);
    s := "prospero";
    p := programs.find(fn(it) => it.name == s)
        || @panic("missing model '%'", s);
    
    f0 := temp().box(Qbe.Fn);
    default_init(f0, m&);
    compile_program(f0, p);
    n := 64+3+p.o.len;
    top := compile(dup(f0), p.name);
    s: RecState = (
        f0 = f0,
        vals = temp().alloc(f32, n),
        scratch = temp().alloc(Interval, n),
        pixels = init_bitset(1024 * 1024),
        top = top,
    );
    i: Interval = (min = -1.0, max = 1.0);
    quad_rec(s&, (x = i, y = i), 6);
    @eprintln("%/%", s.yes, s.no+s.yes);
    
    out := u8.list(temp());
    draw(out&, s.pixels);
    print(out.items());
}

Interval2 :: @struct {
    x: Interval;
    y: Interval;
}

RecState :: @struct {
    f0: *Qbe.Fn;
    pixels: Qbe.BSet;
    vals: []f32;
    scratch: []Interval;
    yes := 0;
    no := 0;
    top: F;
}

fn quad_rec(s: *RecState, int: Interval2, depth: i64) void = {
    n: Interval = (min = NaN, max = NaN);
    known := optimise_intervals(s.f0, @slice(int.x, int.y, n), s.scratch, false);
    if !known.is_nan() {
        if known.min > 0.0  {
            iter_intervals(int.x, int.y) { x, y, i |
                s.pixels&.bsset(i);
            }
        };
        if (known.max < 0.0 || known.min > 0.0) {
            s.yes += 1;
            return();
        };
    }

    if depth == 0 {
        s.no += 1;
        if false {
            iter_intervals(int.x, int.y) { x, y, i |
                hit := interpret(s.f0, s.vals, x, y) > 0.0;
                if hit {
                    s.pixels&.bsset(i);
                };
            };
        } else {
            if false {
                f := dup(s.f0);
                optimise_intervals(f, @slice(int.x, int.y, n), s.scratch, true);
                
                m := f.globals;
                code := m.segments&.index(.Code);
                code.align_to(page_size());
                prev := code.next;
                mark := mark_temporary_storage();
                
                name := @tfmt("%", timestamp());
                f := compile(f, name);
                draw(s.pixels, f, int.x, int.y);
                
                prot := bit_or(@as(i64) MapProt.Write, @as(i64) MapProt.Read);
                mprotect(u8.raw_from_ptr(prev), ptr_diff(prev, code.next), prot).unwrap(); 
                code.next = prev;
                m.start_of_writable_code = prev;
            } else {
                draw(s.pixels, s.top, int.x, int.y);
            }
        }
        return();
    }

    for_quads int { it |
        quad_rec(s, it, depth - 1);
    };
}

fn for_quads(int: Interval2, $do: @Fn(i: Interval2) void #duplicated) void = {
    wx := abs(int.x.max - int.x.min) / 2;
    wy := abs(int.y.max - int.y.min) / 2;
    do(x = (min = int.x.min, max = int.x.min + wx), y = (min = int.y.max - wy, max = int.y.max));
    do(x = (min = int.x.max - wx, max = int.x.max), y = (min = int.y.max - wy, max = int.y.max));
    do(x = (min = int.x.min, max = int.x.min + wx), y = (min = int.y.min, max = int.y.min + wy));
    do(x = (min = int.x.max - wx, max = int.x.max), y = (min = int.y.min, max = int.y.min + wy));
}

F :: @FnPtr(x: f64, y: f64, z: f64) f64;

fn compile(f: *Qbe.Fn, name: Str) F = {
    m := f.globals;
    f.lnk.id = m.intern(name);
    run_qbe_passes(f);
    emit_suspended_inlinables(m);
    make_exec(m);
    f := get_addr(m, name).unwrap();
    f := bit_cast_unchecked(rawptr, F, f);
    f
}

fn maybe_fill(f: *Qbe.Fn, int: Interval2, pixels: Qbe.BSet) bool = {
    r := f.start.jmp.arg;
    if(r.rtype() != .RCon, => return(false));
    hit := f.get_constant(r)[].bits.d > 0.0;
    if hit {
        iter_intervals(int.x, int.y) { x, y, i |
            pixels&.bsset(i);
        }
    };
    true
}

fn dup(f0: *Qbe.Fn) *Qbe.Fn = {
    f := temp().box(Qbe.Fn);
    f[] = f0[];
    f.start = temp().box(Qbe.Blk);
    f.start[] = f0.start[];
    f.start.ins = new(f.start.nins.zext());
    f.tmp = new(f.ntmp.zext());
    f.con = new(f.ncon.zext());
    f.tmp.slice(0, f.ntmp.zext()).copy_from(f0.tmp.slice(0, f.ntmp.zext()));
    f.con.slice(0, f.ncon.zext()).copy_from(f0.con.slice(0, f.ncon.zext()));
    f.start.ins.slice(0, f.start.nins.zext()).copy_from(f0.start.ins.slice(0, f.start.nins.zext()));
    f
}

fn interpret(f: *Qbe.Fn, vals: []f32, x: f64, y: f64) f32 = {
    vals[64+0] = x.cast();
    vals[64+1] = y.cast();
    for_insts_forward f.start { i |
        @match(i.op()) {
            fn copy() => @match(rtype(i.arg&[0])) {
                fn RTmp() => { vals[i.to.val()] = vals[i.arg&[0].val()]; }
                fn RCon() => { vals[i.to.val()] = f.get_constant(i.arg&[0])[].bits.d.cast(); }
                @default => ();
            };
            fn par() => ();
            @default => {
                a: u32 = vals[i.arg&[0].val()].bitcast();
                b: u32 = vals[i.arg&[1].val()].bitcast();
                do_fold(i.op(), .Ks, f32.raw_from_ptr(vals.index(i.to.val())), a.zext(), b.zext());
            };
        }
    };
    
    vals[f.start.jmp.arg.val()]
}

fn iter_intervals(x_int: Interval, y_int: Interval, $body: @Fn(x: f64, y: f64, i: i64) void) void = {
    back :: fn(n) => int((n.cast() + 1.0) / 2.0 * 1024.0);
    range_rev(back(y_int.min), back(y_int.max)) { y |
        range(back(x_int.min), back(x_int.max)) { x |
            continue :: local_return;
            move :: fn(n) => n.float() / 1024.0 * 2.0 - 1.0;
            i := y * 1024 + x;
            body(move(x), move(y), i);
        };
    };
}

fn draw(out: Qbe.BSet, f: @FnPtr(x: f64, y: f64, z: f64) f64, x_int: Interval, y_int: Interval) void = {
    iter_intervals(x_int, y_int) { x, y, i |
        hit := f(x, y, 0.0) > 0.0;
        if hit {
            out&.bsset(i);
        }
    };
}

fn draw(out: *List(u8), pixels: Qbe.BSet) void = {
    @fmt(out, "P3 1024 1024 255\n");
    range_rev(0, 1024) { y |
        range(0, 1024) { x |
            i := y * 1024 + x;
            hit := bshas(pixels&, i);
            c := @if(hit, 0, 255);
            @fmt(out, "% % % ", c, c, c);
        };
        @fmt(out, "\n");
    };
}

fn do_imports(m: *QbeModule) void = {
    imports := @slice("log", "exp", "sin", "cos", "fabs");
    Dyn :: import("@/lib/dynamic_lib.fr");
    for find_os_libc_dylib() { libc_path | 
        if Dyn'open(libc_path) { lib |
            for imports { name |
                n := m.intern(name);
                if lib.get(name) { found |
                    put_jit_addr(m, n, found);
                }
            };
        };
    };
};

Interval  :: @struct(min: f32, max: f32);

fn is_nan(self: Interval) bool = 
    is_nan(self.min + self.max);

fn optimise_intervals(f: *Qbe.Fn, vars: []Interval, ints: []Interval, $mut: bool) Interval = {
    ints.interpret_as_bytes().set_bytes(255);  // all ones is a nan
    @debug_assert_ge(f.ntmp, f.ncon, "TODO: a,b:= will bounds check fail if there are more constants than vars");
    
    k := 0;
    j := f.start.ins.first;
    while => j.op() == .par {
        ints[j.to.val()] = vars[k];
        k += 1;
        j = j.offset(1);
    }
    
    end := f.start.ins.first.offset(f.start.nins.zext());
    while => !identical(j, end) {
        continue :: local_return;
        i := j; j = i.offset(1);
        a, b := (ints[i.arg&[0].val()], ints[i.arg&[1].val()]);
        
        xx := a.is_nan() && rtype(i.arg&[0]) == .RTmp;
        if xx || (b.is_nan() && i.arg&[1] != QbeNull) {
            // maybe you want to continue here. 
            // but since i don't do anything unless we know bounds on the final output, 
            // and you probably use all values in the output, maybe we just give up here. 
            // continue(); 
            return(min = NaN, max = NaN);
        };
        
        sqrt :: fn(x: f32) f32 #ir(.sqrt, .Ks);
        min :: fn(x: f32, y: f32) f32 #ir(.min, .Ks);
        max :: fn(x: f32, y: f32) f32 #ir(.max, .Ks);
        
        new: Interval = @match(i.op()) {
            fn copy() => @match(rtype(i.arg&[0])) {
                fn RTmp() => a;
                fn RCon() => {
                    x := f.get_constant(i.arg&[0])[].bits.d.cast();
                    (min = x, max = x)
                }
                @default => @panic("bad copy source");
            };
            fn add() => (min = a.min + b.min, max = a.max + b.max);
            fn sub() => (min = a.min - b.max, max = a.max - b.min);
            fn mul() => {
                // https://en.wikipedia.org/wiki/Interval_arithmetic
                v0, v1, v2, v3 := (a.min*b.min, a.min*b.max, a.max*b.min, a.max*b.max);
                (min = v0.min(v1).min(v2).min(v3), max = v0.max(v1).max(v2).max(v3))
            }
            fn neg() => {
                v0, v1 := (-a.min, -a.max);
                (min = v0.min(v1), max = v0.max(v1))
            }
            fn div() => continue();  // TODO: steal from wikipedia
            fn min() => @if_else { 
                @if(a.max < b.min) => a;
                @if(b.max < a.min) => b;
                @else => (min = min(a.min, b.min), max = min(a.max, b.max));
            };
            fn max() => @if_else { 
                @if(a.min > b.max) => a;
                @if(b.min > a.max) => b;
                @else => (min = max(a.min, b.min), max = max(a.max, b.max));
            };
            // TODO: is it really this simple? 
            // we're not doing complex numbers so if it could be negative, who knows man just skip it
            fn sqrt() => {
                if(a.min < 0.0, => continue());
                (min = a.min.sqrt(), max = a.max.sqrt())
            }
            @default => continue();
        };
        ints[i.to.val()] = new;
        @if(mut) if rtype(i.arg&[0]) != .RCon && new.min == new.max {
            r := f.getcon(new.min.cast().bitcast());
            i[] = make_ins(.copy, .Kd, i.to, r, QbeNull);
        };
    };
    
    r := f.start.jmp.arg&;
    @debug_assert_eq(rtype(r[]), .RTmp);
    final := ints[r[].val()];

    @if(mut) if !final.is_nan() {
        if final.min > 0.0  {
            r[] = f.getcon(1.0.bitcast());
        }
        if final.max <= 0.0 {
            r[] = f.getcon(-1.0.bitcast());
        }
    }
    final
}

fn compile_program(f: *Qbe.Fn, p: *Program) void = {
    vars := @slice(f.newtmp("x", .Kd), f.newtmp("y", .Kd), f.newtmp("z", .Kd));
    vals := temp().alloc_init(Qbe.Ref, p.o.len, fn(_) => f.newtmp("v", .Kd));
    f.start = temp().box_zeroed(Qbe.Blk);
    f.start.ins = new(vals.len);
    f.nblk = 1;
    f.lnk.id = f.globals.intern(p.name);
    f.lnk.export = true;
    
    for vars { v |
        f.emit(.par, .Kd, v, QbeNull, QbeNull);
    };
    f.start.jmp = (type = .retd, arg = vals[vals.len - 1]);
    
    range(0, p.o.len) { i |
        r, a, b := (vals[i], vals[p.a[i].zext()], vals[p.b[i].zext()]);
        @match(p.o[i]) {
            fn const() => f.emit(.copy, .Kd, r, f.getcon(p.consts[p.a[i].zext()].bitcast()), QbeNull);
            fn var() => f.emit(.copy, .Kd, r, vars[p.a[i].zext()], QbeNull);
            fn neg() => f.emit(.neg, .Kd, r, a, QbeNull);
            fn add() => f.emit(.add, .Kd, r, a, b);
            fn sub() => f.emit(.sub, .Kd, r, a, b);
            fn mul() => f.emit(.mul, .Kd, r, a, b);
            fn div() => f.emit(.div, .Kd, r, a, b);
            fn sqrt() => f.emit(.sqrt, .Kd, r, a, QbeNull);
            fn exp()  => f.call("exp", r, a, .None);
            fn ln()   => f.call("log", r, a, .None);
            fn cos()  => f.call("cos", r, a, .None);
            fn sin()  => f.call("sin", r, a, .None);
            fn abs()  => f.call("fabs", r, a, (Some = b));
            fn max()  => f.emit(.max, .Kd, r, a, b);
            fn min()  => f.emit(.min, .Kd, r, a, b);
        };
    };
    
    emit :: fn(f: *Qbe.Fn, o: Qbe.O, k: Qbe.Cls, r: Qbe.Ref, a: Qbe.Ref, b: Qbe.Ref) void = { 
        f.start.push(make_ins(o, k, r, a, b)); 
    }
    call :: fn(f: *Qbe.Fn, name: Str, r: Qbe.Ref, a: Qbe.Ref, b: ?Qbe.Ref) void = {
        name := f.globals.intern(name);
        f.emit(.arg, .Kd, QbeNull, a, QbeNull);
        if b { b | 
            f.emit(.arg, .Kd, QbeNull, b, QbeNull);
        };
        f.emit(.call, .Kd, r, f.symcon(name), QbeNull);
    }
}

Operation :: @enum(u8) (
    const,  // consts[a]
    var,    // (x, y)[a]
    neg, sqrt, abs, exp, ln, cos, sin, // unary(a)
    add, sub, mul, div, max, min,  // binary(a, b)
);

Program :: @struct {
    name: Str;
    consts: []f64;
    o: []Operation;
    a: []u16;
    b: []u16;
}

fn collect_examples(a: Alloc) []Program = {
    ::import("@/examples/testing.fr");
    
    programs := Program.list(a);
    folder   := fetch_or_crash("https://github.com/mkeeter/fidget/archive/baef3e38653fc5deecd48b730ca0e234e6d01f79.zip", 827878, "1224f8f982fe891e501c9d4a6aa0a4abb03e65022ee3118dccd7f17c2f3f7105", "fidget-baef3e38653fc5deecd48b730ca0e234e6d01f79");
    walk_directory(@fmt_cstr("%/models", folder)) { e |
        if e.name.ends_with(".vm") {
            m := mark_temporary_storage();  // TODO: if not temp()
            n := e.name.slice(0, e.name.len - 3);
            s := temp().read_to_string_or_crash(@tfmt("%/models/%", folder, e.name)).items();
            p := parse_program(a, n, s);
            programs&.push(p);
            reset_temporary_storage(m);
        };
    };
    
    programs.items()
}

fn parse_program(al: Alloc, name: Str, s: Str) Program = {
    #use("@/lib/collections/map.fr");
    consts, o, a, b := (f64.list(temp()), Operation.list(temp()), u16.list(temp()), u16.list(temp()));
    names: HashMap(Str, u16) = init(temp());
    
    if true {
        break :: local_return;
        i := 0;
        while => i < s.len {
            continue :: local_return;
            if(i >= s.len, => break());
            while => s[i].is_ascii_whitespace() {
                i += 1;
                if(i >= s.len, => break());
            }
            if s[i] == "#".ascii() {
                while => s[i] != "\n".ascii() {
                    i += 1;
                }
                continue();
            }
            
            eat_word :: fn() Str => {
                while => s[i].is_ascii_whitespace() {
                    i += 1;
                }
                start := i;
                while => !s[i].is_ascii_whitespace() {
                    i += 1;
                }
                s.slice(start, i)
            }
            eat_arg :: fn() u16 => {
                s := eat_word();
                names&.get(s) || @panic("undeclared variable '%'", s)
            }
            
            name := eat_word();
            names&.insert(name, o.len.trunc());
            op := eat_word();
            
            (o2: Operation, a2: u16, b2: u16) := @switch(op) {
                @case("const") => {
                    s := @fmt_cstr("%", eat_word());
                    atof :: fn(s: CStr) f64 #libc;  // TODO: write my own 
                    consts&.push(atof(s));
                    (.const, consts.len.sub(1).trunc(), 0)
                }
                @case("var-x") => (.var, 0, 0);
                @case("var-y") => (.var, 1, 0);
                @case("var-z") => (.var, 2, 0);
                @case("square") => {
                    x := eat_arg();
                    (.mul, x, x)
                }
                @default => {
                    ::enum(Operation);
                    o := Operation.from_name(op) 
                        || @panic("invalid operation '%' in '%'", op, name);
                    a := eat_arg();
                    b := @if(o.raw() >= Operation.add.raw(), eat_arg(), 0);
                    (o, a, b)
                };
            };
            o&.push(o2);
            a&.push(a2);
            b&.push(b2);
            continue();
        }
    };
    
    (
        name = name.shallow_copy(al), 
        consts = consts.items().shallow_copy(al),
        o = o.items().shallow_copy(al),
        a = a.items().shallow_copy(al),
        b = b.items().shallow_copy(al),
    )
}
