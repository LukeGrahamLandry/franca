// 
// Execute an ELF binary just like the linux kernel would. 
// - load segments into memory with the right memory protection
// - push parameters to the stack and call the entry point
// - if dynamic, dlopen imports and apply relocations (instead of calling program interpreter)
//  
// TODO:
// - auxiliary vector
// - actually pass argc, argv, envp
//
// Note: there is no syscall translation so this can only run linux programs on linux, etc.
//
// the purpose of this is just understanding how the format works well enough to produce it. 
// it's not meant to be useful for running real programs!
// 

main :: fn() void = {
    bytes := read_file_from_last_arg();  // TODO: dumb. just mmap the file?
    h := bytes.peek_type(Elf.Header);
    @assert_eq(h.magic, Elf.MAGIC, "invalid magic. expected an elf program");
    @assert(h.program_header_num != 0, "no program headers. expected an executable");
    @assert(h.program_header_entsize == size_of(Elf.ProgramHeader).trunc(), "phentsize");
    
    ph := bytes.rest(h.program_header_off).peek_type(Elf.ProgramHeader);
    ph: []Elf.ProgramHeader = ph.slice(h.program_header_num.zext());
    
    hi, lo := (0, MAX_i64);
    each ph { it |
        ::enum(@type it.type);
        if it.type == .Load {
            hi = max(hi, it.vaddr + it.mem_size);
            lo = min(lo, it.vaddr);
        }
    };
    @assert(hi > lo, "no load headers found");
    RW :i64= bit_or(Posix.PROT.WRITE, Posix.PROT.READ);
    
    // reserve memory that fits all the segments with the correct spacing (all inaccesable for now)
    total_virtual := hi - lo;
    @eprintln(">>> reserving % virtual bytes", total_virtual);
    virtual := my_mmap(total_virtual, 0);
    
    executable := list([]u8, temp());
    stack: []u8 = empty();
    dyn: []Elf.Dyn = empty();
    need_dynamic_loader := false;
    each ph { it |
        if it.type == .Load {
            dest := virtual.subslice(it.vaddr - lo, it.mem_size);
            
            if it.file_size != 0 {
                @assert(u8.int_from_ptr(dest.ptr).mod(page_size()) == 0, "not divisible by page size");
                src := bytes.subslice(it.offset, it.file_size);

                res := Syscall'mprotect(u8.raw_from_ptr(dest.ptr), dest.len, RW); 
                @assert_eq(res.value, 0, "mprotect failed %", @if(::is_linking_libc(), Posix'errno()[], "??"));
                dest.copy_from(src);
            }
            
            if it.prot.bit_and(Elf.PF_X) != 0 {
                executable&.push(dest);
            }
            
            prot := prot_elf_to_posix(it.prot);
            Syscall'mprotect(u8.raw_from_ptr(dest.ptr), dest.len, prot); 
        }
        if it.type == .Stack {
            prot := prot_elf_to_posix(it.prot);
            stack = my_mmap(it.mem_size, prot);
        }
        // TODO: am i supposed to mutate .vaddr if this is a static binary? do_relocations_static_linux() reads it
        // TODO: im reading the program header and do_relocations_static_linux is reading the section header. 
        //       (i think my decision was you're required to have both for a dynamic binary and they have redundant info). 
        if it.type == .Dynamic {
            p := virtual.index(it.vaddr - lo);
            dyn = (ptr = ptr_cast_unchecked(u8, Elf.Dyn, p), len = it.mem_size / size_of(Elf.Dyn));
        }
        if it.type == .Interp { 
            need_dynamic_loader = true;
            // note: im ignoring the requested path
        }
    };
    @assert(stack.len > 0, "missing STACK program header");
    
    // This is the part where the kernel would call the interpreter you asked for, 
    // but instead of that im just going to start doing relocations and hope for the best.
    if need_dynamic_loader {
        base := u8.raw_from_ptr(virtual.ptr);
        ::ptr_utils(Elf.Symbol);
        unpacked := Elf'load_from_dynamic_header(dyn);
        fix :: fn(p) => bit_cast_unchecked(*u8, @type p, virtual.index(bit_cast_unchecked(@type p, i64, p) - lo));
        unpacked.strings.ptr = unpacked.strings.ptr.fix(); 
        unpacked.symbols = unpacked.symbols.fix(); 
        unpacked.relocations.ptr = unpacked.relocations.ptr.fix(); 
        
        libs := open_needed_dylibs(dyn, unpacked.strings);
        
        each unpacked.relocations { it |
            @debug_assert_eq(it.type, Elf.R_AMD64_64, "TODO: unknown relocation type %", it.type);
            sym := unpacked.symbols.offset(it.sym.zext());
            type := sym.info.shift_right_logical(4);
            dest := rawptr.ptr_from_raw(base.offset(it.offset - lo));
            if type == Elf.STB_LOCAL {
                dest[] = base.offset(sym.value).offset(it.addend);
            } else {
                break :: local_return;
                @debug_assert(type == Elf.STB_GLOBAL || type == Elf.STB_WEAK, "unknown symbol type");
                name: CStr = (ptr = unpacked.strings.index(sym.name.zext()));
                for libs { lib |
                    if lib.get(name.str()) { value |
                        dest[] = value.offset(it.addend);
                        @eprintln(">>> import '%'", name.str());
                        break();
                    };
                };
                @assert(type == Elf.STB_WEAK, "missing non-weak import: %", name);
            }
        };
    };
    
    entry := virtual.index(h.entry - lo);
    {
        ok := false;
        for executable { it |
            ok = ok || it.contains_address(entry);
        };
        @assert(ok, "entry point is not in executable memory");
    };
    
    // Push the arguments to the new stack. 
    z: u8 = 0;
    z: CStr = (ptr = z&);
    par := stack.index_unchecked(stack.len - 24);
    argc_argv_envp := bit_cast_unchecked(*u8, *Ty(i64, *CStr, *CStr), par);
    argc_argv_envp[] = (0, z&, z&);
    sp := par.offset(-8);
    
    @eprintln(">>> calling entry point: %", entry);
    call_in_stack(sp, entry);
    unreachable();
}

open_needed_dylibs :: fn(dyn: []Elf.Dyn, strings: []u8) []Dyn.Handle = {
    libs := Dyn.Handle.list(temp());
    for dyn { dyn |
        if dyn.tag == .Needed {
            name: CStr = (ptr = strings.index(dyn.val));
            if Dyn'open(name.str()) { it |
                libs&.push(it);
            };
        }
    };
    libs.items()
}

my_mmap :: fn(size: i64, prot: i64) []u8 = {
    flag: i64 = bit_or(Posix'MAP'PRIVATE, Posix'MAP'ANON);
    mem := Posix'mmap(rawptr_from_int 0, size, prot, flag, (fd = -1), 0);
    mem := mem.Ok; // null if err
    @assert(!mem.is_null(), "mmap failed");
    u8.ptr_from_raw(mem).slice(size)
}

prot_elf_to_posix :: fn(prot: u32) i64 = {
    flag := 0;
    if prot.bit_and(Elf.PF_X) != 0 {
        flag = flag.bit_or(Posix.PROT.EXEC);
    }
    if prot.bit_and(Elf.PF_W) != 0 {
        flag = flag.bit_or(Posix.PROT.WRITE);
    }
    if prot.bit_and(Elf.PF_R) != 0 {
        flag = flag.bit_or(Posix.PROT.READ);
    }
    flag
}

Elf :: import("@/backend/elf/bits.fr");
#use("@/lib/sys/fs.fr");

call_in_stack :: AsmFunction(fn(sp: *u8, callee: *u8) void = (), @const_slice(
    // TODO: THIS ARM IS UNTESTED
    add_im(.X64, sp, x0, @as(u12) 0, 0b0),  // setup new stack 
    br(x1, 0b0),  // call a user function (no link)
    brk(0x1234),  // crash
), (fn(out) = @asm_x64(
    encode_bin(PrimaryOp.MovReg, X86Reg.rsp, X86Reg.rdi),  // setup new stack
    // call a user function. 
    // don't push a return address, sp needs to point to the parameters being passed to the program. 
    // you can see the other side of this calling convention in franca_runtime_init()
    encode_jmp_reg(ModrmMode.Direct, X86Reg.rsi),  
    PrimaryOp.Int3,  // crash
) out));

#use("@/backend/amd64/bits.fr");
#use("@/backend/arm64/bits.fr");
Dyn :: import("@/lib/dynamic_lib.fr");
