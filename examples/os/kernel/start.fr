
main :: fn() void = {
    sane_main();
}

sane_main :: fn() void = {
    _, c := create_and_set_unsafe_environment();
    c.panic_hook = kpanic;
    kprint("These are the first words I have to say.\nThat's probably why they took so long to write.\n");
    
    print_el();
    setup_interrupts();
    
    do_eret(789, @as(rawptr) user_func);
    kpanic("eret returned");
}

print_el :: fn() void = {
    kprint("Current Exception Level: ");
    el := i64.sys_get(.CurrentEL);
    c := "0".char() + el.shift_right_logical(2);
    putchar(c.trunc());
    kprint("\n");
}

setup_interrupts :: fn() void = {
    interrupt_base := int_from_ptr(@type interrupt_handlers[], interrupt_handlers);
    if interrupt_base.umod(2048) != 0 {
        // TODO: have a way to ask for the global to have the right alignment
        // TODO: have a more official way to ask for it to be in executable memory
        kpanic("unaligned exception vector");
    };
    // this assumes we're starting in el1 and don't have to set any interrupt masks, etc.
    #use(Arm);
    
    // TODO: idk if i have to enable the caches somehow but i figure this can't hurt
    cc :: import("@/lib/sys/process.fr").aarch64_clear_instruction_cache;
    clear_cache :: AsmFunctionArmOnly(fn(beg: rawptr, end: rawptr) void = (), cc);
    
    // this is a pain because AsmFunction doesn't have a way to do relocations.
    // but since this runs before memory protection is set up, its fine to patch the jump offsets. 
    
    // each slot of the InterruptVector is limited to 32 instructions, 
    // just branch to a seperate function where the size doesn't matter. 
    int_callee := @as(rawptr) interrupt_trampoline;
    each interrupt_handlers { it |
        // TODO: tell it which one this is somehow
        src := u32.raw_from_ptr(it.index(0));
        it[0] = b(ptr_diff(src, int_callee) / 4, 0);
        clear_cache(src, src.offset(128));
    };
    
    // :patch interrupt_trampoline calls syscall_func
    i := @run interrupt_trampoline_code.index_of(arm_nop).unwrap();
    i += 1;  // TODO: really shouldn't force a bti because this super error prone
    src := u32.ptr_from_raw(int_callee).offset(i);
    dest := u32.ptr_from_raw(@as(rawptr) syscall_func);
    src[] = b(ptr_diff(src, dest), 1);
    clear_cache(int_callee, int_callee.offset(128));
    
    sys_set(*InterruptVector, .VBAR_EL1, interrupt_handlers);
    @run assert_eq(size_of(InterruptVector), 0x800);
    
    // magic to make the timer actually work:    
    // these are memory mapped but have names you can look up as registers in the pdf 
    // TODO: make struct for these
    // TODO: make it work with ,gic-version=3 
    u32.volatile(gicd, 1);  // GICD_CTLR: enable distributor
    u32.volatile(gicc, 1);  // GICC_CTLR: enable cpu interface controller
    u32.volatile(gicc + 4, 255);  // GICC_PMR: priority mask register (255 is low, 0 is high)
    //u32.volatile(gicc + 8, 0);  // GICC_BPR = GICC_BPR_NO_GROUP; TODO: what does this do?
    // now for the specific interrupt
    set_field(timer_irq, gicd + 0x100, 1, 1); // GICD_ISENABLER enable
    set_field(timer_irq, gicd + 0x280, 1, 1); // GICD_ICPENDR clear
    //set_field(timer_irq, gicd + 0x800, 8, 1);  // GICD_ITARGETSR which core
    //set_field(timer_irq, gicd + 0x400, 8, 0);  // GICD_IPRIORITYR
    
    // start timer
    frequency := i64.sys_get(.CNTFRQ_EL0);
    i64.sys_set(.CNTP_TVAL_EL0, frequency);  // count down from the frequency, so wait 1 second
    i64.sys_set(.CNTP_CTL_EL0, 1);  // turn it on
    kprint_label("frequency: ", frequency);
};

set_field :: fn(interrupt_id: i64, addr: i64, bit_width: i64, value: u32) void = {
    mask: u32 = 1.shift_left(bit_width) - 1;
    value := value.bit_and(mask);
    count_per_word := 32.umod(bit_width);
    shift := interrupt_id.umod(count_per_word) * bit_width;
    addr += interrupt_id.udiv(count_per_word);
    old := u32.volatile(addr);
    new := old.bit_and(mask.shift_left(shift).bit_not()).bit_or(value.shift_left(shift));
    u32.volatile(addr, new);
}

// generic interrupt controller
// TODO: device tree?
gicd :: 0x08000000;
gicc :: 0x08010000;
timer_irq :: 30;

Arm :: import("@/backend/arm64/bits.fr");
// TODO: floats, flags?
// TODO: need to save what caused the interrupt
interrupt_trampoline :: AsmFunctionArmOnly(fn() void = (), interrupt_trampoline_code);
interrupt_trampoline_code :: {
    #use(Arm);
    out := u32.list(64, ast_alloc());
    emit :: fn(inst) => out&.push(inst);
    
    // write SavedRegisters
    emit(sub_im(Bits.X64, sp, sp, 64, 0));  // leave space for special registers
    range_rev(0, 16) { r |
        a, b := (r*2, r*2+1);
        emit(stp_pre(.X64, a, b, sp, @as(i7) -2));
    };
    // TODO: kernel use a different stack so userspace can't see what's left there
    //       (don't forget 31 in stp_pre is xzr not sp)
    // call syscall_func
    emit(add_im(Bits.X64, x0, sp, 0, 0));
    emit(arm_nop);  // :patch
    @debug_assert_eq(out.items().index_of(arm_nop).unwrap(), out.len - 1, "patch must be first nop");
    
    // read SavedRegisters
    range(0, 16) { r |
        a, b := (r*2, r*2+1);
        emit(ldp_post(.X64, a, b, sp, @as(i7) 2));
    };
    emit(add_im(Bits.X64, sp, sp, 64, 0));
    
    // branch to ELR_EL1 which was set by the interrupt gods
    emit(eret);  
    
    out.items()
};

InterruptVector :: Array(Array(u32, 32), 16);
interrupt_handlers :: @static(InterruptVector);

user_func :: fn(arg: i64) void = {
    kprint("inside user_func\n");
    kprint_label("user argument is: ", arg);
    // print_el();  // you can tell you're in el0 because reading CurrentEL is an illegal instruction
    
    result := do_syscall(123);
    kprint_label("syscall result is: ", result);
    
    if false {
        echo();
    };
    spin();
};

echo :: fn() void = {
    prev := 0;
    loop {
        i: i64 = getchar().zext();
        if i != prev {
            prev = i;
            kprint_label("input: ", i);
        }
    };
}

SavedRegisters :: @struct {
    gpr: Array(i64, 32);
    // why are we being interrupted?
    esr: i64;  // exception syndrome
    far: i64;  // fault address
    // how do we return after the interrupt?
    elr: i64;  // eret link register
    spsr: i64; // saved program status
    _: Array(u32, 4);
};

// for now im using the same handler for every slot of the InterruptVector
syscall_func :: fn(args: *SavedRegisters) void = {
    kprint("inside syscall_func\n");
    
    // these being in SavedRegisters isn't important because i don't restore them 
    // but it seems convient to have one context thing you can pass around.
    // TODO: if i keep these do it in the assembly part instead of as a bunch of calls here. 
    args.esr = i64.sys_get(.ESR_EL1);
    args.far = i64.sys_get(.FAR_EL1);
    
    // saving and restoring these only matters if i allow nested interrupts. 
    // TODO: maybe i want that so unset PSTATE I/F/A mask at some point?
    //       its also not clear to me what happens if i fault while in EL1,
    //       cause if im not the hypervisor i can't control whether those go to me or not, right? 
    args.elr = i64.sys_get(.ELR_EL1);
    args.spsr = i64.sys_get(.SPSR_EL1);
    
    intid := u32.volatile(gicc + 0x000C);  // GICC_IAR: Interrupt Acknowledge Register
    kprint_label("intid: ", intid.zext());
    
    if intid == 1023 {
        arg := args.gpr&[0];
        kprint_label("ESR_EL1: ", args.esr);
        kprint_label("SPSR_EL1: ", args.spsr);
        print_el();
        kprint_label("syscall argument is: ", arg);
        args.gpr&[0] = arg * 2;
    };
    
    if intid == timer_irq {
        kprint("timer fired!\n");
        frequency := i64.sys_get(.CNTFRQ_EL0);
        i64.sys_set(.CNTP_TVAL_EL0, frequency);
        
        u32.volatile(gicc + 0x0010, intid);  // GICC_EOIR: End of Interrupt Register
    };
    
    i64.sys_set(.ELR_EL1, args.elr);
    i64.sys_set(.SPSR_EL1, args.spsr);
};

Crash :: import("@/lib/crash_report.fr");

do_syscall :: @AsmFunctionArmOnly(fn(arg: i64) i64 = ()) => (
    svc,
    ret(), 
);

sys_get :: fn($T: Type, $name: Arm.SystemRegister) T #generic = {
    @run @ct_assert(size_of(T) == 8, @source_location(), "type must fit in a register");
    #use(Arm);
    AsmFunctionArmOnly(fn() T = (), @const_slice(
        mrs(x0, name),
        ret(), 
    ))()
}

sys_set :: fn($T: Type, $name: Arm.SystemRegister, value: T) void #generic = {
    @run @ct_assert(size_of(T) == 8, @source_location(), "type must fit in a register");
    #use(Arm);
    AsmFunctionArmOnly(fn(value: T) void = (), @const_slice(
        msr(name, x0),
        ret(), 
    ))(value);
}

do_eret :: @AsmFunctionArmOnly(fn(result: i64, callee: rawptr) i64 = ()) => (
    // keep the same stack
    add_im(Bits.X64, x2, sp, 0, 0),
    msr(.SP_EL0, x2),
    // set eret destination
    msr(.ELR_EL1, x1),
    // jump to callee but in el0
    eret,
    // unreachable
    wfi,
    b(0, 0),
);

// TODO: make calling panic() work
kpanic :: fn(msg: Str) Never = {
    kprint("we're so fucked\n===\n");
    kprint(msg);
    kprint("\n===\ni repeat, we're so fucked\n");
    spin()
};

kprint_label :: fn(msg: Str, value: i64) void = {
    kprint(msg);
    kscary_log(value);
    kprint("\n");
}

spin :: fn() Never = {
    loop {
        (@AsmFunctionArmOnly(fn() void = ()) => (
            wfi,
            ret(), 
        ))();
    };
}

kprint :: fn(s: Str) void = 
    for(s, putchar);

// TODO: read the magic number from the device tree thingy?
uart :: 0x09000000;
putchar :: fn(c: u8) void = {
    u8.volatile(uart, c);
}

getchar :: fn() u8 = {
    u8.volatile(uart)
}

// TODO: can't let it try to bake the junk address or it crashes in bake_relocatable_constant :compilerbug
fn volatile($T: Type, addr: i64, value: T) void #noinline #generic = {
    bit_cast_unchecked(i64, *T, addr)[] = value;
}

fn volatile($T: Type, addr: i64) T #noinline #generic = {
    bit_cast_unchecked(i64, *T, addr)[]
}

fn kscary_log(i: i64) void = {
    buf := @uninitialized Array(u8, 40);
    if i != 0 && i == -i { // ugly twos compliment :hack
        kprint("-9223372036854775808");
        return();
    };
    operator_index :: index_unchecked;
    len := 0;
    inner :: fn(i: i64, buf: []u8, len: *i64) void = {
        if i < 0 {
            buf[len[]] = "-".ascii();
            len[] += 1;
            inner(-i, buf, len);
        } else {
            is_digit := i >= 0 && i < 10;
            if is_digit {
                buf[len[]] = i.trunc() + 48;
                len[] += 1;
            } else {
                inner(i / 10, buf, len);
                buf[len[]] = i.mod(10).trunc() + 48;
                len[] += 1;
            };
        };
    };
    inner(i, buf&.items(), len&);
    kprint(@as(Str) (ptr = buf&.as_ptr(), len = len));
}

// TODO: this is a neat demo but it would be more simple to just make the syntax such that it doesn't resolve
//       eagarly which might just mean using `fn() = {}` instead of `fn() => ()` but then its annoying to get 
//       the tuple out of the block... idk this whole operation is kinda dumb anyway. 
// this is convoluted to trick it into resolving the expression in the context of #use(arm/bits)
fn AsmFunctionArmOnly(signeture: FatExpr, code: FatExpr) FatExpr #macro = {
    signeture := FuncId.const_eval(signeture);
    code_fid := FuncId.const_eval(code);
    code := get_function_ast(code_fid, false, false, false, false);
    ::tagged(@type code.body);
    @debug_assert(code.body&.is(.Normal));

    code.body.Normal = @{ @const_slice(@[code.body.Normal]) };
    unresolve_scopes(code.body.Normal&);
    
    code.resolve_scope = FuncId.scope_of(fn() = {
        // the body of `code` will be able to see any constants declared here.
        #use(Arm);
    });
    // TODO: makes sense that you need this,
    //       but you shouldn't panic without it, should be an error instead of 
    //       `panic! Unreachable unless you set the load factor to 100%`
    code.unset_flag(.ResolvedBody);
    
    code := Slice(u32).const_eval(@{ @[@literal code_fid]() });
    @literal AsmFunctionArmOnly(signeture, code)
}

// time to do some sketchy shit do da do da
fn unresolve_scopes(expr: *FatExpr) void = {
    #use("@/compiler/walk_ast.fr");
    #use("@/compiler/ast_external.fr");
    UnResolve :: @struct();
    ::WalkAst(UnResolve, void);
    
    // TODO: `@ref(@as(UnResolve) ())` ambigous overload for FatExpr -> FatExpr. :compilerbug?
    unresolve: UnResolve = ();  
    walk_expr(unresolve&, expr);

    fn handle_expr(self: *UnResolve, expr: *FatExpr) Result(DoMore, void) = {
        @match(expr.expr&) {
            fn GetVar(it) => {
                expr.expr = (GetNamed = it.name);
            }
            fn UndeclaredVar(it) => {
                expr.expr = (GetNamed = it.name);
            }
            fn Block(it) => {
                it.flags = it.flags.bit_and(bit_not(1.shift_left(@as(i64) BlockFlags.Resolved)));
                it.scope = NOSCOPE;
            }
            @default => ();
        };
        (Ok = .Continue)
    }
    fn handle_stmt(self: *UnResolve, stmt: *FatStmt) Result(DoMore, void) = (Ok = .Continue);
    fn handle_type(self: *UnResolve, type: *LazyType) Result(DoMore, void) = (Ok = .Continue);
    fn handle_func(self: *UnResolve, func: *Func) Result(DoMore, void) = (Ok = .Continue);
    fn handle_pattern(self: *UnResolve, pattern: *Pattern) Result(DoMore, void) = (Ok = .Continue);
}

fn AsmFunctionArmOnly(signeture: FuncId, code: []u32) FuncId #fold = {
    fid := AsmFunction(signeture, code, fn(out: *List(u8)) => (), fn(out: *List(u8)) => (), empty());
    _ := get_function_ast(fid, true, true, true, false);
    fid
}
