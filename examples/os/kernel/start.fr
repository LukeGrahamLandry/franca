
main :: fn() void = {
    _, c := create_and_set_unsafe_environment();
    c.panic_hook = kpanic;
    raw_print("These are the first words I have to say.\nThat's probably why they took so long to write.\n");
};

// TODO: make calling panic() work
kpanic :: fn(msg: Str) Never = {
    raw_print("we're so fucked\n");
    raw_print(msg);
    raw_print("\ni repeat, we're so fucked\n");
    loop {
        // TODO: wfi / shutdown / whatever 
        // spin
    };
};

raw_print :: fn(s: Str) void = 
    for(s, putchar);

uart :: 0x09000000;
putchar :: fn(c: u8) void = {
    volatile_store(uart, c);
}

// TODO: can't let it try to bake the junk address or it crashes in bake_relocatable_constant :compilerbug
volatile_store :: fn(addr: i64, c: u8) void #noinline = {
    bit_cast_unchecked(i64, *u8, addr)[] = c;
}
