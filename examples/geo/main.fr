#include_std("graphics/lib.fr");

// TODO: make this handle more versions of laz correctly 
//       and provide a program that generates some point clouds 
//       programmatically so you don't need to remember to download 
//       an example like https://plas.io/data/spaceshuttle.laz

Render :: import("@/examples/geo/render.fr");
Las :: import("@/examples/geo/las.fr");
Laz :: import("@/examples/geo/laz.fr");

LasFile :: @struct {
    input: []u8;
    data: []u8;
    vlr: ?*Laz.SpecialVlr;
    laz_items: []Laz.ItemRecord;
}

fn header(self: *LasFile) *Las.Header = {
    peek_type(self.input, Las.Header)
}

State :: @struct {
    pipe: Sgl.Pipeline;
    pass_action: SgPassAction;
    app: Sapp.Self;
    draw: *Sgl.Self;
    file: LasFile;
    vertex_dirty: bool;
    pitch: f32;
    yaw: f32;
    camera_pos: Vec3;
    d_pitch: f32;
    d_yaw: f32;
    dx: f32;
    dy: f32;
    dz: f32;
    hi: Vec3;
    lo: Vec3;
    model_yaw: f32;
    d_model_yaw: f32;
    model_pitch: f32;
    d_model_pitch: f32;
    is_compressed: bool;
    chunk_i: i64;
    chunks: Laz.Chunks;
    prev_frame_time: f64;
    sg: Sg.Self;
};

PointData :: @struct {
    x: i32;
    y: i32;
    z: i32;
    intensity: u16;
    rgb: Las.Format.Colour;
}

fn check_las_version(input: []u8) LasFile = {
    h := input.peek_type(Las.Header);
    @assert_eq(h.fourcc, 0x4653414C, "bad magic for las file. expected LASF");
    @println("version = %.%", h.version_major, h.version_minor);
    is_legacy := h.version_minor < 4;
    format := h.point_record_format;
    @println("fmt = %, len = %, count = %, vlr_count = %", format, h.point_record_length, h.legacy_point_record_count, h.vlr_count);
    is_compressed := format >= 128;
    format -= 128 * int(is_compressed).trunc();
    @assert_lt(format, 6, "TODO: implement more point formats");
    records := input.rest(h.offset_to_point_data.zext());
    file: LasFile = (input = input, data = records, vlr = .None, laz_items = empty());
    if is_compressed {
        vv, iits := Laz'laz_header(input) 
            || @panic("expected compressed laz file but couldn't find special header");  // TODO: result
        file.vlr = (Some = vv);
        file.laz_items = iits;
    }
    file
}

Args :: @struct {
    path: CStr = "";
    mmap := false;
};

getargs :: import("@/lib/args.fr").parse_args;  // TODO: the way const shadowing works is stupid

fn main() void = {
    args := getargs(Args);
    state := zeroed State;  // :ThisIsOnTheStackWhichWontWorkOnWasm
    state.chunk_i = 0;
    input := if args.mmap {
        mmap_read(args.path) || @panic("failed to open %", args.path)
    } else {
        general_allocator().read_to_string_or_crash(args.path.str()).items()
    }
    
    state.file = check_las_version(input);
    if state.file.vlr { vlr |
        ::enum(@type state.file.laz_items[0].type);
        ::enum(@type vlr.compressor);
        @assert_eq(vlr.compressor, .chunked, "unsupported laz compressor");
        state.chunks = chunk_table(state.file&, general_allocator());
    };
    state.vertex_dirty = true;
    Render'launch(state&);
}

fn driver(vtable: *ImportVTable) void = 
    Easy'build_for_graphics(vtable, "examples/geo/main.fr");

#include_std("backend/lib.fr");
#use("@/lib/sys/fs.fr");
