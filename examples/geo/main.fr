#include_std("graphics/src/lib.fr");

Render :: import("@/examples/geo/render.fr");
Las :: import("@/examples/geo/las.fr");
Laz :: import("@/examples/geo/laz.fr");

LasFile :: @struct {
    input: []u8;
    data: []u8;
    vlr: ?*Laz.SpecialVlr;
    laz_items: []Laz.ItemRecord;
}

fn header(self: *LasFile) *Las.Header = {
    peek_type(self.input, Las.Header)
}

State :: @struct {
    pipe: Sgl.Pipeline;
    pass_action: SgPassAction;
    env: rawptr;
    draw: *Sgl.Common;
    file: LasFile;
    vertex_dirty: bool;
    pitch: f32;
    yaw: f32;
    camera_pos: Vec3;
    d_pitch: f32;
    d_yaw: f32;
    dx: f32;
    dy: f32;
    dz: f32;
    hi: Vec3;
    lo: Vec3;
    model_yaw: f32;
    d_model_yaw: f32;
    model_pitch: f32;
    d_model_pitch: f32;
    is_compressed: bool;
    chunk_i: i64;
    chunks: Laz.Chunks;
    prev_frame_time: f64;
};

PointData :: @struct {
    x: i32;
    y: i32;
    z: i32;
    intensity: u16;
    rgb: Las.Format.Colour;
}

fn check_las_version(input: []u8) LasFile = {
    h := input.peek_type(Las.Header);
    @assert_eq(h.fourcc, 0x4653414C, "bad magic for las file. expected LASF");
    @println("version = %.%", h.version_major, h.version_minor);
    is_legacy := h.version_minor < 4;
    format := h.point_record_format;
    @println("fmt = %, len = %, count = %, vlr_count = %", format, h.point_record_length, h.legacy_point_record_count, h.vlr_count);
    is_compressed := format >= 128;
    format -= 128 * int(is_compressed).trunc();
    @assert_lt(format, 6, "TODO: implement more point formats");
    records := input.rest(h.offset_to_point_data.zext());
    file: LasFile = (input = input, data = records, vlr = .None, laz_items = empty());
    if is_compressed {
        vv, iits := Laz'laz_header(input) 
            || @panic("expected compressed laz file but couldn't find special header");  // TODO: result
        file.vlr = (Some = vv);
        file.laz_items = iits;
    }
    file
}

Args :: @struct {
    path: CStr = "";
    mmap := false;
    o: CStr = "";
    unsafe := false;
};

getargs :: import("@/lib/args.fr").parse_args;  // TODO: the way const shadowing works is stupid

fn main() void = {
    args := getargs(Args);
    state := zeroed State;
    state.env = get_dynamic_context();
    state.chunk_i = 0;
    input := if args.mmap {
        mmap_read(args.path) || @panic("failed to open %", args.path)
    } else {
        general_allocator().read_to_string_or_crash(args.path.str()).items()
    }
    
    state.file = check_las_version(input);
    if state.file.vlr { vlr |
        ::enum(@type state.file.laz_items[0].type);
        ::enum(@type vlr.compressor);
        @assert_eq(vlr.compressor, .chunked, "unsupported laz compressor");
        state.chunks = chunk_table(state.file&, general_allocator());
    };
    state.vertex_dirty = true;
    Render'launch(state&);
}

fn driver(vtable: *ImportVTable) void #export = {    
    src := "#include_std(\"lib/core.fr\");".clone(temp());
    the_code := temp().read_to_string_or_crash("examples/geo/main.fr");  // TODO: don't depend on cwd.
    src&.push_all(the_code.items());
    
    args := getargs(Args);
    opts := vtable.default_build_options();
    opts.retain_function_names = true;
    if args.unsafe {
        s := opts.safety_checks&;
        s.insert(.Bounds, false);
        s.insert(.DebugAssertions, false);
        s.insert(.InvalidTag, false);
    };
    start := timestamp();
    comp := vtable.new_with_src(src.items(), opts);
    c := vtable.with(comp);
    
    libs := c.empty_libs();
    libs&.add_lib(sokol_macos_lib);
    
    main_sym := {vtable.intern_string}(comp, "main");
    main_f := {vtable.find_unique_func}(comp, main_sym).unwrap();
    
    exe_path := args.o.str();
    want_jit := exe_path.len() == 0;
    if want_jit {
        println("Running in comptime JIT");
        ptr := c.get_jitted(main_f);
        f := assume_types_fn(Arg = void, Ret = void, ptr = ptr);
        f();
        return();
    }
    println("Creating an AOT executable");
   
    #use("@/compiler/ast_external.fr", "@/lib/sys/subprocess.fr");
    m := QbeModule.zeroed();
    init_default_module_dyn(m&, vtable, (arch = query_current_arch(), os = .macos, type = .Relocatable));  // :HardcodeOs
    bytes := emit_qbe_included_dyn(m&, c&, @slice(main_f), .WrapMain);
    end := timestamp();
    @println(">>> compile: %ms <<<", end - start);
    out := open_trunc(@fmt_cstr("%.o", exe_path)).unwrap();
    for(bytes&){ bucket |
        out&.write(bucket);
    };
    out.close();
    // TODO: get these from the lib. 
    a := SOKOL_MACOS_LINK_ARGS;
    args := libs&.get_aot_objects();
    args&.push_all(a&.items());
    args&.push_all(@slice (@tfmt("%.o", exe_path), "-o", exe_path));   
    args&.push_all(@slice ("-target", target_triple(m.goal.arch, m.goal.os)));   
    @println("building aot exe: %", args.items());
    start := timestamp();
    success := run_cmd_blocking("clang", args.items());
    end := timestamp();
    assert(success, "clang failed");
    @println(">>> link: %ms <<<", end - start);
}
SOKOL_MACOS_LINK_ARGS :: @array("-framework", "Metal", "-framework", "MetalKit", "-framework", "Cocoa", "-framework", "QuartzCore");

#include_std("backend/lib.fr");
