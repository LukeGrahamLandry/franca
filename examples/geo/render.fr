TURN_SPEED :: 0.005;
MOVE_SPEED :: 0.045;
MAX_VERTICES :: 30_000_000;
VERTICES_PER_POINT :: 6;
max_points :: MAX_VERTICES / VERTICES_PER_POINT;
chunks_per_frame :: 2;
USE_COLOUR :: false;

// first i tried making a dumb .obj file but meshlab ran out of memory trying to render it for my 185MB point cloud. 

// no fancy triangulation stuff. just put the raw points on the screen. 
fn draw_point_cloud(state: *State, $next_point: @Fn() ?PointData) void = {
    sgl := state.draw;
    
    to_vec :: fn(r) => {
        f :: fn(x) => (@as(i64) x.intcast()).float().cast();
        vec3(f(r.x), f(r.y), f(r.z))
    }
    
    lo := state.lo;
    hi := state.hi;
    percent :: fn(v, l, h) => (v - l) / (h - l);
    
    //off := vec3(state.header.x_offset.cast(), state.header.y_offset.cast(), state.header.z_offset.cast());
    average := vec3(0, 0, 0);
    
    while => next_point() { r |
        i: i64 = r.intensity.zext();
        
        c := @if(USE_COLOUR, {
            c :: fn(x) => (@as(i64) x.zext()).float() / 1.shift_left(8).float();
            pack_rgba(c(r.rgb.r), c(r.rgb.g), c(r.rgb.b), 1.0)
        }, {
            max_intensity :: 65000;
            hue := clamp(i.float() / max_intensity.float() * 5.0, 0.0, 1.0) * 360.0;
            hsv2rgb(hue, 1.0, 1.0, 1.0)
        });
        v := to_vec(r);
        sgl.v3f_c1i(v, c);
        
        // there are min/max fields in the header but it seems they tend to lie
        hi = max(hi, v);
        lo = min(lo, v);
    }
    state.lo = lo;
    state.hi = hi;
    
    // mark the center for debugging rotation
    if false {
        sgl.point_size = 10.0;
        center := (state.lo + (state.hi - state.lo) * 0.5);
        sgl.v3f_c1i(center, 0xFFFFFFFF);
    }
    
    if sgl.error.vertices_full {
        @println("too many vertices");
    }
}

fn fmod(a: f64, b: f64) f64 #libc;

// https://en.wikipedia.org/wiki/HSL_and_HSV#HSV_to_RGB_alternative
// i dont do common subexpression elimination so this is kinda dumb, 
// but i'm morally opposed to changing the code instead of fixing the compiler. 
//
// H is 0-360
fn hsv2rgb(H: f64, S: f64, V: f64, a: f64) u32 = {
    f :: fn(n) => {
        k := fmod(n.float() + (H / 60.0), 6.0);
        V - V * S * max(0.0, min(min(k, 4 - k), 1.0))
    }
    pack_rgba(f(5), f(3), f(1), a)
}

/////////////////////////

frame_index :: @static(i64) 0;

do_render :: fn(userdata: rawptr) void = {
    state := State.ptr_from_raw(userdata);
    sgl := state.draw;
    sapp := state.app&;
    sg := state.sg&;
    if state.chunk_i == 0 {
        state.lo = vec3(99999999.0, 99999999.0, 99999999.0);
        state.hi = state.lo * @as(f32) -1.0;
    
        sgl.rewind();
        sgl.defaults();
        sgl.viewport(0.intcast(), 0.intcast(), sapp.width().intcast(), sapp.height().intcast(), true);
        sgl.load_pipeline(state.pipe);
        
        sgl.begin(.POINTS);
        sgl.load_identity();
        sgl.point_size = 0.5;
        
        if state.file.vlr.is_none() {
            state.chunk_i = 1;
            
            i := 0;
            step_bytes: i64 = state.file&.header()[].point_record_length.zext();
            point_count: i64 = state.file.data.len / step_bytes;
            step_points := max(1, point_count / max_points);
            
            draw_point_cloud(state) {
                @if(i >= point_count, .None, {
                    i = min(step_points + i, point_count-1);
                    
                    r := ptr_cast_unchecked(u8, Las.Format._1, state.file.data.ptr.offset(i * step_bytes));
                    i += 1;
                    (Some = (x = r.x, y = r.y, z = r.z, intensity = r.intensity, rgb = zeroed Las.Format.Colour))
                })
            }
            
            sgl.end();
            sgl.update_vertex_buffer(sg);
            state.vertex_dirty = false;
        }
    }
    
    chunks := state.chunks&;
    @if(state.chunk_i < chunks.chunks.len)
    if state.file.vlr { vlr |
        state.vertex_dirty = false;
        if state.chunk_i != 0 {
            sgl.in_begin = true;
            sgl.commands.len -= 1;  // :HACK to persist the vertices accross frames
        };
        
        step_points := max(1, chunks.points_per_chunk * chunks.chunks.len / max_points);
        reps := min(chunks_per_frame, chunks.chunks.len - state.chunk_i);
        range(0, reps) { _ |
            chunk := chunks.chunks[state.chunk_i];
            state.chunk_i += 1;
            iter: Laz.Iterator = init(state.file.laz_items, temp(), chunk);
            // TODO: don't lose the first point!
            n := 0;
            draw_point_cloud(state) {
                yield :: local_return;
                // because the last chunk probably won't be full 
                bail_finished_chunk :: fn() => if iter.stream.i == iter.stream.input.len {  
                    yield(.None);
                };
                end := min(step_points + n, chunks.points_per_chunk-1);
                range(n, end) { _ |
                    bail_finished_chunk();
                    iter&.next();
                };
                bail_finished_chunk();
                n = end + 1;
                @if(n >= chunks.points_per_chunk, .None, (Some = iter&.next()))
            };
            @debug_assert_eq(iter.stream.i, iter.stream.input.len, "decompression did not consume all bytes");
        }
        sgl.end();
        // TODO: silly that this re-syncs all the old points? is sg_append_buffer what i want instead?
        sgl.update_vertex_buffer(sg);  
    } 

    mvp := sgl.uniforms[0].mvp&;
    h := state.file&.header();
    center := (state.lo + (state.hi - state.lo) * 0.5);
    
    state.model_yaw += state.d_model_yaw;
    state.model_pitch += state.d_model_pitch;
    model := @uninitialized Sgl.Matrix;
    identity(model&);

    // you'd think this would work but somehow no? different than the ones i calculate. 
    //h  := state.file&.header();
    //hi := vec3(h.x_max.cast(), h.y_max.cast(), h.z_max.cast());
    //lo := vec3(h.x_min.cast(), h.y_min.cast(), h.z_min.cast());
    
    hi := state.hi;
    lo := state.lo;
    ss := hi - lo;
    ss := max(max(ss&[0], ss&[1]), ss&[2]);
    ss: f32 = 19.0 / ss / 4.0;
    scale(model&, ss, ss, ss);
    
    // there's something i don't quite understand about the ordering here but this seems to work
    
    // also, want to put it at the origin so you don't need to wander around to find it. 
    translate(model&, -center);
    translate(model&, vec3(5.0 / ss, 0.0, 0.0));
    
    // want to rotate around the center point of the model,
    // so translate to (0,0,0), apply the rotation and then translate back. 
    translate(model&, center);
    rotate(model&, deg_to_rad(state.model_yaw), 0.0, 1.0, 0.0);
    rotate(model&, deg_to_rad(state.model_pitch), 1.0, 0.0, 0.0);
    translate(model&, -center);
    
    identity(mvp);
    update_camera(state, mvp);
    mul(mvp, model&);
    
    Easy'glue_begin_pass(sapp, sg, state.pass_action);
    sgl.draw_layer(sg, 0);
    sg.end_pass();
    sg.commit();
};

fn update_camera(state: *State, mvp: *Sgl.Matrix) void = {
    look_dir, forward, right := {
        sp, cp := state.pitch.sin_cos();
        sy, cy := state.yaw.sin_cos();
        (vec3(cp * cy, sp, cp * sy), vec3(cy, 0.0, sy), vec3(-sy, 0.0, cy))
    };
    normalize(look_dir&);
    normalize(forward&);
    normalize(right&);

    now := timestamp_s();
    dt := (now - state.prev_frame_time).cast() * 30.0;
    state.prev_frame_time = now;
    
    state.camera_pos     += forward * state.dx * MOVE_SPEED.cast() * dt;
    state.camera_pos     += right * state.dz * MOVE_SPEED.cast() * dt;
    state.camera_pos&[1] += state.dy * MOVE_SPEED * dt;
    state.pitch += state.d_pitch * TURN_SPEED * dt;
    state.yaw += state.d_yaw * TURN_SPEED * dt;
    
    limit: f32 = 3.1415 / 2.0;
    state.pitch = clamp(state.pitch, -limit, limit);  // don't let you flip your neck backwards because that feels bad
    
    state.d_pitch = 0;
    state.d_yaw   = 0;
    
    view := @uninitialized Sgl.Matrix;
    identity(view&);
    lookat(view&, state.camera_pos, state.camera_pos + look_dir, vec3(0.0, 1.0, 0.0));  // eye, center, up
    
    projection := @uninitialized Sgl.Matrix;
    identity(projection&);
    sapp := state.app&;
    aspect := (sapp.width() / sapp.height()).float().cast();
    perspective(projection&, deg_to_rad(70.0), aspect, 0.01, 100.0);
    
    mul(mvp, projection&);
    mul(mvp, view&);
}

// TODO: the controls feel really bad. you can like lose key presses. 
do_event :: fn(userdata: rawptr, event: *Sapp.Event) void = {
    state := State.ptr_from_raw(userdata);
    
    ::enum(@type event.type); ::enum(@type event.key_code);
    
    if event.type == .MOUSE_MOVE {
        state.d_pitch -= event.mouse_dy;
        state.d_yaw   += event.mouse_dx;
    };
    
    dir, sign := @match(event.key_code) {
        fn W()          => (state.dx&, 1);
        fn S()          => (state.dx&, -1);
        fn A()          => (state.dz&, -1);
        fn D()          => (state.dz&, 1);
        fn LEFT_SHIFT() => (state.dy&, -1);
        fn SPACE()      => (state.dy&, 1);
        fn LEFT()       => (state.d_model_yaw&, -1);
        fn RIGHT()      => (state.d_model_yaw&, 1);
        fn UP()         => (state.d_model_pitch&, -1);
        fn DOWN()       => (state.d_model_pitch&, 1);
        fn ESCAPE()     => {
            state.app.quit_requested = true; 
            return()
        }
        @default        => return();         // !!
    };
    
    if event.type == .KEY_DOWN {
        dir[] = sign.float().cast();
    };
    if event.type == .KEY_UP {
        dir[] = 0;
    };
};

/////////////////////////

launch :: fn(state: *State) void = {
    state.draw = general_allocator().box_zeroed(@type state.draw[]);
    state.app&.run(
        init_cb = do_init,
        frame_cb = do_render,
        event_cb = do_event,
        user_data = State.raw_from_ptr(state),
        allocator = general_allocator(),
        window_title = "Point Cloud Viewer", 
    );
}

do_init :: fn(userdata: rawptr) void = {
    state := State.ptr_from_raw(userdata);
    sg := state.sg&;
    
    sg.setup(
        environment = Easy'glue_environment(state.app&),
        allocator = general_allocator(),
    );
    
    vertices_needed := min(state.file&.header()[].legacy_point_record_count.zext() * 6, MAX_VERTICES);
    state.draw.setup(
        allocator = general_allocator(),
        sg = sg,
        max_vertices = vertices_needed.intcast(),
        lazy_record = true,
    );
    
    desc: Sgl.PipeDesc = (
        alpha_to_coverage_enabled = true,
        depth = (
            pixel_format = .DEFAULT,
            write_enabled = true,
            compare = .LESS_EQUAL,
        ),
    );
    colour := desc.colors&[0]&;
    colour.blend.enabled = true;
    colour.blend.src_factor_rgb = .SRC_ALPHA;
    colour.blend.dst_factor_rgb = .ONE_MINUS_SRC_ALPHA;
    
    init_pipeline(state.draw, state.pipe&, sg, desc);
    state.pass_action.colors&[0] = (
        load_action = .CLEAR,
        clear_value = (r = 0.3, g = 0.3, b = 0.3, a = 1.0),
    );
    
    state.app&.lock_mouse(true);
    state.prev_frame_time = timestamp_s();
};
