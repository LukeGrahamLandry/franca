ParseWasm :: @struct(w: *Wasm.Module, src: []u8, cursor := 0);
fn parse_wasm(self: *ParseWasm) Result(void, Str) = {
    magic_version := @const_slice(0x00, 0x61, 0x73, 0x6D, 0x01, 0x00, 0x00, 0x00);
    if !self.src.starts_with(magic_version) {
        return(Err = "wasm bad magic");
    };
    self.cursor += 8;
    
    section_count := 0;
    while => self.cursor < self.src.len {
        section_index := @try(self.read_byte_enum(Wasm.Section)) return;
        byte_size := @try(self.read_u()) return;
        end_of_section := self.cursor + byte_size;
        @match(section_index) {
            fn Type() => {
                count := @try(self.read_u()) return;
                self.w.types&.reserve(count);
                range(0, count) { i |
                    b := @try(self.pop()) return;
                    if b != 0x60 {
                        return(Err = "Expected 0x60 to start function type");
                    };
                    arg_len := @try(self.read_u()) return;
                    arg_bytes := self.src.subslice(self.cursor, arg_len);
                    self.cursor += arg_len;
                    ret_len := @try(self.read_u()) return;
                    ret_bytes := self.src.subslice(self.cursor, ret_len);
                    self.cursor += ret_len;
                    if self.cursor > end_of_section {
                        return(Err = @tfmt("Parsed past declared section size. (section index % in module)", section_count));
                    };
                    // TODO: validate?
                    argp := ptr_cast_unchecked(u8, Wasm.ValType, arg_bytes.ptr);
                    retp := ptr_cast_unchecked(u8, Wasm.ValType, ret_bytes.ptr);
                    self.w.types&.push(arg = (ptr = argp, len = arg_len, cap = arg_len), ret = (ptr = retp, len = ret_len, cap = ret_len));
                };
            }
            fn Function() => {
                count := @try(self.read_u()) return;
                self.w.functions&.reserve(count);
                range(0, count) { i |
                    type_index := @try(self.read_u()) return;
                    self.w.functions&.push(id = type_index.trunc());
                };
            }
            fn Import() => {
                count := @try(self.read_u()) return;
                self.w.imports&.reserve(count);
                range(0, count) { i |
                    mod := @try(self.read_str()) return;
                    name := @try(self.read_str()) return;
                    desc: Wasm.ImportDesc = @switch(@try(self.pop()) return) {
                        @case(0) => {
                            self.w.imported_function_count += 1;
                            (Function = (id = trunc(@try(self.read_u()) return)))
                        };
                        @case(1) => {
                            panic("TODO: import table")  
                        };
                        @case(2) => (Memory = @try(self.read_limits()) return);
                        @case(3) => {
                            panic("TODO: import global")  
                        };
                        @default => return(Err = "Invalid import type byte");
                    };
                    self.w.imports&.push(module = mod, name = name, desc = desc);
                };
            }
            fn Export() => {
                count := @try(self.read_u()) return;
                self.w.exports&.reserve(count);
                range(0, count) { i |
                    name := @try(self.read_str()) return;
                    desc_tag := @try(self.pop()) return;
                    id: u32 = trunc(@try(self.read_u()) return);
                    if desc_tag > Wasm.ImportType.enum_count() {
                        return(Err = "Invalid export type byte");
                    };
                    self.w.exports&.push(name = name, type = @as(Wasm.ImportType) desc_tag, id = id);
                };
            }
            fn Code() => @try(self.read_code_section()) return;
            fn Data() => {
                count := @try(self.read_u()) return;
                self.w.data&.reserve(count);
                range(0, count) { i |
                    flags := @try(self.read_u()) return;
                    data := Wasm.Data.zeroed();
                    if flags.bit_and(0b10) == 0b10 {
                        data.active_mem = (id = trunc(@try(self.read_u()) return));
                    };
                    if flags.bit_and(0b1) == 0b0 {
                        data.active_offset_expr = @try(self.read_expr()) return;
                    };
                    data.bytes = @try(self.read_str()) return;
                    self.w.data&.push(data);
                };
            }
            fn Table() => {
                count := @try(self.read_u()) return;
                self.w.tables&.reserve(count);
                range(0, count) { i |
                    type := @try(self.pop()) return;
                    lim := @try(self.read_limits()) return;
                    self.w.tables&.push(type = @as(Wasm.ValType) type, limits = lim);
                };
            }
            fn Memory() => {
                count := @try(self.read_u()) return;
                self.w.memories&.reserve(count);
                range(0, count) { i |
                    lim := @try(self.read_limits()) return;
                    self.w.memories&.push(lim);
                };
            }
            fn Global() => {
                count := @try(self.read_u()) return;
                self.w.globals&.reserve(count);
                range(0, count) { i |
                    type := @try(self.pop()) return;
                    mutable := @try(self.pop()) return;
                    init := @try(self.read_expr()) return;
                    self.w.globals&.push(type = @as(Wasm.ValType) type, mutable = mutable == 1, init_expr = init);
                };
            }
            fn Element() => {
                count := @try(self.read_u()) return;
                self.w.elements&.reserve(count);
                range(0, count) { i |
                    flags := @try(self.read_u()) return;
                    if flags != 0 {
                        return(Err = "TODO: parse more Element kinds. currently only flags=0 is supported.");
                    };
                    off := @try(self.read_expr()) return;
                    func_count := @try(self.read_u()) return;
                    funcs := FuncIdx.list(func_count, self.w.elements.gpa);
                    range(0, func_count) { i |
                        idx := @try(self.read_u()) return;
                        funcs&.push(id = idx.trunc());
                    };
                    self.w.elements&.push(active = true, table = (id = 0), offset_expr = off, funcs = funcs.rs());
                };
            }
            fn DataCount() => {
                _ := @try(self.read_u()) return;
            }
            @default => return(Err = @tfmt("Unhandled section type % (section index % in module)", section_index, section_count));
        };
        
        if self.cursor != end_of_section {
            return(Err = @tfmt("Did not consume declared section size. (section index % in module) expected to stop: (at byte index %) but stopped:", section_count, end_of_section));
        };
        section_count += 1;
    };
    .Ok
}

fn read_code_section(self: *ParseWasm) Result(void, Str) = {
    count := @try(self.read_u()) return;
    self.w.code&.reserve(count);
    range(0, count) { i |
        total_code_bytes := @try(self.read_u()) return;
        start := self.cursor;
        local_count := @try(self.read_u()) return;
        locals := Wasm.Local.list(local_count, self.w.code.gpa);
        total := 0;
        range(0, local_count) { j |
            num := @try(self.read_u()) return;
            total += num;
            type := @try(self.pop()) return;
            if self.cursor > start + total_code_bytes {
                return(Err = @tfmt("Locals overflowed declared function size (func index %, local index %, total locals %, function size %)", i, j, local_count, total_code_bytes));
            };
            locals&.push(type = @as(Wasm.ValType) type, count = num);
        };
        bytes_of_locals := self.cursor - start;
        code_len := total_code_bytes - bytes_of_locals;
        code: RsVec(u8) = (ptr = self.src.index(self.cursor), len = code_len, cap = code_len);
        self.cursor += code_len;
        self.w.code&.push(locals = locals.rs(), insts = code, total_local_count = total);
    };
    .Ok
}

// use for constants like data size / global init.
// TODO: this is wrong because you're allowed nesting but you're such an asshole if you do that in this context. 
fn read_expr(self: *ParseWasm) Result(RsVec(u8), Str) = {
    start := self.cursor;
    while => (@try(self.pop()) return) != 0x0B {
        // spin
    };
    e := self.cursor - start;
    (Ok = (ptr = self.src.index(self.cursor), len = e, cap = e))
}

:: enum(Wasm.Section);

fn read_byte_enum(self: *ParseWasm, $T: Type) Result(T, Str) #generic = {
    b := @try(self.pop()) return;
    if b >= T.enum_count() {
        return(Err = @tfmt("Invalid enum byte %", b));
    };
    (Ok = @as(T) b)
}

fn read_limits(self: *ParseWasm) Result(Wasm.Limits, Str) = {
    has_max := @try(self.pop()) return;
    if has_max != 0 && has_max != 1 {
        return(Err = @tfmt("expected has_max 0/1 not %", has_max));
    };
    min := @try(self.read_u()) return;
    max: u32 = @if(has_max == 1, trunc(@try(self.read_u()) return), 0xFFFFFFFF);
    (Ok = (min = min.trunc(), max = max))
}

fn read_str(self: *ParseWasm) Result(RsVec(u8), Str) = {
    len := @try(self.read_u()) return;
    ptr := self.src.index(self.cursor);
    self.cursor += len;
    (Ok = (ptr = ptr, len = len, cap = len))
}

fn read_u(self: *ParseWasm) Result(i64, Str) = {
    bytes := self.src.slice(self.cursor, self.src.len);
    value, rest, ok := read_leb128_unsigned(bytes);
    if !ok {
        return(Err = "Invalid leb128 number");
    };
    self.cursor += bytes.len - rest.len;
    (Ok = value.bitcast())
}

//fn read_u32(self: *ParseWasm) Result(i64, Str) = {
//    if self.cursor + 4 > self.src.len {
//        return(Err = "eof");
//    };
//    a, b, c, d := (self.src[self.cursor], self.src[self.cursor + 1], self.src[self.cursor + 2], self.src[self.cursor + 3]);
//    value: i64 = a.zext().bit_or(b.zext().shift_left(8)).bit_or(c.zext().shift_left(16)).bit_or(d.zext().shift_left(24));
//    self.cursor += 4;
//    (Ok = value)
//}

fn pop(self: *ParseWasm) Result(u8, Str) = {
    if self.cursor >= self.src.len {
        return(Err = "eof");
    };
    b := self.src[self.cursor];
    self.cursor += 1;
    (Ok = b)
}

fn read_u(self: *LoadWasm) u64 = {
    bytes := self.src.slice(self.cursor, self.src.len);
    value, rest, ok := read_leb128_unsigned(bytes);
    @assert(ok, "Invalid leb128 number");
    self.cursor += bytes.len - rest.len;
    value
}

fn read_index(self: *LoadWasm, $T: Type) T #generic = {
    (id = self.read_u().trunc())
}

fn cls(t: Wasm.ValType) Qbe.Cls = {
    ::enum(Wasm.ValType);
    @switch(t.raw()) {
        @case(0x7F) => .Kw;  
        @case(0x7E) => .Kl;  
        @case(0x7D) => .Ks;  
        @case(0x7C) => .Kd;  
        @default    => .Ke;
    }
}
