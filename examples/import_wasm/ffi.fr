#use("@/examples/import_wasm/convert.fr");
#use("@/examples/import_wasm/parse.fr");

// This works well enough for the examples/bf demo but pretty much nothing else. 
// TODO: many problems to fix:
// - don't append "$module" to the names of all the exports
// - convert tables/globals to baked var id
// - export the initializer func
// - wasm doesn't have type info so you need some way to give it bindings 
//   and have it deal with generating code for offseting the pointers from 
//   the base memory so it's not such a massive pain to use. 

// import_from :: @struct { module_name :: @struct { function_name : FuncId : fn(); }; };  
fn include(wasm: []u8, fr: CompCtx, export_to: ScopeId, import_from: ScopeId) void = {
    m := fr.get_alloc().box(QbeModule); 
    // :HardcodeOs but it doesn't matter because we copy out of the module before doing anything. 
    init_default_module_dyn(m, fr.vtable, (arch = .aarch64, os = .macos, type = .JitOnly));
    
    push_dynamic_context {
        a: ArenaAlloc = init(fr.get_alloc(), 10000);  // TODO: nesting arenas like this is silly
        context(DefaultContext)[].temporary_allocator = a&;
        a := fr.get_alloc();
        // TODO: also it means we're leaking any temp stuff so really need to be able to 
        //       ask for our function stuff to be in a different allocator. 
        //       but also it's annoying that im doing an extra copy out of the module anyway. 
        //       maybe i want to give the compiler a callback to ask for the Fn to be filled out. 
        //       It needs 3 pieces of information: exports, callgraph and bodies, but there's 
        //       no need to supply those at the same time. we want to enable the different frontends 
        //       so run in parallel whenever possible.   :RethinkTheFfiCompileApi
        
        w: WasmModule = empty(temp());  // :LEAK because we set temp() to something dumb
        p: ParseWasm = (w = w&, src = wasm);
        or parse_wasm(p&) { e |
            @panic("% (at byte index %)", e, p.cursor);
        };
        
        self: LoadWasm = init(m, w&, temp());
        self&.load_module();
        initializer := self&.create_init_func();
        
        n := self.w.imported_function_count;
        fns := temp().alloc(FuncId, self.w.code.len + n);
        i := 0;
        each self.w.imports { it |
            ::tagged(@type it.desc);
            if it.desc&.is(.Function) {            
                module, name := (fr.intern_string(it.module.items()), fr.intern_string(it.name.items()));
                
                // TODO: this is bad this is very very bad! you need to use `fr` :FUCKED
                //       this means this needs to run in the same compilation context (not a precompiled driver). 
                val, ty := get_constant(import_from, module) 
                    || @panic("expected to import module '%'", it.module.items());
                s := scope_from_value(ty, val) 
                    || @panic("expected to import module '%'", it.module.items());
                get_constant(s, name, FuncId, FuncId.raw_from_ptr(fns.index(i))) // :get_or_create_type
                    || @panic("expected to import '%' from module '%'", it.name.items(), it.module.items());
                use_symbol(m, self.functions[i]) { s |
                    s.got_lookup_offset = i;
                };
                i += 1;
                
                // TODO: check that the signeture matches-ish
            };
        };
        @debug_assert_eq(i, n);
        
        // Start by reserving all the ids so we can fill in the call graph
        range(0, self.w.code.len) { i |
            loc := Span.zeroed();  // TODO: translate this too! less interesting since it's a binary format. 
            
            type_index := self.function_types[i+n];
            signature  := self.w.types[type_index.id.zext()]&;
            args := translate_types(fr, signature.arg.items(), true);
            rets := translate_types(fr, signature.ret.items(), false);
            fn_type: FnType = (arg = fr.tuple_of(args), ret = fr.tuple_of(rets), arity = args.len.trunc());
            
            id := self.functions[i+n];
            name := fr.intern_string(m.str(id));
            func := empty_fn(fn_type, name, loc);
            fill_bindings(func&, fr, args);
            func&.set_flag(.ResolvedSign);
            func&.set_flag(.ResolvedBody);
            func&.set_flag(.EnsuredCompiled);
            
            fid := fr.intern_func(func&); func := fr.get_function(fid);
            fns[i+n] = fid;
            fr.add_to_scope(export_to, func.name, fr.intern_type(Fn = fn_type), fid);
            use_symbol(m, id) { s |
                s.got_lookup_offset = i+n;
            };
        };
        
        range(0, self.w.code.len) { i |
            f := temp().box(Qbe.Fn);
            self&.translate_func(i, f);
            {
                i := 0;
                f.rpo = new(f.nblk.intcast());
                for_blocks f { b |
                    b.id = i.intcast();
                    f.rpo[i] = b;
                    i += 1;
                };
            };
            
            func    := fr.get_function(fns[i+n]);
            funcs   := a.alloc_zeroed(FuncId, f.ncon.zext());
            datas   := a.alloc_zeroed(BakedVarId, f.ncon.zext());
            callees := FuncId.list(a);
            
            enumerate f.con.slice(0, f.ncon.zext()) { i, c |
                if c.type == .CAddr {
                    name := m.str(c.sym.id);
                    use_symbol(m, c.sym.id) { s |
                        if s.got_lookup_offset < 0 {
                            @panic("TODO: import_wasm data");
                        } else {
                            funcs[i] = fns[s.got_lookup_offset];
                            callees&.push(funcs[i]);
                        }
                    };
                };
            };
            
            func.callees = callees.as_raw();
            func.body = (Ir = (fn_internal = Qbe.Fn.int_from_ptr(f), data = datas, funcs = funcs));
        };
    };
}

fn translate_types(fr: CompCtx, w: []Wasm.ValType, prepend_pointer: bool) []Type = {
    types := Type.list(w.len + int(prepend_pointer), temp());
    if prepend_pointer {  // TODO: maybe this should be a rawptr instead
        u8 := fr.intern_type(Int = (bit_count = 8, signed = false));  // :SLOW
        types&.push(fr.intern_type(Ptr = u8));
    }
    
    for w { w | 
        types&.push(@match(w) {  // :get_or_create_type
            fn I32() => u32;
            fn I64() => i64;  
            fn F32() => f32;
            fn F64() => f64;
            @default => @panic("TODO: invalid wasm->franca type %", w);
        });
    }
    types.items()
}

#use("@/compiler/ast_external.fr");
