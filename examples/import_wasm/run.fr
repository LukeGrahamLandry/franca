#use("@/examples/import_wasm/convert.fr");
#use("@/examples/import_wasm/parse.fr");
#include_std("backend/lib.fr");  // TODO: garbage that this needs to be in the root scope

// TODO: -o to output a binary
// TODO: use fill_backend_vtable to toggle between recompiling 
//       and using the host's backend when running as a driver 
//       (see import_c for an example). 

fn main() void = {
    args := cli_args();
    logging := "";
    i := 0;
    wasm_file := "";
    if true {
        break :: local_return;
        while => i < args.len {
            arg := args[i].str(); i += 1;
            if arg == "-d" {
                @assert_lt(i, args.len, "expected arg after -d");
                logging = args[i].str(); i += 1;
            }
            if arg.ends_with(".wasm") {
                @assert_eq(wasm_file, "", "can only specify one wasm file to run");
                wasm_file = arg;
            }
            if arg == "--" {
                break();
            }
        }
    }
    args := args.rest(i - 1);  // meh, for now: argv[0] == "--"
    
    #use("@/lib/sys/fs.fr");
    bytes := temp().read_to_string_or_crash(wasm_file).items(); // :panic
    exec_wasm_file(Exports, bytes, logging, args);
}

fn exec_wasm_file($Exports: Type, bytes: []u8, logging: Str, args: []CStr) void = {
    module := QbeModule.zeroed(); m := module&;
    init_default_module(m, (type = .JitOnly, os = query_current_os(), arch = query_current_arch()));
    a := libc_allocator;
    m.set_debug_types(logging, true);
    
    w: WasmModule = empty(a);
    p: ParseWasm = (w = w&, src = bytes);
    or parse_wasm(p&) { e |
        @panic("% (at byte index %)", e, p.cursor);
    };
    
    buf := page_allocator.alloc(u8, 1.shift_left(32)); // wasm.w.memories[0].min.zext() * wasm_page_size);
    wasm_context_pointer := u8.int_from_ptr(buf.ptr);
    heap_base[] = trunc(buf.len - 1);

    // write the cli arguments into memory the module can access. 
    // i'm making each entry in argv 8 bytes because then my programs 
    // that use Kl for pointers don't need to change, but it means 
    // you probably won't have success using this with anyone else's wasm modules. 
    argc, argv := {
        arg_offsets := i64.list(temp());
        for args { s | 
            s := s.str();
            heap_base[] -= align_to(s.len.trunc() + 1, 16);
            buf.subslice(heap_base[].zext(), s.len).copy_from(s);
            buf[heap_base[].zext() + s.len] = 0;
            arg_offsets&.push(heap_base[].zext());
        };
        arg_offsets&.push(0);
        src := arg_offsets.items().interpret_as_bytes();
        heap_base[] -= align_to(src.len, 16).trunc();
        buf.subslice(heap_base[].zext(), src.len).copy_from(src);
        (arg_offsets.len - 1, heap_base[])
    };
    
    self: LoadWasm = init(m, w&, libc_allocator);
    self&.load_module();
    exports := comptime_exports(Exports);
    fill_imports(self&, exports);
    initializer := self&.create_init_func();
    
    m.emit_suspended_inlinables();
    m.make_exec();
    init_data, _ := m.get_addr(initializer).expect("init compiled");
    init_data := assume_types_fn(Arg = i64, Ret = void, ptr = init_data);
    init_data(wasm_context_pointer);
    
    // TODO: there's a segment where it tells you the entry point
    exports := self&.collect_exports(temp());
    main := exports.index_of(fn(it) => m.str(it[]) == "main$module")
        || @panic("expected export called 'main'");
    n := exports[main];
    f, _ := or m.get_addr(n) {
        @panic("couldn't find %: %", n.id, m.str(n));
    };
    //@println(">>> Calling %", wasm.m.str(n));
    f := assume_types_fn(Arg = Ty(i64, u32, u32), Ret = i64, ptr = f);
    result := f(wasm_context_pointer, argc.trunc(), argv);
    if result != 0 {
        @eprintln(">>> returned %", result);
    };
    page_allocator.dealloc(u8, buf);
}

heap_base :: @static(u32) 0;  // TODO: BAD!

// TODO: make it easy to ship these as a binary form of the ir so you can inline accross host calls. 
Exports :: @struct {
    host :: @struct {
        write :: fn(ctx: *u8, ptr: u32, len: u32) void = {
            s: []u8 = (ptr = ctx.offset(ptr.zext()), len = len.zext());
            println(s);
        }
    }
    env :: @struct {
        putchar :: fn(_: *u8, c: u8) void = {
            putchar_UNBUFFERED(c);
        }
        getchar :: fn(_: *u8) u8 = {
            getchar_UNBUFFERED().zext().trunc()
        }
        puts :: fn(ctx: *u8, p: u32) void = {
            s: CStr = (ptr = ctx.offset(p.zext()));
            @println("%", s);
        }
        strlen :: fn(ctx: *u8, p: u32) i64 = {
            s: CStr = (ptr = ctx.offset(p.zext()));
            s.slow_len()
        }
        labs :: fn(ctx: *u8, i: i64) i64 = i.abs();
        calloc :: fn(ctx: *u8, m: u32, n: u32) u32 = {  // HACK
            heap_base[] -= align_to(m*n, 16);
            heap_base[]
        }
        // clocking in for my shift at the garbage pasta factory FIXME PLEASE
        vprintf :: fn(ctx: *u8, fmt: u32, valist: u32) u32 = {
            arg_p := ptr_cast_unchecked(u8, i64, ctx.offset(valist.zext()));
            out := u8.list(temp());
            printf_impl(out&, ctx, fmt, arg_p);
            print(out.items());
            out.len.trunc()
        }
        printf :: fn(ctx: *u8, fmt: u32, args: i64) u32 = {
            out := u8.list(temp());
            printf_impl(out&, ctx, fmt, args&);
            print(out.items());
            out.len.trunc()
        }
        sprintf :: fn(ctx: *u8, dest: u32, fmt: u32, args: i64) u32 = {
            out := u8.list(temp());
            printf_impl(out&, ctx, fmt, args&);
            dest := ctx.offset(dest.zext());
            dest.slice(out.len).copy_from(out.items());
            out.len.trunc()
        }
        vsprintf :: fn(ctx: *u8, dest: u32, fmt: u32, valist: u32) u32 = {
            arg_p := ptr_cast_unchecked(u8, i64, ctx.offset(valist.zext()));
            out := u8.list(temp());
            printf_impl(out&, ctx, fmt, arg_p);
            dest := ctx.offset(dest.zext());
            dest.slice(out.len).copy_from(out.items());
            out.len.trunc()
        }
        abort :: fn(ctx: *u8) void = {
            panic("wasm called abort");
        }
        exit :: fn(ctx: *u8, status: u32) void = {
            Syscall'exit(status.zext());
        }
        strcmp :: fn(ctx: *u8, a: u32, b: u32) i32 = {
            a: CStr = (ptr = ctx.offset(a.zext()));
            b: CStr = (ptr = ctx.offset(b.zext()));
            strcmp :: fn(a: CStr, b: CStr) i32 #libc;
            strcmp(a, b)
        }
        memcmp :: fn(ctx: *u8, a: u32, b: u32, n: u32) i32 = {
            a := ctx.offset(a.zext());
            b := ctx.offset(b.zext());
            memcmp :: fn(a: *u8, b: *u8, n: i64) i32 #libc;
            memcmp(a, b, n.zext())
        }
        memcpy :: fn(ctx: *u8, a: u32, b: u32, n: u32) i32 = {
            a := ctx.offset(a.zext());
            b := ctx.offset(b.zext());
            memcpy :: fn(a: *u8, b: *u8, n: i64) i32 #libc;
            memcpy(a, b, n.zext())
        }
        strncmp :: fn(ctx: *u8, a: u32, b: u32, n: u32) i32 = {
            a := ctx.offset(a.zext());
            b := ctx.offset(b.zext());
            strncmp :: fn(a: *u8, b: *u8, n: i64) i32 #libc;
            strncmp(a, b, n.zext())
        }
    }
}

// ðŸ¤¡ ðŸ¤¡ ðŸ¤¡ ðŸ¤¡ ðŸ¤¡ ðŸ¤¡ ðŸ¤¡ ðŸ¤¡ ðŸ¤¡ ðŸ¤¡ ðŸ¤¡ ðŸ¤¡ ðŸ¤¡ ðŸ¤¡ ðŸ¤¡ ðŸ¤¡ 
// blehhhhh todo
printf_impl :: fn(out: *List(u8), ctx: *u8, fmt_s: u32, args: *i64) void = {
    i := 0;
    c :: fn(i) => ctx.offset(i + fmt_s.zext())[];
    get_arg :: fn($T) T #generic => {
        args[] = align_to(args[], ::align_of(T));
        value := ptr_cast_unchecked(u8, T, ctx.offset(args[]))[];
        args[] += ::size_of(T);
        value
    };
    putchar :: Exports.env.putchar;
    while => c(i) != 0 {
        if c(i) != "%".ascii() {
            out.push(c(i));
            i += 1;
        } else {
            i += 1;
            @switch(c(i)) {
                @case("l".ascii()) => {
                    if c(i + 1) == "l".ascii() && c(i + 2) == "d".ascii() {
                        i += 3;
                        @fmt(out, "%", get_arg(i64));
                    } else {
                        if c(i + 1) == "d".ascii() {
                            i += 2;
                            @fmt(out, "%", get_arg(i64));
                        };
                    };
                }
                @case("d".ascii()) => {
                    i += 1;
                    @fmt(out, "%", get_arg(i32));
                }
                @case("g".ascii()) => {
                    i += 1;
                    snprintf :: fn(buf: *u8, len: i64, fmt: CStr, _: CVariadic) i64 #libc;
                    x := get_arg(f64);
                    //@print("%", x);  // TODO: just fix my float printing to not suck
                    out.reserve(64);
                    n := snprintf(out.maybe_uninit.ptr.offset(out.len), 64, "%g", @va x);
                    @debug_assert(n < 64);
                    out.len += n;
                }
                @case("f".ascii()) => {  // TODO: this is a copy-paste
                    i += 1;
                    snprintf :: fn(buf: *u8, len: i64, fmt: CStr, _: CVariadic) i64 #libc;
                    x := get_arg(f64); 
                    //@print("%", x);  // TODO: just fix my float printing to not suck
                    out.reserve(64);
                    n := snprintf(out.maybe_uninit.ptr.offset(out.len), 64, "%f", @va x);
                    @debug_assert(n < 64);
                    out.len += n;
                }
                @case("c".ascii()) => {
                    i += 1;
                    push(out, get_arg(u32).trunc());
                }
                @case("s".ascii()) => {
                    i += 1;
                    p := get_arg(i64);  // TODO: this should be u32 but then the ir needs to know what's a pointer 
                    
                    // when this was in the Exports struct
                    // this isn't what you want anyway but its still a compiler bug
                    //puts(ctx, p);  // TODO: You can't have a void pointer 4582761636 as a constant :FUCKED
                    
                    s: CStr = (ptr = ctx.offset(p));
                    @fmt(out, "%", s);
                }
                // TODO: fix this!! i just dont care rn. 
                @case("0".ascii()) => {
                    @assert_eq(ctx.offset(i + fmt_s.zext()).slice(3), "08x", "HACK to make load2.ssa work");
                    i += 3;
                    x := get_arg(u32);
                    range_rev(0, 4) { i |
                        push_hex_byte(out, x.shift_right_logical(8*i).trunc(), false);
                    };
                }
                // TODO: fix this!! i just dont care rn. 
                @case("#".ascii()) => {
                    @assert_eq(ctx.offset(i + fmt_s.zext()).slice(5), "#010x", "HACK to make ops.ssa work");
                    i += 5;
                    x := get_arg(u32);
                    @fmt(out, "0x");
                    range_rev(0, 4) { i |
                        push_hex_byte(out, x.shift_right_logical(8*i).trunc(), false);
                    };
                }
                // TODO: fix this!! i just dont care rn. 
                @case(".".ascii()) => {
                    // HACK to make abi8.ssa work
                    if ctx.offset(i + fmt_s.zext()).slice(4) == ".17s" {
                        i += 4;
                        p := get_arg(i64);  // TODO: this should be u32 but then the ir needs to know what's a pointer 
                        @fmt(out, "%", ctx.offset(p).slice(17));
                    } else {
                        // HACK to make function.c work
                        if ctx.offset(i + fmt_s.zext()).slice(3) == ".1f" {
                            i += 3;
                            snprintf :: fn(buf: *u8, len: i64, fmt: CStr, _: CVariadic) i64 #libc;
                            x := get_arg(f64); 
                            //@print("%", x);  // TODO: just fix my float printing to not suck
                            out.reserve(64);
                            n := snprintf(out.maybe_uninit.ptr.offset(out.len), 64, "%.1f", @va x);
                            @debug_assert(n < 64);
                            out.len += n;
                        } else {
                            @panic("TODO: proper printf");
                        }
                    }
                }
                @case("%".ascii()) => {
                    push(out, c(i));  // :SLOW
                    i += 1;
                }
                @default => ();
            };
        };
    };
}
#use("@/lib/variadic.fr");