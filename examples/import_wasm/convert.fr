#include_std("backend/lib.fr");
#include_std("examples/import_wasm/parse.fr");

// TODO: this could be hella faster: 
//       - there's a wasteful prepass that splits up bits of the module into a big data structure. 
//       - the parser+wasm->ir could be on a different thread from the ir->asm + you could compile multiple functions in parallel,
//         but that requires more careful use of temp() which will be easier once i implement thread locals in Franca. 
//       - the number of bounds checks the parser does per byte is a bit sad. 
//       - the way i deal with adjusting indexes for imports is silly. 
//       - could inline more if we pre-sorted based on callgraph,
//         but maybe the expectation with wasm is that the first compiler did that already?

fn main() void = {
    panic("TODO: need to set f.lnk.id to intern(name)");
    args := cli_args();
    for args { arg | 
        arg := arg.str();
        if arg.ends_with(".wasm") {
            @eprint("Loading '%'", arg);
            bytes := temp().read_to_string(arg).items(); // :panic
            @eprintln(" (% bytes).", bytes.len);
            xx := query_current_arch();
            module := init_default_module(type = .JitOnly, os = query_current_os(), arch = xx.unwrap());
            a := libc_allocator;
            wasm: LoadWasm = (
                m = module&,
                w = empty(a),
                stack = list(a),
                locals = empty(),
                referenced_globals = init(temp()),
            );
            p: ParseWasm = (w = wasm.w&, src = bytes);
            or parse_wasm(p&) { e |
                @panic("% (at byte index %)", e, p.cursor);
            };
            wasm&.load_module();
            
            module&.emit_suspended_inlinables();
            module&.make_exec();
            f := or module&.get_addr("module_f2") {
                panic("couldn't find module_f2()")
            };
            f := assume_types_fn(Arg = Ty(i64, i32, i32), Ret = i32, ptr = f);
            wasm_context_pointer := 0;
            result := f(wasm_context_pointer, 1, 2);
            @println("1 + 2 = %", result);
        };
    };
}

LoadWasm :: @struct(
    m: *QbeModule,
    w: Wasm.Module,
    stack: List(Qbe.Ref),
    locals: []Qbe.Ref,  // TODO: we can't store a 128 bit vector in a temporary 
    f := zeroed(*Qbe.Fn),
    src := "",
    cursor := 0,
    referenced_globals: HashMap(i64, Qbe.Ref), 
    module_name := "module",
    global_store := QbeNull,
    data_symbol: []u32 = empty(),
    blk := zeroed(*Qbe.Blk),
);

fn create_init_func(self: *LoadWasm) void = {
    //f := Qbe.Fn.zeroed();
    //self.f = f&;
    //self.f.default_init(self.m);
    //self.f.start = newblk();
    //self.stack&.clear();
    //self.datas = libc_allocator.alloc(u32, self.w.data.len);
    //enumerate self.w.data { i, it |
    //    name := @tfmt("%_f%", self.module_name, local_func_i);    // :WasmNameMangling
    //    self.data_symbol[i] = 
    //};
    //self.f.copy_instructions_from_scratch_reversed_which_means_forwards(self.f.start);
    //self.f.start.jmp.type = .ret0;
    //self.f.nblk = 1;
    //printfn(self.f, self.f.globals.debug_out);
}

fn load_module(self: *LoadWasm) void = {
    self.create_init_func();

    enumerate self.w.code& { local_func_i, code | 
        local_func_i += self.w.imported_function_count;
        mark := mark_temporary_storage();
        f := Qbe.Fn.zeroed();
        self.f = f&;
        self.f.default_init(self.m);
        
        name := @tfmt("%_f%", self.module_name, local_func_i);    // :WasmNameMangling
        self.f.name&.items().slice(0, name.len).copy_from(name);  // :UnacceptablePanic
        
        local_func_type := self.w.types[local_func_i]&;
        self.stack&.clear();
        self.locals = temp().alloc(Qbe.Ref, code.total_local_count + local_func_type.arg.len);
        self.referenced_globals = init(temp());
        self.global_store = self.f.newtmp("wasm_globals", .Kl);
        self.f.emit(.par, .Kl, self.global_store, QbeNull, QbeNull);
        
        // parameters come in as locals not on the stack
        range(0, local_func_type.arg.len) { i |
            k := local_func_type.arg[i].cls();
            self.locals[i] = self.f.newtmp("param", k);
            self.f.emit(.par, k, self.locals[i], QbeNull, QbeNull);
        };
        
        {
            @println("% locals", code.total_local_count);
            i := local_func_type.arg.len;
            for code.locals& { local |
                k := local.ty.cls();
                range(0, local.count) { _ |
                    self.locals[i] = self.f.newtmp("local", k);
                    i += 1;
                };
            };
        };
        
        self.src = code.insts.items();
        self.cursor = 0;
        while => self.cursor < self.src.len {
            continue :: local_return;
            @println("inst %", self.src[self.cursor]);
            
            inst := self.src[self.cursor];
            self.cursor += 1;
            encoding: i64 = wasm_single_byte_table[inst.zext()].zext();
            
            // Single byte unary/binary instructions are found in the table. 
            o := @as(Qbe.O) @as(i32) intcast(encoding.shift_right_logical(8).bit_and(255));
            k := @as(Qbe.Cls) @as(i16) trunc(intcast(encoding.shift_right_logical(4).bit_and(0b1111)));
            kind := encoding.bit_and(0b1111);
            a0, a1, r := (QbeNull, QbeNull, QbeNull);
            @switch(kind) {
                @case(0) => ();
                @case(1) => {  // unary
                    r = self.f.newtmp("wasm", k);
                    a := self.stack[self.stack.len - 1]&;
                    a0 = a[];
                    a[] = r;
                };
                @case(2) => {  // binary
                    r = self.f.newtmp("wasm", k);
                    a0 = self.stack[self.stack.len - 1];
                    b := self.stack[self.stack.len - 2]&;
                    self.stack.len -= 1;
                    a1 = b[];
                    b[] = r;
                };
                @case(3) => { // load
                    align := self.read_u();
                    offset := self.read_u();
                    println("TODO: wasm load"); kind = 0;
                    self.stack&.pop().unwrap();
                    self.stack&.push(QbeNull);
                    continue(); // TODO
                };
                @case(4) => { // store
                    align := self.read_u();
                    offset := self.read_u();
                    println("TODO: wasm store"); 
                    self.stack&.pop().unwrap();
                    self.stack&.pop().unwrap();
                    continue(); // TODO
                };
                @default => unreachable();
            };
            
            if kind != 0 {
                @debug_assert(r != QbeNull || a0 != QbeNull);
                self.f.emit(o, k, r, a0, a1);
                continue();
            };
            
            // Otherwise it's a more complicated instruction. 
            self.emit_instruction(@as(Wasm.Inst) inst)
        };
        self.f.lnk.export = true; // TODO
        self.f.start = newblk();
        self.blk = self.f.start;
        self.f.copy_instructions_from_scratch_reversed_which_means_forwards(self.f.start);
        self.emit_return(local_func_type.ret.items());
        self.f.nblk = 1;
        printfn(self.f, self.f.globals.debug_out);
        each self.f.globals.debug { d | 
            d[] = true;
        };
        run_qbe_passes(self.f);
        reset_temporary_storage(mark);
    };
}

// Simple instructions are handled by the table before calling this. 
fn emit_instruction(self: *LoadWasm, inst: Wasm.Inst) void = {
    ::enum(Wasm.Inst);
    @switch(inst) {
        @case(.I32_Const) => {
            value := self.read_u();
            self.stack&.push(self.f.getcon(value.bitcast()));
        };
        @case(.I64_Const) => {
            value := self.read_u();
            self.stack&.push(self.f.getcon(value.bitcast()));
        };
        @case(.LocalGet) => self.local_inst(1);
        @case(.LocalSet) => self.local_inst(-1);
        @case(.LocalTee) => self.local_inst(0);
        @case(.Call) => {
            callee := self.read_index(FuncIdx);
            @println("% func", callee.id);
            import := self.w&.find_import_index(0, callee.id.zext());
            ::if(TypeIdx);
            type_index := if import.is_some() {
                import := self.w.imports&.index(import.Some);
                import.desc.Function
            } else {
                self.w.functions[callee.id.zext() - self.w.imported_function_count]
            };
            callee := self.remap_global(0, callee.id.zext());
            self.emit_call_from_stack(callee, type_index);
            println("call!");
        };
        @case(.Return) => {
            println("return!");
        };
        @case(.End) => {
            println("end!");
        };
        @case(.GlobalSet) => {
            println("TODO: global.set");
            i := self.read_u();
            val := self.stack&.pop();
        };
        @case(.GlobalGet) => {
            println("TODO: global.get");
            i := self.read_u();
            val := QbeNull;
            self.stack&.push(val);
        };
        @case(.VectorPrefix) => panic("Vector instructions are not supported (0xFD prefix)");
        @default => {
            @panic("unhandled unstruction %", self.src[self.cursor - 1]);
        };
    }
}

fn local_inst(self: *LoadWasm, delta: i64) void = {
    i    := self.read_u();
    var  := self.locals[i.bitcast()];
    t    := self.f.get_temporary(var);
    dest := if(delta == 1, => self.f.newtmp("get", t.cls), => var);
    src  := if(delta == 1, => var, => self.stack[self.stack.len - 1]);
    self.stack.len += delta;
    if delta == 1 {
        self.stack[self.stack.len - 1] = dest;
    };
    self.f.emit(.copy, t.cls, dest, src, QbeNull);
}

fn emit_return(self: *LoadWasm, return_types: []Wasm.ValType) void = {
    @debug_assert(self.blk.jmp.type == .Jxxx, "tried to return from terminated block");
    @switch(return_types.len) {
        @case(0) => {
            self.blk.jmp.type = .ret0;
        };
        @case(1) => {
            @assert(return_types[0].cls() == .Kw, "// TODO: correct cls");
            self.blk.jmp = (type = .retw, arg = self.stack[self.stack.len - 1]);
            self.stack.len -= 1;
        };
        @default => panic("TODO: handle multiple returns");
    };
}

fn emit_call_from_stack(self: *LoadWasm, callee: Qbe.Ref, type: TypeIdx) void = {
    @println("% type", type.id);
    type := self.w.types[type.id.zext()]&;
    @assert_le(type.arg.len, self.stack.len, "not enough stack for call");
    
    self.f.emit(.arg, .Kl, QbeNull, self.global_store, QbeNull);
    range(0, type.arg.len) { i |
        ref := self.stack[self.stack.len - type.arg.len + i];
        k := type.arg[i].cls();
        self.f.emit(.arg, k, QbeNull, ref, QbeNull);
    };
    self.stack.len -= type.arg.len;
    @switch(type.ret.len) {
        @case(0) => {
            self.f.emit(.call, .Kw, QbeNull, callee, QbeNull);
        };
        @case(1) => {
            ref := self.f.newtmp("ret", type.ret[0].cls());
            self.f.emit(.call, .Kw, ref, callee, QbeNull);
            self.stack&.push(ref);
        };
        @default => panic("TODO: handle multiple returns");
    };
}

fn remap_global(self: *LoadWasm, kind: i64, id: i64) Qbe.Ref = {
    @debug_assert(kind < 4, "remap_global");
    key := kind.shift_left(32).bit_or(id);
    if self.referenced_globals&.get(key) { local | 
        return(local);
    };
    ref: Qbe.Ref = @switch(key) {
        @case(0) => { // func 
            import := self.w&.find_import_index(kind, id);
            name := if import.is_some() {
                // TODO: no this doesn't make any since, the binding of names should happen separately. 
                import := self.w.imports&.index(import.Some);
                @tfmt("%_f%", import.module.items(), import.name.items())
            } else {
                // :WasmNameMangling
                @tfmt("%_f%", self.module_name, id)
            };
            id := self.m.intern(name);
            self.f.unique_named_con(id, 0)
        };
        @default => panic("TODO: remap global to local ref");
    };
    self.referenced_globals&.insert(key, ref);
    ref
}

// TODO: this is stupid. store them in seperate arrays. surely you never need to refer to them by an untyped import index. 
fn find_import_index(self: *Wasm.Module, kind: i64, id: i64) ?i64 = {
    i := 0;
    each self.imports& { check | 
        ::tagged(@type check.desc);
        if check.desc&.tag().raw() == kind {
            if i == id {
                return(Some = i);
            };
            i += 1;
        };
    };
    .None
}

// (dest_offset, src_offset_in_data, size_to_copy)  // TODO: make sure those arguments are right
fn emit_memory_init(self: *Wasm.Module, data_id: i64) void = {
    todo()
}

// (op:8, k:4, kind:4)
// 0: not a simple op
// 1: (a)    -> (c)
// 2: (a, b) -> (c)
// 3: load [imm] (a) -> c
// 4: store [imm] (a, b) -> ()
wasm_single_byte_table :: @wasm_single_byte_data(
    (0x28, .Kw, .load, 3),
    (0x29, .Kl, .load, 3),
    (0x2A, .Ks, .load, 3),
    (0x2B, .Kd, .load, 3),
    (0x2C, .Kw, .loadsb, 3),
    (0x2D, .Kw, .loadub, 3),
    (0x2E, .Kw, .loadsh, 3),
    (0x2F, .Kw, .loaduh, 3),
    (0x30, .Kl, .loadsb, 3),
    (0x31, .Kl, .loadub, 3),
    (0x32, .Kl, .loadsh, 3),
    (0x33, .Kl, .loaduh, 3),
    (0x34, .Kl, .loadsw, 3),
    (0x35, .Kl, .loaduw, 3),
    
    (0x36, .Kw, .storew, 4),
    (0x37, .Kw, .storel, 4),
    (0x38, .Kw, .stores, 4),
    (0x39, .Kw, .stored, 4),
    (0x3A, .Kw, .storeb, 4),
    (0x3B, .Kw, .storeh, 4),
    (0x3C, .Kw, .storeb, 4),
    (0x3D, .Kw, .storeh, 4),
    (0x3E, .Kw, .storew, 4),
    
    // 
    (0x46, .Kw, .ceqw, 2),
    (0x47, .Kw, .cnew, 2),
    (0x48, .Kw, .csltw, 2),
    (0x49, .Kw, .cultw, 2),
    (0x4A, .Kw, .csgtw, 2),
    (0x4B, .Kw, .cugtw, 2),
    (0x4C, .Kw, .cslew, 2),
    (0x4D, .Kw, .culew, 2),
    (0x4E, .Kw, .csgew, 2),
    (0x4F, .Kw, .cugew, 2),
    
    // 
    (0x51, .Kw, .ceql, 2),
    (0x52, .Kw, .cnel, 2),
    (0x53, .Kw, .csltl, 2),
    (0x54, .Kw, .cultl, 2),
    (0x55, .Kw, .csgtl, 2),
    (0x56, .Kw, .cugtl, 2),
    (0x57, .Kw, .cslel, 2),
    (0x58, .Kw, .culel, 2),
    (0x59, .Kw, .csgel, 2),
    (0x5A, .Kw, .cugel, 2),
    
    (0x5B, .Kw, .ceqs, 2),
    (0x5C, .Kw, .cnes, 2),
    (0x5D, .Kw, .clts, 2),
    (0x5E, .Kw, .cgts, 2),
    (0x5F, .Kw, .cles, 2),
    (0x60, .Kw, .cges, 2),
    
    (0x61, .Kw, .ceqd, 2),
    (0x62, .Kw, .cned, 2),
    (0x63, .Kw, .cltd, 2),
    (0x64, .Kw, .cgtd, 2),
    (0x65, .Kw, .cled, 2),
    (0x66, .Kw, .cged, 2),
    
    //
    (0x6A, .Kw, .add, 2),
    (0x6B, .Kw, .sub, 2),
    (0x6C, .Kw, .mul, 2),
    (0x6D, .Kw, .div, 2),
    (0x6E, .Kw, .udiv, 2),
    (0x6F, .Kw, .rem, 2),
    (0x70, .Kw, .urem, 2),
    (0x71, .Kw, .and, 2),
    (0x72, .Kw, .or, 2),
    (0x73, .Kw, .xor, 2),
    (0x74, .Kw, .shl, 2),
    (0x75, .Kw, .sar, 2),
    (0x76, .Kw, .shr, 2),
    //
    
    //
    (0x7C, .Kl, .add, 2),
    (0x7D, .Kl, .sub, 2),
    (0x7E, .Kl, .mul, 2),
    (0x7F, .Kl, .div, 2),
    (0x80, .Kl, .udiv, 2),
    (0x81, .Kl, .rem, 2),
    (0x82, .Kl, .urem, 2),
    (0x83, .Kl, .and, 2),
    (0x84, .Kl, .or, 2),
    (0x85, .Kl, .xor, 2),
    (0x86, .Kl, .shl, 2),
    (0x87, .Kl, .sar, 2),
    (0x88, .Kl, .shr, 2),
    //
    
    //
    (0x8C, .Ks, .neg, 1),
    //
    (0x92, .Ks, .add, 2),
    (0x93, .Ks, .sub, 2),
    (0x94, .Ks, .mul, 2),
    (0x95, .Ks, .div, 2),
    //
    
    //
    (0x9A, .Kd, .neg, 1),
    //
    (0xA0, .Kd, .add, 2),
    (0xA1, .Kd, .sub, 2),
    (0xA2, .Kd, .mul, 2),
    (0xA3, .Kd, .div, 2),
    //
    
    //
    (0xBC, .Kw, .cast, 1),
    (0xBD, .Kl, .cast, 1),
    (0xBE, .Ks, .cast, 1),
    (0xBF, .Kd, .cast, 1),
);

fn wasm_single_byte_data(e: FatExpr) FatExpr #macro = {
    table := ast_alloc().alloc_zeroed(u16, 256);
    each e&.items() { e |
        e := e.items();
        b, k, o, kind := (const_eval(u8)(e[0]), const_eval(Qbe.Cls)(e[1]), const_eval(Qbe.O)(e[2]), const_eval(u8)(e[3]));
        @debug_assert(o.raw() < 255, "overflow #Qbe.O");
        @debug_assert(kind <= 0b1111, "overflow wasm encoding kind");
        @debug_assert(table[b.zext()] == 0, "opcode % listed twice", b);
        table[b.zext()] = (@as(u32) kind.zext().bit_or(o.raw().bitcast().shift_left(8)).bit_or((@as(i64) k.raw().zext()).trunc().shift_left(4))).trunc();
    };
    @literal table
}
