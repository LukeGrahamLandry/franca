// compile a bf program to c code. 
// then use import_c to call that c code from franca. 
// import_c is just a c compiler written in franca that happens to run at comptime. 

C :: import("@/examples/import_c/lib.fr");
#include_std("backend/lib.fr");

to_c_source :: fn(code: Str, name: Str) []u8 = {
    out := u8.list(code.len * 5, ast_alloc()); 
    #use("@/examples/bf/README.fr");
    ::enum(Bf);
    
    @fmt(out&, "void %(unsigned char *p, void (*putchar)(unsigned char), unsigned char (*getchar)(void)) {", name);
	for code { c | @switch(@as(Bf) c) {
        @case(.Inc)    => out&.push_all("(*p)+=1;");
        @case(.Dec)    => out&.push_all("(*p)-=1;");
        @case(.Right)  => out&.push_all("p+=1;");
        @case(.Left)   => out&.push_all("p-=1;");
        @case(.Output) => out&.push_all("(*putchar)(*p);");
        @case(.Input)  => out&.push_all("*p=(*getchar)();");
        @case(.Open)   => out&.push_all("while(*p!=0){");
        @case(.Close)  => out&.push_all("}");
        @default()     => ();
    }}
    out&.push_all("}");

	out.items()
}

// TODO: be able to export the name directly from the c compiler?
print_hello_world :: to_function(import("@/examples/bf/README.fr").HELLO_WORLD, "print_hello_world_from_c");

main :: fn() void = :: {
    putchar :: fn(c: u8) void #libc;
    getchar :: fn() u8 #libc;
    mem := temp().alloc_zeroed(u8, 30000);
    print_hello_world(mem.ptr, putchar, getchar);
}

// GARBAGE: for now all the import_c stuff is very experimental. the api will eventually get less painful. 
fn to_function($bf_source: Str, $name: Str) FuncId = {  // :FfiNamespaceHacks
    c_source :: to_c_source(bf_source, name); 
    Ffi :: import("@/examples/import_c/ffi.fr");
    S :: Ffi'include(c_source);
    S.print_hello_world_from_c  // TODO: should be using `name` so you could call this multiple times
}
