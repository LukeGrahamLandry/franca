// Learning Franca with Entirely too Many BFs
// 
// This is several programs that all do the same thing: 
// execute a brainfuck program to print everyone's favourite message. 
// 
// The boring implementation reads the string at runtime and executes 
// as it goes (it's an interpreter). However, this language has more tricks 
// up its sleeve. The rest of these programs use various forms of comptime 
// meta programming to statically compile the bf program into the franca program. 
// Doing it this way moves computation out of the runtime and means the source 
// of the bf program does not exist in the final executable. 
// 
// The programs all involve translating the bf code into some 
// more useful representation and then showing how to include that in your program. 
// Here are the formats we will use: 
// - a string of franca source code
// - franca backend ir data structure 
// - a string of c source code
// - a web assembly binary module 
// Obviously using bf as the input source is a toy example but hopefully you can 
// use your imagination and how this power could be extended to something more useful. 
//

// From https://esolangs.org/wiki/Brainfuck#Hello,_World!
HELLO_WORLD :: "++++++++[>++++[>++>+++>+++>+<<<<-]>+>+>->>+[<]<-]>>.>---.+++++++..+++.>>.<-.<.+++.------.--------.>>+.>++.";

Bf :: @enum(u8) (
    Right  = 0x3E,  // >
    Left   = 0x3C,  // <
    Inc    = 0x2B,  // +
    Dec    = 0x2D,  // -
    Output = 0x2E,  // .   output the byte in the cell
    Input  = 0x2C,  // ,   read a byte of input to the cell
    Open   = 0x5B,  // [   jump past matching ] if ptr[].eq(0)
    Close  = 0x5D,  // ]   jump back to matching [ if ptr[].ne(0)
);
