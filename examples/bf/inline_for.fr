#use("@/examples/bf/README.fr");
main :: fn() void = {
    bf_source :: HELLO_WORLD;
    mem := temp().alloc_zeroed(u8, 30000).as_ptr();
    block(mem&, bf_source);
}

block :: fn(mem: **u8, $bf_source: Str) void = {
    ::enum(Bf);
    depth :: @static(i64) 0;
    inline_range(0, bf_source.len()) { $i |
        enable :: depth[] == 0;
        @run enable;  // force evaluation now
        
        @inline_switch(@as(Bf) bf_source[i]) {
            @case(Bf.Inc) => @if(enable) {
                mem[][] += 1;
            }
            @case(.Dec) => @if(enable) {
                mem[][] -= 1;
            }
            @case(.Right) => @if(enable) {
                mem[] = mem[].offset(1);
            }
            @case(.Left) => @if(enable) {
                mem[] = mem[].offset(-1);
            }
            @case(.Output) => @if(enable) {
                putchar_UNBUFFERED(mem[][]);
            }
            @case(.Input) => @if(enable) {
                mem[][] = getchar_UNBUFFERED();
            }
            @case(.Open) => {
                @run { depth[] += 1; };
                @if(enable) while => mem[][] != 0 {
                    block(mem, bf_source.rest(i+1));
                };
            }
            @case(.Close)  => {
                @run { depth[] -= 1; };
                @if(enable) {
                    @run { depth[] = 999999999; };
                    return();
                };
            }
            @default()     => ();
        }
    };
}
