//!
//! Here we write a BrainFuck frontend so you can write individual functions with that. 
//! They're not interpreted at runtime, the translation to ir happens at comptime,
//! and then they're fed through the same backend as the rest of your program.
//!
//! You can check this yourself by running `strings` on an AOT binary of this program. 
//! You'll notice that the bf text source code isn't in there because we don't need it. 
//! If you run `objdump` you'll find the code for the print_hello_world function just like any other. 
//!
//! This also isn't a macro that expands to franca code that has to go through the whole pipeline 
//! (which is what you'd do with a proc macro if you wanted this in rust) 
//! but you still get the benefit of automagically supporting all target architectures. 
//! If you think this is cool and want a similar type of metaprogramming in a more real language 
//! you could try https://terralang.org/ They have an example that implements brainfuck with "generative programming constructs". 
//! But again, theirs is generating ast nodes that then have to get compiled. 
//! So it looks less ugly but isn't as quirky and fun as mine. To each thier own. 
//!

ToBf :: @struct {
    print_hello_world :: fn(mem: *u8) void = HELLO_WORLD;
    
    add_numbers :: fn(mem: *u8) void = "[->+<]";
};

fn main() void = {
    mem := @slice(@as(u8) 12, @as(u8) 13);
    ToBf'add_numbers(mem.ptr);
    assert_eq(mem, @slice(@as(u8) 0, @as(u8) 25));
    
    mem: List(u8) = repeated(0, 30000, temp());
    ToBf'print_hello_world(mem.maybe_uninit.ptr);
}

:: {
    m := ast_alloc().box(QbeModule);
    fr := current_compiler_context();
    init_default_module_dyn(m, fr.vtable, (arch = .aarch64, os = .macos, type = .JitOnly));
    
    // TODO: it's dumb that some of the important QLists always use temp()
    t := ast_alloc().box(ArenaAlloc);
    t[] = init(ast_alloc(), 1000);
    context(DefaultContext)[].temporary_allocator = t;
    
    s := Type.scope_of(ToBf);
    for get_constants(s) { name |
        fid := get_constant(FuncId, s, name).unwrap();
        func := get_function_ast(fid, true, true, false, false);
        ::tagged(FuncImpl);
        @debug_assert(func.body&.is(.Normal));
        code := const_eval(Str)(func.body.Normal);
        
        f := ast_alloc().box(Qbe.Fn);
        default_init(f, m);
        f.lnk.id = m.intern(func.name.str());
        convert(f, code);
        f.rpo = new(f.nblk.zext());
        i := 0;
        for_blocks f { b |
            b.id = trunc i;
            f.rpo[i] = b;
            i += 1;
        };
        
        data := ast_alloc().alloc_zeroed(BakedVarId, f.ncon.zext());
        funcs := ast_alloc().alloc_zeroed(FuncId, f.ncon.zext());
        funcs[2] = getchar;  // order matters
        funcs[3] = putchar;
        func.body = (Ir = (
            fn_internal = Qbe.Fn.int_from_ptr(f),
            data = data,
            funcs = funcs,
        ));
        func.set_flag(.EnsuredCompiled);
    };
};

fn convert(f: *Qbe.Fn, code: []u8) void = {
    mem    := f.newtmp("mem", .Kl);
    cond_r := f.newtmp("cond", .Kl);  // this could be a phi but the backend will deal with converting it for us. 
    
    lnk := f.start&;
    new_block :: fn() => {
        b := temp().box_zeroed(Qbe.Blk); 
        b.ins = new(0);
        f.nblk += 1;
        lnk[] = b;
        lnk = b.link&;
        b
    };
    
    b := new_block();
    push(b, make_ins(.par, .Kl, mem, QbeNull, QbeNull));
    
    ::enum(Bf);
    
    E :: fn(f, o, k, r, a0, a1) => push(b, make_ins(o, k, r, a0, a1));
    inc :: fn(delta: i64) void => {
        @emit_instructions((f = f, emit = E, forward = true), (mem, f.getcon(delta)), """
        @start
            %old =w loadub %0
            %new =w add %old, %1
            storeb %new, %0
        """);
    };
    
    // order matters because of FuncImpl.Ir
    getchar := f.symcon(f.globals.intern("getchar"));
    putchar := f.symcon(f.globals.intern("putchar"));
    
    loop_stack := list(*Qbe.Blk, temp());
    for code { c |
        @switch(@as(Bf) c) {
            @case(.Inc) => inc(1);
            @case(.Dec) => inc(-1);
            @case(.Right) => {
                push(b, make_ins(.add, .Kl, mem, mem, f.getcon(1)));
            };
            @case(.Left) => {
                push(b, make_ins(.sub, .Kl, mem, mem, f.getcon(1)));
            };
            @case(.Output) => {
                @emit_instructions((f = f, emit = E, forward = true), (mem, putchar), """
                @start
                    %v =w loadub %0
                    call %1(w %v)
                """);
            };
            @case(.Input) => {
                @emit_instructions((f = f, emit = E, forward = true), (mem, getchar), """
                @start
                    %v =w call %1()
                    storeb %v, %0
                """);
            };
            @case(.Open)  => {
                cond := new_block();
                body := new_block();
                push(loop_stack&, cond);
                
                b.jmp.type = .jmp;
                b.s1 = cond;
                
                push(cond, make_ins(.loadub, .Kw, cond_r, mem, QbeNull));
                cond.s1 = body;
                cond.jmp = (type = .jnz, arg = cond_r);
                
                b = body;
            };
            @case(.Close) => {
                break := new_block();
                cond  := loop_stack&.pop().expect("correctly nested [ ]");
                
                b.jmp.type = .jmp;
                b.s1 = cond;
                cond.s2 = break;
                
                b = break;
            };
            @default => ();
        };
    };
    
    b.jmp.type = .ret0;
}

#use("@/examples/bf/README.fr");
#include_std("backend/lib.fr");
