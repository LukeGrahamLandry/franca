/// The boring reference implementation. 
/// This is how you could write this program in any language. 

fn run(code: Str, mem: []u8) void = {
    i := 0;
    ptr := 0;
    ::enum(Bf);
    while => i < code.len {
        @switch(@as(Bf) @as(u8) code[i]) {
            @case(.Inc) => {
                mem[ptr] += 1;
            };
            @case(.Dec) => {
                mem[ptr] -= 1;
            };
            @case(.Right) => {
                ptr += 1;
            };
            @case(.Left) => {
                ptr -= 1;
            };
            @case(.Output) => {
                putchar(mem[ptr]);
            };
            @case(.Input) => {
                mem[ptr] = getchar();
            };
            @case(.Open)  => if(mem[ptr] == 0, => loop(code, i&, 1));
            @case(.Close) => if(mem[ptr] != 0, => loop(code, i&, -1));
            @default => ();
        };
        i += 1;
    };
}

fn loop(code: []u8, i: *i64, delta: i64) void = {
    count := 1;
    i[] += delta;
    while => count != 0 {
        c := @as(Bf) @as(u8) code[i[]];
        count += int(c == .Open) * delta;
        count -= int(c == .Close) * delta;
        i[] += delta;
    };
    i[] -= delta;  // undo last iteration
}

main :: fn() void = {
    mem := temp().alloc_zeroed(u8, 30000);
    run(HELLO_WORLD, mem);
};

#use("@/examples/bf/README.fr");
