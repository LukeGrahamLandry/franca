#!/usr/bin/env franca
// Parse the output of objdump to report the size of each function in an executable.
// To use this on a franca program, compile with `-c` or it won't output a symbol table.  
//
// This program relies on exec-ing an external program and hoping it's output format is stable, 
// which isn't very robust. I have affection for it because it was the first useful program written
// in this language (a python program that I'd used in previous projects and ported to my imaginary 
// language on commit 6 before I even had a working interpreter and compiled, but still didn't work, 
// around commit 93). So i keep it around but bloat2.fr is probably better in every situation.  

main :: fn() void = {
    args := cli_args();
    if args.len < 2 {
        panic("last arg should be path to executable.");
    };
    println("Running objdump...");
    dump := timestamp();
    file := args.last();
    ok, out, err := exec_and_catch("objdump", @slice ("-d", file.unwrap()[].str()), temp()); 
    msg :: "Objdump failed. % %\n---\nYou could also try @/examples/bloat2.fr which does not depend on any external programs";
    @assert(ok, msg, out.items(), err.items());
    output := out.items();
    println("Parsing...");
    parse := timestamp();
    
    total, results := parse_objdump_output(out.items());
    for results { func |
        @println("%: %", func.size, func.name);
    };
    
    done := timestamp();
    println("=======");
    @println("TOTAL: % bytes.", total);
    @println("Objdump: %ms. Processing: %ms", parse - dump, done - parse);
};

FuncEntry :: @struct(name: Str, size: i64);
fn parse_objdump_output(output: Str) Ty(i64, List(FuncEntry)) = {
    results: List(FuncEntry) = list(temp());
    lines := output.split("\n", temp());
    i := 0;
    total := 0;
    while => i < lines.len - 1 {
        continue :: local_return;
        line := lines[i];
        //if (!line.ends_with(">:")).or(=> line.contains("...")) {| // TODO: compiler bug or do i have brain damage?? -- Jul 24
        if !line.ends_with(">:") || line.contains("...") {
            i += 1;
            continue();
        };
        
        fn parse_hex(s: Str) i64 = {
            value := 0;
            for s { c |
                if c != " ".ascii() {|  // .a/.o files have leading spaces instead of zeros? idk man
                    value *= 16;
                    value += hex_digit(c) || panic("invalid hex digit");
                };
            };
            value
        }
    
        parts := line.split(" ", temp());
        start_addr := parse_hex(parts[0]);
        // objective-c message passing calls have spaces in them.
        name_start := parts[0].len + 2;
        name := line.slice(name_start, line.len - 2);
        if name.starts_with("-") {
            name = name.slice(1, name.len);
        };
    
        prev_line := "";
        // This gets you to the last line of the function.
        while => line.len != 0 && i < lines.len - 1 && !line.contains("...") {
            prev_line = line;
            i += 1;
            line = lines[i];
        };
    
        // Want to count to the end of the last instruction, not the start of it.
        // Instructions are 4 bytes.
        parts = prev_line.split(":", temp());
        end_addr := parse_hex(parts[0]) + 4;
    
        // If that wasn't the last function, get to first line of next function.
        // Don't need to do this because I know the instrction length. TODO: remove
        if i < lines.len - 1 {
            while => line.len == 0 || line.starts_with("Disassembly") || line.contains("...") {
                i += 1;
                line = lines[i];
            };
            parts = line.split(" ", temp());
            real_end_addr := parse_hex(parts[0]);
            if end_addr != real_end_addr {
                // This has never happened to me.
                @println("Guess was wrong. % vs %", end_addr, real_end_addr);
            };
            end_addr = real_end_addr;
    
            // Next loop iter needs to read that function again.
            i -= 1;
        };
    
        size := end_addr - start_addr;
        results&.push((name = name, size = size));
        i += 1;
        total += size;
    };
   
    sort :: import("@/lib/sort.fr")'quicksort(FuncEntry, fn(a, b) => a.size <= b.size);
    results.items().sort();
    (total, results)
}

#test fn tiny_bloat() = {
    total, functions := parse_objdump_output(example);
    
    assert_eq(functions.len, 3);
    assert_eq(functions[0].size, 4);
    assert_eq(functions[1].size, 4);
    assert_eq(functions[2].size, 8);
    
    // It is at this point that zig style multiline string literals start looking like a good idea.
    example :: """
/usr/local/bin/franca:	file format mach-o arm64

Disassembly of section __TEXT,__text:

00000001000037a4 <___rust>:
1000037a4: 73 8a 02 14 	b	0x1000a6170 <___rg_oom>

00000001000037a8 <Debug>:
1000037a8: 7c d3 02 14 	b	0x1000b8598 <Display>

00000001000037ac <Debug>:
1000037ac: 00 00 40 f9 	ldr	x0, [x0]
1000037b0: 92 9a 00 14 	b	0x10002a1f8 <CErr>
    """;
}

#use("@/lib/sys/subprocess.fr");
#use("@/lib/sys/process.fr");
