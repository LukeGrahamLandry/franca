// TODO: the variable window shows the wrong name.  
// TODO: c_bindgen doesn't work with unnamed enums. 
// TODO: now it crashes on the constants window.
// TODO: need to copy message in error value again.
// TODO: support multiple compiler instances so you can point this at a driver that spawns new ones. 

::panic("todo: bitrot!");

ImGuiMouseSource :: i32;
ImGuiDir :: i32;
ImGuiInputEventType :: i32;
ImGuiInputSource :: i32;
ImGuiCond_FirstUseEver :: 4;

allocator :: libc_allocator;

State :: @struct(
    pass_action: SgPassAction,
    window_open: bool,
    vtable: *ImportVTable,
    filename: List(u8),
    phase: Phase = .Start,
    messages: List(Str),
    programs: List(ProgramState),
);

ProgramState :: @struct(
    compiler: *SelfHosted,
    show: bool,
    hide_uncompiled_functions: bool = true,
    hide_comptimeonly_functions: bool = true,
    hide_synthetic_functions: bool = true,
    hide_unreferenced_overloads: bool = true,
    hide_unfinished_constants: bool = true,
    hide_finished_tasks: bool = true,
    pause: bool = true,
    extra_windows: List(DetailWindow),
    new_window_ticks: i64 = 0,
    target_fns: List(FuncId),
    pending: List(*Task),
    error: ?*CompileError = .None,
    juice: i64 = 0,
    speed: i64 = MAX_SPEED,
    tick: i64 = 0,
    task_messages: BucketArray(List(Str)),
    current_task: ?i64 = .None,
    wip_task: ?*Task = .None,
);

DetailWindow :: @tagged(
    Function: FuncId,
    Overloads: OverloadSet,
    Variable: u32,
    Task: *Task
);

Phase :: @enum(i64) (Start, Working, Done); ::enum(Phase);

show_gui :: fn(state: *State) void = {
    // TODO: phase needs to be on each compiler. 
    @match(state.phase) {
        fn Start() => {
            if igButton(c_str(@symbol "Start"), (x = 50, y = 50)) {
                args := cli_args();
                if args.len <= 1 {
                    // TODO: gui for this instead of crashing
                    panic("Expected cli argument: a path to a franca file."); 
                };
                path := args[1].str();
                
                opts := state.vtable.default_build_options();
                opts.driver_vtable_ptr.log_event = (Some = log_event_callback);
                
                state.programs&.push(
                    compiler = SelfHosted.ptr_from_int(0),
                    show = true,
                    extra_windows = list(allocator),
                    target_fns = list(allocator),
                    pending = list(allocator),
                    task_messages = init(10, allocator),
                );
                userdata := state.programs.last().unwrap();
                opts.driver_vtable_user_data = ProgramState.raw_from_ptr(userdata);
                c := load_file_in_compiler(state.vtable, path, opts);
                c := c.unwrap();
                state.phase = .Working;
                
                if c.get_unique_named("main") {f|
                    userdata.target_fns&.push(f);
                };
                sym_test := c.intern_string("test");
                tests := c.data.get_fns_with_tag(sym_test);
                userdata.target_fns&.push_all(tests);
                
                userdata.compiler = c.data.cast()[][];
            };
        }
        fn Working() => {
            enumerate state.programs { iii, instance |  
                igPushID_Int(iii.intcast());
                instance.tick += 1;
                if !instance.pause && instance.speed != 0 && instance.tick.mod(MAX_SPEED + 1 - instance.speed) == 0 {
                    instance.juice += 1;
                };
                if instance.error.is_none() && instance.juice > 0 {
                    instance.juice -= 1;
                    instance.do_work();
                    if instance.pending.is_empty() && instance.target_fns.is_empty() {
                        state.phase = .Done;
                    };
                };
                instance.draw_tasks();
                igPopID();
            };
            state.draw_compiler_state();
        }
        fn Done() => {
            state.draw_compiler_state();
        }
    };
};

MAX_SPEED :: 200;

fn do_work(instance: *ProgramState) void = {
    self := instance.compiler;
    pending := instance.pending&;
    if pending.is_empty() {
        if instance.target_fns&.last() { f: *FuncId | 
            ::CBox(Task);
            task: Task = (action = (CompileBody = f[]), waiting_for = .None, parent = .None, id = self.dispatch.next_task_id);
            self.dispatch.next_task_id += 1;
            task := self.box(task);
            self.dispatch.function_in_progress&.set(f[].as_index());
            instance.pending&.push(task);
            instance.target_fns&.pop();
            instance.wip_task = (Some = task);
            self.dispatch.root_tasks&.push(task);
            return();
        };
        return();
    };
    
    task := pending.last().unwrap()[];
    instance.current_task = (Some = task.id);
    ::as_ref(*Task);
    if instance.wip_task&.as_ref() { task | 
        result := Result(void, *CompileError).zeroed();
        println(task.id);
        if instance.compiler.poll_loop_body(task, result&) {
            @match(result) {  
                fn Err(e) => {
                    // TODO
                    //e.msg = e.msg.clone(allocator).items(); // it's probably in temp
                    instance.error = (Some = e);
                    return();
                }
                fn Ok() => {
                    task.done = true;
                    pending.pop();
                    instance.wip_task = .None;
                }
            };
        }
    };
}

fn draw_tasks(instance: *ProgramState) void = {
    self := instance.compiler;
    name := @fmt_cstr("Working Instance");
    if !igBegin(name, instance.show&, 0) {
        igEnd();
        return();
    };
    igSetWindowPos_Vec2((x = 500, y = 100), ImGuiCond_FirstUseEver);
    igSetWindowSize_Vec2((x = 500, y = 500), ImGuiCond_FirstUseEver);
    @match(instance.error) {
        fn Some(error) => {
            msg: List(u8) = list(temp());
            self.fmt_error(error, msg&);
            @ig_text("%", msg.items());
        }
        fn None() => {
            scale := 1;
            range(0, 3) { i |
                if igButton(@fmt_cstr("Step %", scale), (x = 75, y = 30)) {
                    instance.juice += scale;
                };
                igSameLine(0, 10);
                scale *= 10;
            };
            text := if(instance.pause, => "Start Auto", => "Stop Auto");
            if igButton(@fmt_cstr("%", text), (x = 150, y = 30)) {
                instance.pause = !instance.pause;
            };
            x: i32 = instance.speed.intcast();
            igDragInt(@fmt_cstr("Auto Step Speed"), x&, 1, 0, MAX_SPEED, @fmt_cstr("%d", "%"), 0);
            instance.speed = x.intcast();
        }
    }; 
    
    igCheckbox(@fmt_cstr("Hide Finished Tasks"), instance.hide_finished_tasks&);
    
    if igCollapsingHeader_TreeNodeFlags(c_str(@symbol "Tasks"), 0) {
        num_cols :: 3;
        if igBeginTable(c_str(@symbol "Tasks"), num_cols, 0, (x = 700, y = 0), 0) {
            if instance.wip_task { task |
                break :: local_return;
                i := 0;
                loop {
                    i += 1;
                    igPushID_Int(i.intcast());
                    hide := instance.hide_finished_tasks && task.done;
                    if !hide {
                        draw_task_row(instance, task);
                    };
                    igPopID();
                    if task.parent.is_none() {
                        break();
                    };
                    task = task.parent.unwrap();
                };
            };
            igEndTable();
        };
    };
    
    igEnd();
}

fn draw_compiler_state(state: *State) void = {
    if igButton(c_str(@symbol "Cancel"), (x = 50, y = 50)) {
        state.phase = .Start;
        return();
    };
    
    if igCollapsingHeader_TreeNodeFlags(@fmt_cstr("Event Log"), 0) {
        each state.messages { msg | 
            igTextUnformatted(@as(CStr) (ptr = msg.ptr), @as(CStr) (ptr = msg.ptr.offset(msg.len)));
        };
    };
    
    enumerate state.programs { iii, instance |  
        continue :: local_return;
        self := instance.compiler;
        
        last := true;
        enumerate_rev instance.extra_windows { i, kind |
            continue :: local_return;
            @match(kind[]) {
                fn Function(f_id) => {
                    func := self.get_function(f_id);
                    name := @fmt_cstr("Function % %", self.pool.get(func.name), f_id.as_index());
                    show := true;
                    if !igBegin(name, show&, 0) {
                        igEnd();
                        continue();
                    };
                    if last && instance.new_window_ticks > 0 {
                        instance.new_window_ticks -= 1;
                        igSetWindowFocus_Nil();
                    };
                    last = false;
                    if !show {|
                        instance.extra_windows&.ordered_remove(i);
                    };
                    @ig_text("%", name); // :SLOW
                    instance.show_func_window(f_id);
                    
                    igEnd();
                }
                fn Overloads(os) => {
                    data := instance.compiler.dispatch.overloads&.nested_index(os.as_index());
                    name := @fmt_cstr("Overloads % %", self.pool.get(data.name), os.as_index());
                    show := true;
                    if !igBegin(name, show&, 0) {
                        igEnd();
                        continue();
                    };
                    if last && instance.new_window_ticks > 0 {
                        instance.new_window_ticks -= 1;
                        igSetWindowFocus_Nil();
                    };
                    last = false;
                    if !show {|
                        instance.extra_windows&.ordered_remove(i);
                    };
                    @ig_text("%", name); // :SLOW
                    instance.show_overloads_window(os);
                    
                    igEnd();
                }
                fn Variable(idx) => {
                    idx: i64 = idx.zext();
                    
                    usages := instance.compiler.index.variables&.nested_index(i);
                    name := @match(usages) {
                        fn Some(usages) => usages.var.name;
                        fn None() => instance.compiler.pool.insert_owned("???");
                    };
                    name := @fmt_cstr("Variable % %", instance.compiler.pool.get(name), idx);
                    show := true;
                    if !igBegin(name, show&, 0) {
                        igEnd();
                        continue();
                    };
                    if last && instance.new_window_ticks > 0 {
                        instance.new_window_ticks -= 1;
                        igSetWindowFocus_Nil();
                    };
                    last = false;
                    if !show {|
                        instance.extra_windows&.ordered_remove(i);
                    };
                    @ig_text("%", name);  // :SLOW
                    instance.show_variable_window(idx);
                    
                    igEnd();
                }
                fn Task(task) => {
                    name := @fmt_cstr("Task %", task.action&.log(instance.compiler));
                    show := true;
                    if !igBegin(name, show&, 0) {
                        igEnd();
                        continue();
                    };
                    if last && instance.new_window_ticks > 0 {
                        instance.new_window_ticks -= 1;
                        igSetWindowFocus_Nil();
                    };
                    last = false;
                    if !show {|
                        instance.extra_windows&.ordered_remove(i);
                    };
                    @ig_text("%", name);  // :SLOW
                    instance.show_task_window(task);
                    
                    igEnd();
                }
            }
        };
        
        name := @fmt_cstr("Instance##%", iii);
        if !igBegin(name, instance.show&, 0) {
            igEnd();
            continue();
        };
        
        igCheckbox(@fmt_cstr("Hide Uncompiled Functions"), instance.hide_uncompiled_functions&);
        igCheckbox(@fmt_cstr("Hide ComptimeOnly Functions"), instance.hide_comptimeonly_functions&);
        igCheckbox(@fmt_cstr("Hide SyntheticEval Functions"), instance.hide_synthetic_functions&);
        igCheckbox(@fmt_cstr("Hide Unreferenced Overload Sets"), instance.hide_unreferenced_overloads&);
        igCheckbox(@fmt_cstr("Hide Unfinished Constants"), instance.hide_unfinished_constants&);
        
        if igCollapsingHeader_TreeNodeFlags(c_str(@symbol "Constants"), 0) {
            num_cols :: 3;
            if igBeginTable(c_str(@symbol "Constants"), num_cols, 0, (x = 800, y = 0), 0) {
                range(0, instance.compiler.scopes.constants.len) { i | 
                    igPushID_Int(i.intcast());
                    usages := instance.compiler.index.variables&.nested_index(i);
                    if usages { usages |
                        @assert_eq(@as(i64) usages.var.id.zext(), i);
                        if usages.var.kind == .Const {|
                            v := instance.compiler.scopes.constants&.nested_index(i);
                            ::as_ref(Ty(FatExpr, LazyType));
                            if v.as_ref() { value_ty | 
                                value := value_ty._0&;
                                type := value_ty._1&;
                                
                                hide := false;
                                if instance.hide_unfinished_constants && !value.expr&.is(.Value) {
                                    hide = true;
                                };
                                if !hide {
                                    igTableNextRow(0, 0);
                                    igTableNextColumn();
                                    @ig_text("%", instance.compiler.pool.get(usages.var.name));
                                    if igIsItemClicked(0) {
                                        x: DetailWindow = (Variable = i.trunc());
                                        instance.extra_windows&.push(x);
                                        instance.new_window_ticks = 5;
                                    };
                                                                
                                    igTableNextColumn();
                                    @match(type) {
                                        fn Finished(type) => {
                                            draw_type_ref(instance.compiler, type[]);
                                        }
                                        @default => {
                                            @ig_text("%", type.tag());
                                        };
                                    };
                                    
                                    igTableNextColumn();
                                    draw_expr_ref(instance.compiler, value);
                                };
                            };
                        };
                    };
                    igPopID();
                };
                igEndTable();
            };
        };
        
        if igCollapsingHeader_TreeNodeFlags(c_str(@symbol "Types"), 0) {
            num_cols :: 1;
            if igBeginTable(c_str(@symbol "Types"), num_cols, 0, (x = 800, y = 0), 0) {
                range(0, instance.compiler.types.len) { i | 
                    igPushID_Int(i.intcast());
                    igTableNextRow(0, 0);
                    igTableNextColumn();
                    draw_type_ref(instance.compiler, from_index(i));
                    igPopID();
                };
                igEndTable();
            };
        };

        if igCollapsingHeader_TreeNodeFlags(c_str(@symbol "Functions"), 0) {
            num_cols :: 3;
            if igBeginTable(c_str(@symbol "Functions"), num_cols, 0, (x = 800, y = 0), 400) {
                range(0, instance.compiler.functions.len) { i | 
                    igPushID_Int(i.intcast());
                    f_id: FuncId = from_index(i);
                    func := self.get_function(f_id);
                    
                    hide := false;
                    if instance.hide_uncompiled_functions && !func.get_flag(.EnsuredCompiled) {
                        hide = true;
                    };
                    if instance.hide_comptimeonly_functions && func.get_flag(.ComptimeOnly) {
                        hide = true;
                    };
                    if instance.hide_synthetic_functions && func.get_flag(.SyntheticImmEval) {
                        hide = true;
                    };
                    
                    if !hide {
                        draw_function_row(instance, f_id);
                    };
                    igPopID();
                };
                igEndTable();
            };
        };
        
        if igCollapsingHeader_TreeNodeFlags(c_str(@symbol "Overload Sets"), 0) {
            num_cols :: 2;
            if igBeginTable(c_str(@symbol "Overload Sets"), num_cols, 0, (x = 800, y = 0), 0) {
                range(0, instance.compiler.dispatch.overloads.len) { i | 
                    igPushID_Int(i.intcast());
                    os := instance.compiler.dispatch.overloads&.nested_index(i);
                    
                    hide := false;
                    if instance.hide_unreferenced_overloads && os.ready.is_empty() {
                        hide = true;
                    };
                    
                    if !hide {
                        igTableNextRow(0, 0);
                        
                        igTableNextColumn();
                        draw_overloads_clickable(instance, i);
                        igTableNextColumn();
                        @ig_text("%", os.ready.len);
                    };
                    
                    igPopID();
                };
                igEndTable();
            };
        };
        
        igEnd();
    };
}

fn draw_function_clickable(instance: *ProgramState, f_id: FuncId) void = {
    self := instance.compiler;
    func := self.get_function(f_id);
    @ig_text("%_%", f_id.as_index(), instance.compiler.pool.get(func.name));
    if igIsItemClicked(0) {
        x: DetailWindow = (Function = f_id);
        instance.extra_windows&.push(x);
        instance.new_window_ticks = 5;
    };
}

fn draw_overloads_clickable(instance: *ProgramState, i: i64) void = {
    os := instance.compiler.dispatch.overloads&.nested_index(i);
    @ig_text("%_%", i, instance.compiler.pool.get(os.name));
    
    if igIsItemClicked(0) {
        x: DetailWindow = (Overloads = i.from_index());
        instance.extra_windows&.push(x);
        instance.new_window_ticks = 5;
    };
}

fn draw_task_row(instance: *ProgramState, task: *Task) void = {
    igTableNextRow(0, 0);
    igTableNextColumn();
    @ig_text("%", task.action&.tag());
    if igIsItemClicked(0) {
        x: DetailWindow = (Task = task);
        instance.extra_windows&.push(x);
        instance.new_window_ticks = 5;
    };
                        
    igTableNextColumn();
    @match(task.action) {
        fn EvalConstant(v) => {
            @ig_text("---");
        };
        fn CompileBody(f_id) => draw_function_clickable(instance, f_id);
        fn Jit(f_id) => draw_function_clickable(instance, f_id);
        fn FinishRecType(it)  => {
            @ig_text("---");
        }
        fn ResolveOverload(it)  => {
            draw_overloads_clickable(instance, it.os.as_index());
        }
        fn All(tasks) => {
            @ig_text("All[len=%]", tasks.len);
        }
    };
    igTableNextColumn();
    @ig_text("waiting=% done=%", task.waiting_for.is_some(), task.done);
}

fn draw_function_row(instance: *ProgramState, f_id: FuncId) void = {
    igTableNextRow(0, 0);
    self := instance.compiler;
    func := self.get_function(f_id);
    
    igTableNextColumn();
    draw_function_clickable(instance, f_id);
    
    igTableNextColumn();
    @match(func.finished_arg) {
        fn Some(ty) => draw_type_ref(instance.compiler, ty);
        fn None() => @ig_text("---");
    };
    igTableNextColumn();
    @match(func.finished_ret) {
        fn Some(ty) => draw_type_ref(instance.compiler, ty);
        fn None() => @ig_text("---");
    };
}

fn show_variable_window(instance: *ProgramState, i: i64) void = {
    self := instance.compiler;
    usages := self.index.variables&.nested_index(i);
    usages := usages[].or(=> return());
    @assert_eq(@as(i64) usages.var.id.zext(), i);
    
    if igCollapsingHeader_TreeNodeFlags(@fmt_cstr("Declaration"), 0) {
        line := self.codemap.get_whole_line(usages.declaration);
        @ig_text("Declared on line % of %", line.line, line.filename);
        text := self.codemap.source_slice(line.line_text);
        @ig_text("%", text);
    };
    
    // -1 because the first is always the declaration. 
    if igCollapsingHeader_TreeNodeFlags(@fmt_cstr("Usages (%)", usages.usages.len - 1), 0) {
        for usages.usages.items().slice(1, usages.usages.len) { loc |
            line := self.codemap.get_whole_line(loc);
            @ig_text("Used on line % of %", line.line, line.filename);
            text := self.codemap.source_slice(line.line_text);
            @ig_text("%", text);
        };
    };
}

fn show_func_window(instance: *ProgramState, f_id: FuncId) void = {
    self := instance.compiler;
    func := self.get_function(f_id);
    
    i := 0;
    for_enum FnFlag { (flag: FnFlag) | 
        if func.get_flag(flag) {
            ::enum(FnFlag);
            if i.mod(4) != 0 {
                igSameLine(0, 10);
            };
            i += 1;
            @ig_text("%", flag);
        };
    };
    
    name := @fmt_cstr("Callees (%)", func.callees.len());
    if igCollapsingHeader_TreeNodeFlags(name, 0) {
        num_cols :: 3;
        if igBeginTable(name, num_cols, 0, (x = 800, y = 0), 400) {
            for func.callees { f_id | 
                draw_function_row(instance, f_id);
            };
            igEndTable();
        };
    };
    
    name := @fmt_cstr("Mutual Callees (%)", func.mutual_callees.len());
    if igCollapsingHeader_TreeNodeFlags(name, 0) {
        num_cols :: 3;
        if igBeginTable(name, num_cols, 0, (x = 800, y = 0), 0) {
            for func.mutual_callees { f_id | 
                draw_function_row(instance, f_id);
            };
            igEndTable();
        };
    };
    
    ::if(FuncId.RsVec());
    callers := if self.index.callers.len > f_id.as_index() {
        self.index.callers&.nested_index(f_id.as_index())[]
    } else {
        empty()
    };
    name := @fmt_cstr("Callers (%)", callers.len());
    if igCollapsingHeader_TreeNodeFlags(name, 0) {
        num_cols :: 3;
        if igBeginTable(name, num_cols, 0, (x = 800, y = 0), 0) {
            for callers { f_id | 
                draw_function_row(instance, f_id);
            };
            igEndTable();
        };
    };
    
    body := func.nullable_finished_bytecode_pointer;
    if body != 0 { 
        body := FnBody.ptr_from_int(body);
        name := @fmt_cstr("Bytecode");
        if igCollapsingHeader_TreeNodeFlags(name, 0) {
            out: List(u8) = list(temp());
            self.log_bc(func, body, out&);
            @ig_text("%", out.items());
        };
    };
    
    if igCollapsingHeader_TreeNodeFlags(@fmt_cstr("Source"), 0) {
        line := self.codemap.get_whole_line(func.loc);
        @ig_text("Declared on line % of %", line.line, line.filename);
        text := self.codemap.source_slice(line.line_text);
        @ig_text("%", text);
    };
    
    if igCollapsingHeader_TreeNodeFlags(@fmt_cstr("Body"), 0) {
        @ig_text("%", func.log(self));
    };
    
    if self.get_fn_old(f_id) { addr | 
        @ig_text("This function can be jit called at %", addr);
    };
}

fn show_overloads_window(instance: *ProgramState, os: OverloadSet) void = {
    self := instance.compiler;
    data := instance.compiler.dispatch.overloads&.nested_index(os.as_index());
    
    name := @fmt_cstr("Ready (%)", data.ready.len());
    if igCollapsingHeader_TreeNodeFlags(name, 0) {
        num_cols :: 3;
        if igBeginTable(name, num_cols, 0, (x = 800, y = 0), 400) {
            for data.ready { option | 
                draw_function_row(instance, option);
            };
            igEndTable();
        };
    };
    name := @fmt_cstr("Pending (%)", data.pending.len());
    if igCollapsingHeader_TreeNodeFlags(name, 0) {
        num_cols :: 3;
        if igBeginTable(name, num_cols, 0, (x = 800, y = 0), 400) {
            for data.pending { f_id | 
                draw_function_row(instance, f_id);
            };
            igEndTable();
        };
    };
}

fn show_task_window(instance: *ProgramState, task: *Task) void = {
    @ig_text("done = %", task.done);
    
    num_cols :: 3;
    if igBeginTable(c_str(@symbol "Tasks"), num_cols, 0, (x = 700, y = 0), 0) {
        draw_task_row(instance, task);
        igEndTable();
    };
    
    name := @fmt_cstr("Waiting");
    if igCollapsingHeader_TreeNodeFlags(name, 0) {
        num_cols :: 3;
        if igBeginTable(name, num_cols, 0, (x = 700, y = 0), 0) {
            (=>{
                break :: local_return;
                t := task;
                i := 0;
                loop {
                    if t.waiting_for.is_none() {
                        break();
                    };
                    t = t.waiting_for.unwrap();
                    igPushID_Int(i.intcast());
                    draw_task_row(instance, t);
                    igPopID();
                    i += 1;
                };
            })();
            igEndTable();
        };
    };
    
    name := @fmt_cstr("Parent");
    if igCollapsingHeader_TreeNodeFlags(name, 0) {
        num_cols :: 3;
        if igBeginTable(name, num_cols, 0, (x = 700, y = 0), 0) {
            (=>{
                break :: local_return;
                t := task;
                i := 0;
                loop {
                    if t.parent.is_none() {
                        break();
                    };
                    t = t.parent.unwrap();
                    igPushID_Int(i.intcast());
                    draw_task_row(instance, t);
                    igPopID();
                    i += 1;
                };
            })();
            igEndTable();
        };
    };
    
    if igCollapsingHeader_TreeNodeFlags(@fmt_cstr("Event Log"), 0) {
        if instance.task_messages.len > task.id {
            messages := instance.task_messages&.nested_index(task.id);
            each messages { msg | 
                igTextUnformatted(@as(CStr) (ptr = msg.ptr), @as(CStr) (ptr = msg.ptr.offset(msg.len)));
            };
        }
    };
    
}

fn draw_expr_ref(self: *SelfHosted, expr: *FatExpr) void = {
    if expr.expr&.is(.Value) && !expr.ty.is_unknown() {
        draw_value_ref(self, expr.expr.Value.bytes&, expr.ty);
    } else {
        msg := @ig_text("%", expr.expr&.tag());
    }
}

fn draw_value_ref(self: *SelfHosted, values: *Values, ty: Type) void = {
    info := self.get_type(ty);
    
    show_func :: fn() => {
        f_id := FuncId.assume_cast(values)[];
        func := self.get_function(f_id);
        msg := @ig_text("F%_%", f_id.as_index(), self.pool.get(func.name));
        return();
    };
    show_label :: fn() => {
        l := LabelId.assume_cast(values)[];
        @ig_text("L%", l.as_index());
        return();
    };
    @match(info) {
        fn Fn(f) => show_func();
        fn Int(int) => {
            @if_let(int_value(values, int[])) fn Ok(i) => {
                msg := @ig_text("%", i);
                return();
            };
        }
        fn Label() => show_label();
        @default => ();
    };
    if ty == FuncId {
        show_func();
    };
    if ty == LabelId {
        show_label();
    };
    
    if ty == OverloadSet {
        os := OverloadSet.assume_cast(values)[];
        data := self.dispatch.overloads&.nested_index(os.as_index());
        msg := @ig_text("OS%_%", os.as_index(), self.pool.get(data.name));
        return();
    };
    
    if ty == bool {
        b := bool.assume_cast(values)[];
        @ig_text("%", b);
        return();
    };
    
    if ty == Type {
        type := Type.assume_cast(values)[];
        draw_type_ref(self, type);
        return();
    };
    
    // if we don't know how to draw this type, just fall back to something useless
    @ig_text("Value:%", values.len());
}

fn draw_type_ref(self: *SelfHosted, ty: Type) void = {
    info := self.get_type(ty);
    
    named :: fn(name: Str) => {
        @ig_text("%", name);
        return();
    };
    
    @match(info) {
        fn Int(int) => {
            @ig_text("%%", if(int.signed, => "i", => "u"), int.bit_count);
            return();
        }
        fn Named(f) => {
            @ig_text("% -> %", self.pool.get(f._1), f._0.as_index());
            return();
        }
        fn VoidPtr() => named("rawptr");
        fn void() => named("void");
        fn F64() => named("f32");
        fn F32() => named("f64");
        fn Bool() => named("bool");
        fn Never() => named("never");
        @default => ();
    };
    
    // if we don't know how to draw this type, just fall back to something useless
    @ig_text("Ty%", ty.as_index());
}

fn ig_text(fmt_args: FatExpr) FatExpr #macro = @{
    msg := (@format(@[fmt_args]) temp()).items();
    igTextUnformatted(@as(CStr) (ptr = msg.ptr), @as(CStr) (ptr = msg.ptr.offset(msg.len)));
}


log_event_callback :: fn(userdata: rawptr, c: Compiler, event: *CompilerLogEvent) void = {
    instance := ProgramState.ptr_from_raw(userdata);
    @match(event) {
        fn Msg(msg) => {
            msg := msg[].clone(allocator);
            // no null terminator because igTextUnformatted takes an end pointer.
            
            if instance.current_task { idx | 
                while => instance.task_messages.len <= idx {
                    instance.task_messages&.push(list(0, allocator));  
                };
                lst := instance.task_messages&.nested_index(idx);
                lst.push(msg.items());
            };
            
            //state.messages&.push(msg.items());
        }
    }
};

//////////////////////////////////////////////
// Sokol Rendering Glue
//

fn main() void = {
    state := State.zeroed();
    state.vtable = init_driver_vtable();
    state.filename = list(255, libc_allocator);
    state.messages = list(255, libc_allocator);
    state.programs = list(libc_allocator);
    
    update_global_stdlib_path();
    
    desc := SappDesc.zeroed();
    desc.init_userdata_cb = do_init;
    desc.frame_userdata_cb = do_render;
    desc.event_userdata_cb = do_event;
    desc.user_data = State.raw_from_ptr(state&);
    desc.logger.func = slog_func;
    desc.window_title = "Franca".maybe_borrow_cstr(temp());
    sapp_run(desc&);
}

do_init :: fn(userdata: rawptr) void = {
    state := State.ptr_from_raw(userdata);
    state.window_open = true;
    
    desc := SgDesc.zeroed();
    desc.environment = sglue_environment();
    desc.logger.func = slog_func;
    sg_setup(desc&);
    
    desc := SimguiDesc.zeroed();
    desc.logger.func = slog_func;
    simgui_setup(desc&);
    
    state.pass_action.colors&[0].load_action = .CLEAR;
    state.pass_action.colors&[0].clear_value = (r = 0.3.cast(), g = 0.3.cast(), b = 0.3.cast(), a = 1.0.cast());
};

do_render :: fn(userdata: rawptr) void = {
    state := State.ptr_from_raw(userdata);
    
    desc: SimguiFrameDesc = (width = sapp_width(), height = sapp_height(), delta_time = sapp_frame_duration(), dpi_scale = sapp_dpi_scale());
    simgui_new_frame(desc&);
    
    mark := mark_temporary_storage();
    state.show_gui();
    reset_temporary_storage(mark);
    
    desc := SgPass.zeroed();
    desc.action = state.pass_action;
    desc.swapchain = sglue_swapchain();
    
    sg_begin_pass(desc&);
    simgui_render();
    sg_end_pass();
    sg_commit();
};

do_event :: fn(event: *SappEvent, userdata: rawptr) void = {
    state := State.ptr_from_raw(userdata);
     
    fn eq(a: SappEventType, b: SappEventType) bool = (@as(i32) a).eq(@as(i32) b);
    fn eq(a: SappKeycode, b: SappKeycode) bool = (@as(i32) a).eq(@as(i32) b);
    if event.type.eq(.KEY_DOWN) {
        if event.key_code.eq(.Q) {
            exit(0);
        };
    };
    simgui_handle_event(event);
};

//////////////////////////////////////////////
// Driver
//


fn load_src_gui(vtable: *ImportVTable) Ty(CompCtx, *ComptimeLibs) = {
    src := temp().read_to_string("lib/core.fr");
    src&.read_and_push("compiler/lib.fr");
    @fmt(src&, ";ENABLE_TRACY :: false;\n");
    @fmt(src&, ";ENABLE_LSP   :: false;\n");
    @fmt(src&, ";ENABLE_LOGGING_CALLBACKS :: true;\n");
    @fmt(src&, ";DO_TERMINAL_COLOURS :: false;\n");
    @fmt(src&, ";DEBUG_SPAM_LOG :: false;\n");
    @fmt(src&, ";BOOTSTRAP_ONLY_MODE :: false;\n");
    src&.read_and_push("bindings/sokol.fr");
    src&.read_and_push("bindings/dearimgui.fr");
    src&.read_and_push("examples/compiler_gui.fr");
    
    opts := vtable.default_build_options();
    opts.deduplicate_bytecode = true;
    opts.retain_function_names = true;
    opts.debug_info = false;
    
    comp := vtable.new_with_src(src.items(), opts);
    c := vtable.with(comp);
    
    libs := c.empty_libs();
    libs := temp().boxed(ComptimeLibs, libs);
    //libs.intercept_imports();
    libs.add_lib(sokol_and_imgui_macos_lib);
    libs.add_lib(dearimgui_lib);
    
    (c, libs)
}

fn driver(vtable: *ImportVTable) void = {
    if !file_exists("compiler/main.fr") {
        panic("Working directory must be top level of the franca repository");
    };
    start := timestamp();
    c, libs := load_src_gui(vtable);
    
    new_main := c.get_unique_named("main").unwrap();
    exports := (@list(new_main) temp()).items();
    ir_text := emit_llvm(c, temp(), exports, .WrapMain, get_comptime_arch(), .macos); // :HardcodeOs
    @println("Emitted % bytes of llvm ir.", ir_text.len);  // useful to see when i start trying to deduplicate bytecode. 
    end := timestamp();

    start := timestamp();
    args := libs.get_aot_objects();
    args&.push_all(@slice ("-o", "target/franca/franca2gui", "-g", "-Os"));
    
    SOKOL_MACOS_LINK_ARGS :: @array("-framework", "Metal", "-framework", "MetalKit", "-framework", "Cocoa", "-framework", "QuartzCore");
    a := SOKOL_MACOS_LINK_ARGS;
    args&.push_all(a&.items());
    build_llvm(ir_text, args.items());
    end := timestamp();
    @println("LLVM time: % ms.", end.sub(start));
    exit(0);
    
    // TODO: return result
    fn build_llvm(ir: BucketArray(u8), args: Slice(Str)) void = {
        out := open_temp_file();
        for(ir&){bucket|
            out.fd&.write(bucket);
        };
        @println("Write llvm ir to %", out&.s_name());   
        args: List(Str) = args.clone(temp());
        args&.push("-x"); // don't check the file extension of source files that follow. 
        args&.push("ir"); 
        args&.push("-g"); 
        args&.push(out&.s_name());
        @println("%", args.items());
        success := run_cmd_blocking("clang++", args.items());
        assert(success, "ICE: generated invalid llvm ir");
        out.remove();
    }
}
