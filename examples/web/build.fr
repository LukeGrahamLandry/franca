// #foreign("git");
driver :: fn(vtable: *ImportVTable) void = {
    ci := get_environment_variable("GITHUB_REPOSITORY").is_some();
    franca := get_executable_path(temp());
    make_dirs_or_crash("examples/web/target");

    ok := run_cmd_blocking(franca, @slice("examples/default_driver.fr", "build", "examples/web/demo.fr", "-o", "examples/web/target/demo.wasm", "-arch", "wasm32", "-unsafe"));
    @assert(ok, "failed build");
    mandel := import("@/examples/kaleidoscope.fr").EXAMPLE_PROGRAM;
    
    ssa := collect_with_extension("examples/import_c/test", ".ssa") || panic("lost tests");
    
    commit := if ci {
        ok, o, e := exec_and_catch("git", @slice("rev-parse", "HEAD"), temp());
        @assert(ok, "failed git rev-parse");
        while => o[o.len - 1].is_ascii_whitespace() {
            o.len -= 1;
        };
        @assert_eq(o.len, 40, "failed git rev-parse");
        o.items()
    } else {
        now := time_t.zeroed();
        time(now&);
        tm := localtime(now&);
        @tfmt("%-%-%_dev", tm.hour, tm.min, tm.sec)
    };
    
    paths := collect_paths @const_slice("lib", "compiler", "backend", "examples");
    fs := u8.list(temp());
    contents := u8.list(temp());
    for paths { s |
        l := contents.len;
        read_and_push_or_crash(contents&, s);
        @fmt(fs&, "\"%\": [%, %],", s, l, contents.len - l);
    };
    @fmt(fs&, "\"mandel.txt\": [%, %],", contents.len, mandel.len);
    contents&.push_all(mandel);
    fs.len -= 1;
    
    manifest := @tfmt(template,
        """["examples/mandelbrot.fr", "examples/sudoku.fr", "examples/kaleidoscope.fr",
            "examples/bf/bf2ir.fr", "examples/bf/code_string.fr", "examples/bf/inline_for.fr",
            "compiler/main.fr", "examples/bf/c_string.fr", "examples/import_c/test/ffi.fr"
        ]""",
        "[\"mandel.txt\"]",
        filenames("examples/import_c/test", ".c"),
        filenames("backend/test", ".ssa"),
        commit,
        fs.items(),
    );
    
    write_entire_file_or_crash("examples/web/target/manifest.json", manifest);
    write_entire_file_or_crash(@tfmt("examples/web/target/%.txt", commit), contents.items());
    
    // TODO: this is slowly approching crazy town...
    if ci {
        default := "Math.floor(new Date().valueOf())";
        prefix := "let manifest_version = ";
        main_js := read_entire_file_or_crash(temp(), "examples/web/main.js");
        dest := main_js.rest(prefix.len).slice(0, default.len);
        @assert(main_js.starts_with(prefix) && dest == default);
        commit.len = min(commit.len, dest.len - 2);
        dest[0] = "\"".ascii();
        dest[dest.len - 1] = "\"".ascii();
        dest.slice(1, commit.len + 1).copy_from(commit);
        dest.slice(commit.len + 1, dest.len - 1).set_bytes("-".ascii());
        write_entire_file_or_crash("examples/web/main.js", main_js);
    };
}

filenames :: fn(path: Str, ext: Str) Str = {
    files := collect_with_extension(path, ext) || panic("lost tests");
    
    @if(ext == ".ssa") // TODO: this is dumb
    ordered_retain files& { it |
        it := it[];
        !it.ends_with("-na.ssa") && !it.ends_with("-arm.ssa") && !it.ends_with("-amd.ssa")
    };
    
    out := u8.list(temp());
    @fmt(out&, "[");
    for files { it |
        full := @tfmt("%/%", path, it);
        @fmt(out&, "\"%\",", full);
        src := read_entire_file_or_crash(temp(), full);
        write_entire_file_or_crash(@tfmt("examples/web/target/%", it), src);
    };
    @if(files.len > 0) { out.len -= 1; };
    @fmt(out&, "]");
    out.items()
}

template :: """{
"worker": "worker.js",
"compilers": [
{
    "name": "franca",
    "about": "",
    "examples": %
},
{
    "name": "kaleidoscope",
    "about": "See also: https://llvm.org/docs/tutorial/MyFirstLanguageFrontend",
    "examples": %
},
{
    "name": "c",
    "about": "See also: https://github.com/rui314/chibicc",
    "examples": %
},
{
    "name": "qbe",
    "about": "See also: https://c9x.me/compile",
    "examples": %
}
],
"commit": "%",
"wisdom": [
    "Blazingly 9x slower than native!", 
    "Abstraction will continue until moral improves.",
    "High precision timers are considered unsafe."
],
"filesystem": { % }
}""";

collect_paths :: fn(root: []Str) []Str = {
    extensions := @const_slice(".fr", ".md", ".ssa", ".c", ".h");
    files := Str.list(temp());
    dirs := Str.list(temp());
    dirs&.push_all(root);
    while => dirs&.pop() { s |
        prev_f, prev_d := (files.len, dirs.len);
        (walk_directory_unordered(as_cstr s) { e |
            continue :: local_return;
            if e.is(.Directory) {
                skip := @const_slice(".git", "target", "examples/web/target");
                if(s == "." && skip.contains(e.name), => continue());
                skip := @const_slice(".", "..", "node_modules", "tracy", "cimgui", "test_wasm_rt");
                if(skip.contains(e.name), => continue());
                
                dirs&.push(@tfmt("%/%", s, e.name));
            } else {
                for extensions { ext |
                    if e.name.ends_with(ext) {
                        path := @tfmt("%/%", s, e.name);
                        if(path == "./examples/parsegen/boot.g.fr", => continue());
                        files&.push(path);
                        continue();
                    }
                }
            }
        }) || @panic("walk dir '%' failed", s);
        Sort :: import("@/lib/sort.fr");
        sort :: Sort'quicksort(Str, Sort.order_strings);
        sort(files.items().rest(prev_f));
        sort(dirs.items().rest(prev_d));
    };
    files.items()
}
    
#use("@/lib/sys/process.fr");
#use("@/lib/sys/subprocess.fr");
#use("@/lib/sys/fs.fr");
#use("@/examples/testing.fr");
