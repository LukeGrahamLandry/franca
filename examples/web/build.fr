// #foreign("git");
driver :: fn(vtable: *ImportVTable) void = {
    ci := get_environment_variable("GITHUB_REPOSITORY").is_some();
    franca := get_executable_path(temp());
    make_dirs_or_crash("examples/web/target");

    ok := run_cmd_blocking(franca, @slice("examples/default_driver.fr", "build", "examples/web/demo.fr", "-o", "examples/web/target/demo.wasm", "-arch", "wasm32", "-unsafe"));
    @assert(ok, "failed build");
    src := import("@/examples/kaleidoscope.fr").EXAMPLE_PROGRAM;
    write_entire_file_or_crash("examples/web/target/mandel.txt", src);
    
    ssa := collect_with_extension("examples/import_c/test", ".ssa") || panic("lost tests");
    
    commit := if ci {
        ok, o, e := exec_and_catch("git", @slice("rev-parse", "HEAD"), temp());
        @assert(ok, "failed git rev-parse");
        while => o[o.len - 1].is_ascii_whitespace() {
            o.len -= 1;
        };
        @assert_eq(o.len, 40, "failed git rev-parse");
        o.items()
    } else {
        now := time_t.zeroed();
        time(now&);
        tm := localtime(now&);
        @tfmt("%:%:%_dev", tm.hour, tm.min, tm.sec)
    };
    
    manifest := @tfmt(template,
        """["examples/mandelbrot.fr", "examples/sudoku.fr", "examples/kaleidoscope.fr",
            "examples/bf/bf2ir.fr", "examples/bf/code_string.fr", "examples/bf/inline_for.fr",
            "compiler/main.fr", "examples/bf/c_string.fr", "examples/import_c/test/ffi.fr"
        ]""",
        "[\"mandel.txt\"]",
        filenames("examples/import_c/test", ".c"),
        filenames("backend/test", ".ssa"),
        commit,
    );
    write_entire_file_or_crash("examples/web/target/manifest.json", manifest);
    
    dirs :: @const_slice("lib", "compiler", "backend", "bindings", "examples");
    for(dirs, copy_dir);
    
    // TODO: this is slowly approching crazy town...
    if ci {
        default := "Math.floor(new Date().valueOf())";
        prefix := "let manifest_version = ";
        main_js := read_entire_file_or_crash(temp(), "examples/web/main.js");
        dest := main_js.rest(prefix.len).slice(0, default.len);
        @assert(main_js.starts_with(prefix) && dest == default);
        commit.len = min(commit.len, dest.len - 2);
        dest[0] = "\"".ascii();
        dest[dest.len - 1] = "\"".ascii();
        dest.slice(1, commit.len + 1).copy_from(commit);
        dest.slice(commit.len + 1, dest.len - 1).set_bytes("-".ascii());
        write_entire_file_or_crash("examples/web/main.js", main_js);
    };
}

copy_dir :: fn(path: Str) void = {
    @if(!dir_exists(path) || path == "examples/web" || path == "bindings/tracy") return();
    names := collect_directory_ordered(path, temp(), temp()) || @panic("failed to read %", path);
    make_dirs_or_crash(@tfmt("examples/web/target/%", path));
    for names { it |
        full := @tfmt("%/%", path, it.name);
        @if(!it.name.starts_with("."))
        if it.name.ends_with(".fr") || it.name.ends_with(".h") || it.name.ends_with(".c") {
            src := read_entire_file_or_crash(temp(), full);
            write_entire_file_or_crash(@tfmt("examples/web/target/%/%", path, it.name), src);
        } else {
            copy_dir(full);
        }
    };
}

filenames :: fn(path: Str, ext: Str) Str = {
    files := collect_with_extension(path, ext) || panic("lost tests");
    
    @if(ext == ".ssa") // TODO: this is dumb
    ordered_retain files& { it |
        it := it[];
        !it.ends_with("-na.ssa") && !it.ends_with("-arm.ssa") && !it.ends_with("-amd.ssa")
    };
    
    out := u8.list(temp());
    @fmt(out&, "[");
    for files { it |
        @fmt(out&, "\"%\",", it);
        src := read_entire_file_or_crash(temp(), @tfmt("%/%", path, it));
        write_entire_file_or_crash(@tfmt("examples/web/target/%", it), src);
    };
    @if(files.len > 0) { out.len -= 1; };
    @fmt(out&, "]");
    out.items()
}

template :: """{
"worker": "worker.js",
"compilers": [
{
    "name": "franca",
    "about": "",
    "examples": %
},
{
    "name": "kaleidoscope",
    "about": "See also: https://llvm.org/docs/tutorial/MyFirstLanguageFrontend",
    "examples": %
},
{
    "name": "c",
    "about": "See also: https://github.com/rui314/chibicc",
    "examples": %
},
{
    "name": "qbe",
    "about": "See also: https://c9x.me/compile",
    "examples": %
}
],
"commit": "%",
"wisdom": [
    "Blazingly 9x slower than native!", 
    "Abstraction will continue until moral improves.",
    "High precision timers are considered unsafe."
]
}""";

#use("@/lib/sys/process.fr");
#use("@/lib/sys/subprocess.fr");
#use("@/lib/sys/fs.fr");
#use("@/examples/testing.fr");
