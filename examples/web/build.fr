// #foreign("git");
driver :: fn(vtable: *ImportVTable) void = {
    franca := get_executable_path(temp());
    make_dirs_or_crash("examples/web/target");
    
    build :: fn(src, dest) => 
        run_cmd_blocking(franca, @slice("examples/default_driver.fr", "build", src, "-o", @tfmt("examples/web/target/%", dest), "-arch", "wasm32", "-unsafe"));

    // TODO: spin these up and just wait for them at the end. 
    build("examples/kaleidoscope.fr", "a.wasm");
    build("examples/web/b.fr", "b.wasm");
    build("examples/web/c.fr", "c.wasm");
    build("examples/web/d.fr", "d.wasm");
    
    src := import("@/examples/kaleidoscope.fr").EXAMPLE_PROGRAM;
    write_entire_file_or_crash("examples/web/target/mandel.txt", src);
    
    ssa := collect_with_extension("examples/import_c/test", ".ssa") || panic("lost tests");
    
    commit := if get_environment_variable("GITHUB_REPOSITORY").is_some() {
        ok, o, e := exec_and_catch("git", @slice("rev-parse", "HEAD"), temp());
        @assert(ok, "failed git rev-parse");
        while => o[o.len - 1].is_ascii_whitespace() {
            o.len -= 1;
        };
        @assert_eq(o.len, 40, "failed git rev-parse");
        o.items()
    } else {
        now := time_t.zeroed();
        time(now&);
        tm := localtime(now&);
        @tfmt("%:%:%_dev", tm.hour, tm.min, tm.sec)
    };
    
    manifest := @tfmt(template,
        """["examples/mandelbrot.fr", "examples/sudoku.fr", "examples/kaleidoscope.fr",
            "examples/bf/bf2ir.fr", "examples/bf/code_string.fr", "examples/bf/inline_for.fr"
        ]""",
        "[\"mandel.txt\"]",
        filenames("examples/import_c/test", ".c"),
        filenames("backend/test", ".ssa"),
        commit,
    );
    write_entire_file_or_crash("examples/web/target/manifest.json", manifest);
    
    dirs :: @const_slice("lib", "compiler", "backend", "bindings", "examples");
    for(dirs, copy_dir);
}

copy_dir :: fn(path: Str) void = {
    @if(!dir_exists(path) || path == "examples/web") return();
    names := collect_directory_ordered(path, temp(), temp()) || @panic("failed to read %", path);
    make_dirs_or_crash(@tfmt("examples/web/target/%", path));
    for names { it |
        @if(!it.name.starts_with("."))
        if it.name.ends_with(".fr") {
            src := read_entire_file_or_crash(temp(), @tfmt("%/%", path, it.name));
            write_entire_file_or_crash(@tfmt("examples/web/target/%/%", path, it.name), src);
        } else {
            copy_dir(@tfmt("%/%", path, it.name));
        }
    };
}

filenames :: fn(path: Str, ext: Str) Str = {
    files := collect_with_extension(path, ext) || panic("lost tests");
    out := u8.list(temp());
    @fmt(out&, "[");
    for files { it |
        @fmt(out&, "\"%\",", it);
        src := read_entire_file_or_crash(temp(), @tfmt("%/%", path, it));
        write_entire_file_or_crash(@tfmt("examples/web/target/%", it), src);
    };
    @if(files.len > 0) { out.len -= 1; };
    @fmt(out&, "]");
    out.items()
}

template :: """{
"worker": "worker.js",
"compilers": [
{
    "name": "Franca",
    "url": "b.wasm",
    "examples": %
},
{
    "name": "Kaleidoscope",
    "url": "a.wasm",
    "examples": %
},
{
    "name": "C",
    "url": "c.wasm",
    "examples": %
},
{
    "name": "Qbe IR",
    "url": "d.wasm",
    "examples": %
}
],
"commit": "%"
}""";

#use("@/lib/sys/process.fr");
#use("@/lib/sys/subprocess.fr");
#use("@/lib/sys/fs.fr");
#use("@/examples/testing.fr");
