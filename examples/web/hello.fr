// THIS IS UNFINISHED

// TODO: make it easy to setup and environment that's not on your stack  
//       so you don't have to do everything from inside your main function. 
main :: fn() void = {
    push_zeroed_dynamic_context {
        c := context(DefaultContext);
        temporary_allocator: Arena.Allocator = init(page_allocator, 1.shift_left(20));
        set_temporary_allocator(temporary_allocator&);
        c.panic_hook = print_and_exit1;
        c.global = @static(GlobalFrancaRuntime);
        c.thread_index = 1;
        c.global.next_thread_id = 2;  // :ThreadIdStartsAtOne
        A :: import("@/lib/alloc/fixed_block.fr").BlockAlloc;
        general_allocator: A = init(page_allocator);
        c.general_allocator = general_allocator&.borrow();
        //import("@/examples/hello_triangle.fr")'main();
        //import("@/examples/mandelbrot_ui.fr")'main();
        import("@/examples/chess/gui.fr")'main();
        //import("@/examples/app_events.fr")'main();
        //import("@/examples/farm_game.fr")'main();
        //import("@/examples/terminal.fr")'main();  // TODO: wrong signeture for exit()
        //import("@/examples/lambda.fr")'main();
        //import("@/examples/epicycles.fr")'main();
        //import("@/examples/depth_test.fr")'main();
        //unreachable();
    };
}

:: Sapp.Wgpu;  // force the #export functions to be referenced. TODO: make this more explicit. 
driver :: fn(vtable: *ImportVTable) void = Easy'build_for_graphics(vtable, "examples/web/hello.fr");

#include_std("graphics/lib.fr");
// franca examples/web/hello.fr -arch wasm32 -wgpu -o examples/web/target/hello.wasm
