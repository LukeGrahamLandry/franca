
main :: fn() void = {
    in := read_file_from_last_arg();
    out := u8.list(temp());
    dump(in, out&);
    print(out.items());
}

dump :: fn(in: []u8, out: *List(u8)) void = {
    ::if_opt(i64, []u8);
    decompressed := if GZip'header_size(in) { (skip: i64) |
        compressed := in.rest(skip);
        length: i32 = -1;
        p := bit_cast_unchecked(*u8, *i8, compressed.ptr);
        p := Stb'stbi_zlib_decode_noheader_malloc(p, compressed.len.intcast(), length&);  // :leak
        p := bit_cast_unchecked(*i8, *u8, p);
        @assert(!p.is_null() && length >= 0, "failed to decompress");
        @fmt(out, "      header size = %\n", skip);
        @fmt(out, "  compressed size = %\n", compressed.len);
        @fmt(out, "decompressed size = %\n", length);
        p := p.slice(length.intcast());
        Deflate'decompress(compressed, p);
        p
    } else {
        in
    };
    
    result := Tar'iter(decompressed) { h, contents |
        @fmt(out, "%|%|%| size=% type=% magic=%\n", 
            h.size&.items(), h.prefix&.items(), h.name&.items(), contents.len, h.typeflag - "0".ascii(), h.magic&.items());
    };
    i := result.or(fn(e) => {
        ::enum(@type e);
        @fmt(out, "error! invalid tar file. %", e);
        return()
    });
    @fmt(out, "that's all folks!\nremaining bytes: %\n", decompressed.len - i);
}

GZip :: import("@/lib/encoding/gzip.fr");
Tar :: import("@/lib/encoding/tar.fr");
Deflate :: import("@/lib/encoding/deflate.fr");
#use("@/lib/sys/fs.fr");

// for now just using the deflate from stb_image
Stb :: {
    get  :: import("@/examples/testing.fr").fetch_or_crash;
    root := get("https://github.com/nothings/stb/archive/f0569113c93ad095470c54bf34a17b36646bbbb5.zip", 1754150, "b62be3009cb9d4b6385bd4854bddf72d8e91f4e19d1347d6cf9589b19f70d45d", "stb-f0569113c93ad095470c54bf34a17b36646bbbb5");
    Ffi  :: import("@/examples/import_c/ffi.fr");
    c_source := @tfmt("""
        #define STB_IMAGE_IMPLEMENTATION
        #define STBI_NO_SIMD
        #define STBI_NO_STDIO
        #define STBI_SUPPORT_ZLIB
        #define STBI_ONLY_PNG
        #define STBI_NO_PNG
        #include "%/stb_image.h"
    """, root);
    Ffi'include(current_compiler_context(), c_source)
}
