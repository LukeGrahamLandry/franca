//! This is a trivial example that just renders the Dear Imgui demo window. 
//! If this works, you know you can successfully compile/link dearimgui and the sokol backend. 
//! The cimgui.h api exposed by bindings/dearimgui.fr mirrors the c++ one very closely, 
//! so looking at thier demo should be a reasonable starting point (functions use `ig` instead of `ImGui::` as the prefix).
// TODO: cleanup sokol_and_imgui_lib seperation 
// TODO: be able to jit this at comptime (currently only aot works)

State :: @struct(
    pass_action: SgPassAction,
    window_open: bool,
);

do_init :: fn(userdata: rawptr) void = {
    state := State.ptr_from_raw(userdata);
    state.window_open = true;
    
    desc := SgDesc.zeroed();
    desc.environment = sglue_environment();
    desc.logger.func = slog_func;
    sg_setup(desc&);
    
    desc := SimguiDesc.zeroed();
    desc.logger.func = slog_func;
    simgui_setup(desc&);
    
    state.pass_action.colors&[0].load_action = .CLEAR;
    state.pass_action.colors&[0].clear_value = (r = 0.3.cast(), g = 0.3.cast(), b = 0.3.cast(), a = 1.0.cast());
};

do_render :: fn(userdata: rawptr) void = {
    state := State.ptr_from_raw(userdata);
    
    desc: SimguiFrameDesc = (width = sapp_width(), height = sapp_height(), delta_time = sapp_frame_duration(), dpi_scale = sapp_dpi_scale());
    simgui_new_frame(desc&);
    igShowDemoWindow(state.window_open&);
    
    desc := SgPass.zeroed();
    desc.action = state.pass_action;
    desc.swapchain = sglue_swapchain();
    
    sg_begin_pass(desc&);
    simgui_render();
    sg_end_pass();
    sg_commit();
};

do_event :: fn(event: *SappEvent, userdata: rawptr) void = {
    state := State.ptr_from_raw(userdata);
    simgui_handle_event(event);
};

fn main() void = {
    state := State.zeroed();
    desc := SappDesc.zeroed();
    desc.init_userdata_cb = do_init;
    desc.frame_userdata_cb = do_render;
    desc.event_userdata_cb = do_event;
    desc.user_data = State.raw_from_ptr(state&);
    desc.logger.func = slog_func;
    desc.window_title = "Dear Imgui Demo".maybe_borrow_cstr(temp());
    sapp_run(desc&);
}

SOKOL_MACOS_LINK_ARGS :: @array("-framework", "Metal", "-framework", "MetalKit", "-framework", "Cocoa", "-framework", "QuartzCore");

fn driver(vtable: *ImportVTable) void #export = {    
    src := "#include_std(\"lib/core.fr\");".clone(temp());
    the_code := temp().read_to_string_or_crash("examples/dearimgui_demo.fr");  // TODO: don't depend on cwd.
    src&.push_all(the_code.items());
    sokol_bindings := temp().read_to_string_or_crash("bindings/sokol.fr");
    src&.push_all(sokol_bindings.items());
    imgui_bindings := temp().read_to_string_or_crash("bindings/dearimgui.fr");
    src&.push_all(imgui_bindings.items());
    
    comp := vtable.new_with_src(src.items(), vtable.default_build_options());
    ctx := vtable.with(comp);
    
    libs := ctx.empty_libs();
    //libs&.intercept_imports();
    libs&.add_lib(sokol_and_imgui_macos_lib);
    libs&.add_lib(dearimgui_lib);
    
    main_sym := {vtable.intern_string}(comp, "main");
    main_f := {vtable.find_unique_func}(comp, main_sym).unwrap();
    {vtable.compile_func}(comp, main_f, .Jit).unwrap();

    c: CompCtx = (data = comp, vtable = vtable);
    
    m := QbeModule.zeroed();
    init_default_module_dyn(m&, vtable, (arch = query_current_arch(), os = .macos, type = .Relocatable));  // :HardcodeOs
    bytes := emit_qbe_included_dyn(m&, c&, @slice(main_f), .WrapMain);
    
    out := open_trunc("a.out").unwrap();
    for bytes& { bucket |
        out&.write(bucket);
    };
    out.close();
    
    start := timestamp();
    args := libs&.get_aot_objects();
    args&.push_all(@slice ("a.out", "-o", "a.out", "-g", "-Os"));
    
    SOKOL_MACOS_LINK_ARGS :: @array("-framework", "Metal", "-framework", "MetalKit", "-framework", "Cocoa", "-framework", "QuartzCore");
    a := SOKOL_MACOS_LINK_ARGS;
    args&.push_all(a&.items());
    args&.push_all(@slice ("-target", target_triple(m.goal.arch, m.goal.os)));   
    
    @println("%", args.items());
    success := run_cmd_blocking("clang++", args.items());
    assert(success, "failed to link");
}

#include_std("backend/lib.fr");
#include_std("compiler/ast_external.fr");
