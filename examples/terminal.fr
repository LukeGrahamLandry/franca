// LIMITATIONS: no input to child process. no line wrap. ascii only. no ansi escape codes. no tabs. 
// 
// it doesn't have to be the best terminal program, it just has to be good enough that i 
// don't have to use someone else's thing that occasionally gives you a giant red banner until you 
// let it update itself to add more AI to keep the VCs happy and change the boldness of the font. 
// the only feature i want in a terminal is to let me click with the mouse on where i want the cursor to be. 
// also im going to lose my mind if i have to read that your terminal is gpu accelerated, thats what programs are.
// the other reason i want this is to embed it in a website when i get to the point of having wasm 
// demos that want to let you interact with the compiler the same as when it's a native program. 
// 

#include_std("graphics/lib.fr");
Repl :: import("@/examples/repl.fr");

ENABLE_FRANCA_REPL :: true;
Replay :: import("@/graphics/replay.fr");

State :: @struct(
    pass_action: Sg.PassAction,
    text: *Sdtx.Self,
    buffers: List(TextBuffer),
    selected_buffer: i64,
    app: Sapp.Self,
    sg: Sg.Self,
    process: ?RunningProcess,
    scratch: List(u8),
    lock_to_bottom: bool,
    history: RawList(Str),
    history_index: i64,
    repl: @if(ENABLE_FRANCA_REPL, Repl.ReplState, void),
    dirty: bool,
    theme: ColourTheme,
    last_click_time: i64,
    click_count: i64,
    scale: f64,  // height = 2 * scale
    recording: ?Replay'Recorder,
);

ColourTheme :: @struct {
    background: Sg.Color = (r = 0.156, g = 0.156, b = 0.156, a = 1);
    font := pack_rgba(235, 219, 178, 255);
    highlight := pack_rgba(0.09, 0.09, 0.09, 1);
    selection := pack_rgba(62, 70, 67, 255);
    cursor := pack_rgba(0, 204, 255, 255);
}

// This needs the extra level of indirection so it can be shared with the repl. 
state :: @static(*State);

on_init :: fn(userdata: rawptr) void = {
    state := state[];
    sapp := state.app&;
    allocator := general_allocator();
    state.sg&.setup(
        environment = Easy'glue_environment(sapp),
        allocator = allocator,
    );
    @if(ENABLE_FRANCA_REPL) {
        prelude := "#include_std(\"lib/core.fr\");#include_std(\"examples/terminal.fr\");\n";
        state.repl = Repl'init_repl(allocator, prelude);
        if Repl.STDLIB_PATH { path |
            cd(path[]);
        };
        res := state.repl&.run_chunk(@tfmt("real_state := State.ptr_from_int(%); state[] = real_state; state := state[];", raw_from_ptr(@type state[], state)));
        ::Repl;
        state.repl.program.Repl'unwrap_report_error(void, res);
    };
    state.scratch = list(u8, 4*1024*1024, allocator);  // :BigOutputBuffer
    state.lock_to_bottom = true;
    state.history_index = 0;
    state.history&.push("", allocator);
    state.history&.push("", allocator);
    state.scale = 8 * state.app.dpi_scale.cast();
    state.theme = ();
    state.recording = .None;
    
    state.dirty = true;
    
    state.text.setup(
        allocator = allocator,
        fonts = @slice(Sdtx.font.cpc),
        sg = state.sg&,
        context = (
            char_buf_size = 32768, 
            char_width = state.scale.cast(), 
            char_height = state.scale.cast() * 2,
        ),
    );
    
    w_width := sapp.width().float();
    w_height := sapp.height().float();
    
    buffer: TextBuffer = empty(allocator);
    //buffer.at.pos = (x = 20, y = 10);
    buffer.at.w = w_width - 20; // - 200;
    buffer.at.h = w_height;
    push(state.buffers&, buffer);
    
    //buffer: TextBuffer = empty(allocator);
    //buffer.at = (pos = (x = w_width - 200, y = 10), w = 100, h = 100);
    //push(state.buffers&, buffer);
    
    font_pixels := load_font_pixels(state.scale, general_allocator());
    font_img: Sg.Image = state.sg&.make(
        width = state.scale.int().intcast()*256,
        height = state.scale.mul(2).int().intcast(),
        pixel_format = .R8,
        data = (subimage = ((font_pixels, ..empty()), ..zeroed(Array([]u8, 16)))),
        label = "font_texture",
    );
    state.text.font_img = font_img;
};

fn load_font_pixels(scale: f64, a: Alloc) []u8 #use(StbTrueType) = {
    W := scale;
    H := scale * 2;
    tex_width := (128-32) * scale.int() / 4;  // TODO: think about how to choose this number correctly
    bitmap := temp().alloc(u8, tex_width*tex_width);
    chars := temp().alloc(stbtt_bakedchar, 128-32);
    result := stbtt_BakeFontBitmap(font_data_ttf().as_ptr(), 0, scale.cast() * 2, bitmap.ptr, intcast tex_width, intcast tex_width, 33, 128, chars.ptr);
    @assert(result >= 0, "didn't fit all characters");
    // TODO: is this bigger than atlas + metadata? 
    pixels := a.alloc_zeroed(u8, 256*int(W*H));
    x: f32 = 0; y: f32 = 0;
    baseline := int(scale / 16 * 20);
    range(0, 128-32) { i |
        // These are the positions of the texture in the atlas
        x0, y0, x1, y1 := (@as(i64) chars[i].x0.zext(), @as(i64) chars[i].y0.zext(), @as(i64) chars[i].x1.zext(), @as(i64) chars[i].y1.zext());
        // These are how much you have to move it to account for the blank part. 
        // ie. the square above will just cover the filled in part of `_` and this tells us to move it down. 
        x, y := (chars[i].xoff.cast().int(), chars[i].yoff.cast().int());
        range(y0, y1) { j |
            char_w := x1 - x0;
            src  := bitmap.subslice(j*tex_width + x0, char_w);
            dest := pixels.subslice((j-y0+(y+baseline))*W.int()*256 + x + (i+32+1)*W.int(), char_w);
            dest.copy_from(src);
        };
    };
    // make non ascii bytes show as filled in cells
    range(0, H.int()) { j |
        base := j*W.int()*256;
        pixels.slice(base + 0, base + 32*W.int()).set_bytes(0xFF);
        pixels.slice(base + 128*W.int(), base + 255*W.int()).set_bytes(0xFF);
    };
    pixels
}

Colour :: @struct(r: i64, g: i64, b: i64, a := 255);
Pos :: @struct(x: f64, y: f64);
Rect :: @struct(pos: Pos, w: f64, h: f64);

on_frame :: fn(userdata: rawptr) void = {
    state := state[];
    if state.process& { p |
        buffer := state.buffers&[0]&;
        status := poll(p, state.scratch&);
        buffer.append_string(state.scratch.items());
        state.scratch&.clear();
        @match(status) {
            fn Ok(status) => if status { status |
                ms := timestamp() - p.start;
                state.process = .None;
                buffer.append_string(@tfmt("\nExited with status %", status));
                if ms > 32 {
                    // if it didn't span multiple frames the time is not super interesting. 
                    buffer.append_string(@tfmt(" (in % ms)", ms));
                };
                buffer.append_string("\n");
            } else {
                // still running
            };
            fn Err(msg) => buffer.append_string(msg);
        };
    };
    
    if !state.dirty {
        // if no events and no text from process, don't render a frame
        return();
    };
    state.dirty = false;
    
    each state.buffers& { b |
        draw_text(b);
    };
    sg := state.sg&;
    
    state.pass_action.colors&[0] = (
        load_action = .CLEAR,
        clear_value = state.theme.background,
    );
    Easy'glue_begin_pass(state.app&, sg, state.pass_action);
    
    sdtx := state.text.default_context&;
    sdtx.draw_layer(0);
    
    sg.end_pass();
    sg.commit();
};

fn append_string(buffer: *TextBuffer, new: Str) void = {
    state := state[];
    if(new == "", => return());
    state.dirty = true;
    last := buffer.lines[buffer.lines.len - 1]&;
    start := 0;
    i := 0;
    while => i < new.len {  
        continue :: local_return;
       
        // :TodoShareAnsiSkipLogic
        // I don't handle ansi escape codes yet but they have a fixed pattern 
        // so skip them so you don't clutter the terminal with junk. 
        //
        // TODO: really the franca compiler should just respect whatever the env vars you're 
        //       supposed to set to set to say what the terminal supports and then this would 
        //       be less important to me. 
        // TODO: also this is totally wrong because an escape could be split 
        //       across two calls to poll() and then we'd get super confused. 
        //
        if new[i] == 27 && i + 1 < new.len && new[i + 1] == "[".ascii() {
            line := new.slice(start, i);
            buffer.max_x = max(buffer.max_x, float(last.len() + line.len));
            last.push_all(line, buffer.gpa);
            
            i += 2;
            while => i < new.len && new[i] >= 0x30 && new[i] <= 0x3F {
                i += 1;
            }
            while => i < new.len && new[i] >= 0x20 && new[i] <= 0x2F {
                i += 1;
            }
            if i < new.len && new[i] >= 0x40 && new[i] <= 0x7E {
                i += 1;
            }
            
            start = i;
            continue();
        };
        
        if new[i] == "\n".ascii() {
            line := new.slice(start, i);
            buffer.max_x = max(buffer.max_x, float(last.len() + line.len));
            last.push_all(line, buffer.gpa);
            buffer.lines&.push(empty_line, buffer.gpa);
            last = buffer.lines[buffer.lines.len - 1]&;
            start = i + 1;
            if state[].lock_to_bottom && buffer.lines.len > buffer.num_lines_fit_on_screen {
                // If you're already near the bottom of the document, scroll down as new text
                // is added so you can see it stream in, but if you carefully scrolled up to 
                // look at something, don't rip you away from your place. 
                buffer.render.y = float(buffer.lines.len - buffer.num_lines_fit_on_screen + 1);
            }
        };
        i += 1;
    };
    line := new.rest(start);
    buffer.max_x = max(buffer.max_x, float(last.len() + line.len));
    last.push_all(line, buffer.gpa);
    
    if buffer.cursor.y != buffer.lines.len.float() - 1 {
        buffer.put_cursor_at_end();
    }
}

fn put_cursor_at_end(buffer: *TextBuffer) void = {
    last := buffer.lines[buffer.lines.len - 1]&;
    buffer.cursor.y = buffer.lines.len.float() - 1;
    buffer.cursor.x = last.len().float();
}

fn echo(s: Str) void = {
    if selected_buffer() { buffer |
        buffer.append_string(s);
        buffer.put_cursor_at_end();
    }
}

fn cd(s: Str) void = {
    Syscall'chdir(@fmt_cstr("%", s)) 
        || echo(@tfmt("failed to set working directory to '%'\n", s));
}

fn exit() void = {
    state[].app.quit_requested = true;
}

on_event :: fn(userdata: rawptr, event: *Sapp.Event) void = {
    state := state[];
    if state.recording& { it |
        it.push(event);
    };
    
    if event.type != .MOUSE_MOVE {
        state.dirty = true;
    } else {
        update_hover(event);
        
        // left mouse + drag -> select text (for copying with cmd+c)
        if event.modifiers.get(.left_mouse) != 0 {
            break :: local_return;
            b, pos := find_mouse(event) || break();
            b.set_cursor(pos);
            state.dirty = true;
            if b.selection& { sel |
                sel.end = pos;
            } else {
                b.selection = (Some = (start = pos, end = pos));
            }
        }
    };
    
    if event.type == .MOUSE_DOWN && event.modifiers.get(.left_mouse) != 0 {
        b, pos := find_mouse(event) || return();
        line, col := (pos.y.int(), pos.x.int());
        b.selection = .None;
        
        now := timestamp();
        if now - state.last_click_time < 400 {
            break :: local_return;
            if state.click_count == 0 {
                // double click -> select word
                _, start, end := find_link_at(b, line, col) || break();
                b.selection = (Some = (
                    start = (x = start.float(), y = line.float()),
                    end   = (x = end.float(),   y = line.float()),
                ));
                state.click_count += 1;
            } else {
                // triple click -> select line
                b.selection = (Some = (
                    start = (x = 0, y = line.float()),
                    end   = (x = b.lines[line]&.len().float(), y = line.float()),
                ));
                state.click_count = 0;
            }
            b.set_cursor(b.selection.Some.end);
        } else {
            state.click_count = 0;
            b.set_cursor(pos);
        }
        state.last_click_time = now;
        
        if event.modifiers.get(.super) != 0 {
            // cmd + left click -> open file path
            open_link_at(b, line, col);
            return();
        };
    };
    
    if event.type == .RESIZED {
        // the main buffer always covers the whole window
        buffer := state.buffers[0]&;
        buffer.at.w = state.app.framebuffer_width.float();
        buffer.at.h = state.app.framebuffer_height.float();
    }
    
    if event.type == .KEY_DOWN {
        if event.key_code == .W && event.modifiers.get(.super) != 0 {
            // cmd+w -> exit
            state.app.quit_requested = true;
        };
        
        // ^c -> SIGINT, ^C -> SIGKILL
        if event.key_code == .C && event.modifiers.get(.control) != 0 {
            if state.process& { p |
                if event.modifiers.get(.shift) != 0 {
                    Syscall'kill(p.pid, @as(i32) SignalNum.Kill);
                } else {
                    // TODO: how do i make this work on make? (i assume the nesting is the problem? do i send it to all children somehow?)
                    Syscall'kill(p.pid, @as(i32) SignalNum.Interupt);
                }
            } else {
                if selected_buffer() { buffer |
                    buffer.append_string("nothing is running right now\n");
                }
            }
        }
        
        if event.key_code == .R && event.modifiers.get(.control) != 0 && event.modifiers.get(.shift) != 0 {
            if state.recording { it |
                out := u8.list(temp());
                it&.save(out&);
                path := @tfmt("target/replay/%.bin", timestamp());
                write_entire_file_or_crash(path, out.items());
                echo @tfmt("stopped recording. saved replay to %\n", path);
                println(path);
                
                state.recording = .None;  // :LEAK
            } else {
                state.recording = (Some = init(general_allocator()));
                echo "started recording\n";
            }  
        }
        
        buffer := selected_buffer() || return();
        
        if event.key_code == .TAB {
            // tab -> autocomplete from history
            last := buffer.lines[buffer.lines.len - 1]&;
            prefix := last.str();
            found: ?Str = .None;
            for state.history { check |
                if check.starts_with(prefix) {
                    if found& { prev |
                        start := min(prev.len, check.len);
                        i := prefix.len;
                        while => i < start && prev[i] == check[i] { 
                            i += 1;
                        };
                        prev[] = prev[].slice(0, i);
                    } else {
                        found = (Some = check);
                    }
                }
            };
            if found { found |
                last.set_len(0);
                last.push_all(found, buffer.gpa);
                buffer.put_cursor_at_end();
            }
        }
        
        if event.key_code == .C && event.modifiers.get(.super) != 0 {
            copy_from_selection(buffer);
        };
        
        @debug_assert(buffer.lines.len > 0);
        if event.key_code == .BACKSPACE {
            @debug_assert(buffer.cursor.y >= 0);
            l := min(buffer.cursor.y.int(), buffer.lines.len - 1);
            last := buffer.lines[l]&;
            if last.len() > 0 {
                i := min(buffer.cursor.x.int(), last.len()) - 1;
                if i < 0 {
                    // TODO: merge lines
                    return();
                }
                last.remove_at(i);
                buffer.set_cursor(x = i.float(), y = l.float());
            } else {
                new_l := max(l - 1, 0);
                buffer.set_cursor(x = buffer.lines[new_l]&.len().float(), y = new_l.float());
                buffer.lines&.ordered_remove(l);
            };
        }
        
        if event.key_code == .UP {
            move_in_history(buffer, true);
        }
        
        if event.key_code == .DOWN {
            move_in_history(buffer, false);
        }
        
        if event.key_code == .A && event.modifiers.get(.control) != 0 {
            buffer.cursor.x = 0;
        };
        
        if event.key_code == .LEFT {
            buffer.cursor.x = max(buffer.cursor.x - 1, 0);
            // TODO: off the end to prev line?
        };
        
        if event.key_code == .RIGHT {
            buffer.set_cursor(x = buffer.cursor.x + 1, y = buffer.cursor.y);
            // TODO: off the end to next line?
        };
        
        if event.key_code == .ENTER {
            if event.modifiers.get(.shift) != 0 {
                buffer.append_string("\n");
                buffer.cursor.x = 0;
                return();
            };
            
            raw_command := buffer.lines&[buffer.lines.len - 1]&.str();
            exec(buffer, raw_command);
            buffer.cursor.x = 0;
        };
    };
    buffer := selected_buffer() || return();
    
    if event.type == .CHAR && event.char_code < 127 && event.char_code >= 32 && event.modifiers.get(.super) == 0 {
        s: Str = (ptr = ptr_cast_unchecked(u32, u8, event.char_code&), len = 1);
        l := min(buffer.cursor.y.int(), buffer.lines.len - 1);
        last := buffer.lines[l]&;
        last.insert_at(buffer.cursor.x.int(), s, buffer.gpa);
        buffer.set_cursor(x = buffer.cursor.x + s.len.float(), y = buffer.cursor.y);
    };
    
    @match(event.type) {
        fn CLIPBOARD_PASTED() => {
            buffer.append_string(state.app&.get_clipboard_string().items());
        }
        fn MOUSE_SCROLL() => {
            scroll_speed :: -2.0;
            buffer.render.x += event.scroll_x.cast() * scroll_speed;
            buffer.render.y += event.scroll_y.cast() * scroll_speed;
            update_hover(event);
        };
        fn MOUSE_MOVE() => if event.modifiers.get(.right_mouse) != 0 {
            state.dirty = true;
            buffer.render.x += event.mouse_dx.cast() * -1.0 / state.scale;
            buffer.render.y += event.mouse_dy.cast() * -1.0 / (state.scale * 2);
        }
        fn FILES_DROPPED() => if state.app.drop.num_files == 1 {
            buffer.append_string(state.app&.get_dropped_file_path(0));
        };
        @default => ();
    };
};

copy_from_selection :: fn(self: *TextBuffer) void = {
    state := state[];
    sel := fix(self.selection || return());
    buf := u8.list(temp());
    
    startL := max(0, sel.start.y.int());
    endL   := min(self.lines.len, sel.end.y.int() + 1);
    range(startL, endL) { i |
        text := self.lines[i]&.str();
        left := if(i == startL, => sel.start.x.int().min(text.len), => 0);
        right := if(i == endL - 1, => sel.end.x.int().min(text.len), => text.len);
        buf&.push_all(text.slice(left, right));
        if i != endL - 1 {
            buf&.push("\n".ascii());
        }
    };
    
    buf&.push(0);
    state.app&.set_clipboard_string(ptr = buf.maybe_uninit.ptr); 
}

move_in_history :: fn(b: *TextBuffer, up: bool) void = {
    state := state[];
    if b.lines.len > 0 {
        b.lines&[b.lines.len - 1]&.set_len(0);
    }
    state.history_index = if up {
        max(state.history_index - 1, 0)
    } else {
        min(state.history_index + 1, state.history.len - 1)
    };
    cmd := state.history[state.history_index];
    b.append_string(cmd);
    b.put_cursor_at_end();
}

update_hover :: fn(event: *Sapp.Event) void = {
    state := state[];
    b, pos := find_mouse(event) || return();
    new_hover := find_link_at(b, pos.y.int(), pos.x.int());
    ::AutoEq(@type new_hover); ::AutoEq(Ty(i64, i64, i64));
    if b.hover& != new_hover& {
        b.hover = new_hover;
        state.dirty = true;
    }
    state.app&.set_mouse_cursor(@if(b.hover.is_none(), .ARROW, .POINTING_HAND));
}

find_mouse :: fn(event: *Sapp.Event) ?Ty(*TextBuffer, Pos) = {
    pos: Pos = (x = event.mouse_x.cast(), y = event.mouse_y.cast());
    state := state[];
    enumerate state.buffers& { i, b |
        if b.at.contains(pos) {
            state.selected_buffer = i;
            pos: Pos = (
                x = (pos.x - b.at.pos.x) / state.scale + b.render.x, 
                y = (pos.y - b.at.pos.y) / (state.scale * 2) + b.render.y,
            );
            return(Some = (b, pos));
        };
    };
    .None
}

open_link_at :: fn(b: *TextBuffer, line: i64, col: i64) void = {
    _, start, end := find_link_at(b, line, col) || return();
    link := b.lines[line]&.str().slice(start, end);
    // TODO: is `open` a thing on linux? 
    //       if i use open i have to parse the :line:col suffix anyway because it doesn't like that. 
    //cmd := @tfmt("open %", link);
    //b.append_string(cmd);
    //exec(b, cmd);  // TODO: this is kinda spammy to dump this in your terminal
    sys_exec(@slice(
        @fmt_cstr("zed"), // TODO: is there an env var im supposed to look at to know your default editor? 
        @fmt_cstr("%", link),
        zeroed CStr,
    ));
}

find_link_at :: fn(b: *TextBuffer, line: i64, col: i64) ?Ty(i64, i64, i64) = {
    if(line >= b.lines.len || line < 0, => return(.None));
    text := b.lines[line]&.str();
    if(col >= text.len || col < 0, => return(.None));
    
    // spread along the text in both directions
    start := col;
    while => start > 0 && !text[start].is_ascii_whitespace() {
        start -= 1;
    }
    if start < text.len - 1 && text[start].is_ascii_whitespace() {
        start += 1;
    }
    end := col;
    while => end < text.len && !text[end].is_ascii_whitespace() {
        end += 1;
    };
    
    (Some = (line, start, end))
}

fn selected_buffer() ?*TextBuffer = {
    state := state[];
    if(state.selected_buffer >= state.buffers.len, => return(.None));
    b := state.buffers.index(state.selected_buffer);
    @debug_assert(b.lines.len > 0);
    (Some = b)
}

fn main() void = {
    allocator := general_allocator();
    state[] = allocator.box(State);
    state := state[];
    state[] = zeroed @type state[];
    state.text = allocator.box(@type state.text[]);
    state.buffers = list(allocator);
    state.process = .None;
    
    
    i := 0;
    a := cli_args();
    while => i < a.len - 1 { 
        if a[i] == "-replay" {
            path := a[i + 1];
            bytes := read_to_string_or_crash(temp(), path.str());
            recording: Replay'Recording = load(bytes.items(), general_allocator());
            replay(recording, state.app&, (
                init_cb = on_init,
                frame_cb = on_frame,
                event_cb = on_event,
                user_data = zeroed rawptr,
                allocator = general_allocator(),
            ));
        };
        i += 1;
    };
    
    // :SLOW
    fn load_new_buffer(path: Str, a: Alloc) TextBuffer = {
        buffer: TextBuffer = empty(a);
        input := buffer.gpa.read_to_string_or_crash(path).items(); // :panic :leak
        buffer&.append_string(input);
        buffer
    };
    //state.buffers&.push(load_new_buffer("compiler/v2/sema.fr", allocator));
    
    //state.buffers&.push(load_new_buffer("examples/terminal.fr", allocator));
    state.app&.run(
        init_cb = on_init,
        frame_cb = on_frame,
        event_cb = on_event,
        user_data = zeroed rawptr,
        window_title = "pls run da program",
        allocator = general_allocator(),
        enable_clipboard = true,
        enable_dragndrop = true,
        high_dpi = true,
    );
}

fn driver(vtable: *ImportVTable) void = 
    Easy'build_for_graphics(vtable, "examples/terminal.fr");

#include_std("backend/lib.fr");

TextBuffer :: @struct(
    lines: RawList(Line),
    at: Rect,
    gpa: Alloc,
    cursor: Pos,
    render: Pos,  // visual scroll position
    max_x: f64,
    dead: bool,
    num_lines_fit_on_screen: i64,
    
    selection: ?Selection,
    
    // TODO: can be stale. should call update_hover more (so it shouldn't 
    //       take an Event, i should just remember the last mouse position)
    //       - when new text comes in from a process
    //       - when you type and add text to the line
    hover: ?Ty(i64, i64, i64),   // (line, start col, end col)
);

// in `state.selection`, `start` is always the first place you clicked (not the higher up one)
Selection :: @struct {
    start: Pos;
    end: Pos;
};

// reorder `start`/`end` so `start` is above `end`
fn fix(sel: Selection) Selection = {
    if sel.start.y > sel.end.y {
        t := sel.start; sel.start = sel.end; sel.end = t;
    }
    sel
}

fn set_cursor(self: *TextBuffer, pos: Pos) void = {
    y := pos.y.max(0).min(self.lines.len.float() - 1);
    self.cursor.y = y;
    self.cursor.x = pos.x.max(0).min(self.lines[y.int()]&.len().float());
}

fn draw_text(self: *TextBuffer) void = {
    if(self.dead, => return());
    state := state[];
    w, h := (self.at.w, self.at.h);
    max_line_width := self.max_x - (w / state.scale);
    self.render.x = max(0, min(self.render.x, max_line_width));
    state[].lock_to_bottom = self.render.y > self.lines.len.float() - self.num_lines_fit_on_screen.float();
    self.render.y = max(0, min(self.render.y, self.lines.len.float()));
    
    sdtx := state.text.default_context&;
    sapp := state.app&;
    sdtx.canvas(state.app.framebuffer_width.float().cast(), state.app.framebuffer_height.float().cast());
    
    // the fractional component of your scroll position is used to offset the text rendering on the screen.
    // and the integral component chooses which range of lines we draw.
    x := cast(self.at.pos.x / state.scale - (self.render.x - self.render.x.floor()));
    y := cast(self.at.pos.y / (state.scale * 2) - (self.render.y - self.render.y.floor()));
    sdtx.pos.x = x;
    line_count := int(h / (state.scale * 2)) + 1;
    self.num_lines_fit_on_screen = line_count;
    start := min(max(0, self.render.y.int()), self.lines.len);
    end   := min(start + line_count, self.lines.len);
    chars_that_fit := int(w / state.scale) + 2;
    col := self.render.x.int();
    
    // building the highlight rectangle out of single char cells like this is stupid
    // and slow but like... it's fine for this program. 
    
    if self.hover { line, startH, endH | 
        if line >= start && line < end {
            sdtx.color = state.theme.highlight; 
            sdtx.pos.y = y + (line - start).float().cast();
            sdtx.pos.x = x + (startH - col).float().cast();
            left  := max(startH, col);
            right := min(endH, col + chars_that_fit);
            range(left, right, fn(_) => sdtx.put(0));  // filled in cell
        }
    };
    
    if self.selection { sel |
        sel := sel.fix();
        sdtx.color = state.theme.selection; 
        startL := max(start, sel.start.y.int());
        endL   := min(end, sel.end.y.int() + 1);
        sdtx.pos.y = y + (startL - start).float().cast();
        sdtx.pos.x = x + (sel.start.x.int() - col).float().cast();
        range(startL, endL) { i |
            left := if(i == startL, => sel.start.x.int(), => col);
            right := if i == endL - 1 {
                sel.end.x.int().min(self.lines[i]&.len())
            } else {
                self.lines[i]&.len()
            };
            right = min(right, left + chars_that_fit);
            range(left, right, fn(_) => sdtx.put(0));  // filled in cell
            sdtx.pos.y += 1;
            sdtx.pos.x = x;
        };
    };
    
    // draw the cursor as a narrow bar
    // TODO: this is an overly hacky thing to do. just have another character slot with a narrow texture (like byte 1 or whatever)
    {
        sdtx.pos.x = x + (self.cursor.x.int() - col).float().cast();
        sdtx.pos.y = y + (self.cursor.y.int() - start).float().cast();
        sdtx.color = state.theme.cursor;
        cursor_fraction :: 4.0;
        sdtx.glyph_size.x /= cursor_fraction;
        sdtx.pos.x *= cursor_fraction;
        sdtx.put(0); 
        sdtx.glyph_size.x *= cursor_fraction;
    };

    sdtx.pos.x = x;
    sdtx.pos.y = y;
    sdtx.color = state.theme.font; 
    range(start, end) { i |
        line := self.lines&.index(i).str();
        
        debug_small_strings :: false;
        if debug_small_strings {
            sdtx.color = @if(self.lines[i].repr.len < 0, 0xFF00FF00, 0xFF0000FF);
        }
        
        if col < line.len {
            count := min(line.len - col, chars_that_fit);
            sdtx.put(line.subslice(col, count)); 
        };
        sdtx.pos.y += 1;
        sdtx.pos.x = x;
    };
}

Line :: @struct(
    // small string optimisation:
    // a valid list will never have a negative length, so if length < 0 (high bit is set), 
    // interpret the rest of the high byte of length (which is the 24th byte in this struct 
    // because two's complement) as the length of a string stored inline in the other 23 bytes. 
    // 
    // note length can still be 0..24 with an allocation if you pushed past 24 and then deleted 
    // some characters, we don't deallocate the list since you're likely to retype them immediately. 
    repr: RawList(u8),
);

// len = 0 means it has an allocation. this has the high bit set so it's in small mode. 
empty_line: Line : (repr = (ptr = zeroed(*u8), cap = 0, len = 0x80.shift_left(64-8)));

fn raw_bytes(self: *Line) []u8 = self.slice(1).interpret_as_bytes();

fn str(self: *Line) Str #inline = if self.repr.len < 0 {
    b := self.raw_bytes();
    b.subslice(0, b[23].zext().bit_and(0x7F))
} else {
    self.repr.items()
};

fn len(self: *Line) i64 #inline = if self.repr.len < 0 {
    self.repr.len.shift_right_logical(64-8).bit_and(0x7F)
} else {
    self.repr.len
};

fn set_len(self: *Line, new_len: i64) void #inline = if self.repr.len < 0 {
    @debug_assert(new_len <= 23 && new_len >= 0);
    not_high_byte := (@as(i64)0xFF).shift_left(64-8).bit_not();
    part_of_string := self.repr.len.bit_and(not_high_byte);
    self.repr.len = new_len.bit_or(0x80).shift_left(64-8).bit_or(part_of_string);
} else {
    self.repr.len = new_len;
};

fn push_all(self: *Line, s: []u8, a: Alloc) void = if self.repr.len < 0 {
    l := self.repr.len.shift_right_logical(64-8).bit_and(0x7F);
    b := self.raw_bytes();
    if s.len + l > 23 {
        dest := a.alloc(u8, s.len + l);
        dest.slice(0, l).copy_from(b.subslice(0, l));
        dest.rest(l).copy_from(s);
        self.drop(a);
        self.repr = dest.as_raw_list();
    } else {
        self.set_len(l + s.len);  // TODO: why does this need to be first
        b.subslice(l, s.len).copy_from(s);
        @debug_assert_le(self.repr.len, 0);
    }
} else {
    self.repr&.push_all(s, a);
};

fn drop(self: *Line, a: Alloc) void = if self.repr.len >= 0 {
    self.repr&.drop(a);
};

fn insert_at(self: *Line, i: i64, s: Str, a: Alloc) void = {
    prev := self.str();
    if i >= prev.len {
        self.push_all(s, a);
        return()
    };
    
    // TODO: share code with slowly_prepend_all (thats just offset = 0)
    
    if self.repr.len < 0 || prev.len + s.len >= self.repr.cap {
        dest := a.alloc(u8, prev.len + s.len);
        dest.slice(0, i).copy_from(prev.slice(0, i));
        dest.slice(i, i + s.len).copy_from(s);
        dest.rest(i + s.len).copy_from(prev.rest(i));
        self.drop(a);
        self.repr = dest.as_raw_list();
        return()
    };
    
    self.repr.len += s.len;
    buf := self.repr.items();
    buf.copy_overlapping(i + s.len, i, prev.len - i);
    buf.slice(i, i + s.len).copy_from(s);
}

fn remove_at(self: *Line, i: i64) void = {
    @debug_assert_ge(i, 0);
    prev := self.str();
    if i < prev.len {
        prev.copy_overlapping(i, i + 1, prev.len - i - 1);
    };
    self.set_len(prev.len - 1);
}

fn empty(a: Alloc) TextBuffer = {
    b := zeroed TextBuffer;
    b.gpa = a;
    b.lines&.push(empty_line, b.gpa);
    b.selection = .None;
    b.hover = .None;
    b
}

fn contains(r: Rect, p: Pos) bool = 
    p.x > r.pos.x && p.x < r.pos.x + r.w && p.y > r.pos.y && p.y < r.pos.y + r.h;

#use("@/lib/sys/fs.fr");

RunningProcess :: @struct {
    pipes: Array(Fd, 3);  // in, out, err
    pid: i32;
    start: i64;
};

fn exec(buffer: *TextBuffer, raw_command: Str) void = {
    if(raw_command == "", => return());
    
    push_history(raw_command);
    
    if raw_command.starts_with(";") || raw_command.ends_with(";") {
        exec_franca(buffer, raw_command);
    } else {
        exec_program(buffer, raw_command);
    }
}

push_history :: fn(raw_command: Str) void = {
    allocator := general_allocator();
    state := state[];
    @debug_assert(state.history.len >= 2);
    if state.history[state.history.len - 2] != raw_command {
        state.history.len -= 1;  // blank
        state.history&.push(raw_command.shallow_copy(allocator), allocator);
        state.history&.push("", allocator);
    };
    state.history_index = state.history.len - 1;
}

exec_franca :: fn(buffer: *TextBuffer, raw_command: Str) void = {
    state := state[];
    if !raw_command.ends_with(";") {
        raw_command = buffer.lines&[buffer.lines.len - 1]&.str();
        buffer.append_string(";");
        raw_command.len += 1;
    }
    
    buffer.append_string("\n");
    @if(ENABLE_FRANCA_REPL, {
        result := state.repl&.run_chunk(raw_command);
        if result&.is_err() {
            out: List(u8) = list(temp());
            state.repl.program.fmt_error(result.Err, out&, false);
            buffer.append_string(out.items());
        };
    }, echo("This copy of terminal.fr was not compiled with FRANCA_REPL_ENABLED"));
    //const_eval(void)(@{ import(@[@literal @tfmt("{ result :: { state := state; %;  }; _HACK :: %; };", raw_command, timestamp())]).result });
    buffer.append_string("\n");
}

exec_program :: fn(buffer: *TextBuffer, raw_command: Str) void = {
    state := state[];
    cmd := CStr.list(temp());
    start := 0;
    range(0, raw_command.len) { i |
        if raw_command[i] == " ".ascii() {
            cmd&.push(@fmt_cstr("%", raw_command.slice(start, i)));
            start = i + 1;
        };
    };
    cmd&.push(@fmt_cstr("%", raw_command.rest(start)));
    cmd&.push(zeroed CStr);
    if cmd[0].str().ends_with(".fr") {
        cmd&.insert(0, @as(CStr) "franca");
    };
    if cmd[0].str() == "cd" {
        buffer.append_string("\nassuming you meant to call the shell builtin 'cd'\n");
        if cmd.len > 1 {
            cd(cmd[1].str());
        };
        return();
    }
    
    buffer.append_string("\n");
    cmd := cmd.items();
    if state.process.is_none() {
        @match(sys_exec(cmd)) {
            fn Ok(it) => {
                state.process = (Some = it);
                buffer.append_string(@tfmt("pid = %, time = %|\n", it.pid, it.start));
            }
            fn Err(msg) => buffer.append_string(msg);
        };
        buffer.append_string("=======================\n");
    } else {
        buffer.append_string("something is already running.\npress control + c to interrupt it (+ shift to kill it)\n");
    };
}

sys_exec :: fn(args: []CStr) Result(RunningProcess, Str) = {
    pipes := zeroed Array(Array(Fd, 2), 3);
    each pipes& { p |
        pipe(p) || return(Err = "libc::pipe() failed");
    };
    @debug_assert(args[args.len - 1].ptr.is_null());
    
    t := timestamp();
    pid := fork();
    if pid == 0 { // Child
        Syscall'dup2(pipes&[0]&[0], STD_IN);
        Syscall'dup2(pipes&[1]&[1], STD_OUT);
        Syscall'dup2(pipes&[2]&[1], STD_ERR);
        
        execvp(args[0], args.ptr);
        eprintln("libc::execvp() failed!");
        Syscall'exit(1);
    };
    // else: Parent

    Syscall'close(pipes&[0]&[0]);  // close the read end
    Syscall'close(pipes&[1]&[1]);  // close the write end
    Syscall'close(pipes&[2]&[1]);  // "
    
    (Ok = (pid = pid, pipes = (pipes&[0]&[1], pipes&[1]&[0], pipes&[2]&[0]), start = t))
}

fn poll(self: *RunningProcess, buf: *List(u8)) Result(?i32, Str) = {
    @debug_assert(buf.maybe_uninit.len > buf.len);
    flag: u16 = (@as(i64) PollEvents.In).trunc();
    poll_data: Array(PollFds, 2) = (
        (fd = self.pipes&[1], events = flag, revents = 0),
        (fd = self.pipes&[2], events = flag, revents = 0)
    );
    poll_data := poll_data&.items();

    status: i32 = 0;
    _ := poll(poll_data, 0) || return(Err = "libc::poll() failed");
    done := waitpid(self.pid, status&, @as(i64) WaitPidOptions.NoHang);
    
    full := false;
    each poll_data { p |
        have_data := (@as(i64) p.revents.zext()).bit_and(@as(i64) PollEvents.In) != 0;
        if have_data {
            dowhile {
                space := buf.maybe_uninit.len - buf.len;
                len := Syscall'read(p.fd, buf.maybe_uninit.ptr.offset(buf.len), space)
                    || return(Err = "libc::read() failed");
                buf.len += len;
                full = full || buf.maybe_uninit.len == buf.len;
                
                // :BigOutputBuffer (see devlog May 9, 2025)
                system_pipe_buffer_capacity :: 65536;
                len == system_pipe_buffer_capacity && len < space
            };
        }
    };
    
    // the hope is that you're alllowed to waitpid again after the caller clears the buffer and get the status then
    // TODO: is that true?
    if done != 0 && !full {
        Syscall'close(self.pipes&[0]);
        Syscall'close(self.pipes&[1]);
        Syscall'close(self.pipes&[2]);
        
        return(Ok = (Some = status));
    };
    
    (Ok = .None)
};

StbTrueType :: {
    get  :: import("@/examples/testing.fr").fetch_or_crash;
    root := get("https://github.com/nothings/stb/archive/f0569113c93ad095470c54bf34a17b36646bbbb5.zip", 1754150, "b62be3009cb9d4b6385bd4854bddf72d8e91f4e19d1347d6cf9589b19f70d45d", "stb-f0569113c93ad095470c54bf34a17b36646bbbb5");
    Ffi  :: import("@/examples/import_c/ffi.fr");
    c_source := @tfmt("""
        #define STB_TRUETYPE_IMPLEMENTATION
        #include "%/stb_truetype.h"
    """, root);
    Ffi'include(current_compiler_context(), c_source)
}

// TODO: if you don't make it a function i think you go into the compiler at a confusing time 
//       and it eats your temp() :CompilerBug :ConstInFuncOrLoseTemp   -- May 11, 2025
font_data_ttf :: fn() []u8 = :: {
    get :: import("@/examples/testing.fr").fetch_or_crash;
    root := get("https://download.jetbrains.com/fonts/JetBrainsMono-2.304.zip", 5622857, "6f6376c6ed2960ea8a963cd7387ec9d76e3f629125bc33d1fdcd7eb7012f7bbf", "fonts");
    path := @tfmt("%/ttf/JetBrainsMonoNL-Bold.ttf", root);
    ast_alloc().read_to_string_or_crash(path).items()
}

#include_std("backend/lib.fr");

// example usage:
// { S :: @static(@type state); S[] = state; go(fn() void = { loop {| usleep(100000); S[].theme.background.r += 0.01; S[].dirty = true; } } ); };
fn go(body: @FnPtr() void) void = {
    #use("@/lib/sys/threads.fr");
    F :: @FnPtr() void;
    ::F; // :OverloadingConfusedCoerce
    start_thread(F, fn(b: *F) void = b[](), body&);
}
