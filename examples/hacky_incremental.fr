// This calls a function in a loop and prints the result. 
// But if you edit the body of that function while the program is running and save the file,  
// it will be hotloaded and the next iteration of the loop will print the new value. 

fn main() void = {
    @run test_incremental_compilation();
}

test_incremental_compilation :: fn() void = {
    when :: fn() => {
        file_info := zeroed MacosLibc.Stat;
        stat("examples/hacky_incremental.fr", file_info&)
            || panic("failed to stat the file");
        file_info.mtime
    }
    mtime := when();
    loop {
        println(get_secret_message());
        
        new := when();
        ::AutoEq(TimeSpec);
        if new& != mtime& {
            @println("File changed at %!", new);
            
            src := general_allocator().read_to_string_or_crash("examples/hacky_incremental.fr").items();
            quine := @tfmt("// % //", "START");
            while => !src.starts_with(quine) {
                src = src.rest(1);
            }
            while => !src.ends_with("// END //") {
                src = src.slice(0, src.len - 1);
            }
            
            mtime = new;
            c := current_compiler_context();
            c'vtable'replace_body_source(c.data, get_secret_message, src);
        } else {
            usleep(1000 * 500);
        }
    }
}

get_secret_message :: fn() Str #noinline = {
    // START // 
    "Hello World"
    // END // 
}
