#!/usr/bin/env franca

//!
//! This loads a Mach-O file into memory, resolves dynamic imports, applies relocations, and jumps to the entry point. 
//! Just like the operating system would do if you ran the program normally. 
//!
//! Limitations: it won't work if your program...
//! - uses LC_DYLD_INFO_ONLY instead of LC_DYLD_CHAINED_FIXUPS
//! - uses thread locals (which means every rust program)
//! - dynamically links something other than libc (without maually calling dlopen)
//! It's also super dumb and slow. Makes a useless copy of the whole thing instead of just mmapping chunks once. 
//! No fun tricks with only applying relocations on the first page fault. Many passes over the load commands. 
//!
//! But it doesn't matter, the purpose of this is just understanding how the format works well enough to produce it.
//!

// TODO: support x64
// TODO: check ad-hoc codesign

#include_std("backend/macho/bits.fr");
fn main() void = {
    args := cli_args();
    assert(args.len > 1, "Last argument is path to macho file");
    path_c := args[args.len - 1];
    path := path_c.str(); 
    @eprintln(">>> loading: %", path);
    // TODO: this is silly? just mmap the file. 
    bytes := libc_allocator.read_to_string(path).items(); // :panic
    full_bytes := bytes;
    header := bytes&.pop_type(MachoHeader);
    @assert_eq(header.magic, macho_magic, "bad magic! expected a 64-bit arm mach-o executable.");
    virtual_size := count_virtual_size(full_bytes);
    virtual := page_allocator.alloc(u8, virtual_size.to_signed());
    first_interesting := find_first_interesting(full_bytes);
    load_sections(full_bytes, virtual);
    apply_fixups(full_bytes, virtual, first_interesting);
    main_header := find_unique_load_command(full_bytes, .MainEntryPoint).expect("to find MainEntryPoint so we can call it");
    main_header := main_header&.pop_type(MainEntryPoint);
    // offset is in virtual memory. 
    main := virtual.ptr.offset(main_header.entry_offset.to_signed() + first_interesting); 
    
    main := u8.raw_from_ptr(main);
    main := assume_types_fn(Ty(i64, *CStr), i64, main);
    // TODO: franca programs use the _NS functions instead of args to main. 
    args := @slice(path_c, "examples/toy/hello.fr".sym().c_str(), CStr.zeroed());
    ::display_slice(CStr);
    fn display(s: *CStr, o: *List(*u8)) void = display(s[], o);
    @eprintln(">>> calling main with %", args);
    
    status := main(args.len - 1, args.ptr);
    @eprintln(">>> main returned %", status);
    exit(status);
}

fn find_first_interesting(macho_bytes: []u8) i64 = {
    virtual_first_interesting := MAX_i64;
    for_sections(macho_bytes) { type, bytes |
        if type == LoadCommand.SegmentLoad.raw() {
            header := bytes&.pop_type(SegmentLoad);
            if header.init_prot != 0 {
                virtual_first_interesting = virtual_first_interesting.min(header.address.to_signed());
            };
        };
    };
    @assert_ne(virtual_first_interesting, MAX_i64, "all segments had prot=0");
    virtual_first_interesting
}

fn load_sections(macho_bytes: []u8, virtual: []u8) void = {
    for_sections(macho_bytes) { type, bytes |
        if type == LoadCommand.SegmentLoad.raw() {
            header := bytes&.pop_type(SegmentLoad);
            // TODO: this is confusing to me. 
            //        do i have to do the inner sections seperatly for some reason? 
            //        __TEXT has file_offset=0, does that really mean it includes the macho header?
            src: []u8 = macho_bytes.subslice(header.file_offset.to_signed(), header.size.to_signed());
            dest: []u8 = virtual.subslice(header.address.to_signed(), header.size.to_signed());
            dest.copy_from(src);
            // helpfully the flags mprotect wants are the same as the flags in the macho file. 
            mprotect(u8.raw_from_ptr(dest.ptr), header.address_size.to_signed(), header.init_prot.zext()); 
            range(0, header.section_count.zext()) { i |
                inner := bytes&.pop_type(SegmentSection);
                @assert_eq(inner.relocations_count, 0, "TODO: old style relocations. (%, %)", inner.section_name&.str(), inner.segment_name&.str());
            };
        };
    };
}

fn apply_fixups(full_bytes: []u8, virtual: []u8, first_interesting: i64) void = {
    fixups_header_data := or find_unique_load_command(full_bytes, .ChainedFixups) {
        eprintln("Didn't find the chained fixups command. That's probably not a good sign. \n(maybe you're using LC_DYLD_INFO_ONLY which we don't support)");
        return();
    };
    import_pointers := collect_imports(full_bytes, fixups_header_data);
    bytes := fixups_header_data;
    command := bytes&.pop_type(LinkEditBlob);
    full_data := full_bytes.slice(command.offset.zext(), command.offset.zext() + command.size.zext());
    data := full_data;
    header := data&.pop_type(ChainedFixupsHeader);
    starts_data := full_data.slice(header.starts_offset.zext(), full_data.len);
    full_starts_data := starts_data;
    seg_count := starts_data&.pop_type(u32)[];
    range(0, seg_count.zext()) { segment_index |
        offset_to_csis := starts_data&.pop_type(u32)[];
        if offset_to_csis != 0 {
            starts_data := full_starts_data;
            starts_data.ptr = starts_data.ptr.offset(offset_to_csis.zext());
            starts_data.len -= offset_to_csis.zext();
            starts := starts_data&.pop_type(ChainedStartsInSegment);
            if starts.page_count != 0 {
                // the struct has alignment padding that eats the first entry of the variable length array. 
                starts_data.ptr = starts_data.ptr.offset(-2); // take it back now yall
                starts_data.len += 2;
                rebase_count, bind_count := (0, 0);
                range(0, starts.page_count.zext()) { i | 
                    continue :: local_return;
                    offset_to_fixup := starts_data&.pop_type(u16)[];
                    if(offset_to_fixup == page_start_no_fixups, => continue());
                    // note: segment_offset is distance in virtual memory from first interesting segment. NOT a file offset!
                    // TODO: write a nice test for this (for when segments are not packed in vm)
                    // TODO: give a friendly warning if this page is not inside the correct segment
                    page_offset: i64 = first_interesting + starts.segment_offset.to_signed() + (starts.page_size.zext() * i);
                    page_data := virtual.slice(page_offset, page_offset + starts.page_size.zext());
                    next_offset: i64 = offset_to_fixup.zext();
                    dowhile {
                        page_data.ptr = page_data.ptr.offset(next_offset);
                        page_data.len -= next_offset;
                        reloc_ref := ptr_cast_unchecked(u8, rawptr, page_data.ptr);
                        reloc := decode_chained(int_from_rawptr(reloc_ref[]));
                        @match(reloc.payload) {
                            fn Rebase(it) => {
                                @assert_eq(it.high8, 0, "TODO: what is high8 for?");
                                reloc_ref[] = u8.raw_from_ptr(virtual.ptr.offset(first_interesting).offset(it.target));
                                rebase_count += 1;
                            }
                            fn Bind(it) => {
                                reloc_ref[] = import_pointers[it.ordinal.zext()];
                                @println(">>> bind at % to %", starts.segment_offset.to_signed() + (starts.page_size.zext() * i) + offset_to_fixup.zext(), int_from_rawptr(import_pointers[it.ordinal.zext()]));
                                bind_count += 1;
                            }
                        };
                        next_offset = reloc.next.zext() * 4;
                        next_offset != 0
                    };
                };
                @eprintln(">>> applied % rebase and % bind fixups to segment %", rebase_count, bind_count, segment_index);
            };
        };
    };
}

fn collect_imports(full_bytes: []u8, fixups_header_data: []u8) []rawptr = {
    command := fixups_header_data&.pop_type(LinkEditBlob);
    full_data := full_bytes.slice(command.offset.zext(), command.offset.zext() + command.size.zext());
    data := full_data;
    header := data&.pop_type(ChainedFixupsHeader);
    imports_data := full_data.slice(header.imports_offset.zext(), full_data.len);
    symbols_data := full_data.slice(header.symbols_offset.zext(), full_data.len);
    @assert(header.imports_count == 0 || header.imports_format == 1, "TODO: handle compressed imports");
    @assert(header.symbols_format == 0, "TODO: handle compressed symbols");
    
    list_of_function_pointers := libc_allocator.alloc(rawptr, header.imports_count.zext());
    
    // TODO: don't just assume we want /usr/lib/libSystem.B.dylib
    libc_path := find_os_libc_dylib().expect("to be able to find libc. TODO: don't assume you want this but you normally do.");
    libc := dlopen(libc_path, .Lazy);
    @assert(!libc.lib.is_null(), "failed to find libc. TODO: don't assume you want this but you normally do.");
    
    range(0, header.imports_count.zext()) { i |
        import := decode_import(imports_data&.pop_type(u32)[]);
        n: CStr = (ptr = symbols_data.ptr.offset(import.name_offset.zext()));
        name := n.str();
        @assert_eq(import.lib_ordinal, 1, "TODO: where is the list of libraries? multiple of Link Library commands?");
        if n.ptr[] == "_".ascii() {
            // apple likes to waste my time. 
            n.ptr = n.ptr.offset(1);
        };
        addr := libc.dlsym(n);
        @assert(!addr.is_null(), "Couldn't find % in libc (TODO: allow non-libc imports).");
        list_of_function_pointers[i] = addr;
    };
    list_of_function_pointers
}

fn count_virtual_size(macho_bytes: []u8) u64 = {
    virtual_size: u64 = 0;
    for_sections(macho_bytes) { type, bytes |
        if type == LoadCommand.SegmentLoad.raw() { // TODO: why is it the wrong type
            header := bytes&.pop_type(SegmentLoad);
            high := header.address + header.address_size;
            virtual_size = virtual_size.max(high);
            
            @assert(header.size <= header.address_size, "not enough space");
            // clearly thats not true
            //@assert(header.address_size == header.size || header.size == 0, "segment %: vmsize != filesize. i dont think thats allowed", header.name&.str());
            range(0, header.section_count.zext()) { i |
                inner := bytes&.pop_type(SegmentSection);
                @assert(inner.address >= header.address, "starts before");
                @assert(inner.address + inner.size <= high, "ends after");
            };
        };
    };
    virtual_size
}

// returns bytes_without_command_header
fn find_unique_load_command(macho_bytes: []u8, want: LoadCommand) ?[]u8 = {
    found: ?[]u8 = .None;
    for_sections(macho_bytes) { ty, bytes | 
        if ty == want.raw() { // TODO: why is it the wrong type
            if found.is_some() {
                @eprintln("expected command % once but found multiple", want.raw());
                return(.None);
            };
            found = (Some = bytes);
        };
    };
    found
}

// TODO: move this to meta.fr or slice.fr?
fn pop_type(bytes: *[]u8, $T: Type) *T #generic = {
    @debug_assert(bytes.len >= T.size_of(), "pop_type: not enough bytes");
    @debug_assert(u8.int_from_ptr(bytes.ptr).mod(T.align_of()) == 0, "pop_type: unaligned");
    start := bytes.ptr;
    bytes.ptr = bytes.ptr.offset(T.size_of());
    bytes.len -= T.size_of();
    ptr_cast_unchecked(u8, T, start)
}

::enum(LoadCommand);

fn to_signed(x: u64) i64 = x.bitcast(); // TODO: safety check
