//! Compiling at 60 Frames per Second.
//!
//! This is a driver program that renders an (ugly) interactive mandelbrot set in the terminal. 
//! Every frame it **recompiles** examples/mandelbrot.fr, runs main, and throws away the compiler instance. 
//! You can move around with WASD, which is implemented by string replacing the coordinates in the source code next frame. 
//!
//! There's no precompiled runtime library. The mandelbrot program uses resizable lists and string formatting, 
//! so those are compiled from source (each frame) as well. 
//! This whole operation uses the comptime jit, which does no optimisation, prioritizing compilation speed over runtime speed. 
//! We're still statically compiling to machine code: 
//! it's not an interpreter and it's not a tracing jit that improves the code as it runs. 
//! This is the same mechanisim used for all comptime code (like drivers, macros, advanced generics, etc).
//!
//! FIXME (it's decayed, more like 20fps, but the point remains) FIXME
//!

// TODO: can i make the flicker better? it works in Terminal.app but looks like garabge in Warp.
// TODO: still leaks memory. comptime ast_alloc is todo_allocator. 
// TODO: make it easy to aot bundle the compiler. 

Term :: import("@/lib/sys/terminal.fr");
#use("@/lib/sys/fs.fr");
#use("@/lib/sys/process.fr");

fn driver(vtable: *ImportVTable) void #export = {
    // Read the file once at the beginning. 
    name := "examples/mandelbrot.fr";
    src := temp().read_to_string_or_crash(name);
    src_parts := src.items().split("// @InsertConfig", temp());
    @assert_eq(src_parts.len, 2, "bad src");
    src1 := src_parts[0];
    src2 := src_parts[1];

    // Don't fill the terminal with junk. 
    print(Term.start_other);
    Term'start_raw(STD_IN);

    start := timestamp();
    frame_count := loop_draw_frames(vtable, src1, src2);
    end := timestamp();
    
    // TODO: panic hooks because this really fucks you up if the program crashes. 
    Term'end_raw(STD_IN);
    print(Term.end_other);
    
    s := end - start;
    @println("% frames in %ms: %fps", frame_count, s, frame_count.float() / s.float() * 1000.0);
}

fn loop_draw_frames(vtable: *ImportVTable, src1: Str, src2: Str) i64 = {
    frames := 0;
    x := -1.5;
    y := -1.0;
    done := false;
    while => !done {
        push_dynamic_context {
            context(DefaultContext)[].comptime = zeroed(rawptr);  // TODO: why do you need this now but not before?
            start := timestamp();
            temp_mark := mark_temporary_storage();
            
            // Construct the full program source by including the adjusted position. 
            src: List(u8) = list(src1.len + src2.len + 100, temp());
            @fmt(src&, "#include_std(\"lib/core.fr\");\n %;x_start = %.0/100.0; y_start = %.0/100.0;%", src1, x * 100.0, y * 100.0, src2);
            
            // Create a fresh compiler instance, not reusing any state from the previous frame. 
            opts := vtable.default_build_options();
            c := vtable.new_with_src(src.items(), opts);
            c := vtable.with(c);
            f := c.get_unique_named("main").unwrap();
            ptr := c.get_jitted(f);
            f := assume_types_fn(Arg = void, Ret = void, ptr = ptr);
            println(Term.reset);
            f();
    
            // Check if the user pressed a key so we can update the position for next frame. 
            if get_input() { c |
                @switch(c) {
                    @case("q".ascii()) => { done = true };
                    @case("a".ascii()) => { x += 0.1; };
                    @case("d".ascii()) => { x -= 0.1; };
                    @case("s".ascii()) => { y -= 0.1; };
                    @case("w".ascii()) => { y += 0.1; };
                    @default => ();
                };
            };
            frames += 1;
            
            // Release all memory used by this frame's compiler instance. 
            {vtable.destroy_compiler}(c.data);  // :leak still im sure but its clearly not a big deal
            
            end := timestamp();
            @println("compile + run frame time: %ms\nuse wasd to move around. q to quit", end - start);
            reset_temporary_storage(temp_mark);
        };
    };
    frames
}

fn get_input() ?u8 = {
    c: u8 = 0;
    len := Syscall'read(STD_IN, c&, 1).unwrap();
    ::if(?u8);
    if(len > 0, => (Some = c), => .None)
}
