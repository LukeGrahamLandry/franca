//!
//! A minimal example of how to call objective c code and open a window on macOS.
//! Calls AppKit/CoreGraphics APIs to draw a little mandelbrot set. 
//!
//! Adapted from https://github.com/zserge/fenster/blob/main/fenster.h 
//! MIT License. Copyright (c) 2022 Serge Zaitsev
//!

main :: fn() void = {
    #use("@/graphics/macos/frameworks.fr");  // raw bindings to apple stuff
    #use("@/graphics/macos/objective_c.fr");  // syntax sugar for calling objc_msgSend

    STATE :: @static(@struct(
        title: Str,
        width: i64,
        height: i64,
        buf: []u32,
        wnd: ObjCId,
    ));

    // TODO: have extern variables with #import just like functions. 
    //       so you can have the driver dlopen for you when jitting or have the linker ask for it when doing aot. 
    // You do have to open this dylib to have the classes exist when running at comptime (or i assume pass -framework Cocoa for aot)
    // even if we didn't want NSDefaultRunLoopMode
    appkit := Dyn'open("/System/Library/Frameworks/AppKit.framework/AppKit").expect("open AppKit");
    
    NSApp :: @static(ObjCId);
    
    f := STATE;
    f.width  = 300.0;
    f.height = 300.0;
    f.buf = general_allocator().alloc_zeroed(u32, f.width * f.height);
    
    // draw something nice once at the beginning.
    render_mandelbrot(f.buf, f.width, f.height, 0.008);
    
    NSApplication := cls("NSApplication");
    NSWindow := cls("NSWindow"); 
    NSObject := cls("NSObject");
    NSView   := cls("NSView");
    NSString := cls("NSString");
    
    NSApp[] = @objc NSApplication.sharedApplication();
    @assert(!NSApp[]._.is_null(), "NSApp null");
    // ~After~ calling sharedApplication, you can appkit.get_constant(ObjCId, "NSApp").unwrap() and get the same value it returns. 
    // Which is the same as a c program declaring NSApp as an extern variable, but there's no need. 
    
    ok := @objc @as(bool) NSApp[].setActivationPolicy(0);
    @assert(ok, "setActivationPolicy");
    window := @objc NSWindow.alloc();
    @assert(!window._.is_null());
    
    rect: CGRect = (origin = (x = 0, y = 0), size = (width = f.width.float(), height = f.height.float()));
    window = @objc window.initWithContentRect(rect, styleMask = 3, backing = 2, defer = false);
    
    // We have to give it a class with a callback
    Delegate := objc_allocateClassPair(NSObject, "SoftDrawDelegate", 0);
    class_addMethod(Delegate, "windowShouldClose:".sel_getUid(), should_close_callback, "c@:@");
    objc_registerClassPair(Delegate);
    should_close_callback: rawptr : fn(self: ObjCId, sel: ObjCSelector, window: ObjCId) bool = {
        println("Goodbye World!");
        @objc NSApp[].terminate(NSApp[]);
        true
    };
    delegate := @objc Delegate.alloc();
    delegate = @objc delegate.init();
    @assert(!delegate.is_nil());
    @objc window.setDelegate(delegate);
    
    // Now another...
    View := objc_allocateClassPair(NSView, "SoftDrawView", 0);
    class_addMethod(View, "drawRect:".sel_getUid(), @as(rawptr) draw_rect_callback, "");//@as(CStr) "i@:@@");
    objc_registerClassPair(View);
    
    draw_rect_callback :: fn(self: ObjCId, sel: ObjCSelector, r: CGRect) void = {
        f := STATE; // TODO: could smuggle this here with objc_getAssociatedObject
        NSGraphicsContext := cls("NSGraphicsContext");
        context := @objc NSGraphicsContext.currentContext();
        context := @objc context.graphicsPort();
        space := CGColorSpaceCreateDeviceRGB();
        provider := CGDataProviderCreateWithData(0, f.buf.ptr, f.width * f.height * 4, 0);
        kCGImageAlphaNoneSkipFirst :: 6;
        kCGBitmapByteOrder32Little :: 8192;
        kCGRenderingIntentDefault :: 0;
        flags :=  kCGImageAlphaNoneSkipFirst.bit_or(kCGBitmapByteOrder32Little);
        img := CGImageCreate(f.width, f.height, 8, 32, f.width * 4, space, flags, provider, 0, false, kCGRenderingIntentDefault);
        CGColorSpaceRelease(space);
        CGDataProviderRelease(provider);
        rect: CGRect = (origin = (x = 0, y = 0), size = (width = f.width.float(), height = f.height.float()));
        CGContextDrawImage(context, rect, img);
        CGImageRelease(img);
    };
    
    view := @objc View.alloc();
    @objc view.init();
    @assert(!view.is_nil());
    @objc window.setContentView(view);
    // TODO: could smuggle a pointer through to the callback with objc_setAssociatedObject 
    
    title := @objc NSString.stringWithUTF8String(@as(CStr) "SoftDraw Demo");
    @assert(!title.is_nil());
    @objc window.setTitle(title);
    @objc window.makeKeyAndOrderFront(ObjCId.zeroed());
    @objc window.center();
    @objc NSApp[].activateIgnoringOtherApps(true);
    
    // TODO: just use @import_symbol
    NSDefaultRunLoopMode := appkit.get_constant(ObjCId, "NSDefaultRunLoopMode").unwrap();
    @assert(!NSDefaultRunLoopMode.is_nil(), "NSApp null");
    loop {  // TODO: do i have to do reference counting things? 
        content := @objc window.contentView();
        @assert(!content.is_nil());
        @objc content.setNeedsDisplay(true);
        
        MAX_u64 :: 0xFFFFFFFFFFFFFFFF;
        event := @objc NSApp[].nextEventMatchingMask(MAX_u64, untilDate = ObjCId.zeroed(), inMode = NSDefaultRunLoopMode, dequeue = true);

        if !event.is_nil() {
            type := @objc @as(i64) event.type();
            // TODO: actually handle the event
            @objc NSApp[].sendEvent(event);
        };
        usleep(@as(u32) trunc(1000 * 16));
    };
}

fn get_constant(lib: Dyn.Handle, $T: Type, $name: Str) ?T #generic = {
    ref := dlsym(lib, name.sym().c_str());
    if(ref.is_null(), => return(.None));
    (Some = T.ptr_from_raw(ref)[])
}

Dyn :: import("@/lib/dynamic_lib.fr");
#use("@/lib/sys/fs.fr");

// TODO: just use build_for_graphics to support AOT
fn driver(vtable: *ImportVTable) void #export = {    
    src := "#include_std(\"lib/core.fr\");".clone(temp());
    the_code := temp().read_to_string_or_crash("examples/soft_draw.fr");  // TODO: don't depend on cwd.
    src&.push_all(the_code.items());
    
    Data :: @struct(objc: Dyn.Handle, cg: Dyn.Handle, vtable: *ImportVTable);
    objc := Dyn'open("/usr/lib/libobjc.dylib").expect("open objc");
    cg := Dyn'open("/System/Library/Frameworks/CoreGraphics.framework/CoreGraphics").expect("open CoreGraphics");
    opts := vtable.default_build_options();
    comp := vtable.new_with_src(src.items(), "examples/soft_draw.fr", opts);
    ctx := vtable.with(comp);
    ctx.add_comptime_library(ctx.intern_string("objc"), objc);
    ctx.add_comptime_library(ctx.intern_string("CoreGraphics"), cg);
    
    main_sym := {vtable.intern_string}(comp, "main");
    main_f := {vtable.find_unique_func}(comp, main_sym).unwrap();
    ptr := ctx.get_jitted(main_f);
    f := assume_types_fn(Arg = void, Ret = void, ptr = ptr);
    f();
}

// makes this less of a minimal example but i think it's cute. 
fn render_mandelbrot(buf: []u32, w: i64, h: i64, scale: f64) void = {
    Pos :: @struct(x: f64, y: f64);
    
    fn init(x: f64, y: f64) Pos = (x = x, y = y);
    fn add(a: Pos, b: Pos) Pos  = (x = add(a.x, b.x), y = add(a.y, b.y));
    fn mul(a: Pos, b: Pos) Pos  = (x = mul(a.x, b.x), y = mul(a.y, b.y));
    
    mandelbrot :: fn(c: Pos, z: Pos, steps: i64) i64 = {
        i   := 0;
        zSq := z * z;
        while => i < steps && zSq.x + zSq.y < 4.0 {
            z.y = z.x * 2.0 * z.y;
            z.x = zSq.x - zSq.y;
            z += c;
            zSq = z * z;
            i += 1;
        };
        i
    };

    max_steps := 45;
    x_start := -1.9;
    y_start := -1.0;
    
    pos: Pos = init(x = x_start, y = y_start);
    range(0, h) { y |
        range(0, w) { x |
            steps := mandelbrot(pos, init(x = 0.0, y = 0.0), max_steps);
            buf[y * w + x] = @if(steps == max_steps, 0xFFFFFFFF, 0x00000000);
            pos.x += scale;
        };
        pos.x = x_start;
        pos.y += scale;
    };
}
