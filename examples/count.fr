#!/usr/bin/env franca
//! Count the lines of Franca code in a file. 
//! Usage: pass file/directory paths as command line arguments. 
//! The trick is that the only tokens that span multiple lines are comments and raw strings, 
//! which i don't want to count anyway. So any time consecutive tokens are on different lines, we count that as one interesting line, 
//! regardless of how many lines were actually between them. 
//! You can check this by seeing that removing this comment doesn't change the counted length of this file.
//! For now I include lines with just `};` and `}`, but maybe that should change because those don't really contribute to the bigness of the program. 

#include_std("compiler/lex.fr");     // - we use the same lexer implementation as the normal compiler
#include_std("compiler/codemap.fr"); // - only used for the declaration of `Span`
#include_std("compiler/pool.fr");    // - the lexer expects to be able to intern strings

fn main() = {
    args := cli_args();
    results: List(Count) = list(temp());
    if args.len >= 2 && args[0].str() == "franca" && args[1].str().ends_with("count.fr") {
        args = args.slice(2, args.len);
    };
    for args { arg |
        handle_path(arg.str(), results&);
    };
    if results.is_empty() {
        panic("nothing to count");
    };
    
    sort :: quicksort(Count, fn(a, b) => a.size >= b.size);
    results.items().sort();
    total := 0;
    for results { e | 
        total += e.size;
    };
    out: List(u8) = list(temp());
    fmt_table(out&, results.items());
    println(out.items());
    @println("Counted % total interesting lines", total);
    exit(0);
}

Count :: @struct(name: Str, size: i64, total: i64);

fn handle_path(arg: Str, total: *List(Count)) void = {
    if arg.ends_with(".fr") {
        text := read_file(temp(), arg);
        @match(text) {
            fn Some(text) => {
                text := text.items();
                pool: StringPool = init(temp());
                span: Span = (low = 0, high = text.len.trunc()); // doesn't have to be in a real codemap. nobody checks. 
                lex: Lexer = init(pool&, span, text);
                lines := 1;
                loop {
                    token := lex&.pop();
                    @match(token.type) {
                        fn Error(err) => {
                            ::DeriveFmt(@type err);
                            ::tagged(LexErr);
                            @eprintln("Lex Error on line % of %: %", lex.line, arg, err&);
                            return();
                        }
                        fn Eof() => {
                            // We're done!
                            total.push(name = arg, size = lines, total = lex.line + 1);
                            return();
                        }
                        @default => {
                            if lex.line != lex.old_line {
                                //@println("%: %", token.type&.tag(), text.slice(token.span.low.zext(), token.span.high.zext()));
                                lines += 1;
                            };
                        };
                    };
                };
            }
            fn None() => {
                @eprintln("Failed to read file %", arg);
            }
        };
    };
    
    // Otherwise treat it as a directory. 
    walk_directory(@as(CStr)(ptr = arg.ptr)) { entry | 
        entry := entry.name;
        if !entry.starts_with(".") {
            full_path := items(@format("%/%", arg, entry) temp());
            handle_path(full_path, total);
        };
    };
}

fn fmt_table(out: *List(u8), results: []Count) void = {
    max_digits := results[0].size.number_of_digits(); // its sorted
    max_digits_total := 0;
    max_len := 0;
    for results { e | 
        max_len = max_len.max(e.name.len);
        max_digits_total = e.total.number_of_digits(); 
    };
    
    extra_space :: 10;
    for results { e | 
        out.push_all(e.name);
        padding := extra_space + max_len - e.name.len + max_digits - e.size.number_of_digits();
        out.push_spaces(padding);
        @fmt(out, "%", e.size);
        
        padding = extra_space + max_digits_total - e.total.number_of_digits();
        out.push_spaces(padding);
        @fmt(out, "%\n", e.total);
    };
    
    push_spaces :: fn(out: *List(u8), count: i64) void = {
        out.reserve(count);
        range(0, count, fn(_) => out.push_all(" "));
    };
    
    // TODO: log
    number_of_digits :: fn(i: i64) i64 = {
        if(i < 10, => return(1));
        1 + number_of_digits(i / 10)
    };
}
