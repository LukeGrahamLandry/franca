//! For large programs, you'll probably want to write your own driver to have more control, 
//! and to ensure that all information required to build your program is contained in the code of your program
//! (rather than in a seperate mass of shell scripts or whatever). 
//! However, for smaller programs where you just want to try something out, 
//! its a pain to have to write an extra program just to build it, so you can use this one instead. 

// - TODO: this is an insane mess because its always the boring part of adding a new backend. clean it up. 
//
// - TODO: make llvm main function return 0 at the end so it doesn't make my terminal red. 
// - TODO: think about how to make cli args less painful cause if you run a jit thing, it gets all the args for the driver too,
//         and it seems kinda annoying to make you deal with that in every program. 
// - TODO: -S -o -O
// - TODO: declaritive way to add libraries. 
// - TODO: rename this? its not the default really. its not what the compiler uses to load your driver program for example. 

#include_std("examples/qbe.fr");
LINK_QBE_C :: false; // note: this only applies if you call the sta version instead of dyn
#include_std("backend/lib.fr");
#include_std("compiler/ast_external.fr");  

Options :: @struct(
    use_v2 := false,
    jit := true,
    llvm := false,
    wasm := false,
    qbe := false,
    keep_names := false,
    deduplicate := true,
    debug_info := false,
    target_x86 := false,
    show_asm := false,
    blink := false,
    slow := false,
    unsafe := false,
    own_exe := false,
    relocatable := false,
);

Action  :: @enum(i64) (run, build, test); ::enum(Action);
Command :: @struct(cfg: Options, action: Action, file: Str, child_args: []Str);

forever :: todo_allocator;
fn driver(vtable: *ImportVTable) void = {
    cmd := parse_cli_args();
    build_options := vtable.default_build_options();
    build_options.retain_function_names = cmd.cfg.keep_names;
    build_options.deduplicate_bytecode = cmd.cfg.deduplicate;
    build_options.debug_info = cmd.cfg.debug_info;
    if cmd.cfg.unsafe {
        build_options.safety_checks&.insert(SafetyCheck.Bounds, false);
        build_options.safety_checks&.insert(SafetyCheck.DebugAssertions, false);
        build_options.safety_checks&.insert(SafetyCheck.InvalidTag, false);
    };
    os := Os.macos; // TODO
    comptime_arch := query_current_arch().expect("known arch");
    arch := comptime_arch;
    if cmd.cfg.blink {
        os = .linux;
        arch = .x86_64;
    };
    if cmd.cfg.target_x86 {
        arch = .x86_64;
    };
    if cmd.cfg.wasm {
        arch = .wasm32;
    };
    
    env: TargetEnv = (arch = arch, os = os);
    m := QbeModule.uninitialized();
    goal := QbeOutputPurpose.JitOnly;
    if !cmd.cfg.jit {
        if cmd.cfg.own_exe {
            goal = @if(cmd.cfg.relocatable, .Relocatable, .Exe);
        } else {
            goal = .AsmText;
        };
    };
    usage_msg :: "USAGE: franca examples/default_driver.fr % [filepath.fr]\n       %";
    @match(cmd.action) {
        fn build() => {
            if(cmd.file == "", => @panic(usage_msg, "build", "creates an executable that runs 'main'"));
            if cmd.cfg.wasm {
                build_options.wasm32 = true;
            };
            c := load_file(cmd.file, vtable, build_options);
            fid := c.get_unique_named("main");
            fid := fid.expect("did not find exactly one function called 'main'");
            if cmd.cfg.jit {
                println("Compiled successfully but selected jit backend so no artifact was produced.");
            } else {
                if cmd.cfg.qbe {
                    assert(!cmd.cfg.show_asm, "TODO: -S with qbe");
                    c.compile_with_included_qbe(fid, .ExportWithNames, arch, os, goal);
                } else {
                    assert(cmd.cfg.llvm, "rn only two backends. update me as needed!");
                    c.compile_with_llvm(fid, .ExportWithNames, cmd.cfg.debug_info, arch, os, cmd.cfg.show_asm, cmd.cfg.slow, cmd.cfg.relocatable);
                };
                println("[built a.out]");  // TODO: say the right path if its wasm
            };
            exit(0);
        };
        fn run() => {
            if(cmd.file == "", => @panic(usage_msg, "run", "runs the function called 'main'"));
            assert(!cmd.cfg.relocatable, "use `build` to make linkable object (-c)");
            assert(!cmd.cfg.show_asm, "can't run with -S, use build instead");
            c := load_file(cmd.file, vtable, build_options);
            fid := c.get_unique_named("main");
            fid := fid.expect("did not find exactly one function called 'main'");
            assert(!cmd.cfg.wasm, "cannot run wasm");
            if cmd.cfg.jit {
                assert(!cmd.cfg.show_asm, "TODO: -S with jit");
                // TODO: how to pass cli args
                ptr := if cmd.cfg.qbe {
                    @if(ENABLE_INTERNAL_QBE, {
                        m = init_default_module(os = os, arch = arch, type = goal);
                        _ := emit_qbe_included_dyn(m&, c&, @slice(fid), .ExportWithNames);
                        m&.fill_from_libc();
                        m&.make_exec();
                        or m&.get_addr("main") {
                            panic("couldn't find main")
                        }
                    }, @as(rawptr) panic("internal qbe is disabled"))
                } else {
                    c.get_jitted(fid)
                };
                f := assume_types_fn(Arg = void, Ret = void, ptr = ptr);
                f();
            } else {
                if cmd.cfg.llvm {
                    c.compile_with_llvm(fid, .ExportWithNames, cmd.cfg.debug_info, arch, os, false, cmd.cfg.slow, false);
                } else {
                    assert(!cmd.cfg.show_asm, "TODO: -S with qbe");
                    assert(cmd.cfg.qbe, "rn only two backends. update me as needed!");
                    // note: not the internal one for now
                    c.compile_with_qbe(fid, .ExportWithNames, arch, os);
                };
                if cmd.cfg.blink {
                    args := cmd.child_args.clone(temp());
                    args&.insert(0, "./a.out");
                    run_cmd_blocking("blink", args.items());
                } else {
                    run_cmd_blocking("./a.out", cmd.child_args);
                };
            };
            exit(0);
        };
        fn test() => {
            if(cmd.file == "", => @panic(usage_msg, "test", "runs all functions marked '#test'"));
            assert(!cmd.cfg.relocatable, "use `build` to make linkable object (-c)");
            assert(!cmd.cfg.show_asm, "TODO: test with -S");
            assert(!cmd.cfg.wasm, "cannot run wasm");
            c := load_file(cmd.file, vtable, build_options);
            
            tests := c.get_tagged("test");
            passed := 0;
            for tests { fid |
                @eprintln("[compile %]", c.get_string(c.get_function_name(fid)));
                if cmd.cfg.jit {
                    name := c.get_string(c.get_function_name(fid));
                    ptr := if cmd.cfg.qbe {
                        @if(ENABLE_INTERNAL_QBE, {
                            // would be faster if you could share the module between runs
                            m = init_default_module(os = os, arch = arch, type = goal);
                            _ := emit_qbe_included_dyn(m&, c&, @slice(fid), .ExportWithNames);
                            m&.fill_from_libc();
                            m&.make_exec();
                            or m&.get_addr(name) {
                                panic("couldn't find main")
                            }
                        }, @as(rawptr) panic("internal qbe is disabled"))
                    } else {
                        c.get_jitted(fid)
                    };
                    f := assume_types_fn(Arg = void, Ret = void, ptr = ptr);
                    @eprintln("[run     %]", name);
                    f();
                    // TODO: do the fork stuff to report all even when some fail. 
                    passed += 1;
                } else {
                    if cmd.cfg.qbe {
                        assert(!cmd.cfg.show_asm, "TODO: -S with qbe");
                        c.compile_with_included_qbe(fid, .TestRunnerMain, arch, os, goal);
                    } else {
                        assert(cmd.cfg.llvm, "rn only two backends. update me as needed!");
                        c.compile_with_llvm(fid, .TestRunnerMain, cmd.cfg.debug_info, arch, os, cmd.cfg.show_asm, cmd.cfg.slow, false);
                    };
                    @eprintln("[run     %]", c.get_string(c.get_function_name(fid)));
                    success := if cmd.cfg.blink {
                        run_cmd_blocking("blink", @slice("./a.out"))
                    } else {
                        run_cmd_blocking("./a.out", empty())
                    };
                    if success {
                        passed += 1;
                    } else {
                        println("failed");
                    };
                };
            };
            @eprintln("[Passed %/% tests]", passed, tests.len);
            exit(if(passed == tests.len, => 0, => 1));
        };
    };
}

// TODO: too many args
fn compile_with_llvm(c: CompCtx, fid: FuncId, entry: ProgramEntry, debug_info: bool, arch: Arch, os: Os, show_asm: bool, slow: bool, link: bool) void #inline = {
    ::if(Arch);
    ir_text := c.emit_llvm(temp(), @slice (fid), entry, arch, os);
    out := open_temp_file();
    for ir_text& { bucket |
        out.fd&.write(bucket);
    };
    if show_asm {
        @println("Llvm ir output in %  Skipping build", out&.s_name());
        return();  
    };
    triple := target_triple(arch, os);
    wasm := arch == .wasm32;
    
    path := if(wasm, => "a.wasm", => "a.out");
    args: List(Str) = @list("-x", "ir", out&.s_name(), "-o", path) temp();
    if wasm {
        // https://surma.dev/things/c-to-webassembly/
        args&.push_all(@slice(
            "--target=wasm32", "-nostdlib", "-Wl,--no-entry", "-Wl,--no-entry", "-Wl,--export-all", "-Wl,-z,stack-size=8388608"
        ));
        // also we want to just pretend we have a libc (and trust that js will provide it) 
        args&.push_all(@slice("-Wl,-undefined", "-Wl,dynamic_lookup", "-Wl,--allow-undefined"));
    } else {
        args&.push_all(@slice("-target", triple));
    };
    if debug_info {
        args&.push("-g");
    };
    if link {
        args&.push("-c");
    };
    if debug_info || slow {
        args&.push("-O0");
    } else {
        args&.push("-Os");
    };
    linux := os == .linux;
    if linux {
        args&.push("-c");
    };
    @eprintln("[run clang] %", args.items());
    start := timestamp();
    success := run_cmd_blocking("clang", args.items());
    assert(success, "clang failed");
    end := timestamp();
    @println("[llvm time: %ms]", end - start);
    out.remove(); // TODO: defer 
    
    // todo: dont assume so much. this is for running with blinkenlights
    if linux {
        success := run_cmd_blocking("zig", @slice("cc", "-static", "-target", triple, "-Wl,-z,common-page-size=65536,-z,max-page-size=65536", "a.out"));
        assert(success, "link failed");
    };
}

QBE_PATH :: "bindings/qbe/qbe";
fn compile_with_qbe(c: CompCtx, fid: FuncId, entry: ProgramEntry, arch: Arch, os: Os) void = {
    env: TargetEnv = (arch = arch, os = os);
    ir_text := emit_qbe(c, @slice(fid), entry, env&);
    // TODO: clean up this hack for inline asm
    ::?List(u8);
    inline_asm_functions := ir_text&.pop_current_bucket().unwrap();
    
    ir_out := open_temp_file();
    for(ir_text&){bucket|
        if !ir_out.fd&.write(bucket) {
            panic("write failed");
        }
    };
    ir_out.fd.close(); // ?
    asm_out :: "target/franca_qbe_temp.s"; // TODO: the version of tmp file that lets you have an extension because it wants the .s
    
    args: List(Str) = list(temp());
    args&.push("-t");
    args&.push(qbe_target_name(arch, os));
    args&.push("-o");
    args&.push(asm_out);
    args&.push(ir_out&.s_name());
    @println("Run qbe %", args.items());
    start := timestamp();
    success := run_cmd_blocking(QBE_PATH, args.items());
    assert(success, "qbe failed");
    end := timestamp();
    @println("[qbe time: %ms]", end - start);
    
    // TODO: it would be easier if i could use exec_and_catch but it hangs forever waiting on a few tests???
    //       TODO: check again. i think i fixed that -- Sep 19
    ok := append_to_file(asm_out, inline_asm_functions.items());
    assert(ok, "failed to append file");

    args: List(Str) = list(temp());
    args&.clear();
    args&.push(asm_out);
    args&.push("-o");
    args&.push("a.out");
    triple := target_triple(arch, os);
    args&.push_all(@slice("-target", triple));
    @println("Run assembler %", args.items());
    start := timestamp();
    success := run_cmd_blocking("clang", args.items()); 
    assert(success, "as failed");
    end := timestamp();
    @println("[assembler time: %ms]", end - start);
    //ir_out.remove();   
}

fn compile_with_included_qbe(c: CompCtx, fid: FuncId, entry: ProgramEntry, arch: Arch, os: Os, goal: QbeOutputPurpose) void = {
    @if(ENABLE_INTERNAL_QBE, {
        m := init_default_module(os = os, arch = arch, type = goal);
        
        env: TargetEnv = (arch = arch, os = os);
        asm_text := emit_qbe_included_dyn(m&, c&, @slice(fid), entry);
        
        asm_out := if(goal != .AsmText, => "a.out", => "target/franca_qbe_temp.s"); // TODO: the version of tmp file that lets you have an extension because it wants the .s
        
        ir_out := open_trunc(asm_out.sym().c_str()).unwrap(); // TODO: sane error message if you forget to unwrap this
        for(asm_text&){bucket|
            if !ir_out&.write(bucket) {
                panic("write failed");
            }
        };
        
        args: List(Str) = list(temp());
        @match(goal) {
            fn Exe() => {
                ir_out.close();
                args&.push("-s");
                args&.push("-");
                args&.push("a.out");
                success := run_cmd_blocking("codesign", args.items()); 
                assert(success, "sign failed");
            }
            fn AsmText() => {
                args&.push(asm_out);
                args&.push("-o");
                args&.push("a.out");
                triple := target_triple(arch, os);
                args&.push_all(@slice("-target", triple));
                @println("Run assembler %", args.items());
                start := timestamp();
                success := run_cmd_blocking("clang", args.items()); 
                assert(success, "as failed");
                end := timestamp();
                @println("[assembler time: %ms]", end - start);
            }
            fn Relocatable() => ();
            @default => panic("unhandled QbeOutputType");
        }
        //ir_out.remove();   
    }, panic("internal qbe is disabled"));
}

fn load_file(path: Str, vtable: *ImportVTable, build_options: *BuildOptions) CompCtx = {
    the_code := temp().read_to_string(path);
    src := "#include_std(\"lib/core.fr\");".clone(forever);
    src&.push_all(the_code.items());
    comp := vtable.new_with_src(src.items(), path, build_options);
    // TODO: libs
    vtable.with(comp)
}

fn find_first_fr_file(args: []Str) Str = {
    for args { arg | 
        // TODO: caring about the file extension is so stupid. 
        if arg.ends_with(".fr") {|  // :file_extension
            return(arg);
        };
    };
    ""
}

fn find_args_after_double_dash(args: []Str) []Str = {
    enumerate args { i, arg | 
        if arg[] == "--" {
            return(args.slice(i+1, args.len));
        }; 
    };
    empty()
}

// TODO: think about if its a good idea to use reflection for this. 
fn parse_cli_args() Command = {
    cfg: Options = ();
    args := cli_args();
    args := args.slice(1, args.len); // skip exe
    extra_args: List(Str) = list(forever);
    for args { arg |
        arg := arg.str();
        
        @switch(arg) {
            @case("-v2") => { 
                cfg.use_v2 = true;
            };
            @case("-aot=llvm") => {
                cfg.jit = false; cfg.llvm = true;
                assert(!cfg.qbe, "choose one backend");
            };
            @case("-aot=llvm-wasm") => {
                cfg.jit = false; cfg.llvm = true; cfg.wasm = true;
                assert(!cfg.qbe, "choose one backend");
            };
            @case("-aot=qbe") => {
                cfg.jit = false; cfg.qbe = true;
                assert(!cfg.llvm, "choose one backend");
            };
            @case("-aot=qbe-exe") => {
                cfg.jit = false; cfg.qbe = true; cfg.own_exe = true;
                assert(!cfg.llvm, "choose one backend");
            };
            @case("-jit=qbe") => {
                cfg.jit = true; cfg.qbe = true;
                assert(!cfg.llvm, "choose one backend");
            };
            @case("-keep-names") => {
                cfg.keep_names = true;
            };
            @case("-no-deduplication") => {
                cfg.deduplicate = false;
            };
            @case("-debug-info") => {
                cfg.debug_info = true;
            };
            @case("-x86") => {
                cfg.target_x86 = true;
            };
            @case("-S") => {
                cfg.show_asm = true;
            };
            @case("-blink") => {
                cfg.blink = true;
            };
            @case("-opt=none") => {
                cfg.slow = true;
            };
            @case("-unsafe") => {
                cfg.unsafe = true;
            };
            @case("-aot=qbe-jit") => panic("invalid backend: -aot=qbe-jit");
            @case("-aot=qbe-asm") => panic("invalid backend: -aot=qbe-asm");
            @case("-c") => {
                cfg.relocatable = true;
            };
            @default => {
                extra_args&.push(arg);
            };
        };
    };
    
    choose_action :: "pass cli argument ['build', 'run', 'test'] and then the path to a '.fr' source file.";
    assert(!extra_args.is_empty(), choose_action);
    enumerate extra_args { i, arg |
        done :: fn(action: Action) => {
            args_after_action := extra_args.items().slice(i, extra_args.len);
            file := find_first_fr_file(args_after_action);
            return(cfg = cfg, action = action, file = file, child_args = find_args_after_double_dash(args_after_action));
        };
        
        @switch(arg[]) {
            @case("build") => done(.build);
            @case("run")   => done(.run);
            @case("test")  => done(.test);
            @default => ();
        };
    };
    panic(choose_action)
}

#include_std("compiler/backend/llvm.fr");