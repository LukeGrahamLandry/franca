//! For large programs, you'll probably want to write your own driver to have more control, 
//! and to ensure that all information required to build your program is contained in the code of your program
//! (rather than in a seperate mass of shell scripts or whatever). 
//! However, for smaller programs where you just want to try something out, 
//! its a pain to have to write an extra program just to build it, so you can use this one instead. 

// - TODO: declaritive way to add libraries. 
// - TODO: rename this? its not the default really. its not what the compiler uses to load your driver program for example. 
// - TODO: bring back using llvm's wasm backend. but that is only useful if i do a lot more work to support actually doing stuff in that environment. 

// note: we re-jit the legacy backends every time. 
#include_std("backend/lib.fr"); 
#include_std("compiler/ast_external.fr");  
#include_std("examples/old_backend/lib.fr");  

BOOTSTRAP_ONLY_MODE :: false;

Command :: @struct(
    action := Action.build,
    input_file := "",
    child_args: []Str = empty(),
    keep_names := false,
    debug_info := false,
    target_x86 := false,
    show_asm := false,
    blink := false,
    slow := false,
    unsafe := false,
    implicit_context := true,
    deduplicate := false,
    output_file := "",
    arch := Arch.aarch64, // TODO: should default to current
    os := Os.macos, // TODO: should default to current
    backend := AotBackend.self,
    goal := QbeOutputPurpose.Exe, // invalid
    n := 1,
);

Action  :: @enum(i64) (run, build, test); ::enum(Action);
AotBackend :: @enum(i64) (self, legacy, llvm, qbe);

forever :: todo_allocator;
fn driver(vtable: *ImportVTable) void #export = {
    cmd := parse_cli_args();
    // just because i don't want to learn how to use lldb properly
    n := cmd.n;
    while => cmd.n > 0 {
        if n > 1 {
            @println("Run %/%", n-cmd.n+1, n);
        };
        push_dynamic_context {
            mark := mark_temporary_storage();
            do_it(vtable, cmd&);
            reset_temporary_storage(mark);
        };
        cmd.n -= 1;
    };
}

fn do_it(vtable: *ImportVTable, cmd: *Command) void = {
    build_options := vtable.default_build_options();
    build_options.retain_function_names = cmd.keep_names;
    build_options.deduplicate_bytecode = cmd.deduplicate;
    build_options.debug_info = cmd.debug_info;
    if cmd.unsafe {
        build_options.safety_checks&.insert(SafetyCheck.Bounds, false);
        build_options.safety_checks&.insert(SafetyCheck.DebugAssertions, false);
        build_options.safety_checks&.insert(SafetyCheck.InvalidTag, false);
    };
    build_options.implicit_context_runtime = cmd.implicit_context;
    
    env: TargetEnv = (arch = cmd.arch, os = cmd.os);
    m := @uninitialized QbeModule;
    m.goal.type = cmd.goal;

    assert(cmd.action == .build || cmd.goal != .Dynamic, "use 'build' with -dynamiclib");
    assert(cmd.action == .build || cmd.goal != .Relocatable, "use `build` to make linkable object (-c)");
    assert(cmd.action != .test, "i never run tests this way. do i really care? TODO");
    
    c := load_file(cmd.input_file, vtable, build_options);
    ::enum(AotBackend);
    if cmd.goal == .JitOnly {
        assert(cmd.backend == .self || cmd.backend == .legacy, "unsupported backend for jit");
        assert(cmd.action != .build, "selected jit backend with 'build' so no artifact will be produced.");
        panic("TODO: support jit from default driver.");
        exit(0);
    };
    
    entry := ProgramEntry.WrapMain;
    ::if([]FuncId);
    fns: []FuncId = if cmd.goal == .Dynamic {
        f := c.get_tagged("export");
        @assert(f.len > 0, "trying to compile dynamic library but didn't find any #export functions");
        entry = .ExportWithNames;
        f
    } else {
        fid := or c.get_unique_named("main") {
            panic("expected exactly one function called 'main'")
        };
        @slice(fid)
    };
    
    m := @uninitialized QbeModule;
    if (@is(cmd.backend, .self, .legacy)) {
        init_default_module_dyn(m&, c.vtable, (os = cmd.os, arch = cmd.arch, type = cmd.goal));
        assert(!cmd.show_asm, "TODO: support -S on non-text backends");
    };
    
    bytes := @match(cmd.backend) {
        fn self()   => {c.vtable.emit_qbe_included}(QbeModule.raw_from_ptr(m&), c&, fns, entry);
        fn legacy() => {CodeGen(EmitQbe2).emit}(c, fns, entry, env&, QbeModule.raw_from_ptr(m&));
        fn llvm()   => {CodeGen(EmitLlvm).emit}(c, fns, entry, env&, rawptr.zeroed());
        fn qbe()    => panic("TODO: init_franca_runtime on example qbe text backend"); // {CodeGen(EmitQbe).emit}(c, fns, entry, env&, rawptr.zeroed()); // TODO: init_franca_runtime
    };
    
    write_to_output :: fn() => {
        out := open_trunc(maybe_borrow_cstr(cmd.output_file, temp())).unwrap(); 
        for bytes& { bucket |
            out&.write(bucket) || @panic("write to % failed", cmd.output_file);
        };
        close(out);
    };
    
    if cmd.show_asm && (@is(cmd.backend, .llvm, .qbe)) {
        if cmd.output_file == "" {
            for bytes& { chunk |
                print(chunk);
            };
        } else {
            write_to_output();
            @eprintln(">>> Wrote %-IR to %", cmd.backend, cmd.output_file);
        };
        m&.drop();  // for -repeat, leak less memory 
        {c.vtable.destroy_compiler}(c.data);  // for -repeat, leak less memory 
        return();
    };
    @assert(!cmd.show_asm, "TODO: support -S on backends that don't always emit text");
    
    if cmd.output_file == "" {
        cmd.output_file = "a.out";
    };
    
    if (@is(cmd.backend, .self, .legacy)) {
        // we output object files directly so we just have to write the bytes
        write_to_output();
        @eprintln(">>> Wrote % to %", cmd.goal, cmd.output_file);
        if !m.supports_self_sign && cmd.os == .macos && cmd.arch == .aarch64 {
            @eprintln(">>> exec apple's codesign. sure hope you have xcode. (this should only happen during ./boot since we have our own implementation in new compiler versions)");
            success := run_cmd_blocking("codesign", @slice("-s", "-", cmd.output_file)); 
            assert(success, "sign failed");
        };
        m&.drop();  // for -repeat, leak less memory 
    } else {
        @assert(cmd.backend != .qbe, "TODO: call to actually compile the thing");
        out := open_temp_file();
        for bytes& { bucket |
            out.fd&.write(bucket);
        };
        triple := target_triple(cmd.arch, cmd.os);
        args: List(Str) = @list("-x", "ir", out&.s_name(), "-o", cmd.output_file) temp();
        args&.push_all(@slice("-target", triple));
        if cmd.debug_info {
            args&.push("-g");
        };
        @match(cmd.goal) {
            fn Exe() => ();
            fn Relocatable() => args&.push("-c");
            fn Dynamic() => args&.push("-dynamiclib");
            @default => @panic("We don't support % with the llvm backend", cmd.goal);
        };
        if cmd.debug_info || cmd.slow {
            args&.push("-O0");
        } else {
            args&.push("-Os");
        };
        @eprintln("[run clang] %", args.items());
        start := timestamp();
        success := run_cmd_blocking("clang", args.items());
        assert(success, "clang failed");
        end := timestamp();
        @println("[llvm time: %ms]", end - start);
        out.remove(); // TODO: defer 
    };
    
    {c.vtable.destroy_compiler}(c.data);  // for -repeat, leak less memory 
    if cmd.action == .build {
        return();  // that's all folks
    };
    
    if cmd.action == .run {
        // TODO: allow .Dynamic and dlopen it instead?
        @assert_eq(cmd.goal, .Exe, "cannot run selected artifact");
        
        // TODO: im smoking crazy pills?? what the fuck
        //fchmod(out.fd, @as(FileMode) 0b0000000111111111) || @panic("failed to +x");
        //chmod(maybe_borrow_cstr(cmd.output_file, temp()), @as(FileMode) 0b0000000111111111) || @panic("failed to +x");
        //if !run_cmd_blocking("chmod", @slice("+x", cmd.output_file)) {
        //    @panic("failed to +x");
        //};
        
        // TODO: this is garbage
        looks_like_path := cmd.output_file.starts_with("./") || cmd.output_file.starts_with("../") || cmd.output_file.starts_with("~/") || cmd.output_file.starts_with("/");
        if !looks_like_path {
            cmd.output_file = @tfmt("./%", cmd.output_file);
        };
        
        if !run_cmd_blocking(cmd.output_file, cmd.child_args) {
            @eprintln(">>> Exited with non-zero status");
        };
        return();
    };
}

fn compile_with_qbe(c: CompCtx, fid: FuncId, entry: ProgramEntry, arch: Arch, os: Os) void = {
    QBE_PATH :: "bindings/qbe/qbe";
    env: TargetEnv = (arch = arch, os = os);
    ir_text := emit_qbe(c, @slice(fid), entry, env&, rawptr.zeroed());
    
    // TODO: clean up this hack for inline asm
    ::?List(u8);
    inline_asm_functions := ir_text&.pop_current_bucket().unwrap();
    
    ir_out := open_temp_file();
    for(ir_text&){bucket|
        if !ir_out.fd&.write(bucket) {
            panic("write failed");
        }
    };
    ir_out.fd.close(); // ?
    asm_out :: "target/franca_qbe_temp.s"; // TODO: the version of tmp file that lets you have an extension because it wants the .s
    
    args := @slice("-t", qbe_target_name(arch, os), "-o", asm_out, ir_out&.name());
    @println("Run qbe %", args);
    start := timestamp();
    success := run_cmd_blocking(QBE_PATH, args);
    assert(success, "qbe failed");
    end := timestamp();
    @println("[qbe time: %ms]", end - start);
    
    // TODO: it would be easier if i could use exec_and_catch but it hangs forever waiting on a few tests???
    //       TODO: check again. i think i fixed that -- Sep 19
    ok := append_to_file(asm_out, inline_asm_functions.items());
    assert(ok, "failed to append file");

    args := @slice(asm_out, "-o", "a.out", "-triple", target_triple(arch, os));
    @println("Run assembler %", args);
    start := timestamp();
    success := run_cmd_blocking("clang", args); 
    assert(success, "as failed");
    end := timestamp();
    @println("[assembler time: %ms]", end - start);
    //ir_out.remove();   
}

fn load_file(path: Str, vtable: *ImportVTable, build_options: *BuildOptions) CompCtx = {
    the_code := temp().read_to_string(path);
    src := "\n#include_std(\"lib/core.fr\");".clone(forever);
    src&.push_all(the_code.items());
    comp := vtable.new_with_src(src.items(), path, build_options);
    c := vtable.with(comp);
    
    // TODO: libs
    c
}

fn find_first_fr_file(args: []Str) Str = {
    for args { arg | 
        // TODO: caring about the file extension is so stupid. 
        if arg.ends_with(".fr") {|  // :file_extension
            return(arg);
        };
    };
    ""
}

fn find_args_after_double_dash(args: []Str) []Str = {
    enumerate args { i, arg | 
        if arg[] == "--" {
            return(args.slice(i+1, args.len));
        }; 
    };
    empty()
}

// TODO: think about if its a good idea to use reflection for this. 
fn parse_cli_args() Command = {
    cfg: Command = ();
    args := cli_args();
    args := args.slice(1, args.len); // skip exe
    extra_args: List(Str) = list(forever);
    i := 0;
    set_ctx := false;
    while => i < args.len { 
        arg := args[i].str();
        i += 1;
        
        @switch(arg) {
            @case("-repeat") => {
                cfg.n = parse_int(args[i].str());
                i += 1;
            };
            @case("-keep-names") => {
                cfg.keep_names = true;
            };
            @case("-no-deduplication") => {
                cfg.deduplicate = false;
            };
            @case("-debug-info") => {
                cfg.debug_info = true;
            };
            @case("-arch") => {
                b := args[i].str();
                ::?Arch;
                cfg.arch = or Arch.from_name(b) {
                    @panic("Invalid value for -arch: %", b)
                };
                i += 1;
            };
            @case("-os") => {
                b := args[i].str();
                ::?Os;
                cfg.os = or Os.from_name(b) {
                    @panic("Invalid value for -os: %", b)
                };
                i += 1;
            };
            @case("-S") => {
                cfg.show_asm = true;
            };
            @case("-blink") => {
                cfg.blink = true;
            };
            @case("-opt=none") => {
                cfg.slow = true;
            };
            @case("-unsafe") => {
                cfg.unsafe = true;
            };
            @case("-c") => {
                cfg.goal = .Relocatable;
            };
            @case("-dynamiclib") => {
                cfg.goal = .Dynamic;
            };
            @case("-o") => {
                cfg.output_file = args[i].str();
                i += 1;
                @assert(!cfg.output_file.starts_with("-"), "value after -o (%) started with a dash. probably not a file path?", cfg.output_file);
            };
            @case("-aot") => {
                b := args[i].str();
                ::?AotBackend;
                cfg.backend = or AotBackend.from_name(b) {
                    @panic("Invalid value for -aot: %", b)
                };
                i += 1;
            };
            @case("-ctx=static") => { 
                cfg.implicit_context = false; 
                set_ctx = true;
            };
            @case("-ctx=implicit") => { 
                cfg.implicit_context = true; 
                set_ctx = true;
            };
            @default => {
                extra_args&.push(arg);
            };
        };
    };
    if !set_ctx && cfg.backend == .llvm {
        cfg.implicit_context = false; 
    };
    @eprintln("Extra args: %", extra_args.items());
    choose_action :: "pass cli argument ['build', 'run', 'test'] and then the path to a '.fr' source file.";
    assert(!extra_args.is_empty(), choose_action);
    enumerate extra_args { i, arg |
        done :: fn(action: Action) => {
            args_after_action := extra_args.items().slice(i, extra_args.len);
            file := find_first_fr_file(args_after_action);
            cfg.action = action;
            cfg.input_file = file;
            cfg.child_args = find_args_after_double_dash(args_after_action);
            return(cfg);
        };
        
        @switch(arg[]) {
            @case("build") => done(.build);
            @case("run")   => done(.run);
            @case("test")  => done(.test);
            @default => ();
        };
    };
    panic(choose_action)
}
