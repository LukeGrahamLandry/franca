//! For large programs, you'll probably want to write your own driver to have more control, 
//! and to ensure that all information required to build your program is contained in the code of your program
//! (rather than in a seperate mass of shell scripts or whatever). 
//! However, for smaller programs where you just want to try something out, 
//! its a pain to have to write an extra program just to build it, so you can use this one instead. 

// - TODO: declaritive way to add libraries. 
// - TODO: rename this? its not the default really. its not what the compiler uses to load your driver program for example. 
// - TODO: bring back using llvm's wasm backend. but that is only useful if i do a lot more work to support actually doing stuff in that environment. 

// note: we re-jit the legacy backends every time. 
#include_std("backend/lib.fr"); 
#use("@/lib/sys/fs.fr");
//#include_std("backend/llvm/target.fr");  // TODO: update for Dat2

ENABLE_COMMANDS :: is_linking_libc();

Command :: @struct(
    action := Action.build,
    input_file := "",
    child_args: []Str = empty(),
    keep_names := ALWAYS_BE_SIGNALLING,
    debug_info := ALWAYS_BE_SIGNALLING,
    show_asm := false,
    unsafe := false,
    implicit_context := true,
    deduplicate := false,
    output_file := "",
    arch: Arch, 
    os: Os, 
    goal := QbeOutputPurpose.Exe, // invalid
    n := 1,
    syscalls := false,
    maintain_it_with_zig := false,
    new_llvm := false,
    always_track_ir_names := false,
);

Action  :: @enum(i64) (run, build, test); ::enum(Action);

forever :: todo_allocator;
fn driver(vtable: *ImportVTable) void #export = {
    cmd := parse_cli_args();
    // just because i don't want to learn how to use lldb properly
    n := cmd.n;
    while => cmd.n > 0 {
        if n > 1 {
            @println("Run %/%", n-cmd.n+1, n);
        };
        push_dynamic_context {
            mark := mark_temporary_storage();
            do_it(vtable, cmd&);
            reset_temporary_storage(mark);
        };
        cmd.n -= 1;
    };
}

fn do_it(vtable: *ImportVTable, cmd: *Command) void = {
    build_options := vtable.default_build_options();
    build_options.retain_function_names = cmd.keep_names;
    build_options.debug_info = cmd.debug_info;
    if cmd.unsafe {
        build_options.safety_checks&.insert(SafetyCheck.Bounds, false);
        build_options.safety_checks&.insert(SafetyCheck.DebugAssertions, false);
        build_options.safety_checks&.insert(SafetyCheck.InvalidTag, false);
    };
    build_options.target_os_bitset = build_options.target_os_bitset.bit_or(1.shift_left(cmd.os.raw()));
    build_options.target_arch_bitset = build_options.target_arch_bitset.bit_or(1.shift_left(cmd.arch.raw()));
    build_options.use_raw_syscalls = cmd.syscalls;
    build_options.always_track_ir_names = cmd.always_track_ir_names;
    
    env: TargetEnv = (arch = cmd.arch, os = cmd.os);
    m := @uninitialized QbeModule;

    assert(cmd.action == .build || cmd.goal != .Dynamic, "use 'build' with -dynamiclib");
    assert(cmd.action == .build || cmd.goal != .Relocatable, "use `build` to make linkable object (-c)");
    assert(cmd.action == .build || cmd.goal != .Cached, "use `build` to make cache file (-frc)");
    assert(cmd.action != .test, "i never run tests this way. do i really care? TODO");
    
    c := load_file(cmd.input_file, vtable, build_options);
    
    enable_tracy := get_environment_variable("FRANCA_TRACY").is_some();
    libs := Str.list(temp());
    @if(enable_tracy) {
        libs&.push(c.add_lib(tracy_lib));
        cmd.goal = .Relocatable;
    };
    if cmd.goal == .JitOnly {
        assert(cmd.action != .build, "selected jit backend with 'build' so no artifact will be produced.");
        panic("TODO: support jit from default driver.");
    };
    
    entry := ProgramEntry.WrapMain;
    ::if([]FuncId);
    fns: []FuncId = if cmd.goal == .Dynamic {
        f := c.get_tagged("export");
        @assert(f.len > 0, "trying to compile dynamic library but didn't find any #export functions");
        entry = .ExportWithNames;
        f
    } else {
        fid := or c.get_unique_named("main") {
            panic("expected exactly one function called 'main'")
        };
        @slice(fid)
    };
    
    m := @uninitialized QbeModule;

    assert(!cmd.maintain_it_with_zig, "only need to use zig's clang when using the llvm backend");
    init_default_module_dyn(m&, c.vtable, (os = cmd.os, arch = cmd.arch, type = cmd.goal));
    if cmd.new_llvm {
        @panic("TODO: update for Dat2");
        // use_llvm_backend(m&);  
    };
    @assert(!cmd.show_asm, "TODO: fix show_asm");

    // :UpdateBoot
    bytes := {
        #use("@/lib/collections/bucket_array.fr");
        F :: @FnPtr(mm: rawptr, comp: *CompCtx, fns: [] FuncId, entry: ProgramEntry) BucketArray(u8);
        f := bit_cast_unchecked(rawptr, F, c.vtable.emit_qbe_included_old);
        bytes := f(QbeModule.raw_from_ptr(m&), c&, fns, entry);
        out := list([]u8, temp());
        for bytes& { it |
            out&.push(it);
        };
        out.items()
    };
    
    write_to_output :: fn() => {
        path := as_cstr cmd.output_file;
        //remove(path);
        out := open_trunc(path).unwrap(); 
        for bytes& { bucket |
            out&.write(bucket) || @panic("write to % failed", cmd.output_file);
        };
        Syscall'close(out);
    };
    
    if cmd.output_file == "" {
        cmd.output_file = "a.out";
    };
    
    // we output object files directly so we just have to write the bytes
    write_to_output();
    @eprintln(">>> Wrote % to %", cmd.goal, cmd.output_file);
    if cmd.goal == .Relocatable && cmd.os == .macos {
        @eprintln(">>> don't forget to pass -Wl,-undefined,dynamic_lookup to your linker");
    };
    
    if vtable.driver_abi_version == 1016 {
        return();  // :UpdateBoot boot/temporary/*.sh can't call drop(m) because layout changed
    };
    
    @if(enable_tracy) {
        @if(!ENABLE_COMMANDS) panic("tried to run command");
        start := timestamp();
        args := Str.list(temp());
        args&.push_all(@slice("-o", cmd.output_file, cmd.output_file));
        args&.push_all(libs.items());
        args&.push("-Wl,-undefined,dynamic_lookup");  // clang cares not for weak symbols
        success := run_cmd_blocking("g++", args.items()); 
        assert(success, "link failed");
        end := timestamp();
        @println("[link time: %ms]", end - start);
    };
    m&.drop();  // for -repeat, leak less memory 

    {c.vtable.destroy_compiler}(c.data);  // for -repeat, leak less memory 
    if cmd.action == .build {
        return();  // that's all folks
    };
    
    if cmd.action == .run {
        @if(!ENABLE_COMMANDS) panic("tried to run command");
        // TODO: allow .Dynamic and dlopen it instead?
        @assert_eq(cmd.goal, .Exe, "cannot run selected artifact");
        
        // TODO: this is garbage
        looks_like_path := cmd.output_file.starts_with("./") || cmd.output_file.starts_with("../") || cmd.output_file.starts_with("~/") || cmd.output_file.starts_with("/");
        if !looks_like_path {
            cmd.output_file = @tfmt("./%", cmd.output_file);
        };
        
        if !run_cmd_blocking(cmd.output_file, cmd.child_args) {
            @panic(">>> Exited with non-zero status");
        };
        return();
    };
}

fn load_file(path: Str, vtable: *ImportVTable, build_options: *BuildOptions) CompCtx = {
    the_code := temp().read_to_string_or_crash(path);
    src := "\n#include_std(\"lib/core.fr\");".clone(forever);
    src&.push_all(the_code.items());
    comp := vtable.new_with_src(src.items(), path, build_options);
    vtable.with(comp)
}

fn find_first_fr_file(args: []Str) Str = {
    for args { arg | 
        // TODO: caring about the file extension is so stupid. 
        if arg.ends_with(".fr") {|  // :file_extension
            return(arg);
        };
    };
    ""
}

fn find_args_after_double_dash(args: []Str) []Str = {
    enumerate args { i, arg | 
        if arg[] == "--" {
            return(args.slice(i+1, args.len));
        }; 
    };
    empty()
}

#use("@/lib/sys/process.fr");
// TODO: think about if its a good idea to use reflection for this. 
fn parse_cli_args() Command = {
    ::?Arch;::?Os;
    cfg: Command = (arch = query_current_arch(), os = query_current_os());
    args := cli_args();
    args := args.slice(1, args.len); // skip exe
    extra_args: List(Str) = list(forever);
    i := 0;
    set_ctx := false;
    while => i < args.len { 
        arg := args[i].str();
        i += 1;
        
        @switch(arg) {
            @case("-repeat") => {
                cfg.n = parse_int(args[i].str());
                i += 1;
            };
            @case("-keep-names") => {
                cfg.keep_names = true;
            };
            @case("-no-deduplication") => {
                cfg.deduplicate = false;
            };
            @case("-debug-info") => {
                cfg.debug_info = true;
            };
            @case("-arch") => {
                b := args[i].str();
                ::?Arch;
                cfg.arch = or Arch.from_name(b) {
                    @panic("Invalid value for -arch: %", b)
                };
                i += 1;
            };
            @case("-os") => {
                b := args[i].str();
                ::?Os;
                cfg.os = or Os.from_name(b) {
                    @panic("Invalid value for -os: %", b)
                };
                i += 1;
            };
            @case("-S") => {
                cfg.show_asm = true;
            };
            @case("-unsafe") => {
                cfg.unsafe = true;
            };
            @case("-c") => {
                cfg.goal = .Relocatable;
            };
            @case("-dynamiclib") => {
                cfg.goal = .Dynamic;
            };
            @case("-o") => {
                @assert_eq(cfg.output_file, "", "cannot use -o option multiple times");
                cfg.output_file = args[i].str();
                i += 1;
                @assert(!cfg.output_file.starts_with("-"), "value after -o (%) started with a dash. probably not a file path?", cfg.output_file);
                if cfg.output_file.ends_with(".fr") {
                    @panic("output to % seems like a mistake", cfg.output_file);
                };
            };
            @case("-ctx=static") => { 
                cfg.implicit_context = false; 
                set_ctx = true;
            };
            @case("-ctx=implicit") => { 
                cfg.implicit_context = true; 
                set_ctx = true;
            };
            @case("-syscalls") => { 
                cfg.syscalls = true; 
            };
            @case("-new-llvm") => {
                cfg.new_llvm = true;
            };
            @case("-keep-names-ir") => {
                cfg.always_track_ir_names = true;
            };
            @case("-zig") => {
                // for cross compiling with llvm, the zig people have done the painful work of figuring out how to get the linker shit to work,
                // but also thier copy of clang won't accept llvm-ir text so i have to use my clang to make an object file and then thier clang to link it. 
                // this kind of garbage is why i want to do everything myself... 
                cfg.maintain_it_with_zig = true;
            };
            @case("-frc") => {
                cfg.goal = .Cached;
            };
            @case("-frc_inlinable") => {
                cfg.goal = .CachedEarly;
            };
            @default => {
                extra_args&.push(arg);
            };
        };
    };
    @eprintln("Extra args: %", extra_args.items());
    choose_action :: "pass cli argument ['build', 'run', 'test'] and then the path to a '.fr' source file.";
    assert(!extra_args.is_empty(), choose_action);
    enumerate extra_args { i, arg |
        done :: fn(action: Action) => {
            args_after_action := extra_args.items().slice(i, extra_args.len);
            file := find_first_fr_file(args_after_action);
            cfg.action = action;
            cfg.input_file = file;
            cfg.child_args = find_args_after_double_dash(args_after_action);
            return(cfg);
        };
        
        @switch(arg[]) {
            @case("build") => done(.build);
            @case("run")   => done(.run);
            @case("test")  => done(.test);
            @default => ();
        };
    };
    panic(choose_action)
}

#use("@/lib/sys/subprocess.fr");
