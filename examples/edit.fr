#include_std("graphics/src/lib.fr");

/*
// TODO: this should work but does not 
Graphics :: import("@/graphics/src/lib.fr");
#use(Graphics);
// TODO: also this should work
#include_std("bindings/sokol.fr");
Graphics :: import("@/graphics/src/lib.fr");
Sdtx :: Graphics.Sdtx;
// but then things in the debugtext don't find things in the lib file for some reason. 
*/

State :: @struct(
    pass_action: SgPassAction,
    text: *Sdtx.Common,
    env: rawptr,
    buffers: List(TextBuffer),
    selected_buffer: i64,
);

allocator :: libc_allocator;

do_init :: fn(userdata: rawptr) void = {
    state := State.ptr_from_raw(userdata);
    set_dynamic_context(state.env);
    
    desc := SgDesc.zeroed();
    desc.environment = sglue_environment();
    desc.logger.func = slog_func;
    sg_setup(desc&);
    
    desc: Sdtx.Desc = (
        allocator = allocator,
        context = (),
    );
    desc.fonts&[0] = Sdtx.font.cpc;
    sdtx_setup(state.text, desc&);
    
    b := state.buffers.index(0);
    b.at.w = sapp_widthf().cast() / 2;
    b.at.h = sapp_heightf().cast();
    b := state.buffers.index(1);
    b.at.w = sapp_widthf().cast() / 2;
    b.at.h = sapp_heightf().cast();
    b.at.pos.x = sapp_widthf().cast() / 2;
    
    state.pass_action.colors&[0].load_action = .CLEAR;
    state.pass_action.colors&[0].clear_value = (r = 0.156, g = 0.156, b = 0.156, a = 1);
};

Colour :: @struct(r: i64, g: i64, b: i64, a := 255);
Pos :: @struct(x: f64, y: f64);
Rect :: @struct(pos: Pos, w: f64, h: f64);

do_render :: fn(userdata: rawptr) void = {
    state := State.ptr_from_raw(userdata);
    set_dynamic_context(state.env);
    mark := mark_temporary_storage();
    
    each state.buffers& { b |
        draw_text(state, b);
    };
    
    desc := SgPass.zeroed();
    desc.action = state.pass_action;
    desc.swapchain = sglue_swapchain();
    desc.swapchain.width = sapp_width();
    desc.swapchain.height = sapp_height();
    sg_begin_pass(desc&);
    
    sdtx := state.text.default_context&;
    sdtx.draw_layer(0);
    
    sg_end_pass();
    sg_commit();
    reset_temporary_storage(mark);
};

// TODO: dependency problem so can't go in the eq overload set :(
fn eqq(a: SappEventType, b: SappEventType) bool = (@as(i32) a).eq(@as(i32) b);
fn eqq(a: SappKeycode, b: SappKeycode) bool = (@as(i32) a).eq(@as(i32) b);

scroll_speed :: -2.0;

do_event :: fn(event: *SappEvent, userdata: rawptr) void = {
    state := State.ptr_from_raw(userdata);
    set_dynamic_context(state.env);
   
    if event.type.eqq(.MOUSE_DOWN) {
        pos: Pos = (x = event.mouse_x.cast(), y = event.mouse_y.cast());
        enumerate state.buffers& { i, b |
            if b.at.contains(pos) {
                state.selected_buffer = i;
            };
        };
    };
    
    if event.type.eqq(.KEY_DOWN) {
        if event.key_code.eqq(.ESCAPE) {
            exit(0);
        };
    };
    
    if event.type.eqq(.MOUSE_SCROLL) {
        if state.selected_buffer() { b |
            b.render.x += event.scroll_x.cast() * scroll_speed;
            b.render.y += event.scroll_y.cast() * scroll_speed;
        };
    };
};

fn selected_buffer(state: *State) ?*TextBuffer = {
    if(state.selected_buffer >= state.buffers.len, => return(.None));
    (Some = state.buffers.index(state.selected_buffer))
}

fn main() void = {
    state := State.zeroed();
    state.env = get_dynamic_context();
    state.text = allocator.box(@type state.text[]);
    state.buffers = list(allocator);
    
    // :SLOW
    fn load_new_buffer(path: Str, a: Alloc) TextBuffer = {
        buffer := TextBuffer.zeroed();
        buffer.gpa = a;
        input := buffer.gpa.read_to_string_or_crash(path).items(); // :panic :leak
        input := input.split("\n", temp()).items();
        //buffer.lines&.reserve(input.len, buffer.gpa);  // TODO
        for input { l |
            buffer.max_x = max(buffer.max_x, l.len.float());
            buffer.lines&.push((ptr = l.ptr, len = l.len, cap = l.len), buffer.gpa);
        };
        buffer
    };
    state.buffers&.push(load_new_buffer("compiler/v2/sema.fr", allocator));
    state.buffers&.push(load_new_buffer("examples/edit.fr", allocator));
    desc := SappDesc.zeroed();
    desc.init_userdata_cb = do_init;
    desc.frame_userdata_cb = do_render;
    desc.event_userdata_cb = do_event;
    desc.user_data = State.raw_from_ptr(state&);
    desc.logger.func = slog_func;
    desc.window_title = "pleasejustletmeeditthetext".maybe_borrow_cstr(temp());
    sapp_run(desc&);
}

SOKOL_MACOS_LINK_ARGS :: @array("-framework", "Metal", "-framework", "MetalKit", "-framework", "Cocoa", "-framework", "QuartzCore");

fn driver(vtable: *ImportVTable) void = {    
    src := "#include_std(\"lib/core.fr\");".clone(temp());
    the_code := temp().read_to_string_or_crash("examples/edit.fr");  // TODO: don't depend on cwd.
    src&.push_all(the_code.items());
    
    opts := vtable.default_build_options();
    opts.retain_function_names = true;
    comp := vtable.new_with_src(src.items(), opts);
    ctx := vtable.with(comp);
    
    libs := ctx.empty_libs();
    //libs&.intercept_imports();
    libs&.add_lib(sokol_macos_lib);
    
    main_sym := {vtable.intern_string}(comp, "main");
    main_f := {vtable.find_unique_func}(comp, main_sym).unwrap();
    
    want_jit := false;
    for cli_args() { a |
        want_jit = want_jit || a == "-jit";
    };
    if want_jit {
        ptr := get_jitted(ctx, main_f);
        f := assume_types_fn(Arg = void, Ret = void, ptr = ptr);
        f();
        exit(0);
    };
    
    #use("@/compiler/ast_external.fr", "@/lib/sys/subprocess.fr");
    m := QbeModule.zeroed();
    init_default_module_dyn(m&, vtable, (arch = query_current_arch(), os = .macos, type = .Relocatable));  // :HardcodeOs
    ir_text := emit_qbe_included_dyn(m&, ctx&, @slice(main_f), .WrapMain); 
    
    out := open_trunc("edit.o").unwrap();
    for(ir_text&){bucket|
        out&.write(bucket);
    };
    out.close();
    // TODO: get these from the lib. 
    a := SOKOL_MACOS_LINK_ARGS;
    args := libs&.get_aot_objects();
    args&.push_all(a&.items());
    args&.push_all(@slice ("edit.o", "-o", "edit.out"));    
    args&.push_all(@slice ("-target", target_triple(m.goal.arch, m.goal.os)));   
    @println("building aot exe: %", args.items());
    success := run_cmd_blocking("clang", args.items());
    assert(success, "clang failed");
}

#include_std("backend/lib.fr");

TextBuffer :: @struct(
    lines: RawList(RawList(u8)),
    at: Rect,
    gpa: Alloc,
    cursor: Pos,
    render: Pos,
    max_x: f64,
    dead: bool,
);

fn draw_text(state: *State, self: *TextBuffer) void = {
    if(self.dead, => return());
    SCALE :: 16.0; // (80.0 / 1.75);
    w, h := (self.at.w, self.at.h);
    max_line_width := self.max_x - (w / SCALE);
    self.render.x = max(0, min(self.render.x, max_line_width));
    self.render.y = max(0, min(self.render.y, self.lines.len.float()));
    
    sdtx := state.text.default_context&;
    sdtx.color = pack_rgba(235, 219, 178, 255);
    sdtx.canvas(sapp_width().intcast().float().div(1.75).cast(), sapp_height().intcast().float().div(1.75).cast());
    
    // the fractional component of your scroll position is used to offset the text rendering on the screen.
    // and the integral component chooses which range of lines we draw.
    sdtx.pos.y = cast(self.at.pos.y / SCALE- (self.render.y - self.render.y.floor()));
    x := cast(self.at.pos.x / SCALE - (self.render.x - self.render.x.floor()));
    sdtx.pos.x = x;
    line_count := int(h / 13.0);
    start := min(max(0, self.render.y.int()), self.lines.len);
    end   := min(start + line_count, self.lines.len);
    chars_that_fit := int(w / SCALE);
    range(start, end) { i |
        line := self.lines&.index(i);
        col := self.render.x.int();
        if col < line.len {
            count := min(line.len - col, chars_that_fit);
            sdtx.put(line.items().subslice(col, count)); 
        };
        sdtx.pos.y += 1;
        sdtx.pos.x = x;
    };
}

fn contains(r: Rect, p: Pos) bool = 
    p.x > r.pos.x && p.x < r.pos.x + r.w && p.y > r.pos.y && p.y < r.pos.y + r.h;
