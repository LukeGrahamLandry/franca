#!/usr/bin/env franca
//! I think writing a pretty printer for a file format is good practice for trying to emit them myself. 
//! https://en.wikipedia.org/wiki/Mach-O
//! note: if you're ever tempted to use this code for something don't forget to use buffered printing. :SLOW
// TODO:
//      - segment_offset is virtual offset from first interesting segment NOT file offset
//      - warn if __TEXT is not file offset 0
//      - warn if fixup chain segment_offset is not in the right segment

main :: fn() void = {
    args := cli_args();
    assert(args.len > 1, "Last argument is path to macho file");
    path := args[args.len - 1].str(); 
    bytes := temp().read_to_string_or_crash(path).items(); // :panic
    
    @println("Read % bytes from %", bytes.len, path);
    dump(bytes);
}

dump :: fn(bytes: []u8) void = {
    full_bytes := bytes;
    
    header := bytes&.pop_type(MachoHeader);
    @println("[Header] %", header);
    
    // most errors i try to just report and not crash, but this one it's more likely that you passed the wrong file by mistake
    @assert_ne(header.magic, import("@/backend/elf/bits.fr").MAGIC, "expected a Mach-O file but that is an ELF file");
    @assert_eq(header.magic, macho_magic, "macho bad magic");
    
    total := 0;
    start := bytes.ptr;
    unknown := 0;
    range(0, header.commands_count.zext()) { i |
        beginning_len := bytes.len;
        header := bytes&.pop_type(LoadCommandHeader);
        @println("  [Load Command %] %", i, header);
        if header.size.mod(8) != 0 {
            @eprintln("WARN: this load command's size is not a multple of 8 bytes. thats probably bad for business");
        };
        @switch(header.type) {
            @case(LoadCommand.SegmentLoad.raw()) => {
                header := bytes&.pop_type(SegmentLoad);
                @println("        [Segment Load] %", header);
                @println("      name: %", header.name&.str());
                
                // note: its fine if there's no sections. like __LINKEDIT.
                range(0, header.section_count.zext()) { i |
                    header := bytes&.pop_type(SegmentSection);
                    @println("      [Section %] %", i, header);  // this index is misleading. really it should include the preceding ones. 
                    @println("          section_name: %", header.section_name&.str());
                    @println("          segment_name: %", header.segment_name&.str());
                    
                    if header.relocations_count != 0 {
                        @println("          % relocations:", header.relocations_count);
                        T :: RelocationFields;
                        relocations := ptr_cast_unchecked(u8, T, full_bytes.ptr.offset(header.relocations_file_offset.zext()));
                        relocations: []T = (ptr = relocations, len = header.relocations_count.zext());
                        for relocations { r | 
                            @println("          - %", r&);
                        };
                    };
                };
                //@println("current offset is %", ptr_diff(start, bytes.ptr));
            };
            @case(LoadCommand.LinkEditSymbolInfo.raw()) => {
                command := bytes&.pop_type(LinkEditSymbolInfo);
                @println("    [__LINKEDIT Symbol Info] %", command);
                // Offset from the beginning of the file. (the data will be after all the load commands).
                // (index in __stubs = index in LinkEditSymbolTable)
                if command.indirect_symbol_count > 0 {
                    println("        Indirect Symbols:");
                };
                indirect_bytes := full_bytes.slice(command.indirect_symbol_offset.zext(), full_bytes.len);
                range(0, command.indirect_symbol_count.zext()) { i | 
                    if i.mod(10) == 0 {
                        if(i != 0, => print("\n"));
                        print("        ");
                    };
                    symbol_index := indirect_bytes&.pop_type(u32);
                    ::FmtPad(i64);
                    ::FmtPad(u32);
                    @print("(% = %), ", f_pad(i, 3, .After), f_pad(symbol_index[], 3, .Before));
                };
                print("\n");
            };
            @case(LoadCommand.LinkEditSymbolTable.raw()) => {
                command := bytes&.pop_type(LinkEditSymbolTable);
                if 24 != (@as(i64) header.size.zext()) {
                    eprintln("WARN: bad fixed command size");
                };
                @println("    [__LINKEDIT Symbol Table] %", command);
                // Offsets from the beginning of the file. (the data will be after all the load commands).
                symbols_bytes := full_bytes.slice(command.symbols_offset.zext(), full_bytes.len);
                strings_bytes := full_bytes.slice(command.strings_offset.zext(), full_bytes.len);
                
                range(0, command.symbol_count.zext()) { i |
                    command := symbols_bytes&.pop_type(SymbolEntry);
                    @println("      [Symbol %] %", i, command);
                    name: CStr = (ptr = strings_bytes.ptr.offset(command.name_offset.zext()));
                    name := name.str();
                    if name.len + command.name_offset.zext() < strings_bytes.len {
                        @println("          name: %", name);
                    } else {
                        eprintln("WARN: string goes out of bounds of string table");
                    };
                };
            };
            @case(LoadCommand.MinimumOsVersion.raw()) => {
                command := bytes&.pop_type(MinimumOsVersion);
                @println("    [Minimum Os Version] %", command);
                range(0, command.number_of_tools_used.zext()) { i |
                    @println("        [Tool %] %", i, bytes&.pop_type(ToolType));
                };
            };
            @case(LoadCommand.LinkLibrary.raw()) => 
                with_trailing_string(bytes&, header, LinkLibrary, "Link Library");
            @case(LoadCommand.LoadDynamicLinker.raw()) => 
                with_trailing_string(bytes&, header, LoadDynamicLinker, "Load Dynamic Linker");
            @case(LoadCommand.LinkLibrarySelf.raw()) => 
                with_trailing_string(bytes&, header, LinkLibrary, "Link Library Self");
            @case(LoadCommand.MainEntryPoint.raw()) => {
                command := bytes&.pop_type(MainEntryPoint);
                @println("    [Main Entry Point] %", command);
            };
            @case(LoadCommand.SourceVersion.raw()) => {
                command := bytes&.pop_type(SourceVersion);
                @println("    [Source Version] %", command);
            };
            @case(LoadCommand.FunctionStarts.raw()) => {
                command := bytes&.pop_type(LinkEditBlob);
                @println("    [Function Starts] %", command);
                // first number is offset from start of __TEXT to first function. the rest are delta to next function. 
                function_starts := full_bytes.slice(command.offset.zext(), command.offset.zext() + command.size.zext());
                i := 0;
                while => !function_starts.is_empty() {
                    if i.mod(20) == 0 {
                        if(i != 0, => print("\n"));
                        print("        ");
                    };
                    value, rest, ok := read_leb128_unsigned(function_starts);
                    assert(ok, "failed to read a leb128");
                    @print("%, ", value);
                    function_starts = rest;
                    i += 1;
                };
                println("");
            };
            @case(LoadCommand.DataInCode.raw()) => {
                command := bytes&.pop_type(LinkEditBlob);
                @println("    [Data In Code] %", command);
                data := full_bytes.slice(command.offset.zext(), command.offset.zext() + command.size.zext());
                count := data.len / DataInCodeEntry.size_of();
                range(0, count) { i |
                    @println("      [%] %", i, data&.pop_type(DataInCodeEntry));
                };
            };
            @case(LoadCommand.CodeSigneture.raw()) => {
                command := bytes&.pop_type(LinkEditBlob);
                @println("    [Code Signeture] %", command);
                data := full_bytes.slice(command.offset.zext(), command.offset.zext() + command.size.zext());
            };
            @case(LoadCommand.ApplicationUuid.raw()) => {
                command := bytes&.pop_type(ApplicationUuid);
                @println("    [Application UUID] %", command);
            };
            @case(LoadCommand.ChainedFixups.raw()) => {
                // https://github.com/qyang-nj/llios/blob/main/dynamic_linking/chained_fixups.md
                command := bytes&.pop_type(LinkEditBlob);
                @println("    [Chained Fixups] %", command);
                full_data := full_bytes.slice(command.offset.zext(), command.offset.zext() + command.size.zext());
                data := full_data;
                header := data&.pop_type(ChainedFixupsHeader);
                @println("        %", header);
                starts_data := full_data.slice(header.starts_offset.zext(), full_data.len);
                full_starts_data := starts_data;
                seg_count := starts_data&.pop_type(u32)[];
                @println("           chained_starts_in_image.seg_count %", seg_count);
                range(0, seg_count.zext()) { segment_index |
                    offset_to_csis := starts_data&.pop_type(u32)[];
                    if offset_to_csis != 0 {
                        starts_data := full_starts_data;
                        if full_data.len < offset_to_csis.zext() {
                            @eprintln("WARN: offset_to_csis = %", offset_to_csis);
                        };
                        starts_data.ptr = starts_data.ptr.offset(offset_to_csis.zext());
                        starts_data.len -= offset_to_csis.zext();
                        @print("           %. off=% ", segment_index, offset_to_csis);
                        starts := starts_data&.pop_type(ChainedStartsInSegment);
                        @print("ChainedStartsInSegment: %", starts);
                        if starts.size >= command.size {
                            @eprintln("WARN: starts size is greater than while chained fixups section...");
                        };
                        if starts.page_count != 0 {
                            // the struct has alignment padding that eats the first entry of the variable length array. 
                            starts_data.ptr = starts_data.ptr.offset(-2); // take it back now yall
                            starts_data.len += 2;
                            base_file_offset := get_virtual_page(full_bytes, starts.segment_offset.to_signed(), segment_index); 
                            @println(" [segment_offset -> file offset %]", base_file_offset);
                            range(0, starts.page_count.zext()) { i | 
                                offset_to_fixup := starts_data&.pop_type(u16)[];
                                if offset_to_fixup == page_start_no_fixups {
                                    // no fixups on this page
                                    @println("               - %. ---", i);
                                } else {
                                    @println("               - %. page_start: %", i, offset_to_fixup);
                                    if offset_to_fixup >= starts.page_size {
                                        @eprintln("WARN: fixup outside page, thats probably not good.");
                                    };
                                    // now we have a fun linked list to traverse.
                                    // TODO: check pointer format on the header before doing this 
                                    page_offset: i64 = base_file_offset + (starts.page_size.zext() * i);
                                    page_data: []u8 = (ptr = full_bytes.ptr.offset(page_offset), len = starts.page_size.zext());
                                    next_offset: i64 = offset_to_fixup.zext();
                                    dowhile {
                                        page_data.ptr = page_data.ptr.offset(next_offset);
                                        page_data.len -= next_offset;
                                        reloc := ptr_cast_unchecked(u8, ChainedReloc, page_data.ptr)[];
                                        if get(reloc.bind, .is_bind) == 1 {
                                            @println("                  - (Bind = %)", reloc.bind&);
                                        } else {
                                            @println("                  - (Rebase = %)", reloc.rebase&);
                                        };
                                        next_offset = get(reloc.bind, .next) * 4;
                                        next_offset != 0
                                    };
                                }
                            };
                        };
                    } else {
                        @println("           %. ---", segment_index);
                    };
                };
                imports_data := full_data.slice(header.imports_offset.zext(), full_data.len);
                symbols_data := full_data.slice(header.symbols_offset.zext(), full_data.len);
                
                println("           Imports:");
                range(0, header.imports_count.zext()) { i |
                    if header.imports_format == 1 {
                        import := imports_data&.pop_type(ChainedImport);
                        name := "";
                        if header.symbols_format == 0 { 
                            n: CStr = (ptr = symbols_data.ptr.offset(get(import[], .name_offset)));
                            name = n.str();
                            if name.len + (@as(i64) header.symbols_offset.zext()) > full_data.len {
                                name = "";
                                eprintln("WARN: name of out bounds");
                            };
                        };
                        @println("           [%] % %", i, import, name);
                    } else {
                        @print("(% = %]), ", i, data&.pop_type(u64));
                    };
                };
            };
            @case(LoadCommand.ExportsTrie.raw()) => {
                command := bytes&.pop_type(LinkEditBlob);
                @println("    [Exports Trie] %", command);
                data := full_bytes.slice(command.offset.zext(), command.offset.zext() + command.size.zext());
                // https://github.com/qyang-nj/llios/blob/main/exported_symbol/README.md#export-trie
                S :: @struct(string: Str, ptr: *u8, depth: i64);
                nodes := list(S, temp());
                nodes&.push(string = "", ptr = data.ptr, depth = 0);
                first := true;
                while => nodes&.pop() { node |
                    bytes: []u8 = (ptr = node.ptr, len = data.len - ptr_diff(data.ptr, node.ptr));
                    terminal_size, rest, ok := read_leb128_unsigned(bytes);
                    assert(ok, "failed read leb128");
                    if !first {
                        range(0, node.depth * 3) { _ |
                            print("=");
                        };
                        @print(" |%| ", node.string);
                    };
                    // TODO: print the encoded value (its an address i think)
                    range(0, terminal_size.bitcast()) { i |
                        b := rest&.pop_type(u8)[];
                        t := u8.list(temp());
                        t&.push_prefixed_hex_byte(b);
                        @print("% ", t.items());
                    };
                    println("");
                    first = false;
                    child_count := rest&.pop_type(u8)[];
                    range(0, child_count.zext()) { i |
                        s: CStr = (ptr = rest.ptr);
                        s := s.str();
                        rest.ptr = rest.ptr.offset(s.len + 1);
                        child_offset, rest2, ok := read_leb128_unsigned(rest);
                        assert(ok, "failed read leb128");
                        rest = rest2;
                        nodes&.push(string = s, ptr = data.ptr.offset(child_offset.bitcast()), depth = node.depth + 1);
                    };
                };
            };
            @default => {
                unknown += 1;
                // -8 because we already ate the header
                bytes.ptr = bytes.ptr.offset(header.size.zext() - 8);
                bytes.len -= header.size.zext() - 8;
                @println("    [dont know what that is yet]");
            };
        };
        size_taken := beginning_len - bytes.len;
        total += size_taken;
        if size_taken != header.size.zext() {
            @eprintln("WARN:       bad command size (cmd said %, we read %)", @as(i64) header.size.zext(), size_taken);
            diff := (@as(i64) header.size.zext()) - size_taken;
            bytes.ptr = bytes.ptr.offset(diff);
            bytes.len -= diff;
        };
    };
    println("Finished file");
    if total != header.commands_size.zext() {
        @eprintln("load commands size mismatch. header said % bytes but we counted %", header.commands_size, total);
    };
    if unknown != 0 {
        @println("     % unknown load commands. (probably a problem with this tool, not your macho file)", unknown);
    };
}

// :slow but this is only called once per segment in a program we never run
fn get_virtual_page(full_bytes: []u8, page_offset: i64, expected_segment_index: i64) i64 = {
    original := page_offset;
    current_segment_index := 0;
    for_sections full_bytes { type, data | 
        if type == LoadCommand.SegmentLoad.raw() {  // TODO: why is this raw?
            cmd := data&.pop_type(SegmentLoad);
            if current_segment_index == 0 && cmd.size == 0 && cmd.init_prot == 0 {  // __PAGEZERO
                page_offset += cmd.address_size.to_signed();
            } else {
                if page_offset >= cmd.address.to_signed() && page_offset < to_signed(cmd.address + cmd.address_size) {
                    if current_segment_index != expected_segment_index {
                        @eprintln("WARN: found page offset % in wrong segment % instead of %", original, current_segment_index, expected_segment_index);
                    };
                    off := page_offset - cmd.address.to_signed();
                    return(cmd.file_offset.to_signed() + off);
                };
            };
            current_segment_index += 1;
        };
    };
    @panic("didnt find in bounds page for virtual offset % (expected in segment %)", original, expected_segment_index)
}

fn with_trailing_string(bytes: *[]u8, header: *LoadCommandHeader, $Command: Type, command_name: Str) void = {
    command := bytes.pop_type(Command);
    @println("    [%] %", command_name, command);
    header_size :: LoadCommandHeader.size_of() + Command.size_of();
    @assert_eq(command.string_offset, header_size, "expected % string here", command_name);
    string_size: i64 = header.size.zext() - header_size;
    name: CStr = (ptr = bytes.ptr);
    name := name.str();
    assert(name.len <= string_size, "name too long");
    @println("      filepath: %", name);
    // Skip the extra zero padding (added for alignment, i assume, thats nice of them).
    bytes.ptr = bytes.ptr.offset(string_size);
    bytes.len -= string_size;
}

::enum_basic(LoadCommand);
::enum(MachOFileType);
::DeriveFmt(MachoHeader);
::DeriveFmt(LoadCommandHeader);
::DeriveFmt(SegmentLoad);
::DeriveFmt(LoadCommand);
::DeriveFmt(SegmentSection);
::DeriveFmt(LinkEditSymbolTable);
::DeriveFmt(SymbolEntry);
::DeriveFmt(LinkEditSymbolInfo);
::DeriveFmt(MinimumOsVersion);
::DeriveFmt(ToolType);
::DeriveFmt(LinkLibrary);
::DeriveFmt(LoadDynamicLinker);
::DeriveFmt(MainEntryPoint);
::DeriveFmt(SourceVersion);
::DeriveFmt(LinkEditBlob);
::DeriveFmt(DataInCodeEntry);
::DeriveFmt(ApplicationUuid);
::DeriveFmt(ChainedFixupsHeader);
::DeriveFmt(ChainedStartsInSegment);

::DeriveFmt(u128);
::DeriveFmt(RelocationFields);

fn to_signed(x: u64) i64 = x.bitcast(); // TODO: safety check

#use("@/backend/macho/bits.fr");
#use("@/lib/sys/fs.fr");
