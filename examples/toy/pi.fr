//
// This is a nice micro benchmark to demonstrate how much better 
// the fsqrt instruction is than doing my silly newton's method. 
// With N :: 100000000, it's 6000 samples in newton_root or 70 in libsystem_m.dylib`sqrt. 
// TODO: when i do my own random numbers, make sure it's not way too slow. 
// TODO: a nice library goal would be to make it so easy to draw 
//       little diagrams that it would make sense to do so for this program. 
//
// this program approximates pi. 
// choose points with x,y in -1.0 to 1.0. square with side length 2, area = 4. 
// check what percentage of the points are within the inscribed circle of radius 1.
// that fraction is (area_c / area_s), since points were chosen randomly. 
// area_s = s*s = 2*2 = 4
// area_c = pi*r*r = pi*1*1 = pi
// pi     = (area_c / area_s) * 4
// the sizes chosen are arbitrary. using 1 just saves one unit of algebra. 
//

#use("@/lib/sys/process.fr")
fn main() void = {
    N      :: 100000000;
    sqrt   :: fn(n: f64) f64 #ir(.sqrt, .Kd);
    //sqrt   :: fn(n: f64) f64 #libc;
    //sqrt   :: fn(n: f64) f64 = newton_root(n, 2);
    rand   :: fn()           i32 #libc;  // TODO: don't use libc for this. bleh. 
    srand  :: fn(seed: u32) void #libc;
    rand_f :: fn() f64 = {
        RAND_MAX :i64: 0x7fffffff;
        n: i64 = rand().zext();
        (n.float() / RAND_MAX.float() - 0.5) * 2.0
    }
    
    hit := 0;
    srand(timestamp().trunc());
    range(0, N) { _ |
        x, y := (rand_f(), rand_f());
        r    := sqrt(x*x + y*y);
        hit  += int(r <= 1.0);
    };
    
    pi := hit.float() / N.float() * 4.0;
    @println("%", pi * 10000.0);
    @assert_lt(abs(pi - PI), 0.001);
}
