aaa :: fn() i64 #noinline = {
    //panic("foo");

    x := i64.ptr_from_int(12345678109);
    x[] = 123;
    println("A");
    
    foo := "hello world";
    println(foo[999999999].int());
    0
};
aa :: fn() i64 #noinline = {
    aaa()
};
a :: fn() i64 #noinline = {
    aa()
};

main :: fn() = {
    b :: fn() #noinline = {
        eval :: fn($T: Type, s: Str) T #generic = {
            get_result :: fn($src: Str) i64 = 
                import(src).result;
            src := @tfmt("{ result :: %; };", s);
            invoke_specialized(Str, T, get_result, src)
        };
        
        x := eval(i64, "a()");
    };
    c :: fn() #noinline = {
        x: rawptr = a;
        @tfmt("%", x); // force a shim
        b();
        println("B");
    };
    d :: fn(i: i64) #noinline = {
        c();
        println("C");
    };
    my_macro :: fn(e: FatExpr) FatExpr #macro = {
        d(1 + 2);
        @{}
    };
    
    @my_macro 0;
};
