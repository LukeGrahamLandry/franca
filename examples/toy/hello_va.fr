fn main() void = {
    a := add_ints_and_floats(true, 3, 1, 2.5, 3);
    b := add_ints_and_floats(false, 4, a, 4, 5.0, 5, 999999); // last arg won't be seen since we lied about the count
    
    printf :: fn(fmt: CStr) void #c_variadic #libc;
    name: CStr = "World";
    // TODO: not being able to have both \n and the auto coerce to CStr is ass 
    printf("Hello %s! %d %g", name, 123, b);  // c abi variadic call!
    
    @assert_eq(b, 20.5);
}

// arguments alternate f64 and i64
add_ints_and_floats :: fn(start_with_int: bool, count: i64) f64 #c_variadic = {
    va := @uninitialized CVariadicArgumentList;
    va_start(va&);
    acc := 0.0;
    range(0, count) { i |
        acc += if mod(i + int(start_with_int), 2) == 0 {
            x: f64 = va_arg(va&);
            x
        } else {
            x: i64 = va_arg(va&);
            x.float()
        };
    };
    acc
};
