//! Transpile BrainFuck to Franca.
fn convert(code: Str) List(u8) = {
    out: List(u8) = list(code.len().mul(5), libc_allocator); 
	out&.push_all("fn main() void = { \nmem: List(u8) = 0.repeated(30000, temp()); p := mem.maybe_uninit.ptr;\n");
	
	for code { (c: u8) | @switch(c) {
        @case(Bf.Inc) => out&.push_all("p[]+=1;");
        @case(Bf.Dec) => out&.push_all("p[]-=1;");
        @case(Bf.Right) => out&.push_all("p=p.offset(1);");
        @case(Bf.Left) => out&.push_all("p=p.offset(-1);");
        @case(Bf.Output) => out&.push_all("putchar(p[]);");
        @case(Bf.Input) => out&.push_all("p[]=getchar();");
        @case(Bf.Open)  => out&.push_all("while=>p[]!=0{|");
        @case(Bf.Close) => out&.push_all("};");
        @default()      => ();
    }};

	out&.push_all("\n}\n");
	out&.push_all("putchar :: fn(c: u8) void #libc;\n");
	out&.push_all("getchar :: fn() u8 #libc;\n");
	out
}

fn main() void = {
    // From https://esolangs.org/wiki/Brainfuck#Hello,_World!
	code: Str = "++++++++[>++++[>++>+++>+++>+<<<<-]>+>+>->>+[<]<-]>>.>---.+++++++..+++.>>.<-.<.+++.------.--------.>>+.>++.";
    out := convert(code);
	out := out&.items();
	println(out);
}
