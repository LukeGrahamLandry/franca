fn main() = {
    foo :: fn() void #noinline = ();
    F :: @FnPtr() void;
    a :: @static(F) foo;
    b :: @static(*F) a;
    f: F = foo;
    @println("f   = % // code", ptr_cast_unchecked(@type f, i64, f&)[]);
    @println("foo = % // code", ::@as(rawptr) foo);  // TODO: this used to work without the extra '::'
    @println(":a[ = % // code", ::ptr_cast_unchecked(@type foo, rawptr, a)[]);
    @println("a[] = % // code in data", ptr_cast_unchecked(@type a[], i64, a)[]);
    @println("a   = % // data", int_from_ptr(@type a[], a));
    @println("b[] = % // data in data", ptr_cast_unchecked(@type b[], i64, b)[]);
    @println("b   = % // data", int_from_ptr(@type b[], b));
    foo();
}
