// Insert some x86_64 machine code that executes CPUID instruction to get the vendor of your CPU.   

fn main() = {
    info := zeroed CpuId;
    get_cpu_id(info&);
    name := info.b&.items();
    
    @println("% % % %", info.i&[0], info.i&[1], info.i&[2], name);
    
    known :: @const_slice("GenuineIntel", "AuthenticAMD", "VirtualApple", "MicrosoftXTA");
    @assert(known.contains(name), "is it on the list? https://en.wikipedia.org/wiki/CPUID#EAX=0:_Highest_Function_Parameter_and_Manufacturer_ID");
}

CpuId :: @union(b: Array(u8, 12), i: Array(u32, 3));

// https://www.felixcloutier.com/x86/cpuid
get_cpu_id :: AsmFunction(fn(out: *CpuId) void = (), @const_slice(
    ret(), ret(), // this example is not supported on arm!
)) { (out: *List(u8)) | @asm_x64(
    // follow the calling convention! 
    // cpuid always writes to rbx so we save it in a caller saved register. 
    encode_bin(PrimaryOp.MovReg, X86Reg.r11, X86Reg.rbx),
    
    encode_imm(X86Reg.rax, 0), // ask for vendor id
    0x0F, 0xA2, // CPUID
    // now return (EBX, EDX, ECX)
    // :SLOW could use offset stores but i dont want to
    encode_bin_mem32(PrimaryOp.MovReg, X86Reg.rdi, X86Reg.rbx),
    encode_imm(PrimaryOp.AddImm32, X86Reg.rdi, 4),
    encode_bin_mem32(PrimaryOp.MovReg, X86Reg.rdi, X86Reg.rdx),
    encode_imm(PrimaryOp.AddImm32, X86Reg.rdi, 4),
    encode_bin_mem32(PrimaryOp.MovReg, X86Reg.rdi, X86Reg.rcx),
    
    encode_bin(PrimaryOp.MovReg, X86Reg.rbx, X86Reg.r11), // restore
    PrimaryOp.Ret,
) out;};

#use("@/backend/amd64/bits.fr");
#use("@/backend/arm64/bits.fr");
