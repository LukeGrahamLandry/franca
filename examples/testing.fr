#generic 
fn run_tests_main($Task: Type, tasks: []Task, $get_name: @Fn(t: *Task) Str, $run: @Fn(t: *Task) Ty(bool, List(u8), List(u8), Str)) void = {
    ::FmtPad(Str);
    passed := 0;
    failed := 0;
    each tasks { task |
        name := get_name(task);
        @print("%", f_pad(name, 40, .After));
        ok, out, err, stats := run(task);
        (@if(ok, passed&, failed&))[] += 1;
        @println("[%] %", if(ok, => "ok", => "failed run"), stats);
        if !ok {
            print(out.items());
            print(err.items());
        };
    };
    if failed == 0 {
        @println("\nAll is fine! (passed % tests)", passed);
    } else {
        @println("\n% of % tests failed.", failed, failed + passed);
    };
    exit((failed != 0).int());
}

fn collect_with_extension(path: Str, extension: Str) Result(List(Str), void) = {
    out := Str.list(temp());
    (walk_directory(path.maybe_borrow_cstr(temp())) { e |
        continue :: local_return;
        if e.name.ends_with(extension) {
            out&.push(e.name.shallow_copy(temp()));
        };
    }) || return(.Err);
    (Ok = out)
}
