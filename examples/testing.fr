// #foreign("curl", "unzip", "tar");  

#reexport("@/lib/sys/subprocess.fr");
#reexport("@/lib/sys/process.fr");
#use("@/lib/sys/fs.fr");

#generic 
fn run_tests_main($Task: Type, tasks: []Task, $get_name: @Fn(t: *Task) Str, $run: @Fn(t: *Task) Ty(bool, List(u8), List(u8), Str)) void = {
    ::FmtPad(Str);
    passed := 0;
    failed := 0;
    start := timestamp();
    each tasks { task |
        mark := mark_temporary_storage();
        start := timestamp();
        name := get_name(task);
        @print("%", f_pad(name, 40, .After));
        ok, out, err, stats := run(task);
        (@if(ok, passed&, failed&))[] += 1;
        @println("[%] % [%ms]", if(ok, => "ok", => "failed run"), stats, timestamp() - start);
        if !ok {
            print(out.items());
            println(err.items());
        };
        reset_temporary_storage(mark);
    };
    report_test_count(start, passed, failed);
}

report_test_count :: fn(start: i64, passed: i64, failed: i64) void = {
    if failed == 0 {
        @println("\nAll is fine! (passed % tests in %ms)", passed, timestamp() - start);
    } else {
        @println("\n% of % tests failed.", failed, failed + passed);
    };
    if failed != 0 {
        panic("failed tests");
    };
};

#use("@/lib/sys/threads.fr");

#generic 
fn run_tests_main_threaded($Ctx: Type, $Task: Type, ctx: Ctx, tasks: []Task, get_name: @FnPtr(ctx: Ctx, t: *Task) Str, run: @FnPtr(ctx: Ctx, t: *Task) Ty(bool, List(u8), List(u8), Str)) void = {
    ::FmtPad(Str);
    nthreads := 3;  // TODO: pick this in a good way
    
    //run_tests_main(Task, tasks, fn(it) => get_name(ctx, it), fn(it) => run(ctx, it));
    //return();
    
    State :: @struct {
        passed: i64 = 0;
        failed: i64 = 0;
        ctx: Ctx;
        tasks: []Task;
        next_task: i64 = 0;
        get_name: @FnPtr(ctx: Ctx, t: *Task) Str;
        run: @FnPtr(ctx: Ctx, t: *Task) Ty(bool, List(u8), List(u8), Str);
        results: []RawList(u8); 
    };
    start := timestamp();
    out := temp().alloc_zeroed(RawList(u8), tasks.len);
    state: State = (ctx = ctx, tasks = tasks, results = out, get_name = get_name, run = run);
    threads := temp().alloc_init(*Thread, nthreads, fn(_) => start_thread(State, worker, state&));
    
    worker :: fn(self: *State) void = {
        a := general_allocator();
        loop {
            i := i64.atomic_inc(self.next_task&);
            if i >= self.tasks.len {
                return();
            };
            task := self.tasks.index(i);
            start := timestamp();
            mark := temp().mark();
            name := self'get_name(self.ctx, task);
            ok, out, err, stats := self'run(self.ctx, task);
            i64.atomic_inc(@if(ok, self.passed&, self.failed&));
            
            result := u8.list(a);
            @fmt(result&, "%", f_pad(name, 40, .After));
            ::FmtPad(i64);
            @fmt(result&, "[%] %ms | %", if(ok, => "ok", => "FAIL"), f_pad(timestamp() - start, 4, .Before), stats);
            if !ok {
                @fmt(result&, "\n%\n%", out.items(), err.items());
            };
            @fmt(result&, "\n");
            self.results[i] = result.as_raw();
            temp().reset(mark);
            print("-");
        }
    };
    
    for threads { it |
        it.join();
    };
    print("\n");
    for out { it |
        print(it.items());
        it&.drop(general_allocator());
    };
    
    report_test_count(start, state.passed, state.failed);
}

chop_file_name :: fn(s: Str) Str = {
    while => s.len > 0 && !s.ends_with(".") {
        s.len -= 1;
    };
    s.len -= s.ends_with(".").int();
    i := s.len - 1;
    while => s[i] != "/".ascii() && i > 0 {
        i -= 1;
    };
    i += int(s[i] == "/".ascii());
    s := s.rest(i);
    @debug_assert(s.len > 0, "chop_file_name expected XXX/YYY.ZZZ -> YYY");
    s
};

fn collect_with_extension(path: Str, extension: Str) Result(List(Str), void) = {
    @debug_assert(extension.starts_with("."));
    entries := collect_directory_ordered(path, temp(), temp()) 
        || return(.Err);
    out := Str.list(temp());
    each entries { e |
        if e.name.ends_with(extension) && e.name.len != extension.len {
            out&.push(e.name);
        };
    };
    (Ok = out)
}

// TODO: go through everything and stop messing around with paths
//       especially relative paths! do everything with file descriptors. 
FRANCA_CACHE_PATH :: "target/franca/deps";
// ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡
// ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡
// ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡
// ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡
// cached download of a compressed resource 
// returns path to the output folder
// for now we assume the zip file will contain a directory named `HACK_name`
// TODO: this is stupid. we can't just be execing random shit. 
// TODO: don't directly dump stuff into the cache directory. 
//       check hash at the beginning, do the work, check hash again, then rename it, 
//       so you don't clobber another process that has the same dependency. t
fn fetch_or_crash(url: Str, zip_size_bytes: i64, sha256_hash: Str, HACK_name: Str) Str = {
    make_dirs_or_crash(FRANCA_CACHE_PATH);
    
    folder_path := @tfmt("%/%", FRANCA_CACHE_PATH, HACK_name);
    if path_exists(folder_path) {
        return(folder_path);
    };
    
    // ðŸ¤¡ no just look at whats in the file my guy
    extension := @if_else { 
        @if(url.ends_with(".tar.gz")) => "tar.gz";
        @if(url.ends_with(".zip")) => "zip";
        @else => panic("expected zip or tar.gz");
    };
    
    // TODO: this is stupid. should be able to pipe to a process. 
    zip_file_path := @tfmt("%.%", folder_path, extension);
    
    if !file_exists(zip_file_path) {
        @eprintln(">>> downloading [%]...", url);
        ok, out, err := exec_and_catch("curl", @slice(url, "-s", "-L"), temp());
        @assert(ok, "failed curl %\n%", url, err.items());
        
        @eprintln(">>> verifying [%]...", zip_file_path);
        @assert_eq(out.len, zip_size_bytes, "bad size: %", url);
        digest := Sha256'hex(out.items());
        @assert_eq(digest, sha256_hash, "bad hash %", url);
        
        write_entire_file_or_crash(zip_file_path, out.items());
    };
    @eprintln(">>> unpacking [%]...", zip_file_path);
    
    if extension == "zip" {
        ok, out, err := exec_and_catch("unzip", @slice("-oq", "-d", FRANCA_CACHE_PATH, zip_file_path), temp());
    } else {
        ok, out, err := exec_and_catch("tar", @slice("-C", FRANCA_CACHE_PATH, "-xzvf", zip_file_path), temp());
        if !ok {
            println(out.items());
            println(err.items());
        }
    };
    // not checking !ok because it doesn't like strange filenames 
    // this is why we can't be using whatever random shit i happen to have installed. 
    folder_path
}

// macos doesn't like when you run an executable that crashes 
// and then write over the same path with a new program and run that. 
fn three_trillion_dollars_does_not_buy_an_operating_system_that_works(path: Str) void = {
    if query_current_os() == .macos {
        _ := remove(as_cstr path);
    };
}

sh :: fn(a: []Str) void = {
    show :: fn() => {
        for a { a |
            @print("% ", a);
        };
        println("");
    };
    show();
    ok := if false {
        ok, out, err := exec_and_catch(a[0], a.rest(1), temp());
        if !ok {
            print(out.items());
            print(err.items());
        };
        ok
    } else {
        run_cmd_blocking(a[0], a.slice(1, a.len))
    };
    if !ok {
        print("Failed to run: ");
        show();
        panic("sh failed");
    };
};
