#reexport("@/lib/sys/subprocess.fr");
#reexport("@/lib/sys/process.fr");
#use("@/lib/sys/fs.fr");

#generic 
fn run_tests_main($Task: Type, tasks: []Task, $get_name: @Fn(t: *Task) Str, $run: @Fn(t: *Task) Ty(bool, List(u8), List(u8), Str)) void = {
    ::FmtPad(Str);
    passed := 0;
    failed := 0;
    each tasks { task |
        name := get_name(task);
        @print("%", f_pad(name, 40, .After));
        ok, out, err, stats := run(task);
        (@if(ok, passed&, failed&))[] += 1;
        @println("[%] %", if(ok, => "ok", => "failed run"), stats);
        if !ok {
            print(out.items());
            println(err.items());
        };
    };
    if failed == 0 {
        @println("\nAll is fine! (passed % tests)", passed);
    } else {
        @println("\n% of % tests failed.", failed, failed + passed);
    };
    if failed != 0 {
        exit(1);
    };
    //exit((failed != 0).int());
}

order_strings :: fn(a: *Str, b: *Str) bool = {
    if(a.len != b.len, => a.len < b.len) {
        range(0, a.len) { i |
            if(a[i] != b[i], => return(a[i] < b[i]));
        };
        true
    }
};

fn collect_with_extension(path: Str, extension: Str) Result(List(Str), void) = {
    out := Str.list(temp());
    (walk_directory(as_cstr path) { e |
        continue :: local_return;
        if e.name.ends_with(extension) {
            out&.push(e.name.shallow_copy(temp()));
        };
    }) || return(.Err);
    sort :: import("@/lib/sort.fr")'quicksort(Str, order_strings);
    sort(out.items());
    (Ok = out)
}

// TODO: go through everything and stop messing around with paths
//       especially relative paths! do everything with file descriptors. 
FRANCA_CACHE_PATH :: "target/franca";
// ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡
// ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡
// ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡
// ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡
// cached download of a compressed resource 
// returns path to the output folder
// for now we assume the zip file will contain a directory named `HACK_name`
// TODO: this is stupid. we can't just be execing random shit. 
// TODO: don't directly dump stuff into the cache directory. 
//       check hash at the beginning, do the work, check hash again, then rename it, 
//       so you don't clobber another process that has the same dependency. 
fn fetch_or_crash(url: Str, zip_size_bytes: i64, sha256_hash: Str, HACK_name: Str) Str = {
    folder_path := @tfmt("%/%", FRANCA_CACHE_PATH, HACK_name);
    if path_exists(folder_path) {
        return(folder_path);
    };
    
    // ðŸ¤¡ no just look at whats in the file my guy
    extension := @if_else { 
        @if(url.ends_with(".tar.gz")) => "tar.gz";
        @if(url.ends_with(".zip")) => "zip";
        @else => panic("expected zip or tar.gz");
    };
    
    // TODO: this is stupid. should be able to pipe to a process. 
    zip_file_path := @tfmt("%.%", folder_path, extension);
    
    if !file_exists(zip_file_path) {
        ok, out, err := exec_and_catch("curl", @slice(url, "-s", "-L"), temp());
        @assert(ok, "failed curl %\n%", url, err.items());
        @assert_eq(zip_size_bytes, out.len, "bad size: %", url);
        // TODO: mkdir
        write_entire_file_or_crash(zip_file_path, out.items());
    };
    // TODO: i have my own backend/macho/sha256.fr; use it
    ok, out, err := exec_and_catch("shasum", @slice("-a", "256", zip_file_path), temp());
    @assert(out.items().contains(sha256_hash), "bad hash %", url);
    if extension == "zip" {
        ok, out, err := exec_and_catch("unzip", @slice("-oq", "-d", FRANCA_CACHE_PATH, zip_file_path), temp());
    } else {
        ok, out, err := exec_and_catch("tar", @slice("-C", FRANCA_CACHE_PATH, "-xzvf", zip_file_path), temp());
        if !ok {
            println(out.items());
            println(err.items());
        }
    };
    // not checking !ok because it doesn't like strange filenames 
    // this is why we can't be using whatever random shit i happen to have installed. 
    folder_path
}

// macos doesn't like when you run an executable that crashes 
// and then write over the same path with a new program and run that. 
fn three_trillion_dollars_does_not_buy_an_operating_system_that_works(path: Str) void #target_os = (fn($os) => {
    @if(@run (os == .macos)) {
        _ := remove(as_cstr path);
    };
}); 
