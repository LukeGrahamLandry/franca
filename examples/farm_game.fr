State :: @struct(
    pipe: SglPipeline,
    pass_action: SgPassAction,
    x: f64,
    y: f64,
    dx: f64,
    dy: f64
);

do_init :: fn(userdata: rawptr) Unit = {
    state := State.ptr_from_raw(userdata);
    
    desc := SgDesc.zeroed();
    desc.environment = sglue_environment();
    // TODO: single argument version of @resolve that uses inferred result type. 
    logger := (@resolve(@type desc.logger.func) slog_func)!fn_ptr;
    desc.logger.func = logger;
    sg_setup(desc&);
    
    desc := SglDesc.zeroed();
    desc.logger.func = logger;
    sgl_setup(desc&);
    
    desc := SdtxDesc.zeroed();
    desc.logger.func = logger;
    desc.fonts&.as_ptr()[] = sdtx_font_kc854();
    sdtx_setup(desc&);
    
    desc := SgPipelineDesc.zeroed();
    state.pipe = sgl_make_pipeline(desc&);
    state.pass_action.colors&[0].load_action = .CLEAR;
    state.pass_action.colors&[0].clear_value.r = 1.0.cast();
    
    state.x = 0.0;
    state.y = 0.0;
    state.dx = 0.2;
    state.dy = 0.2;
};

do_render :: fn(userdata: rawptr) Unit = {
    state := State.ptr_from_raw(userdata);
    state.x += state.dx;
    state.y += state.dy;
    
    sgl_defaults();
    sgl_viewport(0.intcast(), 0.intcast(), sapp_width(), sapp_height(), true);
    sgl_load_pipeline(state.pipe);
    sdtx_color3f(0.0.cast(), 0.0.cast(), 1.0.cast());
    sdtx_canvas(sapp_width().intcast().float().div(2.0).cast(), sapp_height().intcast().float().div(2.0).cast());
    sdtx_pos(state.x.cast(), state.y.cast());
    sdtx_puts("hello world".maybe_borrow_cstr(libc_allocator));
    
    
    sgl_begin_quads();
    
    fn draw_square(x: f64, y: f64, size: f64) Unit = {
        w := sapp_width().intcast().float();
        h := sapp_height().intcast().float();
        half_size := size.div(2.0);
        
        x1 := x.sub(half_size).div(w).sub(1.0).cast();
        x2 := x.add(half_size).div(w).sub(1.0).cast();
        y1 := y.sub(half_size).div(h.neg()).add(1.0).cast();
        y2 := y.add(half_size).div(h.neg()).add(1.0).cast();
        
        sgl_v2f(x1, y1);
        sgl_v2f(x2, y1);
        sgl_v2f(x2, y2);
        sgl_v2f(x1, y2);
    }
    
    sgl_load_identity();
    draw_square(100.0, 100.0, 20.0);
    draw_square(200.0, 200.0, 20.0);
    draw_square(0.0, 0.0, 20.0);
    
    sgl_end();
    
    width := sapp_width().intcast().float().div(16.0);
    if(state.x.gt(width.sub(11.0)).or(=> state.x.lt(0.0))){|
        state.dx *= 1.0.neg();
    };
    height := sapp_height().intcast().float().div(16.0);
    if(state.y.gt(height.sub(1.0)).or(=> state.y.lt(0.0))){|
        state.dy *= 1.0.neg();
    };
    
    desc := SgPass.zeroed();
    desc.action = state.pass_action;
    desc.swapchain = sglue_swapchain();
    desc.swapchain.width = sapp_width();
    desc.swapchain.height = sapp_height();
    sg_begin_pass(desc&);
    
    sgl_draw();
    sdtx_draw();
    
    sg_end_pass();
    sg_commit();
};

// TODO: dependency problem so can't go in the eq overload set :(
fn eqq(a: SappEventType, b: SappEventType) bool = (@as(i32) a).eq(@as(i32) b);
fn eqq(a: SappKeycode, b: SappKeycode) bool = (@as(i32) a).eq(@as(i32) b);

do_event :: fn(event: *SappEvent, userdata: rawptr) Unit = {
    state := State.ptr_from_raw(userdata);
    
    if(event.type.eqq(.KEY_DOWN).and(=> event.key_code.eqq(.Q))) {|
        exit(0);
    };
};

fn main() Unit = {
    println("Hello World");
    state := State.zeroed();
    desc := SappDesc.zeroed();
    desc.init_userdata_cb = do_init!fn_ptr;
    desc.frame_userdata_cb = do_render!fn_ptr;
    desc.event_userdata_cb = do_event!fn_ptr;
    desc.user_data = State.raw_from_ptr(state&);
    // TODO: I can't decide if this would be creepy as an auto cast.
    desc.logger.func = (@resolve(@type desc.logger.func) slog_func)!fn_ptr;
    sapp_run(desc&);
}

//::print_stacktrace_on_panic();
fn driver(vtable: *ImportVTable) Unit #export = {
    arch_os := {vtable.comptime_arch}(); // TODO: pattern match multiple returns. 
    SOKOL_C :: """
        #include "sokol_app.h"
        #include "sokol_gfx.h"
        #include "sokol_glue.h"
        #include "sokol_log.h"
        #include "util/sokol_debugtext.h"
        #include "util/sokol_gl.h"
        #include "util/sokol_shape.h"
    """;
    // TODO: this whole thing where you have to write your program inside out is really annoying. 
    //       I want the user program to be in charge and call into the compiler as a library. 
    UserData :: @struct(
        vtable: *ImportVTable,
        sokol: DlHandle,
    );
    
    is_x86 := (@as(i64)arch_os._0).eq(@as(i64) Arch.X86_64);
    
    resolve_comptime_import :: fn(userdata: rawptr, comp: Compiler, f: FuncId, lib_name: Symbol, fn_name: Symbol) ?rawptr = {
        userdata := UserData.ptr_from_raw(userdata);
        // TODO: can't call @println here?? oh it doesnt like when no %s?
        sokol_sym := {userdata.vtable.intern_string}(comp, "sokol");
        fn_name := {userdata.vtable.get_string}(comp, fn_name);
        ret :: @return;
        //@println("Asked for a function %", fn_name);
        if(sokol_sym.eq(lib_name)){|
            fn_name := fn_name.maybe_borrow_cstr(libc_allocator);
            f := dlsym(userdata.sokol, fn_name);
            assert(f.is_null().not(), "bad sokol function name");
            ret((Some = f));
        };
        .None
    };

    dylib_path := if(is_x86, => "target/sokol_x86_64.dylib", => "target/sokol_aarch64.dylib");
    dylib_path_c := dylib_path.maybe_borrow_cstr(libc_allocator);
    sokol := dlopen(dylib_path_c, DlFlag.Lazy);
    if(sokol.lib.is_null()){|
        c_file := open_temp_file();
        c_file.fd&.write(SOKOL_C);
        
        // TODO: don't hardcode platform. 
        // build it!
        // macos_args must go first to treat source as objective c!
        macos_args := ("-DSOKOL_METAL", "-x", "objective-c", "-framework", "Metal", "-framework", "MetalKit", "-framework", "Cocoa", "-framework", "QuartzCore")!slice;
        common_args := ("-Ivendor/sokol", "-DSOKOL_IMPL", "-DSOKOL_NO_ENTRY",  "-O2", c_file&.s_name())!slice;
        dyn_args := ("-DSOKOL_DLL", "-dynamiclib", "-o", dylib_path)!slice;
        args := macos_args.clone(libc_allocator);
        args&.push_all(common_args);
        args&.push_all(dyn_args);
        if(is_x86) {|
            // cross compile for rosetta. 
            args&.push_all(("-target", "x86_64-apple-darwin")!slice);
        };
        ::display_slice(Str);
        @println("building sokol dylib for comptime: %", args.items());
        run_cmd_blocking(CLANG_PATH, args.items());
        sokol = dlopen(dylib_path_c, DlFlag.Lazy);
        assert(sokol.lib.is_null().not(), "failed to open sokol for comptime");
        c_file.remove();
    };
    
    my_vtable: ExportVTable = (
        resolve_comptime_import = (Some = resolve_comptime_import!fn_ptr),
    );
    data: UserData = (vtable = vtable, sokol = sokol);
    
    src := "#include_std(\"core.fr\");".clone(libc_allocator);
    the_code := libc_allocator.read_to_string("examples/farm_game.fr");  // TODO: don't depend on cwd.
    src&.push_all(the_code.items());
    sokol_bindings := libc_allocator.read_to_string("vendor/sokol.fr");
    src&.push_all(sokol_bindings.items());
    
    comp := vtable.new_with_src(src.items(), .Cranelift);
    {vtable.give_vtable}(comp, my_vtable&, UserData.raw_from_ptr(data&));
    
    jit_and_run_main(vtable, comp);
    fn jit_and_run_main(vtable: *ImportVTable, comp: Compiler) Unit = {
        main_sym := {vtable.intern_string}(comp, "main");
        main_f := {vtable.find_unique_func}(comp, main_sym).unwrap();
        {vtable.compile_func}(comp, main_f, .Jit).unwrap();
        ptr := {vtable.get_jitted_ptr}(comp, main_f).unwrap();
        {vtable.make_jitted_exec}(comp);
        f := assume_types_fn(Arg = Unit, Ret = Unit, ptr = ptr);
        f();
    }
}
