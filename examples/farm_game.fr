// This is perhaps an unpleasent way to structure a program, idk, 
// it's relaxing to work on something that's so trivial it doesn't matter. 
// Don't judge me :)

#include_std("graphics/lib.fr");

State :: @struct(
    pipe: Sgl.Pipeline,
    pass_action: SgPassAction,
    x: f64,
    y: f64,
    dx: f64,
    dy: f64,
    world: World,
    text: Sdtx.Self,
    draw: Sgl.Self,
    sg: Sg.Self,
    w: i64,
    h: i64,
    pressed: Array(bool, 4),
);

World :: @struct(
    farm: List(Planted),
    shelves: List(Shelf),
    shops: List(Shop),
    requests: List(CropType),
    player: Player,
    money: i64 = 20,
    timer: i64 = 60,
    farm_area: Rect,
    msg: List(u8),
    msg_timer: i64 = 0,
    truck_area: Rect,
    round_timer: i64,
    next_round_timer: i64,
    round_number: i64,
);

Player :: @struct(pos: Pos, inventory: ?Object = .None, dx: f64 = 0.0, dy: f64 = 0.0);
Growth :: @enum(Seed, Ready);
CropType :: @enum(Tomato, Potato, Acorn, Tree);
Crop :: @struct(type: CropType, age: Growth);
Planted :: @struct(pos: Pos, remaining: i64 = 100, drought: f64 = 0.0, crop: Crop);
Object :: @tagged(
    Crop: Crop,
    WateringCan,
    Scarecrow,
    Sprinkler,
    Fertalizer,
    CrowBaton,
    Shelf,
    Wall,
);
Shelf :: @struct(
    pos: Pos, 
    holding: ?Object = .None,
    crow_hp: i64 = 0,
    scarecrow: bool = false,
);
Shop :: @struct(
    pos: Pos,
    price: i64 = 0,
    item: ?Object = .None,
);

allocator :: libc_allocator;

fn load_default_world(self: *World) void = {
    self[] = zeroed World;
    self.player = (pos = (x = 150.0, y = 150.0));
    self.shelves = list(allocator);
    self.money = 15;
    range(0, 5) {i|
        self.shelves&.push((pos = (x = i.float().mul(75.0).add(350.0), y = 200.0)));
    };
    self.shelves[0].holding = (Some = .WateringCan);
    
    self.shops = list(allocator);
    range(0, 2) {x|
        range(0, 5) {y|
            self.shops&.push((pos = (x = x.float().mul(75.0).add(175.0), y = y.float().mul(75.0).add(300.0))));
        };
    };
    self.shops[0].price = 5;
    self.shops[0].item = (Some = (Crop = (type = .Tomato, age = .Seed)));
    self.farm_area = (pos = (x = 350.0, y = 300.0), w = 500.0, h = 500.0);
    self.truck_area = (pos = (x = 350.0 + 500.0 + 40, y = 300.0), w = 200.0, h = 200.0);
    self.farm = list(allocator); // :fucked you aren't forced to set this before
    self.msg = list(allocator);
    self.requests = list(allocator);
    self.next_round_timer = 60*10;
}

fn on_init(state: *State, sapp: *Sapp.Self, sg: *Sg.Self) void = {
    sapp.set_window_title("Arstotzkan Farmer 4");
    
    state.draw&.setup(
        allocator = allocator,
        context = (),
        sg = sg,
    );
    
    state.text&.setup(
        allocator = allocator,
        fonts = @slice(Sdtx.font.kc854),
        sg = sg,
    );
    
    init_pipeline(state.draw.default_context&, state.pipe&, (colors = (
        (blend = (  // This makes transparency work
            enabled = true,
            src_factor_rgb = .SRC_ALPHA,
            dst_factor_rgb = .ONE_MINUS_SRC_ALPHA,
        )),
        ..,
    )));
    
    state.pass_action.colors&[0] = (
        load_action = .CLEAR,
        clear_value = (r = 0.3, g = 0.3, b = 0.3, a = 1.0),
    );
    
    state.world&.load_default_world();
    
    state.x = 0.0;
    state.y = 0.0;
    state.dx = 0.2;
    state.dy = 0.2;
    
    state.world&.next_round();
};

fn next_round(world: *World) void = {
    extra_time := world.round_timer;
    world.round_timer = world.next_round_timer;
    world.next_round_timer -= 5;
    world.round_number += 1;
    
    world.msg&.clear();
    world.msg_timer = 100;
    if world.requests.len == 0 {
        bonus := extra_time / 15;
        world.money += bonus;
        @if(extra_time != 0)
        @fmt(world.msg&, "Order fulfilled early! you earned % bonus rubles", bonus);
        rand :: fn() i64 #libc;  // TODO: don't use libc for this. bleh. 
        range(0, 2 + rand().mod(world.round_number)) { _ |
            world.requests&.push(.Tomato);
        };
    } else {
        prev_round := world.round_number;
        world.load_default_world();
        world.next_round();
        @fmt(world.msg&, "Time's up. You lose!");
        world.round_timer += prev_round * 25; // a bit more since the transition is jarring
    };
}

Colour :: @struct(r: i64, g: i64, b: i64, a := 255);
Pos :: @struct(x: f64, y: f64);
red: Colour : (r = 255, g = 0, b = 0);
green: Colour : (r = 0, g = 255, b = 0);
blue: Colour : (r = 0, g = 0, b = 255);
yellow: Colour : (r = 250, g = 250, b = 0);
brown: Colour : (r = 150, g = 70, b = 20);
light_brown: Colour : (r = 180, g = 110, b = 70);
black_transparent: Colour : (r = 0, g = 0, b = 0, a = 100);

Rect :: @struct(pos: Pos, w: f64, h: f64);
base_size :: 50.0;

do_update :: fn(state: *State) void = {
    state.x += state.dx;
    state.y += state.dy;
    player_speed :: 10.0;
    state.world.player.pos.x += player_speed * state.world.player.dx;
    state.world.player.pos.y += player_speed * state.world.player.dy;
    unordered_retain state.world.farm& { planted | 
        planted.remaining -= 1;
        if planted.remaining <= 0 {
            planted.crop.age = .Ready;
        };
        
        planted.remaining > -300 // rot!
    };
    state.world.msg_timer -= 1;
    state.world.round_timer -= 1; // TODO: dt
    
    if state.world.round_timer <= 0 {
        state.world&.next_round();
    };
};
  
fn on_render(state: *State, sapp: *Sapp.Self, sg: *Sg.Self) void = {
    state.world.player.dy = float(int(state.pressed&[2]) - int(state.pressed&[0]));
    state.world.player.dx = float(int(state.pressed&[3]) - int(state.pressed&[1]));
    // no normalize. i want you to go faster when you're going diagonal. it's more fun than sprint. 
    // TODO: maybe that should be an upgrade you buy. that would be fun. 
    do_update(state);
    
    sgl := state.draw.default_context&;
    sdtx := state.text.default_context&;
    state.w = sapp.width();
    state.h = sapp.height();
    
    sgl.defaults();
    sgl.viewport(0.intcast(), 0.intcast(), sapp.width().intcast(), sapp.height().intcast(), true);
    sgl.load_pipeline(state.pipe);
    
    sdtx.color = pack_rgba(0.0, 0.0, 1.0, 1.0);
    sdtx.canvas(sapp.width().float().div(2.0).cast(), sapp.height().float().div(2.0).cast());
    sdtx.pos.x = state.x.cast();
    sdtx.pos.y = state.y.cast();
    sdtx.put("click for ruble");
    sdtx.color = pack_rgba(0.5, 0.5, 0.2, 1.0);
    sdtx.pos.x = 0.0;
    sdtx.pos.y = 0.0;
    sdtx.put(@tfmt("You have % rubles.    Round %\n", state.world.money, state.world.round_number));
    sdtx.put(@tfmt("Shipment due in % frames.\n", state.world.round_timer));
    sdtx.put(@tfmt("Requests: "));
    for state.world.requests& { r |
        sdtx.put(@tfmt("%, ", r));
    };
    sdtx.put(@tfmt("\n"));
    
    each state.world.farm { planted |
        sdtx := state.text.default_context&;
        sdtx.pos.x = planted.pos.x.cast() / 32;
        sdtx.pos.y = planted.pos.y.cast() / 32;
        if planted.remaining < 0 {
            sdtx.color = pack_rgba(0.0, 0.5, 1.0, 1.0);
            sdtx.put(@tfmt("%", 300 + planted.remaining));
        } else {
            sdtx.color = pack_rgba(1.0, 0.0, 0.0, 1.0);
            sdtx.put(@tfmt("%", planted.remaining));
        }
    };
    
    if state.world.msg_timer > 0 {
        sdtx.color = pack_rgba(1.0, 0.5, 0.2, 1.0);
        sdtx.pos.x = 0.0;
        sdtx.pos.y = 3.0;
        sdtx.put(state.world.msg.items());
    };
    sgl.begin(.QUADS);
   
    fn draw(s: *State, area: Rect, colour: Colour) void = {
        sgl := s.draw.default_context&;
        sgl.color = pack_rgba(colour.r, colour.g, colour.b, colour.a);
        w, h := (s.w.float(), s.h.float());
        
        x1 := area.pos.x.sub(0.0).div(w).sub(1.0).cast();
        x2 := area.pos.x.add(area.w).div(w).sub(1.0).cast();
        y1 := area.pos.y.sub(0.0).div(h.neg()).add(1.0).cast();
        y2 := area.pos.y.add(area.h).div(h.neg()).add(1.0).cast();
        
        sgl.v2f(x1, y1);
        sgl.v2f(x2, y1);
        sgl.v2f(x2, y2);
        sgl.v2f(x1, y2);
    }
    
    fn draw_square(s: *State, x: f64, y: f64, size: f64, colour: Colour) void = 
        s.draw(@as(Rect) (pos = (x = x, y = y), w = size, h = size), colour);
    
    fn draw_object(s: *State, ty: Object, pos: Pos) void = {
        @match(ty) {
            fn Crop(crop) => {
                fraction := @match(crop.age) {
                    fn Seed() => 3.0;
                    fn Ready() => 1.5;
                };
                c := find_center(pos, fraction);
                s.draw_square(c.x, c.y, base_size / fraction, green);
                
            }
            @default => s.draw_square(pos.x, pos.y, base_size / 3, green);
        }
    }
    
    s := state;
    sgl.load_identity();
    s.draw_square(100.0, 100.0, 20.0, yellow);
    s.draw_square(200.0, 200.0, 20.0, green);
    s.draw_square(0.0, 0.0, 20.0, blue);
    
    s.draw(state.world.farm_area, light_brown);
    s.draw(state.world.truck_area, brown);
    each state.world.farm { planted | 
        s.draw_object((Crop = planted.crop), planted.pos);
    };
    
    each state.world.shelves {obj|
        s.draw_square(obj.pos.x, obj.pos.y, base_size, brown);
        if obj.holding { item |
            s.draw_object(item, obj.pos);
        };
    };
    each state.world.shops {obj|
        s.draw_square(obj.pos.x, obj.pos.y, base_size, light_brown);
        if obj.item { item | 
            s.draw_object(item, obj.pos);
        };
    };
    
    fn draw(player: *Player) void => {
        s.draw_square(player.pos.x, player.pos.y, base_size, black_transparent);
        if player.inventory { item | 
            s.draw_object(item, player.pos);
        };
        // TODO: do the math
        c := find_center(player.pos, 5);
        s.draw_square(c.x, c.y, base_size / 5, red);
    }
    
    fn find_center(pos: Pos, frac: f64) Pos = {
        (x = pos.x + base_size / 2 - base_size / frac / 2, y = pos.y + base_size / 2 - base_size / frac / 2)
    }
    
    state.world.player&.draw();
    
    sgl.end();
    
    w := sapp.width().float().div(16.0);
    if state.x > w - 14.0 || state.x < 0.0 {
        state.dx *= 1.0.neg();
    };
    h := sapp.height().float().div(16.0);
    if state.y > h - 1.0 || state.y < 0.0 {
        state.dy *= 1.0.neg();
    };
    
    Easy'glue_begin_pass(sapp, sg, state.pass_action);
    
    sgl.draw_layer(0);
    sdtx.draw_layer(0);
    
    sg.end_pass();
    sg.commit();
};

fn on_event(state: *State, sapp: *Sapp.Self, event: *Sapp.Event) void = {
    if event.type == .KEY_DOWN && !event.key_repeat {
        if event.key_code == .ESCAPE {
            exit(0);
        };
        
        if event.key_code == .W {
            state.pressed&[0] = true;
        };
        if event.key_code == .A {
            state.pressed&[1] = true;
        };
        if event.key_code == .S {
            state.pressed&[2] = true;
        };
        if event.key_code == .D {
            state.pressed&[3] = true;
        };
        if event.key_code == .SPACE {
            state.do_interact();
        };
    };
    
    if event.type == .KEY_UP && !event.key_repeat {
        if event.key_code == .W {
            state.pressed&[0] = false;
        };
        if event.key_code == .A {
            state.pressed&[1] = false;
        };
        if event.key_code == .S {
            state.pressed&[2] = false;
        };
        if event.key_code == .D {
            state.pressed&[3] = false;
        };
    };
};

fn do_interact(state: *State) void = {
    player := state.world.player&;
    
    DONE :: return;
    
    say :: fn(a: FatExpr) FatExpr #macro = @{
        state.world.msg&.clear();
        @[format_into(@{ state.world.msg& }, a&.items(), a.loc)];
        state.world.msg_timer = 100;
        DONE();
    }
    
    each state.world.shelves { shelf | 
        if center_overlaps(player.pos, base_size, shelf.pos, base_size) {
            temp := player.inventory;
            player.inventory = shelf.holding;
            shelf.holding = temp;
            return();
        }; 
    };
    if player.inventory.is_none() {
        each state.world.shops { shop | 
            if center_overlaps(player.pos, base_size, shop.pos, base_size) {
                if shop.price <= state.world.money {
                    state.world.money -= shop.price; 
                    player.inventory = shop.item;
                    return();
                } else {
                    @say("You need % more rubles to afford this item", shop.price - state.world.money);
                };
            };    
        };
    };
    
    ::enum(CropType);
    on_farm := center_overlaps(state.world.player.pos, base_size, state.world.farm_area.pos, state.world.farm_area.w);
    on_truck := center_overlaps(state.world.player.pos, base_size, state.world.truck_area.pos, state.world.truck_area.w);
    
    if on_farm {
        @match(player.inventory) {
            fn Some(item) => {
                // Try to plant a seed
                @match(item) {
                    fn Crop(crop) => {
                        crop.age == Growth.Seed || @say("Your % is fully grown. you can't plant it again.", crop.type);
                        player.inventory = .None;
                        state.world.farm&.push(pos = player.pos, crop = crop);
                        return();
                    }
                    @default => @say("You can only plant seeds but you are holding %.", item&.tag());
                }
            }
            fn None() => {
                // Try to pick up a grown plant
                enumerate state.world.farm { i, planted | 
                    if planted.crop.age == .Ready {
                        if center_overlaps(player.pos, base_size, planted.pos, base_size) {
                            player.inventory = (Some = (Crop = planted.crop));
                            state.world.farm&.unordered_remove(i); // do this last or life gets confusing!
                            return();
                        };
                    };
                };
            }
        }
    };
    
    @if(on_truck)
    if player.inventory { item |
        @if_let(item) fn Crop(crop) => {
            crop.age == .Ready || @say("Trying to sell % seed. try growing letting it grow first!", crop.type);
            r := state.world.requests&;
            i := r.index_of(fn(it) => it[] == crop.type) 
                || @say("Trying to sell % but that is not a requested item", crop.type);
            r.ordered_remove(i);
            player.inventory = .None;
            state.world.money += (i + 1) * (1 + @as(i64) crop.type) * 2;
            if r.len == 0 {
                state.world&.next_round();
            };
            
            return();
        }
        @say("You can only sell crops (you are holding %)", item&.tag());
    }
    
    @say("There is nothing to interact with here");
}

::enum(Growth);
fn center_overlaps(me: Pos, me_size: f64, obj: Pos, obj_size: f64) bool = {
    center: Pos = (x = me.x + me_size / 2, y = me.y + me_size / 2);
    buffer := 10.0;
    center.x + buffer> obj.x && center.x - buffer < obj.x + obj_size && center.y + buffer > obj.y && center.y - buffer < obj.y + obj_size
}

fn main() void = 
    Easy'start(State);

fn driver(vtable: *ImportVTable) void = 
    Easy'build_for_graphics(vtable, "examples/farm_game.fr"); 

#include_std("backend/lib.fr");
