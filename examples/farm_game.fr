#include_std("graphics/src/lib.fr");

State :: @struct(
    pipe: Sgl.Pipeline,
    pass_action: SgPassAction,
    x: f64,
    y: f64,
    dx: f64,
    dy: f64,
    world: World,
    env: rawptr,
    text: *Sdtx.Common,
    draw: *Sgl.Common,
);

World :: @struct(
    farm: List(Planted),
    shelves: List(Shelf),
    shops: List(Shop),
    requests: List(CropType),
    player: Player,
    money: i64 = 20,
    timer: i64 = 60,
    farm_area: Rect,
    msg: List(u8),
    msg_timer: i64 = 0,
);

Player :: @struct(pos: Pos, inventory: ?Object = .None, dx: f64 = 0.0, dy: f64 = 0.0);
Growth :: @enum(Seed, Ready);
CropType :: @enum(Tomato, Potato, Acorn, Tree);
Crop :: @struct(type: CropType, age: Growth);
Planted :: @struct(pos: Pos, remaining: i64 = 100, drought: f64 = 0.0, crop: Crop);
Object :: @tagged(
    Crop: Crop,
    WateringCan,
    Scarecrow,
    Sprinkler,
    Fertalizer,
    CrowBaton,
    Shelf,
    Wall,
);
Shelf :: @struct(
    pos: Pos, 
    holding: ?Object = .None,
    crow_hp: i64 = 0,
    scarecrow: bool = false,
);
Shop :: @struct(
    pos: Pos,
    price: i64 = 0,
    item: ?Object = .None,
);

allocator :: libc_allocator;

fn load_default_world(self: *World) void = {
    self.player =  (pos = (x = 50.0, y = 50.0));
    self.shelves = list(allocator);
    self.money = 15;
    range(0, 5) {i|
        self.shelves&.push((pos = (x = i.float().mul(75.0).add(350.0), y = 200.0)));
    };
    self.shelves[0].holding = (Some = .WateringCan);
    
    self.shops = list(allocator);
    range(0, 2) {x|
        range(0, 5) {y|
            self.shops&.push((pos = (x = x.float().mul(75.0).add(175.0), y = y.float().mul(75.0).add(300.0))));
        };
    };
    self.shops[0].price = 5;
    self.shops[0].item = (Some = (Crop = (type = .Tomato, age = .Seed)));
    self.farm_area = (pos = (x = 350.0, y = 300.0), w = 500.0, h = 500.0);
    self.farm = list(allocator); // :fucked you aren't forced to set this before
    self.msg = list(allocator);
}


do_init :: fn(userdata: rawptr) void = {
    state := State.ptr_from_raw(userdata);
    set_dynamic_context(state.env);
    
    desc := SgDesc.zeroed();
    desc.environment = sglue_environment();
    desc.logger.func = slog_func;
    sg_setup(desc&);
    
    desc: Sgl.Desc = (
        allocator = allocator,
        context = (),
    );
    setup(state.draw, desc&);
    
    desc: Sdtx.Desc = (
        allocator = allocator,
        context = (),
    );
    desc.fonts&[0] = Sdtx.font.kc854;
    sdtx_setup(state.text, desc&);
    
    desc := SgPipelineDesc.zeroed();
    // This makes transperency work
    colour := desc.colors&[0]&;
    // TODO: struct update sytax. colour.blend = (enabled = true, src_factor_rgb = .SRC_ALPHA, dst_factor_rgb = .ONE_MINUS_SRC_ALPHA, ..)
    colour.blend.enabled = true;
    colour.blend.src_factor_rgb = .SRC_ALPHA;
    colour.blend.dst_factor_rgb = .ONE_MINUS_SRC_ALPHA;
    // I think you need this if you do z index stuff and it doesn't work without it. 
    // For now the player is the only non-opaque thing so its easy to just draw things in the right order. 
    //desc.alpha_to_coverage_enabled = true;
    //desc.depth.write_enabled = true;
    //desc.depth.compare = .LESS_EQUAL;
    
    init_pipeline(state.draw.default_context&, state.pipe&, desc&);
    state.pass_action.colors&[0].load_action = .CLEAR;
    state.pass_action.colors&[0].clear_value = (r = 0.3, g = 0.3, b = 0.3, a = 1.0);
    
    state.world&.load_default_world();
    
    state.x = 0.0;
    state.y = 0.0;
    state.dx = 0.2;
    state.dy = 0.2;
};

Colour :: @struct(r: i64, g: i64, b: i64, a := 255);
Pos :: @struct(x: f64, y: f64);
red: Colour : (r = 255, g = 0, b = 0);
green: Colour : (r = 0, g = 255, b = 0);
blue: Colour : (r = 0, g = 0, b = 255);
yellow: Colour : (r = 250, g = 250, b = 0);
brown: Colour : (r = 150, g = 70, b = 20);
light_brown: Colour : (r = 180, g = 110, b = 70);
black_transparent: Colour : (r = 0, g = 0, b = 0, a = 100);

Rect :: @struct(pos: Pos, w: f64, h: f64);
base_size :: 50.0;

do_render :: fn(userdata: rawptr) void = {
    state := State.ptr_from_raw(userdata);
    set_dynamic_context(state.env);
    mark := mark_temporary_storage();
    do_update :: fn(state: *State) void = {
        state.x += state.dx;
        state.y += state.dy;
        player_speed :: 10.0;
        state.world.player.pos.x += player_speed * state.world.player.dx;
        state.world.player.pos.y += player_speed * state.world.player.dy;
        each state.world.farm { planted | 
            planted.remaining -= 1;
            if planted.remaining <= 0 {
                planted.crop.age = .Ready;
            };
            // TODO: rotten if remaining < (-something)
        };
        state.world.msg_timer -= 1;  // TODO: overflow
    };
    do_update(state);
    
    sgl := state.draw.default_context&;
    sdtx := state.text.default_context&;
    
    sgl.defaults();
    sgl.viewport(0.intcast(), 0.intcast(), sapp_width(), sapp_height(), true);
    sgl.load_pipeline(state.pipe);
    
    sdtx.color = pack_rgba(0.0, 0.0, 1.0, 1.0);
    sdtx.canvas(sapp_width().intcast().float().div(2.0).cast(), sapp_height().intcast().float().div(2.0).cast());
    sdtx.pos.x = state.x.cast();
    sdtx.pos.y = state.y.cast();
    sdtx.put("hello world");
    sdtx.color = pack_rgba(0.5, 0.5, 0.2, 1.0);
    sdtx.pos.x = 0.0;
    sdtx.pos.y = 0.0;
    sdtx.put(@tfmt("You have % rubles\0", state.world.money));
    
    if state.world.msg_timer > 0 {
        sdtx.color = pack_rgba(1.0, 0.5, 0.2, 1.0);
        sdtx.pos.x = 0.0;
        sdtx.pos.y = 1.0;
        sdtx.put(state.world.msg.items());
    };
    sgl.begin(.QUADS);
   
    fn draw(sgl: *Sgl.Context, area: Rect, colour: Colour) void = {
        sgl.color = pack_rgba(colour.r, colour.g, colour.b, colour.a);
        
        w := sapp_width().intcast().float();
        h := sapp_height().intcast().float();
        
        x1 := area.pos.x.sub(0.0).div(w).sub(1.0).cast();
        x2 := area.pos.x.add(area.w).div(w).sub(1.0).cast();
        y1 := area.pos.y.sub(0.0).div(h.neg()).add(1.0).cast();
        y2 := area.pos.y.add(area.h).div(h.neg()).add(1.0).cast();
        
        sgl.v2f(x1, y1);
        sgl.v2f(x2, y1);
        sgl.v2f(x2, y2);
        sgl.v2f(x1, y2);
    }
    
    fn draw_square(sgl: *Sgl.Context, x: f64, y: f64, size: f64, colour: Colour) void = 
        sgl.draw(@as(Rect) (pos = (x = x, y = y), w = size, h = size), colour);
    
    fn draw_object(sgl: *Sgl.Context, ty: Object, pos: Pos) void = {
        @match(ty) {
            fn Crop(crop) => {
                fraction := @match(crop.age) {
                    fn Seed() => 3.0;
                    fn Ready() => 1.5;
                };
                c := find_center(pos, fraction);
                sgl.draw_square(c.x, c.y, base_size / fraction, green);
                
            }
            @default => sgl.draw_square(pos.x, pos.y, base_size / 3, green);
        }
    }
    
    sgl.load_identity();
    sgl.draw_square(100.0, 100.0, 20.0, yellow);
    sgl.draw_square(200.0, 200.0, 20.0, green);
    sgl.draw_square(0.0, 0.0, 20.0, blue);
    
    sgl.draw(state.world.farm_area, light_brown);
    each state.world.farm { planted | 
        sgl.draw_object((Crop = planted.crop), planted.pos);
    };
    
    each state.world.shelves {obj|
        sgl.draw_square(obj.pos.x, obj.pos.y, base_size, brown);
        if obj.holding { item |
            sgl.draw_object(item, obj.pos);
        };
    };
    each state.world.shops {obj|
        sgl.draw_square(obj.pos.x, obj.pos.y, base_size, light_brown);
        if obj.item { item | 
            sgl.draw_object(item, obj.pos);
        };
    };
    
    fn draw(player: *Player) void => {
        sgl.draw_square(player.pos.x, player.pos.y, base_size, black_transparent);
        if player.inventory { item | 
            sgl.draw_object(item, player.pos);
        };
        // TODO: do the math
        c := find_center(player.pos, 5);
        sgl.draw_square(c.x, c.y, base_size / 5, red);
    }
    
    fn find_center(pos: Pos, frac: f64) Pos = {
        (x = pos.x + base_size / 2 - base_size / frac / 2, y = pos.y + base_size / 2 - base_size / frac / 2)
    }
    
    state.world.player&.draw();
    
    sgl.end();
    
    width := sapp_width().intcast().float().div(16.0);
    if state.x > width - 11.0 || state.x < 0.0 {
        state.dx *= 1.0.neg();
    };
    height := sapp_height().intcast().float().div(16.0);
    if state.y > height - 1.0 || state.y < 0.0 {
        state.dy *= 1.0.neg();
    };
    
    desc := SgPass.zeroed();
    desc.action = state.pass_action;
    desc.swapchain = sglue_swapchain();
    desc.swapchain.width = sapp_width();
    desc.swapchain.height = sapp_height();
    sg_begin_pass(desc&);
    
    sgl.draw_layer(0);
    sdtx.draw_layer(0);
    
    sg_end_pass();
    sg_commit();
    reset_temporary_storage(mark);
};

// TODO: dependency problem so can't go in the eq overload set :(
fn eqq(a: SappEventType, b: SappEventType) bool = (@as(i32) a).eq(@as(i32) b);
fn eqq(a: SappKeycode, b: SappKeycode) bool = (@as(i32) a).eq(@as(i32) b);

do_event :: fn(event: *SappEvent, userdata: rawptr) void = {
    state := State.ptr_from_raw(userdata);
    set_dynamic_context(state.env);
   
    if event.type.eqq(.KEY_DOWN) {
        if event.key_code.eqq(.Q) {
            exit(0);
        };
        
        if event.key_code.eqq(.W) {
            state.world.player.dy = -1;
        };
        if event.key_code.eqq(.A) {
            state.world.player.dx = -1;
        };
        if event.key_code.eqq(.S) {
            state.world.player.dy = 1;
        };
        if event.key_code.eqq(.D) {
            state.world.player.dx = 1;
        };
        if event.key_code.eqq(.SPACE) {
            state.do_interact();
        };
    };
    
    if event.type.eqq(.KEY_UP) {
        if event.key_code.eqq(.W) {
            state.world.player.dy = 0;
        };
        if event.key_code.eqq(.A) {
            state.world.player.dx = 0;
        };
        if event.key_code.eqq(.S) {
            state.world.player.dy = 0;
        };
        if event.key_code.eqq(.D) {
            state.world.player.dx = 0;
        };
    };
};

fn do_interact(state: *State) void = {
    player := state.world.player&;
    each state.world.shelves { shelf | 
        if center_overlaps(player.pos, base_size, shelf.pos, base_size) {
            temp := player.inventory;
            player.inventory = shelf.holding;
            shelf.holding = temp;
            return();
        }; 
    };
    if player.inventory.is_none() {
        each state.world.shops { shop | 
            if center_overlaps(player.pos, base_size, shop.pos, base_size) {
                if shop.price <= state.world.money {
                    state.world.money -= shop.price; 
                    player.inventory = shop.item;
                    return();
                } else {
                    state.world.msg&.clear();
                    @fmt(state.world.msg&, "You need % more rubles to afford this item\0", shop.price - state.world.money);
                    state.world.msg_timer = 100;
                    return();
                };
            };    
        };
    };
    if center_overlaps(state.world.player.pos, base_size, state.world.farm_area.pos, state.world.farm_area.w) {
        @match(player.inventory) {
            fn Some(item) => {
                // Try to plant a seed
                @match(item) {
                    fn Crop(crop) => {
                        if crop.age == Growth.Seed {
                            player.inventory = .None;
                            state.world.farm&.push(pos = player.pos, crop = crop);
                            return();
                        } else {
                            state.world.msg&.clear();
                            @fmt(state.world.msg&, "You can only plant seeds!\0");
                            state.world.msg_timer = 100;
                        };
                        
                    }
                    @default => {
                        state.world.msg&.clear();
                        @fmt(state.world.msg&, "You can only plant seeds but you are holding %.\0", item&.tag());
                        state.world.msg_timer = 100;
                        return();
                    };
                }
            }
            fn None() => {
                // Try to pick up a grown plant
                enumerate state.world.farm { i, planted | 
                    if planted.crop.age == .Ready {
                        if center_overlaps(player.pos, base_size, planted.pos, base_size) {
                            player.inventory = (Some = (Crop = planted.crop));
                            state.world.farm&.unordered_remove(i); // do this last or life gets confusing!
                            return();
                        };
                    };
                };
            }
        }
    };
    state.world.msg&.clear();
    @fmt(state.world.msg&, "There is nothing to interact with here\0");
    state.world.msg_timer = 100;
}

::enum(Growth);
fn center_overlaps(me: Pos, me_size: f64, obj: Pos, obj_size: f64) bool = {
    center: Pos = (x = me.x + me_size / 2, y = me.y + me_size / 2);
    center.x > obj.x && center.x < obj.x + obj_size && center.y > obj.y && center.y < obj.y + obj_size
}

fn main() void = {
    println("Hello World");
    state := State.zeroed();
    state.env = get_dynamic_context();
    state.text = allocator.box(@type state.text[]);
    state.draw = allocator.box(@type state.draw[]);
    desc := SappDesc.zeroed();
    desc.init_userdata_cb = do_init;
    desc.frame_userdata_cb = do_render;
    desc.event_userdata_cb = do_event;
    desc.user_data = State.raw_from_ptr(state&);
    desc.logger.func = slog_func;
    desc.window_title = "Arstotzkan Farmer 4".maybe_borrow_cstr(temp());
    sapp_run(desc&);
}

SOKOL_MACOS_LINK_ARGS :: @array("-framework", "Metal", "-framework", "MetalKit", "-framework", "Cocoa", "-framework", "QuartzCore");

// TODO: test that all the functions that appear in the generated bindings are in the dylib. 
//       ie. right now the imgui ones won't be because i haven't added that to SOKOL_C yet. -- Jul 4
// TODO: when my c_bindgen works, stop using sokol_zig, and write out the header interdependencies for which you have to include first. 
//       or really I guess one big generate off the same c file you'd compile makes more sense? 
//       also write test that diffs against the old one so they don't change unexpectedly.
// TODO: make it easy to pass -DNDEBUG for release builds. 

fn driver(vtable: *ImportVTable) void #export = {    
    src := "#include_std(\"lib/core.fr\");".clone(temp());
    the_code := temp().read_to_string("examples/farm_game.fr");  // TODO: don't depend on cwd.
    src&.push_all(the_code.items());
    
    opts := vtable.default_build_options();
    opts.retain_function_names = true;
    comp := vtable.new_with_src(src.items(), opts);
    c := vtable.with(comp);
    
    libs := c.empty_libs();
    //libs&.intercept_imports();
    libs&.add_lib(sokol_macos_lib);
    
    main_sym := {vtable.intern_string}(comp, "main");
    main_f := {vtable.find_unique_func}(comp, main_sym).unwrap();
    
    want_jit := false;
    for cli_args() { a |
        want_jit = want_jit || a == "-jit";
    };
    if want_jit {
        ptr := c.get_jitted(main_f);
        f := assume_types_fn(Arg = void, Ret = void, ptr = ptr);
        f();
        exit(0);
    };
    
    m := init_default_module_dyn(vtable, (arch = get_comptime_arch(), os = .macos, type = .Relocatable));  // :HardcodeOs
    ir_text := emit_qbe_included_dyn(m&, c&, @slice(main_f), .WrapMain, true);  // doesn't work with -legacy
    
    out := open_trunc("farm.o").unwrap();
    for(ir_text&){ bucket |
        out&.write(bucket);
    };
    out.close();
    // TODO: get these from the lib. 
    a := SOKOL_MACOS_LINK_ARGS;
    args := libs&.get_aot_objects();
    args&.push_all(a&.items());
    args&.push_all(@slice ("farm.o", "-o", "farm.out"));    
    //args&.push("-O2");
    @println("building aot exe: %", args.items());
    success := run_cmd_blocking("clang", args.items());
    assert(success, "clang failed");
}

#include_std("backend/lib.fr");
#include_std("compiler/ast_external.fr");  
#include_std("backend/from_bc.fr");
