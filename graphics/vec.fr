Vec2 :: Vec(f32, 2);
Vec3 :: Vec(f32, 3);
Vec4 :: Vec(f32, 4);

fn Vec($T: Type, $N: i64) Type = {
    Raw  :: Array(T, N);
    Self :: @union(
        v: Raw, 
        p: (@struct(
            x: T, 
            y: @if(N >= 2, T, void),
            z: @if(N >= 3, T, void),
            w: @if(N >= 4, T, void),
        )) #use,
    );
    
    fn vec(v: []T) Self = {
        @debug_assert_eq(v.len, N);
        ptr_cast_unchecked(T, Self, v.ptr)[]
    }
    
    fn vec(v: Raw) Self     #unsafe_noop_cast;
    fn array(v: Self) Raw   #unsafe_noop_cast;
    fn vec(v: *Raw) *Self   #unsafe_noop_cast;
    fn array(v: *Self) *Raw #unsafe_noop_cast;
    
    bin_op :: fn(aa, bb, $op) => {
        out := @uninitialized Self;
        a, b, c := (aa&.array(), bb&.array(), out&.array());
        inline_range(0, N) { $i | 
            c[i] = op(a[i], b[i]); 
        };
        out
    };
    
    fn mul(a: Self, b: Self) Self = bin_op(a, b, mul);
    fn add(a: Self, b: Self) Self = bin_op(a, b, add);
    fn sub(a: Self, b: Self) Self = bin_op(a, b, sub);
    fn div(a: Self, b: Self) Self = bin_op(a, b, div);
    fn max(a: Self, b: Self) Self = bin_op(a, b, max);
    fn min(a: Self, b: Self) Self = bin_op(a, b, min);
    
    fn dot(a: Self, b: Self) T = {
        v := a * b;
        res: T = 0.0;
        inline_range(0, N) { $i | 
            res += v&[i]; 
        };
        res
    }
    
    fn splat(a: T) Self = {
        res := zeroed Self;
        inline_range(0, N) { $i | 
            res&[i] = a;
        };
        res
    }
    
    fn norm(a: Self) f32 =
        a.dot(a).sqrtf();
    
    fn normalize(a: Self) Self = 
        a / splat(a.norm());
    
    fn neg(a: Self) Self = 
        Self.zeroed() - a;
    
    fn mul(a: Self, b: f32) Self = {
        inline_range(0, N) { $i | 
            a&[i] = a&[i] * b; 
        };
        a
    }
    
    fn items(v: *Self) []T =
        v.v&.items()
    
    fn index(v: *Self, i: i64) *T =  // TODO: this should work #redirect(Ty(*Self, i64), *T); 
        v.v&.index(i);
    
    Self
}

// TODO: miscompile if inlined :CompilerBug !!!!!! :FUCKED
fn vec2(x: f32, y: f32) Vec2 #noinline = 
    (v = (x, y));

fn vec3(x: f32, y: f32, z: f32) Vec3 #noinline = 
    (v = (x, y, z));

fn vec4(x: f32, y: f32, z: f32, w: f32) Vec4 #noinline = 
    (v = (x, y, z, w));

fn vec2(splat: f32) Vec2 = (v = (splat, splat));
fn vec3(splat: f32) Vec3 = (v = (splat, splat, splat));

//
// TODO: this doesn't expand to something you can actually run yet. 
//       it only works for shader translation.   
//

fn vec(args: FatExpr) FatExpr #macro = {
    @ct_assert(args.expr&.is(.Tuple), args.loc, "@vec expected multiple arguments");
    arity := 0;
    parts := args.expr.Tuple&;
    each parts { e |
        e[] = compile_ast(e[]);
        arity += @switch(e.ty) {
            @case(f32) => 1;
            @case(f64) => 1;
            @case(Vec2) => 2;
            @case(Vec3) => 3;
            @case(Vec4) => 4;
            @default => compile_error("@vec expected floats", e.loc);
        };
    };
    ty, call := @switch(arity) {
        @case(2) => (Vec2, @literal @as(Fn(Ty(f32, f32), Vec2)) vec2);
        @case(3) => (Vec3, @literal @as(Fn(Ty(f32, f32, f32), Vec3)) vec3);
        @case(4) => (Vec4, @literal @as(Fn(Ty(f32, f32, f32, f32), Vec4)) vec4);
        @default => compile_error(@tfmt("@vec invalid arity %", arity), args.loc);
    };
    args = @{ @[call](@[args]) };
    args.ty = ty;
    args.done = true;  // lie!
    args
}

fn swizzle(args: FatExpr) FatExpr #macro = {
    @ct_assert(args.expr&.is(.FieldAccess), args.loc, "@swizzle expected `vec.xyzw`");
    it := args.expr.FieldAccess&;
    value := it.container;
    value[] = compile_ast(value[]);
    name := it.name.str();
    @ct_assert(name.len <= 4 && name.len >= 1, args.loc, "@swizzle 2/3/4 components, not %", name.len);
    
    args.ty = @switch(name.len) {
        @case(1) => f32;
        @case(2) => Vec2;
        @case(3) => Vec3;
        @case(4) => Vec4;
        @default => unreachable();
    };
    args.done = true; // lie!
    args
}
