#include_std("bindings/sokol.fr");
Sdtx :: import("@/graphics/debugtext.fr");
Sgl  :: import("@/graphics/gl.fr");
Sapp :: import("@/graphics/app.fr");
Sg :: import("@/graphics/gfx.fr");
Easy :: import("@/graphics/easy.fr");

#reexport("@/graphics/shaders.fr");
#reexport("@/graphics/vec.fr");

RenderBackend :: @enum(METAL_MACOS, METAL_IOS, METAL_SIM, D3D11, WGPU, GLCORE, GLES3); ::enum(RenderBackend);

// TODO: formalize communicating config options with the driver program 
SOKOL_BACKEND ::  @if(cli_args().contains(fn(it) => it[] == "-wgpu"), 
    RenderBackend.WGPU, RenderBackend.METAL_MACOS); // :hardcode_os

fn is_metal(b: RenderBackend) bool #fold = 
    @is(b, .METAL_MACOS, .METAL_IOS, .METAL_SIM);

fn ASSERT_NOT_HTML() void = ();
fn ASSERT_METAL() void #noinline = @debug_assert(SOKOL_BACKEND.is_metal(), "todo: non-metal");
fn ASSERT_NOT_GL() void = ();

debug_log :: eprintln;  // TODO: bring back something like SgLogger. perhaps with dynamic environment rework

DUMP_SHADERS :: false;
fn choose_shader_impl($backend: RenderBackend, shd_desc: *SgShaderDesc, $data: Type) void = {
    vv, ff := (shd_desc.vertex_func&, shd_desc.fragment_func&);
    @if(is_metal(backend)) {
        vv.entry = "main0";
        ff.entry = "main0";
    };
    vv.source = :: compile_to_shader_source(data.vs, backend, true).sym().c_str();
    ff.source = :: compile_to_shader_source(data.fs, backend, false).sym().c_str();
    if DUMP_SHADERS {
        @println("%", vv.source);
        @println("%", ff.source);
    };
}

// TODO: unify this with #include_std so it doesn't depend on working directory. 
fn include_bytes($path: Str, $expect_len: i64) []u8 #fold = {
    b := read_to_string_or_crash(ast_alloc(), path).items();
    @assert_eq(b.len, expect_len, "update % size/offsets", expect_len);
    b
}

fn pack_rgba(r: u8, g: u8, b: u8, a: u8) u32 = 
    pack_rgba(@as(i64) r.zext(), @as(i64) g.zext(), @as(i64) b.zext(), @as(i64) a.zext());
    
fn pack_rgba(r: i64, g: i64, b: i64, a: i64) u32 = 
    a.shift_left(24).bit_or(b.shift_left(16).bit_or(g.shift_left(8).bit_or(r))).trunc();

fn pack_rgba(r: f64, g: f64, b: f64, a: f64) u32 = {
    r := int(clamp(r, 0.0, 1.0) * 255.0);
    g := int(clamp(g, 0.0, 1.0) * 255.0);
    b := int(clamp(b, 0.0, 1.0) * 255.0);
    a := int(clamp(a, 0.0, 1.0) * 255.0);
    pack_rgba(r, g, b, a)
}

fn pack_rgba(r: f32, g: f32, b: f32, a: f32) u32 = 
    pack_rgba(r.cast(), g.cast(), b.cast(), a.cast());
