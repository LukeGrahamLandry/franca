// 
// Abstraction will continue until moral improves. 
// Using Dawn is a bit like if you make an electron app but then make a canvas 
// that covers you whole screen and just draw into that.
//
// This is cannibalized from various sample code for integration with glfw: 
//  wgpu: https://github.com/gfx-rs/wgpu-native/blob/afba393d99a8bc98b57b03a5ae8afa6f6eb72d17/examples/triangle/main.c
// sokol: https://github.com/floooh/sokol-samples/blob/d94da3bbb54695801eb5daf2c3ee4638305e5f0a/wgpu/wgpu_entry_swapchain.c
// This is the same idea but for app.fr (which sokol_app.h doesn't do?)
//

WGPU :: import("@/graphics/web/webgpu.fr");
GraphicsState :: @struct {
    instance: WGPU.Instance;
    surface: WGPU.Surface;
    device: WGPU.Device;
    adapter: WGPU.Adapter;
    config: WGPU.SurfaceConfiguration;
    
    depth_tex: WGPU.Texture;
    msaa_tex: WGPU.Texture;
    depth_view: WGPU.TextureView;
    msaa_view: WGPU.TextureView;
    swapchain_view: WGPU.TextureView;
    old_frame: WGPU.TextureView;
    
    noframe: bool;
};

// TODO: do i have to do anything to get logging info? 
//       wgpuDevicePushErrorScope/wgpuDevicePopErrorScope?
pre_init :: fn(sapp: *Sapp.Self) void = {
    macos: *Sapp.Macos.Impl = sapp.impl();
    layer := @objc @as(rawptr) macos.view.layer();
    web := sapp.webgpu&;
    
    web.instance = WGPU'wgpuCreateInstance(zeroed(*WGPU.InstanceDescriptor));
    
    web.surface = createSurface(web.instance, @ref @as(WGPU.SurfaceDescriptor) (
        nextInChain = (@ref @as(WGPU.SurfaceSourceMetalLayer) (
            chain = (sType = .SurfaceSourceMetalLayer),
            layer = layer,
        ))[].chain&,
    ));
    @debug_assert(!web.surface._.is_null(), "createSurface");
    
    web.instance.requestAdapter(@ref @as(WGPU.RequestAdapterOptions) (
        compatibleSurface = web.surface,
    ), (
        callback = fn(status, adapter, message, userdata1, _userdata2) void = {
            ::enum(@type status);   
            @assert(status == .Success, "requestAdapter: %", message);
            GraphicsState.ptr_from_raw(userdata1)[].adapter = adapter;
        },
        userdata1 = GraphicsState.raw_from_ptr(web),
    ));
    @debug_assert(!web.adapter._.is_null(), "we don't fuck with async here");
    
    web.adapter.requestDevice(@ref @as(WGPU.DeviceDescriptor) (
        requiredFeatureCount = 1,
        requiredFeatures = @ref WGPU.FeatureName.Depth32FloatStencil8,
        uncapturedErrorCallbackInfo = (
            callback = fn(device, kind, message, env, __) void = {
                ::enum(@type kind);
                set_dynamic_context(env);
                if kind != .NoError {
                    // TODO: nicer logging api
                    @panic("dawn says your code is bad and you should feel bad:\n %", message);
                }
            }, 
            userdata1 = get_dynamic_context(),
        ),
    ), (
        callback = fn(status, device, message, userdata1, _userdata2) void = {
            ::enum(@type status);
            @assert(status == .Success, "requestDevice: %", message);
            GraphicsState.ptr_from_raw(userdata1)[].device = device;
        },
        userdata1 = GraphicsState.raw_from_ptr(web),
    ));
    @debug_assert(!web.device._.is_null(), "we don't fuck with async here");
    
    caps := zeroed WGPU.SurfaceCapabilities;
    getCapabilities(web.surface, web.adapter, caps&);
    @debug_assert(caps.formatCount > 0 && caps.alphaModeCount > 0);
    
    // TODO: make creating a @bit_fields suck less
    usage := zeroed WGPU.TextureUsage;
    usage&.set(.RenderAttachment, 1);
    
    web.config = (
        device = web.device,
        usage = usage,
        format = caps.formats[],
        presentMode = .Fifo,
        alphaMode = caps.alphaModes[],
        width = trunc sapp.framebuffer_width,
        height = trunc sapp.framebuffer_height,
    );
    web.surface.configure(web.config&);
    
    // TODO: what about depth texture / msaa :DEPTH
}

fn get_swapchain(wgpu: *GraphicsState) SgWgpuSwapchain = (
    render_view = @if(wgpu.msaa_view._.is_null(), wgpu.swapchain_view, wgpu.msaa_view),
    resolve_view = @if(wgpu.msaa_view._.is_null(), zeroed(WGPU.TextureView), wgpu.swapchain_view),
    depth_stencil_view = wgpu.depth_view,
);

pre_frame :: fn(sapp: *Sapp.Self) void = {
    surface_tex := zeroed WGPU.SurfaceTexture;
    web := sapp.webgpu&;
    web.instance.processEvents();  // TODO: does this do anything? does it need to go at the end?
    
    web.surface.getCurrentTexture(surface_tex&);
    ::enum(@type surface_tex.status);
    if @is(surface_tex.status, .Timeout, .Outdated, .Lost) {
        panic("todo: failed surface");
        // Skip this frame, and re-configure surface.
        //if (surface_texture.texture != NULL) {
        //    wgpuTextureRelease(surface_texture.texture);
        //}
        //int width, height;
        //glfwGetWindowSize(window, &width, &height);
        //if (width != 0 && height != 0) {
        //    demo.config.width = width;
        //    demo.config.height = height;
        //    wgpuSurfaceConfigure(demo.surface, &demo.config);
        //}
        // TODO: the wgpu example skips the frame?
        return();
    };
    if !@is(surface_tex.status, .SuccessOptimal, .SuccessSuboptimal) {
        @panic("getCurrentTexture");
    };
    @debug_assert(!surface_tex.texture._.is_null());
    web.swapchain_view = createView(surface_tex.texture, zeroed(*WGPU.TextureViewDescriptor));
    release(surface_tex.texture);
    @debug_assert(!web.swapchain_view._.is_null());
}

post_frame :: fn(sapp: *Sapp.Self) void = {
    web := sapp.webgpu&;
    release(web.swapchain_view);
    web.swapchain_view = zeroed @type web.swapchain_view;
    @if(web.noframe) return();
    present(web.surface);
}

native_shutdown :: fn(sapp: *Sapp.Self) void = {
    // TODO
}

print_error :: fn(status: WGPU.PopErrorScopeStatus, kind: WGPU.ErrorType, message: Str, env: rawptr, __: rawptr) void = {
    ::enum(@type kind);
    set_dynamic_context(env);
    if kind != .NoError {
        @panic("dawn says your code is bad and you should feel bad:\n %", message);
    }
}
