//! Warning: This is extremely limited to the point of being mostly useless!
//! Eventually I want to make this a more serious target that supports a useful subset of the language. 
//! But for now I just need trivial math for debugtext/gl. 

// i guess it's socially acceptable for this to get a lot bigger
// - sokol-tools/shdc: 8k + SPIRV-Cross: 62k + glslang: 72k
// - naga: 64k
// - tint: 120k

ShaderTexture2f :: @struct();
ShaderSampler :: @struct();
fn sample(t: ShaderTexture2f, s: ShaderSampler, uv: Vec2) Vec4 #metal_method = ();
fn mul(m: Sgl.Matrix, v: Vec4) Vec4 = ();

fn Buf($T: Type) Type = {
    Self :: @struct(_: *T, ShaderBufferElement :: T);
    
    fn index(self: Self, i: u32) *T = self._.offset(i.zext());
    
    Self
}

UShort2 :: @struct(_: u32);
UByte4  :: @struct(_: u32);

// TODO: cpu implementations of these so you can run shaders on cpu as well for debugging. 
//       want to pair that with a gfx backend that does software rendering. 
//       move these to vec.fr ?
fn unpack(self: UShort2) Vec2 #builtin(.u2x16) = ();
fn unpack(self: UByte4) Vec4 #builtin(.u4x8) = ();

fn pack(u: u16, v: u16) UShort2 = 
    (_ = v.zext().shift_left(16).bit_or(u.zext()));

// This must be called at comptime!
#use("@/compiler/ast_external.fr") 
fn compile_to_shader_source(fid: FuncId, backend: RenderBackend, is_vertex: bool) Str = {
    ::enum(RenderBackend);
    ::tagged(FuncImpl);
    @assert(backend == .METAL_MACOS, "TODO: support non-metal shader languages");
    func := get_function_ast(fid, true, true, true, true);
    l := func.loc;
    @ct_assert(func.body&.is(.Normal), l, "expected normal expr function body for shader");
    expr := func.body.Normal&;
    
    self: Translate = (
        stmts = list(ast_alloc()), 
        decls = list(ast_alloc()), 
        types = init(temp()),
        uniforms_var = Var.zeroed(),
    );
    self.decls&.push_all(MSL_PRELUDE);
    
    ret_name := self&.type_name(expr.ty);
    @fmt(self.stmts&, "\n% % %(", if(is_vertex, => "vertex", => "fragment"), ret_name, "main0");
    args := func.arg.bindings&;
    if args.len > 0 {
        if args.index(0).ident() { name |
            type := args[0]&.unwrap_ty();
            ty_name := self&.type_name(type);
            if args[0].nullable_tag.is_null() {
                @fmt(self.stmts&, "% % [[stage_in]]", ty_name, name.str());
            } else {
                msl_field(self&, self.stmts&, name, type, args[0].nullable_tag);
                //@fmt(self.stmts&, "% % [[buffer(0)]]", type, name.str());
            }
        };
    }
    
    ::ptr_utils(Annotations);
    if args.len > 1 {
        type := args[1]&.unwrap_ty();
        if args[1].nullable_tag.is_null() {
            type := get_type_info_ref(type);
            @ct_assert(type.is(.Struct), func.loc, "second arg to shader entry point must be a struct");
            msl_fields(self&, self.stmts&, type.Struct&, ", ", "");
            self.uniforms_var = args[1]&.var().unwrap();
        } else {
            buf := u8.list(temp());
            name := args[1]&.ident().unwrap();
            if get_type_info_ref(type).is(.Int) {
                msl_field(self&, buf&, name, type, args[1].nullable_tag);
                self.stmts&.push_all(", "); // HACK
            } else {
                msl_field(self&, buf&, name, *type, args[1].nullable_tag);
                self.stmts&.push_all(", constant "); // HACK
            };
            self.stmts&.push_all(buf.items());
        };
    };
    
    @fmt(self.stmts&, ") {\n");
    
    result := msl_expr(self&, expr);
    @fmt(self.stmts&, "\treturn %;\n}\n", result);
    self.decls&.push_all(self.stmts.items());
    //println(self.decls.items());
    self.decls.items()
}

MSL_PRELUDE :: """
#include <metal_stdlib>
#include <simd/simd.h>
using namespace metal;
""";

Translate :: @struct(
    stmts: List(u8),
    decls: List(u8),
    types: import("@/lib/collections/map.fr")'HashMap(Type, Str),
    next_var: i64 = 0,
    uniforms_var: Var,
);

fn msl_fields(self: *Translate, buf: *List(u8), it: *get_variant_type(TypeInfo, .Struct), before: Str, after: Str) void = {
    each it.fields { f |
        push_all(buf, before);
        msl_field(self, buf, f.name, f.ty, f.nullable_tag);
        push_all(buf, after);
    };
}

fn msl_field(self: *Translate, buf: *List(u8), name: Symbol, type: Type, nullable_tag: *Annotations) void = {
    @fmt(buf, "% %", self.type_name(type), name.str());
    if !nullable_tag.is_null() {
        each nullable_tag { it |
            @fmt(buf, " [[%", it.name.str());
            if it.non_void_arg() { arg | 
                if arg.ident() { n |
                    @fmt(buf, "(%)", n.str());
                } else {
                    @ct_assert(arg.expr&.is(.Value), arg.loc, "TODO: more msl_fields #");
                    @fmt(buf, "(%)", arg.expr.Value.bytes.Small._0);
                };
            };
            push_all(buf, "]]");
        };
    };
}

fn msl_declare(self: *Translate, name: Str, info: *TypeInfo) void = {
    @match(info) {
        fn Struct(it) => {
            buf := u8.list(temp());
            msl_fields(self, buf&, it, "\t", ";\n");
            @fmt(self.decls&, "\nstruct % {\n%};\n", name, buf.items());
        }
        @default => {
            debug_log_type(current_compiler_context().intern_type(info[]));
            panic("TODO: msl_declare more types")
        };
    };
}

fn msl_expr(self: *Translate, e: *FatExpr) Str = {
    flat :: fn(e: *FatExpr) void = {
        @match(e.expr&) {
            fn Block(it) => {
                if it.body.len == 0 && it.ret_label.is_none() {
                    flat(it.result);
                    e[] = it.result[];
                }
            }
            fn Cast(it) => {
                e[] = it[][];
            }
            fn Deref(it) => {
                flat(it[]);
                @if_let(it.expr&) fn Addr(inner) => {
                    e[] = inner[][];
                };
            }
            @default => ();
        };
    };
    
    flat(e);
    @match(e.expr&) {
        fn StructLiteralP(it) => {
            v := self.declare_var(e.ty, (Some = "{}"));
            each it.bindings& { b |
                value := b.get_default().expect("value for struct literal");
                value := self.msl_expr(value);
                name  := b.ident().expect("field name for struct literal").str();
                @fmt(self.stmts&, "\t%.% = %;\n", v, name, value);
            };
            v
        }
        fn Value(it) => {
            if e.ty == f64 {
                v: f64 = bitcast(it.bytes.Small._0);
                return(@tfmt("%.0", v));  // TODO: correct fractional part
            };
            if e.ty == f32 {
                v: i64 = it.bytes.Small._0;
                v: u32 = v.trunc();
                v: f32 = v.bitcast();
                return(@tfmt("%.0", v));  // TODO: correct fractional part
            };
            if get_type_info_ref(e.ty).is(.Int) {
                v: i64 = it.bytes.Small._0;
                return(@tfmt("%", v));
            };
            if get_func_id(e) { fid |
                func := get_function_ast(fid, false, false, false, false);
                each func.annotations { a |
                    if a.name == @symbol builtin {
                        op := const_eval(BuiltinOp)(a.args);
                        ::enum(BuiltinOp);
                        return(@match(op) {
                            fn u2x16() = "unpack_unorm2x16_to_float";
                            fn u4x8() = "unpack_unorm4x8_to_float";
                            @default => panic("todo: shader builtin");
                        });
                    }
                };
                return(func.name.str());
            };
            if e.ty == void {
                return("()");  // TODO: avoid getting here
            }
            if e.ty == bool {
                return(@tfmt("%", it.bytes.Small._0 != 0));
            };
            
            debug_log_type(e.ty);
            compile_error("unhandled expression value type in shader", e.loc)
        }
        fn Deref(it) => {
            flat(it[]);
            @ct_assert(it.expr&.is(.PtrOffset), e.loc, "TODO: handle complex deref in shader translation");
            it := it.expr.PtrOffset&;
            name := it.name;
            flat(it.ptr);
            if it.ptr.expr&.is(.Addr) {
                it.ptr = it.ptr.expr.Addr;
            };
            self.field_access(it.ptr, name)
        }
        fn GetVar(it)      => str(it.name);
        fn GetNamed(it)    => str(it[]);
        fn FieldAccess(it) => self.field_access(it.container, it.name);
        fn PtrOffset(it) => {
            @ct_assert(it.ptr.ty == *Vec2 || it.ptr.ty == *Vec3 || it.ptr.ty == *Vec4, e.loc, "TODO: hack #use");
            if it.ptr.expr&.is(.Addr) {
                it.ptr = it.ptr.expr.Addr;
            };
            self.msl_expr(it.ptr)
        }
        fn Block(it) => {
            if it.ret_label { ret_label |
                if e.ty != void {
                    @fmt(self.stmts&, "\t% B__%;\n", self.type_name(e.ty), ret_label.to_index());
                }
            }
            each it.body { e |
                self.msl_stmt(e);
            };
            result := self.msl_expr(it.result);
            if it.ret_label { ret_label |
                if e.ty != void {
                    @fmt(self.stmts&, "\tB__% = %;\n", ret_label.to_index(), result);
                    result = @tfmt("B__%", ret_label.to_index());
                } else {
                    result = "";
                };
                // labeled statements are not supported in Metal
                //@fmt(self.stmts&, "BL__%:\n", ret_label.to_index());
            };
            
            result
        }
        fn Call(it) => {
            dot_call := false;
            if get_func_id(it.f) { fid |
                func := get_function_ast(fid, false, false, false, false);
                each func.annotations { a |
                    if a.name == @symbol metal_method {
                        dot_call = true;
                    };
                };
            };
            f := self.msl_expr(it.f);
            if dot_call {
                @ct_assert(it.arg.expr&.is(.Tuple), e.loc, "TODO: #metal_method with one arg");
                parts := it.arg.expr.Tuple&;
                first := self.msl_expr(parts[0]&);
                parts.len -= 1;
                parts.ptr = parts.ptr.offset(1);
                parts.cap -= 1;
                rest := self.msl_expr(it.arg);
                return(@tfmt("%.%(%)", first, f, rest));
            };
            f := @switch(f) {
                @case("vec2") => "float2";
                @case("vec3") => "float3";
                @case("vec4") => "float4";
                @default => f;
            };
            @switch(f) {
                @case("neg") => @tfmt("-%", self.msl_expr(it.arg));
                @case("add") => self.binary("+", it.arg);
                @case("sub") => self.binary("-", it.arg);
                @case("mul") => self.binary("*", it.arg);
                @case("div") => self.binary("/", it.arg);
                @case("ne") => self.binary("!=", it.arg);
                @case("eq") => self.binary("==", it.arg);
                @case("lt") => self.binary("<", it.arg);
                @case("index") => {
                    parts := it.arg.expr.Tuple&;
                    @ct_assert(it.arg.expr&.is(.Tuple) && parts.len == 2, it.arg.loc, "operator_index expected two arguments");
                    a0 := self.msl_expr(parts.index(0));
                    a1 := self.msl_expr(parts.index(1));
                    @tfmt("%[%]", a0, a1) 
                };
                @default => @tfmt("%(%)", f, self.msl_expr(it.arg));
            }
        }
        fn Tuple(it) => {
            // No outer brackets. Only allowed in as outer argument to a call.
            out := u8.list(temp());
            prefix := "";
            each it { it |
                @fmt(out&, "%%", prefix, self.msl_expr(it));
                prefix = ", ";
            };
            out.items()
        }
        fn If(it) => {
            // TODO: any zero size type not just void
            out_var := if(e.ty == void, => "", => self.declare_var(e.ty, .None));
            cond := self.msl_expr(it.cond);
            @fmt(self.stmts&, "if (%) {\n", cond);
            value := self.msl_expr(it.if_true);
            @fmt(self.stmts&, "% = %;\n} else {\n", out_var, value);
            value :=  self.msl_expr(it.if_false);
            @fmt(self.stmts&, "% = %;\n}\n", out_var, value);
            out_var
        }
        @default => {
            debug_log_ast(e[]);
            compile_error("unhandled expression type in shader", e.loc)
        };
    }
}

fn msl_stmt(self: *Translate, e: *FatStmt) void = {
    @match(e.stmt&) {
        fn Noop() => ();
        fn Eval(it) => {
            self.msl_expr(it);
        }
        fn Decl(it) => {
            name := str(it.name.Var.name);  // TODO
            t := it.default.ty;
            value := self.msl_expr(it.default&);
            @fmt(self.stmts&, "\t% % = %;\n", self.type_name(t), name, value);
        }
        fn Set(it) => {
            value := self.msl_expr(it.value&);
            place := self.msl_expr(it.place&);
            @fmt(self.stmts&, "% = %;\n", place, value);
        }
        fn DeclVarPattern(it) => {
            @ct_assert(it.binding.bindings.len == 1, e.loc, "TODO: multi-DeclVarPattern");
            self.declare_var(it.value.ty, (Some = self.msl_expr(it.value&)));
        }
        @default => {
            compile_error("unhandled stmt type in shader", e.loc);
        };
    }
}

fn declare_var(self: *Translate, ty: Type, init: ?Str) Str = {
    v := @tfmt("v%", self.next_var);
    self.next_var += 1;
    type := self.type_name(ty);
    if init { init |
        @fmt(self.stmts&, "\t% % = %;\n", type, v, init);
    } else {
        @fmt(self.stmts&, "\t% %;\n", type, v);
    };
    v
}

fn get_func_id(e: *FatExpr) ?FuncId = {
    @if_let(e.expr&) fn Value(it) => {
        info := get_type_info_ref(e.ty);
        if e.ty == FuncId || info.is(.Fn) {
            return(Some = ptr_cast_unchecked(i64, FuncId, it.bytes.Small._0&)[]);
        };
    };
    .None
}

fn field_access(self: *Translate, container: *FatExpr, name: Symbol) Str = {
    if container.expr&.is(.GetVar) && container.expr.GetVar == self.uniforms_var {
        name.str()
    } else {
        @tfmt("%.%", self.msl_expr(container), name.str())
    }
}

fn binary(self: *Translate, op: Str, arg: *FatExpr) Str = {
    parts := arg.expr.Tuple&;
    @ct_assert(arg.expr&.is(.Tuple) && parts.len == 2, arg.loc, "operator % expected two arguments", op);
    a0 := self.msl_expr(parts.index(0));
    a1 := self.msl_expr(parts.index(1));
    @tfmt("(% % %)", a0, op, a1)
}

fn type_name(self: *Translate, type: Type) Str = {
    @switch(type) {
        @case(f32)  => "float";
        @case(f64)  => "float";  // double is not supported in metal. TODO: maybe we should make this a hard error
        @case(i32)  => "int";
        @case(u32)  => "unsigned int";
        @case(i64)  => "long";
        @case(bool)  => "bool";
        @case(Vec2) => "float2";
        @case(Vec3) => "float3";
        @case(Vec4) => "float4";
        @case(Sgl.Matrix) => "float4x4";
        @case(ShaderTexture2f) => "texture2d<float>";
        @case(ShaderSampler) => "sampler";
        @case(UShort2) => "unsigned int";
        @case(UByte4) => "unsigned int";
        @default => {
            info := get_type_info_ref(type);
            if type.has_const_field(@symbol ShaderBufferElement) {
                T := get_constant(Type, Type.scope_of(type), @symbol ShaderBufferElement).unwrap();
                return(@tfmt("device %*", self.type_name(T)));
            }
            @if_let(info) fn Ptr(inner) => {
                return(@tfmt("%&", self.type_name(inner[])));
            };
            ::?Str;
            or self.types&.get(type) {
                name := @tfmt("T%", self.next_var);
                self.next_var += 1;
                self.msl_declare(name, get_type_info_ref(type));
                self.types&.insert(type, name);
                name
            }
        };
    }
}

// TODO: use these. 
//       it feels a bit silly to convert my ast -> basically my own ast again 
//       but otherwise it's so painful to do multiple backends 
//       and i think i want to try switching the source from being ast to ir at some point. 
//

Ast :: @rec @tagged(
    GetBuiltin: BuiltinProperty,
    Op: @struct(op: BuiltinOp, args: []Ast),
    Call: @struct(callee: FuncId, args: []Ast),
    Constant: @struct(type: *SType, bits: i64),
    If: @struct(cond: *Ast, true: *Ast, false: *Ast),
    Set: @struct(place: *Ast, value: *Ast),
    Field: @struct(place: *Ast, n: u32),
    Loop: @struct(body: *Ast),
    Block: []Ast,
    Nop,
    Var: u32,
    Break,
    Continue,
    Return: *Ast,
);

BuiltinProperty :: @enum(
    position,
    point_size,
    vertex_index,
    color, 
);

BuiltinOp :: @enum(
    add, sub, mul, div, 
    and, or, not, 
    bit_and, bit_or, bit_not, 
    neg, 
    eq, ne, lt, gt, le, ge, 
    sample, 
    vec2, vec3, vec4,
    addr_of, load,
    fract, abs, mix, clamp, min, max,
    u2x16, u4x8,
);

SType :: @tagged(
    Scalar: Scalar, 
    Vector: @struct(inner: Scalar, len: u32),
    Matrix: @struct(inner: Scalar, col: u32, row: u32),
    Texture,
    Sampler,
    Struct: @struct(fields: []SField),
);

SField :: @struct(
    name: Symbol,
    type: *SType,
);

Scalar :: @enum(I32, F32, Bool);

IoField :: @struct(
    var: u32,
    type: *SType,
    name: Symbol,
    builtin: BuiltinProperty,
);

Function :: @struct(
    input: []IoField,
    output: []IoField,
    bindings: []IoField,
    uniforms: []IoField,
    body: *Ast,
    vars: List(*SType),
);

//
// - bindings are an apply_bindings call. no repr as bytes. texture/sampler/buffer resources
// - uniforms are an apply_uniforms call. repr must match on gpu/gpu. flat blob of bytes. 
//   vertex and fragment can each have thier own uniforms and you tell them appart by binding index. 
// - vertex inputs are in a buffer. repr must match on gpu/gpu, but some are synthisized like vertex_id. 
//   not a flat blob of bytes, the api needs you to tell it the fields. 
// - vertex outputs match fragment inputs except for builtins like position. 
//   msl/wgsl tag the matching fields with location indices
// - fragment output is just a colour
// 
