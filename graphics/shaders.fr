//! Warning: This is extremely limited to the point of being mostly useless!
//! Eventually I want to make this a more serious target that supports a useful subset of the language. 
//! But for now I just need trivial math for debugtext/gl. 
//  (can't even do casts, loops, or function definitions)
//
// :UGLY this is not something i would be proud of if it was the only thing i was doing. 
//       seems like a problem. 
// - my @swizzle syntax is garbage
//

//
// Types/Intrinsics in the shader langauges
//
// TODO: cpu implementations of these so you can run shaders on cpu as well for debugging. 
//       want to pair that with a gfx backend that does software rendering. 
//       move these to vec.fr ?
//

ShaderTexture2f :: @struct();
ShaderSampler :: @struct();
fn sample(t: ShaderTexture2f, s: ShaderSampler, uv: Vec2) Vec4 #metal_method = ();
fn mul(m: Sgl.Matrix, v: Vec4) Vec4 = ();

fract :: fn(a: Vec3) Vec3 = (); 
fn abs(a: Vec3) Vec3 = ();
fn mix(a: Vec3, b: Vec3, c: f32) Vec3 = ();
fn clamp(a: Vec3, b: Vec3, c: Vec3) Vec3 = ();

fn Buf($T: Type) Type = {
    Self :: @struct(_: *T, ShaderBufferElement :: T);
    
    fn index(self: Self, i: u32) *T = self._.offset(i.zext());
    
    Self
}

UShort2 :: @struct(_: u32);
UByte4  :: @struct(_: u32);

fn unpack(self: UShort2) Vec2 #builtin(.u2x16) = ();
fn unpack(self: UByte4) Vec4 #builtin(.u4x8) = ();

fn pack(u: u16, v: u16) UShort2 = 
    (_ = v.zext().shift_left(16).bit_or(u.zext()));

//
// Convert a Franca function into my shader IR. 
//

DUMP_SHADERS :: false;
fn choose_shader_impl($backend: RenderBackend, shd_desc: *Sg.ShaderDesc, $data: Type) void = {
    vv, ff := (shd_desc.vertex_func&, shd_desc.fragment_func&);
    @if(is_metal(backend)) {
        vv.entry = "main0";
        ff.entry = "main0";
    };
    vv.source = :: compile_to_shader_source(data.vs, backend, true).sym().c_str();
    ff.source = :: compile_to_shader_source(data.fs, backend, false).sym().c_str();
    if DUMP_SHADERS {
        @println("%", vv.source);
        @println("%", ff.source);
    };
}

// This must be called at comptime!
#use("@/compiler/ast_external.fr") 
fn compile_to_shader_source(fid: FuncId, backend: RenderBackend, is_vertex: bool) Str = {
    ::enum(RenderBackend);
    ::tagged(FuncImpl);
    ::AutoHash(VarId, TrivialHasher); ::AutoEq(VarId);
    fr := current_compiler_context();
    func := get_function_ast(fid, true, true, true, true);
    l := func.loc;
    
    a := ast_alloc();
    self: Function = (
        input = list(a),
        body = list(a),
        types = list(a),
        type_lookup = init(a),
        locals = init(a),
        stage = @if(is_vertex, .VERTEX, .FRAGMENT),
        name = @if(SOKOL_BACKEND == .METAL_MACOS, @symbol main0, @symbol main),
        ret = 0,
        gpa = a,
    ); self := self&;
    
    // so we can use 0 as a placeholder 
    self.types&.push(.Void);
    self.body&.push(op = .Nop);
    
    ::enum(AstOp); ::enum(Scalar); ::tagged(SType); ::enum(BuiltinProperty);
    
    args := func.arg.bindings&;
    each args { a |
        @debug_assert(a.ty&.is(.Finished));
        @debug_assert(a.name&.is(.Var));
        self.locals&.insert(a.name.Var.id, self.body.len.trunc());
        self.body&.push(op = .Nop); // .Par, type = self.type_name(a.ty.Finished));
        
        @ct_assert(!a.nullable_tag.is_null(), a.default.loc, "unannotated shader input");
        info: IoField = (name = a.name.Var.name, type = self.type_name(a.ty.Finished));
        set_annotations(info&, a.nullable_tag.items());
        self.input&.push(info);
    };
    
    @ct_assert(func.body&.is(.Normal), l, "expected normal expr function body for shader");
    e := func.body.Normal&;
    self.ret = self.type_name(e.ty);
    
    self.translate(e);
    
    out := u8.list(self.gpa);
    @match(backend) {
        fn METAL_MACOS() => import("@/graphics/macos/shaders.fr")'emit_all(self, out&);
        fn WGPU() => import("@/graphics/web/shaders.fr")'emit_all(self, out&);
        @default => @panic("TODO: support non-metal shader languages");
    }
    
    out.items()
}

fn set_annotations(info: *IoField, annotations: []Annotation) void = {
    each annotations { it |
        @switch(it.name) {
            @case(@symbol uniform) => {
                info.buffer = const_eval(u8)(it.args);
                info.uniform = true;
            };
            @case(@symbol buffer) => {
                info.buffer = const_eval(u8)(it.args);
            };
            @case(@symbol vertex_id) => {
                info.builtin = .vertex_index;
            };
            @case(@symbol position) => {
                info.builtin = .position;
            };
            @case(@symbol input) => {
                info.builtin = .input;
            };
            @case(@symbol user) => {
                info.builtin = .user;
            };
            @case(@symbol colour) => {
                info.builtin = .colour;
            };
            @case(@symbol point_size) => {
                info.builtin = .point_size;
            };
            @case(@symbol bind) => ();
            @default => @println("unknown shader annotation: %", it.name.str());
        }
    };
}

fn translate(self: *Function, e: *FatExpr) void = {
    @if(DUMP_SHADERS) debug_log_ast(e[]);
    result := self.msl_expr(e);
    @if(e.ty != void) self.body&.push(op = .Return, a = result);
    self.body&.push(op = .End);
    @debug_assert(self.body.len < MAX_u32 && self.types.len < MAX_u16, "index overflow in shader ir");
}

#use("@/lib/collections/map.fr");

fn msl_expr(self: *Function, e: *FatExpr) u32 = {
    x := self.msl_expr2(e);
    @assert(x < self.body.len.trunc());
    x
}

fn msl_expr2(self: *Function, e: *FatExpr) u32 = {
    fr := current_compiler_context();
    e_type := self.type_name(e.ty);
    flat(e);
    @match(e.expr&) {
        fn StructLiteralP(it) => {
            place: u32 = self.body.len.trunc();
            self.body&.push(op = .Join, type = e_type);
            each it.bindings& { b |
                value := b.get_default().expect("value for struct literal");
                value := self.msl_expr(value);
                name  := b.ident().expect("field name for struct literal");
                self.body&.push(op = .SetVarField, a = place, b = value, c = name.id());
            };
            place
        }
        fn Value(it) => {
            op := AstOp.Constant;
            bits: u32 = @if_else {
                @if(e.ty == f64) => {
                    // TODO: maybe trying to use doubles should be a hard error
                    v: f64 = bitcast(it.bytes.Small._0);
                    v: f32 = v.cast();
                    v.bitcast()
                };
                @if(e.ty == f32) => it.bytes.Small._0.trunc();
                @if(get_type_info_ref(e.ty).is(.Int) || e.ty == bool) => {
                    it.bytes.Small._0.trunc()
                };
                @if(e.ty == void) => {
                    // TODO: avoid getting here
                    op = .Nop;
                    0
                }
                @else => {
                    debug_log_type(e.ty);
                    compile_error("unhandled expression value type in shader", e.loc)
                };
            }; 
            
            self.body&.push(op = op, a = bits, type = e_type);
            trunc(self.body.len - 1)
        }
        fn GetVar(it)      => self.locals&.get(it.id).unwrap();
        fn GetNamed(it)    => compile_error(@tfmt("undeclared variable %", it[].str()), e.loc);
        fn FieldAccess(it) => self.field_access(it.container, e.ty, it.name);
        fn PtrOffset(it) => {
        // THIS IS ALL A GARBAGE WASTE OF TIME
            @ct_assert(it.ptr.ty == *Vec2 || it.ptr.ty == *Vec3 || it.ptr.ty == *Vec4, e.loc, "TODO: hack #use");
            if it.ptr.expr&.is(.Addr) {
                it.ptr = it.ptr.expr.Addr;
            };
            // TODO
            self.msl_expr(it.ptr)
        }
        fn Deref(_) => {
            ptr, name := e.as_deref_field().expect("a&.b[]");
            self.field_access(ptr, e.ty, name)
        }
        fn Block(it) => {
            // TODO: ret_label
            each it.body { e |
                self.msl_stmt(e);
            };
            self.msl_expr(it.result)
        }
        fn Call(it) => {
            args_e := it.arg.items();
            args := self.gpa.alloc(u32, args_e.len);
            enumerate args_e { i, e |
                args[i] = self.msl_expr(e);
            };
            
            fid := fr.assert_get_func_id(it.f);
            func := fr.get_function(fid);
            ::enum(AstOp);

            // TODO: need to be more structured about this because what if you have user declared overloads of these. 
            names := @const_slice(
                "vec2", "vec3", "vec4", "neg", "add", "sub", "mul", "div", 
                "eq", "ne", "lt", "gt", "le", "ge", "index", "bit_or", "bit_and", "bit_not",
                "not", "sample", "clamp", "min", "max", "fract", "abs", "mix",
            );
            if names.contains(func.name.str()) {
                op := AstOp.from_name(func.name.str());
                return(self.emit_builtin(op.unwrap(), args, e_type));
            }

            each func.annotations { a |
                if a.name == @symbol builtin {
                    op := const_eval(AstOp)(a.args);
                    return(self.emit_builtin(op, args, e_type));
                }
            }
            
            // not a builtin -> user defined function
            debug_log_func(func);
            panic("TODO: implement user functions in shader translation.");
            for args { a |
                self.body&.push(op = .Arg, a = a);
            };
            self.body&.push(op = .Call, a = fid.to_index(), type = e_type);
            trunc(self.body.len - 1)
        }
        fn Tuple(it) => {
            each it { it |
                @ct_assert(it.ty == void, e.loc, "TODO: shader tuple");
                _ := self.msl_expr(it);
            };
            0
        }
        fn If(it) => {
            join: u32 = trunc @if(e_type == 0, 0, self.body.len);
            if(join != 0, => self.body&.push(op = .Join, type = e_type));
            
            cond := self.msl_expr(it.cond);
            self.body&.push(op = .If, a = cond);
            value := self.msl_expr(it.if_true);
            if(join != 0, => self.body&.push(op = .SetVar, a = join, b = value));
            self.body&.push(op = .Else);
            value := self.msl_expr(it.if_false);
            if(join != 0, => self.body&.push(op = .SetVar, a = join, b = value));
            self.body&.push(op = .End);
            
            return join;
        }
        fn Addr(it) => {
            panic("Addr expor")
        }
        @default => {
            debug_log_ast(e[]);
            compile_error("unhandled expression type in shader", e.loc)
        };
    }
}

fn flat(e: *FatExpr) void = {
    @match(e.expr&) {
        fn Block(it) => {
            if it.body.len == 0 && it.ret_label.is_none() {
                flat(it.result);
                e[] = it.result[];
            }
        }
        fn Cast(it) => {
            e[] = it[][];
        }
        fn Deref(it) => {
            flat(it[]);
            @if_let(it.expr&) fn Addr(inner) => {
                e[] = inner[][];
            };
        }
        @default => ();
    };
};

fn as_deref_field(e: *FatExpr) ?Ty(*FatExpr, Symbol) = {
    if(!e.expr&.is(.Deref), => return(.None));
    it := e.expr.Deref;
    // THIS IS ALL A GARBAGE WASTE OF TIME
    flat(it);
    if(!it.expr&.is(.PtrOffset), => return(.None));
    //@ct_assert(it.expr&.is(.PtrOffset), e.loc, "TODO: handle complex deref in shader translation");
    it := it.expr.PtrOffset&;
    name := it.name;
    flat(it.ptr);
    if it.ptr.expr&.is(.PtrOffset) && is_vec(it.ptr.expr.PtrOffset.ptr.ty) {
        it.ptr = it.ptr.expr.PtrOffset.ptr;
    };
    if it.ptr.expr&.is(.Addr) {
        t := Deref(it.ptr.ty);
        it.ptr = it.ptr.expr.Addr;
        it.ptr.ty = t;
    };
    (Some = (it.ptr, name))
}

fn is_vec(t: Type) bool = 
    t == *Vec2 || t == *Vec3 || t == *Vec4 || t == Vec2 || t == Vec3 || t == Vec4;

fn field_access(self: *Function, e: *FatExpr, f_type: Type, name: Symbol) u32 = {
    if is_vec(e.ty) {
        place := self.msl_expr(e);
        self.body&.push(op = .Swizzle, a = place, b = swizzle_bits(name), type = self.type_name(f_type));
    } else {
        if as_var_place(e) { e |
            place := self.place_expr(e);
            self.body&.push(op = .GetVarField, a = place, b = name.id(), type = self.type_name(f_type));
        } else {
            place := self.place_expr(e);
            self.body&.push(op = .GetField, a = place, b = name.id(), type = self.type_name(f_type));
        }
    };
    trunc(self.body.len - 1)
}

fn emit_builtin(self: *Function, f: AstOp, args: []u32, e_type: u16) u32 = {
    if f == .vec4 { // args.len > 3 {
        for args { a |
            self.body&.push(op = .Arg, a = a);
        };
    }
    self.body&.push(
        op = f, 
        type = e_type, 
        a = @if(args.len >= 1, args[0], 0),
        b = @if(args.len >= 2, args[1], 0), 
        c = @if(args.len >= 3, args[2], 0),
    );
    trunc(self.body.len - 1)
} 

fn msl_stmt(self: *Function, e: *FatStmt) void = {
    @match(e.stmt&) {
        fn Noop() => ();
        fn Eval(it) => {
            _ := self.msl_expr(it);
        }
        fn Decl(it) => {
            result := self.msl_expr(it.default&);
            @debug_assert(it.name&.is(.Var));
            
            @debug_assert(it.ty&.is(.Finished));
            if it.ty.Finished != void {
                self.locals&.insert(it.name.Var.id, result);
            };
        }
        fn Set(it) => {
        // THIS IS ALL A GARBAGE WASTE OF TIME
            if it.place&.as_field_access() { ptr, name |
                if is_vec(ptr.ty) {
                    //panic("Aa");
                    //ptr = ptr.
                }
                if ptr.as_var_place() { place |
                    place := self.msl_expr(place);
                    value := self.msl_expr(it.value&);
                    self.body&.push(op = .SetVarField, a = place, b = value, c = name.id());
                    return()
                }
            };
            
            if it.place&.as_var_place() { place |
                place := self.msl_expr(place);
                value := self.msl_expr(it.value&);
                self.body&.push(op = .SetVar, a = place, b = value);
            } else {
                place := self.place_expr(it.place&);
                value := self.msl_expr(it.value&);
                self.body&.push(op = .SetDeref, a = place, b = value);
            }
        }
        fn DeclVarPattern(it) => {
            @ct_assert(it.binding.bindings.len == 1, e.loc, "TODO: multi-DeclVarPattern");
            result := self.msl_expr(it.value&);
            if it.value.ty != void {
                name := it.binding.bindings[0].name;
                @debug_assert(name&.is(.Var));
                self.locals&.insert(name.Var.id, result);
            }
        }
        @default => {
            compile_error("unhandled stmt type in shader", e.loc);
        };
    };
}

fn assert_get_func_id(fr: CompCtx, e: *FatExpr) FuncId = {
    @ct_assert(e.expr&.is(.Value), e.loc, "Callee must be const-known in shader translation");
    info := fr.get_type(e.ty);
    @ct_assert(e.ty == FuncId || info.is(.Fn), e.loc, "invalid callee type");
    fid: FuncId = e.expr.Value.bytes.Small._0.from_index();
    fid
}

fn place_expr(self: *Function, e: *FatExpr) u32 = {
// THIS IS ALL A GARBAGE WASTE OF TIME
    if e.as_field_access() { ptr, name |
        place := self.place_expr(ptr);
        self.body&.push(
            op = .AddrField, 
            a = place, 
            b = name.id(), 
            type = self.type_name(e.ty),
        );
        return self.body.len.sub(1).trunc();
    };
    
    @match(e.expr) {
        fn GetVar(it) => {
            v := self.msl_expr(e);
            return v;
            // TODO
            //t := self.type_name(e.ty);
            //@debug_assert(t != 0, "void var??????? %", it.name.str());
            //self.body&.push(op = .AddrOf, a = v, type = t);
            //return self.body.len.sub(1).trunc();  // TODO: it type checks without this line ??? :CompilerBug :FUCKED
        };
        fn Deref(it)  => self.msl_expr(e);
        fn Addr(it) => {
            v := self.msl_expr(it);
            return v; 
            // TODO
            //self.body&.push(op = .AddrOf, a = v, type = self.type_name(e.ty));
            //self.body.len.sub(1).trunc()
        };
        fn Call(it) => {
            fr := current_compiler_context();
            fid := fr.assert_get_func_id(it.f);
            func := fr.get_function(fid);
            // TODO: don't just assume by name like this 🤡 
            @ct_assert(func.name == @symbol index, e.loc, "TODO: call in place expr in shader");
            args := it.arg.items();
            place := self.msl_expr(args.index(0));
            value := self.msl_expr(args.index(1));
            self.body&.push(op = .Index, a = place, b = value, type = self.type_name(e.ty));
            return self.body.len.sub(1).trunc();
        }
        @default => {
            debug_log_ast(e[]);
            compile_error("TODO: place expr in shader", e.loc)
        };
    }
}

fn as_field_access(e: *FatExpr) ?Ty(*FatExpr, Symbol) = {
    @match(e.expr&) {
        fn FieldAccess(it) => (Some = (it.container, it.name));
        fn PtrOffset(it) => (Some = (it.ptr, it.name));
        fn Deref() => as_deref_field(e);
        @default => .None;
    }
}

fn as_var_place(e: *FatExpr) ?*FatExpr = {
    if(e.expr&.is(.GetVar), => return(Some = e));
    if(!e.expr&.is(.Deref), => return(.None));
    e := e.expr.Deref;
    if(!e.expr&.is(.Addr), => return(.None));
    e := e.expr.Addr;
    if(!e.expr&.is(.GetVar), => return(.None));
    (Some = e)
}

fn type_name(self: *Function, type: Type) u16 = {
    if self.type_lookup&.get(type) { it |
        return(it);
    };
    s_info: SType = @switch(type) {
        @case(f32)  => (Scalar = .F32);
        @case(f64)  => (Scalar = .F32);  // double is not supported in metal. TODO: maybe we should make this a hard error
        @case(i32)  => (Scalar = .I32);
        @case(u32)  => (Scalar = .U32);
        @case(i64)  => (Scalar = .I32);  // ^
        @case(bool) => (Scalar = .Bool);
        @case(Vec2) => (Vector = (inner = .F32, len = 2));
        @case(Vec3) => (Vector = (inner = .F32, len = 3));
        @case(Vec4) => (Vector = (inner = .F32, len = 4));
        @case(Sgl.Matrix)      => (Matrix = (inner = .F32, row = 4, col = 4));
        @case(ShaderTexture2f) => .Texture;
        @case(ShaderSampler)   => .Sampler;
        @case(UShort2) => (Scalar = .I32);
        @case(UByte4)  => (Scalar = .I32);
        @default => {
            info := get_type_info_ref(type);
            @if_else {
                @if(type.has_const_field(@symbol ShaderBufferElement)) => {
                    T := get_constant(Type, Type.scope_of(type), @symbol ShaderBufferElement).unwrap();
                    (Ptr = self.type_name(T))
                }
                @if(info.is(.Ptr)) => (Ptr = self.type_name(info.Ptr));
                @if(info.is(.Struct)) => {
                    fs := info.Struct.fields;
                    out := IoField.list(fs.len, self.gpa);
                    each fs { f |
                        info: IoField = (name = f.name, type = self.type_name(f.ty));
                        if !f.nullable_tag.is_null() {
                            set_annotations(info&, f.nullable_tag.items());
                        }
                        out&.push(info);
                    };
                    (Struct = (fields = out.items()))
                };
                @if(size_of(type) == 0) => return(0);
                @else => @panic("TODO: handle % in shader translation", type.typename().str());
            }
        };
    };

    i: u16 = self.types.len.trunc();
    self.types&.push(s_info);
    self.type_lookup&.insert(type, i);
    i
}

fn swizzle_bits(s: Symbol) u32 = {
    s := s.str();
    
    res := 0;
    @assert_le(s.len, 4, "invalid swizzle size");
    for s { c |
        res = res.shift_left(8);
        i := "xr".contains(c).int() + "yg".contains(c).int()*2 + "zb".contains(c).int()*4 + "wa".contains(c).int()*8;
        if i == 0 {
            @panic("invalid vector component %", c);
        }
        res += i;
    };
    res.trunc()
}

// 
// Flat IR that can be rendered into shader programs for each backend. 
//

Ast :: @struct(op: AstOp, type: u16 = 0, a: u32 = 0, b: u32 = 0, c: u32 = 0);

AstOp :: @enum(u16) (
    ParBuiltin,  // (BuiltinProperty)
    Par,
    Arg, // (val)
    Call, // (FuncId)
    Constant, // (bits)
    SetDeref, // (place addr, value)
    Field, // (place, n)
    Swizzle, // (place, xyzw bitset)
    Loop,
    If, // (cond)
    Else, 
    End,
    Nop,
    GetVar, // (var) // needed when accessing mutable variables that might change before used
    Break, 
    Continue, 
    Return, // (val)
    Join,  // placeholder to declare a var that will be filled in by later instructions
    SetVar, // (place, value)
    Deref, // (place)
    SetVarField,  // (var, value, Symbol)
    AddrField, // (place, Symbol)
    GetField, // 
    GetVarField,
    AddrOf,  // (var)
    Index,

    neg, not, bit_not, 
    fract, abs,
    addr_of, load,
    u2x16, u4x8,
    
    vec2, 
    add, sub, mul, div, 
    and, or,
    bit_and, bit_or,
    eq, ne, lt, gt, le, ge, 
    min, max,
    
    vec3, 
    sample, mix, clamp, 
    
    vec4,
);

BuiltinProperty :: @enum(u32) (
    none,
    position,
    point_size,
    vertex_index,
    colour, 
    input,
    user,
);

SType :: @tagged(
    Void: void,
    Scalar: Scalar, 
    Vector: @struct(inner: Scalar, len: u8),
    Matrix: @struct(inner: Scalar, col: u8, row: u8),
    Texture,
    Sampler,
    Struct: @struct(fields: []IoField),
    Ptr: u16,
);

IoField :: @struct(
    name: Symbol,
    builtin := BuiltinProperty.none,
    type: u16,
    buffer: u8 = 255,
    uniform := false,
);

Scalar :: @enum(u8) (I32, U32, F32, Bool);

// TODO: don't be lazy used typed indices
Function :: @struct(
    input: List(IoField),
    body: List(Ast),  // 0 is nop // S
    types: List(SType),  // 0 is void // T
    type_lookup: HashMap(Type, u16),
    locals: HashMap(VarId, u32), // V -> S
    stage: Sg.ShaderStage,
    name: Symbol,
    ret: u16, // T
    gpa: Alloc,
);

//
// - bindings are an apply_bindings call. no repr as bytes. texture/sampler/buffer resources
// - uniforms are an apply_uniforms call. repr must match on gpu/gpu. flat blob of bytes. 
//   vertex and fragment can each have thier own uniforms and you tell them appart by binding index. 
// - vertex inputs are in a buffer. repr must match on gpu/gpu, but some are synthisized like vertex_id. 
//   not a flat blob of bytes, the api needs you to tell it the fields. 
// - vertex outputs match fragment inputs except for builtins like position. 
//   msl/wgsl tag the matching fields with location indices
// - fragment output is just a colour
// 
