//! Simple ASCII debug text rendering on top of sokol_gfx.h
//! Adapted from sokol_debugtext.h - https://github.com/floooh/sokol
//! zlib/libpng license. Copyright (c) 2020 Andre Weissflog.
// 
// Changes from Sokol:
// - remove printf-like functions. i don't like c-style varargs. can use @fmt into a temp buffer instead.
// - remove getters/setters for ctx's pos/color.
// - remove global _sdtx and context pool. instead pass the context explicitly to every call. 
//   (caller manages the memory for the contexts but maybe that's annoying, idk)
// - remove byte array clutter. load font data from readable string. 
// - removed the 8 font limit
//
// For serious programs you probably want to bring your own (perhaps more curvy) 
// text rendering system but it's very convenient to be able to just put stuff on 
// the screen if you want to quickly look at some values that change every frame. 
// 
// TODO: some sort of centralized logging system when returning an error. 
//       (stick it in the dynamic environment and use it elsewhere as well)
//

Sg :: import("@/graphics/gfx.fr");

init_cookie :: 0xACBAABCB;  // purposely different from the c version

/* Describes the initialization parameters of a rendering context. Creating
* additional rendering contexts is useful if you want to render in
* different sokol-gfx rendering passes, or when rendering several layers
* of text. */
ContextDesc :: @struct(
    max_commands:  i32 = 4096,              // max number of draw commands, each layer transition counts as a command
    char_buf_size: i32 = 4096,              // max number of characters rendered in one frame
    canvas_width:  f32 = 640.0,             // the initial virtual canvas width
    canvas_height: f32 = 400.0,             // the initial virtual canvas height
    tab_width:     i32 = 4,                 // tab width in number of characters
    color_format := SgPixelFormat.zeroed(), // color pixel format of target render pass
    depth_format := SgPixelFormat.zeroed(), // depth pixel format of target render pass
    sample_count:  i32 = 0,                 // MSAA sample count of target render pass
);

Desc :: @struct(
    fonts: [][]u8, // packed font data (see data/fonts.fr for builtins)
    context: ContextDesc = (),  // the default context creation parameters
    allocator: Alloc,
    sg: *Sg.Self,
);

// Builtin fonts (you can provide your own as well).
font :: import("@/graphics/data/fonts.fr");

/* bits       PACKED FONT DATA FORMAT
7 6 5 4 3 2 1 0
. . . X X . . .     byte 0: 0x18
. . X X X X . .     byte 1: 0x3C
. X X . . X X .     byte 2: 0x66
. X X . . X X .     byte 3: 0x66
. X X X X X X .     byte 4: 0x7E
. X X . . X X .     byte 5: 0x66
. X X . . X X .     byte 6: 0x66
. . . . . . . .     byte 7: 0x00 */

Float2  :: @struct(x: f32, y: f32);
Vertex  :: @struct(x: f32, y: f32, u: u16, v: u16, color: u32);
Command :: @struct(layer_id: i32, first_vertex: i32, num_vertices: i32);

// Set pos/origin/color/font to whatever you like before calling `put` to control how those characters are drawn. 
Context :: @struct(
    common: *Self,
    desc: ContextDesc,
    frame_id: u32,
    update_frame_id: u32,
    vertices: RawList(Vertex),
    commands: RawList(Command),
    vbuf: Sg.Buffer,
    pip: Sg.Pipeline,
    font: i32,                // index into the fonts array
    cur_layer_id: i32,        // call set_layer instead of changing this directly (it needs to do some command buffer bookkeeping). 
    glyph_size: Float2,  // pixels per character grid unit
    // origin looks useless because you could just offset all coordinates yourself, 
    // but it allows you to control what happens when a new line or line feed control character sets pos.x = 0;
    origin: Float2,      // in character grid coordinates
    pos: Float2,         // in character grid coordinates
    tab_width: f32,
    color: u32,               // 0xAABBGGRR
);
Self :: @rec @struct(
    init_cookie: u32,
    desc:     Desc,
    font_img: Sg.Image,
    font_smp: Sg.Sampler,
    shader:   Sg.Shader,
    // This is not special. It's just some storage you can use to avoid an 
    // extra allocation in the simple case where you only want a single context. 
    default_context: Context,
    font_count: i64,  // This can't change dynamically because they're baked into a gpu texture in setup()
    sg: *Sg.Self,
);

Shaders :: @struct(
    InV  :: @struct(position: Vec2 #attribute(0), texcoord0: Vec2 #attribute(1), color0: Vec4 #attribute(2)),
    OutV :: @struct(uv: Vec2 #user(locn0), color: Vec4 #user(locn1), pos: Vec4 #position),
    vs   :: fn(in: Shaders.InV) Shaders.OutV = (
        pos = @vec(in.position * (@vec(2.0, -2.0)) + @vec(-1.0, 1.0), 0.0, 1.0),
        uv = in.texcoord0,
        color = in.color0,
    ),
    InF  :: @struct(uv: Vec2 #user(locn0), color: Vec4 #user(locn1)),
    OutF :: @struct(frag_color: Vec4 #color(0)),
    UniF :: @struct(tex: ShaderTexture2f #texture(0), smp: ShaderSampler #sampler(0)),
    fs   :: fn(in: Shaders.InF, uni: Shaders.UniF) Shaders.OutF = (
        frag_color = @swizzle sample(uni.tex, uni.smp, in.uv).xxxx * in.color,
    ),
);

// fills in an empty `ctx` based on settings from `in_desc`.
// ERRORS: if add_commit_listener fails (returns false and text will not be rendered).
fn init_context(sdtx: *Self, ctx: *Context, in_desc: *ContextDesc) bool = {
    sdtx.sg.push_debug_group("sokol-debugtext");
    ctx.desc = in_desc[];
    ctx.common = sdtx;
    a := sdtx.desc.allocator;
    // NOTE: frame_id must be non-zero, so that updates trigger in first frame
    ctx.frame_id = 1;

    ctx.vertices = init(a, 6 * ctx.desc.char_buf_size.zext());
    ctx.commands = init(a, ctx.desc.max_commands.zext());
    set_layer(ctx, 0);

    ctx.vbuf = sdtx.sg.make(
        size = ctx.vertices.cap * size_of(Vertex),
        type = .VERTEXBUFFER,
        usage = .STREAM,
        label = "sdtx-vbuf",
    );
    @debug_assert(ctx.vbuf.id != 0);

    pip_desc: SgPipelineDesc = ();
    pip_desc.layout.buffers&[0].stride = size_of(Vertex);
    pip_desc.layout.attrs&[0].format = .FLOAT2;
    pip_desc.layout.attrs&[1].format = .USHORT2N;
    pip_desc.layout.attrs&[2].format = .UBYTE4N;
    pip_desc.shader = sdtx.shader;
    pip_desc.index_type = .NONE;
    pip_desc.sample_count = ctx.desc.sample_count;
    pip_desc.depth.pixel_format = ctx.desc.depth_format;
    pip_desc.colors&[0] = (
        pixel_format = ctx.desc.color_format,
        blend = (
            enabled = true,
            src_factor_rgb   = .SRC_ALPHA,
            dst_factor_rgb   = .ONE_MINUS_SRC_ALPHA,
            src_factor_alpha = .ONE,
            dst_factor_alpha = .ZERO,
        ),
    );
    pip_desc.label = "sdtx-pipeline";
    ctx.pip = sdtx.sg.make(pip_desc);
    @debug_assert(ctx.pip.id != 0);

    ctx.glyph_size.x = 8.0 / ctx.desc.canvas_width;
    ctx.glyph_size.y = 8.0 / ctx.desc.canvas_height;
    ctx.tab_width = ctx.desc.tab_width.intcast().float().cast();
    ctx.color = 0xFF00FFFF;

    ok := sdtx.sg.add_commit_listener(make_commit_listener(ctx));
    sdtx.sg.pop_debug_group();
    ok
}

// Releases the resources owned by this context. 
// You are still responsible for cleaning up the memory holding the Context struct itself. 
fn destroy(ctx: *Context) void = {
    if !ctx.vertices.ptr.is_null() {
        drop(ctx.vertices&, ctx.common.allocator);
    };
    if !ctx.commands.ptr.is_null() {
        drop(ctx.vertices&, ctx.common.allocator);
    };
    sdtx.sg.push_debug_group("sokol_debugtext");
    sdtx.sg.destroy_buffer(ctx.vbuf);
    sdtx.sg.destroy_pipeline(ctx.pip);
    sdtx.sg.remove_commit_listener(sdtx_make_commit_listener(ctx));
    sdtx.sg.pop_debug_group();
    ctx[] = Context.zeroed();
}

// SAFETY: do not move `sdtx` after calling this (it stashes an internal pointer)
fn setup(sdtx: *Self, desc: Desc) void = {
    c := desc.context&;
    @debug_assert_gt(c.canvas_width, 0.0, "bad canvas_width");
    @debug_assert_gt(c.canvas_height, 0.0, "bad canvas_height");
    @debug_assert_gt(c.char_buf_size, 0, "bad char_buf_size");
    sdtx[] = zeroed(Self);
    sdtx.sg = desc.sg;
    sdtx.init_cookie = init_cookie;
    sdtx.desc = desc; 
    desc := sdtx.desc&; 
    sdtx.sg.push_debug_group("sokol-debugtext");

    // TODO: sketchy. im using a newer version of debugtext than the rest of the stuff i have so these field names are from a different version than the shaders are. 
    //       but it seems fine so i guess it was just name changes. 
    
    
    // TODO: surely this is generated code. do a comptime thing instead
    // common shader for all contexts
    shd_desc := SgShaderDesc.zeroed();
    shd_desc.label = "sokol-debugtext-shader";
    shd_desc.attrs&[0] = (glsl_name = "position",  hlsl_sem_name = "TEXCOORD", hlsl_sem_index = 0);
    shd_desc.attrs&[1] = (glsl_name = "texcoord0", hlsl_sem_name = "TEXCOORD", hlsl_sem_index = 1);
    shd_desc.attrs&[2] = (glsl_name = "color0",    hlsl_sem_name = "TEXCOORD", hlsl_sem_index = 2);
    shd_desc.images&[0] = (
        stage = .FRAGMENT, 
        image_type = ._2D, 
        sample_type = .FLOAT, 
        hlsl_register_t_n = 0, 
        msl_texture_n = 0, 
        wgsl_group1_binding_n = 64,
        multisampled = false,
    );
    shd_desc.samplers&[0] = (
        stage = .FRAGMENT,
        sampler_type = .FILTERING,
        hlsl_register_s_n = 0,
        msl_sampler_n = 0,
        wgsl_group1_binding_n = 80,
    );
    shd_desc.image_sampler_pairs&[0] = (
        stage = .FRAGMENT,
        image_slot = 0,
        sampler_slot = 0,
        glsl_name = "tex_smp",
    );
    choose_shader_impl(SOKOL_BACKEND, shd_desc&, Sdtx.Shaders);
    sdtx.shader = sdtx.sg.make(shd_desc);
    SG_INVALID_ID: u32 = 0;
    @debug_assert(sdtx.shader.id != SG_INVALID_ID);

    sdtx.set_font_data(desc.fonts);
    desc.fonts = empty();  // made the texture so we don't need the input bytes anymore. 

    sdtx.font_smp = sdtx.sg.make(
        min_filter = .NEAREST,
        mag_filter = .NEAREST,
        wrap_u = .CLAMP_TO_EDGE,
        wrap_v = .CLAMP_TO_EDGE,
        label = "sdtx-font-sampler",
    );
    @debug_assert(SG_INVALID_ID != sdtx.font_smp.id);

    sdtx.sg.pop_debug_group();
    
    init_context(sdtx, sdtx.default_context&, sdtx.desc.context&);
}

fn set_font_data(sdtx: *Self, fonts: [][]u8) void = {
    sdtx.font_img = sdtx.sg.make(bake_font_texture(fonts));
    sdtx.font_count = fonts.len;
}

bake_font_texture :: fn(fonts: [][]u8) Sg.Image.Desc = {
    // unpack font data
    // we just need this to init the texture, so throw it away immediately after
    unpacked_font_size :: 256 * 8 * 8;
    font_count := fonts.len;
    font_pixels := temp().alloc(u8, font_count * unpacked_font_size);
    enumerate fonts { i, font_desc |
        out_pixels := font_pixels.slice(i * unpacked_font_size, (i + 1) * unpacked_font_size);
        unpack_font(font_desc[], out_pixels);
    };
    
    img_desc := SgImageDesc.zeroed();
    img_desc.width = 256 * 8;
    img_desc.height = font_count.trunc() * 8;
    img_desc.pixel_format = .R8;
    img_desc.data.subimage&[0]&[0] = font_pixels;
    img_desc.label = "sdtx-font-texture";
    img_desc
}

// If you made multiple contexts, it's your job to destroy them.
fn shutdown(sdtx: *Self) void = {
    ::ptr_utils(Self);
    @debug_assert(init_cookie == sdtx.init_cookie);
    if !sdtx.default_context.common.is_null() {
        destroy(sdtx.default_context&);
    };
    sdtx.sg.push_debug_group("sokol-debugtext");
    sdtx.sg.destroy_sampler(sdtx.font_smp);
    sdtx.sg.destroy_image(sdtx.font_img);
    sdtx.sg.destroy_shader(sdtx.shader);
    sdtx.sg.pop_debug_group();
    sdtx.init_cookie = 0;
}

/* switch render layer */
// ERRORS: if the command buffer is full (returns false)
fn set_layer(ctx: *Context, layer_id: i32) bool = {
    ctx.cur_layer_id = layer_id;
    first_vertex: i32 = 0;
    if cur_command(ctx) { cur_cmd |
        if cur_cmd.num_vertices == 0 || cur_cmd.layer_id == layer_id {
            // no vertices recorded in current draw command, or layer hasn't changed, can just reuse this
            cur_cmd.layer_id = layer_id;
            return(true);
        };
        // else, layer has changed, need to start a new draw command
        first_vertex = cur_cmd.first_vertex + cur_cmd.num_vertices;
        // fallthrough
    }; 
    // else, first draw command in frame
    
    next_cmd := next_uninit(ctx.commands&) || return(false);
    next_cmd.layer_id = layer_id;
    next_cmd.first_vertex = first_vertex;
    next_cmd.num_vertices = 0;
    true
}

/* (call inside sokol-gfx render pass) */
fn draw_layer(ctx: *Context, layer_id: i32) void = {
    sdtx := ctx.common;
    @debug_assert(init_cookie == sdtx.init_cookie);
    if(ctx.vertices.len <= 0 || ctx.commands.len <= 0, => return());
    sdtx.sg.push_debug_group("sokol-debugtext");

    if ctx.update_frame_id != ctx.frame_id {
        ctx.update_frame_id = ctx.frame_id;
        sdtx.sg.update_buffer(ctx.vbuf, ctx.vertices.items().interpret_as_bytes());
    };

    sdtx.sg.apply_pipeline(ctx.pip);
    bindings := SgBindings.zeroed();
    bindings.vertex_buffers&[0] = ctx.vbuf;
    bindings.images&[0] = sdtx.font_img;
    bindings.samplers&[0] = sdtx.font_smp;
    sdtx.sg.apply_bindings(bindings&);
    each(ctx.commands, fn(cmd) => if cmd.layer_id == layer_id {
        @debug_assert(cmd.num_vertices.mod(6) == 0);
        sdtx.sg.draw(cmd.first_vertex, cmd.num_vertices, 1);
    });
    sdtx.sg.pop_debug_group();
}

/* set a new virtual canvas size in screen pixels */
fn canvas(ctx: *Context, w: f32, h: f32) void = {
    @debug_assert(init_cookie == ctx.common.init_cookie);
    @debug_assert(!is_nan(w));
    @debug_assert(!is_nan(h));
    @debug_assert(w > 0.0 && h > 0.0);
    ctx.glyph_size.x = 8.0 / w;
    ctx.glyph_size.y = 8.0 / h;
    ctx.origin.x = 0.0;
    ctx.origin.y = 0.0;
    ctx.pos.x = 0.0;
    ctx.pos.y = 0.0;
}

fn put(ctx: *Context, c: u8) void #inline =
    if(c <= 32, => ctrl_char(ctx, c), => render_char(ctx, c));

// does NOT append newline!
fn put(ctx: *Context, str: CStr) void #inline = 
    for(str, fn(chr) => put(ctx, chr));

fn put(ctx: *Context, str: []u8) void #inline = 
    for(str, fn(chr) => put(ctx, chr));

//////////////////////////////////////////////////////////////////////////////////////////////////////

// unpack linear 8x8 bit-per-pixel font data into 2D byte-per-pixel texture data
unpack_font :: fn(font_desc: []u8, out_pixels: []u8) void #once = {
    @assert_eq(256 * 8, font_desc.len, "Invalid font data (need 8 bytes per char * 256 chars)");
    ptr := font_desc.ptr;
    range(0, 255) { chr |
        range(0, 8) { line |
            bits: i64 = ptr[].zext();
            ptr = ptr.offset(1);
            range(0, 8) { x |
                set := bits.shift_right_logical(7 - x).bit_and(1) == 1;
                out_pixels[line*256*8 + chr*8 + x] = @if(set, 0xFF, 0x00);
            };
        };
    };
};

fn ctrl_char(ctx: *Context, c: u8) void #once = {
    ctx.pos.x = @switch(c) {
        @case("\r".ascii()) => 0.0;
        @case("\n".ascii()) => {
            ctx.pos.y += 1.0;
            0.0
        };
        @case("\t".ascii()) => (ctx.pos.x - fmodf(ctx.pos.x, ctx.tab_width)) + ctx.tab_width;
        @case(" ".ascii())  => ctx.pos.x + 1.0;
        @default            => return();
    };
}

fn next_vertex(ctx: *Context) ?*Vertex #inline = {
    if(ctx.vertices.len + 6 > ctx.vertices.cap, => return(.None));
    ctx.vertices.len += 6;
    (Some = ctx.vertices.index(ctx.vertices.len - 6))
}

fn cur_command(ctx: *Context) ?*Command #inline = {
    if(ctx.commands.len == 0, => return(.None));
    (Some = ctx.commands.index(ctx.commands.len - 1))
}

fn render_char(ctx: *Context, c: u8) void #once = {
    if next_vertex(ctx) { vx | if cur_command(ctx) { cmd |
        // update vertex count in current draw command
        cmd.num_vertices += 6;

        x0 := (ctx.origin.x + ctx.pos.x) * ctx.glyph_size.x;
        y0 := (ctx.origin.y + ctx.pos.y) * ctx.glyph_size.y;
        x1 := x0 + ctx.glyph_size.x;
        y1 := y0 + ctx.glyph_size.y;

        // glyph width and height in font texture space
        // NOTE: the '+1' and '-2' fixes texture bleeding into the neighboring font texture cell
        uvw: u16 = @as(i64) 0x10000 / 0x100;
        uvh: u16 = trunc(@as(i64) 0x10000 / ctx.common.font_count);
        u0: u16 = (c.zext() * uvw) + 1;
        v0: u16 = trunc((ctx.font.intcast() * uvh.zext()) + 1);
        u1 := (u0 + uvw) - 2;
        v1 := (v0 + uvh) - 2;
        c := ctx.color;

        vx := vx.slice(6);
        vx[0] = (x = x0, y = y0, u = u0, v = v0, color = c);
        vx[1] = (x = x1, y = y0, u = u1, v = v0, color = c);
        vx[2] = (x = x1, y = y1, u = u1, v = v1, color = c);
        
        vx[3] = (x = x0, y = y0, u = u0, v = v0, color = c);
        vx[4] = (x = x1, y = y1, u = u1, v = v1, color = c);
        vx[5] = (x = x0, y = y1, u = u0, v = v1, color = c);
    }};
    ctx.pos.x += 1.0;
}

fn rewind(ctx: *Context) void = {
    // note: this check is not quite as helpful as you'd like because if it got called from the wrong place,
    //       we might not have a valid context setup and will fault trying to panic. 
    @debug_assert_eq(ctx.common.init_cookie, init_cookie, "invalid rewind");
    ctx.frame_id += 1;
    ctx.vertices.len = 0;
    ctx.commands.len = 0;
    set_layer(ctx, 0);
    ctx.font = 0;
    ctx.pos.x = 0.0;
    ctx.pos.y = 0.0;
}

fn make_commit_listener(ctx: *Context) SgCommitListener = {
    (user_data = Context.raw_from_ptr(ctx), func = fn(userdata: rawptr) void = {
        // called from inside sokol-gfx sdtx.sg.commit()
        if(userdata.is_null(), => return());
        ctx := Context.ptr_from_raw(userdata);
        rewind(ctx);
    })
}
