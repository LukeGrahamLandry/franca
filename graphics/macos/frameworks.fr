//
// Adhoc bindings for the fruit platform (just the stuff I need).
//
// TODO: maybe i should get more serious and provide nice bindings to all of it. 
//      options: 
//      - generate from their header files
//      - use my c compiler to import their header files
// TODO: license? the dispatch ones are Apache 2.0. 
//       if the framework headers are ARR does that mean the only legal way to call them 
//       is be compiled by The Lastest Version of XCodeâ„¢ ?
//       does it matter that i typed these and not generated them (presumably it's the same). 
//
// TODO: do i want to try to do types for the objective c messages too? 
//       then probably need a more comprehensive notion of subtyping. 
// TODO: make sure @import_symbol works as a :: constant and then move those here as well. 
//

#use("@/lib/sys/objective_c.fr");

fn handles(names: FatExpr) FatExpr #macro = {
    #use("@/compiler/ast_external.fr");
    S :: import("@/graphics/macos/frameworks.fr");
    c := current_compiler_context();
    each names&.items() { name |
        // TODO: this should create unique types without the _HACK
        // TODO: this should work but doesn't give you type checking!
        //opaque := intern_type(Named = (@struct(_: rawptr), name));
        name := name.ident().unwrap();
        opaque := const_eval(Type)(@{ @struct(_: rawptr, _HACK :: @[@literal name]) });  // :SLOW
        c'vtable'get_type_meta(c.data, opaque)[].inferred_name = name;
        ::?Symbol;
        // TODO: make you pass a Span here (since we have one)
        c.add_to_scope(S, name, Type, opaque);
    };
    @{}
}

//
// CoreVideo
//

@handles(CVDisplayLinkRef, CGDirectDisplayID);
fn CVDisplayLinkCreateWithActiveCGDisplays(displayLinkOut: *CVDisplayLinkRef) voidResult #import("CoreVideo");
fn CVDisplayLinkSetOutputCallback(displayLink: CVDisplayLinkRef, callback: CVDisplayLinkOutputCallback, userInfo: rawptr) voidResult #import("CoreVideo");
fn CVDisplayLinkStart(displayLink: CVDisplayLinkRef) voidResult #import("CoreVideo");
CVDisplayLinkOutputCallback :: @FnPtr(displayLink: CVDisplayLinkRef, inNow: rawptr, inOutputTime: rawptr, flagsIn: i64, flagsOut: *i64, displayLinkContext: rawptr) voidResult;
fn CVDisplayLinkSetCurrentCGDisplay(displayLink: CVDisplayLinkRef, displayID: CGDirectDisplayID) voidResult #import("CoreVideo");

//
// Grand Central Dispatch
//

@handles(dispatch_source_type_t, dispatch_source_t, dispatch_queue_t, OS_dispatch_semaphore_t);

// dispatch_get_main_queue() is `static inline` so we can't call it 
fn dispatch_get_main_queue() dispatch_queue_t = 
    //dispatch_queue_t.ptr_from_raw(@import_symbol("_dispatch_main_q", "libc"))[];
    bit_cast_unchecked(rawptr, dispatch_queue_t, @import_symbol("_dispatch_main_q", "libc"));
fn dispatch_async_f(queue: dispatch_queue_t, userdata: rawptr, callee: @FnPtr(userdata: rawptr) void) void #import("libc");

fn DISPATCH_SOURCE_TYPE_DATA_ADD() dispatch_source_type_t = 
    //dispatch_source_type_t.ptr_from_raw(@import_symbol("_dispatch_source_type_data_add", "libc"))[];
    bit_cast_unchecked(rawptr, dispatch_source_type_t, @import_symbol("_dispatch_source_type_data_add", "libc"));
fn dispatch_source_create(type: dispatch_source_type_t, handle: u64, mask: u64, queue: dispatch_queue_t) dispatch_source_t #import("libc");
fn dispatch_set_context(object: dispatch_source_t, userdata: rawptr) void #import("libc");
// "The context parameter passed to the event handler function is the context of
//  the dispatch source current at the time the event handler was set." - Tim Apple
fn dispatch_source_set_event_handler_f(source: dispatch_source_t, handler: @FnPtr(context: rawptr) void) void #import("libc");
fn dispatch_resume(source: dispatch_source_t) void #import("libc");
fn dispatch_source_merge_data(source: dispatch_source_t, idk: i64) void #import("libc");

DISPATCH_TIME_FOREVER :: bit_not(0);
fn dispatch_semaphore_wait(dsema: OS_dispatch_semaphore_t, timeout: i64) i64 #import("libc");
fn dispatch_semaphore_create(value: i64) OS_dispatch_semaphore_t #import("libc");
fn dispatch_semaphore_signal(dsema: OS_dispatch_semaphore_t) i64 #import("libc");

// 
// CoreGraphics
// 

CGSize  :: @struct(width: f64, height: f64);
CGPoint :: @struct(x: f64, y: f64);
CGRect  :: @struct(origin: CGPoint, size: CGSize);  // same as NSRect

fn CGAssociateMouseAndMouseCursorPosition(connected: bool) void #import("CoreGraphics");
@handles(CGDirectDisplayID);
fn CGMainDisplayID() CGDirectDisplayID #import("CoreGraphics");
fn CGDisplayShowCursor(d: CGDirectDisplayID) void #import("CoreGraphics");
fn CGDisplayHideCursor(d: CGDirectDisplayID) void #import("CoreGraphics");

@handles(CGColorSpaceRef, CFDataRef, CGDataProviderRef, CGImageRef);
fn CGDataProviderCreateWithData(info: i64, data: *u32, size_bytes: i64, releaseData: i64) CGDataProviderRef #import("CoreGraphics"); // CGDataProviderRef
fn CGColorSpaceCreateDeviceRGB() CGColorSpaceRef #import("CoreGraphics"); 
fn CFDataCreate(allocator: ObjCId, data: *u8, size: i64) CFDataRef #import("CoreFoundation"); 
fn CGDataProviderCreateWithCFData(cf_data: CFDataRef) CGDataProviderRef #import("CoreGraphics"); 
fn CGImageCreate(width: i64, height: i64, bitsPerComponent: i64, bitsPerPixel: i64, 
    bytesPerRow: i64, space: CGColorSpaceRef, bitmapInfo: i64, provider: CGDataProviderRef, decode: i64, 
    shouldInterpolate: bool, intent: u32) CGImageRef #import("CoreGraphics");
// TODO: are these different than an objc release() message? 
fn CFRelease(it: ObjCId) void #import("CoreFoundation");
fn CGDataProviderRelease(it: CGDataProviderRef) void #import("CoreGraphics");
fn CGColorSpaceRelease(it: CGColorSpaceRef) void #import("CoreGraphics");
fn CGImageRelease(it: CGImageRef) void #import("CoreGraphics");
fn CGContextDrawImage(c: id("NSGraphicsContext"), rect: CGRect, image: CGImageRef) void #import("CoreGraphics");

//
// Metal
//

fn MTLCreateSystemDefaultDevice() id("MTLDevice") #import("Metal");

MTLTextureDescriptor :: @class {
};
MTLRenderPassDescriptor :: @class {
};
MTLStencilDescriptor :: @class {
};
MTLDepthStencilDescriptor :: @class {
};
MTLRenderPipelineDescriptor :: @class {
};
MTLVertexDescriptor :: @class {
};
MTLComputePipelineDescriptor :: @class {
};
MTLSamplerDescriptor :: @class {
    sAddressMode: u32;
    tAddressMode: u32;
    rAddressMode: u32;
    minFilter: u32;
    magFilter: u32;
    mipFilter: u32;
    lodMinClamp: f32;
    lodMaxClamp: f32;
    maxAnisotropy: u32;
    normalizedCoordinates: bool;
    compareFunction: u32;
};
MTLRenderCommandEncoder :: @protocol {
    setBufferOffset :: fn(self, _: i32, atIndex: u8) void;
    setFragmentBufferOffset :: fn(self, _: i32, atIndex: u8) void;
    setVertexBufferOffset :: fn(self, _: i32, atIndex: u8) void;
    setVertexBuffer :: fn(self, _: MTLBuffer, offset: i64, atIndex: i64) void;
    setTexture :: fn(self, _: MTLTexture, atIndex: u8) void;
    setFragmentTexture :: fn(self, _: MTLTexture, atIndex: u8) void;
    setVertexTexture :: fn(self, _: MTLTexture, atIndex: u8) void;
    setSamplerState :: fn(self, _: MTLSamplerState, atIndex: u8) void;
    setFragmentSamplerState :: fn(self, _: MTLSamplerState, atIndex: u8) void;
    setVertexSamplerState :: fn(self, _: MTLSamplerState, atIndex: u8) void;
    setBuffer :: fn(self, _: MTLBuffer, offset: i64, atIndex: u8) void;
    setFragmentBuffer :: fn(self, _: MTLBuffer, offset: i64, atIndex: u8) void;
    drawIndexedPrimitives :: fn(self: ObjCId, _: u32, indexCount: i64, indexType: u32, indexBuffer: ObjCId, indexBufferOffset: i64, instanceCount: i64) ObjCId;
    drawPrimitives :: fn(self: ObjCId, _: u32, vertexStart: i64, vertexCount: i64, instanceCount: i64) ObjCId;
};
MTLBuffer :: @protocol {};
MTLTexture :: @protocol {};
MTLSamplerState :: @protocol {};
MTLDevice :: @protocol {
    newTextureWithDescriptor :: fn(self, _: MTLTextureDescriptor) MTLTexture;
    newComputePipelineStateWithDescriptor :: fn(self, _: MTLComputePipelineDescriptor, options: u32, reflection: ObjCId, error: *NSError) ObjCId;
    newRenderPipelineStateWithDescriptor :: fn(self, _: MTLRenderPipelineDescriptor, error: *NSError) ObjCId;
    newSamplerStateWithDescriptor :: fn(self, _: MTLSamplerDescriptor) MTLSamplerState;
}

//
// Foundation 
//

fn NSStringFromClass(class: ObjCClass) id("NSString") #import("Foundation");

::NSObject;
NSObject :: @class {
    alloc :: fn() ObjCId #static;
    init :: fn(self) ObjCId;
    release :: fn(self: ObjCId) void;
    retain :: fn(self: ObjCId) void;
};
NSEvent :: @class {
    pressedMouseButtons: u32 #static #readonly;
    addLocalMonitorForEventsMatchingMask :: fn(_: i64, handler: *Block_Literal_1) void #static;
    scrollingDeltaX: f64 #readonly;
    scrollingDeltaY: f64 #readonly;
    hasPreciseScrollingDeltas: bool #readonly;
    isARepeat: bool #readonly;
    buttonNumber: i64 #readonly;
    deltaX: f64 #readonly;
    deltaY: f64 #readonly;
    modifierFlags: u32 #static #readonly;
    modifierFlags: u32 #readonly;
    setMouseCoalescingEnabled :: fn(_: bool) void #static;
};
NSApplication :: @class {
    sharedApplication :: fn() NSApplication #static;
    run :: fn(self) Never;
    delegate: ObjCId; 
    setActivationPolicy: fn(self, _: i64) bool;
};
NSView :: @class {
    frame: GCRect;
    keyDown :: fn(self, _: NSEvent) void;
    wantsLayer: bool;
    layerContentsRedrawPolicy: i64;
    layer: CALayer;
    initWithFrame :: fn(self, frame: CGRect) NSView;
    bounds: CGRect;
    addTrackingArea :: fn(self, _: NSTrackingArea) void;
};
CALayer :: @class {
    contentsScale: f64;
};
CAMetalLayer :: @class {
    EXTENDS :: CALayer;
    drawableSize: CGSize;
}
NSTrackingArea :: @class {
    initWithRect :: fn(self, _: CGRect, options: M"NSTrackingAreaOptions", owner: ObjCId, userInfo: ObjCId) NSTrackingArea;

};
NSArray :: @class {
};
NSWindow :: @class {
    backingScaleFactor :: fn(self: ObjCId) f64;
    contentView: NSView;
    makeFirstResponder :: fn(self, _: NSResponder) bool;
    center :: fn(self) void;
    initWithContentRect :: fn(self, _: CGRect, styleMask: i64, backing: i64, defer: bool) NSWindow;
    title: NSString;
};
NSURL :: @class {
    fileURLWithPath :: fn(_: NSString) NSURL #static;
    standardizedURL: NSURL #readonly;
};
NSImageView :: @class {
};
NSImage :: @class {
};
NSString :: @class {
    UTF8String: CStr #readonly;
    stringWithUTF8String :: fn(string: CStr) NSString #static;
};
NSScreen :: @class {
    mainScreen :: fn() NSScreen #static;
    frame: CGRect;
    maximumFramesPerSecond: i64 #readonly;
    deviceDescription: NSDictionary #readonly;
};
NSDictionary :: @class {  // TODO: generic
    objectForKey :: fn(self, _: ObjCId) ObjCId;
};
NSCursor :: @class {
    arrowCursor: NSCursor #static #readonly;
    IBeamCursor: NSCursor #static #readonly;
    crosshairCursor: NSCursor #static #readonly;
    pointingHandCursor: NSCursor #static #readonly;
    _windowResizeEastWestCursor: NSCursor #static #readonly;
    _windowResizeNorthSouthCursor: NSCursor #static #readonly;
    _windowResizeNorthWestSouthEastCursor: NSCursor #static #readonly;
    _windowResizeNorthEastSouthWestCursor: NSCursor #static #readonly;
    closedHandCursor: NSCursor #static #readonly;
    operationNotAllowedCursor: NSCursor #static #readonly;
};
NSNull :: @class {
    null: NSNull #static #readonly; 
};
NSMutableArray :: @class {
};
