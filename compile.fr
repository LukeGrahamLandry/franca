#!/usr/bin/env franca

fn main() void = {
    //franca("./boot/aarch64-apple-darwin/franca2", "-aot=llvm", "./target/f_l");
    //franca("./target/f_l",  "-aot=llvm",    "./target/f_ll");
    //franca("./target/f_l",  "-aot=qbe-exe", "./target/f_lq");
    //franca("./target/f_lq", "-aot=llvm",    "./target/f_lql");
    //franca("./target/f_lq", "-aot=qbe-exe", "./target/f_lqq");
    
    fn franca(compiler: Str, backend: Str, dest: Str) void = {
        @debug_assert_ne(compiler, "a.out", "stomp!");
        @println("%(%) -> %", compiler, backend, dest);
        sh(@slice(compiler, "examples/default_driver.fr", "build", "compiler/other_main.fr", "-ctx=static", backend));
        cp("a.out", dest);
    }
    franca("franca",  "-aot=llvm", "./target/f_l");
    franca("./target/f_l", "-aot=qbe-exe", "./target/f_lq");
    
    a := "./target/f_l";
    b := "./target/f_lq";
    // TODO: cant aot, non-8 constant: "tests/need_llvm/x64_encoding",
    names := @slice(
        "examples/count", "examples/c_bindgen", "examples/bloat", "examples/dump_macho", "examples/raw_terminal",
        "examples/macho_loader", "examples/lox/lox_main", 
        "compiler/other_main", 
    );
    for names { name | 
        compare_compiled(a, b, name) { c | 
            sh(@slice(c, "examples/default_driver.fr", "build", @tfmt("%.fr", name), "-aot=qbe-exe", "-c", "-keep-names"));
        };
    };
    
    // TODO: i think this only does the comparison on the last test in each file. 
    walk_directory("tests".sym().c_str()) { entry |
        continue :: local_return;
        if(eq(@as(u8) entry.type, @as(u8) DirEntType.File)) {
            name := @tfmt("%/%", "tests", entry.name);
            if name.ends_with(".fr") {
                name.len -= 3;
                compare_compiled(a, b, name) { c | 
                    sh(@slice(c, "examples/default_driver.fr", "test", @tfmt("%.fr", name), "-aot=qbe-exe"));
                };
            };
        };
    }; 
}

fn compare_compiled(a: Str, b: Str, name: Str, $compile: @Fn(compiler: Str) void) void = {
    @println("compiling % twice.", name);
    prefix := @tfmt("target/c/%", name);
    a_out := @tfmt("%/a.out", prefix);
    b_out := @tfmt("%/b.out", prefix);
    compile(b);
    cp("a.out", "b.out");
    compile(a);
    
    if !diff("a.out", "b.out") {
        println("different!");
        mkdirs(prefix);
        cp("a.out", a_out);
        cp("b.out", b_out);
        da := @tfmt("%/dump_a.txt", prefix);
        db := @tfmt("%/dump_b.txt", prefix);
        sh_write(@slice("./examples/dump_macho.fr", "a.out"), da);
        sh_write(@slice("./examples/dump_macho.fr", "b.out"), db);
        sh_write(@slice("diff", da, db), @tfmt("%/dump.diff", prefix));
        da := @tfmt("%/a.s", prefix);
        db := @tfmt("%/b.s", prefix);
        sh_write(@slice("objdump", "-d", "a.out"), da);
        sh_write(@slice("objdump", "-d", "b.out"), db);
        sh_write(@slice("diff", da, db), @tfmt("%/asm.diff", prefix));
    };
}

fn get_file_name(s: Str) Str = {
    with_dot   := s.pop_until_endswith(".");
    with_slash := s.pop_until_endswith(PATH_SEP);
    s.slice(with_slash.len, with_dot.len)
}

fn diff(a: Str, b: Str) bool = {
    ok, out, err := fork_and_catch(temp()) {
        exec_cmd("diff", @slice(a, b)) 
    };
    ok
}

fn cp(src: Str, dest: Str) void = 
    sh(@slice("cp", src, dest));
    
fn mkdirs(p: Str) void = 
    sh(@slice("mkdir", "-p", p));

fn sh(a: []Str) void = {
    ok, out, err := fork_and_catch(temp()) {
        exec_cmd(a[0], a.slice(1, a.len)) 
    };
    if !ok {
        @println("Failed to run: %", a);
        println(out.items());
        println(err.items());
        exit(1);
    };    
}

fn sh_write(a: []Str, dest: Str) void = {
    ok, out, err := fork_and_catch(temp()) {
        exec_cmd(a[0], a.slice(1, a.len)) 
    };
   
    // ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ðŸ¤¡ 
    sh(@slice("touch", dest)); // TODO: this is dumb
    file := or open_trunc(maybe_borrow_cstr(dest, temp())) {
        @panic("failed to open %", dest)
    };
    write(file&, out.items());
    write(file&, err.items());
    close(file);
}
