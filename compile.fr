#!/usr/bin/env franca

fn main() void = {
    franca("./boot/aarch64-apple-darwin/franca2", "-aot=llvm", "./target/f_l");
    franca("./target/f_l",  "-aot=llvm",    "./target/f_ll");
    franca("./target/f_l",  "-aot=qbe-exe", "./target/f_lq");
    franca("./target/f_lq", "-aot=llvm",    "./target/f_lql");
    franca("./target/f_lq", "-aot=qbe-exe", "./target/f_lqq");
    exit(0);
}

fn franca(compiler: Str, backend: Str, dest: Str) void = {
    @debug_assert_ne(compiler, "a.out", "stomp!");
    @println("%(%) -> %", compiler, backend, dest);
    sh(@slice(compiler, "examples/default_driver.fr", "build", "compiler/other_main.fr", backend));
    cp("a.out", dest);
}

fn compare(a: Str, b: Str) void = {

}

fn cp(src: Str, dest: Str) void = 
    sh(@slice("cp", src, dest));

fn sh(a: []Str) void = {
    ok, out, err := fork_and_catch(temp()) {
        exec_cmd(a[0], a.slice(1, a.len)) 
    };
    if !ok {
        @println("Failed to run: %", a);
        println(out.items());
        println(err.items());
        exit(1);
    };    
}
