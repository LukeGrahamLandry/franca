//! The obnoxious super structured errors means i don't have to paste exact error message strings and update them constantly. 
// TODO: @assert_compile_error can't catch parse errors 

fn type_errors() #test => {
    @assert_type_error(i64, Str) {
        a: i64 = "";
    };
    
    @assert_type_error(i64, Str) {
        a := 0;
        a = "";
    };
    
    @assert_type_error(i64, Str) {
        a := 0;
        b := "";
        a = b;
    };
    
    @assert_type_error(@FnPtr(a: u32) bool, @FnPtr(a: i64) bool) {
        hello :: fn(a: i64) bool = a == 0;
        b: @FnPtr(a: u32) bool = hello;
    };
    
    @assert_type_error(Tag(?i64), *Ty(Symbol, Type)) {
        // Passing a bad type as a later const arg. 
        // a bug from a long time ago. for the record, the old compiler made this mistake too.
        s: ?i64 = (Some = 123);
        info :: get_variants(?i64).index(0);
        get_variant_ptr(?i64, s&, info);
    };
    
    A :: @struct(a: i64, b: i64);
    @assert_field_error(@symbol c, A) {
        a := A.zeroed();
        a.c;
    };
    
    B :: @tagged(a: i64, b: i64);
    @assert_field_error(@symbol cc, B) {
        a := B.zeroed();
        a.cc;
    };
    
    @assert_field_error(@symbol ccc, i64) {
        a := 123;
        a.ccc;
    };
    
    // still typecheck args for calls of inlined member of overload set.
    @assert_type_error(Ty([]i64, i64), Ty([]i64, i32)) {
        x: i32 = 0;
        y := @slice(1, 2, 3);
        println(y.apple(x)[]);  // type error here
            
        fn apple(y: []i64, x: i64) *i64 #inline = {
            y.index(0)
        };
        fn apple(y: *[]i64, x: i64) *Str = {
            y.index(0)
        };
    };
    
    @assert_type_error(Ty(List(Str), List(Str)), Ty(List(Str), Str)) {
        fn ne(lhs: List(Str), rhs: List(Str)) bool = 
            !(lhs == rhs);
        
        a: List(Str) = list(temp());
        b := "";
        if a != b {
            println("A");
        };
    };
    
    @assert_type_error(Ty([]i64, i64), Ty([]i64, u32)) {
        a := @slice(1, 2, 3);
        b: u32 = 2;
        c := a[b];  // indices are always i64
    };
    
    @assert_type_error(u8, Str) {
        c: u8 = 0;
        b := @switch(c) {
            @case("a".ascii()) => 1;
            @case("0") => 2;  // oops, missing .ascii()
            @case(0) => 3;
            @default => 4;
        };
    };
    
    p := 1;
    @assert_type_error(Str, i64) {
        foo: Array([]u8, 2) = (p, p);
    };
    @assert_type_error(Str, i64) {
        foo: Array([]u8, 5) = (p, .."");
    };
    @assert_type_error(Ty(Str, Str, Str), Ty(Str, i64, i64)) {
        foo: Ty(Str, Str, Str) = ("", ..p);
    };
    
    {
        // note: `b` has no default. should compile error when you try to make one from `()`
        AA :: @struct(a := 0, b: i64);  
        @assert_type_error(AA, void) {
            f :: fn() AA = ();
            a: AA = f();
        };
    };
    
    @assert_type_error(FatExpr, i64) :: {
        a := 1;
        x := @{ @foo(123) };
        y := @{ @[x] == @[a] };
    };
    @assert_type_error(Str, i64) {
        a := 1;
        @slice("", a);
    };
}

// TODO: check that its the right error message
fn other_errors() #test = {
    // conflicting function tags
    @assert_compile_error {
        a :: fn($body: @Fn() void) void #noinline = (fn($os) => body());
        a {
            panic("oh shit");
        };
    };
    @assert_compile_error {
        a :: fn() void #noinline #inline = (fn($os) => panic("oh shit"));
        a {
            panic("oh shit");
        };
    };
    
    // value for const field
    @assert_compile_error {
        A :: @struct(a: i64, $b := 123);
        a: A = (a = 123, b = 456);
    };
    
    // TODO: this happens in the macro so we can't catch the assert_compile_error. 
    //       thats a garbage compiler limitation.  -- Sep 20
    //@assert_compile_error {
    //    A :: @struct(a: i64, $a := 123);  // same name used twice
    //    a: A = (a = 1);
    //};
    @assert_compile_error {
        A :: @struct(a: i64, b: i64);
        a: A = (a = 1, a = 2);  // right number of fields, all valid names, but still not ok!
    };
    @assert_compile_error {
        // shadowing function args
        hello :: fn(a: i64, a: Str) void = ();
        hello(1, "");
    };
    
    @assert_compile_error {
        (c: i64, d: i64) := ();
    };
    
    // wrapped because the error is detected in scope.fr which is too early for @assert_compile_error
    @assert_compile_error {
        x :: fn() void = {
            fn aaa();
            aaa :: 123;
            aaa;
        };
        y :: x();
        y;
    };
    
    // wrapped because the time that it's cheap to detect the error is in emit_ir.fr 
    // so it happens too late for @assert_compile_error to catch if it's in the same function. 
    @assert_compile_error {
        a :: fn($body: @Fn() void) void = {
            @must_return body();
        };
        ::f();
        f :: fn() = if true {
            break :: local_return;
            a {
                break();
            };
        };
    };
    
    @assert_compile_error { a :: @static(i64); a = 123; };
    @assert_compile_error { a :: @static(i64); b := a&; };
}


///////
/// Extensions to @assert_compile_error that check for specific errors so we don't pass tests for the wrong reasons. 

fn assert_type_error(want_found: FatExpr, expr: FatExpr) FatExpr #macro = {
    @ct_assert(want_found.expr&.is(.Tuple), want_found.loc, "(want, found)");
    parts := want_found.expr.Tuple&;
    @ct_assert(parts.len == 2, want_found.loc, "(want, found)");
    
    @{ 
        @run { 
            err := @assert_compile_error {
                @[expr]
            };
            want := @[parts[0]];
            found := @[parts[1]];
            w, f := @match(err) {
                fn CoerceConst(it) => (it.wanted, it.found);
                fn TypeMismatch(it) => (it.wanted, it.found);
                @default => panic("expected type error");
            };
            m :: "% wrong type: % vs %";
            @assert_eq(w, want, m, err.tag(), w.typename().str(), want.typename().str());
            @assert_eq(f, found, m, err.tag(), f.typename().str(), found.typename().str());
        };
    }
}

fn assert_field_error(name_type: FatExpr, expr: FatExpr) FatExpr #macro = {
    @ct_assert(name_type.expr&.is(.Tuple), name_type.loc, "(name, type)");
    parts := name_type.expr.Tuple&;
    @ct_assert(parts.len == 2, name_type.loc, "(name, type)");
    
    @{ 
        @run { 
            err := @assert_compile_error {
                @[expr]
            };
            name := @[parts[0]];
            type := @[parts[1]];
            @match(err) {
                fn InvalidField(it) => {
                    @assert_eq(it.name, name, "InvalidField wrong name");
                    @assert_eq(it.container, type, "InvalidField wrong type");
                }
                @default => panic("expected InvalidField error");
            };
        };
    }
}

/*
// TODO: better parse error for this 
fn do() => {
    for x { y | {
        body(y);
    };
} // <-  expected ';' (discard) or '}' (return from block) after expr stmt 
  // thats really not helopful. but it got confused by counting '{'s
*/

/*
{
    @match(e) {
        fn this_is_a_match_case() => ();
    };
};
{
    // TODO:
    // this undefined var gives you "Compile Error: Poison expression OverloadSet.",
    // pointing at the @match above because overload sets are hoisted to the root scope 
    // (even if they're just syntactic and actually used for something else). 
    a := this_is_a_match_case;
};
*/
