fn main(_canary: i64) i64 = {

// TODO: better error message if you forget to put the @comptime
// TODO: fix needing to call Ty(_, _) to group the args. 
@generic
fn dup(const T: Type) Fn(T, Ty(T, T)) = {
    // TODO: without the leading '(' it treats it as a statement and gets mad that there's no name. 
    (fn(value: T) (T, T) = (value, value))
}

// dont do this! i probably want tuples to have undefined layout. 
fn get_i(tuple: *Ty(i64, i64), i: i64) i64 = {
    let tuple: VoidPtr = tuple;
    let start = mul(i, size_of(i64));
    let ptr: VoidPtr = raw_slice(tuple, start, add(start, size_of(i64)));
    let ptr: Ptr(i64) = ptr;
    ptr[]
}
fn get_t(tuple: *Ty(Type, Type), i: i64) Type = {
    let tuple: VoidPtr = tuple;
    let start = mul(i, size_of(Type));
    let ptr: VoidPtr = raw_slice(tuple, start, add(start, size_of(Type)));
    let ptr: Ptr(Type) = ptr;
    ptr[]
}

const dup_i64 = dup(i64);
var one_one = dup_i64(1);
assert_eq(1, get_i(one_one!addr, 0));
assert_eq(1, get_i(one_one!addr, 1));

const dup_ty = dup(Type);
var tt = dup_ty(Unit);
assert_eq(Unit, get_t(tt!addr, 0));
assert_eq(Unit, get_t(tt!addr, 1));

dup_ty(1)!assert_compile_error;
dup_i64(Unit)!assert_compile_error;

@comptime
fn MySlice(T: Type) Type = (ptr: Ptr(T), len: i64)!struct;

@comptime @generic
fn get_first(T: Type) Fn(MySlice(T), T) = {
    (fn(s: MySlice(T)) T = {
        let ptr: VoidPtr = s&.ptr[];
        let first_thing: VoidPtr = raw_slice(ptr, 0, size_of(T));
        let first_thing: Ptr(T) = first_thing;
        first_thing[]
    })
}

const i64_s = MySlice(i64);
let five = 5; // TODO: full cosnt args
let things = alloc(i64, five);
var a: i64_s = (ptr: things, len: 5);
let ptr: VoidPtr = a&.ptr[];
let first_thing: VoidPtr = raw_slice(ptr, 0, size_of(i64));
let first_thing: Ptr(i64) = first_thing;
first_thing[] = 12;
const get_first_i64 = get_first(i64);
assert_eq(get_first_i64(a), 12);

// TODO: fix this. currently you need any overloaded functions provided by a generic to exist lexiclly as constants in the outer scope,
//       because the name resolution is done too early. 
fn is_left() Unit = unit;

@comptime 
fn Either(Left: Type, Right: Type) Type = {
    const Self: Type = (left: Left, right: Right)!enum;
    
    fn is_left(self: Self) bool = 
        eq(self&!tag[], tag_value(Self, left!symbol));
    
    Self
}

const E1 = Either(i64, Ptr(i64));
let e1: E1 = (left: 15);
assert_eq(true, is_left(e1));

// types are memoized 
assert_eq(Either(i64, Ptr(i64)), Either(i64, Ptr(i64)));
assert_eq(E1, Either(i64, Ptr(i64)));  
assert_eq(e1!type, Either(i64, Ptr(i64)));  
assert_eq(e1!type, E1);  

const E2 = Either(bool, i64);
let e2: E2 = (left: false);
assert_eq(true, is_left(e2));
assert_eq(e2!type, E2);


//////
/// Comptime call args can't just be const

fn weird_add(a: i64, b: i64) i64 = {
    a = a.add(b);
    a
}
const three = weird_add(1, 2);
assert_eq(three, 3);

_canary
}
