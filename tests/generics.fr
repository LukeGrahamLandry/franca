//! Functions and types are first class values during compilation. 
//! That allows a simple (but verbose) form of generics without relying on the overloading system. 
//! This is not how the standard library generally defines its generic types. 

#test fn tuple_return() = {
    // TODO: better error message if you forget to put the #generic
    // TODO: fix needing to call Ty(_, _) to group the args. 
    #generic
    fn dup($T: Type) Fn(T, Ty(T, T)) = {
        // TODO: without the leading '(' it treats it as a statement and gets mad that there's no name. 
        (fn(value: T) Ty(T, T) = (value, value))
    }
    
    // dont do this! i probably want tuples to have undefined layout. 
    #generic
    fn get_index($T: Type) Fn(Ty(*Ty(T, T), i64), T) = {
        // TODO: without the leading '(' it treats it as a statement and gets mad that there's no name. 
        (fn(tuple: *Ty(T, T), i: i64) T = {
            tuple := raw_from_ptr(Ty(T, T), tuple);
            start := mul(i,:: size_of(T));
            ptr: rawptr = offset(tuple, start);
            ptr := ptr_from_raw(T, ptr);
            ptr[]
        })
    }
    
    get_i :: get_index(i64);
    get_t :: get_index(Type);
    
    dup_i64 :: dup(i64);
    one_one := dup_i64(1);
    assert_eq(1, get_i(one_one&, 0));
    assert_eq(1, get_i(one_one&, 1));
    
    dup_ty :: dup(Type);
    tt := dup_ty(void);
    /* // TODO: this doesn't'
    assert_eq(void, get_t(tt&, 0));
    assert_eq(void, get_t(tt&, 1));
    */
    
    @assert_compile_error dup_ty(1);
    @assert_compile_error dup_i64(void);
}

#test fn poly_struct() = {
    fn MySlice($T: Type) Type = @struct(ptr: *T, len: i64);
    
    #generic
    fn get_first($T: Type) @Fn(s: MySlice(T)) T = 
        (fn(s: MySlice(T)) T = s.ptr[]);
    
    i64_s :: MySlice(i64);
    things := temp().alloc(i64, 5);
    a: i64_s = (ptr = things.ptr, len = 5);
    a.ptr[] = 12;
    get_first_i64 :: get_first(i64);
    assert_eq(get_first_i64(a), 12);
}

#test fn memo_instantiations(_canary: i64) i64 = {
    fn Either($Left: Type, $Right: Type) Type = {
        S :: @tagged(left: Left, right: Right);
        :: tagged(S);
        S
    }
        
    
    #generic
    fn is_left($Self: Type) Fn(Self, bool) = 
        (fn(self: Self) bool = self&.is(.left));
    
    E1 :: Either(i64, *i64);
    e1: E1 = (left = 15);
    il1 :: is_left(E1); // TODO: should be able to inline this and call any expr without the extra binding, even if its comptime.
    assert_eq(true, il1(e1));
    
    // types are memoized 
    assert_eq(Either(i64, *i64), Either(i64, *i64));
    assert_eq(E1, Either(i64, *i64));  
    assert_eq(@type e1, Either(i64, *i64));  
    assert_eq(@type e1, E1);  
    
    E2 :: Either(bool, i64);
    e2: E2 = (left = false);
    il2 :: is_left(E2);
    assert_eq(true, il2(e2));
    assert_eq(@type e2, E2);
    
    _canary
}

#test fn nested_specialize(canary: i64) i64 = {
    fn two() void = unit;
    fn sum_size() void = unit;

    fn one($A: Type) void = {
        // this needs the extra argument to disambiguate which version of 'one' you meant to call. 
        fn two($B: Type, a: A) void = {
            fn sum_size(a: A, b: B) i64 = A.size_of().add(B.size_of());
        }
    }
    
    fn use() void = assert_eq(12, sum_size(i64, 1));
    
    // currently you need to make sure these instantiations get compiled before the uses of them. -- Apr 26
    // but it's not lexical so the 'fn use' above is fine because it doesn't get compiled until later. 
    ::one(i64);
    ::two(Type, 0);
    ::one(Type);
    ::two(i64, i64);
    
    assert_eq(12, sum_size(1, i64));
    use();
    
    canary
}

#test fn arg_generic_left_to_right() = {
    push_thing :: fn($Entry: Type, self: *List(Entry), v: Entry) void #generic = self.push(v);
    arr: List(i64) = list(temp());
    i64.push_thing(arr&, 123);
    i64.push_thing(arr&, 456);
    i64.push_thing(arr&, 789);
    
    arr: List(Type) = list(temp());
    Type.push_thing(arr&, void);
    Type.push_thing(arr&, i64);
}

#test fn generic_closure() = {
    count := 0;
    sum_len_get_first :: fn($T: Type, arr: Slice(T)) T #generic => {
        count += arr.len();
        arr[0]
    };
    ::assert_eq(Str);
    v := i64.sum_len_get_first(@slice (1, 2, 3));
    assert_eq(1, v);
    v := Str.sum_len_get_first(@slice ("a", "b"));
    assert_eq("a", v);
    assert_eq(count, 5);
}

// Here it needs to know the return type of the get_first call to resolve which assert_eq overload is being called. 
//#test fn generic_call_in_arg() = {
//    get_first :: fn($T: Type, arr: Slice(T)) T #generic = arr[0];
//    assert_eq(1, i64.get_first(@slice (1, 2, 3)));
//}

// idea
//#test fn match_type() = {
//    fn push_thing(self: *List($T), v: T) void = self.push(v);
//    arr: List(i64) = list();
//    arr&.push_thing(123);
//}

#test fn const_field() = {
    S :: @struct(a: i64, $b := bool);
    
    s: S = (a = 123);
    assert_eq(s.a, 123);
    //assert_eq(s.b, bool); // TODO: should this come back? or is it better to force them to just be used as namespaces.
    
    // You can also access it on the type. 
    assert_eq(S.b, bool);
    
    // Since its constant, you can use types.
    bb: S.b = true;
    bbb :: S.b;
    
    // Constant fields don't take up space at runtime. 
    assert_eq(S.size_of(), i64.size_of());
    
    
    // Constant fields are lazy like normal constants. 
    A :: @struct(b: i64, $default: i64 = garbage_var_not_declared);
    A;
    a: A = (b = 123); 
}

#test fn generic_args_sum() = {
    // TODO: put this in the lib so the docs example works? 
    fn zero() i64 = 0;
    fn zero() f64 = 0.0;
    
    // Requires overloads for `fn zero() T` and `fn add(T, T) T`
    sum :: fn($T: Type, lst: Slice(T)) T #generic = {
        n: T = zero();
        for(lst, fn(x) => { n += x; });
        n
    };
    
    assert_eq(6, i64.sum(@slice (1, 2, 3)));
    assert_eq(6.0, f64.sum(@slice (1.0, 2.0, 3.0)));
}

// pass -no-deduplication to make this test fail. 
#test fn deduplicate_functions() = {
    {   
        // You just need to check the tag and offset the pointer over it, so the size of the inner type doesn't matter. 
        ::as_ref(i64);
        ::as_ref(Str);
        a: @FnPtr(s: *?i64) ?*i64 : as_ref;
        b: @FnPtr(s: *?Str) ?*Str : as_ref;
        aa: rawptr : a;
        bb: rawptr : b;
        assert_eq(true, aa == bb);
    };
    {
        // pointers are the same size and alignment which are the only thing the list cares about.
        a: @FnPtr(s: *List(*i64), e: *i64) void : push;
        b: @FnPtr(s: *List(*Str), e: *Str) void : push;
        aa: rawptr : a;
        bb: rawptr : b;
        assert_eq(true, aa == bb);
    };
    {
        // Here the things are different sizes so need to generate different code.
        a: @FnPtr(s: ?i64) i64 : unwrap;
        b: @FnPtr(s: ?Str) Str : unwrap;
        aa: rawptr : a;
        bb: rawptr : b;
        assert_eq(false, aa == bb);
    };
    
    {
        // They don't even have to be instantiations of the same generic. 
        // They just have to generate the same IR. 
        // This is much less useful than the above but still kinda cool. 
        add_one_a :: fn(i: i64) i64 = {
            a := 1;
            i + a
        };
        add_one_b :: fn (i: i64) i64 = {
            b := 1;  // Note: different variable name doesn't matter!
            i + b
        };
        
        aa: rawptr : add_one_a;
        bb: rawptr : add_one_b;
        assert_eq(true, aa == bb);
        
        // But this is different because it happens in the front end before optimisation (currently)
        // so it doesn't realize these have the same behaviour. 
        add_one_c :: fn (i: i64) i64 = {
            c := i;
            c + 1
        };
        cc: rawptr : add_one_c;
        assert_eq(false, aa == cc);
        
        // But this generates the same code as the first examples because structs are passed by value. 
        Holder :: @struct(value: i64);
        add_one_d :: fn (i: Holder) i64 = {
            d := 1;
            i.value + d
        };
        dd: rawptr : add_one_d;
        assert_eq(true, aa == dd);
    };
}

