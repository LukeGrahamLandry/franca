#include_std("codegen/aarch64/unwind.fr");

#noinline fn thing2() i64 = {
    // TODO: return a data structure and actually test stuff with it. 
    var trace = collect_backtrace();
    assert_eq(trace&.index(0).Franca.name[], @symbol thing2);
    assert_eq(trace&.index(1).Franca.name[], @symbol thing1);
    assert_eq(trace&.index(2).Franca.name[], @symbol main);
    assert_eq(true, trace&.len[].gt(3)); // must have got some functions from the rust side. 
    123
}

#noinline fn thing1() i64 = {
    let _ = 1.add(2);
    a := thing2(); // hack prevent tailcall (relies on lack of opt) // TODO: !never_tail attribute and !always_tail as an assertion i guess 
    a
}

#test(aarch64)
fn main(canary: i64) i64 = {
    assert_eq(123, thing1());
    canary
}
