@import(interp, collections);

fn main(_canary: i64) i64 = {
    var v: List(i64) = list(1);
    assert_eq(len(v.maybe_uninit[]), 1);
    push(v!addr, 6);  // TODO: fix error message for missing !addr from being ""abbigous call", thats not true, its not declared func
    assert_eq(len(v.maybe_uninit[]), 1);
    push(v!addr, 8);
    assert_eq(len(v.maybe_uninit[]), 4);
    push(v!addr, 9);
    assert_eq(v.len[], 3);
    assert_eq(len(v.maybe_uninit[]), 4);
    assert_eq(addr(v!addr, 0)[], 6);
    assert_eq(addr(v!addr, 1)[], 8);
    assert_eq(addr(v!addr, 2)[], 9);
    drop(v!addr);
    
    assert_eq(true, slice_eq("abcd", "abcd"));
    assert_eq(false, slice_eq("abcd", "dcba"));
    assert_eq(false, slice_eq("abcd", "abcde"));
    
    assert_eq(true, slice_eq(str(5), "5"));
    assert_eq(true, slice_eq(str(12), "12"));
    assert_eq(true, slice_eq(str(345), "345"));
    
    assert_eq(true, startswith("abcd", "ab"));
    assert_eq(true, startswith("abcd", "abcd"));
    assert_eq(false, startswith("abcd", "cd"));
    assert_eq(false, startswith("ab", "abcd"));
    assert_eq(false, startswith("aab", "ab"));
    assert_eq(true, endswith("abcd", "cd"));
    assert_eq(true, endswith("abcd", "abcd"));
    assert_eq(false, endswith("abcd", "ab"));
    assert_eq(false, endswith("ab", "abcd"));
    
    // TODO: this works with 'cargo run' but overflows its stack with 'cargo test'
    //       which like clearly my code's broken but it's really spooky that its different. 
    // let parts = split("Hello world. This is words.", " ");
    // asser t_eq(5, parts.len[]);
    
    assert_eq(4294983856, hex("00000001000040b0"));
    assert_eq(4294983856, hex("00000001000040B0"));
    
    _canary
}
 