// TODO: ! this is just a cheat for my current text based test runner
//       want to add a better comptime thing that lets you scan the program and do stuff. 

@hacktest(interp, aarch64, llvm)
fn trivial(c: i64) i64 = {
    assert_eq(42, 42);
    c
}

@hacktest(interp, aarch64, llvm)
fn trivial_indirect(c: i64) i64 = {
    @c_call fn get_42() i64 = { 42 }
    
    assert_eq(get_42(), 42);
    c
}

@hacktest(interp, aarch64, llvm)
fn test_ifa(c: i64) i64 = {
    let a = true;
    let b = (a, fn=123, fn=456)!if;
    assert_eq(b, 123);
    c
}

@hacktest(interp, aarch64, llvm)
fn test_ifb(c: i64) i64 = {
    let a = false;
    let b = (a, fn=123, fn=456)!if;
    assert_eq(b, 456);
    c
}

@hacktest(interp, aarch64, llvm)
fn math(c: i64) i64 = {
    assert_eq(20, add(5, 15));
    c
}

@hacktest(interp, aarch64, llvm)
fn test_while(c: i64) i64 = {
    var n = 4;
    var a = 0;
    (fn=ne(n, 0), fn={
        a = add(a, n);
        n = sub(n, 1);
    })!while;
    assert_eq(a, 10);
    c
}

@hacktest(interp, aarch64, llvm)
fn var_addr(c: i64) i64 = {
    var n = 3;
    var a = n;
    var b = 0;
    let a_ptr = a!addr;
    let b_ptr = b!addr;
    b_ptr[] = add(a_ptr[], 7);
    assert_eq(b, 10);
    c
}

@hacktest(interp, aarch64, llvm)
fn nested(c: i64) i64 = {
    let a = add(add(add(add(add(add(add(add(add(1, 2), 3), 4), add(5, 6)), 7), 8), add(9, add(10, 11))), 12), 13);
    assert_eq(a, 91);
    c
}
        
@hacktest(interp, aarch64, llvm)
fn use_ptr(c: i64) i64 = {
    fn inner(a: *i64, b: *i64) i64 = {
        b[] = add(a[], 1);
        add(b[], 4)
    }
    
    var a = 5;
    var b = 0;
    let ret = inner(a&, b&);
    assert_eq(ret, 10);
    assert_eq(a, 5);
    assert_eq(b, 6);
    
    c
}

@hacktest(interp, aarch64, llvm)
fn float_calling_conv1(c: i64) i64 = {
    fn inner(a: f64, b: f64) f64 = a;
    assert_eq(inner(1.0, 2.0), 1.0);
    c
}

@hacktest(interp, aarch64, llvm)
fn float_calling_conv2(c: i64) i64 = {
    fn inner(a: f64, b: f64) f64 = b;
    assert_eq(inner(1.0, 2.0), 2.0);
    c
}

@hacktest(interp, aarch64, llvm)
fn add_floats(c: i64) i64 = {
    assert_eq(add(1.0, 2.5), 3.5);
    c
}

//////////
/// BROKEN

/* TODO
@t est(interp, aarch64, llvm)
fn recursion(c: i64) i64 = {
    fn r(n: i64) i64 = {
        (le(n, 1),
            fn = 1,
            fn = add(r(sub(n, 1)), r(sub(n, 2))),
        )!if
    }
    
    a ssert_eq(r(5), 8);
    c
}
*/

/* TODO
@t est(interp, aarch64)
fn use_any_reg(c: i64) i64 = {
    @any_reg
    fn sub2(a: i64, b: i64) i64 = (fn(data: OpPtr, op: RetOp, r: Slice(u5)) Unit = {
        op(data, sub_sr(Bits.X64[], get(r, 2), get(r, 0), get(r, 1), Shift.LSL[], 0b000000));
    });
    
    a ssert_eq(sub2(5, 3), 2);
    c
}
*/

@test(interp, aarch64, llvm)
fn main(c: i64) i64 = {
    assert_eq(c, trivial(c));
    assert_eq(c, trivial_indirect(c));
    assert_eq(c, test_ifa(c)); 
    assert_eq(c, test_ifb(c));
    assert_eq(c, nested(c)); 
    assert_eq(c, math(c));  
    assert_eq(c, test_while(c)); 
    assert_eq(c, var_addr(c)); 
    assert_eq(c, use_ptr(c)); 
    assert_eq(c, float_calling_conv1(c)); 
    assert_eq(c, float_calling_conv2(c)); 
    assert_eq(c, add_floats(c)); 
    c
}
