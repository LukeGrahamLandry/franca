#test
fn trivial(c: i64) i64 = {
    assert_eq(42, 42);
    c
}

#test
fn intrinsics_georg() = {
    fn my_new_secret_add(a: i64, b: i64) i64 #intrinsic(Intrinsic.Add);
    assert_eq(my_new_secret_add(1, 2), 3);
    
    function_pointer: @FnPtr(a: i64, b: i64) i64 : my_new_secret_add;
    assert_eq(function_pointer(1, 2), 3);
}

#test
fn intrinsics_georg_float() = {
    fn my_new_secret_add(a: f64, b: f64) f64 #intrinsic(Intrinsic.FAdd);
    assert_eq(my_new_secret_add(1, 2), 3);
    
    function_pointer: @FnPtr(a: f64, b: f64) f64 : my_new_secret_add;
    assert_eq(function_pointer(1, 2), 3);
}

#test
fn trivial_indirect(c: i64) i64 = {
    #c_call fn get_42() i64 = { 42 }
    
    assert_eq(get_42(), 42);
    c
}

#test
fn test_ifa(c: i64) i64 = {
    a := true;
    b := if(a, =>123, =>456);
    assert_eq(b, 123);
    c
}

#test
fn test_ifb(c: i64) i64 = {
    a := false;
    b := if(a, =>123, =>456);
    assert_eq(b, 456);
    c
}

#test
fn math(c: i64) i64 = {
    assert_eq(20, add(5, 15));
    c
}

#test
fn test_while(c: i64) i64 = {
    n := 4;
    a := 0;
    while(=>ne(n, 0), =>{
        a = add(a, n);
        n = sub(n, 1);
    });
    assert_eq(a, 10);
    c
}

#test
fn var_addr(c: i64) i64 = {
    n := 3;
    a := n;
    b := 0;
    a_ptr := a&;
    b_ptr := b&;
    b_ptr[] = add(a_ptr[], 7);
    assert_eq(b, 10);
    c
}

#test
fn nested(c: i64) i64 = {
    a := add(add(add(add(add(add(add(add(add(1, 2), 3), 4), add(5, 6)), 7), 8), add(9, add(10, 11))), 12), 13);
    assert_eq(a, 91);
    c
}

#test
fn use_ptr(c: i64) i64 = {
    fn inner(a: *i64, b: *i64) i64 = {
        b[] = add(a[], 1);
        add(b[], 4)
    }
    
    a := 5;
    b := 0;
    ret := inner(a&, b&);
    assert_eq(ret, 10);
    assert_eq(a, 5);
    assert_eq(b, 6);
    
    c
}

#test
fn float_calling_conv1(c: i64) i64 = {
    fn inner(a: f64, b: f64) f64 = a;
    assert_eq(inner(1.0, 2.0), 1.0);
    c
}

#test
fn float_calling_conv2(c: i64) i64 = {
    fn inner(a: f64, b: f64) f64 = b;
    assert_eq(inner(1.0, 2.0), 2.0);
    c
}

#test
fn add_floats(c: i64) i64 = {
    assert_eq(add(1.0, 2.5), 3.5);
    c
}

#test
fn branching_uninit_var(c: i64) i64 = {
    t := i64.uninitialized();
    a := true;
    if(a, => {
        t = 123;
    }, => {
        t = 456;
    });
    c
}

// TODO: explicit @runtime(E) so I can force tests to not constant fold even when that gets smarter,
//       and #comptime so you can assert that there's no runtime branch.
// TODO: 'fn if' never folds anyway so you can't use that for conditional compilation. 
//       putting @inline on it would fix if I folded through 'let' which I probably want anyway. 
// TODO: it would be cool if you could overload on const-ness of args. 
//       ie. `fn mod` could become a bit shift if it was a const known power of two. 

// this failed on interp when it dropped the shadowed var to early. 
#test
fn shadow_aliased(c: i64) i64 = {
    b := 123;
    b := b&;
    assert_eq(b[], 123);
    c
}

#test
fn an_uninit_var(c: i64) i64 = {
    t := i64.uninitialized();
    c
}

#test
fn fields(c: i64) i64 = {
    fn inner(n: i64) i64 = {
        A :: @struct(a: i64, b: i64);
        a: A = (a = n, b = 0);
        a.b = add(a.a, 7);
        a.b
    }
    
    assert_eq(inner(3), 10);
    c
}

#test
fn single_nested_struct(canary: i64) i64 = {
    A :: @struct(a: i64, b: i64);
    B :: @struct(c: A);
    
    assert_eq(A.size_of(), B.size_of());
    
    f: A = (a = 1, b = 2);
    thing: B = (c = f);
    
    a := thing.c.a;
    assert_eq(a, 1);
    b := thing.c.b;
    assert_eq(b, 2);
    
    canary
}

#test
fn nested_struct(canary: i64) i64 = {
    A :: @struct(a: i64, b: i64);
    B :: @struct(fst: A, snd: i64);
    
    assert_eq(A.size_of(), i64.size_of().mul(2));
    assert_eq(B.size_of(), i64.size_of().mul(3));
    
    f: A = (a = 1, b = 2);
    thing: B = (fst = f, snd = 3);
    
    c := thing.snd;
    assert_eq(c, 3);
    a := thing.fst.a;
    assert_eq(a, 1);
    b := thing.fst.b;
    assert_eq(b, 2);
    
    canary
}

// This caused interp to drop Poison when I just added to result.to_drop for !slice,
// because the branch that wasn't taken didn't get initilized. 
// Originally found much more confusing case in @switch,
// because !unquote uses !slice to pass the placeholder arguments to the compiler. 
// Fixed by having !slice backing slots dropped at the end of the block, not the function.
#test
fn branching_slice(c: i64) i64 = {
    if(true, => {
        a := @slice (1, 2, 3);
    }, => {
        b := @slice (4, 5, 6);
    });
    c
}

#test
fn escaping_pointer(c: i64) i64 = {
    fn use_it(old: **i64, p: *i64) void = {
        p[] = old[][];
        old[] = p;
    };
    x := 123;
    y := 456;
    z := 789;
    old := x&;
    use_it(old&, y&);
    use_it(old&, z&);
    assert_eq(y, 123);
    assert_eq(z, 123);
    
    c
}

#test
fn varient(c: i64) i64 = {
    fn inner(n: i64) i64 = {
        A :: @tagged(a: i64, b: i64);
        a: A = (a = n);
        add(a.a, 7)
    }
    
    assert_eq(inner(3), 10);
    c
}

#test
fn use_str(c: i64) i64 = {
    s: Str = "hello";
    assert_eq(len(s), 5);
    c
}

#test fn normal_recursion() = {
    fn fib(n: i64) i64 = {
        if(le(n, 1),
            fn() i64 => 1,
            fn() i64 => add(fib(n.sub(1)), fib(n.sub(2))),
        )
    }
    
    assert_eq(fib(5), 8);
}

#test fn mutual_recursion() = {
    fn do_1(n: i64) i64 = if(n.eq(2), => do_2(n), => 1);
    fn do_2(n: i64) i64 = if(n.eq(1), => do_1(n), => 2);

    assert_eq(do_2(2), 2);
    assert_eq(do_1(1), 1);
    assert_eq(do_1(2), 2);
}

#test fn out_of_order(canary: i64) i64 = {
    assert_eq(two(), 5);
    
    fn two() i64 = one();
    fn one() i64 = FIVE;
    FIVE :: FOUR.add(1);
    FOUR :: THREE.add(1);
    
    canary
}

THREE :: three;
three :: 3;

#test
fn return_an_if(c: i64) i64 = {
    // This makes you do a jump to the return block. so have to tell cranelift about block parameters correctly. 
    fn hhhh(a: i64) i64 = if(a.gt(2), => 123, => 456);
    assert_eq(hhhh(1), 456);
    assert_eq(hhhh(3), 123);
    c
}

#test
fn if_return_panic() = {
    // this makes sure you can spoof a Never being the right type. 
    // ie. cranelift: arguments of return must match function signature
    fn require_zero(i: i64) i64 =
        if(i.eq(0), => 0, => @as(i64) panic("non-zero"));
    
    assert_eq(0, require_zero(0));
}

#test fn dot_field_init_tagged() = {
    // since payload is unit, don't have to do (None = unit).
    a: ?i64 = .None; 
    assert_eq(true, a.is_none());
    
    MixedPayloads :: @tagged(b: i64, c, d: bool);
    :: tagged(MixedPayloads); :: assert_eq(MixedPayloads.Tag());
    e: MixedPayloads = .c; 
    assert_eq(e&.tag(), .c);
    f := MixedPayloads.c;
    assert_eq(f&.tag(), .c);
    
    // TODO: this is a footgun. it doesn't change the tag. and currently it doesn't even do a tag check! -- Jun 4
    // e.b = 123;
    //assert_eq(0, e&.tag().ordinal());
}

#test fn vs_qbe() = {
    fn get_two() Ty(f64, f64) = (123.0, 456.0);
    
    a := get_two();
}

// This doesn't work on cranelift/llvm because i say ?u32 === (i64, i64) which isnt true
#test fn option_small_payload() = {
    fn get_maybe() ?u32 = (Some = 123.trunc());
    a := get_maybe();
}

// The above works with just prims hack for return type but this none version needs the padding to have the right types too. 
#test fn option_small_payload_n() = {
    fn get_maybe() ?u32 = .None;
    a := get_maybe();
}

#test fn macro_in_const_cloned() = {
    fn get_memory($id: i64) *i64 = {
        ptr :: @static(i64) id;
        assert_eq(ptr[], id);
        ptr
    }
    // TODO: this doesn't work on llvm, presumably because bake value does the wrong thing? :FUCKED -- Jul 10
    :: {
        one := 1.get_memory();
        assert_eq(one[], 1);
        two := 2.get_memory();
        assert_eq(one[], 1);
        assert_eq(two[], 2);
        three := 3.get_memory();
        assert_eq(one[], 1);
        assert_eq(two[], 2);
        assert_eq(three[], 3);
        
        ptr_1a := i64.int_from_ptr(one);
        ptr_1b := i64.int_from_ptr(1.get_memory());
        assert_eq(ptr_1a, ptr_1b);
    };
}

// this didn't work on new backend when i wasn't doing DataAbsolute relocs correctly 
// (the memory has to be 0 because its added to the symbol address).
#test fn trivial_data_reloc() = {
    v_chair :: @static(@FnPtr() i64);
    :: {
        v_chair[] = f_chair;
    };
    f_chair :: fn() i64 = 5;
    
    x := v_chair[]();
}
