// TODO: ! this is just a cheat for my current text based test runner
//       want to add a better comptime thing that lets you scan the program and do stuff. 

#hacktest(aarch64, llvm)
fn trivial(c: i64) i64 = {
    assert_eq(42, 42);
    c
}

#hacktest(aarch64, llvm)
fn trivial_indirect(c: i64) i64 = {
    #c_call fn get_42() i64 = { 42 }
    
    assert_eq(get_42(), 42);
    c
}

#hacktest(aarch64, llvm)
fn test_ifa(c: i64) i64 = {
    let a = true;
    let b = (a, fn=123, fn=456)!if;
    assert_eq(b, 123);
    c
}

#hacktest(aarch64, llvm)
fn test_ifb(c: i64) i64 = {
    let a = false;
    let b = (a, fn=123, fn=456)!if;
    assert_eq(b, 456);
    c
}

#hacktest(aarch64, llvm)
fn math(c: i64) i64 = {
    assert_eq(20, add(5, 15));
    c
}

#hacktest(aarch64, llvm)
fn test_while(c: i64) i64 = {
    var n = 4;
    var a = 0;
    (fn=ne(n, 0), fn={
        a = add(a, n);
        n = sub(n, 1);
    })!while;
    assert_eq(a, 10);
    c
}

#hacktest(aarch64, llvm)
fn var_addr(c: i64) i64 = {
    var n = 3;
    var a = n;
    var b = 0;
    let a_ptr = a!addr;
    let b_ptr = b!addr;
    b_ptr[] = add(a_ptr[], 7);
    assert_eq(b, 10);
    c
}

#hacktest(aarch64, llvm)
fn nested(c: i64) i64 = {
    let a = add(add(add(add(add(add(add(add(add(1, 2), 3), 4), add(5, 6)), 7), 8), add(9, add(10, 11))), 12), 13);
    assert_eq(a, 91);
    c
}

#hacktest(aarch64, llvm)
fn use_ptr(c: i64) i64 = {
    fn inner(a: *i64, b: *i64) i64 = {
        b[] = add(a[], 1);
        add(b[], 4)
    }
    
    var a = 5;
    var b = 0;
    let ret = inner(a&, b&);
    assert_eq(ret, 10);
    assert_eq(a, 5);
    assert_eq(b, 6);
    
    c
}

#hacktest(aarch64, llvm)
fn float_calling_conv1(c: i64) i64 = {
    fn inner(a: f64, b: f64) f64 = a;
    assert_eq(inner(1.0, 2.0), 1.0);
    c
}

#hacktest(aarch64, llvm)
fn float_calling_conv2(c: i64) i64 = {
    fn inner(a: f64, b: f64) f64 = b;
    assert_eq(inner(1.0, 2.0), 2.0);
    c
}

#hacktest(aarch64, llvm)
fn add_floats(c: i64) i64 = {
    assert_eq(add(1.0, 2.5), 3.5);
    c
}

#hacktest(aarch64, llvm)
fn branching_uninit_var(c: i64) i64 = {
    var t: i64 = ()!uninitialized;
    let a = true;
    if(a, fn = {
        t = 123;
    }, fn = {
        t = 456;
    });
    c
}

// TODO: explicit @runtime(E) so I can force tests to not constant fold even when that gets smarter,
//       and #comptime so you can assert that there's no runtime branch.
// TODO: 'fn if' never folds anyway so you can't use that for conditional compilation. 
//       putting @inline on it would fix if I folded through 'let' which I probably want anyway. 
// TODO: it would be cool if you could overload on const-ness of args. 
//       ie. `fn mod` could become a bit shift if it was a const known power of two. 

// this failed on interp when it dropped the shadowed var to early. 
#hacktest(aarch64, llvm)
fn shadow_aliased(c: i64) i64 = {
    var b = 123;
    let b = b&;
    assert_eq(b[], 123);
    c
}

/* TODO: this should be legal on interp too, but really I want explicit @uninitialized()
#hacktest(aarch64, llvm)
fn an_uninit_var(c: i64) i64 = {
    var t: i64;
    c
}
*/

#hacktest(aarch64, llvm)
fn fields(c: i64) i64 = {
    fn inner(n: i64) i64 = {
        const A = (a: i64, b: i64)!struct;
        var a: A = (a: n, b: 0);
        a&.b[] = add(a&.a[], 7);
        a&.b[]
    }
    
    assert_eq(inner(3), 10);
    c
}

#hacktest(aarch64, llvm)
fn single_nested_struct(canary: i64) i64 = {
    const A = (a: i64, b: i64)!struct;
    const B = (c: A)!struct;
    
    assert_eq(A.size_of(), B.size_of());
    
    let f: A = (a: 1, b: 2);
    var thing: B = (c: f);
    
    let a = thing&.c.a[];
    assert_eq(a, 1);
    let b = thing&.c.b[];
    assert_eq(b, 2);
    
    canary
}


// TODO: this doesn't work on llvm becuase ((a, b), c) is not seen as (a, b, c)
#hacktest(aarch64, llvm)
fn nested_struct(canary: i64) i64 = {
    const A = (a: i64, b: i64)!struct;
    const B = (fst: A, snd: i64)!struct;
    
    assert_eq(A.size_of(), i64.size_of().mul(2));
    assert_eq(B.size_of(), i64.size_of().mul(3));
    
    let f: A = (a: 1, b: 2);
    var thing: B = (fst: f, snd: 3);
    
    let c = thing&.snd[];
    assert_eq(c, 3);
    let a = thing&.fst.a[];
    assert_eq(a, 1);
    let b = thing&.fst.b[];
    assert_eq(b, 2);
    
    canary
}


// This caused interp to drop Poison when I just added to result.to_drop for !slice,
// because the branch that wasn't taken didn't get initilized. 
// Originally found much more confusing case in @switch,
// because !unquote uses !slice to pass the placeholder arguments to the compiler. 
// Fixed by having !slice backing slots dropped at the end of the block, not the function.
#hacktest(aarch64, llvm)
fn branching_slice(c: i64) i64 = {
    if(true, fn = {
        let a = (1, 2, 3)!slice;
    }, fn = {
       let b = (4, 5, 6)!slice;
    });
    c
}

#hacktest(aarch64, llvm)
fn escaping_pointer(c: i64) i64 = {
    fn use_it(old: **i64, p: *i64) Unit = {
        p[] = old[][];
        old[] = p;
    };
    var x = 123;
    var y = 456;
    var z = 789;
    var old = x&;
    use_it(old&, y&);
    use_it(old&, z&);
    assert_eq(y, 123);
    assert_eq(z, 123);
    
    c
}

#hacktest(aarch64, llvm)
fn varient(c: i64) i64 = {
    fn inner(n: i64) i64 = {
        const A = (a: i64, b: i64)!enum;
        var a: A = (a: n);
        add(a&.a[], 7)
    }
    
    assert_eq(inner(3), 10);
    c
}

// TODO: I really need to make @test work in a less painful way. 

#test(aarch64, llvm)
fn main(c: i64) i64 = {
    assert_eq(c, trivial(c));
    assert_eq(c, trivial_indirect(c));
    assert_eq(c, test_ifa(c)); 
    assert_eq(c, test_ifb(c));
    assert_eq(c, nested(c)); 
    assert_eq(c, math(c));  
    assert_eq(c, test_while(c)); 
    assert_eq(c, var_addr(c)); 
    assert_eq(c, use_ptr(c)); 
    assert_eq(c, float_calling_conv1(c)); 
    assert_eq(c, float_calling_conv2(c)); 
    assert_eq(c, add_floats(c)); 
    assert_eq(c, branching_uninit_var(c)); 
    assert_eq(c, shadow_aliased(c)); 
    assert_eq(c, fields(c)); 
    assert_eq(c, single_nested_struct(c));
    assert_eq(c, nested_struct(c));
    assert_eq(c, branching_slice(c)); 
    assert_eq(c, escaping_pointer(c)); 
    assert_eq(c, varient(c)); 
    
    c
}

//////////
/// BROKEN

/* TODO
@t est(interp, aarch64, llvm)
fn recursion(c: i64) i64 = {
    fn r(n: i64) i64 = {
        (le(n, 1),
            fn = 1,
            fn = add(r(sub(n, 1)), r(sub(n, 2))),
        )!if
    }
    
    a ssert_eq(r(5), 8);
    c
}
*/

/* TODO
@t est(interp, aarch64)
fn use_any_reg(c: i64) i64 = {
    @any_reg
    fn sub2(a: i64, b: i64) i64 = (fn(data: OpPtr, op: RetOp, r: Slice(u5)) Unit = {
        op(data, sub_sr(Bits.X64, get(r, 2), get(r, 0), get(r, 1), Shift.LSL, 0b000000));
    });
    
    a ssert_eq(sub2(5, 3), 2);
    c
}
*/
