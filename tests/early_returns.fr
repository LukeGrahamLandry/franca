#test fn simple_return() = {
    is_even :: fn(i: i64) bool = {
        ret :: return;
        if(i.mod(2).eq(0)){
            ret(true);
        };
        
        false
    };
    
    a := is_even(4);
    a := is_even(5);
    
    assert_eq(true, is_even(4));
    assert_eq(false, is_even(5));
}

#test fn break_from_loop() = {
    numbers := @slice (1, 2, 3, 4, 5, 6);
    
    index_of :: fn(self: Slice(i64), goal: i64) i64 = {
        ret :: return;
        enumerate self {i, v|
            if(goal.eq(v[])){
                ret(i);
            };
        };
        
        1.neg()
    };
    
    assert_eq(numbers.index_of(3), 2);
    assert_eq(numbers.index_of(10), 1.neg());
}

/// constants dont get renumbered so they dont work well with closures. 
#test 
fn fancy_while_break() = {
    i := 0;
    whileb(=> i.lt(100)){$break|
        i += 1;
        if(i.ge(5)){
            break();
        };
    };
    assert_eq(i, 5);
}

#test 
fn fancy_while_continue() = {
    i := 0;
    whilec(=> i.lt(10)){$continue|
        i += 1;
        if(i.ge(5)){
            continue();
        };
        
        assert(i.lt(5), "continue didn't exit");
    };
    assert_eq(i, 10); // the loop should still have done all iterations. 
}

//#test #skip_cranelift
fn tail_calls(canary: i64) i64 = {
    fn add_slow(a: i64, b: i64) i64 #no_trace =  // TODO: fix stack trace + tail calls
        if(b.eq(0), => a, => add_slow(a.add(1), b.sub(1)));
    
    N :: 174490;
    assert_eq(N, add_slow(0, N));
    
    canary
}

#test 
fn write_while_with_loop() = {
    fn new_while($cond: Fn(void, bool), $body: Fn(void, void)) void = {
        break :: return;
        loop(=> if(cond(), body, => break()));
    }
    
    i := 0;
    new_while(=> i.lt(10)) {
        j := 0;
        new_while(=> j.lt(10), => { j += 1; });
        assert(eq(j, 10), "fail");
        i += 1;
    };
    assert_eq(i, 10);
}

// this was from c_bindgen/should_jit
// if you try to just return(true/false) in those branches,
// it always returns the first branch. same if you use two ifs instead of switch. same either if you have blocks or just => return.
// but i cant reporduce it so maybe it got fixed elsewhere
// this has a different problem whcih feels related. 
// segfault in memmove somehow, i dont see why we're even calling that.
// oh its in the compiler. when you @panic with no fmt args
#test fn early_return_branching() = {
    fn should_jit(i: i64) i64 = {
        @switch(i) {
            @case(0) => {
                return(7);
            };
            @case(1) => {
                return(5);
            };
            @case(2) => {
                return(should_jit(i + 1));
            };
            @case(3) => ();
            @default => @panic("bad");
        };
        123
    }
    
    assert_eq(5, should_jit(1));
    assert_eq(7, should_jit(0));
    assert_eq(123, should_jit(2));
}

#test fn early_return_branching2() = {
    fn should_jit(args: Slice(Str)) bool = {
        for args { s |
            @switch(s) {
                @case("-aot") => { 
                    return(false);
                };
                @case("-jit") => {
                    return(true);
                };
                @default => ();
            };
        };
        panic("pass -jit or -aot");
        true
    }
    
    assert_eq(true, should_jit(@slice("-jit", "")));
    assert_eq(false, should_jit(@slice("-aot", "")));
}

// - discovered when writing codemap 
// specificlly doesn't work with my llvm backend, aarch64jit is fine
// the problem was that it thought the block exit should have 0 args because its trailing expression was type Never,
// but because of the early return, the type of the block is Str so have to look at that instead. 
// Note that early return from a function is forwarded to being the same as a local return from the block. -- Aug 20
#test fn block_never_unify_early_return_type() = {  // :block_never_unify_early_return_type
    want_zero :: fn(i: i64) Str #log_bc = {
        ret :: return;
        if(i.eq(0)) {
            ret("zero");
        };
        panic("expected zero")
    };
    
    :: assert_eq(Str);
    assert_eq("zero", want_zero(0));
}
