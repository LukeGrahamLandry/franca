#test fn simple_return() = {
    is_even :: fn(i: i64) bool = {
        ret :: __return;
        if(i.mod(2).eq(0)){|
            ret(true);
        };
        
        false
    };
    
    a := is_even(4);
    a := is_even(5);
    
    assert_eq(true, is_even(4));
    assert_eq(false, is_even(5));
}

#test fn break_from_loop() = {
    numbers := (1, 2, 3, 4, 5, 6)!slice;
    
    index_of :: fn(self: Slice(i64), goal: i64) i64 = {
        ret :: __return;
        self.enumerate {(i: i64, v: *i64)|
            if(goal.eq(v[])){|
                ret(i);
            };
        };
        
        1.neg()
    };
    
    assert_eq(numbers.index_of(3), 2);
    assert_eq(numbers.index_of(10), 1.neg());
}
