// Last I checked this does work on interp too, its just so slow its unpleasent to have as part of tests. 

fn run(code: Str, mem: *List(i64), input: *List(i64), output: *List(i64)) Unit = {
    var i = 0;
    var ptr = 0;
    var cursor = 0;
    while(fn= i.lt(code&.len[])) {|
        let c = code.get(i);
        
        (c.eq(@as(i64) Bf.Inc[]), fn= {
            let p: *i64 = mem.index(ptr);
            p[] = p[].add(1);
        }, fn=
        (c.eq(@as(i64) Bf.Dec[]), fn= {
            let p: *i64 = mem.index(ptr);
            p[] = p[].sub(1);
        }, fn=
        (c.eq(@as(i64) Bf.Right[]), fn= {
            ptr = ptr.add(1);
        }, fn=
        (c.eq(@as(i64) Bf.Left[]), fn= {
            ptr = ptr.sub(1);
        }, fn=
        (c.eq(@as(i64) Bf.Output[]), fn= {
            output.push(mem.get(ptr));
        }, fn=
        (c.eq(@as(i64) Bf.Input[]), fn= {
            let p: *i64 = mem.index(ptr);
            p[] = input.get(cursor);
            cursor = cursor.add(1);
        }, fn=
        (c.eq(@as(i64) Bf.Open[]), fn= {
            let cond: *i64 = mem.index(ptr);
            if(cond[].eq(0)) {|
                var count = 1;
                i = i.add(1);
                while(fn= count.ne(0)) {|
                    let c = code.get(i);
                    (c.eq(@as(i64) Bf.Open[]), fn= {
                        count = count.add(1);
                    }, fn=
                    if(c.eq(@as(i64) Bf.Close[])){|
                        count = count.sub(1);
                    })!if;
                    i = i.add(1);
                };
                i = i.sub(1);  // because end of loop adds again
            };
        }, fn=
        (c.eq(@as(i64) Bf.Close[]), fn= {
            let cond: *i64 = mem.index(ptr);
            if(cond[].ne(0)) {|
                var count = 1;
                i = i.sub(1);
                while(fn= count.ne(0)) {|
                    let c = code.get(i);
                    if(c.eq(@as(i64) Bf.Open[])) {|
                        count = count.sub(1);
                    }{| if(c.eq(@as(i64) Bf.Close[])) {|
                        count = count.add(1);
                    }};
                    i = i.sub(1);
                };
            };
        }, fn=()
        )!if)!if)!if)!if)!if)!if)!if)!if;
        
        i = i.add(1);
    };
}

@test(aarch64)
fn main(canary: i64) i64 = {
    var mem: List(i64) = repeated(0, 30000);
    var input: List(i64) = list(0);
    var output: List(i64) = list(50);
    
    // From https://esolangs.org/wiki/Brainfuck#Hello,_World!
    // TODO: add back the '.' for new line once I can do \n in string literals for the test. 
    let hello = "++++++++[>++++[>++>+++>+++>+<<<<-]>+>+>->>+[<]<-]>>.>---.+++++++..+++.>>.<-.<.+++.------.--------.>>+.>++";  
    run(hello.str(), mem&, input&, output&);
    var out = output&.items();
    assert_eq(true, eq(out, "Hello World!".str()));
    
    canary
}
