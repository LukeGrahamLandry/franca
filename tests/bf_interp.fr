// Last I checked this does work on interp too, its just so slow its unpleasent to have as part of tests. 

fn run(var code: Str, mem: *List(u8), input: *List(u8), output: *List(u8)) void = {
    var i = 0;
    var ptr = 0;
    var cursor = 0;
    
    while(=> i.lt(code.len)) {|
        let c: i64 = code.get(i).zext();
        
        @switch(@as(u8) c.trunc()) {
            @case(Bf.Inc) => {
                let p: *u8 = mem.index(ptr);
                p[] = p[].add(@as(u8) 1.trunc());
            };
            @case(Bf.Dec) => {
                let p: *u8 = mem.index(ptr);
                p[] = p[].sub(@as(u8) 1.trunc());
            };
            @case(Bf.Right) => {
                ptr = ptr.add(1);
            };
            @case(Bf.Left) => {
                ptr = ptr.sub(1);
            };
            @case(Bf.Output) => {
                output.push(mem.get(ptr));
            };
            @case(Bf.Input) => {
                let p: *u8 = mem.index(ptr);
                p[] = input.get(cursor);
                cursor = cursor.add(1);
            };
            @case(Bf.Open) => {
                let cond: *u8 = mem.index(ptr);
                if(cond[].eq(@as(u8) 0.trunc())) {|
                    var count = 1;
                    i = i.add(1);
                    while(=> count.ne(0)) {|
                        c := code.get(i);
                        (c.eq(@as(u8) Bf.Open), => {
                            count = count.add(1);
                        }, =>
                        if(c.eq(@as(u8) Bf.Close)){|
                            count = count.sub(1);
                        })!if;
                        i = i.add(1);
                    };
                    i = i.sub(1);  // because end of loop adds again
                };
            };
            @case(Bf.Close) => {
                let cond: *u8 = mem.index(ptr);
                if(cond[].ne(@as(u8) 0.trunc())) {|
                    var count = 1;
                    i = i.sub(1);
                    while(=> count.ne(0)) {|
                        c:= code.get(i);
                        if(c.eq(@as(u8) Bf.Open)) {|
                            count = count.sub(1);
                        }{| if(c.eq(@as(u8) Bf.Close)) {|
                            count = count.add(1);
                        }};
                        i = i.sub(1);
                    };
                };
            };
            @default() fn(c: u8) => ();
        };
        i = i.add(1);
    };
}

#test
fn bf_interp(canary: i64) i64 = {
    var mem: List(u8) = repeated(@as(u8) 0.trunc(), 30000, libc_allocator);
    var input: List(u8) = list(0, libc_allocator);
    var output: List(u8) = list(50, libc_allocator);
    
    // From https://esolangs.org/wiki/Brainfuck#Hello,_World!
    // add back the dot for \n
    let hello = "++++++++[>++++[>++>+++>+++>+<<<<-]>+>+>->>+[<]<-]>>.>---.+++++++..+++.>>.<-.<.+++.------.--------.>>+.>++";  
    run(hello, mem&, input&, output&);

    var out = output&.items();
    pass := eq(out, "Hello World!");
    assert_eq(true, pass);
    
    canary
}
