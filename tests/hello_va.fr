// Declare and call functions that use the extern-c varargs calling convention. 
fn hello_va() void #test = {
    a := add_ints_and_floats(true, 3, @va(1, 2.5, 3));
    b := add_ints_and_floats(false, 4, @va(a, 4, 5.0, 5, 999999)); // last arg won't be seen since we lied about the count
    
    snprintf :: fn(buf: *u8, len: i64, fmt: CStr, _: CVariadic) i64 #libc;

    buf := zeroed Array(u8, 64);
    name: CStr = "World";
    // TODO: not being able to have both \n and the auto coerce to CStr is ass 
    snprintf(buf&.as_ptr(), 64, "Hello %s! %d %g", @va(name, 123, b));  // c abi variadic call!
    @assert_eq(str(@as(CStr) (ptr = buf&.as_ptr())), "Hello World! 123 20.5");
    @assert_eq(b, 20.5);
    
    // works at comptime of course:
    c :: add_ints_and_floats(true, 2, @va(3, 4.0));
    sane :: clamp(c, 0, 4096);  // just in case...
    n: Array(i64, sane) = (0, 0, 0, 0, 0, 0, 0);
    
    // call through a function pointer like normal
    F :: @FnPtr(start_with_int: bool, count: i64, _: CVariadic) f64;
    f: F = add_ints_and_floats;
    d := f(false, 2, @va(-2.0, 3));
    @assert_eq(d, 1);
}

// SAD LIMITATION: variadic functions defined in franca cannot use secret dynamic env parameter on amd64. 
// arguments alternate f64 and i64
add_ints_and_floats :: fn(start_with_int: bool, count: i64, va: CVariadic) f64 = {
    args := va&.start();
    acc := 0.0;
    range(0, count) { i |
        acc += if mod(i + int(start_with_int), 2) == 0 {
            args.next(f64)
        } else {
            args.next(i64).float()
        };
    };
    acc
};

#use("@/lib/variadic.fr");
