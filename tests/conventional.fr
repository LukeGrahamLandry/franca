
// bare minimum c abi. 8 ints in x0-x7, one return in x0. 
#test fn many_ints() = {
    #no_inline #c_call
    fn hello_world(a: i64, b: i64, c: i64, d: i64, e: i64, f: i64, g: i64, h: i64) i64 = {
        assert_eq(a, 1);
        assert_eq(b, 2);
        assert_eq(c, 3);
        assert_eq(d, 4);
        assert_eq(e, 5);
        assert_eq(f, 6);
        assert_eq(g, 7);
        assert_eq(h, 8);
        9
    }
    assert_eq(9, hello_world(1, 2, 3, 4, 5, 6, 7, 8));
}

// Strings are pairs. 16 byte structs are probably still passed in registers? 
#test fn many_strings() = {
    ::assert_eq(Str);
    
    #no_inline #c_call
    fn hello_world(a: Str, b: Str, c: Str, d: Str) i64 = {
        assert_eq(a, "one");
        assert_eq(b, "two");
        assert_eq(c, "three");
        assert_eq(d, "four");
        1
    }
    assert_eq(1, hello_world("one", "two", "three", "four"));
}

#test fn many_floats() = {
    #no_inline #c_call
    fn hello_world(a: f64, b: f64, c: f64, d: f64, e: f64, f: f64, g: f64, h: f64) f64 = {
        assert_eq(a, 1.0);
        assert_eq(b, 2.0);
        assert_eq(c, 3.0);
        assert_eq(d, 4.0);
        assert_eq(e, 5.0);
        assert_eq(f, 6.0);
        assert_eq(g, 7.0);
        assert_eq(h, 8.0);
        10.0
    }
    assert_eq(10.0, hello_world(1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0));
}

#test fn mixed_ints_floats() = {
    #no_inline #c_call
    fn hello_world(a: f64, aa: i64, b: f64, bb: i64, c: f64, cc: i64, d: f64, dd: i64) i64 = {
        assert_eq(a, 1.0);
        assert_eq(b, 2.0);
        assert_eq(c, 3.0);
        assert_eq(d, 4.0);
        assert_eq(aa, 1);
        assert_eq(bb, 2);
        assert_eq(cc, 3);
        assert_eq(dd, 4);
        11
    }
    assert_eq(11, hello_world(1.0, 1, 2.0, 2, 3.0, 3, 4.0, 4));
    
    // TODO: test all these against a c compiler so can see if im actually right or just consistant on caller vs callee sides. 
    // This is the situation from the mandelbrot example that got messed up by only shifting float_mask by one for any struct. 
    Pair :: @struct(x: f64, y: f64);
    #no_inline #c_call
    fn hello2(a: Pair, b: Pair, c: i64) i64 = {
        assert_eq(a.x, 1.0);
        assert_eq(a.y, 2.0);
        assert_eq(b.x, 3.0);
        assert_eq(b.y, 4.0);
        assert_eq(c, 5);
        13
    }
    // TODO: @as(Pair) isn't enough of a type hint somehow
    a: Pair = (x = 1.0, y = 2.0);
    b: Pair = (x = 3.0, y = 4.0);
    assert_eq(13, hello2(a, b, 5))
}



// TODO: c_call shouldn't just be based on argument count because you also use float registers
#test_broken fn many_mixed_ints_floats() = {
    #no_inline #c_call
    fn hello_world(a: f64, aa: i64, b: f64, bb: i64, c: f64, cc: i64, d: f64, dd: i64, e: f64, ee: i64, f: f64, ff: i64, g: f64, gg: i64, h: f64, hh: i64) i64 = {
        assert_eq(a, 1.0);
        assert_eq(b, 2.0);
        assert_eq(c, 3.0);
        assert_eq(d, 4.0);
        assert_eq(e, 5.0);
        assert_eq(f, 6.0);
        assert_eq(g, 7.0);
        assert_eq(h, 8.0);
        assert_eq(aa, 1);
        assert_eq(bb, 2);
        assert_eq(cc, 3);
        assert_eq(dd, 4);
        assert_eq(ee, 5);
        assert_eq(ff, 6);
        assert_eq(gg, 7);
        assert_eq(hh, 8);
        11
    }
    assert_eq(11, hello_world(1.0, 1, 2.0, 2, 3.0, 3, 4.0, 4, 5.0, 5, 6.0, 6, 7.0, 7, 8.0, 8));
}

#test fn large_struct_ret_return() = {
    Big :: @struct(a: i64, b: i64, c: i64, d: i64);
    
    hello_world :: fn(a: i64, b: i64) Big #no_inline #c_call = {
        assert_eq(a, 1);
        assert_eq(b, 2);
        (a = a, b = b, c = 3, d = 4)
    };
    big := hello_world(1, 2);
    assert_eq(big.a, 1); assert_eq(big.b, 2); assert_eq(big.c, 3); assert_eq(big.d, 4);
    
    // same but through a function pointer!
    big_ptr :: hello_world!fn_ptr;
    big := big_ptr(1, 2);
    assert_eq(big.a, 1); assert_eq(big.b, 2); assert_eq(big.c, 3); assert_eq(big.d, 4);
}

#test fn large_struct_arg_actually_by_ref() = {
    Big :: @struct(a: i64, b: i64, c: i64, d: i64);
    
    big_and_small :: fn(fst: i64, a: Big, snd: i64) Unit #no_inline #c_call = {
        assert_eq(a.a, 9);
        assert_eq(a.b, 8);
        assert_eq(a.c, 7);
        assert_eq(a.d, 6);
        assert_eq(fst, 64);
        assert_eq(snd, 128);
    };
    big: Big = (a = 9, b = 8, c = 7, d = 6);
    big_and_small(64, big, 128);
    
    //just_big :: fn(a: Big) Unit #no_inline #c_call = {
    //    assert_eq(a.a, 9);
    //    assert_eq(a.b, 8);
    //    assert_eq(a.c, 7);
    //    assert_eq(a.d, 6);
    //};
    //big: Big = (a = 9, b = 8, c = 7, d = 6);
    //just_big(big);
}
