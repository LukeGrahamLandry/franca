#test fn allocation() = {
    an_int: rawptr = malloc(size_of(i64));
    an_int := ptr_from_raw(i64, an_int);
    an_int[] = 314159;
    assert_eq(an_int[], 314159);
    free(i64.raw_from_ptr(an_int));
    
    fn slice_sum_test(arr: Slice(i64)) i64 = {
        enumerate(arr, fn(i, ptr) => {
            ptr[] = i;
        });
        sum := 0;
        for arr { (v: i64) |
            sum = sum.add(v);
        };
        sum
    }
    
    size_10 :: size_of(i64).mul(10);
    many: rawptr = malloc(size_10);
    many := ptr_from_raw(i64, many);
    arr: Slice(i64) = slice(many, 10);
    assert_eq(45, arr.slice_sum_test());
    free(i64.raw_from_ptr(many));
}

#test fn open_dynamic_library() #use("@/lib/dynamic_lib.fr") = {
    libc_path := find_os_libc_dylib()[0]; 
    if open(libc_path) { libc |
        strlen := get(libc, "strlen").unwrap();
        strlen := assume_types_fn(CStr, i64, strlen); // TOOD: wrap with generic
        assert_eq(6, strlen("strlen"));
    };
}

#test fn c_strings(canary: i64) i64 = {
    ::ptr_utils(u8);
    
    a := "Hello World";
    b := @symbol("Hello World").c_str();
    
    range(0, a.len()) {(i) void|
        a_char := a.get(i);
        b_char := b.get(i);
        c := a_char.eq(b_char);
        assert(c, "fail");
    };
    
    i := 0;
    for(b) {b_char|
        a_char := a.get(i);
        c := a_char.eq(b_char);
        assert(c, "fail");
        i = i.add(1);
    };
    
    ::assert_eq(Str);
    assert_eq(a, b.str());
    
    canary
}

#test fn walk_dir() = {
    #use("@/lib/sys/fs.fr");
    found := false;
    walk_directory_unordered(@as(CStr) ".") {entry|
        if(entry.name.eq("run_tests.fr")){
            found = true;
        };
    };
    assert(found, "didn't find run_tests.fr in cwd");
}

// This is similar to what we'd do to print a nice message when you overflow the call-stack. 
//
// mmap a page, remember the address, and then try to access it. 
// we know that will cause a segmentation fault that will be caught by the signal handler. 
// then re-mmap that same page by passing the saved address as a hint. 
// so then when we resume after the signal, the operation will succeed 
fn catch_signal() void #test = {
    the_address :: @static(rawptr);
    handled_a_signal :: @static(bool) false;
    handle_it :: fn(s: i64, info: *Posix.SysSigInfo, ctx: *Posix.SysUContext) void = {
        signal_handler_body(info, ctx) { info, ctx |
            @assert_eq(info.si_addr.int_from_rawptr(), the_address[].int_from_rawptr(), "faulted on wrong address");
            the_address[] = call_mmap(the_address[]);
            handled_a_signal[] = true;
        };
    };
    old := Posix.SysSigAction.zeroed();
    new: Posix.SigAction = (sa_handler = handle_it);
    
    Posix'sigaction(Posix.SIG.SEGV, new&, old&).unwrap();
    
    the_address[] = call_mmap(0.rawptr_from_int());
    Syscall'munmap(the_address[], SIZE);
    
    value :: 123456789;
    ptr := i64.ptr_from_raw(the_address[]);
    ptr[] = value;
    assert_eq(ptr[], value);
    assert(handled_a_signal[], "did you not unmap the memory my guy?");
    
    Posix'sigaction_raw(Posix.SIG.SEGV, old&, Posix.SysSigAction.ptr_from_int(0)).unwrap();
    
    SIZE :: 1;
    call_mmap :: fn(hint: rawptr) rawptr = {
        prot := bit_or(@as(i64) MapProt.Write, @as(i64) MapProt.Read);
        n1   := 1.neg();
        mmap_anon(hint, SIZE, prot, 0)
    };
}

fn call_fork() #test = {
    inner :: fn() void = {
        println("A");
    };
    #use("@/lib/sys/subprocess.fr");
    ok, out, err := fork_and_catch(temp(), => inner());
    assert_eq(ok, true);
    assert_eq(out.items(), "A\n");
    
    // Be very very careful using this to do anything other than exec a new process. 
    // If you're running at comptime, you might not be done compiling and the child 
    // will hang forever because fork() doesn't take threads with you (codegen runs 
    // in a different thread). 
    fork_and_catch :: fn(alloc: Alloc, $f: @Fn() void) Ty(bool, List(u8), List(u8)) = {
        out := Array(Fd, 2).zeroed();
        err := Array(Fd, 2).zeroed();
        pipe(out&);
        pipe(err&);
        
        pid := fork();
        if(pid.eq(0.intcast())){
            // Child
            Syscall'dup2(out&[1], STD_OUT);
            Syscall'dup2(err&[1], STD_ERR);
            
            f();
            Syscall'exit(0);
        };
        // We don't need this end of the pipe in the parent. 
        Syscall'close(out&[1]);
        Syscall'close(err&[1]);
        
        // TODO: manual outlining like people do in rust is kinda annoying.
        //       but also mine is extra dumb because i still copy and recompile this for every const argument of the outer function,
        //       and rely on deduplicating to fix it.
        collect_output :: fn(alloc: Alloc, out: Fd, err: Fd, pid: i32) Ty(bool, List(u8), List(u8)) #use("@/lib/sys/posix.fr") = {
            base_buffer_size := 65536;
            // TODO: make base buffer size a default argument
            outs: List(u8) = list(base_buffer_size, alloc);
            errs: List(u8) = list(base_buffer_size, alloc);
            
            o: pollfd = (fd = out, events = POLL.IN, revents = 0);
            e: pollfd = (fd = err, events = POLL.IN, revents = 0);
            poll_data: Array(pollfd, 2) = init(@slice(o, e));
            poll_data := poll_data&.items();
            
            // If the output of the forked thing were small it would be good enough to just allocate a big buffer and read it all into it after waiting with hang.
            // but i think if it fills the pipe it hangs forever cause you cant read to clear the pipe because you're blocking until the process ends,
            // and its blocking until theres room to write more in the pipe. 
            status := 0.intcast();
            dowhile() {()bool|
                fn read_some();
                fn read_some(buf: *List(u8), f: pollfd) void = {
                    c := f.revents.bit_and(POLL.IN) != 0;
                    if c {
                        len := Syscall'read(f.fd, buf.maybe_uninit.ptr.offset(buf.len), buf.maybe_uninit.len - buf.len).unwrap();
                        buf.len += len;
                        if buf.len == buf.maybe_uninit.len {
                            buf.reserve(buf.len);
                            read_some(buf, f);
                        };
                    };
                }
        
                usleep(1000);
                was_done := waitpid(pid, status&, W.NOHANG).unwrap();
                _ := poll(poll_data, 0).unwrap();
                read_some(outs&, poll_data[0]);
                read_some(errs&, poll_data[1]);
                was_done == 0
            };
            Syscall'close(out);
            Syscall'close(err);
            (status.eq(0), outs, errs)
        };
        collect_output(alloc, out&[0], err&[0], pid)
    };
}

fn pronto() #test = {
    path := @tfmt("./discoveringsomethingthatdoesntexist/%.foozle", timestamp());
    s := zeroed Posix'Stat;
    result := stat(as_cstr path, s&);
    @assert(result.is_err());
    @assert(!file_exists(path));
}

fn error_syscall() #test = {
    path := as_cstr "discoveringsomethingthatdoesntexist";
    result := Posix'open(path, Posix'O'RDONLY);
    result := to_fdresult result;
    @assert(!result.is_ok());
}

#test fn redirect_to_import() = {
    fn strlen(s: CStr) i64 #import("libc");
    fn strlen(s: *u8) i64 #redirect(CStr, i64);
    s := "123\0";
    assert_eq(strlen(s.ptr), s.len - 1);
}

#test fn import_all_calls_indirect() = {
    puts :: fn(a: CStr) void #import("libc");
    
    f :: fn(c: bool, g: @FnPtr(a: CStr) void) void #noinline = if c {
        puts("Hello World!");
    };
    
    f(false, puts);
}
