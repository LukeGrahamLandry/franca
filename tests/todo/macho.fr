// TODO: maybe some day
// UNUSED Note this doesn't run 
fn main() void = {
    println("Hello World");
    bytes: List(u8) = list(1000, temp());
    b := bytes&;
    
    header: MachoHeader = (
        cpu_type = 0x0100000C, // arm 64bit
        cpu_subtype = 0x00000000,
        file_type = 0x00000002, // Demand paged executable file. (idk, thats what rust uses ¯\_(ツ)_/¯ )
        commands_count = 0, // TODO: patch
        commands_size = 0, // TODO: patch
        flags = 0b00000000101000000000000010000101, // (idc, thats what rust uses ¯\_(ツ)_/¯ )
    );
    
    data := MachoHeader.cast_to_bytes(header&);
    bytes&.push_all(data);
    
    path := @symbol("target/macho.o").c_str();
    println(path);
    flag := (@as(i64) OpenFlag.Write).bit_or(@as(i64) OpenFlag.Truncate); // TODO: OpenFlag.Create but then need to pass mode
    f := open(path, flag).unwrap();
    write(f, bytes.maybe_uninit.ptr, bytes.len);
    close(f);
}

//! https://en.wikipedia.org/wiki/Mach-O

macho_magic :: 0xfeedfacf;
MachoHeader :: @struct(
    magic: u32 = macho_magic,
    cpu_type: u32,
    cpu_subtype: u32,
    file_type: u32,
    commands_count: u32,
    commands_size: u32,
    flags: u32,
    _reserved: u32 = 0x00000000,
);

// TODO: "If a load command starts with 0x80000000 bit set that means the load command is necessary in order to be able to load or run the binary."" 
LoadCommand :: @enum(u32) (
    SegmentLoad = 0x00000019,
    LinkLibrary = 0x0000000C,  // will have full file path to the dynamically linked shared library.
);

SegmentLoad :: @struct(
    name: u128, 
    address: u64,      // offset from base address? 
    address_size: u64, // so how many bytes we want this segment to take up. 
    file_offset: u64,  // where in the file does the data start. 
    size: u64,         // if this is smaller than address size, the extra is filled in with zeros.
    max_prot: u32,     // MemPerm "Maximum virtual memory protections"
    init_prot: u32,    // MemPerm "Initial virtual memory protections"
    section_count: u32, 
    flag: u32,
); // Followed by <section_count> of SegmentSection

// TODO: have a FlagSet(MemPerm) type. 
MemPerm :: @enum(u32) (
    Read    = 0b00000000000000000000000000000001,
    Write   = 0b00000000000000000000000000000010,
    Execute = 0b00000000000000000000000000000100,
);

SegmentSection :: @struct(
    section_name: u128, 
    segment_name: u128,  // must match SegmentLoad64.name
    address: u64,     
    size: u64, 
    file_offset: u32, 
    alignment: u32,   
    relocations_file_offset: u32,
    relocations_count: u32,
    flag: u32,
    _reserved1 := 0x00000000,
    _reserved2 := 0x00000000,
    _reserved3 := 0x00000000,
);

LinkLibrary :: @struct(
    string_offset: u32 = 24,
    time_date_stamp: u32,
    current_version: u32,
    compatible_version: u32,
    file_path: CStr, // size of this load command includes the length of the string.
);

u128 :: @struct(low: u64, high: u64);
fn str_to_16_byte_value(s: Str) u128 = {
    assert(name.len.le(16), "A segment name cannot be larger than 16 text characters in bytes");
    low := 0;
    high := 0;
    enumerate s { (i: i64, c: u8) |
        c := @as(i64) c;
        if(i.lt(8)) {
            high = high.bit_or(c.left_shift(i));
        } {
            low = low.bit_or(c.sub(8).left_shift(i));
        };
    };
    (low = low, high = high)
}

// TODO: which endianness?? 

// TODO: check if aligned and be less dumb. 
fn push(self: *List(u8), v: u32) void = {
    self.push((@as(i64) v).bit_and(@as(i64) 0xFF000000));
    self.push((@as(i64) v).bit_and(@as(i64) 0x00FF0000));
    self.push((@as(i64) v).bit_and(@as(i64) 0x0000FF00));
    self.push((@as(i64) v).bit_and(@as(i64) 0x000000FF));
}

// TODO: check if aligned and be less dumb. 
fn push(self: *List(u8), v: u64) void = {
    self.push((@as(i64) v).bit_and(@as(i64) 0xFF00000000000000));
    self.push((@as(i64) v).bit_and(@as(i64) 0x00FF000000000000));
    self.push((@as(i64) v).bit_and(@as(i64) 0x0000FF0000000000));
    self.push((@as(i64) v).bit_and(@as(i64) 0x000000FF00000000));
    self.push((@as(i64) v).bit_and(@as(i64) 0x00000000FF000000));
    self.push((@as(i64) v).bit_and(@as(i64) 0x0000000000FF0000));
    self.push((@as(i64) v).bit_and(@as(i64) 0x000000000000FF00));
    self.push((@as(i64) v).bit_and(@as(i64) 0x00000000000000FF));
}
