
fn const_field_unordered() #test = {
    A :: @rec @struct(
        a := A.Bar,
        Bar :: 123,
    );
    a: A = ();
    assert_eq(a.a, 123);
}

fn first_ref_os() #test = {
    S :: @struct {
        foo :: 123;
        bar :: 246;
        fn what_about_here1223334444(a: i64) i64 = a * S.foo;
    };
    
    assert_eq(what_about_here1223334444(2), S.bar);
}

// legacy AOT can't do this
fn tagged_multi_prim() #test = {
    Operation :: @tagged(
        MessageSend: @struct(a: u32, b: u32),
        ReturnFromMethod,
        CreateBlock: *i64,
    );

    a: Operation = .ReturnFromMethod;

    ::tagged(Operation);
    f(a); 
    f :: fn(a: Operation) void #noinline = {
        assert_eq(a&.is(.ReturnFromMethod), true);
    };
}
