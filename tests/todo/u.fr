main :: fn() void = {
    version1();  // This one doesn't!
    //version2();  // This one works
}

version1 :: fn() void = {
    // "function arguments must have type annotation (cannot be inferred unless you say #where)"
    do_export :: fn(name: Str, $T: Type, $ff: T) void #generic = {
        f: rawptr = ff;
        @println("% %", name, f);
    };
    
    my_mmap :: fn(addr: rawptr, len: i64, prot: i64, flags: i64, fd: Fd, offset: i64) i64 = 123;
    do_export("mmap", @Fn(a: rawptr, b: i64, c: i64, d: i64, e: i32, f: i64) i64, fn(a, b, c, d, e, f) = { my_mmap(a, b, c, d, (fd = e), f) });
}

version2 :: fn() void = {
    do_export :: fn(name: Str, $T: Type, $F: FuncId) void = {
        ff: T : F;
        f: rawptr = ff;
        @println("% %", name, f);
    };
    
    my_mmap :: fn(addr: rawptr, len: i64, prot: i64, flags: i64, fd: Fd, offset: i64) i64 = 123;
    do_export("mmap", @Fn(a: rawptr, b: i64, c: i64, d: i64, e: i32, f: i64) i64, fn(a, b, c, d, e, f) = { my_mmap(a, b, c, d, (fd = e), f) });
}
