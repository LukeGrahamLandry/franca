// This works -- Dec 23, its just strange because it tests something that doesn't happen when jitting 
// This is kinda unpleasant as a language semantic but you really need to to make reproducible builds work. 
// TODO: make it behave consistantally through pointers. 
// TODO: this test only works for aot because jit doesn't do anything special for constants. 
fn zeroing_constants() void #test = {
    A :: @tagged(A: i64, B: @struct(a: i64, b: *u8), C: Array(i64, 2));
    B :: @tagged(A: i64, B: @struct(a: i64, b: i64));
    ::tagged(A);
    ::tagged(B);
    
    t1 :: {
        s := "hello";
        t0: A = (B = (a = 1, b = s.ptr));
        t0&.tag_ptr()[] = .A;
        t0
    };
    t2 := t1;
    t2&.tag_ptr()[] = .C;
    assert_eq(t2.C&[1], 0);
    
    t4 :: {
        t3: B = (B = (a = 2, b = 3));
        t3&.tag_ptr()[] = .A;
        t3
    };
    t5 := t4;
    t5&.tag_ptr()[] = .B;
    assert_eq(t5.B.b, 0);
    
    Values :: @tagged(
        Big: RawList(u8),
        Small: Ty(i64, u8),
    );
    Expr :: @tagged(
        Poison: i64,
        Value: @struct(bytes: Values, coerced: bool),
    );
    
    unit_value: Values : (Small = (0, 0));
    thing(123, (Value = (bytes = unit_value, coerced = false)));
    thing :: fn(_: i64, e: Expr) void = {
        bytes := ptr_cast_unchecked(Expr, Array(u8, size_of(Expr)), e&)[];
        ones := 0;
        for bytes&.items() { b |
            i := @as(i64) b.zext();
            assert_eq(true, i == 0 || i == 1);
            ones += int(i == 1);
        };
        assert_eq(ones, 2);
    };
}
