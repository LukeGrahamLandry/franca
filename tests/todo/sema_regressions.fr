// bootstrap sema dependended on declaration order of overload sets (only one worked)
#test fn overloading_cycle() = {
    fn do_stuff() Type = i64;
    fn do_stuff(a: do_stuff()) do_stuff() = a;
    x := do_stuff(123);
    simple_eq(x, 123);
}

// bootstrap sema could do this one
// You can use named arguments to resolve ambiguous overloads
#test fn named_arg_disambiguate() = {
    fn seconds(hours: i64) i64 = mul(hours, mul(60, 60));
    fn seconds(minutes: i64) i64 = mul(minutes, 60);
    
    // You can't just call 'seconds(5)' because there's no way to tell which version you meant to call. // TODO: make sure its an error
    assert_eq(seconds(minutes=5), 300);
    assert_eq(seconds(hours=5), 18000);
}

#test fn compile_once() = {
    shared :: @static(i64) 0;
    a :: fn() void => {
        :: {
            shared[] += 1;
        };
    };
    
    a();
    a();
    
    assert_eq(shared[], 1);
}

// at least this should be an error. but really just promote the value because its a constant. 
// update: this correctly errors alone but not with @assert_type_error in errors.fr... strange. 
fn enum_wrong_size() #test = {
    DebugKey :: @enum(i64) (
        Parsing = "P".ascii(),
        Memory = "M".ascii(),
    );
    ::enum(DebugKey);
    x := DebugKey.Parsing.raw();
    println(x);
}
