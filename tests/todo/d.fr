main :: fn() void = {
    // :OverloadingConfusedCoerce poison expression argument
    fn my_start_thread();
    
    fn my_start_thread($T: Type, callee: @FnPtr(userdata: *T) i64, userdata: *T) i64 #generic = {
        stack := "";
        callee := ptr_cast_unchecked(@type callee, @FnPtr(rawptr) i64, callee&)[];
        my_start_thread(stack, callee, T.raw_from_ptr(userdata))
    }

    // it works if you don't make this part of the same overload set
    fn my_start_thread(stack: []u8, callee: @FnPtr(userdata: rawptr) i64, userdata: rawptr) i64 = {
        callee(userdata)
    };
    
    F :: @FnPtr() i64;
    
    body: F = fn() => 10;
    callee2 :: fn(b: *F) = b[]();
    // it works if you use `F` as a variable
    result := my_start_thread(@FnPtr() i64, callee2, body&);
    @assert_eq(result, 10);
}
