// maybe i'm a deep clone of the tree every time you do a 
// it = @{ @[it] }
// so using that syntax to make a linked list destroys compile times. 
// but the slow down doesn't seem to be in unquote_macro_apply_placeholders. 

main :: fn() void = {
    a := 0;
    @o_of_forever(1500) { a += 1; };  // 1->1500 = 1050ms
    @o_of_n(1500) { a += 1; };        // 1->1500 = 15ms
    println(a);
}

o_of_forever :: fn(n: FatExpr, do: FatExpr) FatExpr #macro = {
    body := @{}
    range(0, const_eval(i64)(n)) { _ |
        body = @{
            @[body];
            @[do];
        };
    };
    body
}

o_of_n :: fn(n: FatExpr, do: FatExpr) FatExpr #macro = {
    n := const_eval(i64)(n);
    body := FatExpr.list(n, ast_alloc());
    range(0, n) { _ |
        body&.push(@{
            @[do];
        });
    };
    (expr = (Tuple = body.as_raw()), ty = UnknownType, done = false, loc = do.loc)
}
