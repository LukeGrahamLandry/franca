fn driver(vtable: *ImportVTable) void = {
    assert_eq(vtable.eval(add_literals_to(1000)), 1000);
}

add_literals_to :: fn(total: i64) Str = {
    src := "#include_std(\"lib/core.fr\");".clone(temp());
    @fmt(src&, "fn main() i64 = 0 ");
    expect := 0;
    
    range(0, total) { i |
        @fmt(src&, "+ %", 1);
    };
    @fmt(src&, ";\n");
    src.items()
};

eval :: fn(vtable: *ImportVTable, src: Str) i64 = {
    opts := vtable.default_build_options();
    comp := vtable.new_with_src(src, opts);
    ctx := vtable.with(comp);
    fid := ctx.get_unique_named("main").unwrap();
    ptr := ctx.get_jitted(fid);
    ptr := assume_types_fn(Arg = void, Ret = i64, ptr = ptr);
    result := ptr();
    {vtable.destroy_compiler}(ctx.data); 
    result
};
