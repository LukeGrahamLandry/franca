// TODO: finish this. better handling of tuple -> array in compiler. there's a hack in ast/tuple_type because it breaks something to treat small ones as arrays.
// TODO: error message if you try to make a struct with different field types thats too big.  
// even if not the 5 seconds rust takes (debug, with vec![]), 200ms is still annoying to run every time.
// (im pretty sure they fixed it, i remember it being like 2 minutes when i was working on hctarcs). 
// TODO: also im cheating, cause i can't actually call the function cause none of the backends can deal with it. 
//
// ^ that was about the original-comptime-jit ^
// TODO: new backend is super slow with this. with CONMAP it's still 40 seconds and then makes a bigger function than we allow. 
// #test
fn main() = {
    n :: 200_000;
    s :: import({
        code: List(u8) = list(200000, ast_alloc());
        code&.push_all("{ get_a_number :: fn() f64 = {\nfloats := @slice (");
        range(0, n) {i|
            @fmt(code&, "%.0, ", i);
        };
        @fmt(code&, ") general_allocator();\n floats[%]} };", n - 1);
        code.items()
    });
    i := s'get_a_number();
    @assert_eq(i, n.float() - 1);
}
