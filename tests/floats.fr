#test(aarch64, llvm)
fn main(canary: i64) i64 = {
    assert_eq(1.0, 1.0);
    assert_eq(2.5, 1.0.add(1.5));
    assert_eq(5.0, 2.5.mul(2.0));
    assert_eq(1.0, 2.5.sub(1.5));
    assert_eq(4.5, 9.0.div(2.0));
    
    let zero: f64 = 1.0.sub(1.0);  // TODO: fix lex 0.0
    assert_eq(true, zero.div(zero).is_nan());
    assert_eq(false, 1.0.is_nan());
    // TODO: when I said 'fn is_nan(f64) f64' it couldn't tell me it was a compile error to return a bool 
    //       because it didnt even try to compile it because it didn't find the overload. maybe that's a feature tho. 
    
    assert_eq(false, eq(2.1, 3.1));
    assert_eq(true, eq(3.1, 3.1));
    assert_eq(true, ne(2.1, 3.1));
    assert_eq(false, ne(3.1, 3.1));
    assert_eq(false, ge(2.1, 3.1));
    assert_eq(true, ge(3.1, 2.1));
    assert_eq(true, ge(3.1, 3.1));
    assert_eq(false, le(3.1, 2.1));
    assert_eq(true, le(3.1, 3.1));
    assert_eq(true, le(2.1, 3.1));
    assert_eq(true, lt(2.1, 3.1));
    assert_eq(false, lt(3.1, 3.1));
    assert_eq(false, lt(3.1, 2.1));
    assert_eq(false, gt(2.1, 3.1));
    assert_eq(false, gt(3.1, 3.1));
    assert_eq(true, gt(3.1, 2.1));
    
    assert_eq(5, 5.0.int());
    assert_eq(5, 5.5.int());
    assert_eq(5, 5.7.int());
    assert_eq(5.neg(), 5.7.neg().int());

    canary
}
