fn float_cond() #test = {
    assert_eq(false, eq(2.1, 3.1));
    assert_eq(true, eq(3.1, 3.1));
    assert_eq(true, ne(2.1, 3.1));
    assert_eq(false, ne(3.1, 3.1));
    assert_eq(false, ge(2.1, 3.1));
    assert_eq(true, ge(3.1, 2.1));
    assert_eq(true, ge(3.1, 3.1));
    assert_eq(false, le(3.1, 2.1));
    assert_eq(true, le(3.1, 3.1));
    assert_eq(true, le(2.1, 3.1));
    assert_eq(true, lt(2.1, 3.1));
    assert_eq(false, lt(3.1, 3.1));
    assert_eq(false, lt(3.1, 2.1));
    assert_eq(false, gt(2.1, 3.1));
    assert_eq(false, gt(3.1, 3.1));
    assert_eq(true, gt(3.1, 2.1));
}

#test
fn floats(canary: i64) i64 = {
    assert_eq(1.0, 1.0);
    assert_eq(2.5, 1.0.add(1.5));
    assert_eq(5.0, 2.5.mul(2.0));
    assert_eq(1.0, 2.5.sub(1.5));
    assert_eq(4.5, 9.0.div(2.0));
    
    // TODO: when I said 'fn is_nan(f64) f64' it couldn't tell me it was a compile error to return a bool 
    //       because it didnt even try to compile it because it didn't find the overload. maybe that's a feature tho. 
    assert_eq(true, 0.0.div(0.0).is_nan());
    assert_eq(false, 0.0.is_nan());
    
    assert_eq(5, 5.0.int());
    assert_eq(5, 5.5.int());
    assert_eq(5, 5.7.int());
    assert_eq(5.neg(), 5.7.neg().int());
    
    assert_eq(5.0, 5.float());
    assert_eq(99.0.neg(), 99.neg().float());
    
    assert_eq(7, (@as(i64) (@as(f64) 7.bitcast()).bitcast()));
    assert_eq(false, (@as(f64) 7.bitcast()).int().eq(7));    
    
    assert_eq(7.0, 7.0.cast().cast());

    x: i64 = 0x7ffc000000000000.bitcast();
    assert_eq(true, (@as(f64) x.bitcast()).is_nan());
    
    canary
}

#test 
fn comptime_float_call() = {
    THREE :: 1.0.add(2.0);
    assert_eq(THREE, 3.0);
    
    // this was hard before i jitted shims for comptime calls but now it's easy! (...and slow...?)
    mixed_add :: fn(i: i64, f: f64) f64 = i.float() + f;
    FOUR :: 2.mixed_add(2.0); 
    assert_eq(FOUR, 4.0);
}

