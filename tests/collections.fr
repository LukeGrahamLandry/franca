#test fn simple_allocation() = {
    // Use `alloc` to create space that outlives the current stack frame. 
    fn dont_leak(size: i64) Slice(i64) = temp().alloc(i64, size);
    
    on_the_heap := dont_leak(10);
    first: *i64 = on_the_heap.ptr;
    first[] = 15; // just setting the first in the array of 10
    assert_eq(first[], 15);
    
    temp().dealloc(i64, on_the_heap);
}

#test 
fn tuple_ptr() = {
    arr := (1, 2, 3);
    arr_ptr := arr&; 
    
    // you can create a pointer to an element of a tuple (constant index only)
    second_ptr: *i64 = arr_ptr[]._1&; 
    assert_eq(2, second_ptr[]); // we can dereference as normal.
    second_ptr[] = 123;
    // The type annotation for a tuple is written as a tuple of types. 
    have: Ty(i64, i64, i64) = arr_ptr[];
    expected: Ty(i64, i64, i64) = (1, 123, 3);
    
    assert_eq(have._0, expected._0);
    assert_eq(have._1, expected._1);
    assert_eq(have._2, expected._2);
}

#test fn indexing() = {
    s: Str = "hello";
    assert_eq(len(s), 5);
    
    v: List(i64) = list(1, temp());
    assert_eq(v.maybe_uninit.len, 1);
    push(v&, 6);  // TODO: fix error message for missing & from being ""abbigousss call", thats not true, its not declared func
    assert_eq(v.maybe_uninit.len, 1);
    push(v&, 8);
    assert_eq(v.maybe_uninit.len, 4);
    push(v&, 9);
    assert_eq(v.len, 3);
    assert_eq(v.maybe_uninit.len, 4);
    assert_eq(v[0], 6);
    assert_eq(v[1], 8);
    assert_eq(v[2], 9);
    drop(v&);
}

#test fn comparing_strings_eq() = {
    assert_eq(true, eq("abcd", "abcd"));
    assert_eq(false, eq("abcd", "dcba"));
    assert_eq(false, eq("abcd", "abcde"));
    assert_eq(false, eq("aaab", "aaac"));
    assert_eq(true, eq("", ""));
}

#test fn c_cstrings() = {
    a  :: "aaaa";
    b  :: "bbbbb";
    ac :: a.sym().c_str();
    bc :: b.sym().c_str();
    assert_eq(a == ac, true);
    assert_eq(a == bc, false);
    assert_eq(b == bc, true);
    assert_eq(b == ac, false);
}

// note: this is a good one to fix first when verbose_assert is broken.
#test fn stringify_int() = {
    output: List(u8) = list(temp());
    5.display(output&);
    assert_eq(true, eq(output.items(), "5"));
    output&.clear();
    12.display(output&);
    assert_eq(true, eq(output.items(), "12"));
    output&.clear();
    345.display(output&);
    assert_eq(true, eq(output.items(), "345"));
}

#test fn cmp_prefix_suffix() = {
    assert_eq(true, starts_with("abcd", "ab"));
    assert_eq(true, starts_with("abcd", "abcd"));
    assert_eq(false, starts_with("abcd", "cd"));
    assert_eq(false, starts_with("ab", "abcd"));
    assert_eq(false, starts_with("aab", "ab"));
    assert_eq(true, ends_with("abcd", "cd"));
    assert_eq(true, ends_with("abcd", "abcd"));
    assert_eq(false, ends_with("abcd", "ab"));
    assert_eq(false, ends_with("ab", "abcd"));
    
    multiline := """aaa
    bbb""";
    assert_eq(true, starts_with(multiline, "aaa"));
    assert_eq(true, ends_with(multiline, "bbb"));
}

#test fn splitting_strings() = {
    parts: List(Str) = split("Hello world. This is words.", " ", temp());
    assert_eq(5, parts.len);
    assert_eq(true, eq(parts[0], "Hello"));
    assert_eq(true, eq(parts[1], "world."));
    assert_eq(true, eq(parts[2], "This"));
    assert_eq(true, eq(parts[3], "is"));
    assert_eq(true, eq(parts[4], "words."));
    assert_eq(false, eq(parts[1], "Hello"));  // i live in fear
    
    // Count start and end as empty strings
    parts: List(Str) = split("%a%b%", "%", temp());
    assert_eq(4, parts.len);
    assert_eq(true, eq(parts[0], ""));
    assert_eq(true, eq(parts[1], "a"));
    assert_eq(true, eq(parts[2], "b"));
    assert_eq(true, eq(parts[3], ""));
    
    parts&.drop();
}

#test fn parsing_hex() = {
    ::?i64;
    assert_eq(4294983856, hex("00000001000040b0").unwrap());
    assert_eq(4294983856, hex("00000001000040B0").unwrap());
    lst := concat("00000001", "000040B0", temp());
    assert_eq(4294983856, hex(lst&.items()).unwrap());
    
    concat :: fn(a: Str, b: Str, gpa: Alloc) List(u8) = {
        c: List(u8) = list(a.len().add(b.len()), gpa);
        c&.push_all(a);
        c&.push_all(b);
        c
    }
}

#test fn parsing_float() = {
    assert_eq(123.456, float("123.456"));
}

#test fn cmp_zext_pls() = {
    assert_eq(@as(i64) 0xAB.zext(), 171);
}

#test fn escape_characters() = {
    ::assert_eq(Str);
    
    a := """hello
world""";
    assert_eq(a, "hello\nworld");
    assert_eq(""" " """, " \" ");
    assert_eq("""\""", "\\");
    assert_eq(10, "\n".char());  // Note: .char is const so this relies on #fold. 
    assert_eq(@as(i64) 0xAB.zext(), "\xAB".char());
}

#test fn big_list() = {
    S :: @struct(a: i64 = 0, b: i64 = 0, c: i64 = 0, d: u32 = 0.trunc());
    
    things: List(S) = list(temp());
    
    things&.push((a = 1));
    things&.push((a = 2));
    things&.push((a = 3));
    things&.push((a = 4));
    things&.push((a = 5));
    things&.push((a = 6));
}

#test fn buckets() = {
    #use("@/lib/collections/bucket_array.fr");
    arr: BucketArray(i64) = init(7, temp());
    pointers: List(*i64) = list(10, temp());
    total := 0;
    range(0, 1000) { i |
        ptr := arr&.push(i);
        pointers&.push(ptr);
        total += i;
    };
    enumerate pointers { i, p |
        assert(eq(i, p[][]), "fail");
    };
    
    assert_eq(arr&.nested_index(456)[], 456);
    
    arr2: BucketArray(*i64) = init(7, temp());
    chunks: List(Slice(*i64)) = list(20, temp());
    i := 0;
    chunk_size :: 50;  // not a factor of the bucket size!
    while(=> i.lt(1000)) {
        chunk := pointers&.items().subslice(i, chunk_size); 
        ref := arr2&.push_all_contiguous(chunk);
        chunks&.push(ref);
        i += chunk_size;
    };
    
    sum := 0;
    for(chunks){ chunk |
        for(chunk){ i |
            sum += i[];
        };
    };
    
    assert_eq(sum, total);
}

#test fn zero_values() = {
    assert_eq(0, i64.zeroed());
    assert_eq(i64.zeroed(), 0);
    
    arr := Array(i64, 3).zeroed();
    for(arr&, fn(e) => assert_eq(e, 0));
    
    s := Slice(i64).zeroed(); // null pointer! jail!
    assert_eq(s.len, 0);
}

#test fn removing() = {
    S :: @struct(a: i64 = 0, b: i64 = 0, c: i64 = 0, d: u32 = 0.trunc());
    
    start: List(i64) = @list(1, 2, 3, 4, 5, 6, 7) temp();
    end: List(i64) = @list(1, 2, 3, 5, 6, 7) temp();
    
    start&.ordered_remove(3);
    ::display_slice(i64);
    ::assert_eq(Slice(i64));
    assert_eq(start.items(), end.items());
    
    
    start: List(i64) = @list(1, 2) temp();
    end: List(i64) = @list(2) temp();
    start&.ordered_remove(0);
    assert_eq(start.items(), end.items());
}

#test fn temp_reset_works() = {
    :: assert_eq([]i64); ::display_slice(i64);
    
    run_the_test :: fn(scale: i64) void = {
        range(0, 100 * scale) { i | 
            temp().alloc(i64, i);
        };
        mark := mark_temporary_storage();
        check_size := 10 * scale;
        mem := temp().alloc(i64, check_size);
        range(0, check_size) { i |
            mem[i] = i;
        };
        reset_temporary_storage(mark);
        // we should be reusing the memory, starting at the point we took the mark. 
        mem2 := temp().alloc(i64, check_size);
        assert_eq(mem, mem2);
        old := i64.int_from_ptr(mem.ptr);
        new := i64.int_from_ptr(mem2.ptr);
        assert_eq(old, new);
    };
    
    run_the_test(1);
    run_the_test(50);
}

#test fn contains_run() = {
    assert_eq(true, "hello world".contains("llo w"));
    assert_eq(false, "hello world".contains("elo"));
    assert_eq(false, "hello world".contains("ldh"));
    assert_eq(true, "hello world".contains("ld"));
    assert_eq(true, "hello world".contains("he"));
}

#test fn deep_clone_no_alias() = {
    a: List(i64) = list(5, temp());
    a&.push(123);
    b: List(List(i64)) = list(5, temp());
    b&.push(a);
    
    // passing a list aliases the memory, (since it didn't resize)
    assert_eq(b[0][0], 123);  
    a[0] = 456;
    assert_eq(b[0][0], 456);  
    
    // but deep_clone allocates new memory for the lists. 
    c := zeroed(@type b);
    deep_clone(c&, b&, temp());
    assert_eq(c[0][0], 456);  
    a[0] = 789;
    assert_eq(c[0][0], 456);  
}

#test fn copy_overlapping_t() = {
    a := temp().alloc(i64, 15);
    enumerate a { i, x | 
        x[] = i;
    };
    
    b := a.slice(0, 10);
    c := a.slice(5, 15);
    b.copy_from(c); // (5-15, 10-15)
    c.copy_from(b); // (5-10, 5-15)
    
    enumerate c { i, x | 
        assert_eq(x[], i+5);
    };
}

fn qeueuueue() #test #use("@/lib/collections/deque.fr") = {
    a := temp();
    q := RawDeque(i64).zeroed();
    range(0, 10) { i |
        @assert_eq(q&.len(), i, "lenA head=% tail=%", q.head, q.tail);
        q&.push_back(i, a);
    };
    assert_eq(q&.len(), 10);
    range(0, 5) { i |
        @assert_eq(q&.len(), 10 - i, "lenB head=% tail=%", q.head, q.tail);
        assert_eq(i, q&.pop_front().unwrap());
    };
    assert_eq(q&.len(), 5);
    range(0, 5) { i |
        assert_eq(q&.len(), 5 + i);
        q&.push_front(i, a);
    };
    assert_eq(q&.len(), 10);
    range_rev(5, 10) { i |
        assert_eq(i, q&.pop_back().unwrap());
        @assert_eq(q&.len(), i, "lenC head=% tail=%", q.head, q.tail);
    };
    range(5, 10) { i |
        @assert_eq(q&.len(), i, "lenD head=% tail=%", q.head, q.tail);
        q&.push_front(i, a);
    };
    range_rev(0, 10) { i |
        assert_eq(i, q&.pop_front().unwrap());
        @assert_eq(q&.len(), i, "lenE head=% tail=%", q.head, q.tail);
    };
    
    n := 16;
    q: RawDeque(i64) = init(temp(), n);
    range(0, n) { i |
        @assert_eq(q&.len(), i, "lenF head=% tail=%", q.head, q.tail);
        q&.push_back(i, panicking_allocator);
    };
    range(0, n) { i |
        assert_eq(i, q&.pop_front().unwrap());
        @assert_eq(q&.len(), n-i-1, "lenG head=% tail=%", q.head, q.tail);
    };
}

#use("@/lib/leb128.fr");
#test fn write_leb() = {
    ::assert_eq(u8);
    ::assert_eq([] u8);
    
    out: List(u8) = list(temp());
    out&.leb128_unsigned(0);
    assert_eq(out.items(), @slice(@as(u8) 0));
    out&.clear();
    out&.leb128_unsigned(50);
    assert_eq(out.items(), @slice(@as(u8) 50));
    out&.clear();
    out&.leb128_unsigned(1234);
    assert_eq(out.items(), @slice(@as(u8) 210, @as(u8) 9));
    
    out&.clear();
    out&.leb128_signed(-1234);
    assert_eq(out.items(), @slice(@as(u8) 174, @as(u8) 118));
}

#test #use("@/lib/sort.fr")
fn part_list() = {
    s := @slice(3, 6, 1, 3, 6, 8, 0, 9, 10, 5);
    cond :: fn(it) => it[].mod(2) == 0;
    i := i64.partition_unordered(s, cond);
    enumerate s { j, it |
        assert_eq(j < i, cond(it));
    };
    assert_eq(i, 5);
}

fn cmp_pointers() #test = {
    s := @slice(0, 1, 2);
    a, b, c := (s.index(0), s.index(1), s.index(2));
    @assert(s.contains_address(a) && s.contains_address(b) && s.contains_address(c));
    @assert(!s.slice(0, 2).contains_address(c) && !s.slice(1, 3).contains_address(a));
}

fn qbe_ir_uses_perent_signs_which_suck_to_fmt() #test = {
    // this tests this_is_dumb_but_im_actually_going_to_lose_my_mind
    @assert_eq(@tfmt("\%a = add %, \%b", 123), @tfmt("%a = add %, %b", "%", 123, "%"));
}
