@test(interp)
fn main(_canary: i64) i64 = {
    let s: Str = "hello";
    assert_eq(len(s), 5);

    var v: List(i64) = list(1);
    assert_eq(v&.maybe_uninit.len[], 1);
    push(v&, 6);  // TODO: fix error message for missing & from being ""abbigousss call", thats not true, its not declared func
    assert_eq(v&.maybe_uninit.len[], 1);
    push(v&, 8);
    assert_eq(v&.maybe_uninit.len[], 4);
    push(v&, 9);
    assert_eq(v&.len[], 3);
    assert_eq(v&.maybe_uninit.len[], 4);
    assert_eq(index(v&, 0)[], 6);
    assert_eq(index(v&, 1)[], 8);
    assert_eq(index(v&, 2)[], 9);
    drop(v&);
    
    assert_eq(true, str_eq("abcd".str(), "abcd".str()));
    assert_eq(false, str_eq("abcd".str(), "dcba".str()));
    assert_eq(false, str_eq("abcd".str(), "abcde".str()));
    
    assert_eq(true, str_eq(str(5), "5".str()));
    assert_eq(true, str_eq(str(12), "12".str()));
    assert_eq(true, str_eq(str(345), "345".str()));
    
    assert_eq(true, startswith("abcd", "ab"));
    assert_eq(true, startswith("abcd", "abcd"));
    assert_eq(false, startswith("abcd", "cd"));
    assert_eq(false, startswith("ab", "abcd"));
    assert_eq(false, startswith("aab", "ab"));
    assert_eq(true, endswith("abcd", "cd"));
    assert_eq(true, endswith("abcd", "abcd"));
    assert_eq(false, endswith("abcd", "ab"));
    assert_eq(false, endswith("ab", "abcd"));
    
    const List_Str = List(Str); // HACK overwrite arg
    // Currently this uses more stack space than 'cargo test' gives a thread by default. 
    var parts: List_Str = split("Hello world. This is words.".str(), " ".str());
    assert_eq(5, parts&.len[]);
    assert_eq(true, str_eq(get(parts, 0), "Hello".str()));
    assert_eq(true, str_eq(get(parts, 1), "world.".str()));
    assert_eq(true, str_eq(get(parts, 2), "This".str()));
    assert_eq(true, str_eq(get(parts, 3), "is".str()));
    assert_eq(true, str_eq(get(parts, 4), "words.".str()));
    assert_eq(false, str_eq(get(parts, 1), "Hello".str()));  // i live in fear
    
    
    // Count start and end as empty strings
    var parts: List_Str = split("%a%b%".str(), "%".str());
    assert_eq(4, parts&.len[]);
    assert_eq(true, str_eq(get(parts, 0), "".str()));
    assert_eq(true, str_eq(get(parts, 1), "a".str()));
    assert_eq(true, str_eq(get(parts, 2), "b".str()));
    assert_eq(true, str_eq(get(parts, 3), "".str()));
    
    
    assert_eq(4294983856, hex("00000001000040b0".str()));
    assert_eq(4294983856, hex("00000001000040B0".str()));
    assert_eq(4294983856, hex(concat("00000001".str(), "000040B0".str())));
    
    let s: Slice(Str) = ("1", "2", "3")!slice;
    multi_puts(s);
    
    assert_eq(true, str_eq(str(hello!symbol), "hello".str()));
    
    _canary
}
