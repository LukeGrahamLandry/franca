#test 
fn load_store_u8() = {
    // a word with lsb = 1
    a := 257;
    ptr := ptr_cast_unchecked(From = i64, To = u8, ptr = a&);  // pointer to lsb
    
    // now load lsb and put it in word sized stack slot. so this should be a truncation of a.
    // but we know the var is type u8 so loads should be 1 byte, so don't have to zero the slot. 
    b := ptr[]; 
    assert_eq(@as(i64) b.zext(), 1);
    
    assert_eq(a, 257); // read the whole word
    ptr[] = @as(u8) 2.trunc(); // store lsb = 2
    assert_eq(a, 258); // read the whole word
    
    // TODO: #fold to force size_of to be evaluated at compile time when possible. 
    //       rn it doesn't work on cranelift without :: because it doesn't know about #ct,
    //       but really you don't want to allow #ct at runtime at all and it should notice that this is constant. 
    assert_eq(:: u8.size_of(), 1); 
}

#test fn unit_field() = {
    foozle :: fn(_: void, __: void) void = ();

    Data :: @struct(a: i64, b: void, c: i64);
    d: Data = (a = 123, b = (), c = 456);
    assert_eq(d.a, 123);
    foozle(d.b, unit);
    assert_eq(d.c, 456);
}

#test fn u8_field() = {
    Data :: @struct(a: u8, b: i64);  // Note: wierd alignment :)
    d: Data = (a = @as(u8) 5.trunc(), b = 456);
    assert_eq(true, eq(d.a, @as(u8) 5.trunc()));
    assert_eq(d.b, 456);
}

// Its probably fine if you break this test for a better enum repr, but not if its by accident!
// If this stops being well defined behaviour, should give reflection info so you can do similar things. 
#test fn dont_change_tagged_padding() = {
    Data :: @tagged(small: u8, big: i64, extra_big: Str);
    d: Data = (big = 0xFFFFFFFFFFFFFFFF.bitcast());
    :: tagged(Data);
    
    d&.tag_ptr()[] = .small;
    d.small = @as(u8) 0.trunc();  // Here we only set one byte
    assert_eq(@as(i64) d.small.zext(), 0);
    
    d&.tag_ptr()[] = .big;
    assert_eq(d.big, 0xFFFFFFFFFFFFFF00.bitcast()); // So the padding should be unchanged. 
    
    // even if we do a copy while its in small mode. 
    d&.tag_ptr()[] = .small;
    d2 := d;
    d2&.tag_ptr()[] = .big;
    assert_eq(d2.big, 0xFFFFFFFFFFFFFF00.bitcast());
}

::assert_eq(u64);
::assert_eq(u32);
::ptr_utils(u32);
 
#test 
fn load_store_u32() = {
    high := 0x12345678;
    low  := 0x90ABCDEF;
    both: u64 = bit_or(@as(u64) low.zext(), (@as(u64) high.zext()).shift_left(32)); // todo less suck type inference and less suck error messages!
    assert_eq(both, 0x1234567890ABCDEF);
    
    low_ptr: *u32 = ptr_cast_unchecked(From = u64, To = u32, ptr = both&); // TODO: probably shouldn't be allowed to cast like this.
    assert_eq(low_ptr[], low);
    high_ptr := low_ptr.offset(1); 
    assert_eq(high_ptr[], high);
    
    // Storing a u32 should only change 4 bytes. 
    high_ptr[] = @as(u32) 0.trunc();
    assert_eq(low_ptr[], low);
    assert_eq(both, low.zext());
}

#test fn int_parts_struct() = {
    S :: @struct(low: u32, a: u8, b: u8, c: u16);
    s: S = (low = 0x12345678, a = 0x90, b = 0xAB, c = 0xEFCD);
    assert_eq(size_of(S), size_of(i64));
    as_int := ptr_cast_unchecked(From = S, To = u64, ptr = s&);
    assert_eq(as_int[], 0xEFCDAB9012345678);
    SS :: @struct(low: u32, high: u32);
    ss: SS = (low = 0x12345678, high = 0xEFCDAB90);
    ss_i := ptr_cast_unchecked(From = SS, To = u64, ptr = ss&);
    assert_eq(as_int[], ss_i[]);
}

#test fn const_coersion() = {
    n10 :: 10.neg();
    
    a: i32 = 10;
    a: i32 = n10;
    
    @assert_compile_error { a: u32 = n10; }; 
    @assert_compile_error { a: i8 = a; };  // this would be fine but a isn't constant
    a: i8 = n10;
    
    small: u8 : 10;
    a: i64 = small;
    
    a: f64 = 123;
    assert_eq(a, 123.0);
    a: f32 = 123; // TODO: assert_eq. i just dont have f32 eq. 
    
    a: f64 = 9007199254740991;
    @assert_compile_error {
        // this can't be represented in 53 bits of mantissa
        // try pasting 9007199254740992 + 1 into a java script console :)
        a: f64 = 9007199254740992; 
    }; 
    assert_eq(a, 9007199254740991.0);
    assert_eq(a.add(1.0), a.add(2.0)); // thanks IEEE, very cool, i like how they behave like numbers. 
    
    a: i64 = a.bitcast();
    b: i64 = 9007199254740991.0.bitcast();
    assert_eq(a, b);   
    
    a: i64 = 10.0;
    assert_eq(a, 10); 
    
    @assert_compile_error {
        a: i64 = 10.5;
    }; 
    
    x :: 123;
    y :: 123.0;
    // maybe this is too wierd. maybe once a named constant picks a type, it should be stuck with it. 
    c := x.add(y);
    d := y.add(x);
    
    a: u16 = x;
    a: u8 = x;
    a: i16 = x;
    
    a: i8 = n10;
    a: i16 = n10;
}

#test fn damn_it() = {
    if 0 + 1 < 1 {
        println("Hello");
    };
}

#test fn fold_negative_sign() = {
    a: f64 = -1;
}

#test fn a_big_number() = {
    BIG :: 12345.shift_left(40);
    get_n :: fn() u64 #noinline = BIG;  // noinline to force a call so i can exercise my x64 encoding
    assert_eq(get_n(), BIG);
    
    get_nn :: fn() Ty(u64, u64) #noinline = (BIG, BIG + 1);  
    
    a, b := get_nn();
    assert_eq(a, BIG);
    assert_eq(b, BIG + 1);
}

// it needs to convert the second thing based on the type of the first and not offset by 8 bytes
#test fn slice_coerce() = {
    ::assert_eq(u8);
    a := @slice(@as(u8) 123, 231);
    println(@as(i64) a[0].zext());
    println(@as(i64) a[1].zext());
    assert_eq(a[0], 123);
    assert_eq(a[1], 231);
}

fn trivial_slice() #test = {
    // TODO: catch the error if you put :: instead of just giving garbage. 
    things := @slice("a", "aa", "aaa", "aa");
    b := things[0];
    assert_eq(b.len, 1);
}

// This (in basic_libc:catch_signal) happened to trigger the reproducibility bug 
// where small constants were getting deduplicated based on thier Value's stack address. 
// But its also a correctness problem becuase it was merging variables. 
fn small_static_memory() void #test = {
    handled_a_signal :: @static(bool);
    is_panicking     :: @static(bool);
    is_panicking[]     = false;
    handled_a_signal[] = true;
    
    // sure hope is_panicking and handled_a_signal don't point to the same memory...
    assert(!is_panicking[], "deduplicated!");
}

// This broke reproducibility of farm_game when backend/ir:Con had a partially uninitialized union field. 
// This wasn't a correctness problem because it only put junk in the high bits when you were only reading as an f32 anyway. 
fn high_bits_of_f32_literal() void #test = {
    fn is_one(a: f32) void = {
        assert(1.0 == a.cast(), "?");
    };
    is_one(1);
}

fn immstoreh() void #test = {
    Foozle :: @struct(baz: u16);
    fn set(a: *Foozle) void = {
        if a.baz == 2 {
            abort();
        };
        a.baz = 0;
    };
    bar: Foozle = (baz = 1);
    set(bar&);
}
