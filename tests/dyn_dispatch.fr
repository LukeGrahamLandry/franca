//! Userspace single dynamic dispatch.
//! The idea is the boilerplate could be generated by an annotation.
#test
fn dispatch(canary: i64) i64 = {


Add :: @struct(lhs: i64, rhs: i64);

fn eval(self: *Add) i64 = add(self[].lhs, self[].rhs);

Mul :: @struct(lhs: i64, rhs: i64);
fn eval(self: *Mul) i64 = mul(self[].lhs, self[].rhs);

Eval :: @struct(vtable: FnPtr(rawptr, i64), dataptr: rawptr);
fn eval(self: Eval) i64 = {
    v := self.vtable;
    v(self.dataptr) // TODO: even with brakets it parses as dotcall
}

fn upcast($T: Type) void = {
    /// Forget the type and create a trait object. 
    fn upcast(self: *T) Eval = {
        c : FnPtr(*T, i64) : eval; // TODO: coerce_const on const args :coerce_for_const_arg
        callee := erase_types_fn(*T, i64, c);
        callee := assume_types_fn(rawptr, i64, callee);
        (vtable = callee, dataptr = raw_from_ptr(T, self))
    }
}

// TODO: for const arg to work instead of #generic, this needs to do the call right now if all args are const instead of waiting so ti instantiates the generics 
// Instantiate the generics. 
:: upcast(Add);
:: upcast(Mul);

six: Add = (lhs = 2, rhs = 4);
eight: Mul = (lhs = 2, rhs = 4);

// Static dispatch. 
assert_eq(6, six&.eval());
assert_eq(8, eight&.eval());

// Dynamic dispatch. 
unknown := six&.upcast();
assert_eq(6, unknown.eval());
unknown = eight&.upcast();  // Same variable, same type.
assert_eq(8, unknown.eval());  // But now we call the other method. 

// Can even do crimes by swapping the vtable. This works because we know the values have compatible layout. 
do_add := six&.upcast();
do_mul := eight&.upcast();
assert_eq(8, unknown.eval());
unknown.vtable = do_add.vtable; 
assert_eq(6, unknown.eval());
unknown.vtable = do_mul.vtable; 
assert_eq(8, unknown.eval());

// dyn_mul(six&); // TODO: this needs to be a type error. but i mostly have structural type checking. unique is a bit fishy. (changed how i did upcast() anyway so doesnt come up in this example)

AddDyn :: @struct(lhs: Eval, rhs: Eval);
fn eval(self: *AddDyn) i64 = add(self[].lhs.eval(), self[].rhs.eval());
:: upcast(AddDyn);

fourteen: AddDyn = (lhs = do_add, rhs = do_mul);
assert_eq(14, fourteen&.eval());  // TODO: currently you need to call it once manually so the compiler knows its needed. 
unknown = fourteen&.upcast();
assert_eq(14, unknown.eval());

// Note: at this point, <unknown> holds a reference to <fourteen>'s stack slot. 
// I probably want to provide some sort of noalias assertions eventually. 
fourteen = (lhs = do_add, rhs = do_add);
assert_eq(12, unknown.eval());  // We call different implementations through AddDyn without changing <unknown>'s vtable. 

canary
}


