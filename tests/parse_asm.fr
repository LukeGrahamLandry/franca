let test_asm = """
.section	__TEXT,__text,regular,pure_instructions
	.build_version macos, 13, 0
	.globl	_c_add                          ; -- Begin function c_add
	.p2align	2
_c_add:                                 ; @c_add
	.cfi_startproc
; %bb.0:
	add	x0, x1, x0
	ret
	.cfi_endproc
                                        ; -- End function
""";


fn test_option() Unit = {
    var s: ?i64 = some(123);
    
    var a = 0;
    s.if(fn(i: i64) Unit = {
        a = i;
    });
    
    assert_eq(a, 123);
    
    var i = 0;
    while(fn = {s}) { (v: i64) |
        s = none();
        i = i.add(1);
    };
    assert_eq(i, 1);
    
    let n: ?i64 = none();
    let z = n.or(fn = 555);
    assert_eq(z, 555);
    
    var y: ?i64 = some(10);
    let z = y.or(fn = 555);
    assert_eq(z, 10);
    
    assert_eq(true, y.is_some());
    y.unwrap();
    
    let y_ptr = y&.as_ref();
    
}


// ok at this point i'm seeing it would be nice to put the tests in the lib file. 
fn test_map() Unit = {
    var m: DumbMap(i64, i64) = init();
    assert_eq(true, m&.insert(123, 456).is_none());
    let expect: ?i64 = some(456);
    let prev = m&.insert(123, 5);
    // TODO: when you inline this it fails but thinks right is 654. disagree about bool calling conventions maybe? 
    //       probably my inconsistancy with enum padding on asm? 
    let t = expect.eq(prev);
    assert_eq(true, t);
    
    let expect2: ?i64 = some$5;
    let prev = m&.get(123);
    let t = expect2.eq(prev);
    assert_eq(true, t);
    let f = expect2.eq(expect);
    assert_eq(false, f);
}

const AsmFile = @struct(
    src: Str,
    blocks: DumbMap(Symbol, i64),
);


const Ident = i64.Unique();
fun eq(a: Ident, b: Ident) bool = eq(@as(i64) a, @as(i64) b);

const StringPool = @struct(
    lookup: DumbMap(Str, Ident),
    values: List$Str,
);

fun init() StringPool = {
    let lookup: DumbMap(Str, Ident) = init();
    let l: List$Str = list();
    let self: StringPool = (lookup: lookup, values: l);
    self
}

// SAFETY: 'i' must be the result of inserting into 'self'
fun get(self: *StringPool, i: Ident) Str = {
    let i: i64 = @as(i64) i;
    self.values.get(i)
}

// SAFETY: 's' must not be deallocated during the lifetime of 'self' 
fun insert_owned(self: *StringPool, s: Str) Ident = {
    // TODO: better closure type inference
    if(self.lookup.get(s)) {(i: Ident) Ident|
        i
    }{()Ident|
        let i: Ident = @as(Ident) self.values.len[];
        self.lookup.insert(s, i);
        self.values.push(s);
        i
    }
}

// TODO: derive drop impls
// TODO: should I drop the strings? should take lists so ownership is clear. but then you're forced to make copies. what if you know the strings will outlive the pool? 
fun drop(self: *StringPool) Unit = {
    self.lookup.drop();
    self.values.drop();
}

fn test_string_pool() Unit = {
    var m: StringPool = init();
    let s: Str = "hello";
    let b: Str = "goodbye";
    let hello = m&.insert_owned(s);
    let hello2 = m&.insert_owned(s);
    let bye = m&.insert_owned(b);
    assert_eq(true, eq(hello, hello2));
    assert_eq(false, eq(hello, bye));
    let s2 = m&.get(hello);
    assert_eq(true, eq(s, s2));
    let b2 = m&.get(bye);
    assert_eq(false, eq(b2, s2));
    assert_eq(true, eq(b, b2));
    m&.drop();
}

const LexAsm = @struct(
    text: Str,
    index: i64,
);

#test(aarch64)
fn main(c: i64) i64 = {
    test_option();
    test_map();
    test_string_pool();
    
    c
}

// TODO: better error for conflicting overloads, should show you both callsites. try it with: 
/*
#c_call #aarch64
fun eq(a: Symbol, b: Symbol) bool = (
    0xeb01001f, 0x9a9f17e0, 0xd65f03c0, 
)!asm;

*/