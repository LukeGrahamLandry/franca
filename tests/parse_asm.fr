let test_asm = """
.section	__TEXT,__text,regular,pure_instructions
	.build_version macos, 13, 0
	.globl	_c_add                          ; -- Begin function c_add
	.p2align	2
_c_add:                                 ; @c_add
	.cfi_startproc
; %bb.0:
	add	x0, x1, x0
	ret
	.cfi_endproc
                                        ; -- End function
""";

fun insert() Unit = unit;
fun get() Unit = unit;
fun get_ptr() Unit = unit;
fun is_none() Unit = unit;
fun is_some() Unit = unit;
fun unwrap() Unit = unit;
fun if_opt() Unit = unit;
fun as_ref() Unit = unit;
fun none() Unit = unit;
fun some() Unit = unit;

@comptime
fn Option(const T: Type) Type = {
    const Self: Type = (Some: T, None: Unit)!enum;
    
    fun none() Self = (None: ());
    fun some(t: T) Self = (Some: t);
    
    // TODO: this is probably neater so leave it. but the old match version broke when I started resolving const arg patterns as const?? like it sometimes couldn't see captures. -- Apr 22
    fun if(self: Self, const then: Fn(T, Unit)) Unit = (self.is_some(), fn = then(self&.Some[]), fn=())!if;
    /*
    @match(self) {
        (fn Some(t: T) Unit = then(t));
        (fn None(t: Unit) Unit = ());
    };*/
    
    
    ::if_opt(T, bool);
    ::if_opt(T, T);
    
    fun or(self: Self, const else: Fn(Unit, T)) T =
        self.if(fn(t: T) T = t, fn = else()); // todo: should be able to just pass in else. might already work? 
    
    fun unwrap(self: Self) T =
        self.if(fn(t: T) T = t, fn = @as(T) panic("Unwrapped missing value."));
        
    fun is_some(self: Self) bool = self&!tag[].eq(tag_value(Self, Some!symbol));
    fun is_none(self: Self) bool = self&!tag[].eq(tag_value(Self, None!symbol));

    // TODO: derive
    fun eq(self: Self, other: Self) bool = 
        self.if(fn(a: T) bool = {
            other.if(fn(b: T) bool = {
                a.eq(b)
            }, fn = false)
        }, fn = other.is_none());
    
    fun while(const next: Fn(Unit, Self), const body: Fn(T, Unit)) Unit = {
        // Note: this is formated a bit awkwardly because you don't want to expand next and body in multiple places. 
        // TODO: should add an optional warning if you care about binary size for expanding the same const closure multiple times. 
        dowhile {() bool |
            var v = next();
            v.if(body);
            v.is_some()
        };
    }
    
    Self
}

@comptime
fun operator_question_prefix(const T: Type) Type = Option(T);

// TODO: it should close over T without the extra argument when put in the @comptime fn Option
@comptime @impl
fun if_opt(const I: Type, const O: Type) Unit = {
    // TODO: the old one with @match should work. need to fix chained_captures better -- Apr 23. 
    fun if(self: ?I, const then: Fn(I, O), const else: Fn(Unit, O)) O = 
        (self.is_some(), fn = then(self&.Some[]), fn=else())!if;
    /*
    @match(self) {
        (fn Some(t: I) O = then$t);
        (fn None(t: Unit) O = else()); // TODO: allow no arg name in match macro. 
    };
    */
}

::if(?*i64);
// TODO: this sucks cause you can't @match through a pointer 
//       and like now do i have to write pointer versions of all of them so you dont have to manually call as_ref every time? 
fun as_ref(self: *?i64) ?*i64 = {
    let cond = self!tag[].eq(tag_value(?i64, Some!symbol));
    if(cond, fn() ?*i64 = {
        some$self.Some
    },  fn() ?*i64 = none())
}

fn test_option() Unit = {
    ::Option(i64);
    
    var s: ?i64 = some(123);
    
    var a = 0;
    s.if(fn(i: i64) Unit = {
        a = i;
    });
    
    assert_eq(a, 123);
    
    var i = 0;
    while(fn = {s}) { (v: i64) |
        s = none();
        i = i.add(1);
    };
    assert_eq(i, 1);
    
    let n: ?i64 = none();
    let z = n.or(fn = 555);
    assert_eq(z, 555);
    
    var y: ?i64 = some(10);
    let z = y.or(fn = 555);
    assert_eq(z, 10);
    
    assert_eq(true, y.is_some());
    y.unwrap();
    
    let y_ptr = y&.as_ref();
    
}

/* // TODO: this is the point where not having traits gets really annoying
const Hasher = @trait fn (T: Type) = {
    fn write(self: *T, bytes: Slice$i64) Unit;
    fn finish(self: T) i64;
};
const Key = @trait fn (T: Type) = {
    fn drop(v: *T) Unit;
    fn eq(v: *T, v: *T) bool;
    fn hash(H: Hasher, hasher: *H, v: *T) Unit;
};
*/

@comptime 
fn DumbMap(const K: Type, const V: Type) Type = {
    // TODO: instead of complicated traits, just require(eq!symbol, Ty(K, K), bool);
    const Self = (arr: List(Ty(K, V)))!struct;
    
    fun init() Self = (arr: list());
    
    ::?*V;
    :: if_opt(*V, ?V);
    
    fun insert(self: *Self, key: K, value: V) ?V = {
        self.get_ptr(key).if(fn(v: *V) ?V = {
            let old = v[];
            v[] = value;
            some(old)
        }, fn() ?V = {
            let entry = (key, value);
            self.arr.push$entry;
            none()
        })
    }

    fun get(self: *Self, key: K) ?V = {
        let found: ?*V = self.get_ptr$key;
        (@match(found) {
            (fn Some(t: *V) ?V = some$t[]);
            (fn None(t: Unit) ?V = none());
        })
    }
    
    /// SAFETY: the returned pointer is invalid after a call to 'insert' (which may trigger a resize)
    fun get_ptr(self: *Self, key: K) ?*V = {
        var i = 0;
        let count = self.arr.len[];
        var out: ?*V = none();
        count.ne(0).if {|
            dowhile {() bool |
                let p: *Ty(K, V) = self.arr.index$i;
                let k: K = p[0][];
                k.eq(key).if {|
                    let v = p[1];
                    out = some$v;
                };
                
                i = i.add(1);
                i.lt(count).and(out.is_none())
            };
        };
    
        out
    }
    
    // TODO: drop entries? 
    fun drop(self: *Self) Unit = {
        self.arr.drop();
    }
    
    Self
}

// ok at this point i'm seeing it would be nice to put the tests in the lib file. 
fn test_map() Unit = {
    var m: DumbMap(i64, i64) = init();
    assert_eq(true, m&.insert(123, 456).is_none());
    let expect: ?i64 = some(456);
    let prev = m&.insert(123, 5);
    // TODO: when you inline this it fails but thinks right is 654. disagree about bool calling conventions maybe? 
    //       probably my inconsistancy with enum padding on asm? 
    let t = expect.eq(prev);
    assert_eq(true, t);
    
    let expect2: ?i64 = some$5;
    let prev = m&.get(123);
    let t = expect2.eq(prev);
    assert_eq(true, t);
    let f = expect2.eq(expect);
    assert_eq(false, f);
}

const AsmFile = (
    src: Str,
    blocks: DumbMap(Symbol, i64),
)!struct;


const Ident = i64.Unique();
fun eq(a: Ident, b: Ident) bool = eq(@as(i64) a, @as(i64) b);

const StringPool = (
    lookup: DumbMap(Str, Ident),
    values: List$Str,
)!struct;

fun init() StringPool = {
    let lookup: DumbMap(Str, Ident) = init();
    let l: List$Str = list();
    let self: StringPool = (lookup: lookup, values: l);
    self
}

// SAFETY: 'i' must be the result of inserting into 'self'
@pub 
fn get(self: *StringPool, i: Ident) Str = {
    let i: i64 = @as(i64) i;
    self.values.get(i)
}

// SAFETY: 's' must not be deallocated during the lifetime of 'self' 
fun insert_owned(self: *StringPool, s: Str) Ident = {
    // TODO: better closure type inference
    if(self.lookup.get(s)) {(i: Ident) Ident|
        i
    }{()Ident|
        let i: Ident = @as(Ident) self.values.len[];
        self.lookup.insert(s, i);
        self.values.push(s);
        i
    }
}

// TODO: derive drop impls
// TODO: should I drop the strings? should take lists so ownership is clear. but then you're forced to make copies. what if you know the strings will outlive the pool? 
fun drop(self: *StringPool) Unit = {
    self.lookup.drop();
    self.values.drop();
}

fn test_string_pool() Unit = {
    var m: StringPool = init();
    let s: Str = "hello".str();
    let b: Str = "goodbye".str();
    let hello = m&.insert_owned(s);
    let hello2 = m&.insert_owned(s);
    let bye = m&.insert_owned(b);
    assert_eq(true, eq(hello, hello2));
    assert_eq(false, eq(hello, bye));
    let s2 = m&.get(hello);
    assert_eq(true, eq(s, s2));
    let b2 = m&.get(bye);
    assert_eq(false, eq(b2, s2));
    assert_eq(true, eq(b, b2));
    m&.drop();
}

const LexAsm = (
    text: Str,
    index: i64,
)!struct;

@c_call @aarch64 @pub 
fn eq(a: Symbol, b: Symbol) bool = (
    0xeb01001f, 0x9a9f17e0, 0xd65f03c0, 
)!asm;

@test(aarch64)
fn main(c: i64) i64 = {
    test_option();
    test_map();
    test_string_pool();
    
    c
}
