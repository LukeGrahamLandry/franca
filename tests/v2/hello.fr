
builtin   :: "this will never be evaluated... but it needs to resolve (HACK)";
simple_eq :: @builtin("compiler_debug_assert_eq_i64");

#test fn call_a_builtin() = {
    abc :: 123; 
    simple_eq(abc, 123);
}

#test fn read_var() = {
    a := 456; 
    simple_eq(a, 456);
}

#test fn set_var() = {
    a := 456; 
    a = 789;
    simple_eq(a, 789);
}

#test fn take_address() = {
    a := 456; 
    b := a&;
    b[] = 789;
    simple_eq(a, 789);
    simple_eq(b[], a&[]);
    c := b&;
    c[][] = 123;
    simple_eq(a, 123);
}

// if simple_eq logs, you should see 1 before 2. 
#test fn const_eval() = {
    simple_eq(2, 2);
    :: simple_eq(1, 1);
}

#test fn no_arg_call() = {
    do_stuff :: fn() = {
        simple_eq(314, 314);
    };
    do_stuff();
}

#test fn infer_const_ret() = {
    get_one :: fn() = 1;
    simple_eq(get_one(), 1);
}
