// The new compiler doesn't work if you don't `::` your generic instantiations but the old one does. 
// maybe i'm ok with just now allowing this if dispatch was the only test that did it. 
// i want to get rid of manual instantiations anyway. 
// and it makes sense to say we only deal with compiling a functions body when we need to run it, we don't guarentee that it will happen early, 
// even if there are comptime side effects, that's a you problem. 
// TODO: if you name make_upcast just upcast as well then the error message is incomprehensible. 
//       it just chooses that overload and complains that it can't find var six at comptime without bothering to type check. 
#test fn instantiation_without_force_comptime() = {
    Eval :: @struct(dataptr: rawptr);
    
    fn upcast();
    fn make_upcast($T: Type) void = {
        fn upcast(self: *T) Eval = {
            (dataptr = raw_from_ptr(T, self))
        }
    }
    
    make_upcast(i64);
    
    six := 6;
    unknown := six&.upcast();
}

// TODO
// This is one the old system can't do! tho it can if you swap the order of declarations.
// but the new system can handle either which is very pleasing. 
//#test 
fn overloading_cycle() = {
    fn do_stuff() Type = i64;
    fn do_stuff(a: do_stuff()) do_stuff() = a;
    x := do_stuff(123);
    simple_eq(x, 123);
}

// You can use named arguments to resolve ambiguous overloads
#test fn named_arg_disambiguate() = {
    fn seconds(hours: i64) i64 = mul(hours, mul(60, 60));
    fn seconds(minutes: i64) i64 = mul(minutes, 60);
    
    // You can't just call 'seconds(5)' because there's no way to tell which version you meant to call. // TODO: make sure its an error
    assert_eq(seconds(minutes=5), 300);
    assert_eq(seconds(hours=5), 18000);
}
