//! These tests don't use defined macros or intrinsics, 
//! so they're good for debugging when nothing works at all (like rewriting all the sema stuff... hypothetically). 
//! We progress through calls, const args, tuples, closures, and overloads.
//! Could be nice when adding new backends too, if you define compiler_debug_assert_eq_i64,
//! as an extern-ed thing that prints so you can see what's going on. 
//! You don't even need to have branching working yet because I can't call `if`. 

builtin   :: "this will never be evaluated... but it needs to resolve (HACK)";
struct   :: "this will never be evaluated... but it needs to resolve (HACK)";
enum   :: "this will never be evaluated... but it needs to resolve (HACK)";
tagged   :: "this will never be evaluated... but it needs to resolve (HACK)";
simple_eq :: @builtin("compiler_debug_assert_eq_i64");
i64 :: @builtin("i64");
Type :: @builtin("Type");
void :: @builtin("void");

#test fn call_a_builtin() = {
    abc :: 123; 
    simple_eq(abc, 123);
}

#test fn read_var() = {
    a := 456; 
    simple_eq(a, 456);
}

#test fn set_var() = {
    a := 456; 
    a = 789;
    simple_eq(a, 789);
}

#test fn take_address() = {
    a := 456; 
    b := a&;
    b[] = 789;
    simple_eq(a, 789);
    simple_eq(b[], a&[]);
    c := b&;
    c[][] = 123;
    simple_eq(a, 123);
}

// if simple_eq logs, you should see 1 before 2. 
#test fn const_eval() = {
    simple_eq(2, 2);
    :: simple_eq(1, 1);
}

#test fn no_arg_call() = {
    do_stuff :: fn() = {
        simple_eq(314, 314);
    };
    do_stuff();
}

#test fn infer_const_ret() = {
    get_one :: fn() = 1;
    simple_eq(get_one(), 1);
}

#test fn type_check_ret() = {
    get_one :: fn() i64 = 1;
    simple_eq(get_one(), 1);
}

#test fn callee_chain() = {
    get_one_impl :: fn() i64 = {
        a := 1;
        a
    };
    get_one_factory :: fn() i64 = get_one_impl();
    get_one_factory_manager :: fn() i64 = get_one_factory();
    simple_eq(get_one_factory_manager(), 1);
}

#test fn return_expr() = {
    get_one :: fn() i64 = {
        return(1);
        123
    };
    simple_eq(get_one(), 1);
}

#test fn single_arg() = {
    identity :: fn(i: i64) i64 = i;
    simple_eq(identity(123), 123);
}

// get_x will yield so you need to deal with the argument variables being added multiple times. 
#test fn one_hop_this_time() = {
    x :: 789;
    identity :: fn(i: i64) i64 = i;
    get_x :: fn(ignore: i64) i64 = {
        return(identity(x));
        999
    };
    simple_eq(get_x(123), 789);
}

#test fn mut_arg() = {
    get_123 :: fn(i: i64, extra: i64) i64 = {
        simple_eq(extra, 789);
        simple_eq(i, 456);
        i = 123;
        i
    }
    simple_eq(get_123(456, 789), 123);
}

#test fn const_call() = {
    int :: fn() Type = {
        i := i64;
        i
    };
    a: int() = 123;
    simple_eq(a, 123);
}

#test fn const_call_arg() = {
    identity :: fn(i: Type) Type = i;
    a: identity(i64) = 123;
    simple_eq(a, 123);
}

// this should catch you if you try to fudge adding callees (ie. compile in const context ignoring callees and then forget to clear done flag)
#test fn const_hop_this_time() = {
    identitya :: fn(i: Type) Type = i;
    identityb :: fn(i: Type) Type = i;
    a: identitya(identityb(i64)) = 123;
    simple_eq(a, 123);
}

#test fn const_arg() = {
    identity :: fn($Int: Type, i: i64) i64 = {
        a: Int = i;
        a
    };
    x := identity(i64, 123);
    simple_eq(x, 123);
}

#test fn double_trouble() = {
    constant :: fn($i: i64) i64 = i;
    simple_eq(constant(123), 123);
    simple_eq(constant(456), 456);
    simple_eq(constant(123), 123);
}

#test fn two_const_args() = {
    first :: fn($i: i64, $ignore: i64) i64 = i;
    simple_eq(first(123, 456), 123);
}

#test fn tuple_var() = {
    value := (123, 456);
    simple_eq(value._0, 123);
    simple_eq(value._1, 456);
    value._0 = 789;
    simple_eq(value._0, 789);
    ref := value._1&;
    ref[] = 234;
    simple_eq(value._1, 234);
}

#test fn nested_tuple() = {
    value := (123, (456, 789));
    simple_eq(value._0, 123);
    simple_eq(value._1._0, 456);
    simple_eq(value._1._1, 789);
}

#test fn do_you_are_have_generics() = {
    identity :: fn($T: Type, i: T) T #generic = {
        a: T = i;
        a
    };
    simple_eq(identity(i64, 123), 123);
    x: identity(Type, i64) = 456;
    simple_eq(x, 456);
    y: identity(identity(Type, Type), i64) = 789;
    simple_eq(y, 789);
}

// at firs this only worked if you manually factor out the X value into a trivial function.
// otherwise you try to call uncompiled. 
#test fn const_arg_in_const() = {
    identity :: fn($T: Type, i: T) T #generic = {
        a: T = i;
        a
    };
    X :: identity(Type, i64);
    x: X = 123;
    simple_eq(x, 123);
}

// here while you're trying to bind (T=Type), you notice you actually need to do (T=Type) first.
// this works if you bring the type of y into its own named constant, otherwise try to call uncompiled. 
// it adds the callee to the outer litfn, then makes an inner one (because the arg is const) that doesn't have that callee,
// but the expr is still marked as done because it was successfully added to the outer one. 
#test fn nested_instantiate() = {
    identity :: fn($T: Type, i: T) T #generic = {
        a: T = i;
        a
    };
    y: identity(identity(Type, Type), i64) = 789;
    simple_eq(y, 789);
}

#test fn me_and_my_closured_heart() = {
    a := 123;
    set_a :: fn(i: i64) i64 => {
        old := a;
        a = i;
        old
    };
    simple_eq(set_a(456), 123);
    simple_eq(a, 456);
}

#test fn two_args_this_time() = {
    a := 123;
    b := 123;
    set :: fn(i: i64, j: i64) void => {
        a = i;
        b = j;
    };
    set(456, 789);
    simple_eq(a, 456);
    simple_eq(b, 789);
}

#test fn just_destructure() = {
    ab := (123, 456);
    (a, b) := ab;
    simple_eq(a, 123);
    simple_eq(b, 456);
    
    make_pair :: fn(fst: i64, snd: i64) = (fst, snd);
    (c, d) := make_pair(1, 2);
    simple_eq(c, 1);
    simple_eq(d, 2);
}

#test fn closure_has_const_arg() = {
    c := 123;
    identity :: fn($T: Type, i: T) T #generic => {
        a: T = i;
        c = 456;
        a
    };
    b := identity(i64, 789);
    simple_eq(b, 789);
    simple_eq(c, 456);
}

#test fn mark_inline() = {
    identity :: fn(i: i64) i64 #inline = i;
    simple_eq(identity(123), 123);
}

#test fn overloaded_on_arity() = {
    fn first(i: i64) i64 = i;
    fn first(i: i64, j: i64) i64 = i;
    
    simple_eq(first(123), 123);
    simple_eq(first(123, 456), 123);
}

#test fn overload_on_arg() = {
    fn the_id(i: i64) i64  = 1;
    fn the_id(i: Type) i64 = 2;
    
    simple_eq(the_id(123), 1);
    simple_eq(the_id(i64), 2);
}

#test fn overload_on_ret() = {
    fn get_something() i64  = 1;
    fn get_something() Type = i64;
    
    a: get_something() = get_something();
    simple_eq(a, 1);
}

#test fn expand_template() = {
    fn identity();
    fn make_identity($T: Type) void = {
        fn identity(i: T) T = i;
    }
    ::make_identity(Type);
    ::make_identity(i64);
    
    a: identity(i64) = identity(123);
    simple_eq(a, 123);
}

// This is one the old system can't do! tho it can if you swap the order of declarations.
// but the new system can handle either which is very pleasing. 
#test fn overloading_cycle() = {
    fn do_stuff() Type = i64;
    fn do_stuff(a: do_stuff()) do_stuff() = a;
    x := do_stuff(123);
    simple_eq(x, 123);
}

#test fn make_a_struct() = {
    S :: @struct(a: i64, b: i64);
    s: S = (a = 123, b = 456);
    simple_eq(s.a, 123);
    simple_eq(s.b, 456);
    s.a = 789;
    simple_eq(s.a, 789);
}

#test fn make_an_enum() = {
    A :: @enum(i64) (a = 0, b = 1, c = 17);
    a: A = .a;
    a := A.a;
    B :: @enum(i64) (a, b, c);
    b := B.c;
}

#test fn overload_gives_partial_type_hint() = {
    E :: @enum(i64) (a, b, c);
    E2 :: @enum(i64) (a, b, c);
    fn which_enum(fst: Type, a: E2) i64 = 2;
    fn which_enum(fst: i64, a: E) i64 = 1;
    simple_eq(which_enum(123, .b), 1);
    simple_eq(which_enum(i64, .b), 2);
}

#test fn hint_through_closure() = {
    E :: @enum(i64) (a, b, c);
    E2 :: @enum(i64) (e, a, b);
    
    get_e :: fn() => .a;
    e: E = get_e();
    e2: E2 = get_e();
    
    fn which_enum(fst: Type, a: E2) i64 = 2;
    fn which_enum(fst: i64, a: E) i64 = 1;
    simple_eq(which_enum(123, get_e()), 1);
    simple_eq(which_enum(i64, get_e()), 2);
}

#test fn make_a_tagged() = {
    T :: @tagged(a: i64, b: Type, c: @enum(i64) (a, b, c), d: void, e);
    
    a: T = (a = 123);
    simple_eq(a.a, 123);
    a = (b = i64);
    a = (c = .a);
    a = .d;
    a = .e;
}

// This is another thing the old version can't do, tho not for a deep architectural reason this time. 
// The old one only poked in types for .Infer when passing the closure as an argument. 
// But it feels more consistant to also allow doing this. 
// Since you need to support .Infer args for ergonomic trailing lambdas anyway. 
#test fn poly_args() = {
    first :: fn(a, b) => a;
    simple_eq(first(1, 2), 1);
    simple_eq(first(2, i64), 2);
    
    // identity :: fn(a) => a;  // TODO: if you copy paste this, "Undeclared Identifier: simple_eq" instead of telling you about shadowing
    identity :: fn(a) => a;
    simple_eq(identity(3), 3);
    x: identity(i64) = 123;
}

#test fn mixed_poly_gives_hint() = {
    E :: @enum(i64) (a, b, c);
    first :: fn(a, b: E) => a;
    simple_eq(first(1, .b), 1);
}

#test fn poly_with_const() = {
    do_stuff :: fn($T: Type, x: T, y) #generic => {
        t: T = x;
        t
    };
    simple_eq(do_stuff(i64, 1, 123), 1);
    a: do_stuff(Type, i64, 123) = 456;
}

// Old version can't do this either. It doesn't pass hint from past const args. 
#test fn const_gives_hint() = {
    E :: @enum(i64) (a, b);
    do_stuff :: fn($T: Type, x: T) T #generic = x;
    a := do_stuff(E, .a);
}
