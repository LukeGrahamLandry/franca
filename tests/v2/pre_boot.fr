//! These tests don't use defined macros, overloads, or even intrinsics, 
//! so they're good for debugging when nothing works at all (like rewriting all the sema stuff... hypothetically). 
//! Could be nice when adding new backends too, if you define compiler_debug_assert_eq_i64,
//! as an extern-ed thing that prints so you can see what's going on. 
//! You don't even need to have branching working yet because I can't call `if`. 

builtin   :: "this will never be evaluated... but it needs to resolve (HACK)";
simple_eq :: @builtin("compiler_debug_assert_eq_i64");
i64 :: @builtin("i64");
Type :: @builtin("Type");

#test fn call_a_builtin() = {
    abc :: 123; 
    simple_eq(abc, 123);
}

#test fn read_var() = {
    a := 456; 
    simple_eq(a, 456);
}

#test fn set_var() = {
    a := 456; 
    a = 789;
    simple_eq(a, 789);
}

#test fn take_address() = {
    a := 456; 
    b := a&;
    b[] = 789;
    simple_eq(a, 789);
    simple_eq(b[], a&[]);
    c := b&;
    c[][] = 123;
    simple_eq(a, 123);
}

// if simple_eq logs, you should see 1 before 2. 
#test fn const_eval() = {
    simple_eq(2, 2);
    :: simple_eq(1, 1);
}

#test fn no_arg_call() = {
    do_stuff :: fn() = {
        simple_eq(314, 314);
    };
    do_stuff();
}

#test fn infer_const_ret() = {
    get_one :: fn() = 1;
    simple_eq(get_one(), 1);
}

#test fn type_check_ret() = {
    get_one :: fn() i64 = 1;
    simple_eq(get_one(), 1);
}

#test fn callee_chain() = {
    get_one_impl :: fn() i64 = {
        a := 1;
        a
    };
    get_one_factory :: fn() i64 = get_one_impl();
    get_one_factory_manager :: fn() i64 = get_one_factory();
    simple_eq(get_one_factory_manager(), 1);
}

#test fn return_expr() = {
    get_one :: fn() i64 = {
        return(1);
        123
    };
    simple_eq(get_one(), 1);
}

#test fn single_arg() = {
    identity :: fn(i: i64) i64 = i;
    simple_eq(identity(123), 123);
}

// get_x will yield so you need to deal with the argument variables being added multiple times. 
#test fn one_hop_this_time() = {
    x :: 789;
    identity :: fn(i: i64) i64 = i;
    get_x :: fn(ignore: i64) i64 = {
        return(identity(x));
        999
    };
    simple_eq(get_x(123), 789);
}

#test fn mut_arg() = {
    get_123 :: fn(i: i64, extra: i64) i64 = {
        simple_eq(extra, 789);
        simple_eq(i, 456);
        i = 123;
        i
    }
    simple_eq(get_123(456, 789), 123);
}

#test fn const_call() = {
    int :: fn() Type = {
        i := i64;
        i
    };
    a: int() = 123;
    simple_eq(a, 123);
}

#test fn const_call_arg() = {
    identity :: fn(i: Type) Type = i;
    a: identity(i64) = 123;
    simple_eq(a, 123);
}

// this should catch you if you try to fudge adding callees (ie. compile in const context ignoring callees and then forget to clear done flag)
#test fn const_hop_this_time() = {
    identitya :: fn(i: Type) Type = i;
    identityb :: fn(i: Type) Type = i;
    a: identitya(identityb(i64)) = 123;
    simple_eq(a, 123);
}

#test fn const_arg() = {
    identity :: fn($Int: Type, i: i64) i64 = {
        a: Int = i;
        a
    };
    x := identity(i64, 123);
    simple_eq(x, 123);
}

#test fn double_trouble() = {
    constant :: fn($i: i64) i64 = i;
    simple_eq(constant(123), 123);
    simple_eq(constant(456), 456);
    simple_eq(constant(123), 123);
}

#test fn two_const_args() = {
    first :: fn($i: i64, $ignore: i64) i64 = i;
    simple_eq(first(123, 456), 123);
}

#test fn tuple_var() = {
    value := (123, 456);
    simple_eq(value._0, 123);
    simple_eq(value._1, 456);
    value._0 = 789;
    simple_eq(value._0, 789);
    ref := value._1&;
    ref[] = 234;
    simple_eq(value._1, 234);
}

#test fn nested_tuple() = {
    value := (123, (456, 789));
    simple_eq(value._0, 123);
    simple_eq(value._1._0, 456);
    simple_eq(value._1._1, 789);
}

#test fn do_you_are_have_generics() = {
    identity :: fn($T: Type, i: T) T #generic = {
        a: T = i;
        a
    };
    simple_eq(identity(i64, 123), 123);
    x: identity(Type, i64) = 456;
    simple_eq(x, 456);
    y: identity(identity(Type, Type), i64) = 789;
    simple_eq(y, 789);
}

// at firs this only worked if you manually factor out the X value into a trivial function.
// otherwise you try to call uncompiled. 
#test fn const_arg_in_const() = {
    identity :: fn($T: Type, i: T) T #generic = {
        a: T = i;
        a
    };
    X :: identity(Type, i64);
    x: X = 123;
    simple_eq(x, 123);
}

// here while you're trying to bind (T=Type), you notice you actually need to do (T=Type) first.
// this works if you bring the type of y into its own named constant, otherwise try to call uncompiled. 
// it adds the callee to the outer litfn, then makes an inner one (because the arg is const) that doesn't have that callee,
// but the expr is still marked as done because it was successfully added to the outer one. 
#test fn nested_instantiate() = {
    identity :: fn($T: Type, i: T) T #generic = {
        a: T = i;
        a
    };
    y: identity(identity(Type, Type), i64) = 789;
    simple_eq(y, 789);
}
