#test 
fn just_capturing() = {
    // Branches of a call to if can access variables from the outer scope. 
    a := 10;
    if(true, => { a = 1; }, => { a = 2; });
    assert_eq(a, 1);
    
    b := 1;
    capturing :: fn(n: i64) => {
        b = n;
    };
    assert_eq(b, 1);
    capturing(15);
    assert_eq(b, 15);
    
    // Shadowed vars are still local. 
    c := 1;
    not_capturing :: fn(n: i64) => {
        c := n;
    };
    assert_eq(c, 1);
    not_capturing(15);
    assert_eq(c, 1);
    
    c := 7;
    capturing_with_const :: fn(n: i64) => {
        a :: 1;
        c = add(n, a);
    };
    assert_eq(c, 7);
    capturing_with_const(18);
    assert_eq(c, 19);
    
    n := 10; 
    add_n :: fn(a: i64) i64 => {
        N :: 5;  // inner constant
        a.add(n).add(N)
    };
    assert_eq(30, add_n(15));
    assert_eq(20, add_n(5));
}

#test 
fn first_class_functions(_canary: i64) i64 = {
    // This function takes a function as an argument, pretty meta bro...
    fn call_it(n: i64, $f: Fn(i64, i64)) i64 = add(f(n), 1);
    
    // TODO: it doesn't work if you try to pass a function by name. 
    temp :: fn(m: i64) i64 => mul(2, m);
    assert_eq(9, call_it(4, temp));
    
    // You can pass a capturing closure as an argument
    a := 77;
    assert_eq(3, call_it(0, fn(m: i64) i64 => {
        a = 88;
        add(2, m)
    }));
    assert_eq(a, 88);
    
    a := 99999;
    set_0 :: => { a = 0 };
    set_1 :: => { a = 1 };
    c := true;
    if(c, set_1, set_0);
    assert_eq(a, 1);
    
    a = 99999;
    if(c, set_1, set_0);
    assert_eq(a, 1);
    
    // Nested capture
    a := 123;
    l1 :: => {
        l2 :: => {
            a = 7;
        };
        l2();
    };
    l1();
    assert_eq(a, 7);
    fn call_arg($arg: Fn(void, void)) void = {
        arg();
    }
    // TODO: make this work if its a normal function. needs to not pass the overload set. 
    set6 :: => {
        a = 6;
    };
    call_arg(set6);
    assert_eq(a, 6);

    _canary
}

/// argument order of evaluation is defined
#test 
fn arg_eval_order() = {
    shared := 0;
    get_and_inc :: fn() i64 => {
        shared = shared.add(1);
        shared
    };
    
    fn one_two_three(a: i64, b: i64, c: i64) void = {
        assert_eq(a, 1);
        assert_eq(b, 2);
        assert_eq(c, 3);
    }
    
    one_two_three(get_and_inc(), get_and_inc(), get_and_inc());
}

/// Like Kotlin and Swift, we have syntax sugar for trailing lambda arguments. 
/// An alternative to the backpassing syntax. 
#test 
fn trailing_lambda_syntax(canary: i64) i64 = {
    cond := true;
    a := 0;
    
    // Normal function call 
    if(cond, => {
        a = a.add(1);
    });
    assert_eq(a, 1);
    
    // Call with trailing lambda. 
    if(cond) {
        a = a.add(1);
    };
    assert_eq(a, 2);
    
    // Dot call with trailing lambda. 
    if cond {
        a = a.add(1);
    };
    assert_eq(a, 3);
    
    // TODO: test with arg and ret types. 
    
    i := 1;
    while(=> i.gt(0), => { i = i.sub(1)});
    assert_eq(i, 0);
    i = 1;
    while(=> i.gt(0)){| i = i.sub(1) };
    assert_eq(i, 0);
    i = 1;
    while {| i.gt(0) }{| i = i.sub(1) };
    assert_eq(i, 0);
    
    canary
}

// :ChainedCaptures
// The problem is that it binds the closures into the args of local_if, 
// and then decides that new local_if has no runtime captures, 
// because it hasn't actually tried to compile the closures yet. 
// the closures don't have runtime captures until you try to compile them and it does the capturing_call of 'value'. 
// So since it thinks the specialized 'local_if' has no captures, it gets a new 'result: FnWip', 
// which doesn't have the captures that were added to the specialized 'c_get''s FnWip. 
// So a hack fix here is just marking 'local_if' as @inline, but then you have to do that for any function with closure arguments, which the compiler should be doing for you. 
// The reason it worked before when bindings were always resolved as Var even if Const, 
// was the 'then' branch in the body of 'c_get' would show up as having a runtime capture of 'value' instead of a const one, 
// so local_if would be inlined, and then it would successfully find the real lost capture of 'number' from the outer scope.
// currently just applying that hack fix in the compiler but should do better eventually. expecially since that means if you pass a normal function as a const arg _every_ later callsite will be inlined. 
#test 
fn chained_captures(canary: i64) i64 = {
    // same as normal if, just want to make the whole test case self contained. 
    fn local_if(cond: bool, $then: Fn(void, i64), $else: Fn(void, i64)) i64 =
        if(cond, then, else);

    fn c_get(cond: bool, $value: Fn(i64, i64)) i64 = {  // inherits runtime captures of 'value'
        // body calls 'value', so should also inherit its runtime captures, which means local_if should inherit them too. 
        local_if(cond, fn() i64 => value(4), =>0)
    }
    
    number := 7;
    result := c_get(true, fn(_: i64) i64 => number);
    assert_eq(result, 7);
    
    canary
}

#test  
fn call_twice() = {
    a := 0;
    
    close :: fn(b: i64) i64 => {
        c := a.add(b);
        a += c;
        c
    };
    
    assert_eq(close(2), 2);
    assert_eq(a, 2);
    assert_eq(close(3), 5);
    assert_eq(a, 7);
}

#test  
fn some_non_trailing() = {
    foo        :: fn($a: @Fn(x: i64) i64, $b: @Fn(x: i64) i64) i64 = a(b(0));
    nested     :: fn($c: @Fn(x: i64) i64 #duplicated) i64 = foo(c, c);
    reuse_this :: fn(y: i64) => y + 1;
    
    a := foo(reuse_this, reuse_this);
    b := foo(fn(y) => y + 1, reuse_this);
    c := foo(reuse_this) { y |
        y + 1
    };
    d := nested(fn(y) => y + 1);
    
    assert_eq(a+b+c+d, 8);
}
