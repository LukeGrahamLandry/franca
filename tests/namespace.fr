// TODO: maybe structs should have constant fields that are lazy in the same way as constants. 
//       can then instead of @namespace being a new magic thing that lets you refer to a block, 
//       you can just use a struct with all constant fields. 
//       and then instead of enum dot syntax being a whole parallel hashmap thing, they can just have a scope too like structs. 
//       and the enum macro just does extra magic somehow to typecheck that assignments are to one of the valid values and that all declarations are of the same type. 
//       for that i'd want more ordering stuff so you could say @enum happens after other hash macros are expanded but before
//       compiling any constants so it can put its type annotation on them. 

#test(aarch64)
fn main(canary: i64) i64 = {
    // Note: not the same as a c++ namespace, the thing is a value and we just happen to bind it to a name. 
    my_module :: @namespace {
        seven   :: 7;
        nine    :: 9;
        recurse :: lies;
        
        fn add_things() i64 = seven.add(nine);
        
        unit; // TODO: its too clever, it removes the block if its only decl stmts inside. 
    };
    
    assert_eq(my_module.seven, 7);
    assert_eq(my_module.nine, 9);
    f :: my_module.add_things;  // TODO: alas you can't just call it because dot calls take precidence. 
    assert_eq(f(), 16);
    
    lies :: @namespace {
        seven   :: my_module.nine;
        nine    :: my_module.seven;
        recurse :: my_module;
        
        unit;
    };
    
    not_seven := my_module.recurse.seven;
    assert_eq(not_seven, 9);
    assert_eq(my_module.recurse.recurse.seven, 7);
        
    at_rt := my_module;  // its a first class value, not just a magic static constant thing, you just can't do anything with it now...

    :: if(ScopedBlock!builtin);  // instantiate template for 'fn if' on a new type. 
    
    crazy_town :: true;
    // TODO: there's no check that both export the same fields. it's just a compile error if the name isn't declared when you try to use it. maybe that should be opt out?  
    m :: if(crazy_town, => lies, => my_module);
    assert_eq(m.seven, 9);
    
    // TODO: ##using(my_module);    os :: @import_std("system.fr"); 
    //       ##include("filepath");  === ##using(@import("filepath"));     maybe?
    //       @import(s)  ===   @namespace { ##include(s) }              which direction is better? 

    canary
}
