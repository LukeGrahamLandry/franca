fn main() = {
    bytes: List(u8) = list(1000);
    b := bytes&;
    
    header: MachoHeader = (
        cpu_type = 0x0100000C, // arm 64bit
        cpu_subtype = 0x00000000,
        file_type = 0x00000002, // Demand paged executable file. (idk, thats what rust uses ¯\_(ツ)_/¯ )
        commands_count = 0, // TODO: patch
        commands_size = 0, // TODO: patch
        flags = 0b00000000101000000000000010000101, // (idc, thats what rust uses ¯\_(ツ)_/¯ )
    );
    
    // @write_body(header&) b;
    
    path := @symbol("target/macho.o").c_str();
    flag := (@as(i64) OpenFlag.Write).bit_or(@as(i64) OpenFlag.Truncate); // TODO: OpenFlag.Create but then need to pass mode
    f := open(path, flag);
    write(f, bytes.maybe_uninit.ptr, bytes.len);
    close(f);
}

// TODO: which endianness?? 

// TODO: check if aligned and be less dumb. 
fun push(self: *List(u8), v: u32) Unit = {
    self.push((@as(i64) v).bit_and(@as(i64) 0xFF000000));
    self.push((@as(i64) v).bit_and(@as(i64) 0x00FF0000));
    self.push((@as(i64) v).bit_and(@as(i64) 0x0000FF00));
    self.push((@as(i64) v).bit_and(@as(i64) 0x000000FF));
}

// TODO: check if aligned and be less dumb. 
fun push(self: *List(u8), v: u64) Unit = {
    self.push((@as(i64) v).bit_and(@as(i64) 0xFF00000000000000));
    self.push((@as(i64) v).bit_and(@as(i64) 0x00FF000000000000));
    self.push((@as(i64) v).bit_and(@as(i64) 0x0000FF0000000000));
    self.push((@as(i64) v).bit_and(@as(i64) 0x000000FF00000000));
    self.push((@as(i64) v).bit_and(@as(i64) 0x00000000FF000000));
    self.push((@as(i64) v).bit_and(@as(i64) 0x0000000000FF0000));
    self.push((@as(i64) v).bit_and(@as(i64) 0x000000000000FF00));
    self.push((@as(i64) v).bit_and(@as(i64) 0x00000000000000FF));
}
