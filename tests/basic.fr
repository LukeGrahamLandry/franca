;;;;;;; // allow no op stmts at top level

#test 
fn basic(_canary: i64) i64 = {
// You'd think this would be easy but somehow no. 
// Sanity check that comments aren't parsed: 
// }

/* }}}}} block comments are also a thing  */

/* /* }}} you can */ }}}} nest them */

// empty statements are allowed. 
;;;;;;;

{   };  // empty block treated as expression 
assert_eq(1, 1);  // assert_eq exists
fff :: fn(u: void) i64 = 15;
assert_eq(15, fff(unit));  // closure in a variable. 

assert_eq(1, /* hello */ 1);

// TODO: give an error for the ambigous case without the brackets. are you calling the block or the function?. i dont want to just pick a predidence 
//       blocks return values so theres never a reason to actually want to do this. 
assert_eq(25, (fn(u: void) i64 = { 25 })(unit));  // closure called inline
assert_eq(35, (fn() i64 = { 35 })());  // no arguments (not even void).
assert_eq(unit, (fn() void = { unit })()); // return unit
assert_eq(unit, (fn() void = { x := 0; })());  // implicit trailing `unit`

/// Binary Literals (useful for low level binary formats) ///
// TODO: regression zext for wierd ints
//assert_eq(@as(i64) 0b101, 5);
//assert_eq(@as(i64) 0b0000010100, 20);
//assert_eq(@as(i64) 0x5, 5);
//assert_eq(@as(i64) 0xF, 15);
assert_eq(@as(i64) 0xFF.zext(), 255);
//assert_eq(@as(i64) 0x0F0, 240);

/// simple_variables ///

assert_eq(5, (fn(n: i64) i64 = { x := 10; n })(5));
assert_eq(10, (fn(n: i64) i64 = { x := 10; x })(5));
assert_eq(25, (fn(n: i64) i64 = { x := n; x })(25));
assert_eq(50, (fn(n: i64) i64 = { x := n; x = 50; x })(5));
assert_eq(16, (fn(n: i64) i64 = { x := n; x = add(1, add(add(x, x), n)); x })(5));
assert_eq(10, (fn(n: i64) i64 = { x := 10; y := x; y })(5));

one: i64 = 1;  // variables can have type annotations 
assert_eq(one, 1);

/// simple if /// 

assert_eq(5, (fn(n: i64) i64 = {
    if(eq(n, 1), fn() i64 = { 5 }, fn() i64 = { 10 })
})(1));

five := if(true, fn() i64 => 5, fn() i64 => 10);
assert_eq(5, five);
assert_eq(5, if(true, fn() i64 = 5, fn() i64 = 5));

// infer types
five := if(true, => 5, => 10);
assert_eq(5, five);

/// call_in_type_annotation ///

fn get_int(u: void) Type = { i64 }
assert_eq(15, (fn(n: get_int(unit)) get_int(unit) = { add(add(n, n), n) }) (5));

assert_eq(5, mod(15, 10));
assert_eq(2, mod(32, 3));

////////////////
/// Pointers ///
////////////////

v := 10;
ptr := v&;  // Get the adddress of v's stack slot
assert_eq(10, ptr[]);
v = 5;
assert_eq(5, ptr[]);  // writes though var observed by ptr
ptr[] = 15;
assert_eq(15, v); // writes though ptr observed by var
assert_eq(15, ptr[]);

// It is legal to take pointer to uninitilized memory, as long as you write before you read. 
bad := @uninitialized i64;
bad_ptr := bad&;
bad_ptr[] = 1;  // initialize the memory
assert_eq(bad_ptr[], 1);  // now we can read it
assert_eq(bad, 1);

// You can pass functions pointers to your own stack. 
fn increment(ptr_arg: *i64) = {
    old := ptr_arg[];
    ptr_arg[] = add(old, 1);
}

m := 3;
increment(m&);
assert_eq(m, 4);

fn mistake(i: i64) *i64 = {
    my_value := add(i, i);
    my_value&  // oops, call frame went away
}
very_bad_ptr := mistake(1);  // it is illegal to dereference this pointer

// You can take the address of function arguments. 
// TODO: want to pass by const reference if big so be careful about mutating (or disallow). 

fn twice(arg: i64) i64 = {
    arg_ptr := arg&;
    mul(arg_ptr[], 2)
}
three := 3;
assert_eq(6, twice(three));

a := 10;
aa: *i64 = a&;
aa[] = 15;
assert_eq(a, 15);

@assert_compile_error { aa[] = unit; };  // typechecking

/////////////////////
/// Lexical Scope ///
/////////////////////

x := 5;
assert_eq(x, 5);
{  // Variables declared in a block shadow old ones
    x := 10;
    {
        x := 15;
        assert_eq(x, 15);
    };
    assert_eq(x, 10);
};  // but after the block you can see the old again. 
assert_eq(x, 5);

// Same in functions. 

aaaa := 20;
ttt :: fn(n: i64) i64 = {
    aaaa := 25;
    assert_eq(aaaa, 25);
    
    assert_eq(n, 35);
    n := 30;  // You can shadow arguments, but now you can't get it back. 
    assert_eq(n, 30);
    n
};
assert_eq(30, ttt(35));
assert_eq(aaaa, 20);

// infact, you can shadow anything
shadow := 40;
assert_eq(shadow, 40);
shadow := 45;  // but the old one's gone forever. 
assert_eq(shadow, 45);

////////////////
/// Inlining ///
////////////////

#inline fn test_call_1(n: i64) i64 = {
    //print(1);
    important_value := add(n, 1);
    mul(important_value, 2)
}

#noinline fn test_call_2(n: i64) i64 = {
    //print(2);
    important_value := add(n, 1);
    mul(important_value, 2)
}

important_value := 42;
assert_eq(test_call_1(2), 6);
assert_eq(important_value, 42);  // Inlining doesn't stomp variables
assert_eq(test_call_2(2), 6);
assert_eq(important_value, 42);  // Trivial


x := 10;
assert_eq(@type x, i64);
xa := x&;
assert_eq(@type xa, *i64);

// I'm not sure I like this. 
// side effects of expressions in macros don't run. 
// but at least it's consistant and theres a special symbol to tell you when its happening. 
// its not as bad as `size_of(blow_up_moon()`
// for `&` to be initiative it needs to put you in magic place expression mode 
// so a chain isnt actually copying everything out of the pointers on to the stack to compute an offset. 
// TODO: this should be a compile error. no side effects in macros that dont want them. 
fn do_side_effect(to: *i64) bool = {
    the := 1234;
    to[] = the;
    true
}
my_secret_value := 5;
assert_eq(my_secret_value, 5);
assert_eq(@type do_side_effect(my_secret_value&), bool);
assert_eq(my_secret_value, 5);
assert_eq(do_side_effect(my_secret_value&), true);
assert_eq(my_secret_value, 1234);

@assert_compile_error {
    print(this_is_not_the_var_youre_looking_for);
};

// TODO: this doesn't work with new wip_stack -- May 14
// Note: it doesn't bother trying to typecheck the function if you don't try to call it. 
// @assert_compile_error { fn abab(n: i64) this_too() = { n } abab(1) };


my_int :: i64;
fn hi(my_int: bool) = ();  // this shadows but its fine.
hi(false);

///////////////////

fn thing(one: i64, two: i64) i64 = add(one, two);
assert_eq(thing(1, 2), 3);
assert_eq(thing((1, 2)), 3);
aaaa := (1, 2);
// TODO: this sort of destructuring no longer works after airity overloading -- May 28
// assert_eq(thing(aaaa), 3);
three := (fn(one: i64, two: i64) i64 = add(one, two))(aaaa);
assert_eq(three, 3);
assert_eq((fn(one: i64, two: i64) i64 = add(one, two))(aaaa), 3);


// While
a := 0;
while(fn() bool => { lt(a, 3) }, => { a = add(a, 1); });
assert_eq(a, 3);

// You can do named arguments
fn hello(a: i64, b: i64) i64 = div(a, b);
assert_eq(hello(6, 3), 2);  // It's just a normal function, you can still pass positionally.
assert_eq(hello(a=6, b=3), 2);  // But you can also repeat the names at the call-site.
assert_eq(hello(b=3, a=6), 2);  // When all arguments are passed by name, the order doesn't matter.

/////
// Dot syntax for function calls. Not dynamic dispatch. 
// TODO: think about precidence. see devlog Mar-15. 

assert_eq(3, 1.add(2));  // this, 
assert_eq(3, add(1, 2)); // desugars to this. 

fn twice2(n: i64) i64 = mul(n, 2);
assert_eq(6, 3.twice2());

fn adds(a: i64, b: i64, c: i64) i64 = a.add(add(b, c));
n := 1;
assert_eq(6, n.adds(2, 3));

/////
// Constant folding for conditional compilation. 
// If the condition wasn't const known, these would be compile errors.
// Exhaustiveness of checking is more like Zig than like Rust. 

_: void = @if(true, (), 123);
@if(false, "hello".add(5), ());
@if(true, (), this_var_does_not_exist);
compute_true :: 1.gt(0);  // Currently you must explicitly declare more complex expressions const. 
@if(compute_true, (), no_compile_this_branch_pls);

// Ifs stay constant if body is constant
// TODO: this broke when i changed block reducing to expr when ret_label.is_some() -- May 29
//@if(@if(true, => false, => no_compile_me),
//     fn() void => no_compile_me2, =>());

fn ret_1() i64 = 1;
v := @if(true, ret_1(), no_compile_me()); // TODO: make this work without the type binding
assert_eq(1, v);

//// TODO: this needs to work. when a normal arg happens to be constant, it still gets put in a runtime var when the call gets inlined.
//         so the !if doesn't see it as constant. need to do fancier constant propagation. 
//if false {() void|
//    what_this_this;
//};

/* // TODO: c backend chokes on this. 
// fn call in a branch works when not const cond. 
t := true;
v := if(t, ret_1, => 123);
assert_eq(1, v);
*/

//////
/// Functions called in const context are just normal functions, 
/// thier arguments can be mutable in the body. They're not just inlined as const bindings. 
fn weird_add(a: i64, b: i64) i64 = {
    a = a.add(b);
    a
}
nn :: weird_add(1, 2);
assert_eq(nn, 3);

//////////////

assert_eq(true, true);
assert_eq(false, false);
assert_eq(false, true.eq(false));
assert_eq(true, true.eq(true));
assert_eq(true, 123.eq(123));
assert_eq(false, 123.eq(456));

assert_eq(void, void);
assert_eq(:: Ty(i64, bool), :: Ty(i64, bool));
IB: Type : Ty(i64, bool);
assert_eq(:: Ty(i64, bool), IB);
I_B: (Type, Type) : (i64, bool);
IB_B: (Type, Type) : (Ty(i64, bool), bool);
// TODO: these are odd, it should probably allow flatten like this? im not sure what makes most sense. 
//       currently flattening handled inconsistantly which is much worse than either choice
@assert_compile_error { I_B_B: Ty(Type, Type, Type) = (i64, (bool, bool)); };
@assert_compile_error { I_B_B2: Ty(Type, Type, Type) = ((i64, bool), bool); };

// TODO: auto compress tuple type?
// TODO: can't even assert_compile_error these because it hits debug size check. 
// IB_B2: (Type, Type) : ((i64, bool), bool); 
// I_BB: (Type, Type) : (i64, (bool, bool));

//////
/// Basic type checking. 
@assert_compile_error { a: i64 = "Hello"; };

// TODO: this is correctly an error but can't be caught anymore since '@as' moved to flat_call which doesn't have a graceful error handling story.  -- Apr 21
// @assert_compile_error { a: i64 = @as(Str) 1; };  

/// There's an eq for types, not just special compiler assert_eq
assert_eq(true, eq(void, void));
assert_eq(false, eq(void, i64));

// TODO: do i care enough about this to keep it? examples/count breaks here because `'` is a lex error (you just never see that when actually running the program). 
fn this_doesnt_get_called() = {
    so it doesn't have to parse...
    like there's no code in here my guy. 
    good luck with that: +__+-=-=-=-=-=-=~~~~|||\3!,.,.[][\@18092#3]@0@@@ :)[]]]]
    the only rule is that your { _ }, and "_" have to be matched so the lexer can find the end of the function. 
    "but inside a string you can do }}}}}}, cause that's normal" 
    //  {{{{{{{{{{{{{{{{{{{ comments work too `
    / <- that wasn't a real comment tho
}

NOT_REFERECED :: add("this wont", 1, "compile");  // but it does have to parse, parser only skips over whole function bodies. 

// TODO: regression in self hosted lexer. 
/*
😀 := 123;
💩 := 456;
assert_eq(😀, 123);
assert_eq(false, 😀.eq(💩));
*/

// You can have unicode characters in string literals tho. 
assert_eq("😀", "😀");
assert_eq("😀".len(), 4);  // len is measured in bytes of utf8 not codepoints or whatever

::assert_eq(u64);
assert_eq(0x0000FFFF0000FFFF, 0xFFFF0000FFFF0000.bit_not());
    assert_eq(abs(-123), 123);
    assert_eq(abs(123), 123);

    _canary
}

#test fn a_sigil_for_logical_and() = {
    blow_up_moon :: fn() bool = panic("goodbye moon");
    
    a := false;
    set_a_to_true :: fn() bool => {
        a = true;
        true
    };
    
    if false && set_a_to_true() {
        blow_up_moon();
    };
    assert_eq(a, false);
    
    if true && set_a_to_true() {
        assert_eq(a, true);
    };
    assert_eq(a, true);
    
    a = false;
    assert_eq(true && !false, true);
}

#test fn short_circuit_or() = {
    blow_up_moon :: fn() bool = panic("goodbye moon");
    b := 0;
    if true || blow_up_moon() {
        b = 1;
    };
    assert_eq(b, 1);
}

#test fn weird_precedence() = {
    a := if 1.gt(0) {| 1 } {|  2 } .add(3);
    assert_eq(a, 4);
    
    c :: fn(s: S, $f: @Fn() void) void = {
        if(s.c) {
            panic("this should not be called");
        };
        f();
    }; 
    
    S :: @struct(c: bool);
    s: S = (c = true);
    a := 1;
    // This parses as a field access not a dot call.
    if s.c {
        a = 2;
    };
    assert_eq(a, 2);
    
    s: S = (c = false);
    // this is a dot call
    s.c() {
        a = 3;
    };
    assert_eq(a, 3);
}

// This is funny to look at the assembly because they're all #fold
fn easy_ops() #test = {
    // I live in fear of the condition code encoding.
    assert_eq(false, eq(2, 3));
    assert_eq(true, eq(3, 3));
    assert_eq(true, ne(2, 3));
    assert_eq(false, ne(3, 3));
    assert_eq(false, ge(2, 3));
    assert_eq(true, ge(3, 2));
    assert_eq(true, ge(3, 3));
    assert_eq(false, le(3, 2));
    assert_eq(true, le(3, 3));
    assert_eq(true, le(2, 3));
    assert_eq(true, lt(2, 3));
    assert_eq(false, lt(3, 3));
    assert_eq(false, lt(3, 2));
    assert_eq(false, gt(2, 3));
    assert_eq(false, gt(3, 3));
    assert_eq(true, gt(3, 2));
    
    assert_eq(neg(5), mul(5, neg(1)));
    assert_eq(true, eq(neg(5), mul(5, neg(1))));
    assert_eq(false, eq(5, mul(5, neg(1))));
    assert_eq(1, mul(neg(1), neg(1)));
    
    assert_eq(4860, bit_xor(1234, 5678));
    assert_eq(1026, bit_and(1234, 5678));
    assert_eq(5886, bit_or(1234, 5678));
    assert_eq(-1235, bit_not(1234));
    
    assert_eq(5054464, shift_left(1234, 12));
    assert_eq(4611686018427387595, shift_right_logical(-1234, 2));
    assert_eq(-309, shift_right_arithmetic(-1234, 2));
}

fn fun_with_x64_division() #test = {  // :fun_with_x64_division
    assert_eq(-5, -10 / 2);  // this is the strange one
    assert_eq(-5, 10 / -2);
    assert_eq(5, 10 / 2);
}

#test fn overflow_behaviour() = {
    assert_eq(1.shift_left(1), 1.shift_left(65));
    assert_eq(MAX_i64 + 1, MIN_i64);
    assert_eq(-MAX_i64 - 1, MIN_i64);
    assert_eq(-9223372036854775808, MIN_i64);  // this relies on the lexer overflowing to the right thing
    assert_eq(9223372036854775808, MIN_i64);   // and so does this
}

// TODO: this is probably a bad idea. 
fn raw_idents() #test = {
    fn @"+"(a: i64) i64 = {
        if a == 0 {
            return(1)
        };
        a
    }
    
    assert_eq(1, @"+"(0));
}

#test fn fun_with_cmp_encoding() void = {
    is_4095 :: fn(a: i64) bool #noinline = {
        if a == 4095 {
            return(true);
        };
        if a.mod(123) == 0 { // just do something branchy
            println("aaa");
            // HACK until new backend respects #noinline 
        };
        false
    };
    assert(is_4095(4095), "4095");
    assert(!is_4095(4096), "4096");
    assert(!is_4095(0), "0");
}

fn x64_extub_encoding(x: i64) void #test = {
    baz(1);
    baz :: fn(i: i64) void = {
        buf :u8= 0;
        buf :[]u8= (ptr = buf&, len = 1);
        buf[0] = i.trunc();
        xx: i64 = buf[0].zext();
        if xx == 1 {
        } else {
            abort()
        }
    };
}
