
// this might just be the same as memcpy_wide_values? 
// but i dont think so cause that was fixed by inlining, 
// and switching to !if instead of fn if doesn't fix this even tho it always inlines. 
// and its a closure so would have to inline regardless. 
// gets a random pointer as the enum tag for a VarType. 
// UPDATE: not the same as memcpy_wide_values. fixed with basic block rework. -- May 6
#test 
fn call_if_in_unquote(canary: i64) i64 = {
    E :: @tagged(aaa: i64, bbb: Str);
    :: tagged(E);
    e : E = (aaa = 123);
    // note: the closure-ness here is not the problem, just to make the cases more clear
    broken :: fn() i64 => @get_tag(e);
    working :: fn() i64 => @get_tag(e&);
    assert_eq(broken(), 0);
    
    #macro 
    fn get_tag(arg: FatExpr) FatExpr = {
        arg = compile_ast(arg);
        enum_type := arg.ty;
        info := get_type_info_ref(enum_type);
        is_ptr := false;
        if info.is(.Ptr) {
            enum_type = (@as(*Type) info.Ptr&)[];
            info = get_type_info_ref(enum_type);
            is_ptr = true;
        };
        ptr_ty := *enum_type;
        
        ::if(FatExpr);
        @{
            arg_val := @[if(is_ptr, => @{ @as(void)unit }, =>arg)];
            arg_ptr := @[if(is_ptr, =>arg, => @{ arg_val& })];
            tag_val := arg_ptr.tag();
            @as(i64) tag_val
        }
    }

    canary
}

// need to add flat_call if ret is big early enough that you havent already emitted one before noticing. 
#test
fn mutual_rec_flat() = {
    fn do_1s(n: i64) Str = if(n.eq(2), => do_2s(n), => "one");
    fn do_2s(n: i64) Str = if(n.eq(1), => do_1s(n), => "two");
     
    do_1s(1);
}

/// - this started happening with my first rework to use stack bc (before basic blocks)
/// - Found with collections.fr:split, narrowed down to resizing a list. then to memcpy when something is larger than one slot. then to calling set. 
///   Worked when my_set is #inline but segfault if not. So its a spilling problem. 
/// - this was because of stack_to_ccall_reg leaving first registers on the stack as it worked on next so they'd get spilled in a weird way sometimes. 
///   like you want to assign x0 and its already in place so you move on but x0 is still on the stack, 
///   so if you need an extra free register later you think its ok to spill x0. -- May 8
/// - it was the same problem as mmap saying errno=22 after basic blocks change. 
///   for this example, it happened on wide values because they're passed in multiple registers to my_set. 
#test
fn memcpy_wide_values(canary: i64) i64 = {
    fn memcpy_wide_values() void = {
        T :: Str;
        S :: Slice(T);
        
        #noinline
        fn my_set(self: S, i: i64, v: T) void = {
            self.index(i)[] = v; 
        }
        
        #noinline
        fn my_memcpy(dest: S, src: S) void = {
            i := 0;
            while(=> lt(i, src.len())) {
                src_ptr := src.index(i);
                dest.my_set(i, src_ptr[]);
                i = i.add(1);
            };
        }
    
        a: S = @slice ("a", "a");
        b: S = @slice ("b", "b");
        my_memcpy(a, b);
    }
    
    memcpy_wide_values();
    
    canary
}

/// :UnquotePlaceholders
/// it looks like this should work but unquote doesn't look in constants because they don't get renumbered. 
/// constants in that quote block act like constants in the macro body. 
/// there's no reason you shouldn't be able to make a macro that expands to constant declarations tho. 
/// so, unquote_macro_apply_placeholders needs to see the constant body and mutate it, 
/// so it needs to have already been renumbered by the time you get there. 
/// but also you need to not renumber inside the <placeholder>... unless you're actually renumbering the macro function itsel (like if its a closure for some reason).
/// in this example, you just need to worry about the first part. 
///
/// this was actually super easy to fix by delaying constant hoisting out of scope.rs and just doing it right before you try to compile each block. 
#test
fn unquote_in_const() = {
    #macro fn as_constant(arg: FatExpr) FatExpr = @{
        value :: @[arg];
        value
    };
    
    four := @as_constant(4);
    assert_eq(four, 4);
    // now do it again with a different type, so there need to be two unrelated versions of the 'value' variable in different scopes!
    name := @as_constant("bob");
    assert_eq(true, eq(name, "bob"));
}

#test
fn const_closure_arg() = {
    a := 0;
    add_it :: fn($n: i64) void => {
        a += n;
    };
    add_it(5);
    assert_eq(a, 5);
    add_it(10); // this will err re-save const if you didnt renumber. 
    assert_eq(a, 15);
    
    // These should be cached. 
    add_it(5);add_it(5);add_it(5);add_it(5);
}

// found with binary_op in lox/vm.fr
// the fix was making compile_call inline '=>' even without rt_captures. really i should track capturing control flow as well. 
#test fn capture_control_but_no_rt_vars() = {
    fn do_it(cond: bool) i64 = {
        check_something(cond);
        check_something :: fn(n: bool) void => if(n){
            return(123); 
        };
        456
    }
    do_it(true);
}

#test fn infer_enum_overload(canary: i64) i64 = {
    A :: @enum(hello, world);
    B :: @enum(hello, bye);
    
    fn do_stuff(self: i64, extra: A) i64 = self;
    fn do_stuff(self: bool, extra: B) i64 = 1;
    
    // We know arg is i64 so we should know we're calling the first one and that the second arg is A. 
    arg := 123;
    do_stuff(arg, .hello);
    
    canary
}

// - discovered when writing codemap :return_u32_pair
//   the var version works, but returning the struct directly doesn't. 
// - probably caused by trying to return pairs in registers (because it works if you #inline it), 
//   but idk why it would be different with the var.  
#test fn return_u32_pair() = {
    II :: @struct(a: u32, b: u32);
    
    through_var :: fn() II #noinline = {
        v: II = (a = @as(u32) 123.trunc(), b = @as(u32) 456.trunc());
        v
    };
    direct :: fn() II #noinline = {
        (a = @as(u32) 123.trunc(), b = @as(u32) 456.trunc())
    };
    
    ::assert_eq(u32);
    //v := through_var();
    //assert_eq(v.a, @as(u32) 123.trunc()); assert_eq(v.b, @as(u32) 456.trunc());
    v := direct();
    assert_eq(v.a, @as(u32) 123.trunc()); assert_eq(v.b, @as(u32) 456.trunc());
}

// :MiscompileCStr
// When emitted to c, it has to know to take the whole cstr, not follow the pointer one byte. 
#test fn const_c_str() = {
    hello_c :: @symbol("Hello World").c_str();
    
    hello_s := hello_c.str();
    ::assert_eq(Str);
    assert_eq(hello_s, "Hello World");
}

#test fn single_element_struct(canary: i64) i64 = {
    MyStruct :: @struct(field: i64);

    value : MyStruct = (field = 123);
    v := value.field;
    assert_eq(v, 123);
    
    canary
}

#test fn const_typeof_var() = {
    a := 123;
    T :: @type(a);
    A :: @struct(b: *T);
    c : A = (b = a&);
    assert_eq(a, c.b[]);
}

#test fn const_typeof_var_block() = {
    a := 123;
    A :: @struct(b: {
        // Here we need to be able to access two different body contexts: 
        // the runtime one that knows the type of 'a' and the comptime one we're declaring 'T' into. 
        T := @type(a);
        *T
    });
    c : A = (b = a&);
    assert_eq(a, c.b[]);
}

#test fn self_referencial_type() = {
    L :: @rec @struct(next: ?*L, data: i64);
    fst: L = (next = (None = ()), data = 123);
}

#test fn rec_type_const() = {
   L :: @rec @struct(next: ?*L, data: i64);
   
   value :: {
       make :: fn(i: i64, old: ?*L) *L = {
           v: L = (next = old, data = i);
           general_allocator().boxed(L, v)
       }; 
       a := make(1, .None);
       b := make(2, (Some = a));
       c := make(3, (Some = b));
       c
   };
   
   assert_eq(value[].data, 3);
   assert_eq(value[].next.unwrap()[].data, 2);
}

fn const_cycle() #test = {
    L :: @rec @struct(next: *L, data: i64);
    
    // this is self referential and needs to be baked for AOT
    // sure hope you don't infinite loop trying to chase the pointers
    a := :: {
        f :: fn() => ast_alloc().box_zeroed(L);
        a, b, c := (f(), f(), f());
        a[] = (next = b, data = 1);
        b[] = (next = c, data = 2);
        c[] = (next = a, data = 3);
        a
    }
    
    @assert(a.data == 1 && a.next.data == 2 && a.next.next.data == 3 && a.next.next.next.data == 1);
}

// Problem only happened when you hit the branch after the Never one. 
// It was the thing where if false branch type was Never it made end_false_block unreachable. 
// Which sounds reasonable but somehow got confused by nesting I guess? I don't understand. 
// Maybe problem is it decided if branches should have the same type so one split never vs void and then when the void one tried to rejoin, it got to the unreachable of the never? 
// yeah cause adding `if true_ty.is_never() { true_ty = false_ty; }` in compiler instead of removing the unreahcable from emit_bc, also fixed it.
// so problem was it assuming true branch type was correct so a branch like if(_, => Never, void) it would treat as returning Never when it should return void.
#test fn wrongly_unreachable() = {
    A :: @tagged(a: i64, b: i64, c: i64);
    f :: fn(a: *A) i64 = {
        @match(a) {
            (fn a(_) => ());
            (fn b(_) void => return(3));
            (fn c(_) => ());
        };
        2
    };
    
    a: A = (a = 1);
    assert_eq(f(a&), 2); // this was fine
    
    a: A = (c = 1);
    assert_eq(f(a&), 2); // this hit my inserted trap 0xbabe
}

// This fails a debug check in bc_to_asm.rs,
// but works in release so this isn't the thing causing the segfault im looking for.
// didn't work on aot for a while tho because of :block_never_unify_early_return_type
#test fn block_arg_count_wrong_unreachable() = {
    s := 0.test_it((Some = 123));
    assert_eq(s, "Hello");
    fn test_it(self: i64, expr: ?i64) Str = {
        @match(expr&) {
            @default => return("Hello");
        };
        unreachable()
    }
}

// - ffi::c::call didn't handle returning pairs when size isn't 16 bytes.
#test fn return_small_pair_const() = {
    get_pair :: fn() Ty(u32, u32) = {
        (1, 2)
    };
    aa :: get_pair();
    a := aa;  // TODO: constants aren't pointers so you can't access thier fields. 
    ::assert_eq(u32);
    assert_eq(a._0, 1);
    assert_eq(a._1, 2);
}

#test fn type_through_field() = { // :type_through_field
    a: Ty(u32, u32) = (1, 2); 
    ::assert_eq(u32);
    assert_eq(a._0, 1);
}

// like zone_begin/TraceZone in the compiler
// problem is const_args_key didn't pass hint. TODO: multiple args
#test fn enum_hint_const_arg() = {
    MyValue :: @enum(i64) (A, B, C);
    use_value :: fn($v: MyValue) void = {
        // don't care
    };
    use_value(.A);
}

#test fn enum_hint_const_arg2() = {
    MyValue :: @enum(i64) (A, B, C);
    use_value :: fn(a: i64, $v: MyValue) void = {
        // don't care
    };
    use_value(1, .A);
}

#test fn deeper_mutual_recursion() = {
    fn is_even(n: i64) bool = {
        if(n == 0, => return(true));
        if(n == 1, => return(false));
        is_odd(n - 1)
    }
    
    fn is_odd(n: i64) bool = {
        !is_even_or_loop(n)
    }
    
    fn is_even_or_loop(n: i64) bool = {
        if n < 0 {
            is_odd(n);
        };
        is_even(n)
    }
    
    assert_eq(is_odd(5), true);
}

// you can have variables of type `void` and pass them around like normal. 
// this is obviously pointless but you need to able to do it so generics can do cool stuff like using a HashMap as a HashSet. 
fn void_arg_is_normal() #test = {
    foo :: fn(bar: void) void = {
        baz := bar;
    };
    x := foo();
    foo(x);
    
    a := zeroed void;
    b := zeroed2 void;
    zeroed2 :: fn($T: Type) T #generic #inline = (:: {
        t := @uninitialized T;
        set_zeroed(@as([]T) (ptr = t&, len = 1));
        t
    }); 
}

fn internal_bake() #test = {
    S :: @rec @struct {
        next: *S;
        value: i64;
    };
    
    s :: {
        s := ast_alloc().alloc(S, 5);
        enumerate s { i, it |
            it.value = i;
            it.next = s[mod(i + 1, s.len)]&;
        };
        s
    };
    
    it := s[0]&;
    range(0, 5) { i |
        @assert_eq(it.value, i);
        it.value += 10;
        it = it.next;
    };
    enumerate s { i, it |
        @assert_eq(it.value, i + 10);
    };
}
