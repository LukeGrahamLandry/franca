#use("@/lib/sys/sync/atomics.fr", "@/lib/sys/threads.fr");

fn make_threads() #test = {
    if !query_context_is_implicit() {
        println("skip!");
        return();
    };
    
    A :: @static(i64) 0;
    B :: @static(i64) 0;
    C :: @static(i64) 0;
    PARITY :: @static(bool) false;
    main_thread_index :: @static(i64);
    
    callee :: fn(userdata: *i64) void = {
        assert_eq(userdata[], 1234);
        assert_eq(context(DefaultContext)[].thread_index, main_thread_index[] + 1);
        while => A[] == 0 {
            usleep(1);
        };
        assert_eq(PARITY[], true);
        PARITY[] = false;
        //println("second");
        B[] = int_from_rawptr(get_dynamic_context());
    };
    
    C[] = 1234;
    main_thread_index[] = context(DefaultContext)[].thread_index;
    t := i64.start_thread(callee, C);
    assert_eq(context(DefaultContext)[].thread_index, main_thread_index[]);
    assert_eq(B[], 0);
    PARITY[] = true;
    //println("first");
    A[] = int_from_rawptr(get_dynamic_context());
    while => B[] == 0 {
        usleep(1);
    };
    assert_eq(PARITY[], false);
    //println("third");
    @assert_ne(A[], B[]);
    t.join();
}

fn threads_counting() #test = {
    if !query_context_is_implicit() {
        println("skip!");
        return();
    };
    
    #where(fn(T) => is_ptr(T) && size_of(Deref(T)) == 8)
    compare_and_swap :: fn(p: ~T, old: Deref(T), new: Deref(T)) Deref(T) #inline = {
        part0 :: fn(p: T) void #ir(.cas0, .Kl);
        part1 :: fn(old: Deref(T), new: Deref(T)) Deref(T) #ir(.cas1, .Kl);
        part0(p);
        part1(old, new)
    };
    
    n_threads :: 10;
    n_loop    :: 50000;
    
    atomic_increment :: fn(p: *i64) void #inline = {
        prev := p[];
        dowhile {
            old  := prev;
            prev = compare_and_swap(p, old, old + 1);
            prev != old
        }
    };
    
    callee :: fn(shared: *i64) void = {
        range(0, n_loop) { _ |
            atomic_increment(shared);  // correct
            //shared[] += 1; // incorrect
        };
    };
    memory  := 0;
    threads := temp().alloc(*Thread, n_threads);
    range(0, n_threads) { i |
        threads[i] = i64.start_thread(callee, memory&);
    };
    for threads { t |
        t.join();
    };
    assert_eq(memory, n_threads * n_loop);
}

fn unused_cas_result() #test = {
    x := 0;
    i64.cas(x&, 0, 1);
    assert_eq(x, 1);
}
