// UNUSED

// TODO: finish this. better handling of tuple -> array in compiler. there's a hack in ast/tuple_type because it breaks something to treat small ones as arrays.
// TODO: error message if you try to make a struct with different field types thats too big.  
// even if not the 5 seconds rust takes (debug, with vec![]), 200ms is still annoying to run every time.
// (im pretty sure they fixed it, i remember it being like 2 minutes when i was working on hctarcs). 
// TODO: also im cheating, cause i can't actually call the function cause none of the backends can deal with it. 
// #test
fn floats_200k() = {
    vtable := get_compiler_vtable();
    
    code: List(u8) = list(200000, temp());
    code&.push_all("#include_std(\"core.fr\");\nfn get_a_number() f64 = {\nfloats := @slice (");
    range(0, 200000) {i|
        @fmt(code&, "%.0, ", i);
    };
    code&.push_all(");\n floats[199999]}");
    
    comp := vtable.new_with_src(code.items(), .Aarch64);
    
    main_sym := {vtable.intern_string}(comp, "get_a_number");
    main_f := {vtable.find_unique_func}(comp, main_sym).unwrap();
    {vtable.compile_func}(comp, main_f, .Aot).unwrap();
}

