//! This stuff used to be in basic but got split off because the rest already works on LLVM. 

fn main(canary: i64) i64 = {
    //////////////////
    /// Allocation ///
    //////////////////
    
    // Use `alloc` to create space that outlives the current stack frame. 
    fn dont_leak(size: i64) Ptr(i64) = alloc(i64, size);
    
    let on_the_heap = dont_leak(10);
    let first: Ptr(i64) = raw_slice(on_the_heap, 0, size_of(i64));
    first[] = 15;
    assert_eq(first[], 15);
    
    let three_heap = raw_slice(on_the_heap, 0, mul(3, size_of(i64)));
    let three_stack = (7, 8, 9);
    // set(three_heap, three_stack);
    
    // Don't need to pass count because its in the slice. 
    dealloc(i64, on_the_heap, 10);
    // TODO: interpreter dealloc frees the value (if its a vec or whatever) but reference counts the allocation to catch use after free
    
    
    //////////////
    /// Tuples ///
    //////////////
    
    var arr = (1, 2, 3);
    var arr_ptr = arr&;  // TODO: this shouldnt have to be var but there's an extra !addr added by the compiler for index expr
    
    // you can create a pointer to an element of a tuple (constant index only)
    let second_ptr: Ptr(i64) = arr_ptr[1]; 
    assert_eq(2, second_ptr[]); // we can dereference as normal.
    second_ptr[] = 123;
    // The type annotation for a tuple is written as a tuple of types. 
    // TODO: comptime variadic functions so !deref is just get.
    let have: (i64, i64, i64) = arr_ptr!deref;
    let expected: (i64, i64, i64) = (1, 123, 3);
    // assert_ eq(have, expected);
    // asser t_eq(arr_ptr[], (1, 123, 3)); // the type annotations are unnessisary 
    
    // in fact, tuples aren't real at all. they're just the way i represent multiple arguments and return values 
    fn flip_1(args: (i64, i64)) (i64, i64) = { 
        let arr = args&;
        let a1 = arr[0];
        let a2 = arr[1];
        (a2[], a1[])
    }
    //assert_ eq((3, 2), flip_1((2, 3)));
    //assert_ eq((3, 2), flip_1(2, 3));
    //assert_ eq(3, 2, flip_1(2, 3));
    
    // Maybe this is a bit unfortunate. It doesnt care where the brackets go, just sees two pairs (a, b) (c, d)
    //assert_ eq(2, flip_1(2, 2), 2);
    
    // This is indistinguishable from flip_1.
    fn flip_2(a: i64, b: i64) (i64, i64) = (b, a);
    //assert_ eq((3, 2), flip_2((2, 3)));
    //assert_ eq((3, 2), flip_2(2, 3));
    //assert_ eq(3, 2, flip_2(2, 3));
    //assert_ eq(2, flip_2(2, 2), 2);
    
    let x = (1, 2);
    // let (y, z) = x;


    canary
} 