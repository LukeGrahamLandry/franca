// All the tests will run on the wasm backend eventually, 
// these are just for the wasm encoding library itself before i have the whole backend ready. 

#test fn write_leb() = {
    ::assert_eq(u8);
    ::assert_eq([] u8);
    
    out: List(u8) = list(temp());
    out&.leb128_unsigned(0);
    assert_eq(out.items(), @slice(@as(u8) 0));
    out&.clear();
    out&.leb128_unsigned(50);
    assert_eq(out.items(), @slice(@as(u8) 50));
    out&.clear();
    out&.leb128_unsigned(1234);
    assert_eq(out.items(), @slice(@as(u8) 210, @as(u8) 9));
    
    out&.clear();
    out&.leb128_signed(-1234);
    assert_eq(out.items(), @slice(@as(u8) 174, @as(u8) 118));
}

#test fn write_empty_module() = {
    mod: Wasm.Module = empty(temp());
    out: List(u8) = list(temp());
    mod&.dump(out&);
}

fn encode_wasm() void #test = {
    mod: Wasm.Module = empty(temp());
    out: List(u8) = list(temp());
    
    export: Wasm.Export = (name = "add".clone(temp()).rs(), desc = (Function = (id = 0)));
    mod.exports&.push(export);
    
    mod.types&.push(arg = empty(), ret = empty());
    insts: List(u8) = list(temp());
    insts&.push(Wasm.Inst.End.raw());
    mod.code&.push(locals = empty(), insts = insts.rs());
    
    mod.functions&.push(id = 0);
    
    mod&.dump(out&);
    //@println("trying to write % bytes (TODO: but it wont create the file if it doesnt exist)", out.len);
    //write_entire_file("target/test.wasm", out.items());
}
