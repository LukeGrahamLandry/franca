
// old sema can't do this!
// symptom: `arr: Array(i64, 3) = init(@slice (7, 8, 9));` choosing the overload for `Array(i64, 5)`
// It works with the arg being i64 but not []i64 or *i64,
// so i think its about suspending in the argument type.
#test fn choosing_the_wrong_array_init() = {
    fn thing();
    fn Thing($T: Type, $t: T) Type #generic = {
        S :: @struct(fst: T);
        fn thing(x: *i64) S = @as(S) (fst = t);
        S
    }
    
    x := 123;
    x := x&;
    a: Thing(i64, 0) = thing(x);
    b: Thing(i64, 1) = thing(x);
}

// `Compile Error: Poison expression InProgressMacro` when compiling for AOT
#test fn mutual_recursion_address() = {
    MeTable :: @struct(f: @FnPtr() Str);
    
    get_me_table :: fn() MeTable = {
        (f = launder_pointer)  
    };
    launder_pointer :: fn() Str = {
        addr: rawptr : get_me_table;
        items(@format("%", addr) temp())
    };
    
    table := get_me_table();
    msg := {table.f}();
    println(msg);
}

// same as mutual_recursion_address but happens when jitting too 
#test fn comptime_rec_addr() = {
    a :: fn() rawptr = {
        x: rawptr: b;
        x
    };
    b :: fn() rawptr = {
        aa :: @as(rawptr) a;
        @println("%", aa);
        aa
    };
    xx := b();
    @println("%", xx);
}
