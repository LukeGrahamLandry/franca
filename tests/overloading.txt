fn main(_uuu: i64) i64 = {


fn who_is(value: i64) i64 = {
    len("int")
}

fn who_is(value: Ptr(i64)) i64 = {
    len("ptr_int")
}

fn who_is(value: (i64, i64)) i64 = {
    len("tuple_int")
}

assert_eq(3, who_is(10));
let an_int = 1;
assert_eq(7, who_is(an_int!addr));
let ints = (1, 2);  // TODO: infer type on raw tuple expr so dont need to put it in a variable
assert_eq(9, who_is(ints));
assert_eq(3, who_is(10));  // just to make sure im not cheating and doing them in order or something 



_uuu}
