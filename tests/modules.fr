#module(fn a() = {
    @pub const N = 42;
    const M = 52;
});

#module(fn b() = {
    @pub const X = 32;
    @pub const Y = 22;
    const Z = 12;
});

#module(fn c() = {
    // TODO: be able to import core instead of redeclaring types. the only reason this works is because 'i64' is a hacky magic builtin. 
    @pub fn identity(i: i64) i64 = i;
});

#module(fn d() = {
    // Generics in modules always need a forward declaration so there's an overload set for the import to bind even before instantiating any concerete versions of the function. 
    @pub fn get_myself() Unit = ();
    
    @comptime
    @pub fn make_thing(T: Type) Unit = {
        @pub fn get_myself(arg: T) T = arg;
    }
});

// Nested modules. 
#module(fn e() = {
   #module(fn f() = {
        @pub const K = 12;
    });
});

fn main(canary: i64) i64 = {
    // Grab one name from the module. 
    @import(this.a) const N;
    assert_eq(N, 42);
    
    // Note: doesnt fail if you dont try to call it because it doesnt bother compiling the function. 
    // TODO: add @used because that will be a problem for virtual functions.
    (fn() i64 = {
        @import(this.a) const M;
        M
    })()!assert_compile_error;
    
    // Grab every public name from the module
    #open(this.b);
    assert_eq(X, 32);
    assert_eq(Y, 22);
    print(Z)!assert_compile_error;  // Private
    
    // Import an overload set. 
    @import(this.c) const identity;
    @pub fn identity(i: Unit) Unit = ();  // Add an overload. Not totally sure how this should work yet. 
    assert_eq(identity(5), 5);
    assert_eq(identity(unit), unit);
    
    const renamed = identity;
    assert_eq(renamed(unit), unit);  // That new declaration really did add to the same overload set. 
    
    @pub fn renamed(i: Type) Type = i;  // So did this, even tho the name looks different
    assert_eq(identity(Str), Str);
    
    // TODO
    //const i_i64: Fn(i64, i64) = renamed; // You can still force a resolve
    //a ssert_eq(identity(i_i64), i_i64);
    
    #open(this.d);
    make_thing(i64);
    assert_eq(get_myself(123), 123);
    
    // @import(this.e.f) const K;
    //a ssert_eq(K, 12);
    
    canary
}
