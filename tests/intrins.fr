// TODO: test these against the new asm versions

fn soft_count_ones(b: u64) u32 = {
    b = b.bit_and(0x5555555555555555) + b.shift_right_logical(1).bit_and(0x5555555555555555);
    b = b.bit_and(0x3333333333333333) + b.shift_right_logical(2).bit_and(0x3333333333333333);
    b = b.bit_and(0x0f0f0f0f0f0f0f0f) + b.shift_right_logical(4).bit_and(0x0f0f0f0f0f0f0f0f);
    b += b.shift_right_logical(8);
    b += b.shift_right_logical(16);
    b += b.shift_right_logical(32);
    b.bit_and(0xff).trunc()
}

fn soft_trailing_zeros(b: u64) i64 = {
    n := 0;
    if b.bit_and(0xffffffff) == 0 {
        n += 32;
        b = b.shift_right_logical(32);
    }; 
    if b.bit_and(0xffff) == 0 {
        n += 16;
        b = b.shift_right_logical(16);
    };
    if b.bit_and(0xff) == 0 {
        n += 8;
        b = b.shift_right_logical(8);
    };
    if b.bit_and(0xf) == 0 {
        n += 4;
        b = b.shift_right_logical(4);
    };
    table :: items(@list(@as(u8) 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0) ast_alloc());
    n += table[b.bit_and(0xf).bitcast()].zext();
    n
}

// https://en.wikipedia.org/wiki/Circular_shift
fn soft_rotl(value: i64, count: i64) i64 = {
    mask :: 8 * size_of(i64) - 1;
    count = count.bit_and(mask);
    (value.shift_left(count)).bit_or(value.shift_right_logical((-count).bit_and(mask)))
}

fn soft_rotr(value: i64, count: i64) i64 = {
    mask :: 8 * size_of(i64) - 1;
    count = count.bit_and(mask);
    (value.shift_right_logical(count)).bit_or(value.shift_left((-count).bit_and(mask)))
}
