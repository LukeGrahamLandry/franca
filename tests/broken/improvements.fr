//! these ones aren't crippling bugs but its pretty cringe that i can't do it. 

#test_broken
fn tail_calls(canary: i64) i64 = {
    fn add_slow(a: i64, b: i64) i64 = 
        if(b.eq(0), => a, => add_slow(a.add(1), b.sub(1)));
    
    N :: 999999;
    assert_eq(N, add_slow(0, N));
    
    canary
}

#test_broken
fn tail_stmt(canary: i64) i64 = {
    // here it doesn't return the value from the function, but since its unit, it doesn't matter.
    fn do_nothing(a: i64) Unit = {
        if(a.eq(0), => unit, => do_nothing(a.sub(1)));
    }
    
    N :: 999999;
    do_nothing(N);
    
    canary
}

#test_broken 
fn infer_enum_overload(canary: i64) i64 = {
    A :: @enum(hello, world);
    B :: @enum(hello, bye);
    
    fn do_stuff(self: i64, extra: A) i64 = self;
    fn do_stuff(self: bool, extra: B) i64 = 1;
    
    // We know arg is i64 so we should know we're calling the first one and that the second arg is A. 
    arg := 123;
    do_stuff(arg, .hello);
    
    canary
}

#test_broken
fn fields_any_order() = {
    A :: @struct(a: i64, b: i64);
    
    a: A = (b = 1, a = 2);
    assert_eq(a&.a[], 2);
    assert_eq(a&.b[], 1);
}
