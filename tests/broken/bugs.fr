#test_broken
fn single_element_struct(canary: i64) i64 = {
    MyStruct :: @struct(field: i64);
    
    value : MyStruct = (field: 123);
    v := value&.field[];
    assert_eq(v, 123);
    
    canary
}

#test_broken 
fn memcpy_wide_values(canary: i64) i64 = {
    // Found with collections.fr:split, narrowed down to resizing a list. then to memcpy when something is larger than one slot. then to calling set. 
    // Worked when my_set is #inline but segfault if not. So its a spilling problem. 
    fn memcpy_wide_values() Unit = {
        T :: Str;
        S :: Slice(T);
        
        #noinline
        fun my_set(var self: S, i: i64, v: T) Unit = {
            self.index(i)[] = v; 
        }
        
        #noinline
        fn my_memcpy(dest: S, src: S) Unit = {
            var i = 0;
            while(fn = lt(i, src.len())) {|
                src_ptr := src.index(i);
                dest.my_set(i, src_ptr[]);
                i = i.add(1);
            };
        }
    
        var a: S = ("a", "a")!slice;
        var b: S = ("b", "b")!slice;
        my_memcpy(a, b);
    }
    
    memcpy_wide_values();
    
    canary
}

// this might just be the same as memcpy_wide_values? 
// but i dont think so cause that was fixed by inlining, 
// and switching to !if instead of fn if doesn't fix this even tho it always inlines. 
// and its a closure so would have to inline regardless. 
// gets a random pointer as the enum tag for a VarType. 
#test_broken 
fn call_if_in_unquote(canary: i64) i64 = {
    E :: @tagged(aaa: i64, bbb: Str);
    
    e : E = (aaa: 123);
    // note: the closure-ness here is not the problem, just to make the cases more clear
    broken :: fn() i64 = @get_tag(e);
    working :: fn() i64 = @get_tag(e&);
    assert_eq(broken(), 0);
    
    #macro 
    fun get_tag(var arg: FatExpr) FatExpr = {
        arg = compile_ast(arg);
        enum_type := arg&.ty[];
        info := get_type_info(enum_type);
        is_ptr := false;
        if(eq(info&!tag[], tag_value(TypeInfo, @symbol Ptr))){|
            enum_type = @as(Type) info&.Ptr[];
            info = get_type_info(enum_type);
            is_ptr = true;
        };
        ptr_ty := *enum_type;
        
        ::if(FatExpr);
        '{
            var arg_val = <if(is_ptr, fn='@as(Unit)unit', fn=arg)>;
            var arg_ptr = <if(is_ptr, fn=arg, fn= 'arg_val&')>;
            let tag_val = arg_ptr!tag[];
            @as(i64) tag_val
        }'
    }

    canary
}
