// if you tell qbe that stores return a value this loops forever. thats fun. 
#test fn i_sure_hope_you_dont_loop() = {
    a, b := get_pair();
    
    // TODO: shouldn't need this but you do if llvm -O2 so multistack fails and this test runs on its own by luck. -- Oct 26
    ::List(BakedVar); ::List(BakedEntry);
    /////
    
    use :: fn(c: CStr) void #noinline = ();  // super irritating for this to be puts
    range(0, a) { _ |
        use("a");
    };
    
    fn get_pair() Ty(i64, i64) = {
        (1, 2)
    }
}

#test fn hook() = {
    x := get_panic_hook();
}

fn neg_wrong_register_x64() #test = {
    foooo :: fn(i: i64) void = {
        buf := @uninitialized Array(u8, 40);
        if i == -i {
            exit(1);
        };
        // i sure hope the -i above didn't mutate our variable... that would be crazy...
        if i < 0 {
            exit(1);
        };
    };
    foooo(123);
}

// this broke on exe but not link when i forgot to include folded increment in local symbol fixup
fn local_fixup() #test = {
    names :: @const_slice("hello", "world");
    a := names[0];
    b := "hello";
    if a.len != b.len {
        exit(1)
    };
}

fn addressmatching() = {
    x := @slice("{");
    
    for x { y |
        if y[0] != "{".ascii() {
            exit(1);
        };
    };
}

#test fn intrinsic_edge_cases() = {
    x :u64= 0;
    assert_eq(0, count_ones(x).zext());
 
    x := 0;
    assert_eq(64, trailing_zeros(x));
}

// exercises amd64 movd:movq encoding.
fn float_bitcast_direction() void #test = {
    fn nonconstant64(a: f64) void #noinline = {
        b: i64 = a.bitcast();
        c: f64 = b.bitcast();
        d: i64 = c.bitcast();
        assert_eq(b, d);
    }
    nonconstant64(123);
}

fn float_trunc_encoding() void = {
    nonconstant :: fn(w: f64) bool #noinline = {
        w: f32 = w.cast();
        w > 0
    };
    w: f64 = 640.0;
    assert_eq(true, nonconstant(w));
}

fn preserve_flags() void #test = {
    is_hex_digit :: fn(c: u8) bool #noinline = {
        if c >= "a".ascii() && c <= "f".ascii() {
            true
        } else {
            false
        }
    };
    
    count := 0;
    range(0, 255) { b |
        count += int(is_hex_digit(b.trunc()));
    };
    assert_eq(count, 6);
}

#test fn fun_with_cmp_encoding() void = {
    is_4095 :: fn(a: i64) bool #noinline = {
        if a == 4095 {
            return(true);
        };
        false
    };
    assert(is_4095(4095), "4095");
    assert(!is_4095(4096), "4096");
    assert(!is_4095(0), "0");
}

fn x64_extub_encoding(x: i64) void #test = {
    baz(1);
    baz :: fn(i: i64) void = {
        buf :u8= 0;
        buf :[]u8= (ptr = buf&, len = 1);
        buf[0] = i.trunc();
        xx: i64 = buf[0].zext();
        if xx == 1 {
        } else {
            exit(1)
        }
    };
}

fn fun_with_x64_division() #test = {  // :fun_with_x64_division
    assert_eq(-5, -10 / 2);  // this is the strange one
    assert_eq(-5, 10 / -2);
    assert_eq(5, 10 / 2);
}

fn numbers_forbiden_by_your_current_content_settings() #test = {
    N :: @as(i64) 0x00811d68fe0c521a.bitcast();  // 1 in bit 31
    i := N;
    while => i >= 10 {
        i = i / 10;
    };
    
    :: assert_eq("36342608771699226", @tfmt("%", N));
}

// test of phi+sel folding
fn frontend_sel() void #test = {
    TT :: @struct(gpr0: i32, ngpr: i32, fpr0: i32, nfpr: i32);
    T: TT = (gpr0 = 1, ngpr = 16, fpr0 = 17, nfpr = 16);
    f :: fn(T: *TT, r: i64) void = {
        is_int   := T.gpr0.intcast() <= r && r.intcast() < T.gpr0 + T.ngpr;
        is_float := T.fpr0.intcast() <= r && r.intcast() < T.fpr0 + T.nfpr;
        if !(is_int || is_float) {
            if is_int {
                exit(1);
            };
            if is_float {
                exit(1);
            };
        };
    };
    f(T&, 1);
}

fn not_keywords() void #test = {
    E :: @enum(a, return, local_return); :: enum(E);
    do_it :: fn(e: E) i64 = {
        @match(e) {
            fn return() => {
                return(1);
                4
            }
            fn local_return() => {
                local_return(2);
                5
            }
            fn a() => 3;
        }
    };
    assert_eq(do_it(.return), 1);
    assert_eq(do_it(.local_return), 2);
    assert_eq(do_it(.a), 3);
}

fn another_cmp_encoding() #test = {
    N :: 0x200000001;  // can't be encoded as sign extend from 32 bits
    
    // boring; care about all the bits
    f :: fn(x: i64) bool #noinline = x == N;
    @assert(!f(1) && f(0x200000001) && !f(123));
    
    // interesting; copy-elim to `%unify.66 =l ceqw %x.65.65, 8589934593`
    // but you only care about the bottom bit so it still fits in an immediate. 
    g :: fn(x: u32) bool #noinline = {
        a := N; 
        x == trunc a
    };  
    @assert(g(1) && !g(123));
}

// interesting because ctz needs to insert an extra instruction on arm so need to be careful if there's also an isel.fr/fixarg()
fn ctz_stack_slot() #test = {
    f :: fn() Ty(i64, i64) = {
        ctz :: fn(p: *i64) i64 #inline = i64.int_from_ptr(p).trailing_zeros();
        freeze :: fn(p: *i64) i64 #noinline = p.ctz();
        
        buf := @uninitialized Array(i64, 64); 
        p := buf&.as_ptr();
        a := freeze(p);
        b := p.ctz();  // address folded to RSlot
        (a, b)
    };

    a, b := f();
    @assert(a == b && a >= 3);  // _ && aligned to 8 bytes
}

fn negative_symbol() #test = {
    f :: fn(rt_false: bool) i64 #noinline = {
        a :: @static(i64) 123;
        if rt_false {
            a.offset(-1)[]
        } else {
            a[]
        }
    };
    
    assert_eq(f(false), 123);
}

fn afold_when_no_cfold() #test = { 
    m := @static(QbeModule);
    set_target_vtable(m);
    assert_eq(m.t.c, 789);
    
    set_target_vtable :: fn(m: *QbeModule) void #noinline = {
        m.t.b = 123;
        m.t.c = 789;
    }
    
    QbeModule :: @struct(
        a: i64,
        t: Target,
    );
    
    Target :: @struct(
        b: i64,
        c: i64,
    );
}
