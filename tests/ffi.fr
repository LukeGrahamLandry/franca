/* TODO
- @dyn_link(C) F: This function is supplied by the dynamic linker when your executable is loaded.
                This function cannot be called at comptime (unless its one the compiler knows about).
                Implies @c_call.
                The function name prefixed with an underscore is added to the indirect symbol table.
                Instead of C, you can put a string and that will be used as the symbol without modification.
*/

@test(interp)
fn main(_canary: i64) i64 = {
    var dir = system_no_args("ls".str());
    // TODO: whatever this is needs to auto cast to a string (its also not a ""!type) (some ffi thing from rust probably)
    // TODO: have a name for whatever kind of cast it is that I currently do on assignment (structural) and dont do it implicitly 
    //       because its wildly unsafe if you actually want to use the type system to catch mistakes. 
    let s: Str = dir&.stdout[]; 
    puts(s);
    
    puts("via c call: ");
    putchar(65);
    putchar(66);
    putchar(67);
    putchar(10);
    
    // let v = getchar();
    // print(v);
    
    _canary
}
