#test fn test_option() void = {
    s: ?i64 = some(123);
    
    a := 0;
    s.if(fn(i: i64) void => {
        a = i;
    });
    
    assert_eq(a, 123);
    
    i := 0;
    while(=> {s}) { (v: i64) |
        s = none();
        i = i.add(1);
    };
    assert_eq(i, 1);
    
    n: ?i64 = none();
    z := n.or(=> 555);
    assert_eq(z, 555);
    
    y: ?i64 = some(10);
    z := y.or(=> 555);
    assert_eq(z, 10);
    
    assert_eq(true, y.is_some());
    y.unwrap();
    
    y_ptr := y&.as_ref();
}

// ok at this point i'm seeing it would be nice to put the tests in the lib file. 
#test fn test_map() void = {
    m: HashMap(Str, i64) = init(temp());
    m&.insert("a", 123);
    assert_eq(true, m&.get("b").is_none());
    assert_eq(true, m&.get("a").is_some());
    assert_eq(true, m&.get("b").is_none())
}

#test fn slow_fill_map() void = {
    m: HashMap(i64, i64) = init(temp());
    COUNT :: 200; // 700000; // slow. random number that made it break before i did tombstones. 
    FACTOR :: 279876541;
    range(0, COUNT) {i|
        prev := m&.insert(i.mul(FACTOR), i.mul(2));
        assert(prev.is_none(), "stomped map item");
    };
    cap := m&.capacity();
    range(0, COUNT) {i|
        prev := m&.insert(i.mul(FACTOR), i.mul(3));
        assert_eq(prev.unwrap(), i.mul(2));
    };
    assert_eq(m&.capacity(), cap); // replacing keys shouldn't trigger a resize.
    range(0, COUNT) {i|
        prev := m&.get(i.mul(FACTOR));
        assert_eq(prev.unwrap(), i.mul(3));
    };
    assert_eq(m&.capacity(), cap);
    
    range(0, COUNT) {i|
        if(i.mod(2).eq(0)) {
            prev := m&.remove(i.mul(FACTOR));
            assert_eq(prev.unwrap(), i.mul(3));
        };
    };
    range(0, COUNT) {i|
        prev := m&.get(i.mul(FACTOR));
        if(i.mod(2).eq(0), => assert(prev.is_none(), "expected removed"), => assert(prev.is_some(), "couldn't find"));
    };
}

// trying to find the problem with test_string_pool after making void zero sized. -- May 17
// it worked if you put the yes/no bodies in there directly instead of a call like @match does. 
// problem was non popping result address when skipping a zero sized store. 
#test fn debug_tag_corruption() void = {
    ::if(?i64);
    no      :: fn None(t: void) ?i64 #inline => (None = unit);
    no_tag  :: tag_value(?i64, @symbol None);
    
    in: ?i64 = (None = unit);
    tag_val := in&.tag().ordinal();
    out := if(tag_val.eq(no_tag)) {
        no(in.None)
    } {
        panic("Bad tag.")
    };
    
    :: assert_eq(Tag(?i64));
    assert_eq(in&.tag(), out&.tag());
    assert_eq(true, out.is_none());
}

#test fn debug_map_original() void = {
    m: HashMap(Str, i64) = init(temp());
    m&.insert("a", 123);
    assert_eq(true, m&.get("b").is_none());
    assert_eq(true, m&.get("a").is_some());
    assert_eq(true, m&.get("b").is_none());
}

// TODO: better error for conflicting overloads, should show you both callsites. try it with: 
/*
#c_call #aarch64
fn eq(a: Symbol, b: Symbol) bool #asm = (
    0xeb01001f, 0x9a9f17e0, 0xd65f03c0, 
);
*/
#use("@/lib/collections/map.fr");
