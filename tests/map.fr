#test fn test_option() Unit = {
    var s: ?i64 = some(123);
    
    var a = 0;
    s.if(fn(i: i64) Unit => {
        a = i;
    });
    
    assert_eq(a, 123);
    
    var i = 0;
    while(=> {s}) { (v: i64) |
        s = none();
        i = i.add(1);
    };
    assert_eq(i, 1);
    
    let n: ?i64 = none();
    let z = n.or(=> 555);
    assert_eq(z, 555);
    
    var y: ?i64 = some(10);
    let z = y.or(=> 555);
    assert_eq(z, 10);
    
    assert_eq(true, y.is_some());
    y.unwrap();
    
    let y_ptr = y&.as_ref();
}

// ok at this point i'm seeing it would be nice to put the tests in the lib file. 
#test fn test_map() Unit = {
    var m: DumbMap(i64, i64) = init(libc_allocator);
    assert_eq(true, m&.insert(123, 456).is_none());
    let expect: ?i64 = some(456);
    let prev = m&.insert(123, 5);
    // TODO: when you inline this it fails but thinks right is 654. disagree about bool calling conventions maybe? 
    //       probably my inconsistancy with enum padding on asm? 
    let t = expect.eq(prev);
    assert_eq(true, t);
    
    let expect2: ?i64 = some(5);
    let prev = m&.get(123);
    let t = expect2.eq(prev);
    assert_eq(true, t);
    let f = expect2.eq(expect);
    assert_eq(false, f);
}

// trying to find the problem with test_string_pool after making Unit zero sized. -- May 17
// it worked if you put the yes/no bodies in there directly instead of a call like @match does. 
// problem was non popping result address when skipping a zero sized store. 
#test fn debug_tag_corruption() Unit = {
    ::if(?i64);
    no      :: fn None(t: Unit) ?i64 #inline => (None = unit);
    no_tag  :: tag_value(?i64, @symbol None);
    
    in: ?i64 = (None = unit);
    tag_val := in&!tag[];
    out := if(tag_val.eq(no_tag)) {|
        no(in.None)
    } {|
        panic("Bad tag.")
    };
    
    assert_eq(in&!tag[], out&!tag[]);
    assert_eq(true, out.is_none());
}

#test fn debug_map_original() Unit = {
    var m: DumbMap(Str, i64) = init(libc_allocator);
    m&.insert("a", 123);
    assert_eq(true, m&.get("b").is_none());
    assert_eq(true, m&.get("a").is_some());
    assert_eq(true, m&.get("b").is_none());
}

// TODO: better error for conflicting overloads, should show you both callsites. try it with: 
/*
#c_call #aarch64
fn eq(a: Symbol, b: Symbol) bool = (
    0xeb01001f, 0x9a9f17e0, 0xd65f03c0, 
)!asm;
*/
