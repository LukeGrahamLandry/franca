fn sum(self: *i64) i64 = self[];

#macro
fn derive_sum_body(ty: FatExpr, target: FatExpr) FatExpr = {
    ty := const_eval_type(ty);
    info := get_type_info_ref(ty);
    
    value := @match(info){
        (fn Int(_) => @{ () });
        (fn Struct(_) => { 
            total := @{ 0 }; // its a bit sad that this looks like rust but means something totally different 
            // TODO: ffi cant refer to Slice so its just a (cap, ptr, len) tuple. 
            fields := info.Struct.fields.items();
            each(fields) {f|
                // TODO: be able to !unquote an identifier somehow so don't have to do this. 
                field_access := @{ @[target][].__name };
                field_access := field_access.expr.Block.result[];
                field_access.expr.FieldAccess.name = f[].name;
                total = @{ sum(@[field_access]&).add(@[total]) };
            };
            total
        });
        // TODO: better error message if you forget the arg
        // TODO: HACK: this should panic at comptime but never asm isn't handled properly -- May 6 TODO: add regresssion 
        // TODO: work without capture =>
        @default => @{ panic("TODO: derive_sum") };
    };

    value
}


// TODO: the macro can't expand to a function declaration, because that's seen as a constant in the macro function.
//       so it gets hoisted there instead of being ignored until the expansion. 

fn Sum($T: Type) void = {
    fn sum(self: *T) i64 = (@derive_sum_body(T) self);
}

#test
fn derive_body(canary: i64) i64 = {
    Thing :: @struct(a: i64, b: i64);
    Other :: @struct(t: Thing, b: i64);
    
    :: Sum(Thing);
    :: Sum(Other);
    
    t: Thing = (a = 1, b = 2);
    s: i64 = t&.sum();
    assert_eq(3, s);
    t: Other = (t = t, b = 7);
    s: i64 = t&.sum();
    assert_eq(10, s);

    canary
}

#test fn comptime_iteration() = {
    A :: @struct(a: i64, b: i64);
    
    @inline_for(A.get_fields()) 
        fn($field: *Field) => {
            name :: field[].name.str(); // TODO: other `place=e` ? this shouldn't need the dereference. 
            assert(name == "a" || name == "b", "bad field name");
        };
    
    // TODO: you need the extra @run or it things the function needs compctx.
    inline_for @run A.get_fields() { $f |
        name :: f[].name.str(); // TODO: other `place=e` ? this shouldn't need the dereference. 
        assert(name == "a" || name == "b", "bad field name");
    };
    
    info :: get_type_info_ref(A);
    a := 0;
    // TODO: specific error message if you don't put the $?
    @inline_match(info) {
        (fn Struct($f) => {
            a = 1;
            // since f is const-known, you can do fun stuff like this. 
            b: f[].fields.items()[0].ty = 123;
        });
        (fn Int($f) => {
            this_wouldnt_compile + 1;
        });
        @default => panic("Expected Struct");
    };
    assert_eq(a, 1);
}

#test fn struct_reflection() = {
    fn better_sum($T: Type) void = {
        fn better_sum(self: T) i64 = {
            s := 0;
            inline_for (@run T.get_fields()) { $f |
                s += get_field_ptr(T, self&, f)[];
            };
            s
        }
    }
    
    A :: @struct(a: i64, b: i64);
    
    fn better_sum(i: i64) i64 = i; // manual
    :: better_sum(A);              // instantiate
    
    a: A = (a = 7, b = 8);
    assert_eq(a.better_sum(), 15);
    
    ::DeriveFmt(A);
    s := @tfmt("%", a&);
    assert_eq(s, "(a = 7, b = 8)");
    
    EE :: @tagged(a: i64, b: Str);
    :: tagged(EE);
    // TODO: fix #generic so you don't need to write out the tag type again. 
    a_type := EE.get_variant_type(.a);
    assert_eq(a_type, i64);
    b_type := EE.get_variant_type(EE.Tag().b);
    assert_eq(b_type, Str);
}

#test fn derive_clone_rec() = {
    E :: @tagged(A: List(i64), B: List(bool), C);
    S :: @struct(a: E, b: i64, c: bool);
    
    ::AutoClone(E); ::AutoClone(S); ::AutoEq(E); ::AutoEq(S);
    
    lst: List(bool) = clone(@slice(true, false), temp());
    e: E = (B = lst);
    s: S = (a = e, b = 123, c = false);
    
    s2 := zeroed S;
    deep_clone(s2&, s&, temp());
    assert_eq(true, s& == s2&);
}

#test fn t_specialize() = {
    :: {
        fn eval($T: Type, s: Str) T #generic = {
            get_result :: fn($src: Str) i64 = 
                import(src).result;
            src := @tfmt("{ result :: %; };", s);
            invoke_specialized(Str, T, get_result, src)
        }
        
        my_secret_value := 123;
        some_source_code := @tfmt("%", my_secret_value);
        b := i64.eval(some_source_code);
        assert_eq(b, my_secret_value);
    };
    
    make_array :: fn(entry: Type, length: i64) Type = invoke_specialized(Ty(Type, i64), Type, Array, (entry, length));
    
    foo :: fn(arg: FatExpr) FatExpr #macro = {
        arg := const_eval(bool)(arg);
        entry, length := @if(arg, (i64, 3), (Str, 6));
        result := make_array(entry, length);
        @literal result
    };
    
    a := zeroed(@foo true);
    assert_eq(size_of(@type a), 24);
    b := zeroed(@foo false);
    assert_eq(size_of(@type b), 96);
    b&[5] = "abc";
}
