main :: fn() void = {
    out := u8.list(temp());
    
    iter_bitmasks { a |
        display(a&, out&);
        
        encoded := encode_bitmask(a.value, true).unwrap();
        @assert_eq(concat_bitmask(a.n, a.immr, a.imms), encoded);
    };

    out.len -= 1;
    @assert_eq(Sha256'hex(out.items()), "7d536a126d4376bedde133a1c2b515f962074598207fc124f433e198a6cd176d");
};

fn iter_bitmasks($body: @Fn(it: BitMask) void) void = {
    range(1, 7) { size |
        size = 1.shift_left(size);
        range(0, size-1) { length |
            range(0, size) { immr |
                n := int(size == 64);
                imms := encode_imms(size, length);
                value := decode_bitmask(n, immr, imms);
                body(n = n, immr = immr, imms = imms, value = value, length = length, size = size);
            };
        };
    };
}

// Output format matches https://gist.github.com/dinfuehr/51a01ac58c0b23e4de9aac313ed6a06a 
// so they can be diff-ed to make sure i encode everything right. 
fn display(it: *BitMask, out: *List(u8)) void = {
    @fmt(out, "% % size=% length=% rotation=% N=% immr=% imms=%\n",
        BITS(it.value, HEX, 16),
        BITS(it.value, BIN, 64),
        BITS(it.size, DEC, 2),
        BITS(it.length, DEC, 2),
        BITS(it.immr, DEC, 2),
        BITS(it.n, BIN, 1),
        BITS(it.immr, BIN, 6),
        BITS(it.imms, BIN, 6),
    );
}

fn FmtBits($pad: i64, $chars: Str) Type = {
    Self :: @struct(value: i64);
    fn display(self: Self, out: *List(u8)) void = {
        print_base(out, self.value, chars, pad);
    }
    Self
}

BITS :: fn(value: i64, $chars: Str, $pad: i64) FmtBits(pad, chars) #generic = 
    (value = value);

BitMask :: @struct {
    value: i64;
    size: i64;
    length: i64;
    n: i64;
    immr: i64;  // rotation
    imms: i64;
}

HEX :: "0123456789abcdef";
BIN :: "01";
DEC :: "0123456789";

fn print_base(out: *List(u8), n: i64, chars: Str, $pad: i64) void = {
    n: u64 = n.bitcast();
    buf := zeroed Array(u8, pad);
    
    i := pad - 1;
    while => n != 0 && i >= 0 {
        buf&[i] = chars[n.mod(chars.len.bitcast()).bitcast()];
        i -= 1;
        n /= chars.len.bitcast();
    };
    range(0, i+1) { i |
        buf&[i] = "0".ascii();
    };
    out.push_all(buf&.items());
}

#use("@/backend/arm64/bits.fr");
