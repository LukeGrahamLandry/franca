// This is a test of examples: elf_loader/macho_loader and dump_elf/dump_macho, 
// and of the `syscall` ir instruction. 
// TODO: for now it mostly tests the native target (not cross compiling)

main :: fn() void = {
    macos := query_current_os() == .macos;
    src := @if(macos, SRC.macos, 
        @if(query_current_arch() == .x86_64, SRC.linux_amd, SRC.linux_arm));
    loader := @if(macos, "examples/macho_loader.fr", "examples/elf_loader.fr");
    dump := @if(macos, "examples/dump_macho.fr", "examples/dump_elf.fr");
    franca := get_executable_path(temp());
    
    ssa := open_temp_file();
    exe := open_temp_file();
    ssa.fd&.write(src);
    
    {  // === static .ssa ===
    b := sh(@slice(franca, "backend/meta/qbe_frontend.fr", ssa&.s_name(), "-r"));
    sh(@slice(franca, "backend/meta/qbe_frontend.fr", ssa&.s_name(), "-o", exe&.s_name()));
    c := sh(@slice(franca, loader, exe&.s_name()));
    //chmod(exe&.c_name(), .OwnerAll);  // probably not a good idea anyway; but doesn't work on orb??
    //a := sh(@slice(exe&.s_name()));
    //@assert_eq(a, b);
    @assert_eq(b, c);
    @assert_eq(b, "Hello World!\n");
    text := sh(@slice(franca, dump, exe&.s_name()));
    if macos {
        @assert(!text.contains("lib_ordinal") && text.contains("imports_count = 0"), "expected no imports");
    } else {
        @assert(!text.contains("Dynamic") && !text.contains("Interp"), "expected static executable");
    }
    };
    
    {  // === dynamic .fr ===
    // TODO: can't do this on linux because i rely on franca_runtime_init to align the stack
    // sh(@slice(franca, "backend/meta/qbe_frontend.fr", "backend/test/hello.ssa", "-o", exe&.s_name()));
    sh(@slice(franca, "examples/default_driver.fr", "build", "examples/toy/hello2.fr", "-o", exe&.s_name()));
    if macos {  // todo: "why does this work on my linux but not github's linux"
        a := sh(@slice(franca, loader, exe&.s_name()));
        @assert_eq(a, "Hello World!\n");
    }
    text := sh(@slice(franca, dump, exe&.s_name()));
    if macos {
        @assert(!text.contains("imports_count = 0") && text.contains(") _write") && text.contains(") _exit"));
    } else {
        @assert(text.contains("Dynamic") && text.contains("Interp"), "expected dynamic executable");
    }
    };
    
    {  // === static .fr ===
        sh(@slice(franca, "examples/default_driver.fr", "build", "examples/toy/hello2.fr", "-o", exe&.s_name(), 
            "-syscalls", "-os", "linux"));
        //if !macos {  // todo: "why does this work on my linux but not github's linux"
        //    a := sh(@slice(franca, loader, exe&.s_name()));
        //    @assert_eq(a, "Hello World!\n");
        //};
        text := sh(@slice(franca, "examples/dump_elf.fr", exe&.s_name()));
        @assert(!text.contains("Dynamic") && !text.contains("Interp"), "expected static executable");
    };
}

sh :: fn(a: []Str) Str = {
    ok, out, err := exec_and_catch(a[0], a.rest(1), temp());
    if !ok {
        print(out.items());
        print(err.items());
        @panic("failed %", a);
    };
    out.items()
}

SRC :: @struct {
    linux_amd :: fill(1, 231);
    linux_arm :: fill(64, 94);  // riscv is same
    macos :: fill(0x2000004, 0x2000001);
    
    fill :: fn(write: i64, exit: i64) Str = 
        (@tfmt("%%%%%", a, write, b, exit, c)).sym().str();
    
    a :: """
    data $msg = { b "Hello World!\n" }
    export function $main() {
    @start
        %write =l copy """; b :: """
        %exit =l copy """; c :: """
        syscall %write(l 1, l $msg, l 13)
        syscall %exit(l 0)
        ret
    }
    """;
};

#use("@/lib/sys/fs.fr");
#use("@/lib/sys/subprocess.fr");
