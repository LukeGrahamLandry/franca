//! Like Kotlin and Swift, we have syntax sugar for trailing lambda arguments. 
//! An alternative to the backpassing syntax. 

@test(interp, aarch64, llvm)
fn main(canary: i64) i64 = {
    let cond = true;
    var a = 0;
    
    // Normal function call 
    if(cond, fn = {
        a = a.add(1);
    });
    assert_eq(a, 1);
    
    // Call with trailing lambda. 
    if(cond) {|
        a = a.add(1);
    };
    assert_eq(a, 2);
    
    // Dot call with trailing lambda. 
    cond.if {|
        a = a.add(1);
    };
    assert_eq(a, 3);
    
    // TODO: test with arg and ret types. 
    
    var i = 1;
    while(fn() = i.gt(0), fn() = { i = i.sub(1)});
    assert_eq(i, 0);
    i = 1;
    while(fn() = i.gt(0)){| i = i.sub(1) };
    assert_eq(i, 0);
    i = 1;
    while {| i.gt(0) }{| i = i.sub(1) };
    assert_eq(i, 0);
    
    canary
}