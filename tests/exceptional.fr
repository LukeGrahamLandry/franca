#test #use("@/lib/arch/jump.fr")
fn exceptional(canary: i64) i64 = {
    buf := JumpBuf.zeroed();
    // Very old comment but still less fragile to do it this way: 
    // this can't just be a local variable because C backend clang with -O2 doesn't load it again at the end. 
    // i tried marking `try` __attribute__((returns_twice)) and I tried making all the locals volatile... doesn't work!
    // but this indirection works (with or without returns_twice).
    my_value := temp().alloc(i64, 1);
    my_value := my_value.ptr;
    my_value[] = 0;
    
    @switch(try(buf&)) {
        @case(.Try) => {
            assert_eq(my_value[], 0);
            my_value[] = 1;
            throw(buf&);
        };
        @case(.Catch) => {
            assert_eq(my_value[], 1);
            my_value[] = 2;
        };
    };
    assert_eq(my_value[], 2);
    canary
}
