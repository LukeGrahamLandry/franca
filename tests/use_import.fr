fn use_on_function() void #test = {
    MyUsefulNamespace :: fn() = {
        a :: 123;
        b :: 456;
    };
    
    use_something();
    use_something :: fn() void #use(MyUsefulNamespace) = {
        assert_eq(a, 123);
        {
            a := 10;
            assert_eq(a, 10);
            assert_eq(b, 456);
        };
        assert_eq(a, 123);
        assert_eq(a, 123);
    };
    
    Cfg :: import("{ foo :: 17; };");
    
    get_foo :: fn() i64 #use(Cfg) = {
        foo
    };
    
    assert_eq(Cfg.foo, 17);
    assert_eq(get_foo(), 17);
}

fn use_stmt_level() void #test = {
    Foo :: fn() = {
        a :: 5;
    };
    
    // Easier case is when the thing being used is not in the same function as the #use. 
    foo :: fn() void = {
        #use(Foo);
        assert_eq(a, 5);
    };
    foo();
    
    // Should be just as easy as the above... right? right? 
    // (new one just to make sure it doesn't cheat by having been used before)
    Bar :: fn() = {
        a :: 7;
    };
    {
        #use(Bar);
        assert_eq(a, 7);
    };
    
    // same thing but with a struct instead of a function
    TypeNamespace :: @struct(
        c :: 4,
    );
    {
        #use(TypeNamespace);
        assert_eq(c, 4);
    };
}

// #reexport means `pub use`
fn chained_use() void #test = {
    // simpile chaining reexport
    {
        A :: fn() = {
            a :: 5;
        };
        B :: fn() = {
            #reexport(A);
            b :: 5;
        };
        {
            #use(B);
            assert_eq(b, 5);
            assert_eq(a, 5);
        };
    };
    
    // mutually recursive. don't get stuck in a loop!
    {
        A :: fn() = {
            #reexport(B);
            a :: 8;
        };
        B :: fn() = {
            #reexport(A);
            
            b :: 1;
        };
        {
            #use(B);
            assert_eq(a, 8);
            assert_eq(b, 1);
        };
    };
}

fn use_eval_count() void #test = {
    X :: @static(i64) 0;
    Y :: @static(i64) 0;
    
    close :: fn() FuncId = {
        a :: 123;
        Second :: fn() = {
            #reexport(close);
            b :: {
                X[] += 1;  // this only gets evaluated once 
                5
            };
        };
        Y[] += 1;
        Second
    };
    
    do_something :: fn($T: FuncId) void = {
        #use(T);
        assert_eq(a, 123);
        assert_eq(b, 5);
    };
    
    S :: close();
    S2 :: close();
    do_something(S);
    {
        #use(S2);
        assert_eq(b, 5);
    };
    assert_eq(X[], 1);
    assert_eq(Y[], 2);
}

fn lifting_overloadsets() void #test = {
    fn confusion(s: ScopeId) i64 = 50;
    
    M :: fn() = {
        Foo :: @struct(a: i64);
        fn this_is_a_unique_name1223334444(a: Foo) i64 = {
            a.a * a.a
        }
        fn and_so_is_this1223334444(a: Foo) i64 = {
            a.a + a.a
        }
        
        func :: fn(a: i64) i64 = a + 1;
        
        confusion :: fn() i64 = 5;
    };
    {
        M2 :: FuncId.scope_of(M);
        a: M2.Foo = (a = 5);
        a := this_is_a_unique_name1223334444(a);
    };
    {
        #use(M);
        a: Foo = (a = 5);
        a := and_so_is_this1223334444(a);
    };
    // (a.b)(c) === {a.b}(c)
    // a.b(c)   ===  b(a, c)
    {
        M2 :: FuncId.scope_of(M);
        a := (M2.func)(1);
        
        // this is unfortunatly subtle. but math precedence is too and we accept that so maybe it's ok.
        b := (M2.confusion)();
        c := M2.confusion();
        assert_eq(b, 5);
        assert_eq(c, 50);
    };
    
    // new struct syntax so you don't have to go around changing ; to , 
    // and now it's like zig where if you import() a file, it's the same as if you just wrapped that code in a struct. 
    //    (not quite. you can't have runtime fields.) 
    S :: @struct {
        foo :: 123;
        bar :: 246;
        
        fn what_about_here1223334444(a: Int) Int = 
            a * S.foo + foo;
        
        Int :: i64;
        
        a: Int;  //  no need to say S.Int (which is good because you can't; S doesn't exist yet when we evaluate this expression, TODO!)
        b := foo;
    };
    
    assert_eq(S.bar + S.foo, what_about_here1223334444(2));
    
    s: S = (a = 1);
    assert_eq(s.a, 1);
    assert_eq(s.b, 123);
}

// TODO: maybe since structs have constant fields:
//       and then instead of enum dot syntax being a whole parallel hashmap thing, they can just have a scope too like structs. 
//       and the enum macro just does extra magic somehow to typecheck that assignments are to one of the valid values and that all declarations are of the same type. 
//       for that i'd want more ordering stuff so you could say @enum happens after other hash macros are expanded but before
//       compiling any constants so it can put its type annotation on them. 

#test
fn namespace_t(canary: i64) i64 = {
    // Note: not the same as a c++ namespace, the thing is a value and we just happen to bind it to a name. 
    my_module :: @struct {
        seven   :: 7;
        nine    :: 9;
        recurse :: lies;
        
        fn add_things();
        fn add_things() i64 = seven.add(nine);
    };
    
    assert_eq(my_module.seven, 7);
    assert_eq(my_module.nine, 9);
    f :: my_module.add_things;
    assert_eq(f(), 16);
    assert_eq(my_module'add_things(), 16);
    
    lies :: @struct {
        seven   :: my_module.nine;
        nine    :: my_module.seven;
        recurse :: my_module;
    };
    
    not_seven := my_module.recurse.seven;
    assert_eq(not_seven, 9);
    assert_eq(my_module.recurse.recurse.seven, 7);
        
    at_rt := my_module;  // its a first class value, not just a magic static constant thing, you just can't do anything with it now...

    :: if(Type);  // instantiate template for 'fn if' on a new type. 
    
    crazy_town :: true;
    // there's no check that both export the same fields. 
    // it's just a compile error if the name isn't declared when you try to use it. 
    // you could write a function that checks at comptime by calling get_constants() on the scopes. 
    m :: if(crazy_town, => lies, => my_module);
    assert_eq(m.seven, 9);
    
    canary
}

fn deduplicate_imports() #test = {
    fn display(s: *ScopeId, o: *List(u8)) void #redirect(Ty(*u32, *List(u8)), void);
    @assert_eq(import("@/lib/mix/sha256.fr"), Sha256);
    @assert_eq(import("@/lib/mix/sha256.fr"), import("@/lib/mix/sha256.fr"));
    @assert_eq(import().lib.mix.sha256, import().lib.mix.sha256);
    @assert_eq(import("@/lib/mix/sha256.fr"), import().lib.mix.sha256);
}

fn use_in_nested_capturing_call() #test = {
    FOO :: @struct {
        aardvark :: 123;
    };
    foo :: fn($body: @Fn() void) void = body();
    foo {  // 1
        banana := 456;
        foo {  // 2
            #use(FOO);
            assert_eq(banana, 456);
            assert_eq(aardvark, 123);
        }
    }
}
