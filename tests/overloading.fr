#test fn basic_overload() = {
    fn who_is(value: i64) i64 = 3;
    fn who_is(value: *i64) i64 = 7;
    fn who_is(value: Ty(i64, i64)) i64 = 9;
    
    assert_eq(3, who_is(10));
    an_int := 1;
    assert_eq(7, who_is(an_int&));
    // TODO: this got painful to call after doing arity overloading -- May 28
    assert_eq(9, who_is(@as(Ty(i64, i64)) (1, 2)));
    assert_eq(3, who_is(10));  // just to make sure im not cheating and doing them in order or something 
}

#test fn enum_dispatch(_canary: i64) i64 = {
    Bin :: @struct(a: i64, b: i64);
    DoAdd :: @struct(args: Bin);
    DoMul :: @struct(args: Bin);
    // asser t_eq(false, eq(DoAdd, DoMul));  // TODO: allow eq(Type, Type)
    
    // Dispite DoAdd and DoMul having the same sturucture, they are unique types so can have different overloads. 
    fn eval(e: DoAdd) i64 = add(e.args.a, e.args.b);
    fn eval(e: DoMul) i64 = mul(e.args.a, e.args.b);
    
    three: DoAdd = (args = (a = 1, b = 2));
    assert_eq(3, eval(three));
    two: DoMul = (args = (a = 1, b = 2));
    assert_eq(2, eval(two));
    
    DoMath1 :: @tagged(DoAdd: DoAdd, DoMul: DoMul);
    :: tagged(DoMath1); 
    
    // This is kinda sad to write...
    fn eval(e: DoMath1) i64 = { 
        is_add := e&.is(.DoAdd);
        if(is_add, =>eval(e.DoAdd), =>eval(e.DoMul))
    }
    
    three: DoMath1 = (DoAdd = (args = (a = 1, b = 2)));
    assert_eq(3, eval(three));
    two: DoMath1 = (DoMul = (args = (a = 1, b = 2)));
    assert_eq(2, eval(two));
    
    _canary
}

#test fn by_return_type() = {
    fn get_something() void = ();
    fn get_something() i64 = 17;
    
    a: void = get_something();
    b: i64 = get_something();
    assert_eq(b, 17);
}

// You can use named arguments to resolve ambiguous overloads
#test fn named_arg_disambiguate() = {
    fn seconds(hours: i64) i64 = mul(hours, mul(60, 60));
    fn seconds(minutes: i64) i64 = mul(minutes, 60);
    
    // You can't just call 'seconds(5)' because there's no way to tell which version you meant to call. // TODO: make sure its an error
    assert_eq(seconds(minutes=5), 300);
    assert_eq(seconds(hours=5), 18000);
}

// old sema can't do this!
// symptom: `arr: Array(i64, 3) = init(@slice (7, 8, 9));` choosing the overload for `Array(i64, 5)`
// It works with the arg being i64 but not []i64 or *i64,
// so i think its about suspending in the argument type.
#test fn choosing_the_wrong_array_init() = {
    fn thing();
    fn Thing($T: Type, $t: T) Type #generic #log_bc = {
        S :: @struct(fst: T);
        fn thing(x: *i64) S = @as(S) (fst = t);
        S
    }
    
    x := 123;
    x := x&;
    a: Thing(i64, 0) = thing(x);
    b: Thing(i64, 1) = thing(x);
}
