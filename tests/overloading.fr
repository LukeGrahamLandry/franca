#test fn basic_overload() = {
    fn who_is(value: i64) i64 = 3;
    fn who_is(value: *i64) i64 = 7;
    fn who_is(value: Ty(i64, i64)) i64 = 9;
    
    assert_eq(3, who_is(10));
    an_int := 1;
    assert_eq(7, who_is(an_int&));
    // TODO: this got painful to call after doing arity overloading -- May 28
    assert_eq(9, who_is(@as(Ty(i64, i64)) (1, 2)));
    assert_eq(3, who_is(10));  // just to make sure im not cheating and doing them in order or something 
}

#test fn enum_dispatch(_canary: i64) i64 = {
    Bin :: @struct(a: i64, b: i64);
    DoAdd :: @struct(args: Bin);
    DoMul :: @struct(args: Bin);
    // asser t_eq(false, eq(DoAdd, DoMul));  // TODO: allow eq(Type, Type)
    
    // Dispite DoAdd and DoMul having the same sturucture, they are unique types so can have different overloads. 
    fn eval(e: DoAdd) i64 = add(e.args.a, e.args.b);
    fn eval(e: DoMul) i64 = mul(e.args.a, e.args.b);
    
    three: DoAdd = (args = (a = 1, b = 2));
    assert_eq(3, eval(three));
    two: DoMul = (args = (a = 1, b = 2));
    assert_eq(2, eval(two));
    
    DoMath1 :: @tagged(DoAdd: DoAdd, DoMul: DoMul);
    :: tagged(DoMath1); 
    
    // This is kinda sad to write...
    fn eval(e: DoMath1) i64 = { 
        is_add := e&.is(.DoAdd);
        if(is_add, =>eval(e.DoAdd), =>eval(e.DoMul))
    }
    
    three: DoMath1 = (DoAdd = (args = (a = 1, b = 2)));
    assert_eq(3, eval(three));
    two: DoMath1 = (DoMul = (args = (a = 1, b = 2)));
    assert_eq(2, eval(two));
    
    _canary
}

#test fn by_return_type() = {
    fn get_something() void = ();
    fn get_something() i64 = 17;
    
    a: void = get_something();
    b: i64 = get_something();
    assert_eq(b, 17);
}

// this works with `=> b()` instead of `b`
// it also works if you instantiate the bool one first. 
// i think the problem is that you pass arg hints when resolving the overload and it remembers those on the func as tho they were true.
// so when checking the int overload it tells the closure that it returns int and then it remembers even once it fails. 
// but it should only do that if the type is infer so that doesn't quite make sense
//
#test fn or_wrong_type() = {
    fn my_if($T: Type) void = {
        fn my_if(cond: bool, $then: @Fn() T, $else: @Fn() T) T = @if(cond, then(), else());
    }
    
    my_or :: fn(a: bool, $b: @Fn() bool) bool = {
        a.my_if(=> true, b)
    };
    
    ::my_if(i64);
    ::my_if(bool);
    
    my_or(true, => false);
}

fn nested_resolving() #test = {
    x := foo(bar(1), 2);
    assert_eq(x, 0);
    
    // TODO: do we want to commit to making this work without the type annotation?
    //       its certainly weird that the one above does...
    x := foo(@as(Str) bar(1), "");
    assert_eq(x, 1);
    
    x := baz(zing(1), 2);
    assert_eq(x, 3);
    
    x: i64 = bar(0);
    assert_eq(x, 2);
    x: Str = bar(0);
    assert_eq(x, " ");

    fn foo(x: i64, y: i64) i64 = 0;
    fn foo(x: Str, y: Str) i64 = 1;
    fn bar(x: i64) i64 = 2;
    fn bar(x: i64) Str = " ";
    
    fn baz(x: i64, y: i64) i64 = 3;
    fn baz(x: Str, y: i64) i64 = 4;
    fn zing(y: i64) i64 = 5;
    fn zing(y: Str) Str = "";
}