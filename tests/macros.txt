fn main(canary: i64) i64 = {


@annotation
fn first_expr(arg: FatExpr, target: FatExpr) FatExpr = {
    arg!reflect_print;
    target!reflect_print;
    arg
}

@annotation
fn second_expr(arg: FatExpr, target: FatExpr) FatExpr = {
    target
}

assert_eq(177, @first_expr(177) 277);
assert_eq(288, @second_expr(188) 288);


/*
@comptime
fn Option(T: Type) Type = {
    let E: Type = .{ Some: T, None: Unit }!enum;
    E
}

const Maybe_i64 = Option(i64);

let yes: Maybe_i64 = .{ Some: 12 };
let no: Maybe_i64 = .{ None: unit };


let x = @match(yes) {
    fn Some(x: i64) i64 = x;
    fn None(x: Unit) i64 = 99;
};
asser t_eq(x, 12);


let x = @match(no) {
    fn Some(x: i64) i64 = x;
    fn None(x: Unit) i64 = 99;
};
asser t_eq(x, 99);
*/

canary
}