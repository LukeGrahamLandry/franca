fn main(canary: i64) i64 = {

////////////////////
/// No-op Macros ///
////////////////////

@annotation
fn first_expr(arg: FatExpr, target: FatExpr) FatExpr = arg;

@annotation
fn second_expr(arg: FatExpr, target: FatExpr) FatExpr = target;

assert_eq(177, @first_expr(177) 277);
assert_eq(288, @second_expr(188) 288);

//////////////////
/// Match Test ///
//////////////////

@comptime
fn Option(T: Type) Type = {
    let E: Type = .{ Some: T, None: Unit }!enum;
    E
}

let yes: Option(i64) = .{ Some: 12 };
let no: Option(i64) = .{ None: unit };

/*
let x = @match(yes) {
    fn Some(x: i64) i64 = x;
    fn None(x: Unit) i64 = 99;
};
asser t_eq(x, 12);


let x = @match(no) {
    fn Some(x: i64) i64 = x;
    fn None(x: Unit) i64 = 99;
};
asser t_eq(x, 99);
*/

puts(dump_ffi_types());
canary
}