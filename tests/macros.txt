fn main(canary: i64) i64 = {

//////////////////////
/// Trivial Macros ///
//////////////////////

@annotation
fn first_expr(arg: FatExpr, target: FatExpr) FatExpr = arg;

@annotation
fn second_expr(arg: FatExpr, target: FatExpr) FatExpr = target;

assert_eq(177, @first_expr(177) 277);
assert_eq(288, @second_expr(188) 288);

const _totototo: Type = List(FatExpr);

@annotation
fn last_thing(_: FatExpr, target: FatExpr) FatExpr = {
    let parts: Slice(FatExpr) = target.expr.Tuple[];
    let count: i64 = len(parts);
    let last: Ptr(FatExpr) = index(parts, sub(count, 1));
    last[]
}

// TODO: !! at the very least, warn when it gets put on a stmt instead of treated as an expression until i implement that. 

let x = @last_thing() (a, b, c, d, 18);
assert_eq(x, 18);

@annotation
fn is_declared(unit: FatExpr, target: FatExpr) FatExpr = {
    (eq(target.expr!tag[], tag_value(Expr, GetVar!symbol)), fn() = {
        target.expr[] = (Value: (ty: type_id(bool), value: (One: true)));
    }, fn() = 
        (eq(target.expr!tag[], tag_value(Expr, GetNamed!symbol)), fn() = {
            // This does the same thing as above but looks prettier. It does lose the location info on the ast node tho. 
            target = clone_ast(false!quote);
            target.loc[] = unit.loc[]; // report errors at the caller not here. 
        }, fn() = {
            panic("@is_declared expected identifier");
        })!if
    )!if;
    target
}

assert_eq(true, @is_declared() x);
assert_eq(false, @is_declared() not_an_ident);
assert_eq(false, @is_declared() hello);
let hello = 4;
assert_eq(true, @is_declared() hello);
{ let _ = @is_declared() 12; }!assert_compile_error;  

assert_eq(false, @is_declared() in_a_block);
{ let in_a_block = 0; assert_eq(true, @is_declared() in_a_block); };
assert_eq(false, @is_declared() in_a_block);

// Note: This will misbehave around ffi identifiers currently. 
//       It's an artifact of my awkward choices, its fine if you break this part of the test. 
assert_eq(false, @is_declared() FatExpr);
assert_eq(true, @is_declared() i64);

////////////////////
/// Placeholders ///
////////////////////

@annotation
fn apply_func_with_five(number: FatExpr, func: FatExpr) FatExpr = {
    // The following is equvilent to rust's `quote!{ #func(5, #number) }`.
    // Ask the compiler to give us the ast for the expression "<something>(5, <something>)"
    (func!unquote(5, number!unquote))!quote
}

let seven = @apply_func_with_five(2) add;
assert_eq(seven, 7);

//////////////////
/// Match Test ///
//////////////////

@comptime
fn Option(T: Type) Type = (Some: T, None: Unit)!enum;

// puts(dump_ffi_types());

const StupidEnum = (Only: i64)!enum;

let useless: StupidEnum = (Only: 18);
let y: i64 = @match(useless) {
    (fn Only(inner: i64) i64 = inner);  // TODO: error if you dont put it in a closure
};
assert_eq(18, y);

fn unwrap_or_99(m: Option(i64)) i64 = @match(m) {
    (fn Some(payload: i64) i64 = payload);
    (fn None(payload: Unit) i64 = 99);
};

let yes: Option(i64) = (Some: 12);
let no: Option(i64) = (None: unit);
assert_eq(unwrap_or_99(yes), 12);
assert_eq(unwrap_or_99(no), 99);

////////////////////
/// Bit Patterns ///
////////////////////

/// @bits is a macro defined by the standard library and used heavily by the assembler. 
assert_eq(@bits(0b00, 0x00000, 0b101, 0b100, 0b00, 0b11), 0b1011000011);

//////////////////////
/// Enum Constants ///
//////////////////////

// TODO: @enum is built into the compiler which is sad. 
//       Even if I fix that, maybe it makes more sense for this to be in the structs section. 
// TODO: make constant structs less hacky. 
// TODO: actual typechecking. it does know that _.T is a Unique type, but I had to turn off non-structural type checking to make something else work. 
//       However, if every function with this as an argument has an overload for the base type that does something else, 
//       it will take prority as expected. 
//       You would not believe how awkward it was to make this work at all, don't complain. 
/// `@enum(T) S` is what Java calls an enum (`S!enum` is what Rust calls an enum). 
const MyBool = @enum(i64) (True = 42, False = 999);

fn to_bool(b: MyBool.T[]) bool = {
    (eq(b,
        MyBool.True[]),
        fn() bool = true,
        fn() bool = (eq(b,
            MyBool.False[]),
            fn() bool = false,
            fn() bool = panic("Unrechable: Invalid Enum Value")
        )!if
    )!if
}

fn to_bool(b: i64) bool = (eq(b, 0), fn() = false, fn() = true)!if;

assert_eq(to_bool(MyBool.True[]), true);
assert_eq(to_bool(MyBool.False[]), false);

// The values of the enum are really just constants of its backing type.
// This upcast binding is required because there's no overload for assert _eq(MyBool.T[], i64)
let x: i64 = MyBool.False[];
assert_eq(x, 999);

// These take the other overload because integer literals are of type i64 not MyBool.T[].
assert_eq(to_bool(999), true);  // Even when the actual value collides.
assert_eq(to_bool(0), false);
assert_eq(to_bool(21904701), true);

// let x: MyBool.T[] = 999;  // TODO: this needs to be a compile error (especially if invalid value). 

canary
}
