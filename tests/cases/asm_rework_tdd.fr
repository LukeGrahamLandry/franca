//! May 1/2: debugging new asm. 

#test(aarch64)
fn main(canary: i64) i64 = {
    /// Looking for corrupted_types bug /// 

    // The problem here was after switching to stack based ir, I would try to load a pointer into seperate stack slots
    // but i assigned the register outside the loop so each part of the typeinfo struct would stomp each other 
    // and then the last one would get spread to all slots when tried to put it on the real stack. 
    // and it would segfault on something. this was in fact not the problem I was actually looking for. -- May 1
    fn thing1() Unit = {
        #comptime
        fn my_int() Type = {
            info := get_type_info(i64);
            i64
        }
        T :: my_int();
        debug_log_type(T);
    }
    thing1();

    // - Attempt to subtract with overflow, not enough args on the stack for a directcall. 
    // GetVar in emit_bc was just getting the address without doing a Load. 
    // - Next problem here was lack of spilling with trying to setup for c_call,
    // but just checking if the thing was already in the right register was enough to fix it. 
    fn thing2() Unit = {
        #comptime
        fn my_int_2() Type = {
            info := get_type_info(i64);
            intern_type(info)
        }
        K :: my_int_2();
        debug_log_type(K);
    }
    thing2();
    
    // - this forces the spilling issue. it needs to flip the result of the first add into x0 because it doesn't know fn add is commutable. 
    // - then i wasn't releasing x1 after the first call. that was enough to fix this. 
    // - however, now the above debug_log_type says i1 instead of i64. i was double dropping, not checking unique. 
    fn nested() i64 = add(1, add(2, 3));
    
    assert_eq(6, nested());
    
    // - JumpIf not dropping cond reg. 
    // - TODO: the first EndIf needs reg_free to be the same as it was at the if branch. 
    //   also needs to reset the stack as if results were popped off. the hack solution to that is just emit a pop of the right size
    //   after the jump away for the first branch. it wont exist at runtime but emit_asm will fall through and reset the stack. 
    fn thing3() Unit = {
        // cond is in x0. branch on c. 
        c := if(eq(add(0, 1), 0), fn()bool = {
            a := false;
            a
        }, fn()bool = {
            a := true;
            a
        });
    }
    thing3();
    
    // - constant folded !if still leaves the unreachable branch, but that doesn't leave enough on the v-stack to pop. 
    //   didn't actually fix the unreachable thing but just correctly full folding ifs makes it come up less often. 
    fn thing4() Unit = {
        a := 0;
        b := 1;
        c := (::true, fn = a, fn = b)!if;
    }
    thing4();
    
    assert_eq(1, 1);
    
    
    // - c calling '#ct fn Ptr' wasn't putting the arg in x1 because offset_bytes was zero and i dumbly skipped the add because i was like "well why add zero",
    //   but for zero you're just using add as mov because it doesn't care if the input reg is sp. 
    //   so the symptom was do_ptr_type getting a garbage value as its x1 arg, and it was an address because it was coming from operator_star_prefix,
    //   which decided to be a flat call for some reason so the junk in the reg was always the args_ptr. 
    //   this was the actaul problem i was looking for in the first place with this file. 
    fn thing5() Unit = {
        A :: i64;
        debug_log_type(A);
        B :: *A;
        debug_log_type(B);
    }
    thing5();
    
    // - branches of if need to have same v-stack when they rejoin so literals need to spill to registers. 
    fn literal_if() Unit = {
        c := true;
        b := if(c, fn = 1, fn = 2);
        assert_eq(b, 1);
    }
    literal_if();
    
    
    /// Looking for deser_args_literal bug /// 
    
    // this ones not my actual problem but can't be good. from specific.fr. 
    // - i was spill_abi_stompable after doing the call. thats why you had to call a random c function like malloc so it actually used x6 or whatever reg i was trying to keep. 
    fn spilling_stompable() Unit = {
        fn identity(cc: i64) i64 = {
            malloc(8);
            cc
        }
        c := 17;
        assert_eq(c, identity(c));
    }
    
    spilling_stompable();
    
    // - the value for str_uo can't be the stack pointer, so if you're trying to store the address of a variable, you need to use an extra register. 
    //   fixing this was enough to get basic.fr working. still not the problem i was looking for tho. 
    fn try_store_sp() Unit = {
        fn identity2(var arg: i64) i64 = {
            let arg_ptr = arg&;
            arg_ptr[]
        }
        
        assert_eq(6, identity2(6));
    }
    
    try_store_sp();
    
    

    // - this is the problem i was looking for. its just the slice bug below. 
    fn deser_arg() Unit = {
        #macro
        fn identity(n: FatExpr) FatExpr = '<n>';
        @identity(i64);
    }
    
    deser_arg();
    
    // - think i just fucked up my !slice. its doing len as number of slots not number of items. 
    //   and then trying to deserialize the unquote args slice doesn't work cause it wants way too many.  at 14/30
    fn use_slice() Unit = {
        fat_slice : Slice$Str = ("a", "b")!slice;
        assert_eq(fat_slice.len(), 2); // it thought len was 4. 
        
    }
    use_slice();
    
    // found problem in specific.fr
    // - Bc::TagCheck was doing pop_to_reg_with_offset instead of peek. 
    // - then enum construct was wrong way around so tag was after payload.
    fn do_tag_check() Unit = {
        A :: (a: i64, b: i64)!enum;
        c := 17;
        var a: A = (a: c);
        assert_eq(a&.a[], c);
    }
    do_tag_check();
    
    
    // - this was because spill_abi_stompable on flat calls washappening after putting ct ctx, etc in x0-4
    fn flat_call_stomps() Unit = {
        a := "hi".str();
        same := eq(a, "hi".str());
        assert_eq(same, true);
    }
    
    canary
}
