#test(aarch64)
fn main(canary: i64) i64 = {
    fn two() Unit = unit;
    fn sum_size() Unit = unit;

    fn one(const A: Type) Unit = {
        // this needs the extra argument to disambiguate which version of 'one' you meant to call. 
        fn two(const B: Type, a: A) Unit = {
            fn sum_size(a: A, b: B) i64 = A.size_of().add(B.size_of());
        }
    }
    
    fn use() Unit = assert_eq(16, sum_size(i64, 1));
    
    // currently you need to make sure these instantiations get compiled before the uses of them. -- Apr 26
    // but it's not lexical so the 'fn use' above is fine because it doesn't get compiled until later. 
    ::one(i64);
    ::two(Type, 0);
    ::one(Type);
    ::two(i64, i64);
    
    assert_eq(16, sum_size(1, i64));
    use();
    
    canary
}
