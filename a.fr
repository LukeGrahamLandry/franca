
:: {
    map_by_name(SgBlendOp, WGPU.BlendOperation);
};

fn map_by_name($In: Type, $Out: Type) void = {
    fn to_wgpu(it: In) Out = 
        @expand map_by_name_impl(@{ it }, In, Out);
}

// TODO: the loc is from the generic above not from it's call site which would be more useful
fn map_by_name_impl(arg: FatExpr, In: Type, Out: Type) FatExpr = {
    cases    := Ty(i64, FatExpr).list(ast_alloc());
    in_info  := In.get_type_info_ref();
    out_info := Out.get_type_info_ref();
    @ct_assert(in_info.is(.Enum) && out_info.is(.Enum) && size_of(In) <= 8, arg.loc, "bad type for map_by_enum");
    
    out_fields := out_info.Enum.fields.items();
    for in_info.Enum.fields { in_case |
        name := unscream(in_case._0.str()).sym();
        if name != "Default" {
            i := out_fields.index_of(fn(it) => it._1 == name) 
                || compile_error(@tfmt("missing enum translation for % in %", name.str(), Out.typename()), arg.loc);
            out_case: FatExpr = (expr = (Values = (bytes = out_fields[i]._0)), ty = Out, done = true, loc = arg.loc);
            push(cases&, (in_case._1.Small._0, out_case);
        }
    };
    
    make_switch(arg, @{ panic("invalid to_wgpu enum") }, cases.as_raw())
}

unscream :: fn(SCREAM_CASE: Str) Str = {
    name := u8.list(temp());
    first := true;
    for SCREAM_CASE { c |
        if first || c != "_".ascii() {
            name&.push(@if(!first && c >= 65 && c <= 89, c + 32, c)));  // if first then to_lower
            first = false;
        } else {
            first = true;
        }
    }
    name.items()
}
