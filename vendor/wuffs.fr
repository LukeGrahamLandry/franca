WuffsStatus :: @struct(repr: CStr);
WuffsBufferMeta :: @struct(
    wi: i64,        // Write index. Invariant: wi <= len.
    ri: i64,        // Read  index. Invariant: ri <= wi.
    pos: u64,       // Buffer position (relative to the start of stream).
    closed: bool,   // No further writes are expected.
);
WuffsToken :: @struct(repr: u64);

// TODO: have a way of declaring alignment
// TODO: have a nice way of saying opaque pointers that you can't load. 
WuffsJsonDecoder :: @struct(opaque: Array(u8, sizeof__wuffs_json__decoder())); 

WuffsIoBuffer :: @struct(data: [] u8, meta: WuffsBufferMeta);
WuffsTokenBuffer :: @struct(data: [] WuffsToken, meta: WuffsBufferMeta);

fn wuffs_json__decoder__decode_tokens(self: *WuffsJsonDecoder, dst: *WuffsTokenBuffer, src: *WuffsIoBuffer, workbuf: []u8) WuffsStatus #import("wuffs");
fn wuffs_base__io_buffer__compact(self: *WuffsIoBuffer) void #import("wuffs");
fn wuffs_base__token_buffer__compact(self: *WuffsTokenBuffer) void #import("wuffs");
fn wuffs_json__decoder__initialize(self: *WuffsJsonDecoder, sizeof_star_self: i64, wuffs_version: u64, options: u32) WuffsStatus #import("wuffs");
fn sizeof__wuffs_json__decoder() i64 #import("wuffs");

VALUE_BASE_CATEGORY__SHIFT :: 38;
VALUE_BASE_DETAIL__SHIFT :: 17;
fn category(t: WuffsToken) WuffsVbc = {
    v := t.repr.right_shift_arith(VALUE_BASE_CATEGORY__SHIFT);
    bit_cast_unchecked(u64, WuffsVbc, v)
}
fn detail(t: WuffsToken) u64 = {
    t.repr.right_shift_arith(VALUE_BASE_DETAIL__SHIFT).bit_and(0x1FFFFF)
}
fn len(t: WuffsToken) i64 = { // TODO: why doesn't this const coerece without the extra zeros? 
    t.repr.bit_and(0x00000000FFFF).bitcast()
}

fn right_shift_arith(value: u64, shift_amount: i64) u64 = 
    value.div(1.shift_left(shift_amount)); // TODO: right shift intrinsic

#redirect(Ty(i64, i64), i64) fn div(a: u64, b: u64) u64; // TODO: WRONG! unsigned is different than signed. 

bit_cast_unchecked :: fn($From: Type, $To: Type, v: From) To #generic = {
    ptr_cast_unchecked(From, To, v&)[]
}

fn is(self: WuffsToken, c: WuffsVbc, d: WuffsVbd) bool = {
    self.category() == c && {
        mask := bit_cast_unchecked(u64, WuffsVbd, d);
        self.detail().bit_and(mask) != 0
    }
}

WUFFS_VERSION :: 0x0000400;

WuffsVbc :: @enum(u64) (
    Filler = 0,
    Structure = 1,
    String = 2,
    Unicode = 3,
    Literal = 4,
    Number = 5,
    InlineIntSigned = 6,
    InlineIntUnsigned = 7,
);
:: enum(WuffsVbc);

// TODO: enum flags

WuffsVbd :: @enum(u64) (
    // Filler //
    Punctuation = 0x00001,
    CommentBlock = 0x00002,
    CommentLine = 0x00004,
    CommentAny = 0x00006,
    // Structure //
    Push = 0x00001,
    Pop = 0x00002,
    FromNone = 0x00010,
    FromList = 0x00020,
    FromDict = 0x00040,
    ToNone = 0x01000,
    ToList = 0x02000,
    ToDict = 0x04000,
    // String //
    Convert0DstFrom1SrcDrop = 0x00100,
    Convert1DstFrom1SrcCopy = 0x00200,
);


//#define WUFFS_BASE__TOKEN__VBD__STRING__CONVERT_1_DST_2_SRC_HEXADECIMAL 0x00400
//#define WUFFS_BASE__TOKEN__VBD__STRING__CONVERT_1_DST_4_SRC_BACKSLASH_X 0x00800
//#define WUFFS_BASE__TOKEN__VBD__STRING__CONVERT_3_DST_4_SRC_BASE_64_STD 0x01000
//#define WUFFS_BASE__TOKEN__VBD__STRING__CONVERT_3_DST_4_SRC_BASE_64_URL 0x02000
//#define WUFFS_BASE__TOKEN__VBD__STRING__CONVERT_4_DST_5_SRC_ASCII_85 0x04000
//#define WUFFS_BASE__TOKEN__VBD__STRING__CONVERT_5_DST_8_SRC_BASE_32_HEX 0x08000
//#define WUFFS_BASE__TOKEN__VBD__STRING__CONVERT_5_DST_8_SRC_BASE_32_STD 0x10000