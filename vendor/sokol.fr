//! log
// machine generated, do not edit

fn slog_func(tag: CStr, log_level: u32, log_item: u32, message: CStr, line_nr: u32, filename: CStr, user_data: rawptr) Unit #import("sokol");
//! gfx
// machine generated, do not edit

SgBuffer :: @struct(
    id: u32,
);
SgImage :: @struct(
    id: u32,
);
SgSampler :: @struct(
    id: u32,
);
SgShader :: @struct(
    id: u32,
);
SgPipeline :: @struct(
    id: u32,
);
SgAttachments :: @struct(
    id: u32,
);
SgRange :: @struct(
    ptr: rawptr,
    size: usize,
);
invalid_id :: 0;
num_shader_stages :: 2;
num_inflight_frames :: 2;
max_color_attachments :: 4;
max_vertex_buffers :: 8;
max_shaderstage_images :: 12;
max_shaderstage_samplers :: 8;
max_shaderstage_imagesamplerpairs :: 12;
max_shaderstage_storagebuffers :: 8;
max_shaderstage_ubs :: 4;
max_ub_members :: 16;
max_vertex_attributes :: 16;
max_mipmaps :: 16;
max_texturearray_layers :: 128;
SgColor :: @struct(
    r: f32,
    g: f32,
    b: f32,
    a: f32,
);
Backend :: @enum(i32) (
    GLCORE,
    GLES3,
    D3D11,
    METAL_IOS,
    METAL_MACOS,
    METAL_SIMULATOR,
    WGPU,
    DUMMY,
);
PixelFormat :: @enum(i32) (
    DEFAULT,
    NONE,
    R8,
    R8SN,
    R8UI,
    R8SI,
    R16,
    R16SN,
    R16UI,
    R16SI,
    R16F,
    RG8,
    RG8SN,
    RG8UI,
    RG8SI,
    R32UI,
    R32SI,
    R32F,
    RG16,
    RG16SN,
    RG16UI,
    RG16SI,
    RG16F,
    RGBA8,
    SRGB8A8,
    RGBA8SN,
    RGBA8UI,
    RGBA8SI,
    BGRA8,
    RGB10A2,
    RG11B10F,
    RGB9E5,
    RG32UI,
    RG32SI,
    RG32F,
    RGBA16,
    RGBA16SN,
    RGBA16UI,
    RGBA16SI,
    RGBA16F,
    RGBA32UI,
    RGBA32SI,
    RGBA32F,
    DEPTH,
    DEPTH_STENCIL,
    BC1_RGBA,
    BC2_RGBA,
    BC3_RGBA,
    BC3_SRGBA,
    BC4_R,
    BC4_RSN,
    BC5_RG,
    BC5_RGSN,
    BC6H_RGBF,
    BC6H_RGBUF,
    BC7_RGBA,
    BC7_SRGBA,
    PVRTC_RGB_2BPP,
    PVRTC_RGB_4BPP,
    PVRTC_RGBA_2BPP,
    PVRTC_RGBA_4BPP,
    ETC2_RGB8,
    ETC2_SRGB8,
    ETC2_RGB8A1,
    ETC2_RGBA8,
    ETC2_SRGB8A8,
    EAC_R11,
    EAC_R11SN,
    EAC_RG11,
    EAC_RG11SN,
    ASTC_4x4_RGBA,
    ASTC_4x4_SRGBA,
    NUM,
);
SgPixelformatInfo :: @struct(
    sample: bool,
    filter: bool,
    render: bool,
    blend: bool,
    msaa: bool,
    depth: bool,
    compressed: bool,
    bytes_per_pixel: i32,
);
SgFeatures :: @struct(
    origin_top_left: bool,
    image_clamp_to_border: bool,
    mrt_independent_blend_state: bool,
    mrt_independent_write_mask: bool,
    storage_buffer: bool,
);
SgLimits :: @struct(
    max_image_size_2d: i32,
    max_image_size_cube: i32,
    max_image_size_3d: i32,
    max_image_size_array: i32,
    max_image_array_layers: i32,
    max_vertex_attrs: i32,
    gl_max_vertex_uniform_components: i32,
    gl_max_combined_texture_image_units: i32,
);
ResourceState :: @enum(i32) (
    INITIAL,
    ALLOC,
    VALID,
    FAILED,
    INVALID,
);
Usage :: @enum(i32) (
    DEFAULT,
    IMMUTABLE,
    DYNAMIC,
    STREAM,
    NUM,
);
BufferType :: @enum(i32) (
    DEFAULT,
    VERTEXBUFFER,
    INDEXBUFFER,
    STORAGEBUFFER,
    NUM,
);
IndexType :: @enum(i32) (
    DEFAULT,
    NONE,
    UINT16,
    UINT32,
    NUM,
);
ImageType :: @enum(i32) (
    DEFAULT,
    _2D,
    CUBE,
    _3D,
    ARRAY,
    NUM,
);
ImageSampleType :: @enum(i32) (
    DEFAULT,
    FLOAT,
    DEPTH,
    SINT,
    UINT,
    UNFILTERABLE_FLOAT,
    NUM,
);
SamplerType :: @enum(i32) (
    DEFAULT,
    FILTERING,
    NONFILTERING,
    COMPARISON,
    NUM,
);
CubeFace :: @enum(i32) (
    POS_X,
    NEG_X,
    POS_Y,
    NEG_Y,
    POS_Z,
    NEG_Z,
    NUM,
);
ShaderStage :: @enum(i32) (
    VS,
    FS,
);
PrimitiveType :: @enum(i32) (
    DEFAULT,
    POINTS,
    LINES,
    LINE_STRIP,
    TRIANGLES,
    TRIANGLE_STRIP,
    NUM,
);
Filter :: @enum(i32) (
    DEFAULT,
    NONE,
    NEAREST,
    LINEAR,
    NUM,
);
Wrap :: @enum(i32) (
    DEFAULT,
    REPEAT,
    CLAMP_TO_EDGE,
    CLAMP_TO_BORDER,
    MIRRORED_REPEAT,
    NUM,
);
BorderColor :: @enum(i32) (
    DEFAULT,
    TRANSPARENT_BLACK,
    OPAQUE_BLACK,
    OPAQUE_WHITE,
    NUM,
);
VertexFormat :: @enum(i32) (
    INVALID,
    FLOAT,
    FLOAT2,
    FLOAT3,
    FLOAT4,
    BYTE4,
    BYTE4N,
    UBYTE4,
    UBYTE4N,
    SHORT2,
    SHORT2N,
    USHORT2N,
    SHORT4,
    SHORT4N,
    USHORT4N,
    UINT10_N2,
    HALF2,
    HALF4,
    NUM,
);
VertexStep :: @enum(i32) (
    DEFAULT,
    PER_VERTEX,
    PER_INSTANCE,
    NUM,
);
UniformType :: @enum(i32) (
    INVALID,
    FLOAT,
    FLOAT2,
    FLOAT3,
    FLOAT4,
    INT,
    INT2,
    INT3,
    INT4,
    MAT4,
    NUM,
);
UniformLayout :: @enum(i32) (
    DEFAULT,
    NATIVE,
    STD140,
    NUM,
);
CullMode :: @enum(i32) (
    DEFAULT,
    NONE,
    FRONT,
    BACK,
    NUM,
);
FaceWinding :: @enum(i32) (
    DEFAULT,
    CCW,
    CW,
    NUM,
);
CompareFunc :: @enum(i32) (
    DEFAULT,
    NEVER,
    LESS,
    EQUAL,
    LESS_EQUAL,
    GREATER,
    NOT_EQUAL,
    GREATER_EQUAL,
    ALWAYS,
    NUM,
);
StencilOp :: @enum(i32) (
    DEFAULT,
    KEEP,
    ZERO,
    REPLACE,
    INCR_CLAMP,
    DECR_CLAMP,
    INVERT,
    INCR_WRAP,
    DECR_WRAP,
    NUM,
);
BlendFactor :: @enum(i32) (
    DEFAULT,
    ZERO,
    ONE,
    SRC_COLOR,
    ONE_MINUS_SRC_COLOR,
    SRC_ALPHA,
    ONE_MINUS_SRC_ALPHA,
    DST_COLOR,
    ONE_MINUS_DST_COLOR,
    DST_ALPHA,
    ONE_MINUS_DST_ALPHA,
    SRC_ALPHA_SATURATED,
    BLEND_COLOR,
    ONE_MINUS_BLEND_COLOR,
    BLEND_ALPHA,
    ONE_MINUS_BLEND_ALPHA,
    NUM,
);
BlendOp :: @enum(i32) (
    DEFAULT,
    ADD,
    SUBTRACT,
    REVERSE_SUBTRACT,
    NUM,
);
ColorMask :: @enum(i32) (
    DEFAULT = 0,
    NONE = 16,
    R = 1,
    G = 2,
    RG = 3,
    B = 4,
    RB = 5,
    GB = 6,
    RGB = 7,
    A = 8,
    RA = 9,
    GA = 10,
    RGA = 11,
    BA = 12,
    RBA = 13,
    GBA = 14,
    RGBA = 15,
);
LoadAction :: @enum(i32) (
    DEFAULT,
    CLEAR,
    LOAD,
    DONTCARE,
);
StoreAction :: @enum(i32) (
    DEFAULT,
    STORE,
    DONTCARE,
);
SgColorAttachmentAction :: @struct(
    load_action: LoadAction,
    store_action: StoreAction,
    clear_value: SgColor,
);
SgDepthAttachmentAction :: @struct(
    load_action: LoadAction,
    store_action: StoreAction,
    clear_value: f32,
);
SgStencilAttachmentAction :: @struct(
    load_action: LoadAction,
    store_action: StoreAction,
    clear_value: u8,
);
SgPassAction :: @struct(
    colors: Array(SgColorAttachmentAction, 4),
    depth: SgDepthAttachmentAction,
    stencil: SgStencilAttachmentAction,
);
SgMetalSwapchain :: @struct(
    current_drawable: rawptr,
    depth_stencil_texture: rawptr,
    msaa_color_texture: rawptr,
);
SgD3d11Swapchain :: @struct(
    render_view: rawptr,
    resolve_view: rawptr,
    depth_stencil_view: rawptr,
);
SgWgpuSwapchain :: @struct(
    render_view: rawptr,
    resolve_view: rawptr,
    depth_stencil_view: rawptr,
);
SgGlSwapchain :: @struct(
    framebuffer: u32,
);
SgSwapchain :: @struct(
    width: i32,
    height: i32,
    sample_count: i32,
    color_format: PixelFormat,
    depth_format: PixelFormat,
    metal: SgMetalSwapchain,
    d3d11: SgD3d11Swapchain,
    wgpu: SgWgpuSwapchain,
    gl: SgGlSwapchain,
);
SgPass :: @struct(
    _start_canary: u32,
    action: SgPassAction,
    attachments: SgAttachments,
    swapchain: SgSwapchain,
    label: CStr,
    _end_canary: u32,
);
SgStageBindings :: @struct(
    images: Array(SgImage, 12),
    samplers: Array(SgSampler, 8),
    storage_buffers: Array(SgBuffer, 8),
);
SgBindings :: @struct(
    _start_canary: u32,
    vertex_buffers: Array(SgBuffer, 8),
    vertex_buffer_offsets: Array(i32, 8),
    index_buffer: SgBuffer,
    index_buffer_offset: i32,
    vs: SgStageBindings,
    fs: SgStageBindings,
    _end_canary: u32,
);
SgBufferDesc :: @struct(
    _start_canary: u32,
    size: usize,
    type: BufferType,
    usage: Usage,
    data: SgRange,
    label: CStr,
    gl_buffers: Array(u32, 2),
    mtl_buffers: Array(rawptr, 2),
    d3d11_buffer: rawptr,
    wgpu_buffer: rawptr,
    _end_canary: u32,
);
SgImageData :: @struct(
    subimage: Array(Array(SgRange, 16), 6),
);
SgImageDesc :: @struct(
    _start_canary: u32,
    type: ImageType,
    render_target: bool,
    width: i32,
    height: i32,
    num_slices: i32,
    num_mipmaps: i32,
    usage: Usage,
    pixel_format: PixelFormat,
    sample_count: i32,
    data: SgImageData,
    label: CStr,
    gl_textures: Array(u32, 2),
    gl_texture_target: u32,
    mtl_textures: Array(rawptr, 2),
    d3d11_texture: rawptr,
    d3d11_shader_resource_view: rawptr,
    wgpu_texture: rawptr,
    wgpu_texture_view: rawptr,
    _end_canary: u32,
);
SgSamplerDesc :: @struct(
    _start_canary: u32,
    min_filter: Filter,
    mag_filter: Filter,
    mipmap_filter: Filter,
    wrap_u: Wrap,
    wrap_v: Wrap,
    wrap_w: Wrap,
    min_lod: f32,
    max_lod: f32,
    border_color: BorderColor,
    compare: CompareFunc,
    max_anisotropy: u32,
    label: CStr,
    gl_sampler: u32,
    mtl_sampler: rawptr,
    d3d11_sampler: rawptr,
    wgpu_sampler: rawptr,
    _end_canary: u32,
);
SgShaderAttrDesc :: @struct(
    name: CStr,
    sem_name: CStr,
    sem_index: i32,
);
SgShaderUniformDesc :: @struct(
    name: CStr,
    type: UniformType,
    array_count: i32,
);
SgShaderUniformBlockDesc :: @struct(
    size: usize,
    layout: UniformLayout,
    uniforms: Array(SgShaderUniformDesc, 16),
);
SgShaderStorageBufferDesc :: @struct(
    used: bool,
    readonly: bool,
);
SgShaderImageDesc :: @struct(
    used: bool,
    multisampled: bool,
    image_type: ImageType,
    sample_type: ImageSampleType,
);
SgShaderSamplerDesc :: @struct(
    used: bool,
    sampler_type: SamplerType,
);
SgShaderImageSamplerPairDesc :: @struct(
    used: bool,
    image_slot: i32,
    sampler_slot: i32,
    glsl_name: CStr,
);
SgShaderStageDesc :: @struct(
    source: CStr,
    bytecode: SgRange,
    entry: CStr,
    d3d11_target: CStr,
    uniform_blocks: Array(SgShaderUniformBlockDesc, 4),
    storage_buffers: Array(SgShaderStorageBufferDesc, 8),
    images: Array(SgShaderImageDesc, 12),
    samplers: Array(SgShaderSamplerDesc, 8),
    image_sampler_pairs: Array(SgShaderImageSamplerPairDesc, 12),
);
SgShaderDesc :: @struct(
    _start_canary: u32,
    attrs: Array(SgShaderAttrDesc, 16),
    vs: SgShaderStageDesc,
    fs: SgShaderStageDesc,
    label: CStr,
    _end_canary: u32,
);
SgVertexBufferLayoutState :: @struct(
    stride: i32,
    step_func: VertexStep,
    step_rate: i32,
);
SgVertexAttrState :: @struct(
    buffer_index: i32,
    offset: i32,
    format: VertexFormat,
);
SgVertexLayoutState :: @struct(
    buffers: Array(SgVertexBufferLayoutState, 8),
    attrs: Array(SgVertexAttrState, 16),
);
SgStencilFaceState :: @struct(
    compare: CompareFunc,
    fail_op: StencilOp,
    depth_fail_op: StencilOp,
    pass_op: StencilOp,
);
SgStencilState :: @struct(
    enabled: bool,
    front: SgStencilFaceState,
    back: SgStencilFaceState,
    read_mask: u8,
    write_mask: u8,
    ref: u8,
);
SgDepthState :: @struct(
    pixel_format: PixelFormat,
    compare: CompareFunc,
    write_enabled: bool,
    bias: f32,
    bias_slope_scale: f32,
    bias_clamp: f32,
);
SgBlendState :: @struct(
    enabled: bool,
    src_factor_rgb: BlendFactor,
    dst_factor_rgb: BlendFactor,
    op_rgb: BlendOp,
    src_factor_alpha: BlendFactor,
    dst_factor_alpha: BlendFactor,
    op_alpha: BlendOp,
);
SgColorTargetState :: @struct(
    pixel_format: PixelFormat,
    write_mask: ColorMask,
    blend: SgBlendState,
);
SgPipelineDesc :: @struct(
    _start_canary: u32,
    shader: SgShader,
    layout: SgVertexLayoutState,
    depth: SgDepthState,
    stencil: SgStencilState,
    color_count: i32,
    colors: Array(SgColorTargetState, 4),
    primitive_type: PrimitiveType,
    index_type: IndexType,
    cull_mode: CullMode,
    face_winding: FaceWinding,
    sample_count: i32,
    blend_color: SgColor,
    alpha_to_coverage_enabled: bool,
    label: CStr,
    _end_canary: u32,
);
SgAttachmentDesc :: @struct(
    image: SgImage,
    mip_level: i32,
    slice: i32,
);
SgAttachmentsDesc :: @struct(
    _start_canary: u32,
    colors: Array(SgAttachmentDesc, 4),
    resolves: Array(SgAttachmentDesc, 4),
    depth_stencil: SgAttachmentDesc,
    label: CStr,
    _end_canary: u32,
);
SgTraceHooks :: @struct(
    user_data: rawptr,
    reset_state_cache: @FnPtr(rawptr) Unit,
    make_buffer: @FnPtr(*SgBufferDesc, SgBuffer, rawptr) Unit,
    make_image: @FnPtr(*SgImageDesc, SgImage, rawptr) Unit,
    make_sampler: @FnPtr(*SgSamplerDesc, SgSampler, rawptr) Unit,
    make_shader: @FnPtr(*SgShaderDesc, SgShader, rawptr) Unit,
    make_pipeline: @FnPtr(*SgPipelineDesc, SgPipeline, rawptr) Unit,
    make_attachments: @FnPtr(*SgAttachmentsDesc, SgAttachments, rawptr) Unit,
    destroy_buffer: @FnPtr(SgBuffer, rawptr) Unit,
    destroy_image: @FnPtr(SgImage, rawptr) Unit,
    destroy_sampler: @FnPtr(SgSampler, rawptr) Unit,
    destroy_shader: @FnPtr(SgShader, rawptr) Unit,
    destroy_pipeline: @FnPtr(SgPipeline, rawptr) Unit,
    destroy_attachments: @FnPtr(SgAttachments, rawptr) Unit,
    update_buffer: @FnPtr(SgBuffer, *SgRange, rawptr) Unit,
    update_image: @FnPtr(SgImage, *SgImageData, rawptr) Unit,
    append_buffer: @FnPtr(SgBuffer, *SgRange, i32, rawptr) Unit,
    begin_pass: @FnPtr(*SgPass, rawptr) Unit,
    apply_viewport: @FnPtr(i32, i32, i32, i32, bool, rawptr) Unit,
    apply_scissor_rect: @FnPtr(i32, i32, i32, i32, bool, rawptr) Unit,
    apply_pipeline: @FnPtr(SgPipeline, rawptr) Unit,
    apply_bindings: @FnPtr(*SgBindings, rawptr) Unit,
    apply_uniforms: @FnPtr(ShaderStage, i32, *SgRange, rawptr) Unit,
    draw: @FnPtr(i32, i32, i32, rawptr) Unit,
    end_pass: @FnPtr(rawptr) Unit,
    commit: @FnPtr(rawptr) Unit,
    alloc_buffer: @FnPtr(SgBuffer, rawptr) Unit,
    alloc_image: @FnPtr(SgImage, rawptr) Unit,
    alloc_sampler: @FnPtr(SgSampler, rawptr) Unit,
    alloc_shader: @FnPtr(SgShader, rawptr) Unit,
    alloc_pipeline: @FnPtr(SgPipeline, rawptr) Unit,
    alloc_attachments: @FnPtr(SgAttachments, rawptr) Unit,
    dealloc_buffer: @FnPtr(SgBuffer, rawptr) Unit,
    dealloc_image: @FnPtr(SgImage, rawptr) Unit,
    dealloc_sampler: @FnPtr(SgSampler, rawptr) Unit,
    dealloc_shader: @FnPtr(SgShader, rawptr) Unit,
    dealloc_pipeline: @FnPtr(SgPipeline, rawptr) Unit,
    dealloc_attachments: @FnPtr(SgAttachments, rawptr) Unit,
    init_buffer: @FnPtr(SgBuffer, *SgBufferDesc, rawptr) Unit,
    init_image: @FnPtr(SgImage, *SgImageDesc, rawptr) Unit,
    init_sampler: @FnPtr(SgSampler, *SgSamplerDesc, rawptr) Unit,
    init_shader: @FnPtr(SgShader, *SgShaderDesc, rawptr) Unit,
    init_pipeline: @FnPtr(SgPipeline, *SgPipelineDesc, rawptr) Unit,
    init_attachments: @FnPtr(SgAttachments, *SgAttachmentsDesc, rawptr) Unit,
    uninit_buffer: @FnPtr(SgBuffer, rawptr) Unit,
    uninit_image: @FnPtr(SgImage, rawptr) Unit,
    uninit_sampler: @FnPtr(SgSampler, rawptr) Unit,
    uninit_shader: @FnPtr(SgShader, rawptr) Unit,
    uninit_pipeline: @FnPtr(SgPipeline, rawptr) Unit,
    uninit_attachments: @FnPtr(SgAttachments, rawptr) Unit,
    fail_buffer: @FnPtr(SgBuffer, rawptr) Unit,
    fail_image: @FnPtr(SgImage, rawptr) Unit,
    fail_sampler: @FnPtr(SgSampler, rawptr) Unit,
    fail_shader: @FnPtr(SgShader, rawptr) Unit,
    fail_pipeline: @FnPtr(SgPipeline, rawptr) Unit,
    fail_attachments: @FnPtr(SgAttachments, rawptr) Unit,
    push_debug_group: @FnPtr(CStr, rawptr) Unit,
    pop_debug_group: @FnPtr(rawptr) Unit,
);
SgSlotInfo :: @struct(
    state: ResourceState,
    res_id: u32,
);
SgBufferInfo :: @struct(
    slot: SgSlotInfo,
    update_frame_index: u32,
    append_frame_index: u32,
    append_pos: i32,
    append_overflow: bool,
    num_slots: i32,
    active_slot: i32,
);
SgImageInfo :: @struct(
    slot: SgSlotInfo,
    upd_frame_index: u32,
    num_slots: i32,
    active_slot: i32,
);
SgSamplerInfo :: @struct(
    slot: SgSlotInfo,
);
SgShaderInfo :: @struct(
    slot: SgSlotInfo,
);
SgPipelineInfo :: @struct(
    slot: SgSlotInfo,
);
SgAttachmentsInfo :: @struct(
    slot: SgSlotInfo,
);
SgFrameStatsGl :: @struct(
    num_bind_buffer: u32,
    num_active_texture: u32,
    num_bind_texture: u32,
    num_bind_sampler: u32,
    num_use_program: u32,
    num_render_state: u32,
    num_vertex_attrib_pointer: u32,
    num_vertex_attrib_divisor: u32,
    num_enable_vertex_attrib_array: u32,
    num_disable_vertex_attrib_array: u32,
    num_uniform: u32,
);
SgFrameStatsD3d11Pass :: @struct(
    num_om_set_render_targets: u32,
    num_clear_render_target_view: u32,
    num_clear_depth_stencil_view: u32,
    num_resolve_subresource: u32,
);
SgFrameStatsD3d11Pipeline :: @struct(
    num_rs_set_state: u32,
    num_om_set_depth_stencil_state: u32,
    num_om_set_blend_state: u32,
    num_ia_set_primitive_topology: u32,
    num_ia_set_input_layout: u32,
    num_vs_set_shader: u32,
    num_vs_set_constant_buffers: u32,
    num_ps_set_shader: u32,
    num_ps_set_constant_buffers: u32,
);
SgFrameStatsD3d11Bindings :: @struct(
    num_ia_set_vertex_buffers: u32,
    num_ia_set_index_buffer: u32,
    num_vs_set_shader_resources: u32,
    num_ps_set_shader_resources: u32,
    num_vs_set_samplers: u32,
    num_ps_set_samplers: u32,
);
SgFrameStatsD3d11Uniforms :: @struct(
    num_update_subresource: u32,
);
SgFrameStatsD3d11Draw :: @struct(
    num_draw_indexed_instanced: u32,
    num_draw_indexed: u32,
    num_draw_instanced: u32,
    num_draw: u32,
);
SgFrameStatsD3d11 :: @struct(
    pass: SgFrameStatsD3d11Pass,
    pipeline: SgFrameStatsD3d11Pipeline,
    bindings: SgFrameStatsD3d11Bindings,
    uniforms: SgFrameStatsD3d11Uniforms,
    draw: SgFrameStatsD3d11Draw,
    num_map: u32,
    num_unmap: u32,
);
SgFrameStatsMetalIdpool :: @struct(
    num_added: u32,
    num_released: u32,
    num_garbage_collected: u32,
);
SgFrameStatsMetalPipeline :: @struct(
    num_set_blend_color: u32,
    num_set_cull_mode: u32,
    num_set_front_facing_winding: u32,
    num_set_stencil_reference_value: u32,
    num_set_depth_bias: u32,
    num_set_render_pipeline_state: u32,
    num_set_depth_stencil_state: u32,
);
SgFrameStatsMetalBindings :: @struct(
    num_set_vertex_buffer: u32,
    num_set_vertex_texture: u32,
    num_set_vertex_sampler_state: u32,
    num_set_fragment_buffer: u32,
    num_set_fragment_texture: u32,
    num_set_fragment_sampler_state: u32,
);
SgFrameStatsMetalUniforms :: @struct(
    num_set_vertex_buffer_offset: u32,
    num_set_fragment_buffer_offset: u32,
);
SgFrameStatsMetal :: @struct(
    idpool: SgFrameStatsMetalIdpool,
    pipeline: SgFrameStatsMetalPipeline,
    bindings: SgFrameStatsMetalBindings,
    uniforms: SgFrameStatsMetalUniforms,
);
SgFrameStatsWgpuUniforms :: @struct(
    num_set_bindgroup: u32,
    size_write_buffer: u32,
);
SgFrameStatsWgpuBindings :: @struct(
    num_set_vertex_buffer: u32,
    num_skip_redundant_vertex_buffer: u32,
    num_set_index_buffer: u32,
    num_skip_redundant_index_buffer: u32,
    num_create_bindgroup: u32,
    num_discard_bindgroup: u32,
    num_set_bindgroup: u32,
    num_skip_redundant_bindgroup: u32,
    num_bindgroup_cache_hits: u32,
    num_bindgroup_cache_misses: u32,
    num_bindgroup_cache_collisions: u32,
    num_bindgroup_cache_hash_vs_key_mismatch: u32,
);
SgFrameStatsWgpu :: @struct(
    uniforms: SgFrameStatsWgpuUniforms,
    bindings: SgFrameStatsWgpuBindings,
);
SgFrameStats :: @struct(
    frame_index: u32,
    num_passes: u32,
    num_apply_viewport: u32,
    num_apply_scissor_rect: u32,
    num_apply_pipeline: u32,
    num_apply_bindings: u32,
    num_apply_uniforms: u32,
    num_draw: u32,
    num_update_buffer: u32,
    num_append_buffer: u32,
    num_update_image: u32,
    size_apply_uniforms: u32,
    size_update_buffer: u32,
    size_append_buffer: u32,
    size_update_image: u32,
    gl: SgFrameStatsGl,
    d3d11: SgFrameStatsD3d11,
    metal: SgFrameStatsMetal,
    wgpu: SgFrameStatsWgpu,
);
sg_LogItem :: @enum(i32) (
    OK,
    MALLOC_FAILED,
    GL_TEXTURE_FORMAT_NOT_SUPPORTED,
    GL_3D_TEXTURES_NOT_SUPPORTED,
    GL_ARRAY_TEXTURES_NOT_SUPPORTED,
    GL_SHADER_COMPILATION_FAILED,
    GL_SHADER_LINKING_FAILED,
    GL_VERTEX_ATTRIBUTE_NOT_FOUND_IN_SHADER,
    GL_TEXTURE_NAME_NOT_FOUND_IN_SHADER,
    GL_FRAMEBUFFER_STATUS_UNDEFINED,
    GL_FRAMEBUFFER_STATUS_INCOMPLETE_ATTACHMENT,
    GL_FRAMEBUFFER_STATUS_INCOMPLETE_MISSING_ATTACHMENT,
    GL_FRAMEBUFFER_STATUS_UNSUPPORTED,
    GL_FRAMEBUFFER_STATUS_INCOMPLETE_MULTISAMPLE,
    GL_FRAMEBUFFER_STATUS_UNKNOWN,
    D3D11_CREATE_BUFFER_FAILED,
    D3D11_CREATE_BUFFER_SRV_FAILED,
    D3D11_CREATE_DEPTH_TEXTURE_UNSUPPORTED_PIXEL_FORMAT,
    D3D11_CREATE_DEPTH_TEXTURE_FAILED,
    D3D11_CREATE_2D_TEXTURE_UNSUPPORTED_PIXEL_FORMAT,
    D3D11_CREATE_2D_TEXTURE_FAILED,
    D3D11_CREATE_2D_SRV_FAILED,
    D3D11_CREATE_3D_TEXTURE_UNSUPPORTED_PIXEL_FORMAT,
    D3D11_CREATE_3D_TEXTURE_FAILED,
    D3D11_CREATE_3D_SRV_FAILED,
    D3D11_CREATE_MSAA_TEXTURE_FAILED,
    D3D11_CREATE_SAMPLER_STATE_FAILED,
    D3D11_LOAD_D3DCOMPILER_47_DLL_FAILED,
    D3D11_SHADER_COMPILATION_FAILED,
    D3D11_SHADER_COMPILATION_OUTPUT,
    D3D11_CREATE_CONSTANT_BUFFER_FAILED,
    D3D11_CREATE_INPUT_LAYOUT_FAILED,
    D3D11_CREATE_RASTERIZER_STATE_FAILED,
    D3D11_CREATE_DEPTH_STENCIL_STATE_FAILED,
    D3D11_CREATE_BLEND_STATE_FAILED,
    D3D11_CREATE_RTV_FAILED,
    D3D11_CREATE_DSV_FAILED,
    D3D11_MAP_FOR_UPDATE_BUFFER_FAILED,
    D3D11_MAP_FOR_APPEND_BUFFER_FAILED,
    D3D11_MAP_FOR_UPDATE_IMAGE_FAILED,
    METAL_CREATE_BUFFER_FAILED,
    METAL_TEXTURE_FORMAT_NOT_SUPPORTED,
    METAL_CREATE_TEXTURE_FAILED,
    METAL_CREATE_SAMPLER_FAILED,
    METAL_SHADER_COMPILATION_FAILED,
    METAL_SHADER_CREATION_FAILED,
    METAL_SHADER_COMPILATION_OUTPUT,
    METAL_VERTEX_SHADER_ENTRY_NOT_FOUND,
    METAL_FRAGMENT_SHADER_ENTRY_NOT_FOUND,
    METAL_CREATE_RPS_FAILED,
    METAL_CREATE_RPS_OUTPUT,
    METAL_CREATE_DSS_FAILED,
    WGPU_BINDGROUPS_POOL_EXHAUSTED,
    WGPU_BINDGROUPSCACHE_SIZE_GREATER_ONE,
    WGPU_BINDGROUPSCACHE_SIZE_POW2,
    WGPU_CREATEBINDGROUP_FAILED,
    WGPU_CREATE_BUFFER_FAILED,
    WGPU_CREATE_TEXTURE_FAILED,
    WGPU_CREATE_TEXTURE_VIEW_FAILED,
    WGPU_CREATE_SAMPLER_FAILED,
    WGPU_CREATE_SHADER_MODULE_FAILED,
    WGPU_SHADER_TOO_MANY_IMAGES,
    WGPU_SHADER_TOO_MANY_SAMPLERS,
    WGPU_SHADER_TOO_MANY_STORAGEBUFFERS,
    WGPU_SHADER_CREATE_BINDGROUP_LAYOUT_FAILED,
    WGPU_CREATE_PIPELINE_LAYOUT_FAILED,
    WGPU_CREATE_RENDER_PIPELINE_FAILED,
    WGPU_ATTACHMENTS_CREATE_TEXTURE_VIEW_FAILED,
    IDENTICAL_COMMIT_LISTENER,
    COMMIT_LISTENER_ARRAY_FULL,
    TRACE_HOOKS_NOT_ENABLED,
    DEALLOC_BUFFER_INVALID_STATE,
    DEALLOC_IMAGE_INVALID_STATE,
    DEALLOC_SAMPLER_INVALID_STATE,
    DEALLOC_SHADER_INVALID_STATE,
    DEALLOC_PIPELINE_INVALID_STATE,
    DEALLOC_ATTACHMENTS_INVALID_STATE,
    INIT_BUFFER_INVALID_STATE,
    INIT_IMAGE_INVALID_STATE,
    INIT_SAMPLER_INVALID_STATE,
    INIT_SHADER_INVALID_STATE,
    INIT_PIPELINE_INVALID_STATE,
    INIT_ATTACHMENTS_INVALID_STATE,
    UNINIT_BUFFER_INVALID_STATE,
    UNINIT_IMAGE_INVALID_STATE,
    UNINIT_SAMPLER_INVALID_STATE,
    UNINIT_SHADER_INVALID_STATE,
    UNINIT_PIPELINE_INVALID_STATE,
    UNINIT_ATTACHMENTS_INVALID_STATE,
    FAIL_BUFFER_INVALID_STATE,
    FAIL_IMAGE_INVALID_STATE,
    FAIL_SAMPLER_INVALID_STATE,
    FAIL_SHADER_INVALID_STATE,
    FAIL_PIPELINE_INVALID_STATE,
    FAIL_ATTACHMENTS_INVALID_STATE,
    BUFFER_POOL_EXHAUSTED,
    IMAGE_POOL_EXHAUSTED,
    SAMPLER_POOL_EXHAUSTED,
    SHADER_POOL_EXHAUSTED,
    PIPELINE_POOL_EXHAUSTED,
    PASS_POOL_EXHAUSTED,
    BEGINPASS_ATTACHMENT_INVALID,
    DRAW_WITHOUT_BINDINGS,
    VALIDATE_BUFFERDESC_CANARY,
    VALIDATE_BUFFERDESC_SIZE,
    VALIDATE_BUFFERDESC_DATA,
    VALIDATE_BUFFERDESC_DATA_SIZE,
    VALIDATE_BUFFERDESC_NO_DATA,
    VALIDATE_BUFFERDESC_STORAGEBUFFER_SUPPORTED,
    VALIDATE_BUFFERDESC_STORAGEBUFFER_SIZE_MULTIPLE_4,
    VALIDATE_IMAGEDATA_NODATA,
    VALIDATE_IMAGEDATA_DATA_SIZE,
    VALIDATE_IMAGEDESC_CANARY,
    VALIDATE_IMAGEDESC_WIDTH,
    VALIDATE_IMAGEDESC_HEIGHT,
    VALIDATE_IMAGEDESC_RT_PIXELFORMAT,
    VALIDATE_IMAGEDESC_NONRT_PIXELFORMAT,
    VALIDATE_IMAGEDESC_MSAA_BUT_NO_RT,
    VALIDATE_IMAGEDESC_NO_MSAA_RT_SUPPORT,
    VALIDATE_IMAGEDESC_MSAA_NUM_MIPMAPS,
    VALIDATE_IMAGEDESC_MSAA_3D_IMAGE,
    VALIDATE_IMAGEDESC_DEPTH_3D_IMAGE,
    VALIDATE_IMAGEDESC_RT_IMMUTABLE,
    VALIDATE_IMAGEDESC_RT_NO_DATA,
    VALIDATE_IMAGEDESC_INJECTED_NO_DATA,
    VALIDATE_IMAGEDESC_DYNAMIC_NO_DATA,
    VALIDATE_IMAGEDESC_COMPRESSED_IMMUTABLE,
    VALIDATE_SAMPLERDESC_CANARY,
    VALIDATE_SAMPLERDESC_MINFILTER_NONE,
    VALIDATE_SAMPLERDESC_MAGFILTER_NONE,
    VALIDATE_SAMPLERDESC_ANISTROPIC_REQUIRES_LINEAR_FILTERING,
    VALIDATE_SHADERDESC_CANARY,
    VALIDATE_SHADERDESC_SOURCE,
    VALIDATE_SHADERDESC_BYTECODE,
    VALIDATE_SHADERDESC_SOURCE_OR_BYTECODE,
    VALIDATE_SHADERDESC_NO_BYTECODE_SIZE,
    VALIDATE_SHADERDESC_NO_CONT_UBS,
    VALIDATE_SHADERDESC_NO_CONT_UB_MEMBERS,
    VALIDATE_SHADERDESC_NO_UB_MEMBERS,
    VALIDATE_SHADERDESC_UB_MEMBER_NAME,
    VALIDATE_SHADERDESC_UB_SIZE_MISMATCH,
    VALIDATE_SHADERDESC_UB_ARRAY_COUNT,
    VALIDATE_SHADERDESC_UB_STD140_ARRAY_TYPE,
    VALIDATE_SHADERDESC_NO_CONT_STORAGEBUFFERS,
    VALIDATE_SHADERDESC_STORAGEBUFFER_READONLY,
    VALIDATE_SHADERDESC_NO_CONT_IMAGES,
    VALIDATE_SHADERDESC_NO_CONT_SAMPLERS,
    VALIDATE_SHADERDESC_IMAGE_SAMPLER_PAIR_IMAGE_SLOT_OUT_OF_RANGE,
    VALIDATE_SHADERDESC_IMAGE_SAMPLER_PAIR_SAMPLER_SLOT_OUT_OF_RANGE,
    VALIDATE_SHADERDESC_IMAGE_SAMPLER_PAIR_NAME_REQUIRED_FOR_GL,
    VALIDATE_SHADERDESC_IMAGE_SAMPLER_PAIR_HAS_NAME_BUT_NOT_USED,
    VALIDATE_SHADERDESC_IMAGE_SAMPLER_PAIR_HAS_IMAGE_BUT_NOT_USED,
    VALIDATE_SHADERDESC_IMAGE_SAMPLER_PAIR_HAS_SAMPLER_BUT_NOT_USED,
    VALIDATE_SHADERDESC_NONFILTERING_SAMPLER_REQUIRED,
    VALIDATE_SHADERDESC_COMPARISON_SAMPLER_REQUIRED,
    VALIDATE_SHADERDESC_IMAGE_NOT_REFERENCED_BY_IMAGE_SAMPLER_PAIRS,
    VALIDATE_SHADERDESC_SAMPLER_NOT_REFERENCED_BY_IMAGE_SAMPLER_PAIRS,
    VALIDATE_SHADERDESC_NO_CONT_IMAGE_SAMPLER_PAIRS,
    VALIDATE_SHADERDESC_ATTR_STRING_TOO_LONG,
    VALIDATE_PIPELINEDESC_CANARY,
    VALIDATE_PIPELINEDESC_SHADER,
    VALIDATE_PIPELINEDESC_NO_CONT_ATTRS,
    VALIDATE_PIPELINEDESC_LAYOUT_STRIDE4,
    VALIDATE_PIPELINEDESC_ATTR_SEMANTICS,
    VALIDATE_ATTACHMENTSDESC_CANARY,
    VALIDATE_ATTACHMENTSDESC_NO_ATTACHMENTS,
    VALIDATE_ATTACHMENTSDESC_NO_CONT_COLOR_ATTS,
    VALIDATE_ATTACHMENTSDESC_IMAGE,
    VALIDATE_ATTACHMENTSDESC_MIPLEVEL,
    VALIDATE_ATTACHMENTSDESC_FACE,
    VALIDATE_ATTACHMENTSDESC_LAYER,
    VALIDATE_ATTACHMENTSDESC_SLICE,
    VALIDATE_ATTACHMENTSDESC_IMAGE_NO_RT,
    VALIDATE_ATTACHMENTSDESC_COLOR_INV_PIXELFORMAT,
    VALIDATE_ATTACHMENTSDESC_DEPTH_INV_PIXELFORMAT,
    VALIDATE_ATTACHMENTSDESC_IMAGE_SIZES,
    VALIDATE_ATTACHMENTSDESC_IMAGE_SAMPLE_COUNTS,
    VALIDATE_ATTACHMENTSDESC_RESOLVE_COLOR_IMAGE_MSAA,
    VALIDATE_ATTACHMENTSDESC_RESOLVE_IMAGE,
    VALIDATE_ATTACHMENTSDESC_RESOLVE_SAMPLE_COUNT,
    VALIDATE_ATTACHMENTSDESC_RESOLVE_MIPLEVEL,
    VALIDATE_ATTACHMENTSDESC_RESOLVE_FACE,
    VALIDATE_ATTACHMENTSDESC_RESOLVE_LAYER,
    VALIDATE_ATTACHMENTSDESC_RESOLVE_SLICE,
    VALIDATE_ATTACHMENTSDESC_RESOLVE_IMAGE_NO_RT,
    VALIDATE_ATTACHMENTSDESC_RESOLVE_IMAGE_SIZES,
    VALIDATE_ATTACHMENTSDESC_RESOLVE_IMAGE_FORMAT,
    VALIDATE_ATTACHMENTSDESC_DEPTH_IMAGE,
    VALIDATE_ATTACHMENTSDESC_DEPTH_MIPLEVEL,
    VALIDATE_ATTACHMENTSDESC_DEPTH_FACE,
    VALIDATE_ATTACHMENTSDESC_DEPTH_LAYER,
    VALIDATE_ATTACHMENTSDESC_DEPTH_SLICE,
    VALIDATE_ATTACHMENTSDESC_DEPTH_IMAGE_NO_RT,
    VALIDATE_ATTACHMENTSDESC_DEPTH_IMAGE_SIZES,
    VALIDATE_ATTACHMENTSDESC_DEPTH_IMAGE_SAMPLE_COUNT,
    VALIDATE_BEGINPASS_CANARY,
    VALIDATE_BEGINPASS_ATTACHMENTS_EXISTS,
    VALIDATE_BEGINPASS_ATTACHMENTS_VALID,
    VALIDATE_BEGINPASS_COLOR_ATTACHMENT_IMAGE,
    VALIDATE_BEGINPASS_RESOLVE_ATTACHMENT_IMAGE,
    VALIDATE_BEGINPASS_DEPTHSTENCIL_ATTACHMENT_IMAGE,
    VALIDATE_BEGINPASS_SWAPCHAIN_EXPECT_WIDTH,
    VALIDATE_BEGINPASS_SWAPCHAIN_EXPECT_WIDTH_NOTSET,
    VALIDATE_BEGINPASS_SWAPCHAIN_EXPECT_HEIGHT,
    VALIDATE_BEGINPASS_SWAPCHAIN_EXPECT_HEIGHT_NOTSET,
    VALIDATE_BEGINPASS_SWAPCHAIN_EXPECT_SAMPLECOUNT,
    VALIDATE_BEGINPASS_SWAPCHAIN_EXPECT_SAMPLECOUNT_NOTSET,
    VALIDATE_BEGINPASS_SWAPCHAIN_EXPECT_COLORFORMAT,
    VALIDATE_BEGINPASS_SWAPCHAIN_EXPECT_COLORFORMAT_NOTSET,
    VALIDATE_BEGINPASS_SWAPCHAIN_EXPECT_DEPTHFORMAT_NOTSET,
    VALIDATE_BEGINPASS_SWAPCHAIN_METAL_EXPECT_CURRENTDRAWABLE,
    VALIDATE_BEGINPASS_SWAPCHAIN_METAL_EXPECT_CURRENTDRAWABLE_NOTSET,
    VALIDATE_BEGINPASS_SWAPCHAIN_METAL_EXPECT_DEPTHSTENCILTEXTURE,
    VALIDATE_BEGINPASS_SWAPCHAIN_METAL_EXPECT_DEPTHSTENCILTEXTURE_NOTSET,
    VALIDATE_BEGINPASS_SWAPCHAIN_METAL_EXPECT_MSAACOLORTEXTURE,
    VALIDATE_BEGINPASS_SWAPCHAIN_METAL_EXPECT_MSAACOLORTEXTURE_NOTSET,
    VALIDATE_BEGINPASS_SWAPCHAIN_D3D11_EXPECT_RENDERVIEW,
    VALIDATE_BEGINPASS_SWAPCHAIN_D3D11_EXPECT_RENDERVIEW_NOTSET,
    VALIDATE_BEGINPASS_SWAPCHAIN_D3D11_EXPECT_RESOLVEVIEW,
    VALIDATE_BEGINPASS_SWAPCHAIN_D3D11_EXPECT_RESOLVEVIEW_NOTSET,
    VALIDATE_BEGINPASS_SWAPCHAIN_D3D11_EXPECT_DEPTHSTENCILVIEW,
    VALIDATE_BEGINPASS_SWAPCHAIN_D3D11_EXPECT_DEPTHSTENCILVIEW_NOTSET,
    VALIDATE_BEGINPASS_SWAPCHAIN_WGPU_EXPECT_RENDERVIEW,
    VALIDATE_BEGINPASS_SWAPCHAIN_WGPU_EXPECT_RENDERVIEW_NOTSET,
    VALIDATE_BEGINPASS_SWAPCHAIN_WGPU_EXPECT_RESOLVEVIEW,
    VALIDATE_BEGINPASS_SWAPCHAIN_WGPU_EXPECT_RESOLVEVIEW_NOTSET,
    VALIDATE_BEGINPASS_SWAPCHAIN_WGPU_EXPECT_DEPTHSTENCILVIEW,
    VALIDATE_BEGINPASS_SWAPCHAIN_WGPU_EXPECT_DEPTHSTENCILVIEW_NOTSET,
    VALIDATE_BEGINPASS_SWAPCHAIN_GL_EXPECT_FRAMEBUFFER_NOTSET,
    VALIDATE_APIP_PIPELINE_VALID_ID,
    VALIDATE_APIP_PIPELINE_EXISTS,
    VALIDATE_APIP_PIPELINE_VALID,
    VALIDATE_APIP_SHADER_EXISTS,
    VALIDATE_APIP_SHADER_VALID,
    VALIDATE_APIP_CURPASS_ATTACHMENTS_EXISTS,
    VALIDATE_APIP_CURPASS_ATTACHMENTS_VALID,
    VALIDATE_APIP_ATT_COUNT,
    VALIDATE_APIP_COLOR_FORMAT,
    VALIDATE_APIP_DEPTH_FORMAT,
    VALIDATE_APIP_SAMPLE_COUNT,
    VALIDATE_ABND_PIPELINE,
    VALIDATE_ABND_PIPELINE_EXISTS,
    VALIDATE_ABND_PIPELINE_VALID,
    VALIDATE_ABND_VBS,
    VALIDATE_ABND_VB_EXISTS,
    VALIDATE_ABND_VB_TYPE,
    VALIDATE_ABND_VB_OVERFLOW,
    VALIDATE_ABND_NO_IB,
    VALIDATE_ABND_IB,
    VALIDATE_ABND_IB_EXISTS,
    VALIDATE_ABND_IB_TYPE,
    VALIDATE_ABND_IB_OVERFLOW,
    VALIDATE_ABND_VS_EXPECTED_IMAGE_BINDING,
    VALIDATE_ABND_VS_IMG_EXISTS,
    VALIDATE_ABND_VS_IMAGE_TYPE_MISMATCH,
    VALIDATE_ABND_VS_IMAGE_MSAA,
    VALIDATE_ABND_VS_EXPECTED_FILTERABLE_IMAGE,
    VALIDATE_ABND_VS_EXPECTED_DEPTH_IMAGE,
    VALIDATE_ABND_VS_UNEXPECTED_IMAGE_BINDING,
    VALIDATE_ABND_VS_EXPECTED_SAMPLER_BINDING,
    VALIDATE_ABND_VS_UNEXPECTED_SAMPLER_COMPARE_NEVER,
    VALIDATE_ABND_VS_EXPECTED_SAMPLER_COMPARE_NEVER,
    VALIDATE_ABND_VS_EXPECTED_NONFILTERING_SAMPLER,
    VALIDATE_ABND_VS_UNEXPECTED_SAMPLER_BINDING,
    VALIDATE_ABND_VS_SMP_EXISTS,
    VALIDATE_ABND_VS_EXPECTED_STORAGEBUFFER_BINDING,
    VALIDATE_ABND_VS_STORAGEBUFFER_EXISTS,
    VALIDATE_ABND_VS_STORAGEBUFFER_BINDING_BUFFERTYPE,
    VALIDATE_ABND_VS_UNEXPECTED_STORAGEBUFFER_BINDING,
    VALIDATE_ABND_FS_EXPECTED_IMAGE_BINDING,
    VALIDATE_ABND_FS_IMG_EXISTS,
    VALIDATE_ABND_FS_IMAGE_TYPE_MISMATCH,
    VALIDATE_ABND_FS_IMAGE_MSAA,
    VALIDATE_ABND_FS_EXPECTED_FILTERABLE_IMAGE,
    VALIDATE_ABND_FS_EXPECTED_DEPTH_IMAGE,
    VALIDATE_ABND_FS_UNEXPECTED_IMAGE_BINDING,
    VALIDATE_ABND_FS_EXPECTED_SAMPLER_BINDING,
    VALIDATE_ABND_FS_UNEXPECTED_SAMPLER_COMPARE_NEVER,
    VALIDATE_ABND_FS_EXPECTED_SAMPLER_COMPARE_NEVER,
    VALIDATE_ABND_FS_EXPECTED_NONFILTERING_SAMPLER,
    VALIDATE_ABND_FS_UNEXPECTED_SAMPLER_BINDING,
    VALIDATE_ABND_FS_SMP_EXISTS,
    VALIDATE_ABND_FS_EXPECTED_STORAGEBUFFER_BINDING,
    VALIDATE_ABND_FS_STORAGEBUFFER_EXISTS,
    VALIDATE_ABND_FS_STORAGEBUFFER_BINDING_BUFFERTYPE,
    VALIDATE_ABND_FS_UNEXPECTED_STORAGEBUFFER_BINDING,
    VALIDATE_AUB_NO_PIPELINE,
    VALIDATE_AUB_NO_UB_AT_SLOT,
    VALIDATE_AUB_SIZE,
    VALIDATE_UPDATEBUF_USAGE,
    VALIDATE_UPDATEBUF_SIZE,
    VALIDATE_UPDATEBUF_ONCE,
    VALIDATE_UPDATEBUF_APPEND,
    VALIDATE_APPENDBUF_USAGE,
    VALIDATE_APPENDBUF_SIZE,
    VALIDATE_APPENDBUF_UPDATE,
    VALIDATE_UPDIMG_USAGE,
    VALIDATE_UPDIMG_ONCE,
    VALIDATION_FAILED,
);
SgEnvironmentDefaults :: @struct(
    color_format: PixelFormat,
    depth_format: PixelFormat,
    sample_count: i32,
);
SgMetalEnvironment :: @struct(
    device: rawptr,
);
SgD3d11Environment :: @struct(
    device: rawptr,
    device_context: rawptr,
);
SgWgpuEnvironment :: @struct(
    device: rawptr,
);
SgEnvironment :: @struct(
    defaults: SgEnvironmentDefaults,
    metal: SgMetalEnvironment,
    d3d11: SgD3d11Environment,
    wgpu: SgWgpuEnvironment,
);
SgCommitListener :: @struct(
    func: @FnPtr(rawptr) Unit,
    user_data: rawptr,
);
SgAllocator :: @struct(
    alloc_fn: @FnPtr(usize, rawptr) rawptr,
    free_fn: @FnPtr(rawptr, rawptr) Unit,
    user_data: rawptr,
);
SgLogger :: @struct(
    func: @FnPtr(CStr, u32, u32, CStr, u32, CStr, rawptr) Unit,
    user_data: rawptr,
);
SgDesc :: @struct(
    _start_canary: u32,
    buffer_pool_size: i32,
    image_pool_size: i32,
    sampler_pool_size: i32,
    shader_pool_size: i32,
    pipeline_pool_size: i32,
    attachments_pool_size: i32,
    uniform_buffer_size: i32,
    max_commit_listeners: i32,
    disable_validation: bool,
    mtl_force_managed_storage_mode: bool,
    mtl_use_command_buffer_with_retained_references: bool,
    wgpu_disable_bindgroups_cache: bool,
    wgpu_bindgroups_cache_size: i32,
    allocator: SgAllocator,
    logger: SgLogger,
    environment: SgEnvironment,
    _end_canary: u32,
);
fn sg_setup(desc: *SgDesc) Unit #import("sokol");
fn sg_shutdown() Unit #import("sokol");
fn sg_isvalid() bool #import("sokol");
fn sg_reset_state_cache() Unit #import("sokol");
fn sg_install_trace_hooks(trace_hooks: *SgTraceHooks) SgTraceHooks #import("sokol");
fn sg_push_debug_group(name: CStr) Unit #import("sokol");
fn sg_pop_debug_group() Unit #import("sokol");
fn sg_add_commit_listener(listener: SgCommitListener) bool #import("sokol");
fn sg_remove_commit_listener(listener: SgCommitListener) bool #import("sokol");
fn sg_make_buffer(desc: *SgBufferDesc) SgBuffer #import("sokol");
fn sg_make_image(desc: *SgImageDesc) SgImage #import("sokol");
fn sg_make_sampler(desc: *SgSamplerDesc) SgSampler #import("sokol");
fn sg_make_shader(desc: *SgShaderDesc) SgShader #import("sokol");
fn sg_make_pipeline(desc: *SgPipelineDesc) SgPipeline #import("sokol");
fn sg_make_attachments(desc: *SgAttachmentsDesc) SgAttachments #import("sokol");
fn sg_destroy_buffer(buf: SgBuffer) Unit #import("sokol");
fn sg_destroy_image(img: SgImage) Unit #import("sokol");
fn sg_destroy_sampler(smp: SgSampler) Unit #import("sokol");
fn sg_destroy_shader(shd: SgShader) Unit #import("sokol");
fn sg_destroy_pipeline(pip: SgPipeline) Unit #import("sokol");
fn sg_destroy_attachments(atts: SgAttachments) Unit #import("sokol");
fn sg_update_buffer(buf: SgBuffer, data: *SgRange) Unit #import("sokol");
fn sg_update_image(img: SgImage, data: *SgImageData) Unit #import("sokol");
fn sg_append_buffer(buf: SgBuffer, data: *SgRange) i32 #import("sokol");
fn sg_query_buffer_overflow(buf: SgBuffer) bool #import("sokol");
fn sg_query_buffer_will_overflow(buf: SgBuffer, size: usize) bool #import("sokol");
fn sg_begin_pass(pass: *SgPass) Unit #import("sokol");
fn sg_apply_viewport(x: i32, y: i32, width: i32, height: i32, origin_top_left: bool) Unit #import("sokol");
fn sg_apply_viewportf(x: f32, y: f32, width: f32, height: f32, origin_top_left: bool) Unit #import("sokol");
fn sg_apply_scissor_rect(x: i32, y: i32, width: i32, height: i32, origin_top_left: bool) Unit #import("sokol");
fn sg_apply_scissor_rectf(x: f32, y: f32, width: f32, height: f32, origin_top_left: bool) Unit #import("sokol");
fn sg_apply_pipeline(pip: SgPipeline) Unit #import("sokol");
fn sg_apply_bindings(bindings: *SgBindings) Unit #import("sokol");
fn sg_apply_uniforms(stage: ShaderStage, ub_index: i32, data: *SgRange) Unit #import("sokol");
fn sg_draw(base_element: i32, num_elements: i32, num_instances: i32) Unit #import("sokol");
fn sg_end_pass() Unit #import("sokol");
fn sg_commit() Unit #import("sokol");
fn sg_query_desc() SgDesc #import("sokol");
fn sg_query_backend() Backend #import("sokol");
fn sg_query_features() SgFeatures #import("sokol");
fn sg_query_limits() SgLimits #import("sokol");
fn sg_query_pixelformat(fmt: PixelFormat) SgPixelformatInfo #import("sokol");
fn sg_query_row_pitch(fmt: PixelFormat, width: i32, row_align_bytes: i32) i32 #import("sokol");
fn sg_query_surface_pitch(fmt: PixelFormat, width: i32, height: i32, row_align_bytes: i32) i32 #import("sokol");
fn sg_query_buffer_state(buf: SgBuffer) ResourceState #import("sokol");
fn sg_query_image_state(img: SgImage) ResourceState #import("sokol");
fn sg_query_sampler_state(smp: SgSampler) ResourceState #import("sokol");
fn sg_query_shader_state(shd: SgShader) ResourceState #import("sokol");
fn sg_query_pipeline_state(pip: SgPipeline) ResourceState #import("sokol");
fn sg_query_attachments_state(atts: SgAttachments) ResourceState #import("sokol");
fn sg_query_buffer_info(buf: SgBuffer) SgBufferInfo #import("sokol");
fn sg_query_image_info(img: SgImage) SgImageInfo #import("sokol");
fn sg_query_sampler_info(smp: SgSampler) SgSamplerInfo #import("sokol");
fn sg_query_shader_info(shd: SgShader) SgShaderInfo #import("sokol");
fn sg_query_pipeline_info(pip: SgPipeline) SgPipelineInfo #import("sokol");
fn sg_query_attachments_info(atts: SgAttachments) SgAttachmentsInfo #import("sokol");
fn sg_query_buffer_desc(buf: SgBuffer) SgBufferDesc #import("sokol");
fn sg_query_image_desc(img: SgImage) SgImageDesc #import("sokol");
fn sg_query_sampler_desc(smp: SgSampler) SgSamplerDesc #import("sokol");
fn sg_query_shader_desc(shd: SgShader) SgShaderDesc #import("sokol");
fn sg_query_pipeline_desc(pip: SgPipeline) SgPipelineDesc #import("sokol");
fn sg_query_attachments_desc(atts: SgAttachments) SgAttachmentsDesc #import("sokol");
fn sg_query_buffer_defaults(desc: *SgBufferDesc) SgBufferDesc #import("sokol");
fn sg_query_image_defaults(desc: *SgImageDesc) SgImageDesc #import("sokol");
fn sg_query_sampler_defaults(desc: *SgSamplerDesc) SgSamplerDesc #import("sokol");
fn sg_query_shader_defaults(desc: *SgShaderDesc) SgShaderDesc #import("sokol");
fn sg_query_pipeline_defaults(desc: *SgPipelineDesc) SgPipelineDesc #import("sokol");
fn sg_query_attachments_defaults(desc: *SgAttachmentsDesc) SgAttachmentsDesc #import("sokol");
fn sg_alloc_buffer() SgBuffer #import("sokol");
fn sg_alloc_image() SgImage #import("sokol");
fn sg_alloc_sampler() SgSampler #import("sokol");
fn sg_alloc_shader() SgShader #import("sokol");
fn sg_alloc_pipeline() SgPipeline #import("sokol");
fn sg_alloc_attachments() SgAttachments #import("sokol");
fn sg_dealloc_buffer(buf: SgBuffer) Unit #import("sokol");
fn sg_dealloc_image(img: SgImage) Unit #import("sokol");
fn sg_dealloc_sampler(smp: SgSampler) Unit #import("sokol");
fn sg_dealloc_shader(shd: SgShader) Unit #import("sokol");
fn sg_dealloc_pipeline(pip: SgPipeline) Unit #import("sokol");
fn sg_dealloc_attachments(attachments: SgAttachments) Unit #import("sokol");
fn sg_init_buffer(buf: SgBuffer, desc: *SgBufferDesc) Unit #import("sokol");
fn sg_init_image(img: SgImage, desc: *SgImageDesc) Unit #import("sokol");
fn sg_init_sampler(smg: SgSampler, desc: *SgSamplerDesc) Unit #import("sokol");
fn sg_init_shader(shd: SgShader, desc: *SgShaderDesc) Unit #import("sokol");
fn sg_init_pipeline(pip: SgPipeline, desc: *SgPipelineDesc) Unit #import("sokol");
fn sg_init_attachments(attachments: SgAttachments, desc: *SgAttachmentsDesc) Unit #import("sokol");
fn sg_uninit_buffer(buf: SgBuffer) Unit #import("sokol");
fn sg_uninit_image(img: SgImage) Unit #import("sokol");
fn sg_uninit_sampler(smp: SgSampler) Unit #import("sokol");
fn sg_uninit_shader(shd: SgShader) Unit #import("sokol");
fn sg_uninit_pipeline(pip: SgPipeline) Unit #import("sokol");
fn sg_uninit_attachments(atts: SgAttachments) Unit #import("sokol");
fn sg_fail_buffer(buf: SgBuffer) Unit #import("sokol");
fn sg_fail_image(img: SgImage) Unit #import("sokol");
fn sg_fail_sampler(smp: SgSampler) Unit #import("sokol");
fn sg_fail_shader(shd: SgShader) Unit #import("sokol");
fn sg_fail_pipeline(pip: SgPipeline) Unit #import("sokol");
fn sg_fail_attachments(atts: SgAttachments) Unit #import("sokol");
fn sg_enable_frame_stats() Unit #import("sokol");
fn sg_disable_frame_stats() Unit #import("sokol");
fn sg_frame_stats_enabled() bool #import("sokol");
fn sg_query_frame_stats() SgFrameStats #import("sokol");
SgD3d11BufferInfo :: @struct(
    buf: rawptr,
);
SgD3d11ImageInfo :: @struct(
    tex2d: rawptr,
    tex3d: rawptr,
    res: rawptr,
    srv: rawptr,
);
SgD3d11SamplerInfo :: @struct(
    smp: rawptr,
);
SgD3d11ShaderInfo :: @struct(
    vs_cbufs: Array(rawptr, 4),
    fs_cbufs: Array(rawptr, 4),
    vs: rawptr,
    fs: rawptr,
);
SgD3d11PipelineInfo :: @struct(
    il: rawptr,
    rs: rawptr,
    dss: rawptr,
    bs: rawptr,
);
SgD3d11AttachmentsInfo :: @struct(
    color_rtv: Array(rawptr, 4),
    resolve_rtv: Array(rawptr, 4),
    dsv: rawptr,
);
SgMtlBufferInfo :: @struct(
    buf: Array(rawptr, 2),
    active_slot: i32,
);
SgMtlImageInfo :: @struct(
    tex: Array(rawptr, 2),
    active_slot: i32,
);
SgMtlSamplerInfo :: @struct(
    smp: rawptr,
);
SgMtlShaderInfo :: @struct(
    vs_lib: rawptr,
    fs_lib: rawptr,
    vs_func: rawptr,
    fs_func: rawptr,
);
SgMtlPipelineInfo :: @struct(
    rps: rawptr,
    dss: rawptr,
);
SgWgpuBufferInfo :: @struct(
    buf: rawptr,
);
SgWgpuImageInfo :: @struct(
    tex: rawptr,
    view: rawptr,
);
SgWgpuSamplerInfo :: @struct(
    smp: rawptr,
);
SgWgpuShaderInfo :: @struct(
    vs_mod: rawptr,
    fs_mod: rawptr,
    bgl: rawptr,
);
SgWgpuPipelineInfo :: @struct(
    pip: rawptr,
);
SgWgpuAttachmentsInfo :: @struct(
    color_view: Array(rawptr, 4),
    resolve_view: Array(rawptr, 4),
    ds_view: rawptr,
);
SgGlBufferInfo :: @struct(
    buf: Array(u32, 2),
    active_slot: i32,
);
SgGlImageInfo :: @struct(
    tex: Array(u32, 2),
    tex_target: u32,
    msaa_render_buffer: u32,
    active_slot: i32,
);
SgGlSamplerInfo :: @struct(
    smp: u32,
);
SgGlShaderInfo :: @struct(
    prog: u32,
);
SgGlAttachmentsInfo :: @struct(
    framebuffer: u32,
    msaa_resolve_framebuffer: Array(u32, 4),
);
fn sg_d3d11_device() rawptr #import("sokol");
fn sg_d3d11_device_context() rawptr #import("sokol");
fn sg_d3d11_query_buffer_info(buf: SgBuffer) SgD3d11BufferInfo #import("sokol");
fn sg_d3d11_query_image_info(img: SgImage) SgD3d11ImageInfo #import("sokol");
fn sg_d3d11_query_sampler_info(smp: SgSampler) SgD3d11SamplerInfo #import("sokol");
fn sg_d3d11_query_shader_info(shd: SgShader) SgD3d11ShaderInfo #import("sokol");
fn sg_d3d11_query_pipeline_info(pip: SgPipeline) SgD3d11PipelineInfo #import("sokol");
fn sg_d3d11_query_attachments_info(atts: SgAttachments) SgD3d11AttachmentsInfo #import("sokol");
fn sg_mtl_device() rawptr #import("sokol");
fn sg_mtl_render_command_encoder() rawptr #import("sokol");
fn sg_mtl_query_buffer_info(buf: SgBuffer) SgMtlBufferInfo #import("sokol");
fn sg_mtl_query_image_info(img: SgImage) SgMtlImageInfo #import("sokol");
fn sg_mtl_query_sampler_info(smp: SgSampler) SgMtlSamplerInfo #import("sokol");
fn sg_mtl_query_shader_info(shd: SgShader) SgMtlShaderInfo #import("sokol");
fn sg_mtl_query_pipeline_info(pip: SgPipeline) SgMtlPipelineInfo #import("sokol");
fn sg_wgpu_device() rawptr #import("sokol");
fn sg_wgpu_queue() rawptr #import("sokol");
fn sg_wgpu_command_encoder() rawptr #import("sokol");
fn sg_wgpu_render_pass_encoder() rawptr #import("sokol");
fn sg_wgpu_query_buffer_info(buf: SgBuffer) SgWgpuBufferInfo #import("sokol");
fn sg_wgpu_query_image_info(img: SgImage) SgWgpuImageInfo #import("sokol");
fn sg_wgpu_query_sampler_info(smp: SgSampler) SgWgpuSamplerInfo #import("sokol");
fn sg_wgpu_query_shader_info(shd: SgShader) SgWgpuShaderInfo #import("sokol");
fn sg_wgpu_query_pipeline_info(pip: SgPipeline) SgWgpuPipelineInfo #import("sokol");
fn sg_wgpu_query_attachments_info(atts: SgAttachments) SgWgpuAttachmentsInfo #import("sokol");
fn sg_gl_query_buffer_info(buf: SgBuffer) SgGlBufferInfo #import("sokol");
fn sg_gl_query_image_info(img: SgImage) SgGlImageInfo #import("sokol");
fn sg_gl_query_sampler_info(smp: SgSampler) SgGlSamplerInfo #import("sokol");
fn sg_gl_query_shader_info(shd: SgShader) SgGlShaderInfo #import("sokol");
fn sg_gl_query_attachments_info(atts: SgAttachments) SgGlAttachmentsInfo #import("sokol");
//! app
// machine generated, do not edit

max_touchpoints :: 8;
max_mousebuttons :: 3;
max_keycodes :: 512;
max_iconimages :: 8;
EventType :: @enum(i32) (
    INVALID,
    KEY_DOWN,
    KEY_UP,
    CHAR,
    MOUSE_DOWN,
    MOUSE_UP,
    MOUSE_SCROLL,
    MOUSE_MOVE,
    MOUSE_ENTER,
    MOUSE_LEAVE,
    TOUCHES_BEGAN,
    TOUCHES_MOVED,
    TOUCHES_ENDED,
    TOUCHES_CANCELLED,
    RESIZED,
    ICONIFIED,
    RESTORED,
    FOCUSED,
    UNFOCUSED,
    SUSPENDED,
    RESUMED,
    QUIT_REQUESTED,
    CLIPBOARD_PASTED,
    FILES_DROPPED,
    NUM,
);
Keycode :: @enum(i32) (
    INVALID = 0,
    SPACE = 32,
    APOSTROPHE = 39,
    COMMA = 44,
    MINUS = 45,
    PERIOD = 46,
    SLASH = 47,
    _0 = 48,
    _1 = 49,
    _2 = 50,
    _3 = 51,
    _4 = 52,
    _5 = 53,
    _6 = 54,
    _7 = 55,
    _8 = 56,
    _9 = 57,
    SEMICOLON = 59,
    EQUAL = 61,
    A = 65,
    B = 66,
    C = 67,
    D = 68,
    E = 69,
    F = 70,
    G = 71,
    H = 72,
    I = 73,
    J = 74,
    K = 75,
    L = 76,
    M = 77,
    N = 78,
    O = 79,
    P = 80,
    Q = 81,
    R = 82,
    S = 83,
    T = 84,
    U = 85,
    V = 86,
    W = 87,
    X = 88,
    Y = 89,
    Z = 90,
    LEFT_BRACKET = 91,
    BACKSLASH = 92,
    RIGHT_BRACKET = 93,
    GRAVE_ACCENT = 96,
    WORLD_1 = 161,
    WORLD_2 = 162,
    ESCAPE = 256,
    ENTER = 257,
    TAB = 258,
    BACKSPACE = 259,
    INSERT = 260,
    DELETE = 261,
    RIGHT = 262,
    LEFT = 263,
    DOWN = 264,
    UP = 265,
    PAGE_UP = 266,
    PAGE_DOWN = 267,
    HOME = 268,
    END = 269,
    CAPS_LOCK = 280,
    SCROLL_LOCK = 281,
    NUM_LOCK = 282,
    PRINT_SCREEN = 283,
    PAUSE = 284,
    F1 = 290,
    F2 = 291,
    F3 = 292,
    F4 = 293,
    F5 = 294,
    F6 = 295,
    F7 = 296,
    F8 = 297,
    F9 = 298,
    F10 = 299,
    F11 = 300,
    F12 = 301,
    F13 = 302,
    F14 = 303,
    F15 = 304,
    F16 = 305,
    F17 = 306,
    F18 = 307,
    F19 = 308,
    F20 = 309,
    F21 = 310,
    F22 = 311,
    F23 = 312,
    F24 = 313,
    F25 = 314,
    KP_0 = 320,
    KP_1 = 321,
    KP_2 = 322,
    KP_3 = 323,
    KP_4 = 324,
    KP_5 = 325,
    KP_6 = 326,
    KP_7 = 327,
    KP_8 = 328,
    KP_9 = 329,
    KP_DECIMAL = 330,
    KP_DIVIDE = 331,
    KP_MULTIPLY = 332,
    KP_SUBTRACT = 333,
    KP_ADD = 334,
    KP_ENTER = 335,
    KP_EQUAL = 336,
    LEFT_SHIFT = 340,
    LEFT_CONTROL = 341,
    LEFT_ALT = 342,
    LEFT_SUPER = 343,
    RIGHT_SHIFT = 344,
    RIGHT_CONTROL = 345,
    RIGHT_ALT = 346,
    RIGHT_SUPER = 347,
    MENU = 348,
);
AndroidTooltype :: @enum(i32) (
    UNKNOWN = 0,
    FINGER = 1,
    STYLUS = 2,
    MOUSE = 3,
);
SappTouchpoint :: @struct(
    identifier: usize,
    pos_x: f32,
    pos_y: f32,
    android_tooltype: AndroidTooltype,
    changed: bool,
);
Mousebutton :: @enum(i32) (
    LEFT = 0,
    RIGHT = 1,
    MIDDLE = 2,
    INVALID = 256,
);
modifier_shift :: 1;
modifier_ctrl :: 2;
modifier_alt :: 4;
modifier_super :: 8;
modifier_lmb :: 256;
modifier_rmb :: 512;
modifier_mmb :: 1024;
SappEvent :: @struct(
    frame_count: u64,
    type: EventType,
    key_code: Keycode,
    char_code: u32,
    key_repeat: bool,
    modifiers: u32,
    mouse_button: Mousebutton,
    mouse_x: f32,
    mouse_y: f32,
    mouse_dx: f32,
    mouse_dy: f32,
    scroll_x: f32,
    scroll_y: f32,
    num_touches: i32,
    touches: Array(SappTouchpoint, 8),
    window_width: i32,
    window_height: i32,
    framebuffer_width: i32,
    framebuffer_height: i32,
);
SappRange :: @struct(
    ptr: rawptr,
    size: usize,
);
SappImageDesc :: @struct(
    width: i32,
    height: i32,
    pixels: SappRange,
);
SappIconDesc :: @struct(
    sokol_default: bool,
    images: Array(SappImageDesc, 8),
);
SappAllocator :: @struct(
    alloc_fn: @FnPtr(usize, rawptr) rawptr,
    free_fn: @FnPtr(rawptr, rawptr) Unit,
    user_data: rawptr,
);
sapp_LogItem :: @enum(i32) (
    OK,
    MALLOC_FAILED,
    MACOS_INVALID_NSOPENGL_PROFILE,
    WIN32_LOAD_OPENGL32_DLL_FAILED,
    WIN32_CREATE_HELPER_WINDOW_FAILED,
    WIN32_HELPER_WINDOW_GETDC_FAILED,
    WIN32_DUMMY_CONTEXT_SET_PIXELFORMAT_FAILED,
    WIN32_CREATE_DUMMY_CONTEXT_FAILED,
    WIN32_DUMMY_CONTEXT_MAKE_CURRENT_FAILED,
    WIN32_GET_PIXELFORMAT_ATTRIB_FAILED,
    WIN32_WGL_FIND_PIXELFORMAT_FAILED,
    WIN32_WGL_DESCRIBE_PIXELFORMAT_FAILED,
    WIN32_WGL_SET_PIXELFORMAT_FAILED,
    WIN32_WGL_ARB_CREATE_CONTEXT_REQUIRED,
    WIN32_WGL_ARB_CREATE_CONTEXT_PROFILE_REQUIRED,
    WIN32_WGL_OPENGL_3_2_NOT_SUPPORTED,
    WIN32_WGL_OPENGL_PROFILE_NOT_SUPPORTED,
    WIN32_WGL_INCOMPATIBLE_DEVICE_CONTEXT,
    WIN32_WGL_CREATE_CONTEXT_ATTRIBS_FAILED_OTHER,
    WIN32_D3D11_CREATE_DEVICE_AND_SWAPCHAIN_WITH_DEBUG_FAILED,
    WIN32_D3D11_GET_IDXGIFACTORY_FAILED,
    WIN32_D3D11_GET_IDXGIADAPTER_FAILED,
    WIN32_D3D11_QUERY_INTERFACE_IDXGIDEVICE1_FAILED,
    WIN32_REGISTER_RAW_INPUT_DEVICES_FAILED_MOUSE_LOCK,
    WIN32_REGISTER_RAW_INPUT_DEVICES_FAILED_MOUSE_UNLOCK,
    WIN32_GET_RAW_INPUT_DATA_FAILED,
    LINUX_GLX_LOAD_LIBGL_FAILED,
    LINUX_GLX_LOAD_ENTRY_POINTS_FAILED,
    LINUX_GLX_EXTENSION_NOT_FOUND,
    LINUX_GLX_QUERY_VERSION_FAILED,
    LINUX_GLX_VERSION_TOO_LOW,
    LINUX_GLX_NO_GLXFBCONFIGS,
    LINUX_GLX_NO_SUITABLE_GLXFBCONFIG,
    LINUX_GLX_GET_VISUAL_FROM_FBCONFIG_FAILED,
    LINUX_GLX_REQUIRED_EXTENSIONS_MISSING,
    LINUX_GLX_CREATE_CONTEXT_FAILED,
    LINUX_GLX_CREATE_WINDOW_FAILED,
    LINUX_X11_CREATE_WINDOW_FAILED,
    LINUX_EGL_BIND_OPENGL_API_FAILED,
    LINUX_EGL_BIND_OPENGL_ES_API_FAILED,
    LINUX_EGL_GET_DISPLAY_FAILED,
    LINUX_EGL_INITIALIZE_FAILED,
    LINUX_EGL_NO_CONFIGS,
    LINUX_EGL_NO_NATIVE_VISUAL,
    LINUX_EGL_GET_VISUAL_INFO_FAILED,
    LINUX_EGL_CREATE_WINDOW_SURFACE_FAILED,
    LINUX_EGL_CREATE_CONTEXT_FAILED,
    LINUX_EGL_MAKE_CURRENT_FAILED,
    LINUX_X11_OPEN_DISPLAY_FAILED,
    LINUX_X11_QUERY_SYSTEM_DPI_FAILED,
    LINUX_X11_DROPPED_FILE_URI_WRONG_SCHEME,
    ANDROID_UNSUPPORTED_INPUT_EVENT_INPUT_CB,
    ANDROID_UNSUPPORTED_INPUT_EVENT_MAIN_CB,
    ANDROID_READ_MSG_FAILED,
    ANDROID_WRITE_MSG_FAILED,
    ANDROID_MSG_CREATE,
    ANDROID_MSG_RESUME,
    ANDROID_MSG_PAUSE,
    ANDROID_MSG_FOCUS,
    ANDROID_MSG_NO_FOCUS,
    ANDROID_MSG_SET_NATIVE_WINDOW,
    ANDROID_MSG_SET_INPUT_QUEUE,
    ANDROID_MSG_DESTROY,
    ANDROID_UNKNOWN_MSG,
    ANDROID_LOOP_THREAD_STARTED,
    ANDROID_LOOP_THREAD_DONE,
    ANDROID_NATIVE_ACTIVITY_ONSTART,
    ANDROID_NATIVE_ACTIVITY_ONRESUME,
    ANDROID_NATIVE_ACTIVITY_ONSAVEINSTANCESTATE,
    ANDROID_NATIVE_ACTIVITY_ONWINDOWFOCUSCHANGED,
    ANDROID_NATIVE_ACTIVITY_ONPAUSE,
    ANDROID_NATIVE_ACTIVITY_ONSTOP,
    ANDROID_NATIVE_ACTIVITY_ONNATIVEWINDOWCREATED,
    ANDROID_NATIVE_ACTIVITY_ONNATIVEWINDOWDESTROYED,
    ANDROID_NATIVE_ACTIVITY_ONINPUTQUEUECREATED,
    ANDROID_NATIVE_ACTIVITY_ONINPUTQUEUEDESTROYED,
    ANDROID_NATIVE_ACTIVITY_ONCONFIGURATIONCHANGED,
    ANDROID_NATIVE_ACTIVITY_ONLOWMEMORY,
    ANDROID_NATIVE_ACTIVITY_ONDESTROY,
    ANDROID_NATIVE_ACTIVITY_DONE,
    ANDROID_NATIVE_ACTIVITY_ONCREATE,
    ANDROID_CREATE_THREAD_PIPE_FAILED,
    ANDROID_NATIVE_ACTIVITY_CREATE_SUCCESS,
    WGPU_SWAPCHAIN_CREATE_SURFACE_FAILED,
    WGPU_SWAPCHAIN_CREATE_SWAPCHAIN_FAILED,
    WGPU_SWAPCHAIN_CREATE_DEPTH_STENCIL_TEXTURE_FAILED,
    WGPU_SWAPCHAIN_CREATE_DEPTH_STENCIL_VIEW_FAILED,
    WGPU_SWAPCHAIN_CREATE_MSAA_TEXTURE_FAILED,
    WGPU_SWAPCHAIN_CREATE_MSAA_VIEW_FAILED,
    WGPU_REQUEST_DEVICE_STATUS_ERROR,
    WGPU_REQUEST_DEVICE_STATUS_UNKNOWN,
    WGPU_REQUEST_ADAPTER_STATUS_UNAVAILABLE,
    WGPU_REQUEST_ADAPTER_STATUS_ERROR,
    WGPU_REQUEST_ADAPTER_STATUS_UNKNOWN,
    WGPU_CREATE_INSTANCE_FAILED,
    IMAGE_DATA_SIZE_MISMATCH,
    DROPPED_FILE_PATH_TOO_LONG,
    CLIPBOARD_STRING_TOO_BIG,
);
SappLogger :: @struct(
    func: @FnPtr(CStr, u32, u32, CStr, u32, CStr, rawptr) Unit,
    user_data: rawptr,
);
SappDesc :: @struct(
    init_cb: @FnPtr(Unit) Unit,
    frame_cb: @FnPtr(Unit) Unit,
    cleanup_cb: @FnPtr(Unit) Unit,
    event_cb: @FnPtr(*SappEvent) Unit,
    user_data: rawptr,
    init_userdata_cb: @FnPtr(rawptr) Unit,
    frame_userdata_cb: @FnPtr(rawptr) Unit,
    cleanup_userdata_cb: @FnPtr(rawptr) Unit,
    event_userdata_cb: @FnPtr(*SappEvent, rawptr) Unit,
    width: i32,
    height: i32,
    sample_count: i32,
    swap_interval: i32,
    high_dpi: bool,
    fullscreen: bool,
    alpha: bool,
    window_title: CStr,
    enable_clipboard: bool,
    clipboard_size: i32,
    enable_dragndrop: bool,
    max_dropped_files: i32,
    max_dropped_file_path_length: i32,
    icon: SappIconDesc,
    allocator: SappAllocator,
    logger: SappLogger,
    gl_major_version: i32,
    gl_minor_version: i32,
    win32_console_utf8: bool,
    win32_console_create: bool,
    win32_console_attach: bool,
    html5_canvas_name: CStr,
    html5_canvas_resize: bool,
    html5_preserve_drawing_buffer: bool,
    html5_premultiplied_alpha: bool,
    html5_ask_leave_site: bool,
    html5_bubble_mouse_events: bool,
    html5_bubble_touch_events: bool,
    html5_bubble_wheel_events: bool,
    html5_bubble_key_events: bool,
    html5_bubble_char_events: bool,
    html5_use_emsc_set_main_loop: bool,
    html5_emsc_set_main_loop_simulate_infinite_loop: bool,
    ios_keyboard_resizes_canvas: bool,
);
Html5FetchError :: @enum(i32) (
    FETCH_ERROR_NO_ERROR,
    FETCH_ERROR_BUFFER_TOO_SMALL,
    FETCH_ERROR_OTHER,
);
SappHtml5FetchResponse :: @struct(
    succeeded: bool,
    error_code: Html5FetchError,
    file_index: i32,
    data: SappRange,
    buffer: SappRange,
    user_data: rawptr,
);
SappHtml5FetchRequest :: @struct(
    dropped_file_index: i32,
    callback: @FnPtr(*SappHtml5FetchResponse) Unit,
    buffer: SappRange,
    user_data: rawptr,
);
MouseCursor :: @enum(i32) (
    DEFAULT = 0,
    ARROW,
    IBEAM,
    CROSSHAIR,
    POINTING_HAND,
    RESIZE_EW,
    RESIZE_NS,
    RESIZE_NWSE,
    RESIZE_NESW,
    RESIZE_ALL,
    NOT_ALLOWED,
    NUM,
);
fn sapp_isvalid() bool #import("sokol");
fn sapp_width() i32 #import("sokol");
fn sapp_widthf() f32 #import("sokol");
fn sapp_height() i32 #import("sokol");
fn sapp_heightf() f32 #import("sokol");
fn sapp_color_format() i32 #import("sokol");
fn sapp_depth_format() i32 #import("sokol");
fn sapp_sample_count() i32 #import("sokol");
fn sapp_high_dpi() bool #import("sokol");
fn sapp_dpi_scale() f32 #import("sokol");
fn sapp_show_keyboard(show: bool) Unit #import("sokol");
fn sapp_keyboard_shown() bool #import("sokol");
fn sapp_is_fullscreen() bool #import("sokol");
fn sapp_toggle_fullscreen() Unit #import("sokol");
fn sapp_show_mouse(show: bool) Unit #import("sokol");
fn sapp_mouse_shown() bool #import("sokol");
fn sapp_lock_mouse(lock: bool) Unit #import("sokol");
fn sapp_mouse_locked() bool #import("sokol");
fn sapp_set_mouse_cursor(cursor: MouseCursor) Unit #import("sokol");
fn sapp_get_mouse_cursor() MouseCursor #import("sokol");
fn sapp_userdata() rawptr #import("sokol");
fn sapp_query_desc() SappDesc #import("sokol");
fn sapp_request_quit() Unit #import("sokol");
fn sapp_cancel_quit() Unit #import("sokol");
fn sapp_quit() Unit #import("sokol");
fn sapp_consume_event() Unit #import("sokol");
fn sapp_frame_count() u64 #import("sokol");
fn sapp_frame_duration() f64 #import("sokol");
fn sapp_set_clipboard_string(str: CStr) Unit #import("sokol");
fn sapp_get_clipboard_string() CStr #import("sokol");
fn sapp_set_window_title(str: CStr) Unit #import("sokol");
fn sapp_set_icon(icon_desc: *SappIconDesc) Unit #import("sokol");
fn sapp_get_num_dropped_files() i32 #import("sokol");
fn sapp_get_dropped_file_path(index: i32) CStr #import("sokol");
fn sapp_run(desc: *SappDesc) Unit #import("sokol");
fn sapp_egl_get_display() rawptr #import("sokol");
fn sapp_egl_get_context() rawptr #import("sokol");
fn sapp_html5_ask_leave_site(ask: bool) Unit #import("sokol");
fn sapp_html5_get_dropped_file_size(index: i32) u32 #import("sokol");
fn sapp_html5_fetch_dropped_file(request: *SappHtml5FetchRequest) Unit #import("sokol");
fn sapp_metal_get_device() rawptr #import("sokol");
fn sapp_metal_get_current_drawable() rawptr #import("sokol");
fn sapp_metal_get_depth_stencil_texture() rawptr #import("sokol");
fn sapp_metal_get_msaa_color_texture() rawptr #import("sokol");
fn sapp_macos_get_window() rawptr #import("sokol");
fn sapp_ios_get_window() rawptr #import("sokol");
fn sapp_d3d11_get_device() rawptr #import("sokol");
fn sapp_d3d11_get_device_context() rawptr #import("sokol");
fn sapp_d3d11_get_swap_chain() rawptr #import("sokol");
fn sapp_d3d11_get_render_view() rawptr #import("sokol");
fn sapp_d3d11_get_resolve_view() rawptr #import("sokol");
fn sapp_d3d11_get_depth_stencil_view() rawptr #import("sokol");
fn sapp_win32_get_hwnd() rawptr #import("sokol");
fn sapp_wgpu_get_device() rawptr #import("sokol");
fn sapp_wgpu_get_render_view() rawptr #import("sokol");
fn sapp_wgpu_get_resolve_view() rawptr #import("sokol");
fn sapp_wgpu_get_depth_stencil_view() rawptr #import("sokol");
fn sapp_gl_get_framebuffer() u32 #import("sokol");
fn sapp_gl_get_major_version() i32 #import("sokol");
fn sapp_gl_get_minor_version() i32 #import("sokol");
fn sapp_android_get_native_activity() rawptr #import("sokol");
//! glue
// machine generated, do not edit

fn sglue_environment() SgEnvironment #import("sokol");
fn sglue_swapchain() SgSwapchain #import("sokol");
//! time
// machine generated, do not edit

fn stm_setup() Unit #import("sokol");
fn stm_now() u64 #import("sokol");
fn stm_diff(new_ticks: u64, old_ticks: u64) u64 #import("sokol");
fn stm_since(start_ticks: u64) u64 #import("sokol");
fn stm_laptime(last_time: *u64) u64 #import("sokol");
fn stm_round_to_common_refresh_rate(frame_ticks: u64) u64 #import("sokol");
fn stm_sec(ticks: u64) f64 #import("sokol");
fn stm_ms(ticks: u64) f64 #import("sokol");
fn stm_us(ticks: u64) f64 #import("sokol");
fn stm_ns(ticks: u64) f64 #import("sokol");
//! audio
// machine generated, do not edit

saudio_LogItem :: @enum(i32) (
    OK,
    MALLOC_FAILED,
    ALSA_SND_PCM_OPEN_FAILED,
    ALSA_FLOAT_SAMPLES_NOT_SUPPORTED,
    ALSA_REQUESTED_BUFFER_SIZE_NOT_SUPPORTED,
    ALSA_REQUESTED_CHANNEL_COUNT_NOT_SUPPORTED,
    ALSA_SND_PCM_HW_PARAMS_SET_RATE_NEAR_FAILED,
    ALSA_SND_PCM_HW_PARAMS_FAILED,
    ALSA_PTHREAD_CREATE_FAILED,
    WASAPI_CREATE_EVENT_FAILED,
    WASAPI_CREATE_DEVICE_ENUMERATOR_FAILED,
    WASAPI_GET_DEFAULT_AUDIO_ENDPOINT_FAILED,
    WASAPI_DEVICE_ACTIVATE_FAILED,
    WASAPI_AUDIO_CLIENT_INITIALIZE_FAILED,
    WASAPI_AUDIO_CLIENT_GET_BUFFER_SIZE_FAILED,
    WASAPI_AUDIO_CLIENT_GET_SERVICE_FAILED,
    WASAPI_AUDIO_CLIENT_SET_EVENT_HANDLE_FAILED,
    WASAPI_CREATE_THREAD_FAILED,
    AAUDIO_STREAMBUILDER_OPEN_STREAM_FAILED,
    AAUDIO_PTHREAD_CREATE_FAILED,
    AAUDIO_RESTARTING_STREAM_AFTER_ERROR,
    USING_AAUDIO_BACKEND,
    AAUDIO_CREATE_STREAMBUILDER_FAILED,
    USING_SLES_BACKEND,
    SLES_CREATE_ENGINE_FAILED,
    SLES_ENGINE_GET_ENGINE_INTERFACE_FAILED,
    SLES_CREATE_OUTPUT_MIX_FAILED,
    SLES_MIXER_GET_VOLUME_INTERFACE_FAILED,
    SLES_ENGINE_CREATE_AUDIO_PLAYER_FAILED,
    SLES_PLAYER_GET_PLAY_INTERFACE_FAILED,
    SLES_PLAYER_GET_VOLUME_INTERFACE_FAILED,
    SLES_PLAYER_GET_BUFFERQUEUE_INTERFACE_FAILED,
    COREAUDIO_NEW_OUTPUT_FAILED,
    COREAUDIO_ALLOCATE_BUFFER_FAILED,
    COREAUDIO_START_FAILED,
    BACKEND_BUFFER_SIZE_ISNT_MULTIPLE_OF_PACKET_SIZE,
);
SaudioLogger :: @struct(
    func: @FnPtr(CStr, u32, u32, CStr, u32, CStr, rawptr) Unit,
    user_data: rawptr,
);
SaudioAllocator :: @struct(
    alloc_fn: @FnPtr(usize, rawptr) rawptr,
    free_fn: @FnPtr(rawptr, rawptr) Unit,
    user_data: rawptr,
);
SaudioDesc :: @struct(
    sample_rate: i32,
    num_channels: i32,
    buffer_frames: i32,
    packet_frames: i32,
    num_packets: i32,
    stream_cb: @FnPtr(*f32, i32, i32) Unit,
    stream_userdata_cb: @FnPtr(*f32, i32, i32, rawptr) Unit,
    user_data: rawptr,
    allocator: SaudioAllocator,
    logger: SaudioLogger,
);
fn saudio_setup(desc: *SaudioDesc) Unit #import("sokol");
fn saudio_shutdown() Unit #import("sokol");
fn saudio_isvalid() bool #import("sokol");
fn saudio_userdata() rawptr #import("sokol");
fn saudio_query_desc() SaudioDesc #import("sokol");
fn saudio_sample_rate() i32 #import("sokol");
fn saudio_buffer_frames() i32 #import("sokol");
fn saudio_channels() i32 #import("sokol");
fn saudio_suspended() bool #import("sokol");
fn saudio_expect() i32 #import("sokol");
fn saudio_push(frames: *f32, num_frames: i32) i32 #import("sokol");
//! gl
// machine generated, do not edit

sgl_LogItem :: @enum(i32) (
    OK,
    MALLOC_FAILED,
    MAKE_PIPELINE_FAILED,
    PIPELINE_POOL_EXHAUSTED,
    ADD_COMMIT_LISTENER_FAILED,
    CONTEXT_POOL_EXHAUSTED,
    CANNOT_DESTROY_DEFAULT_CONTEXT,
);
SglLogger :: @struct(
    func: @FnPtr(CStr, u32, u32, CStr, u32, CStr, rawptr) Unit,
    user_data: rawptr,
);
SglPipeline :: @struct(
    id: u32,
);
SglContext :: @struct(
    id: u32,
);
Error :: @enum(i32) (
    ERROR = 0,
    VERTICES_FULL,
    UNIFORMS_FULL,
    COMMANDS_FULL,
    STACK_OVERFLOW,
    STACK_UNDERFLOW,
    NO_CONTEXT,
);
SglContextDesc :: @struct(
    max_vertices: i32,
    max_commands: i32,
    color_format: sg.PixelFormat,
    depth_format: sg.PixelFormat,
    sample_count: i32,
);
SglAllocator :: @struct(
    alloc_fn: @FnPtr(usize, rawptr) rawptr,
    free_fn: @FnPtr(rawptr, rawptr) Unit,
    user_data: rawptr,
);
SglDesc :: @struct(
    max_vertices: i32,
    max_commands: i32,
    context_pool_size: i32,
    pipeline_pool_size: i32,
    color_format: sg.PixelFormat,
    depth_format: sg.PixelFormat,
    sample_count: i32,
    face_winding: sg.FaceWinding,
    allocator: SglAllocator,
    logger: SglLogger,
);
fn sgl_setup(desc: *SglDesc) Unit #import("sokol");
fn sgl_shutdown() Unit #import("sokol");
fn sgl_rad(deg: f32) f32 #import("sokol");
fn sgl_deg(rad: f32) f32 #import("sokol");
fn sgl_error() Error #import("sokol");
fn sgl_context_error(ctx: SglContext) Error #import("sokol");
fn sgl_make_context(desc: *SglContextDesc) SglContext #import("sokol");
fn sgl_destroy_context(ctx: SglContext) Unit #import("sokol");
fn sgl_set_context(ctx: SglContext) Unit #import("sokol");
fn sgl_get_context() SglContext #import("sokol");
fn sgl_default_context() SglContext #import("sokol");
fn sgl_draw() Unit #import("sokol");
fn sgl_context_draw(ctx: SglContext) Unit #import("sokol");
fn sgl_draw_layer(layer_id: i32) Unit #import("sokol");
fn sgl_context_draw_layer(ctx: SglContext, layer_id: i32) Unit #import("sokol");
fn sgl_make_pipeline(desc: *SgPipelineDesc) SglPipeline #import("sokol");
fn sgl_context_make_pipeline(ctx: SglContext, desc: *SgPipelineDesc) SglPipeline #import("sokol");
fn sgl_destroy_pipeline(pip: SglPipeline) Unit #import("sokol");
fn sgl_defaults() Unit #import("sokol");
fn sgl_viewport(x: i32, y: i32, w: i32, h: i32, origin_top_left: bool) Unit #import("sokol");
fn sgl_viewportf(x: f32, y: f32, w: f32, h: f32, origin_top_left: bool) Unit #import("sokol");
fn sgl_scissor_rect(x: i32, y: i32, w: i32, h: i32, origin_top_left: bool) Unit #import("sokol");
fn sgl_scissor_rectf(x: f32, y: f32, w: f32, h: f32, origin_top_left: bool) Unit #import("sokol");
fn sgl_enable_texture() Unit #import("sokol");
fn sgl_disable_texture() Unit #import("sokol");
fn sgl_texture(img: SgImage, smp: SgSampler) Unit #import("sokol");
fn sgl_layer(layer_id: i32) Unit #import("sokol");
fn sgl_load_default_pipeline() Unit #import("sokol");
fn sgl_load_pipeline(pip: SglPipeline) Unit #import("sokol");
fn sgl_push_pipeline() Unit #import("sokol");
fn sgl_pop_pipeline() Unit #import("sokol");
fn sgl_matrix_mode_modelview() Unit #import("sokol");
fn sgl_matrix_mode_projection() Unit #import("sokol");
fn sgl_matrix_mode_texture() Unit #import("sokol");
fn sgl_load_identity() Unit #import("sokol");
fn sgl_load_matrix(m: *f32) Unit #import("sokol");
fn sgl_load_transpose_matrix(m: *f32) Unit #import("sokol");
fn sgl_mult_matrix(m: *f32) Unit #import("sokol");
fn sgl_mult_transpose_matrix(m: *f32) Unit #import("sokol");
fn sgl_rotate(angle_rad: f32, x: f32, y: f32, z: f32) Unit #import("sokol");
fn sgl_scale(x: f32, y: f32, z: f32) Unit #import("sokol");
fn sgl_translate(x: f32, y: f32, z: f32) Unit #import("sokol");
fn sgl_frustum(l: f32, r: f32, b: f32, t: f32, n: f32, f: f32) Unit #import("sokol");
fn sgl_ortho(l: f32, r: f32, b: f32, t: f32, n: f32, f: f32) Unit #import("sokol");
fn sgl_perspective(fov_y: f32, aspect: f32, z_near: f32, z_far: f32) Unit #import("sokol");
fn sgl_lookat(eye_x: f32, eye_y: f32, eye_z: f32, center_x: f32, center_y: f32, center_z: f32, up_x: f32, up_y: f32, up_z: f32) Unit #import("sokol");
fn sgl_push_matrix() Unit #import("sokol");
fn sgl_pop_matrix() Unit #import("sokol");
fn sgl_t2f(u: f32, v: f32) Unit #import("sokol");
fn sgl_c3f(r: f32, g: f32, b: f32) Unit #import("sokol");
fn sgl_c4f(r: f32, g: f32, b: f32, a: f32) Unit #import("sokol");
fn sgl_c3b(r: u8, g: u8, b: u8) Unit #import("sokol");
fn sgl_c4b(r: u8, g: u8, b: u8, a: u8) Unit #import("sokol");
fn sgl_c1i(rgba: u32) Unit #import("sokol");
fn sgl_point_size(s: f32) Unit #import("sokol");
fn sgl_begin_points() Unit #import("sokol");
fn sgl_begin_lines() Unit #import("sokol");
fn sgl_begin_line_strip() Unit #import("sokol");
fn sgl_begin_triangles() Unit #import("sokol");
fn sgl_begin_triangle_strip() Unit #import("sokol");
fn sgl_begin_quads() Unit #import("sokol");
fn sgl_v2f(x: f32, y: f32) Unit #import("sokol");
fn sgl_v3f(x: f32, y: f32, z: f32) Unit #import("sokol");
fn sgl_v2f_t2f(x: f32, y: f32, u: f32, v: f32) Unit #import("sokol");
fn sgl_v3f_t2f(x: f32, y: f32, z: f32, u: f32, v: f32) Unit #import("sokol");
fn sgl_v2f_c3f(x: f32, y: f32, r: f32, g: f32, b: f32) Unit #import("sokol");
fn sgl_v2f_c3b(x: f32, y: f32, r: u8, g: u8, b: u8) Unit #import("sokol");
fn sgl_v2f_c4f(x: f32, y: f32, r: f32, g: f32, b: f32, a: f32) Unit #import("sokol");
fn sgl_v2f_c4b(x: f32, y: f32, r: u8, g: u8, b: u8, a: u8) Unit #import("sokol");
fn sgl_v2f_c1i(x: f32, y: f32, rgba: u32) Unit #import("sokol");
fn sgl_v3f_c3f(x: f32, y: f32, z: f32, r: f32, g: f32, b: f32) Unit #import("sokol");
fn sgl_v3f_c3b(x: f32, y: f32, z: f32, r: u8, g: u8, b: u8) Unit #import("sokol");
fn sgl_v3f_c4f(x: f32, y: f32, z: f32, r: f32, g: f32, b: f32, a: f32) Unit #import("sokol");
fn sgl_v3f_c4b(x: f32, y: f32, z: f32, r: u8, g: u8, b: u8, a: u8) Unit #import("sokol");
fn sgl_v3f_c1i(x: f32, y: f32, z: f32, rgba: u32) Unit #import("sokol");
fn sgl_v2f_t2f_c3f(x: f32, y: f32, u: f32, v: f32, r: f32, g: f32, b: f32) Unit #import("sokol");
fn sgl_v2f_t2f_c3b(x: f32, y: f32, u: f32, v: f32, r: u8, g: u8, b: u8) Unit #import("sokol");
fn sgl_v2f_t2f_c4f(x: f32, y: f32, u: f32, v: f32, r: f32, g: f32, b: f32, a: f32) Unit #import("sokol");
fn sgl_v2f_t2f_c4b(x: f32, y: f32, u: f32, v: f32, r: u8, g: u8, b: u8, a: u8) Unit #import("sokol");
fn sgl_v2f_t2f_c1i(x: f32, y: f32, u: f32, v: f32, rgba: u32) Unit #import("sokol");
fn sgl_v3f_t2f_c3f(x: f32, y: f32, z: f32, u: f32, v: f32, r: f32, g: f32, b: f32) Unit #import("sokol");
fn sgl_v3f_t2f_c3b(x: f32, y: f32, z: f32, u: f32, v: f32, r: u8, g: u8, b: u8) Unit #import("sokol");
fn sgl_v3f_t2f_c4f(x: f32, y: f32, z: f32, u: f32, v: f32, r: f32, g: f32, b: f32, a: f32) Unit #import("sokol");
fn sgl_v3f_t2f_c4b(x: f32, y: f32, z: f32, u: f32, v: f32, r: u8, g: u8, b: u8, a: u8) Unit #import("sokol");
fn sgl_v3f_t2f_c1i(x: f32, y: f32, z: f32, u: f32, v: f32, rgba: u32) Unit #import("sokol");
fn sgl_end() Unit #import("sokol");
//! debugtext
// machine generated, do not edit

sdtx_LogItem :: @enum(i32) (
    OK,
    MALLOC_FAILED,
    ADD_COMMIT_LISTENER_FAILED,
    COMMAND_BUFFER_FULL,
    CONTEXT_POOL_EXHAUSTED,
    CANNOT_DESTROY_DEFAULT_CONTEXT,
);
SdtxLogger :: @struct(
    func: @FnPtr(CStr, u32, u32, CStr, u32, CStr, rawptr) Unit,
    user_data: rawptr,
);
SdtxContext :: @struct(
    id: u32,
);
SdtxRange :: @struct(
    ptr: rawptr,
    size: usize,
);
SdtxFontDesc :: @struct(
    data: SdtxRange,
    first_char: u8,
    last_char: u8,
);
SdtxContextDesc :: @struct(
    max_commands: i32,
    char_buf_size: i32,
    canvas_width: f32,
    canvas_height: f32,
    tab_width: i32,
    color_format: sg.PixelFormat,
    depth_format: sg.PixelFormat,
    sample_count: i32,
);
SdtxAllocator :: @struct(
    alloc_fn: @FnPtr(usize, rawptr) rawptr,
    free_fn: @FnPtr(rawptr, rawptr) Unit,
    user_data: rawptr,
);
SdtxDesc :: @struct(
    context_pool_size: i32,
    printf_buf_size: i32,
    fonts: Array(SdtxFontDesc, 8),
    context: SdtxContextDesc,
    allocator: SdtxAllocator,
    logger: SdtxLogger,
);
fn sdtx_setup(desc: *SdtxDesc) Unit #import("sokol");
fn sdtx_shutdown() Unit #import("sokol");
fn sdtx_font_kc853() SdtxFontDesc #import("sokol");
fn sdtx_font_kc854() SdtxFontDesc #import("sokol");
fn sdtx_font_z1013() SdtxFontDesc #import("sokol");
fn sdtx_font_cpc() SdtxFontDesc #import("sokol");
fn sdtx_font_c64() SdtxFontDesc #import("sokol");
fn sdtx_font_oric() SdtxFontDesc #import("sokol");
fn sdtx_make_context(desc: *SdtxContextDesc) SdtxContext #import("sokol");
fn sdtx_destroy_context(ctx: SdtxContext) Unit #import("sokol");
fn sdtx_set_context(ctx: SdtxContext) Unit #import("sokol");
fn sdtx_get_context() SdtxContext #import("sokol");
fn sdtx_default_context() SdtxContext #import("sokol");
fn sdtx_draw() Unit #import("sokol");
fn sdtx_context_draw(ctx: SdtxContext) Unit #import("sokol");
fn sdtx_draw_layer(layer_id: i32) Unit #import("sokol");
fn sdtx_context_draw_layer(ctx: SdtxContext, layer_id: i32) Unit #import("sokol");
fn sdtx_layer(layer_id: i32) Unit #import("sokol");
fn sdtx_font(font_index: i32) Unit #import("sokol");
fn sdtx_canvas(w: f32, h: f32) Unit #import("sokol");
fn sdtx_origin(x: f32, y: f32) Unit #import("sokol");
fn sdtx_home() Unit #import("sokol");
fn sdtx_pos(x: f32, y: f32) Unit #import("sokol");
fn sdtx_pos_x(x: f32) Unit #import("sokol");
fn sdtx_pos_y(y: f32) Unit #import("sokol");
fn sdtx_move(dx: f32, dy: f32) Unit #import("sokol");
fn sdtx_move_x(dx: f32) Unit #import("sokol");
fn sdtx_move_y(dy: f32) Unit #import("sokol");
fn sdtx_crlf() Unit #import("sokol");
fn sdtx_color3b(r: u8, g: u8, b: u8) Unit #import("sokol");
fn sdtx_color3f(r: f32, g: f32, b: f32) Unit #import("sokol");
fn sdtx_color4b(r: u8, g: u8, b: u8, a: u8) Unit #import("sokol");
fn sdtx_color4f(r: f32, g: f32, b: f32, a: f32) Unit #import("sokol");
fn sdtx_color1i(rgba: u32) Unit #import("sokol");
fn sdtx_putc(c: u8) Unit #import("sokol");
fn sdtx_puts(str: CStr) Unit #import("sokol");
fn sdtx_putr(str: CStr, len: i32) Unit #import("sokol");
//! shape
// machine generated, do not edit

SshapeRange :: @struct(
    ptr: rawptr,
    size: usize,
);
SshapeMat4 :: @struct(
    m: Array(Array(f32, 4), 4),
);
SshapeVertex :: @struct(
    x: f32,
    y: f32,
    z: f32,
    normal: u32,
    u: u16,
    v: u16,
    color: u32,
);
SshapeElementRange :: @struct(
    base_element: i32,
    num_elements: i32,
);
SshapeSizesItem :: @struct(
    num: u32,
    size: u32,
);
SshapeSizes :: @struct(
    vertices: SshapeSizesItem,
    indices: SshapeSizesItem,
);
SshapeBufferItem :: @struct(
    buffer: SshapeRange,
    data_size: usize,
    shape_offset: usize,
);
SshapeBuffer :: @struct(
    valid: bool,
    vertices: SshapeBufferItem,
    indices: SshapeBufferItem,
);
SshapePlane :: @struct(
    width: f32,
    depth: f32,
    tiles: u16,
    color: u32,
    random_colors: bool,
    merge: bool,
    transform: SshapeMat4,
);
SshapeBox :: @struct(
    width: f32,
    height: f32,
    depth: f32,
    tiles: u16,
    color: u32,
    random_colors: bool,
    merge: bool,
    transform: SshapeMat4,
);
SshapeSphere :: @struct(
    radius: f32,
    slices: u16,
    stacks: u16,
    color: u32,
    random_colors: bool,
    merge: bool,
    transform: SshapeMat4,
);
SshapeCylinder :: @struct(
    radius: f32,
    height: f32,
    slices: u16,
    stacks: u16,
    color: u32,
    random_colors: bool,
    merge: bool,
    transform: SshapeMat4,
);
SshapeTorus :: @struct(
    radius: f32,
    ring_radius: f32,
    sides: u16,
    rings: u16,
    color: u32,
    random_colors: bool,
    merge: bool,
    transform: SshapeMat4,
);
fn sshape_build_plane(buf: *SshapeBuffer, params: *SshapePlane) SshapeBuffer #import("sokol");
fn sshape_build_box(buf: *SshapeBuffer, params: *SshapeBox) SshapeBuffer #import("sokol");
fn sshape_build_sphere(buf: *SshapeBuffer, params: *SshapeSphere) SshapeBuffer #import("sokol");
fn sshape_build_cylinder(buf: *SshapeBuffer, params: *SshapeCylinder) SshapeBuffer #import("sokol");
fn sshape_build_torus(buf: *SshapeBuffer, params: *SshapeTorus) SshapeBuffer #import("sokol");
fn sshape_plane_sizes(tiles: u32) SshapeSizes #import("sokol");
fn sshape_box_sizes(tiles: u32) SshapeSizes #import("sokol");
fn sshape_sphere_sizes(slices: u32, stacks: u32) SshapeSizes #import("sokol");
fn sshape_cylinder_sizes(slices: u32, stacks: u32) SshapeSizes #import("sokol");
fn sshape_torus_sizes(sides: u32, rings: u32) SshapeSizes #import("sokol");
fn sshape_element_range(buf: *SshapeBuffer) SshapeElementRange #import("sokol");
fn sshape_vertex_buffer_desc(buf: *SshapeBuffer) SgBufferDesc #import("sokol");
fn sshape_index_buffer_desc(buf: *SshapeBuffer) SgBufferDesc #import("sokol");
fn sshape_vertex_buffer_layout_state() SgVertexBufferLayoutState #import("sokol");
fn sshape_position_vertex_attr_state() SgVertexAttrState #import("sokol");
fn sshape_normal_vertex_attr_state() SgVertexAttrState #import("sokol");
fn sshape_texcoord_vertex_attr_state() SgVertexAttrState #import("sokol");
fn sshape_color_vertex_attr_state() SgVertexAttrState #import("sokol");
fn sshape_color_4f(r: f32, g: f32, b: f32, a: f32) u32 #import("sokol");
fn sshape_color_3f(r: f32, g: f32, b: f32) u32 #import("sokol");
fn sshape_color_4b(r: u8, g: u8, b: u8, a: u8) u32 #import("sokol");
fn sshape_color_3b(r: u8, g: u8, b: u8) u32 #import("sokol");
fn sshape_mat4(m: *f32) SshapeMat4 #import("sokol");
fn sshape_mat4_transpose(m: *f32) SshapeMat4 #import("sokol");
