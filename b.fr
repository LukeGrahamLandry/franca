fn disassemble(p: *u8, l: i64) void #export = {
    OS[].it = .macos;
    push_zeroed_dynamic_context {
        c := context(DefaultContext);
        temporary_allocator: ArenaAlloc = init(page_allocator, 1.shift_left(20));
        set_temporary_allocator(temporary_allocator&);
        c.general_allocator = page_allocator;
        c.panic_hook = print_and_exit1;
        _ := allocate(l);
        a := u8.list(10, temp());
        scary_log(@as(i64) @as(Arch) current_arch());
        scary_log(@as(i64) c.current_os.zext());
        scary_log(@as(i64) is_linking_libc().int());
        scary_log(@as(i64) prefer_syscalls().int());
        a&.drop();
        //println("xxx");  // TODO: this loops forever
        import("@/examples/dump_wasm.fr")'dump(ptr = p, len = l);
    };
}

#use("@/lib/sys/process.fr");

fn allocate(l: i64) *u8 #export = {
    OS[].it = .macos;
    page_allocator.alloc_uninit(u8, l).as_ptr()
}
